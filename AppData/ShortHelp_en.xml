<?xml version="1.0" encoding="UTF-8" ?>
<PHPNotepad>
  <Help>
    <FName>APCIterator::__construct</FName>
    <Desc>public APCIterator::__construct ( string $cache [, mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE ]]]] )
Constructs an APCIterator object.
</Desc>
    <FName>APCIterator::current</FName>
    <Desc>public mixed APCIterator::current ( void )
Gets the current item from the APCIterator stack.
</Desc>
    <FName>APCIterator::getTotalCount</FName>
    <Desc>public int APCIterator::getTotalCount ( void )
Get the total count. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>APCIterator::getTotalHits</FName>
    <Desc>public int APCIterator::getTotalHits ( void )
Gets the total number of cache hits. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>APCIterator::getTotalSize</FName>
    <Desc>public int APCIterator::getTotalSize ( void )
Gets the total cache size. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>APCIterator::key</FName>
    <Desc>public string APCIterator::key ( void )
Gets the current iterator key.
</Desc>
    <FName>APCIterator::next</FName>
    <Desc>public void APCIterator::next ( void )
Moves the iterator pointer to the next element.
</Desc>
    <FName>APCIterator::rewind</FName>
    <Desc>public void APCIterator::rewind ( void )
Rewinds back the iterator to the first element.
</Desc>
    <FName>APCIterator::valid</FName>
    <Desc>public void APCIterator::valid ( void )
Checks if the current iterator position is valid.
</Desc>
    <FName>APCUIterator::__construct</FName>
    <Desc>public APCUIterator::__construct ([ mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE ]]]] )
Constructs an APCUIterator object.
</Desc>
    <FName>APCUIterator::current</FName>
    <Desc>public mixed APCUIterator::current ( void )
Gets the current item from the APCUIterator stack.
</Desc>
    <FName>APCUIterator::getTotalCount</FName>
    <Desc>public int APCUIterator::getTotalCount ( void )
Get the total count. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>APCUIterator::getTotalHits</FName>
    <Desc>public int APCUIterator::getTotalHits ( void )
Gets the total number of cache hits. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>APCUIterator::getTotalSize</FName>
    <Desc>public int APCUIterator::getTotalSize ( void )
Gets the total cache size. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>APCUIterator::key</FName>
    <Desc>public string APCUIterator::key ( void )
Gets the current iterator key.
</Desc>
    <FName>APCUIterator::next</FName>
    <Desc>public void APCUIterator::next ( void )
Moves the iterator pointer to the next element.
</Desc>
    <FName>APCUIterator::rewind</FName>
    <Desc>public void APCUIterator::rewind ( void )
Rewinds back the iterator to the first element.
</Desc>
    <FName>APCUIterator::valid</FName>
    <Desc>public void APCUIterator::valid ( void )
Checks if the current iterator position is valid.
</Desc>
    <FName>AppendIterator::append</FName>
    <Desc>public void AppendIterator::append ( Iterator $iterator )
Appends an iterator.
</Desc>
    <FName>AppendIterator::__construct</FName>
    <Desc>public AppendIterator::__construct ( void )
Constructs an AppendIterator.
</Desc>
    <FName>AppendIterator::current</FName>
    <Desc>public mixed AppendIterator::current ( void )
Gets the current value.
</Desc>
    <FName>AppendIterator::getArrayIterator</FName>
    <Desc>public ArrayIterator AppendIterator::getArrayIterator ( void )
This method gets the ArrayIterator that is used to store the iterators added with AppendIterator::append().
</Desc>
    <FName>AppendIterator::getInnerIterator</FName>
    <Desc>public Iterator AppendIterator::getInnerIterator ( void )
This method returns the current inner iterator.
</Desc>
    <FName>AppendIterator::getIteratorIndex</FName>
    <Desc>public int AppendIterator::getIteratorIndex ( void )
Gets the index of the current inner iterator.
</Desc>
    <FName>AppendIterator::key</FName>
    <Desc>public scalar AppendIterator::key ( void )
Get the current key.
</Desc>
    <FName>AppendIterator::next</FName>
    <Desc>public void AppendIterator::next ( void )
Moves to the next element. If this means to another Iterator then it rewinds that Iterator.
</Desc>
    <FName>AppendIterator::rewind</FName>
    <Desc>public void AppendIterator::rewind ( void )
Rewind to the first element of the first inner Iterator.
</Desc>
    <FName>AppendIterator::valid</FName>
    <Desc>public bool AppendIterator::valid ( void )
Checks validity of the current element.
</Desc>
    <FName>ArrayAccess::offsetExists</FName>
    <Desc>abstract public bool ArrayAccess::offsetExists ( mixed $offset )
Whether or not an offset exists. 
This method is executed when using isset() or empty() on objects implementing ArrayAccess. 
Note: 
When using empty() ArrayAccess::offsetGet() will be called and checked if empty only if ArrayAccess::offsetExists() returns TRUE.
</Desc>
    <FName>ArrayAccess::offsetGet</FName>
    <Desc>abstract public mixed ArrayAccess::offsetGet ( mixed $offset )
Returns the value at specified offset. 
This method is executed when checking if offset is empty().
</Desc>
    <FName>ArrayAccess::offsetSet</FName>
    <Desc>abstract public void ArrayAccess::offsetSet ( mixed $offset , mixed $value )
Assigns a value to the specified offset.
</Desc>
    <FName>ArrayAccess::offsetUnset</FName>
    <Desc>abstract public void ArrayAccess::offsetUnset ( mixed $offset )
Unsets an offset. 
Note: 
This method will not be called when type-casting to (unset)
</Desc>
    <FName>ArrayIterator::append</FName>
    <Desc>public void ArrayIterator::append ( mixed $value )
Appends value as the last element. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::asort</FName>
    <Desc>public void ArrayIterator::asort ( void )
Sorts an array by values. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::__construct</FName>
    <Desc>public ArrayIterator::__construct ([ mixed $array = array() [, int $flags = 0 ]] )
Constructs an ArrayIterator object. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::count</FName>
    <Desc>public int ArrayIterator::count ( void )
Gets the number of elements in the array, or the number of public properties in the object. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::current</FName>
    <Desc>public mixed ArrayIterator::current ( void )
Get the current array entry.
</Desc>
    <FName>ArrayIterator::getArrayCopy</FName>
    <Desc>public array ArrayIterator::getArrayCopy ( void )
Get a copy of an array. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::getFlags</FName>
    <Desc>public void ArrayIterator::getFlags ( void )
Gets the behavior flags of the ArrayIterator. See the ArrayIterator::setFlags method for a list of the available flags.
</Desc>
    <FName>ArrayIterator::key</FName>
    <Desc>public mixed ArrayIterator::key ( void )
This function returns the current array key
</Desc>
    <FName>ArrayIterator::ksort</FName>
    <Desc>public void ArrayIterator::ksort ( void )
Sorts an array by the keys. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::natcasesort</FName>
    <Desc>public void ArrayIterator::natcasesort ( void )
Sort the entries by values using a case insensitive "natural order" algorithm. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::natsort</FName>
    <Desc>public void ArrayIterator::natsort ( void )
Sort the entries by values using "natural order" algorithm. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::next</FName>
    <Desc>public void ArrayIterator::next ( void )
The iterator to the next entry.
</Desc>
    <FName>ArrayIterator::offsetExists</FName>
    <Desc>public bool ArrayIterator::offsetExists ( mixed $index )
Checks if the offset exists. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::offsetGet</FName>
    <Desc>public mixed ArrayIterator::offsetGet ( mixed $index )
Gets the value from the provided offset. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::offsetSet</FName>
    <Desc>public void ArrayIterator::offsetSet ( mixed $index , mixed $newval )
Sets a value for a given offset. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::offsetUnset</FName>
    <Desc>public void ArrayIterator::offsetUnset ( mixed $index )
Unsets a value for an offset. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::rewind</FName>
    <Desc>public void ArrayIterator::rewind ( void )
This rewinds the iterator to the beginning.
</Desc>
    <FName>ArrayIterator::seek</FName>
    <Desc>public void ArrayIterator::seek ( int $position )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::serialize</FName>
    <Desc>public string ArrayIterator::serialize ( void )
Serialize. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::setFlags</FName>
    <Desc>public void ArrayIterator::setFlags ( string $flags )
Set the flags that change the behavior of the ArrayIterator.
</Desc>
    <FName>ArrayIterator::uasort</FName>
    <Desc>public void ArrayIterator::uasort ( callable $cmp_function )
This method sorts the elements such that indices maintain their correlation with the values they are associated with, using a user-defined comparison function. 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined.
</Desc>
    <FName>ArrayIterator::uksort</FName>
    <Desc>public void ArrayIterator::uksort ( callable $cmp_function )
This method sorts the elements by keys using a user-supplied comparison function. 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined.
</Desc>
    <FName>ArrayIterator::unserialize</FName>
    <Desc>public string ArrayIterator::unserialize ( string $serialized )
Unserialize. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayIterator::valid</FName>
    <Desc>public bool ArrayIterator::valid ( void )
Checks if the array contains any more entries.
</Desc>
    <FName>ArrayObject::append</FName>
    <Desc>public void ArrayObject::append ( mixed $value )
Appends a new value as the last element. 
Note: 
This method cannot be called when the ArrayObject was constructed from an object. Use ArrayObject::offsetSet() instead.
</Desc>
    <FName>ArrayObject::asort</FName>
    <Desc>public void ArrayObject::asort ( void )
Sorts the entries such that the keys maintain their correlation with the entries they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.
</Desc>
    <FName>ArrayObject::__construct</FName>
    <Desc>public ArrayObject::__construct ([ mixed $input = array() [, int $flags = 0 [, string $iterator_class = "ArrayIterator" ]]] )
This constructs a new array object.
</Desc>
    <FName>ArrayObject::count</FName>
    <Desc>public int ArrayObject::count ( void )
Get the number of public properties in the ArrayObject.
</Desc>
    <FName>ArrayObject::exchangeArray</FName>
    <Desc>public array ArrayObject::exchangeArray ( mixed $input )
Exchange the current array with another array or object.
</Desc>
    <FName>ArrayObject::getArrayCopy</FName>
    <Desc>public array ArrayObject::getArrayCopy ( void )
Exports the ArrayObject to an array.
</Desc>
    <FName>ArrayObject::getFlags</FName>
    <Desc>public int ArrayObject::getFlags ( void )
Gets the behavior flags of the ArrayObject. See the ArrayObject::setFlags method for a list of the available flags.
</Desc>
    <FName>ArrayObject::getIterator</FName>
    <Desc>public ArrayIterator ArrayObject::getIterator ( void )
Create a new iterator from an ArrayObject instance.
</Desc>
    <FName>ArrayObject::getIteratorClass</FName>
    <Desc>public string ArrayObject::getIteratorClass ( void )
Gets the class name of the array iterator that is used by ArrayObject::getIterator().
</Desc>
    <FName>ArrayObject::ksort</FName>
    <Desc>public void ArrayObject::ksort ( void )
Sorts the entries by key, maintaining key to entry correlations. This is useful mainly for associative arrays.
</Desc>
    <FName>ArrayObject::natcasesort</FName>
    <Desc>public void ArrayObject::natcasesort ( void )
This method is a case insensitive version of ArrayObject::natsort. 
This method implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a "natural ordering".
</Desc>
    <FName>ArrayObject::natsort</FName>
    <Desc>public void ArrayObject::natsort ( void )
This method implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a "natural ordering". An example of the difference between this algorithm and the regular computer string sorting algorithms (used in ArrayObject::asort) method can be seen in the example below.
</Desc>
    <FName>ArrayObject::offsetExists</FName>
    <Desc>public bool ArrayObject::offsetExists ( mixed $index )
</Desc>
    <FName>ArrayObject::offsetGet</FName>
    <Desc>public mixed ArrayObject::offsetGet ( mixed $index )
</Desc>
    <FName>ArrayObject::offsetSet</FName>
    <Desc>public void ArrayObject::offsetSet ( mixed $index , mixed $newval )
Sets the value at the specified index to newval.
</Desc>
    <FName>ArrayObject::offsetUnset</FName>
    <Desc>public void ArrayObject::offsetUnset ( mixed $index )
Unsets the value at the specified index.
</Desc>
    <FName>ArrayObject::serialize</FName>
    <Desc>public string ArrayObject::serialize ( void )
Serializes an ArrayObject. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ArrayObject::setFlags</FName>
    <Desc>public void ArrayObject::setFlags ( int $flags )
Set the flags that change the behavior of the ArrayObject.
</Desc>
    <FName>ArrayObject::setIteratorClass</FName>
    <Desc>public void ArrayObject::setIteratorClass ( string $iterator_class )
Sets the classname of the array iterator that is used by ArrayObject::getIterator().
</Desc>
    <FName>ArrayObject::uasort</FName>
    <Desc>public void ArrayObject::uasort ( callable $cmp_function )
This function sorts the entries such that keys maintain their correlation with the entry that they are associated with, using a user-defined comparison function. 
This is used mainly when sorting associative arrays where the actual element order is significant.
</Desc>
    <FName>ArrayObject::uksort</FName>
    <Desc>public void ArrayObject::uksort ( callable $cmp_function )
This function sorts the keys of the entries using a user-supplied comparison function. The key to entry correlations will be maintained.
</Desc>
    <FName>ArrayObject::unserialize</FName>
    <Desc>public void ArrayObject::unserialize ( string $serialized )
Unserializes a serialized ArrayObject. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>KTaglib_MPEG_AudioProperties::getBitrate</FName>
    <Desc>public int KTaglib_MPEG_AudioProperties::getBitrate ( void )
Returns the bitrate of the MPEG file
</Desc>
    <FName>KTaglib_MPEG_AudioProperties::getChannels</FName>
    <Desc>public int KTaglib_MPEG_AudioProperties::getChannels ( void )
Returns the amount of channels of the MPEG file
</Desc>
    <FName>KTaglib_MPEG_AudioProperties::getLayer</FName>
    <Desc>public int KTaglib_MPEG_AudioProperties::getLayer ( void )
Returns the layer of the MPEG file (usually 3 for MP3).
</Desc>
    <FName>KTaglib_MPEG_AudioProperties::getLength</FName>
    <Desc>public int KTaglib_MPEG_AudioProperties::getLength ( void )
Returns the length of the MPEG file
</Desc>
    <FName>KTaglib_MPEG_AudioProperties::getSampleBitrate</FName>
    <Desc>public int KTaglib_MPEG_AudioProperties::getSampleBitrate ( void )
Returns the sample bitrate of the MPEG file
</Desc>
    <FName>KTaglib_MPEG_AudioProperties::getVersion</FName>
    <Desc>public int KTaglib_MPEG_AudioProperties::getVersion ( void )
Returns the version of the MPEG file header. The possible versions are defined in Tag_MPEG_Header (Version1, Version2, Version2.5).
</Desc>
    <FName>KTaglib_MPEG_AudioProperties::isCopyrighted</FName>
    <Desc>public bool KTaglib_MPEG_AudioProperties::isCopyrighted ( void )
Returns true if the MPEG file is copyrighted
</Desc>
    <FName>KTaglib_MPEG_AudioProperties::isOriginal</FName>
    <Desc>public bool KTaglib_MPEG_AudioProperties::isOriginal ( void )
Returns true if the file is marked as the original file
</Desc>
    <FName>KTaglib_MPEG_AudioProperties::isProtectionEnabled</FName>
    <Desc>public bool KTaglib_MPEG_AudioProperties::isProtectionEnabled ( void )
Returns true if protection mechanisms (like DRM) are enabled for this file
</Desc>
    <FName>CachingIterator::__construct</FName>
    <Desc>public CachingIterator::__construct ( Iterator $iterator [, int $flags = self::CALL_TOSTRING ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CachingIterator::count</FName>
    <Desc>public int CachingIterator::count ( void )
Warning
This function is currently not documented; only its argument list is available. 
May return the number of elements in the iterator.
</Desc>
    <FName>CachingIterator::current</FName>
    <Desc>public void CachingIterator::current ( void )
Warning
This function is currently not documented; only its argument list is available. 
May return the current element in the iteration.
</Desc>
    <FName>CachingIterator::getCache</FName>
    <Desc>public array CachingIterator::getCache ( void )
Retrieve the contents of the cache. 
Note: 
The CachingIterator::FULL_CACHE flag must be being used.
</Desc>
    <FName>CachingIterator::getFlags</FName>
    <Desc>public int CachingIterator::getFlags ( void )
Warning
This function is currently not documented; only its argument list is available. 
Get the bitmask of the flags used for this CachingIterator instance.
</Desc>
    <FName>CachingIterator::getInnerIterator</FName>
    <Desc>public Iterator CachingIterator::getInnerIterator ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the iterator sent to the constructor.
</Desc>
    <FName>CachingIterator::hasNext</FName>
    <Desc>public void CachingIterator::hasNext ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CachingIterator::key</FName>
    <Desc>public scalar CachingIterator::key ( void )
Warning
This function is currently not documented; only its argument list is available. 
This method may return a key for the current element.
</Desc>
    <FName>CachingIterator::next</FName>
    <Desc>public void CachingIterator::next ( void )
Warning
This function is currently not documented; only its argument list is available. 
Move the iterator forward.
</Desc>
    <FName>CachingIterator::offsetExists</FName>
    <Desc>public void CachingIterator::offsetExists ( mixed $index )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CachingIterator::offsetGet</FName>
    <Desc>public void CachingIterator::offsetGet ( string $index )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CachingIterator::offsetSet</FName>
    <Desc>public void CachingIterator::offsetSet ( mixed $index , mixed $newval )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CachingIterator::offsetUnset</FName>
    <Desc>public void CachingIterator::offsetUnset ( string $index )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CachingIterator::rewind</FName>
    <Desc>public void CachingIterator::rewind ( void )
Warning
This function is currently not documented; only its argument list is available. 
Rewind the iterator.
</Desc>
    <FName>CachingIterator::setFlags</FName>
    <Desc>public void CachingIterator::setFlags ( int $flags )
Warning
This function is currently not documented; only its argument list is available. 
Set the flags for the CachingIterator object.
</Desc>
    <FName>CachingIterator::__toString</FName>
    <Desc>public void CachingIterator::__toString ( void )
Warning
This function is currently not documented; only its argument list is available. 
Get the string representation of the current element.
</Desc>
    <FName>CachingIterator::valid</FName>
    <Desc>public void CachingIterator::valid ( void )
Warning
This function is currently not documented; only its argument list is available. 
Check whether the current element is valid.
</Desc>
    <FName>Cairo::availableFonts</FName>
    <Desc>Object oriented style:
public static array Cairo::availableFonts ( void )
Procedural style:
array cairo_available_fonts ( void )
Returns an array with the available font backends
</Desc>
    <FName>cairo_available_fonts</FName>
    <Desc>Object oriented style:
public static array Cairo::availableFonts ( void )
Procedural style:
array cairo_available_fonts ( void )
Returns an array with the available font backends
</Desc>
    <FName>Cairo::availableSurfaces</FName>
    <Desc>Object oriented style (method):
public static array Cairo::availableSurfaces ( void )
Procedural style:
array cairo_available_surfaces ( void )
Returns an array with the available surface backends
</Desc>
    <FName>cairo_available_surfaces</FName>
    <Desc>Object oriented style (method):
public static array Cairo::availableSurfaces ( void )
Procedural style:
array cairo_available_surfaces ( void )
Returns an array with the available surface backends
</Desc>
    <FName>Cairo::statusToString</FName>
    <Desc>Object oriented style (method):
public static string Cairo::statusToString ( int $status )
Procedural style:
string cairo_status_to_string ( int $status )
Retrieves the current status as a readable string
</Desc>
    <FName>cairo_status_to_string</FName>
    <Desc>Object oriented style (method):
public static string Cairo::statusToString ( int $status )
Procedural style:
string cairo_status_to_string ( int $status )
Retrieves the current status as a readable string
</Desc>
    <FName>Cairo::version</FName>
    <Desc>Object oriented style (method):
public static int Cairo::version ( void )
Procedural style:
int cairo_version ( void )
Retrieves the current version of the cairo library as an integer value
</Desc>
    <FName>cairo_version</FName>
    <Desc>Object oriented style (method):
public static int Cairo::version ( void )
Procedural style:
int cairo_version ( void )
Retrieves the current version of the cairo library as an integer value
</Desc>
    <FName>Cairo::versionString</FName>
    <Desc>Object oriented style (method):
public static string Cairo::versionString ( void )
Procedural style:
string cairo_version_string ( void )
Retrieves the current cairo library version as a string.
</Desc>
    <FName>cairo_version_string</FName>
    <Desc>Object oriented style (method):
public static string Cairo::versionString ( void )
Procedural style:
string cairo_version_string ( void )
Retrieves the current cairo library version as a string.
</Desc>
    <FName>CairoContext::appendPath</FName>
    <Desc>Object oriented style (method):
public void CairoContext::appendPath ( CairoPath $path )
Procedural style:
void cairo_append_path ( CairoContext $context , CairoPath $path )
Appends the path onto the current path. The path may be either the return value from one of CairoContext::copyPath() or CairoContext::copyPathFlat(); 
if path is not a valid CairoPath instance a CairoException will be thrown
</Desc>
    <FName>cairo_append_path</FName>
    <Desc>Object oriented style (method):
public void CairoContext::appendPath ( CairoPath $path )
Procedural style:
void cairo_append_path ( CairoContext $context , CairoPath $path )
Appends the path onto the current path. The path may be either the return value from one of CairoContext::copyPath() or CairoContext::copyPathFlat(); 
if path is not a valid CairoPath instance a CairoException will be thrown
</Desc>
    <FName>CairoContext::arc</FName>
    <Desc>Object oriented style (method):
public void CairoContext::arc ( float $x , float $y , float $radius , float $angle1 , float $angle2 )
Procedural style:
void cairo_arc ( CairoContext $context , float $x , float $y , float $radius , float $angle1 , float $angle2 )
Adds a circular arc of the given radius to the current path. The arc is centered at (x, y), begins at angle1 and proceeds in the direction of increasing angles to end at angle2. If angle2 is less than angle1 it will be progressively increased by 2*M_PI until it is greater than angle1. If there is a current point, an initial line segment will be added to the path to connect the current point to the beginning of the arc. If this initial line is undesired, it can be avoided by calling CairoContext::newSubPath() or procedural cairo_new_sub_path() before calling CairoContext::arc() or cairo_arc(). Angles are measured in radians. An angle of 0.0 is in the direction of the positive X axis (in user space). An angle of M_PI/2.0 radians (90 degrees) is in the direction of the positive Y axis (in user space). Angles increase in the direction from the positive X axis toward the positive Y axis. So with the default transformation matrix, angles increase in a clockwise direction. (To convert from degrees to radians, use degrees * (M_PI / 180.).) This function gives the arc in the direction of increasing angles; see CairoContext::arcNegative() or cairo_arc_negative() to get the arc in the direction of decreasing angles.
</Desc>
    <FName>cairo_arc</FName>
    <Desc>Object oriented style (method):
public void CairoContext::arc ( float $x , float $y , float $radius , float $angle1 , float $angle2 )
Procedural style:
void cairo_arc ( CairoContext $context , float $x , float $y , float $radius , float $angle1 , float $angle2 )
Adds a circular arc of the given radius to the current path. The arc is centered at (x, y), begins at angle1 and proceeds in the direction of increasing angles to end at angle2. If angle2 is less than angle1 it will be progressively increased by 2*M_PI until it is greater than angle1. If there is a current point, an initial line segment will be added to the path to connect the current point to the beginning of the arc. If this initial line is undesired, it can be avoided by calling CairoContext::newSubPath() or procedural cairo_new_sub_path() before calling CairoContext::arc() or cairo_arc(). Angles are measured in radians. An angle of 0.0 is in the direction of the positive X axis (in user space). An angle of M_PI/2.0 radians (90 degrees) is in the direction of the positive Y axis (in user space). Angles increase in the direction from the positive X axis toward the positive Y axis. So with the default transformation matrix, angles increase in a clockwise direction. (To convert from degrees to radians, use degrees * (M_PI / 180.).) This function gives the arc in the direction of increasing angles; see CairoContext::arcNegative() or cairo_arc_negative() to get the arc in the direction of decreasing angles.
</Desc>
    <FName>CairoContext::arcNegative</FName>
    <Desc>Object oriented style (method):
public void CairoContext::arcNegative ( float $x , float $y , float $radius , float $angle1 , float $angle2 )
Procedural style:
void cairo_arc_negative ( CairoContext $context , float $x , float $y , float $radius , float $angle1 , float $angle2 )
Adds a circular arc of the given radius to the current path. The arc is centered at (x, y), begins at angle1 and proceeds in the direction of decreasing angles to end at angle2. If angle2 is greater than angle1 it will be progressively decreased by 2*M_PI until it is less than angle1. See CairoContext::arc() or cairo_arc() for more details. This function differs only in the direction of the arc between the two angles.
</Desc>
    <FName>cairo_arc_negative</FName>
    <Desc>Object oriented style (method):
public void CairoContext::arcNegative ( float $x , float $y , float $radius , float $angle1 , float $angle2 )
Procedural style:
void cairo_arc_negative ( CairoContext $context , float $x , float $y , float $radius , float $angle1 , float $angle2 )
Adds a circular arc of the given radius to the current path. The arc is centered at (x, y), begins at angle1 and proceeds in the direction of decreasing angles to end at angle2. If angle2 is greater than angle1 it will be progressively decreased by 2*M_PI until it is less than angle1. See CairoContext::arc() or cairo_arc() for more details. This function differs only in the direction of the arc between the two angles.
</Desc>
    <FName>CairoContext::clip</FName>
    <Desc>Object oriented style (method):
public void CairoContext::clip ( void )
Procedural style:
void cairo_clip ( CairoContext $context )
Establishes a new clip region by intersecting the current clip region with the current path as it would be filled by CairoContext::fill() or cairo_fill() and according to the current fill rule (see CairoContext::setFillRule() or cairo_set_fill_rule()). 
After CairoContext::clip() or cairo_clip(), the current path will be cleared from the cairo context. 
The current clip region affects all drawing operations by effectively masking out any changes to the surface that are outside the current clip region. 
Calling CairoContext::clip() or cairo_clip() can only make the clip region smaller, never larger. But the current clip is part of the graphics state, so a temporary restriction of the clip region can be achieved by calling CairoContext::clip() or cairo_clip() within a CairoContext::save()/CairoContext::restore() or cairo_save()/cairo_restore() pair. The only other means of increasing the size of the clip region is CairoContext::resetClip() or procedural cairo_reset_clip().
</Desc>
    <FName>cairo_clip</FName>
    <Desc>Object oriented style (method):
public void CairoContext::clip ( void )
Procedural style:
void cairo_clip ( CairoContext $context )
Establishes a new clip region by intersecting the current clip region with the current path as it would be filled by CairoContext::fill() or cairo_fill() and according to the current fill rule (see CairoContext::setFillRule() or cairo_set_fill_rule()). 
After CairoContext::clip() or cairo_clip(), the current path will be cleared from the cairo context. 
The current clip region affects all drawing operations by effectively masking out any changes to the surface that are outside the current clip region. 
Calling CairoContext::clip() or cairo_clip() can only make the clip region smaller, never larger. But the current clip is part of the graphics state, so a temporary restriction of the clip region can be achieved by calling CairoContext::clip() or cairo_clip() within a CairoContext::save()/CairoContext::restore() or cairo_save()/cairo_restore() pair. The only other means of increasing the size of the clip region is CairoContext::resetClip() or procedural cairo_reset_clip().
</Desc>
    <FName>CairoContext::clipExtents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::clipExtents ( void )
Procedural style:
array cairo_clip_extents ( CairoContext $context )
Computes a bounding box in user coordinates covering the area inside the current clip.
</Desc>
    <FName>cairo_clip_extents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::clipExtents ( void )
Procedural style:
array cairo_clip_extents ( CairoContext $context )
Computes a bounding box in user coordinates covering the area inside the current clip.
</Desc>
    <FName>CairoContext::clipPreserve</FName>
    <Desc>Object oriented style (method):
public void CairoContext::clipPreserve ( void )
Procedural style:
void cairo_clip_preserve ( CairoContext $context )
Establishes a new clip region by intersecting the current clip region with the current path as it would be filled by Context.fill() and according to the current FILL RULE (see CairoContext::setFillRule() or cairo_set_fill_rule()). 
Unlike CairoContext::clip(), CairoContext::clipPreserve() preserves the path within the Context. The current clip region affects all drawing operations by effectively masking out any changes to the surface that are outside the current clip region. 
Calling CairoContext::clipPreserve() can only make the clip region smaller, never larger. But the current clip is part of the graphics state, so a temporary restriction of the clip region can be achieved by calling CairoContext::clipPreserve() within a CairoContext::save()/CairoContext::restore() pair. The only other means of increasing the size of the clip region is CairoContext::resetClip().
</Desc>
    <FName>cairo_clip_preserve</FName>
    <Desc>Object oriented style (method):
public void CairoContext::clipPreserve ( void )
Procedural style:
void cairo_clip_preserve ( CairoContext $context )
Establishes a new clip region by intersecting the current clip region with the current path as it would be filled by Context.fill() and according to the current FILL RULE (see CairoContext::setFillRule() or cairo_set_fill_rule()). 
Unlike CairoContext::clip(), CairoContext::clipPreserve() preserves the path within the Context. The current clip region affects all drawing operations by effectively masking out any changes to the surface that are outside the current clip region. 
Calling CairoContext::clipPreserve() can only make the clip region smaller, never larger. But the current clip is part of the graphics state, so a temporary restriction of the clip region can be achieved by calling CairoContext::clipPreserve() within a CairoContext::save()/CairoContext::restore() pair. The only other means of increasing the size of the clip region is CairoContext::resetClip().
</Desc>
    <FName>CairoContext::clipRectangleList</FName>
    <Desc>Object oriented style (method):
public array CairoContext::clipRectangleList ( void )
Procedural style:
array cairo_clip_rectangle_list ( CairoContext $context )
Returns a list-type array with the current clip region as a list of rectangles in user coordinates
</Desc>
    <FName>cairo_clip_rectangle_list</FName>
    <Desc>Object oriented style (method):
public array CairoContext::clipRectangleList ( void )
Procedural style:
array cairo_clip_rectangle_list ( CairoContext $context )
Returns a list-type array with the current clip region as a list of rectangles in user coordinates
</Desc>
    <FName>CairoContext::closePath</FName>
    <Desc>Object oriented style (method):
public void CairoContext::closePath ( void )
Procedural style:
void cairo_close_path ( CairoContext $context )
Adds a line segment to the path from the current point to the beginning of the current sub-path, (the most recent point passed to CairoContext::moveTo()), and closes this sub-path. After this call the current point will be at the joined endpoint of the sub-path. 
The behavior of close_path() is distinct from simply calling CairoContext::lineTo() with the equivalent coordinate in the case of stroking. When a closed sub-path is stroked, there are no caps on the ends of the sub-path. Instead, there is a line join connecting the final and initial segments of the sub-path. 
If there is no current point before the call to CairoContext::closePath(), this function will have no effect.
</Desc>
    <FName>cairo_close_path</FName>
    <Desc>Object oriented style (method):
public void CairoContext::closePath ( void )
Procedural style:
void cairo_close_path ( CairoContext $context )
Adds a line segment to the path from the current point to the beginning of the current sub-path, (the most recent point passed to CairoContext::moveTo()), and closes this sub-path. After this call the current point will be at the joined endpoint of the sub-path. 
The behavior of close_path() is distinct from simply calling CairoContext::lineTo() with the equivalent coordinate in the case of stroking. When a closed sub-path is stroked, there are no caps on the ends of the sub-path. Instead, there is a line join connecting the final and initial segments of the sub-path. 
If there is no current point before the call to CairoContext::closePath(), this function will have no effect.
</Desc>
    <FName>CairoContext::__construct</FName>
    <Desc>public CairoContext::__construct ( CairoSurface $surface )
Creates a new CairoContext object to draw
</Desc>
    <FName>CairoContext::copyPage</FName>
    <Desc>Object oriented style (method):
public void CairoContext::copyPage ( void )
Procedural style:
void cairo_copy_page ( CairoContext $context )
Emits the current page for backends that support multiple pages, but doesn’t clear it, so, the contents of the current page will be retained for the next page too. Use CairoContext::showPage() if you want to get an empty page after the emission. 
This is a convenience function that simply calls CairoSurface::copyPage() on CairoContext’s target.
</Desc>
    <FName>cairo_copy_page</FName>
    <Desc>Object oriented style (method):
public void CairoContext::copyPage ( void )
Procedural style:
void cairo_copy_page ( CairoContext $context )
Emits the current page for backends that support multiple pages, but doesn’t clear it, so, the contents of the current page will be retained for the next page too. Use CairoContext::showPage() if you want to get an empty page after the emission. 
This is a convenience function that simply calls CairoSurface::copyPage() on CairoContext’s target.
</Desc>
    <FName>CairoContext::copyPath</FName>
    <Desc>Object oriented style (method):
public CairoPath CairoContext::copyPath ( void )
Procedural style:
CairoPath cairo_copy_path ( CairoContext $context )
Creates a copy of the current path and returns it to the user as a CairoPath. See CairoPath for hints on how to iterate over the returned data structure. 
This function will always return a valid CairoPath object, but the result will have no data, if either of the following conditions hold: 
1. If there is insufficient memory to copy the path. In this case CairoPath->status will be set to CAIRO_STATUS_NO_MEMORY. 
2. If context is already in an error state. In this case CairoPath->status will contain the same status that would be returned by cairo_status(). 
In either case, CairoPath->status will be set to CAIRO_STATUS_NO_MEMORY (regardless of what the error status in cr might have been).
</Desc>
    <FName>cairo_copy_path</FName>
    <Desc>Object oriented style (method):
public CairoPath CairoContext::copyPath ( void )
Procedural style:
CairoPath cairo_copy_path ( CairoContext $context )
Creates a copy of the current path and returns it to the user as a CairoPath. See CairoPath for hints on how to iterate over the returned data structure. 
This function will always return a valid CairoPath object, but the result will have no data, if either of the following conditions hold: 
1. If there is insufficient memory to copy the path. In this case CairoPath->status will be set to CAIRO_STATUS_NO_MEMORY. 
2. If context is already in an error state. In this case CairoPath->status will contain the same status that would be returned by cairo_status(). 
In either case, CairoPath->status will be set to CAIRO_STATUS_NO_MEMORY (regardless of what the error status in cr might have been).
</Desc>
    <FName>CairoContext::copyPathFlat</FName>
    <Desc>Object oriented style (method):
public CairoPath CairoContext::copyPathFlat ( void )
Procedural style:
CairoPath cairo_copy_path_flat ( CairoContext $context )
Gets a flattened copy of the current path and returns it to the user as a CairoPath. 
This function is like CairoContext::copyPath() except that any curves in the path will be approximated with piecewise-linear approximations, (accurate to within the current tolerance value). That is, the result is guaranteed to not have any elements of type CAIRO_PATH_CURVE_TO which will instead be replaced by a series of CAIRO_PATH_LINE_TO elements.
</Desc>
    <FName>cairo_copy_path_flat</FName>
    <Desc>Object oriented style (method):
public CairoPath CairoContext::copyPathFlat ( void )
Procedural style:
CairoPath cairo_copy_path_flat ( CairoContext $context )
Gets a flattened copy of the current path and returns it to the user as a CairoPath. 
This function is like CairoContext::copyPath() except that any curves in the path will be approximated with piecewise-linear approximations, (accurate to within the current tolerance value). That is, the result is guaranteed to not have any elements of type CAIRO_PATH_CURVE_TO which will instead be replaced by a series of CAIRO_PATH_LINE_TO elements.
</Desc>
    <FName>CairoContext::curveTo</FName>
    <Desc>Object oriented style (method):
public void CairoContext::curveTo ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
Procedural style:
void cairo_curve_to ( CairoContext $context , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
Adds a cubic Bezier spline to the path from the current point to position x3 ,y3 in user-space coordinates, using x1, y1 and x2, y2 as the control points. After this call the current point will be x3, y3. 
If there is no current point before the call to CairoContext::curveTo() this function will behave as if preceded by a call to CairoContext::moveTo() (x1, y1).
</Desc>
    <FName>cairo_curve_to</FName>
    <Desc>Object oriented style (method):
public void CairoContext::curveTo ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
Procedural style:
void cairo_curve_to ( CairoContext $context , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
Adds a cubic Bezier spline to the path from the current point to position x3 ,y3 in user-space coordinates, using x1, y1 and x2, y2 as the control points. After this call the current point will be x3, y3. 
If there is no current point before the call to CairoContext::curveTo() this function will behave as if preceded by a call to CairoContext::moveTo() (x1, y1).
</Desc>
    <FName>CairoContext::deviceToUser</FName>
    <Desc>Object oriented style (method):
public array CairoContext::deviceToUser ( float $x , float $y )
Procedural style:
array cairo_device_to_user ( CairoContext $context , float $x , float $y )
Transform a coordinate from device space to user space by multiplying the given point by the inverse of the current transformation matrix (CTM).
</Desc>
    <FName>cairo_device_to_user</FName>
    <Desc>Object oriented style (method):
public array CairoContext::deviceToUser ( float $x , float $y )
Procedural style:
array cairo_device_to_user ( CairoContext $context , float $x , float $y )
Transform a coordinate from device space to user space by multiplying the given point by the inverse of the current transformation matrix (CTM).
</Desc>
    <FName>CairoContext::deviceToUserDistance</FName>
    <Desc>Object oriented style (method):
public array CairoContext::deviceToUserDistance ( float $x , float $y )
Procedural style:
array cairo_device_to_user_distance ( CairoContext $context , float $x , float $y )
Transform a distance vector from device space to user space. This function is similar to CairoContext::deviceToUser() or cairo_device_to_user() except that the translation components of the inverse Cairo Transformation Matrix will be ignored when transforming (x,y).
</Desc>
    <FName>cairo_device_to_user_distance</FName>
    <Desc>Object oriented style (method):
public array CairoContext::deviceToUserDistance ( float $x , float $y )
Procedural style:
array cairo_device_to_user_distance ( CairoContext $context , float $x , float $y )
Transform a distance vector from device space to user space. This function is similar to CairoContext::deviceToUser() or cairo_device_to_user() except that the translation components of the inverse Cairo Transformation Matrix will be ignored when transforming (x,y).
</Desc>
    <FName>CairoContext::fill</FName>
    <Desc>Object oriented style (method):
public void CairoContext::fill ( void )
Procedural style:
void cairo_fill ( CairoContext $context )
A drawing operator that fills the current path according to the current CairoFillRule, (each sub-path is implicitly closed before being filled). After CairoContext::fill() or cairo_fill(), the current path will be cleared from the CairoContext.
</Desc>
    <FName>cairo_fill</FName>
    <Desc>Object oriented style (method):
public void CairoContext::fill ( void )
Procedural style:
void cairo_fill ( CairoContext $context )
A drawing operator that fills the current path according to the current CairoFillRule, (each sub-path is implicitly closed before being filled). After CairoContext::fill() or cairo_fill(), the current path will be cleared from the CairoContext.
</Desc>
    <FName>CairoContext::fillExtents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::fillExtents ( void )
Procedural style:
array cairo_fill_extents ( CairoContext $context )
Computes a bounding box in user coordinates covering the area that would be affected, (the “inked” area), by a CairoContext::fill() operation given the current path and fill parameters. If the current path is empty, returns an empty rectangle (0,0,0,0). Surface dimensions and clipping are not taken into account. 
Contrast with CairoContext::pathExtents(), which is similar, but returns non-zero extents for some paths with no inked area, (such as a simple line segment). 
Note that CairoContext::fillExtents() must necessarily do more work to compute the precise inked areas in light of the fill rule, so CairoContext::pathExtents() may be more desirable for sake of performance if the non-inked path extents are desired.
</Desc>
    <FName>cairo_fill_extents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::fillExtents ( void )
Procedural style:
array cairo_fill_extents ( CairoContext $context )
Computes a bounding box in user coordinates covering the area that would be affected, (the “inked” area), by a CairoContext::fill() operation given the current path and fill parameters. If the current path is empty, returns an empty rectangle (0,0,0,0). Surface dimensions and clipping are not taken into account. 
Contrast with CairoContext::pathExtents(), which is similar, but returns non-zero extents for some paths with no inked area, (such as a simple line segment). 
Note that CairoContext::fillExtents() must necessarily do more work to compute the precise inked areas in light of the fill rule, so CairoContext::pathExtents() may be more desirable for sake of performance if the non-inked path extents are desired.
</Desc>
    <FName>CairoContext::fillPreserve</FName>
    <Desc>Object oriented style (method):
public void CairoContext::fillPreserve ( void )
Procedural style:
void cairo_fill_preserve ( CairoContext $context )
A drawing operator that fills the current path according to the current CairoFillRule, (each sub-path is implicitly closed before being filled). Unlike CairoContext::fill(), CairoContext::fillPreserve() (Procedural cairo_fill(), cairo_fill_preserve(), respectively) preserves the path within the Context.
</Desc>
    <FName>cairo_fill_preserve</FName>
    <Desc>Object oriented style (method):
public void CairoContext::fillPreserve ( void )
Procedural style:
void cairo_fill_preserve ( CairoContext $context )
A drawing operator that fills the current path according to the current CairoFillRule, (each sub-path is implicitly closed before being filled). Unlike CairoContext::fill(), CairoContext::fillPreserve() (Procedural cairo_fill(), cairo_fill_preserve(), respectively) preserves the path within the Context.
</Desc>
    <FName>CairoContext::fontExtents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::fontExtents ( void )
Procedural style:
array cairo_font_extents ( CairoContext $context )
Gets the font extents for the currently selected font.
</Desc>
    <FName>cairo_font_extents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::fontExtents ( void )
Procedural style:
array cairo_font_extents ( CairoContext $context )
Gets the font extents for the currently selected font.
</Desc>
    <FName>CairoContext::getAntialias</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getAntialias ( void )
Procedural style:
int cairo_get_antialias ( CairoContext $context )
Returns the current CairoAntialias mode, as set by CairoContext::setAntialias().
</Desc>
    <FName>cairo_get_antialias</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getAntialias ( void )
Procedural style:
int cairo_get_antialias ( CairoContext $context )
Returns the current CairoAntialias mode, as set by CairoContext::setAntialias().
</Desc>
    <FName>CairoContext::getCurrentPoint</FName>
    <Desc>Object oriented style
public array CairoContext::getCurrentPoint ( void )
Procedural style
array cairo_get_current_point ( CairoContext $context )
Gets the current point of the current path, which is conceptually the final point reached by the path so far. 
The current point is returned in the user-space coordinate system. If there is no defined current point or if cr is in an error status, x and y will both be set to 0.0. It is possible to check this in advance with CairoContext::hasCurrentPoint(). 
Most path construction functions alter the current point. See the following for details on how they affect the current point: CairoContext::newPath(), CairoContext::newSubPath(), CairoContext::appendPath(), CairoContext::closePath(), CairoContext::moveTo(), CairoContext::lineTo(), CairoContext::curveTo(), CairoContext::relMoveTo(), CairoContext::relLineTo(), CairoContext::relCurveTo(), CairoContext::arc(), CairoContext::arcNegative(), CairoContext::rectangle(), CairoContext::textPath(), CairoContext::glyphPath(). 
Some functions use and alter the current point but do not otherwise change current path: CairoContext::showText(). 
Some functions unset the current path and as a result, current point: CairoContext::fill(), CairoContext::stroke().
</Desc>
    <FName>cairo_get_current_point</FName>
    <Desc>Object oriented style
public array CairoContext::getCurrentPoint ( void )
Procedural style
array cairo_get_current_point ( CairoContext $context )
Gets the current point of the current path, which is conceptually the final point reached by the path so far. 
The current point is returned in the user-space coordinate system. If there is no defined current point or if cr is in an error status, x and y will both be set to 0.0. It is possible to check this in advance with CairoContext::hasCurrentPoint(). 
Most path construction functions alter the current point. See the following for details on how they affect the current point: CairoContext::newPath(), CairoContext::newSubPath(), CairoContext::appendPath(), CairoContext::closePath(), CairoContext::moveTo(), CairoContext::lineTo(), CairoContext::curveTo(), CairoContext::relMoveTo(), CairoContext::relLineTo(), CairoContext::relCurveTo(), CairoContext::arc(), CairoContext::arcNegative(), CairoContext::rectangle(), CairoContext::textPath(), CairoContext::glyphPath(). 
Some functions use and alter the current point but do not otherwise change current path: CairoContext::showText(). 
Some functions unset the current path and as a result, current point: CairoContext::fill(), CairoContext::stroke().
</Desc>
    <FName>CairoContext::getDash</FName>
    <Desc>Object oriented style (method):
public array CairoContext::getDash ( void )
Procedural style:
array cairo_get_dash ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_dash</FName>
    <Desc>Object oriented style (method):
public array CairoContext::getDash ( void )
Procedural style:
array cairo_get_dash ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getDashCount</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getDashCount ( void )
Procedural style:
int cairo_get_dash_count ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_dash_count</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getDashCount ( void )
Procedural style:
int cairo_get_dash_count ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getFillRule</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getFillRule ( void )
Procedural style:
int cairo_get_fill_rule ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_fill_rule</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getFillRule ( void )
Procedural style:
int cairo_get_fill_rule ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getFontFace</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getFontFace ( void )
Procedural style:
void cairo_get_font_face ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_font_face</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getFontFace ( void )
Procedural style:
void cairo_get_font_face ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getFontMatrix</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getFontMatrix ( void )
Procedural style:
void cairo_get_font_matrix ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_font_matrix</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getFontMatrix ( void )
Procedural style:
void cairo_get_font_matrix ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getFontOptions</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getFontOptions ( void )
Procedural style:
void cairo_get_font_options ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_font_options</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getFontOptions ( void )
Procedural style:
void cairo_get_font_options ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getGroupTarget</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getGroupTarget ( void )
Procedural style:
void cairo_get_group_target ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_group_target</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getGroupTarget ( void )
Procedural style:
void cairo_get_group_target ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getLineCap</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getLineCap ( void )
Procedural style:
int cairo_get_line_cap ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_line_cap</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getLineCap ( void )
Procedural style:
int cairo_get_line_cap ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getLineJoin</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getLineJoin ( void )
Procedural style:
int cairo_get_line_join ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_line_join</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getLineJoin ( void )
Procedural style:
int cairo_get_line_join ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getLineWidth</FName>
    <Desc>Object oriented style (method):
public float CairoContext::getLineWidth ( void )
Procedural style:
float cairo_get_line_width ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_line_width</FName>
    <Desc>Object oriented style (method):
public float CairoContext::getLineWidth ( void )
Procedural style:
float cairo_get_line_width ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getMatrix</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getMatrix ( void )
Procedural style:
void cairo_get_matrix ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_matrix</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getMatrix ( void )
Procedural style:
void cairo_get_matrix ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getMiterLimit</FName>
    <Desc>Object oriented style (method):
public float CairoContext::getMiterLimit ( void )
Procedural style:
float cairo_get_miter_limit ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_miter_limit</FName>
    <Desc>Object oriented style (method):
public float CairoContext::getMiterLimit ( void )
Procedural style:
float cairo_get_miter_limit ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getOperator</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getOperator ( void )
Procedural style:
int cairo_get_operator ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_operator</FName>
    <Desc>Object oriented style (method):
public int CairoContext::getOperator ( void )
Procedural style:
int cairo_get_operator ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getScaledFont</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getScaledFont ( void )
Procedural style:
void cairo_get_scaled_font ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_scaled_font</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getScaledFont ( void )
Procedural style:
void cairo_get_scaled_font ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getSource</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getSource ( void )
Procedural style:
void cairo_get_source ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_source</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getSource ( void )
Procedural style:
void cairo_get_source ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getTarget</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getTarget ( void )
Procedural style:
void cairo_get_target ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_target</FName>
    <Desc>Object oriented style (method):
public void CairoContext::getTarget ( void )
Procedural style:
void cairo_get_target ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::getTolerance</FName>
    <Desc>Object oriented style (method):
public float CairoContext::getTolerance ( void )
Procedural style:
float cairo_get_tolerance ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_get_tolerance</FName>
    <Desc>Object oriented style (method):
public float CairoContext::getTolerance ( void )
Procedural style:
float cairo_get_tolerance ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::glyphPath</FName>
    <Desc>Object oriented style
public void CairoContext::glyphPath ( array $glyphs )
Procedural style
void cairo_glyph_path ( CairoContext $context , array $glyphs )
Adds closed paths for the glyphs to the current path. The generated path if filled, achieves an effect similar to that of CairoContext::showGlyphs().
</Desc>
    <FName>cairo_glyph_path</FName>
    <Desc>Object oriented style
public void CairoContext::glyphPath ( array $glyphs )
Procedural style
void cairo_glyph_path ( CairoContext $context , array $glyphs )
Adds closed paths for the glyphs to the current path. The generated path if filled, achieves an effect similar to that of CairoContext::showGlyphs().
</Desc>
    <FName>CairoContext::hasCurrentPoint</FName>
    <Desc>Object oriented style (method):
public bool CairoContext::hasCurrentPoint ( void )
Procedural style:
bool cairo_has_current_point ( CairoContext $context )
Returns whether a current point is defined on the current path. See CairoContext::getCurrentPoint() for details on the current point.
</Desc>
    <FName>cairo_has_current_point</FName>
    <Desc>Object oriented style (method):
public bool CairoContext::hasCurrentPoint ( void )
Procedural style:
bool cairo_has_current_point ( CairoContext $context )
Returns whether a current point is defined on the current path. See CairoContext::getCurrentPoint() for details on the current point.
</Desc>
    <FName>CairoContext::identityMatrix</FName>
    <Desc>Object oriented style (method):
public void CairoContext::identityMatrix ( void )
Procedural style:
void cairo_identity_matrix ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_identity_matrix</FName>
    <Desc>Object oriented style (method):
public void CairoContext::identityMatrix ( void )
Procedural style:
void cairo_identity_matrix ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::inFill</FName>
    <Desc>Object oriented style (method):
public bool CairoContext::inFill ( float $x , float $y )
Procedural style:
bool cairo_in_fill ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_in_fill</FName>
    <Desc>Object oriented style (method):
public bool CairoContext::inFill ( float $x , float $y )
Procedural style:
bool cairo_in_fill ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::inStroke</FName>
    <Desc>Object oriented style (method):
public bool CairoContext::inStroke ( float $x , float $y )
Procedural style:
bool cairo_in_stroke ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_in_stroke</FName>
    <Desc>Object oriented style (method):
public bool CairoContext::inStroke ( float $x , float $y )
Procedural style:
bool cairo_in_stroke ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::lineTo</FName>
    <Desc>Object oriented style (method):
public void CairoContext::lineTo ( float $x , float $y )
Procedural style:
void cairo_line_to ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_line_to</FName>
    <Desc>Object oriented style (method):
public void CairoContext::lineTo ( float $x , float $y )
Procedural style:
void cairo_line_to ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::mask</FName>
    <Desc>Object oriented style (method):
public void CairoContext::mask ( CairoPattern $pattern )
Procedural style:
void cairo_mask ( CairoContext $context , CairoPattern $pattern )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_mask</FName>
    <Desc>Object oriented style (method):
public void CairoContext::mask ( CairoPattern $pattern )
Procedural style:
void cairo_mask ( CairoContext $context , CairoPattern $pattern )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::maskSurface</FName>
    <Desc>Object oriented style (method):
public void CairoContext::maskSurface ( CairoSurface $surface [, float $x [, float $y ]] )
Procedural style:
void cairo_mask_surface ( CairoContext $context , CairoSurface $surface [, float $x [, float $y ]] )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_mask_surface</FName>
    <Desc>Object oriented style (method):
public void CairoContext::maskSurface ( CairoSurface $surface [, float $x [, float $y ]] )
Procedural style:
void cairo_mask_surface ( CairoContext $context , CairoSurface $surface [, float $x [, float $y ]] )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::moveTo</FName>
    <Desc>Object oriented style (method):
public void CairoContext::moveTo ( float $x , float $y )
Procedural style:
void cairo_move_to ( CairoContext $context , float $x , float $y )
Begin a new sub-path. After this call the current point will be (x, y).
</Desc>
    <FName>cairo_move_to</FName>
    <Desc>Object oriented style (method):
public void CairoContext::moveTo ( float $x , float $y )
Procedural style:
void cairo_move_to ( CairoContext $context , float $x , float $y )
Begin a new sub-path. After this call the current point will be (x, y).
</Desc>
    <FName>CairoContext::newPath</FName>
    <Desc>Object oriented style (method):
public void CairoContext::newPath ( void )
Procedural style:
void cairo_new_path ( CairoContext $context )
Clears the current path. After this call there will be no path and no current point.
</Desc>
    <FName>cairo_new_path</FName>
    <Desc>Object oriented style (method):
public void CairoContext::newPath ( void )
Procedural style:
void cairo_new_path ( CairoContext $context )
Clears the current path. After this call there will be no path and no current point.
</Desc>
    <FName>CairoContext::newSubPath</FName>
    <Desc>Object oriented style (method):
public void CairoContext::newSubPath ( void )
Procedural style:
void cairo_new_sub_path ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_new_sub_path</FName>
    <Desc>Object oriented style (method):
public void CairoContext::newSubPath ( void )
Procedural style:
void cairo_new_sub_path ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::paint</FName>
    <Desc>Object oriented style (method):
public void CairoContext::paint ( void )
Procedural style:
void cairo_paint ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_paint</FName>
    <Desc>Object oriented style (method):
public void CairoContext::paint ( void )
Procedural style:
void cairo_paint ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::paintWithAlpha</FName>
    <Desc>Object oriented style (method):
public void CairoContext::paintWithAlpha ( float $alpha )
Procedural style:
void cairo_paint_with_alpha ( CairoContext $context , float $alpha )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_paint_with_alpha</FName>
    <Desc>Object oriented style (method):
public void CairoContext::paintWithAlpha ( float $alpha )
Procedural style:
void cairo_paint_with_alpha ( CairoContext $context , float $alpha )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::pathExtents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::pathExtents ( void )
Procedural style:
array cairo_path_extents ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_path_extents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::pathExtents ( void )
Procedural style:
array cairo_path_extents ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::popGroup</FName>
    <Desc>Object oriented style (method):
public void CairoContext::popGroup ( void )
Procedural style:
void cairo_pop_group ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pop_group</FName>
    <Desc>Object oriented style (method):
public void CairoContext::popGroup ( void )
Procedural style:
void cairo_pop_group ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::popGroupToSource</FName>
    <Desc>Object oriented style (method):
public void CairoContext::popGroupToSource ( void )
Procedural style:
void cairo_pop_group_to_source ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pop_group_to_source</FName>
    <Desc>Object oriented style (method):
public void CairoContext::popGroupToSource ( void )
Procedural style:
void cairo_pop_group_to_source ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::pushGroup</FName>
    <Desc>Object oriented style (method):
public void CairoContext::pushGroup ( void )
Procedural style:
void cairo_push_group ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_push_group</FName>
    <Desc>Object oriented style (method):
public void CairoContext::pushGroup ( void )
Procedural style:
void cairo_push_group ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::pushGroupWithContent</FName>
    <Desc>Object oriented style (method):
public void CairoContext::pushGroupWithContent ( int $content )
Procedural style:
void cairo_push_group_with_content ( CairoContext $context , int $content )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_push_group_with_content</FName>
    <Desc>Object oriented style (method):
public void CairoContext::pushGroupWithContent ( int $content )
Procedural style:
void cairo_push_group_with_content ( CairoContext $context , int $content )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::rectangle</FName>
    <Desc>Object oriented style (method):
public void CairoContext::rectangle ( float $x , float $y , float $width , float $height )
Procedural style:
void cairo_rectangle ( CairoContext $context , float $x , float $y , float $width , float $height )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_rectangle</FName>
    <Desc>Object oriented style (method):
public void CairoContext::rectangle ( float $x , float $y , float $width , float $height )
Procedural style:
void cairo_rectangle ( CairoContext $context , float $x , float $y , float $width , float $height )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::relCurveTo</FName>
    <Desc>Object oriented style (method):
public void CairoContext::relCurveTo ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
Procedural style:
void cairo_rel_curve_to ( CairoContext $context , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_rel_curve_to</FName>
    <Desc>Object oriented style (method):
public void CairoContext::relCurveTo ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
Procedural style:
void cairo_rel_curve_to ( CairoContext $context , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::relLineTo</FName>
    <Desc>Object oriented style (method):
public void CairoContext::relLineTo ( float $x , float $y )
Procedural style:
void cairo_rel_line_to ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_rel_line_to</FName>
    <Desc>Object oriented style (method):
public void CairoContext::relLineTo ( float $x , float $y )
Procedural style:
void cairo_rel_line_to ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::relMoveTo</FName>
    <Desc>Object oriented style (method):
public void CairoContext::relMoveTo ( float $x , float $y )
Procedural style:
void cairo_rel_move_to ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_rel_move_to</FName>
    <Desc>Object oriented style (method):
public void CairoContext::relMoveTo ( float $x , float $y )
Procedural style:
void cairo_rel_move_to ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::resetClip</FName>
    <Desc>Object oriented style (method):
public void CairoContext::resetClip ( void )
Procedural style:
void cairo_reset_clip ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_reset_clip</FName>
    <Desc>Object oriented style (method):
public void CairoContext::resetClip ( void )
Procedural style:
void cairo_reset_clip ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::restore</FName>
    <Desc>Object oriented style (method):
public void CairoContext::restore ( void )
Procedural style:
void cairo_restore ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_restore</FName>
    <Desc>Object oriented style (method):
public void CairoContext::restore ( void )
Procedural style:
void cairo_restore ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::rotate</FName>
    <Desc>Object oriented style (method):
public void CairoContext::rotate ( float $angle )
Procedural style:
void cairo_rotate ( CairoContext $context , float $angle )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_rotate</FName>
    <Desc>Object oriented style (method):
public void CairoContext::rotate ( float $angle )
Procedural style:
void cairo_rotate ( CairoContext $context , float $angle )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::save</FName>
    <Desc>Object oriented style (method):
public void CairoContext::save ( void )
Procedural style:
void cairo_save ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_save</FName>
    <Desc>Object oriented style (method):
public void CairoContext::save ( void )
Procedural style:
void cairo_save ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::scale</FName>
    <Desc>Object oriented style (method):
public void CairoContext::scale ( float $x , float $y )
Procedural style:
void cairo_scale ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scale</FName>
    <Desc>Object oriented style (method):
public void CairoContext::scale ( float $x , float $y )
Procedural style:
void cairo_scale ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::selectFontFace</FName>
    <Desc>Object oriented style (method):
public void CairoContext::selectFontFace ( string $family [, int $slant [, int $weight ]] )
Procedural style:
void cairo_select_font_face ( CairoContext $context , string $family [, int $slant [, int $weight ]] )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_select_font_face</FName>
    <Desc>Object oriented style (method):
public void CairoContext::selectFontFace ( string $family [, int $slant [, int $weight ]] )
Procedural style:
void cairo_select_font_face ( CairoContext $context , string $family [, int $slant [, int $weight ]] )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setAntialias</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setAntialias ([ int $antialias ] )
Procedural style:
void cairo_set_antialias ( CairoContext $context [, int $antialias ] )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_antialias</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setAntialias ([ int $antialias ] )
Procedural style:
void cairo_set_antialias ( CairoContext $context [, int $antialias ] )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setDash</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setDash ( array $dashes [, float $offset ] )
Procedural style:
void cairo_set_dash ( CairoContext $context , array $dashes [, float $offset ] )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_dash</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setDash ( array $dashes [, float $offset ] )
Procedural style:
void cairo_set_dash ( CairoContext $context , array $dashes [, float $offset ] )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setFillRule</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setFillRule ( int $setting )
Procedural style:
void cairo_set_fill_rule ( CairoContext $context , int $setting )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_fill_rule</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setFillRule ( int $setting )
Procedural style:
void cairo_set_fill_rule ( CairoContext $context , int $setting )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setFontFace</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setFontFace ( CairoFontFace $fontface )
Procedural style:
void cairo_set_font_face ( CairoContext $context , CairoFontFace $fontface )
Sets the font-face for a given context.
</Desc>
    <FName>cairo_set_font_face</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setFontFace ( CairoFontFace $fontface )
Procedural style:
void cairo_set_font_face ( CairoContext $context , CairoFontFace $fontface )
Sets the font-face for a given context.
</Desc>
    <FName>CairoContext::setFontMatrix</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setFontMatrix ( CairoMatrix $matrix )
Procedural style:
void cairo_set_font_matrix ( CairoContext $context , CairoMatrix $matrix )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_font_matrix</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setFontMatrix ( CairoMatrix $matrix )
Procedural style:
void cairo_set_font_matrix ( CairoContext $context , CairoMatrix $matrix )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setFontOptions</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setFontOptions ( CairoFontOptions $fontoptions )
Procedural style:
void cairo_set_font_options ( CairoContext $context , CairoFontOptions $fontoptions )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_font_options</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setFontOptions ( CairoFontOptions $fontoptions )
Procedural style:
void cairo_set_font_options ( CairoContext $context , CairoFontOptions $fontoptions )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setFontSize</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setFontSize ( float $size )
Procedural style:
void cairo_set_font_size ( CairoContext $context , float $size )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_font_size</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setFontSize ( float $size )
Procedural style:
void cairo_set_font_size ( CairoContext $context , float $size )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setLineCap</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setLineCap ( int $setting )
Procedural style:
void cairo_set_line_cap ( CairoContext $context , int $setting )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_line_cap</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setLineCap ( int $setting )
Procedural style:
void cairo_set_line_cap ( CairoContext $context , int $setting )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setLineJoin</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setLineJoin ( int $setting )
Procedural style:
void cairo_set_line_join ( CairoContext $context , int $setting )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_line_join</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setLineJoin ( int $setting )
Procedural style:
void cairo_set_line_join ( CairoContext $context , int $setting )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setLineWidth</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setLineWidth ( float $width )
Procedural style:
void cairo_set_line_width ( CairoContext $context , float $width )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_line_width</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setLineWidth ( float $width )
Procedural style:
void cairo_set_line_width ( CairoContext $context , float $width )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setMatrix</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setMatrix ( CairoMatrix $matrix )
Procedural style:
void cairo_set_matrix ( CairoContext $context , CairoMatrix $matrix )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_matrix</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setMatrix ( CairoMatrix $matrix )
Procedural style:
void cairo_set_matrix ( CairoContext $context , CairoMatrix $matrix )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setMiterLimit</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setMiterLimit ( float $limit )
Procedural style:
void cairo_set_miter_limit ( CairoContext $context , float $limit )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_miter_limit</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setMiterLimit ( float $limit )
Procedural style:
void cairo_set_miter_limit ( CairoContext $context , float $limit )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setOperator</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setOperator ( int $setting )
Procedural style:
void cairo_set_operator ( CairoContext $context , int $setting )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_operator</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setOperator ( int $setting )
Procedural style:
void cairo_set_operator ( CairoContext $context , int $setting )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setScaledFont</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setScaledFont ( CairoScaledFont $scaledfont )
Procedural style:
void cairo_set_scaled_font ( CairoContext $context , CairoScaledFont $scaledfont )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_scaled_font</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setScaledFont ( CairoScaledFont $scaledfont )
Procedural style:
void cairo_set_scaled_font ( CairoContext $context , CairoScaledFont $scaledfont )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setSource</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setSource ( CairoPattern $pattern )
Procedural style:
void cairo_set_source ( CairoContext $context , CairoPattern $pattern )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_source</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setSource ( CairoPattern $pattern )
Procedural style:
void cairo_set_source ( CairoContext $context , CairoPattern $pattern )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setSourceRGB</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setSourceRGB ( float $red , float $green , float $blue )
Procedural style:
void cairo_set_source ( CairoContext $context , float $red , float $green , float $blue )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setSourceRGBA</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setSourceRGBA ( float $red , float $green , float $blue , float $alpha )
Procedural style:
void cairo_set_source ( CairoContext $context , float $red , float $green , float $blue , float $alpha )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setSourceSurface</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setSourceSurface ( CairoSurface $surface [, float $x [, float $y ]] )
Procedural style:
void cairo_set_source_surface ( CairoContext $context , CairoSurface $surface [, float $x [, float $y ]] )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_source_surface</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setSourceSurface ( CairoSurface $surface [, float $x [, float $y ]] )
Procedural style:
void cairo_set_source_surface ( CairoContext $context , CairoSurface $surface [, float $x [, float $y ]] )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::setTolerance</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setTolerance ( float $tolerance )
Procedural style:
void cairo_set_tolerance ( CairoContext $context , float $tolerance )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_set_tolerance</FName>
    <Desc>Object oriented style (method):
public void CairoContext::setTolerance ( float $tolerance )
Procedural style:
void cairo_set_tolerance ( CairoContext $context , float $tolerance )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::showPage</FName>
    <Desc>Object oriented style (method):
public void CairoContext::showPage ( void )
Procedural style:
void cairo_show_page ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_show_page</FName>
    <Desc>Object oriented style (method):
public void CairoContext::showPage ( void )
Procedural style:
void cairo_show_page ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::showText</FName>
    <Desc>Object oriented style (method):
public void CairoContext::showText ( string $text )
Procedural style:
void cairo_show_text ( CairoContext $context , string $text )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_show_text</FName>
    <Desc>Object oriented style (method):
public void CairoContext::showText ( string $text )
Procedural style:
void cairo_show_text ( CairoContext $context , string $text )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::status</FName>
    <Desc>Object oriented style (method):
public int CairoContext::status ( void )
Procedural style:
int cairo_status ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_status</FName>
    <Desc>Object oriented style (method):
public int CairoContext::status ( void )
Procedural style:
int cairo_status ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::stroke</FName>
    <Desc>Object oriented style (method):
public void CairoContext::stroke ( void )
Procedural style:
void cairo_stroke ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_stroke</FName>
    <Desc>Object oriented style (method):
public void CairoContext::stroke ( void )
Procedural style:
void cairo_stroke ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::strokeExtents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::strokeExtents ( void )
Procedural style:
array cairo_stroke_extents ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_stroke_extents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::strokeExtents ( void )
Procedural style:
array cairo_stroke_extents ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::strokePreserve</FName>
    <Desc>Object oriented style (method):
public void CairoContext::strokePreserve ( void )
Procedural style:
void cairo_stroke_preserve ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_stroke_preserve</FName>
    <Desc>Object oriented style (method):
public void CairoContext::strokePreserve ( void )
Procedural style:
void cairo_stroke_preserve ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::textExtents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::textExtents ( string $text )
Procedural style:
array cairo_text_extents ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_text_extents</FName>
    <Desc>Object oriented style (method):
public array CairoContext::textExtents ( string $text )
Procedural style:
array cairo_text_extents ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::textPath</FName>
    <Desc>Object oriented style
public void CairoContext::textPath ( string $string )
Procedural style
void cairo_text_path ( CairoContext $context , string $text )
Adds closed paths for text to the current path. The generated path, if filled, achieves an effect similar to that of CairoContext::showText(). 
Text conversion and positioning is done similar to CairoContext::showText(). 
Like CairoContext::showText(), after this call the current point is moved to the origin of where the next glyph would be placed in this same progression. That is, the current point will be at the origin of the final glyph offset by its advance values. This allows for chaining multiple calls to CairoContext::showText() without having to set current point in between. 
Note: The CairoContext::textPath() function call is part of what the cairo designers call the "toy" text API. It is convenient for short demos and simple programs, but it is not expected to be adequate for serious text-using applications. See CairoContext::glyphPath() for the "real" text path API in cairo.
</Desc>
    <FName>cairo_text_path</FName>
    <Desc>Object oriented style
public void CairoContext::textPath ( string $string )
Procedural style
void cairo_text_path ( CairoContext $context , string $text )
Adds closed paths for text to the current path. The generated path, if filled, achieves an effect similar to that of CairoContext::showText(). 
Text conversion and positioning is done similar to CairoContext::showText(). 
Like CairoContext::showText(), after this call the current point is moved to the origin of where the next glyph would be placed in this same progression. That is, the current point will be at the origin of the final glyph offset by its advance values. This allows for chaining multiple calls to CairoContext::showText() without having to set current point in between. 
Note: The CairoContext::textPath() function call is part of what the cairo designers call the "toy" text API. It is convenient for short demos and simple programs, but it is not expected to be adequate for serious text-using applications. See CairoContext::glyphPath() for the "real" text path API in cairo.
</Desc>
    <FName>CairoContext::transform</FName>
    <Desc>Object oriented style (method):
public void CairoContext::transform ( CairoMatrix $matrix )
Procedural style:
void cairo_transform ( CairoContext $context , CairoMatrix $matrix )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_transform</FName>
    <Desc>Object oriented style (method):
public void CairoContext::transform ( CairoMatrix $matrix )
Procedural style:
void cairo_transform ( CairoContext $context , CairoMatrix $matrix )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::translate</FName>
    <Desc>Object oriented style (method):
public void CairoContext::translate ( float $x , float $y )
Procedural style:
void cairo_translate ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_translate</FName>
    <Desc>Object oriented style (method):
public void CairoContext::translate ( float $x , float $y )
Procedural style:
void cairo_translate ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::userToDevice</FName>
    <Desc>Object oriented style (method):
public array CairoContext::userToDevice ( float $x , float $y )
Procedural style:
array cairo_user_to_device ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_user_to_device</FName>
    <Desc>Object oriented style (method):
public array CairoContext::userToDevice ( float $x , float $y )
Procedural style:
array cairo_user_to_device ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoContext::userToDeviceDistance</FName>
    <Desc>Object oriented style (method):
public array CairoContext::userToDeviceDistance ( float $x , float $y )
Procedural style:
array cairo_user_to_device_distance ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_user_to_device_distance</FName>
    <Desc>Object oriented style (method):
public array CairoContext::userToDeviceDistance ( float $x , float $y )
Procedural style:
array cairo_user_to_device_distance ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontFace::__construct</FName>
    <Desc>public CairoFontFace::__construct ( void )
CairoFontFace class represents a particular font at a particular weight, slant, and other characteristic but no transformation or size. 
Note: This class can't be instantiated directly it is created by CairoContext::getFontFace() or cairo_scaled_font_get_font_face()
</Desc>
    <FName>CairoFontFace::getType</FName>
    <Desc>Object oriented style (method):
public int CairoFontFace::getType ( void )
Procedural style:
int cairo_font_face_get_type ( CairoFontFace $fontface )
This function returns the type of the backend used to create a font face. See CairoFontType class constants for available types.
</Desc>
    <FName>cairo_font_face_get_type</FName>
    <Desc>Object oriented style (method):
public int CairoFontFace::getType ( void )
Procedural style:
int cairo_font_face_get_type ( CairoFontFace $fontface )
This function returns the type of the backend used to create a font face. See CairoFontType class constants for available types.
</Desc>
    <FName>CairoFontFace::status</FName>
    <Desc>Object oriented style (method):
public int CairoFontFace::status ( void )
Procedural style:
int cairo_font_face_status ( CairoFontFace $fontface )
Checks whether an error has previously occurred for this font face
</Desc>
    <FName>cairo_font_face_status</FName>
    <Desc>Object oriented style (method):
public int CairoFontFace::status ( void )
Procedural style:
int cairo_font_face_status ( CairoFontFace $fontface )
Checks whether an error has previously occurred for this font face
</Desc>
    <FName>CairoFontOptions::__construct</FName>
    <Desc>public CairoFontOptions::__construct ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::equal</FName>
    <Desc>public bool CairoFontOptions::equal ( CairoFontOptions $other )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::getAntialias</FName>
    <Desc>Object oriented style (method):
public int CairoFontOptions::getAntialias ( void )
Procedural style:
int cairo_get_antialias ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::getHintMetrics</FName>
    <Desc>public int CairoFontOptions::getHintMetrics ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::getHintStyle</FName>
    <Desc>public int CairoFontOptions::getHintStyle ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::getSubpixelOrder</FName>
    <Desc>public int CairoFontOptions::getSubpixelOrder ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::hash</FName>
    <Desc>public int CairoFontOptions::hash ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::merge</FName>
    <Desc>public void CairoFontOptions::merge ( CairoFontOptions $other )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::setAntialias</FName>
    <Desc>Object oriented style (method):
public void CairoFontOptions::setAntialias ( int $antialias )
Procedural style:
void cairo_set_antialias ( CairoContext $context [, int $antialias ] )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::setHintMetrics</FName>
    <Desc>public void CairoFontOptions::setHintMetrics ( int $hint_metrics )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::setHintStyle</FName>
    <Desc>public void CairoFontOptions::setHintStyle ( int $hint_style )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::setSubpixelOrder</FName>
    <Desc>public void CairoFontOptions::setSubpixelOrder ( int $subpixel_order )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFontOptions::status</FName>
    <Desc>Object oriented style (method):
public int CairoFontOptions::status ( void )
Procedural style:
int cairo_status ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoFormat::strideForWidth</FName>
    <Desc>public static int CairoFormat::strideForWidth ( int $format , int $width )
This method provides a stride value that will respect all alignment requirements of the accelerated image-rendering code within cairo.
</Desc>
    <FName>CairoGradientPattern::addColorStopRgb</FName>
    <Desc>public void CairoGradientPattern::addColorStopRgb ( float $offset , float $red , float $green , float $blue )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoGradientPattern::addColorStopRgba</FName>
    <Desc>public void CairoGradientPattern::addColorStopRgba ( float $offset , float $red , float $green , float $blue , float $alpha )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoGradientPattern::getColorStopCount</FName>
    <Desc>public int CairoGradientPattern::getColorStopCount ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoGradientPattern::getColorStopRgba</FName>
    <Desc>public array CairoGradientPattern::getColorStopRgba ( int $index )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoGradientPattern::getExtend</FName>
    <Desc>public int CairoGradientPattern::getExtend ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoGradientPattern::setExtend</FName>
    <Desc>public void CairoGradientPattern::setExtend ( int $extend )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoImageSurface::__construct</FName>
    <Desc>public CairoImageSurface::__construct ( int $format , int $width , int $height )
Creates a new CairoImageSuface object of type format
</Desc>
    <FName>CairoImageSurface::createForData</FName>
    <Desc>public static void CairoImageSurface::createForData ( string $data , int $format , int $width , int $height )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoImageSurface::createFromPng</FName>
    <Desc>public static CairoImageSurface CairoImageSurface::createFromPng ( string $file )
Creates a new CairoImageSurface form a png image file 
This method should be called static
</Desc>
    <FName>CairoImageSurface::getData</FName>
    <Desc>public string CairoImageSurface::getData ( void )
Returns the image data of this surface or NULL if surface is not an image surface, or if CairoContext::finish(), procedural : cairo_surface_finish(), has been called.
</Desc>
    <FName>CairoImageSurface::getFormat</FName>
    <Desc>public int CairoImageSurface::getFormat ( void )
Retrieves the image format, as one of the CairoFormat defined
</Desc>
    <FName>CairoImageSurface::getHeight</FName>
    <Desc>public int CairoImageSurface::getHeight ( void )
This methods returns the CairoImageSurface height.
</Desc>
    <FName>CairoImageSurface::getStride</FName>
    <Desc>public int CairoImageSurface::getStride ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoImageSurface::getWidth</FName>
    <Desc>public int CairoImageSurface::getWidth ( void )
Gets the width of the CairoImageSurface
</Desc>
    <FName>CairoLinearGradient::__construct</FName>
    <Desc>public CairoLinearGradient::__construct ( float $x0 , float $y0 , float $x1 , float $y1 )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoLinearGradient::getPoints</FName>
    <Desc>public array CairoLinearGradient::getPoints ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoMatrix::__construct</FName>
    <Desc>Object oriented style (method):
public CairoMatrix::__construct ([ float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0 ]]]]]] )
Procedural style:
object cairo_matrix_init ([ float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0 ]]]]]] )
Returns new CairoMatrix object. Matrices are used throughout cairo to convert between different coordinate spaces. Sets matrix to be the affine transformation given by xx, yx, xy, yy, x0, y0. The transformation is given by: x_new = xx * x + xy * y + x0; and y_new = yx * x + yy * y + y0;
</Desc>
    <FName>cairo_matrix_init</FName>
    <Desc>Object oriented style (method):
public CairoMatrix::__construct ([ float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0 ]]]]]] )
Procedural style:
object cairo_matrix_init ([ float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0 ]]]]]] )
Returns new CairoMatrix object. Matrices are used throughout cairo to convert between different coordinate spaces. Sets matrix to be the affine transformation given by xx, yx, xy, yy, x0, y0. The transformation is given by: x_new = xx * x + xy * y + x0; and y_new = yx * x + yy * y + y0;
</Desc>
    <FName>CairoMatrix::initIdentity</FName>
    <Desc>Object oriented style (method):
public static void CairoMatrix::initIdentity ( void )
Procedural style:
object cairo_matrix_init_identity ( void )
Creates a new matrix that is an identity transformation. An identity transformation means the source data is copied into the destination data without change
</Desc>
    <FName>cairo_matrix_init_identity</FName>
    <Desc>Object oriented style (method):
public static void CairoMatrix::initIdentity ( void )
Procedural style:
object cairo_matrix_init_identity ( void )
Creates a new matrix that is an identity transformation. An identity transformation means the source data is copied into the destination data without change
</Desc>
    <FName>CairoMatrix::initRotate</FName>
    <Desc>Object oriented style (method):
public static void CairoMatrix::initRotate ( float $radians )
Procedural style:
object cairo_matrix_init_rotate ( float $radians )
Creats a new matrix to a transformation that rotates by radians provided
</Desc>
    <FName>cairo_matrix_init_rotate</FName>
    <Desc>Object oriented style (method):
public static void CairoMatrix::initRotate ( float $radians )
Procedural style:
object cairo_matrix_init_rotate ( float $radians )
Creats a new matrix to a transformation that rotates by radians provided
</Desc>
    <FName>CairoMatrix::initScale</FName>
    <Desc>Object oriented style (method):
public static void CairoMatrix::initScale ( float $sx , float $sy )
Procedural style:
object cairo_matrix_init_scale ( float $sx , float $sy )
Creates a new matrix to a transformation that scales by sx and sy in the X and Y dimensions, respectively.
</Desc>
    <FName>cairo_matrix_init_scale</FName>
    <Desc>Object oriented style (method):
public static void CairoMatrix::initScale ( float $sx , float $sy )
Procedural style:
object cairo_matrix_init_scale ( float $sx , float $sy )
Creates a new matrix to a transformation that scales by sx and sy in the X and Y dimensions, respectively.
</Desc>
    <FName>CairoMatrix::initTranslate</FName>
    <Desc>Object oriented style (method):
public static void CairoMatrix::initTranslate ( float $tx , float $ty )
Procedural style:
object cairo_matrix_init_translate ( float $tx , float $ty )
Creates a new matrix to a transformation that translates by tx and ty in the X and Y dimensions, respectively.
</Desc>
    <FName>cairo_matrix_init_translate</FName>
    <Desc>Object oriented style (method):
public static void CairoMatrix::initTranslate ( float $tx , float $ty )
Procedural style:
object cairo_matrix_init_translate ( float $tx , float $ty )
Creates a new matrix to a transformation that translates by tx and ty in the X and Y dimensions, respectively.
</Desc>
    <FName>CairoMatrix::invert</FName>
    <Desc>public void CairoMatrix::invert ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoMatrix::multiply</FName>
    <Desc>public static CairoMatrix CairoMatrix::multiply ( CairoMatrix $matrix1 , CairoMatrix $matrix2 )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoMatrix::rotate</FName>
    <Desc>Object oriented style (method):
public void CairoMatrix::rotate ( float $radians )
Procedural style:
void cairo_matrix_rotate ( CairoContext $context , string $radians )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_matrix_rotate</FName>
    <Desc>Object oriented style (method):
public void CairoMatrix::rotate ( float $radians )
Procedural style:
void cairo_matrix_rotate ( CairoContext $context , string $radians )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoMatrix::scale</FName>
    <Desc>Object oriented style (method):
public void CairoMatrix::scale ( float $sx , float $sy )
Procedural style:
void cairo_matrix_scale ( CairoContext $context , float $sx , float $sy )
Applies scaling by sx, sy to the transformation in the matrix. The effect of the new transformation is to first scale the coordinates by sx and sy, then apply the original transformation to the coordinates.
</Desc>
    <FName>cairo_matrix_scale</FName>
    <Desc>Object oriented style (method):
public void CairoMatrix::scale ( float $sx , float $sy )
Procedural style:
void cairo_matrix_scale ( CairoContext $context , float $sx , float $sy )
Applies scaling by sx, sy to the transformation in the matrix. The effect of the new transformation is to first scale the coordinates by sx and sy, then apply the original transformation to the coordinates.
</Desc>
    <FName>CairoMatrix::transformDistance</FName>
    <Desc>public array CairoMatrix::transformDistance ( float $dx , float $dy )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoMatrix::transformPoint</FName>
    <Desc>public array CairoMatrix::transformPoint ( float $dx , float $dy )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoMatrix::translate</FName>
    <Desc>Object oriented style (method):
public void CairoMatrix::translate ( float $tx , float $ty )
Procedural style:
void cairo_translate ( CairoContext $context , float $x , float $y )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPattern::__construct</FName>
    <Desc>public CairoPattern::__construct ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPattern::getMatrix</FName>
    <Desc>Object oriented style (method):
public void CairoPattern::getMatrix ( void )
Procedural style:
void cairo_get_matrix ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPattern::getType</FName>
    <Desc>public int CairoPattern::getType ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPattern::setMatrix</FName>
    <Desc>Object oriented style (method):
public void CairoPattern::setMatrix ( CairoMatrix $matrix )
Procedural style:
void cairo_set_matrix ( CairoContext $context , CairoMatrix $matrix )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPattern::status</FName>
    <Desc>Object oriented style (method):
public int CairoPattern::status ( void )
Procedural style:
int cairo_status ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPdfSurface::__construct</FName>
    <Desc>public CairoPdfSurface::__construct ( string $file , float $width , float $height )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPdfSurface::setSize</FName>
    <Desc>public void CairoPdfSurface::setSize ( float $width , float $height )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPsSurface::__construct</FName>
    <Desc>public CairoPsSurface::__construct ( string $file , float $width , float $height )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPsSurface::dscBeginPageSetup</FName>
    <Desc>public void CairoPsSurface::dscBeginPageSetup ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPsSurface::dscBeginSetup</FName>
    <Desc>public void CairoPsSurface::dscBeginSetup ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPsSurface::dscComment</FName>
    <Desc>public void CairoPsSurface::dscComment ( string $comment )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPsSurface::getEps</FName>
    <Desc>public bool CairoPsSurface::getEps ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPsSurface::getLevels</FName>
    <Desc>public static array CairoPsSurface::getLevels ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPsSurface::levelToString</FName>
    <Desc>public static string CairoPsSurface::levelToString ( int $level )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPsSurface::restrictToLevel</FName>
    <Desc>public void CairoPsSurface::restrictToLevel ( int $level )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPsSurface::setEps</FName>
    <Desc>public void CairoPsSurface::setEps ( bool $level )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoPsSurface::setSize</FName>
    <Desc>public void CairoPsSurface::setSize ( float $width , float $height )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoRadialGradient::__construct</FName>
    <Desc>Object oriented style:
public CairoRadialGradient::__construct ( float $x0 , float $y0 , float $r0 , float $x1 , float $y1 , float $r1 )
Procedural style:
Creates a new radial gradient CairoPattern between the two circles defined by (x0, y0, r0) and (x1, y1, r1). Before using the gradient pattern, a number of color stops should be defined using CairoRadialGradient::addColorStopRgb() or CairoRadialGradient::addColorStopRgba(). 
Note: The coordinates here are in pattern space. For a new pattern, pattern space is identical to user space, but the relationship between the spaces can be changed with CairoRadialGradient::setMatrix().
</Desc>
    <FName>CairoRadialGradient::getCircles</FName>
    <Desc>public array CairoRadialGradient::getCircles ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoScaledFont::__construct</FName>
    <Desc>public CairoScaledFont::__construct ( CairoFontFace $font_face , CairoMatrix $matrix , CairoMatrix $ctm , CairoFontOptions $options )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoScaledFont::extents</FName>
    <Desc>public array CairoScaledFont::extents ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoScaledFont::getCtm</FName>
    <Desc>public CairoMatrix CairoScaledFont::getCtm ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoScaledFont::getFontFace</FName>
    <Desc>Object oriented style (method):
public void CairoScaledFont::getFontFace ( void )
Procedural style:
void cairo_get_font_face ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoScaledFont::getFontMatrix</FName>
    <Desc>Object oriented style (method):
public void CairoScaledFont::getFontMatrix ( void )
Procedural style:
void cairo_get_font_matrix ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoScaledFont::getFontOptions</FName>
    <Desc>Object oriented style (method):
public void CairoScaledFont::getFontOptions ( void )
Procedural style:
void cairo_get_font_options ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoScaledFont::getScaleMatrix</FName>
    <Desc>public void CairoScaledFont::getScaleMatrix ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoScaledFont::getType</FName>
    <Desc>public int CairoScaledFont::getType ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoScaledFont::glyphExtents</FName>
    <Desc>public array CairoScaledFont::glyphExtents ( array $glyphs )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoScaledFont::status</FName>
    <Desc>Object oriented style (method):
public int CairoScaledFont::status ( void )
Procedural style:
int cairo_status ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoScaledFont::textExtents</FName>
    <Desc>Object oriented style (method):
public array CairoScaledFont::textExtents ( string $text )
Procedural style:
array cairo_text_extents ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSolidPattern::__construct</FName>
    <Desc>public CairoSolidPattern::__construct ( float $red , float $green , float $blue [, float $alpha = 0 ] )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSolidPattern::getRgba</FName>
    <Desc>public array CairoSolidPattern::getRgba ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::__construct</FName>
    <Desc>public CairoSurface::__construct ( void )
CairoSurface is an abstract type and, as such, should not be instantiated in your PHP scripts.
</Desc>
    <FName>CairoSurface::copyPage</FName>
    <Desc>Object oriented style (method):
public void CairoSurface::copyPage ( void )
Procedural style:
void cairo_copy_page ( CairoContext $context )
Emits the current page for backends that support multiple pages, but doesn't clear it, so that the contents of the current page will be retained for the next page. Use CairoSurface::showPage() if you want to get an empty page after the emission.
</Desc>
    <FName>CairoSurface::createSimilar</FName>
    <Desc>public void CairoSurface::createSimilar ( CairoSurface $other , int $content , string $width , string $height )
Create a new surface that is as compatible as possible with an existing surface. For example the new surface will have the same fallback resolution and font options as other. Generally, the new surface will also use the same backend as other, unless that is not possible for some reason. The type of the returned surface may be examined with CairoSurface::getType(). Initially the surface contents are all 0 (transparent if contents have transparency, black otherwise.)
</Desc>
    <FName>CairoSurface::finish</FName>
    <Desc>public void CairoSurface::finish ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::flush</FName>
    <Desc>public void CairoSurface::flush ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::getContent</FName>
    <Desc>public int CairoSurface::getContent ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::getDeviceOffset</FName>
    <Desc>public array CairoSurface::getDeviceOffset ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::getFontOptions</FName>
    <Desc>Object oriented style (method):
public void CairoSurface::getFontOptions ( void )
Procedural style:
void cairo_get_font_options ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::getType</FName>
    <Desc>public int CairoSurface::getType ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::markDirty</FName>
    <Desc>public void CairoSurface::markDirty ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::markDirtyRectangle</FName>
    <Desc>public void CairoSurface::markDirtyRectangle ( float $x , float $y , float $width , float $height )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::setDeviceOffset</FName>
    <Desc>public void CairoSurface::setDeviceOffset ( float $x , float $y )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::setFallbackResolution</FName>
    <Desc>public void CairoSurface::setFallbackResolution ( float $x , float $y )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::showPage</FName>
    <Desc>Object oriented style (method):
public void CairoSurface::showPage ( void )
Procedural style:
void cairo_show_page ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::status</FName>
    <Desc>Object oriented style (method):
public int CairoSurface::status ( void )
Procedural style:
int cairo_status ( CairoContext $context )
Description here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurface::writeToPng</FName>
    <Desc>public void CairoSurface::writeToPng ( string $file )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurfacePattern::__construct</FName>
    <Desc>public CairoSurfacePattern::__construct ( CairoSurface $surface )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurfacePattern::getExtend</FName>
    <Desc>public int CairoSurfacePattern::getExtend ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurfacePattern::getFilter</FName>
    <Desc>public int CairoSurfacePattern::getFilter ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurfacePattern::getSurface</FName>
    <Desc>public void CairoSurfacePattern::getSurface ( void )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurfacePattern::setExtend</FName>
    <Desc>public void CairoSurfacePattern::setExtend ( int $extend )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSurfacePattern::setFilter</FName>
    <Desc>public void CairoSurfacePattern::setFilter ( int $filter )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSvgSurface::__construct</FName>
    <Desc>public CairoSvgSurface::__construct ( string $file , float $width , float $height )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSvgSurface::getVersions</FName>
    <Desc>Object oriented style (method):
public static array CairoSvgSurface::getVersions ( void )
Procedural style:
array cairo_svg_get_versions ( void )
Returns a numerically indexed array of currently available CairoSvgVersion constants. In order to retreive the string values for each item, use CairoSvgSurface::versionToString().
</Desc>
    <FName>cairo_svg_surface_get_versions</FName>
    <Desc>Object oriented style (method):
public static array CairoSvgSurface::getVersions ( void )
Procedural style:
array cairo_svg_get_versions ( void )
Returns a numerically indexed array of currently available CairoSvgVersion constants. In order to retreive the string values for each item, use CairoSvgSurface::versionToString().
</Desc>
    <FName>CairoSvgSurface::restrictToVersion</FName>
    <Desc>public void CairoSvgSurface::restrictToVersion ( int $version )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CairoSvgSurface::versionToString</FName>
    <Desc>public static string CairoSvgSurface::versionToString ( int $version )
The method description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CallbackFilterIterator::accept</FName>
    <Desc>public string CallbackFilterIterator::accept ( void )
This method calls the callback with the current value, current key and the inner iterator. 
The callback is expected to return TRUE if the current item is to be accepted, or FALSE otherwise.
</Desc>
    <FName>CallbackFilterIterator::__construct</FName>
    <Desc>public CallbackFilterIterator::__construct ( Iterator $iterator , callable $callback )
Creates a filtered iterator using the callback to determine which items are accepted or rejected.
</Desc>
    <FName>chdb::__construct</FName>
    <Desc>public chdb::__construct ( string $pathname )
Loads a chdb file, by mapping it into memory. 
Note: 
While some validity checks are performed on the specified file, they are mostly there to avoid the possibility of common mistakes (for example, loading a file which is not a chdb database, or that is somehow incompatible with the current system). A maliciously crafted chdb file can thus be dangerous if loaded, so chdb files should be trusted and treated with the same security protections used for PHP shared libraries.
</Desc>
    <FName>chdb::get</FName>
    <Desc>public string chdb::get ( string $key )
Gets the value associated with a key from a chdb database.
</Desc>
    <FName>Closure::bind</FName>
    <Desc>public static Closure Closure::bind ( Closure $closure , object $newthis [, mixed $newscope = "static" ] )
This method is a static version of Closure::bindTo(). See the documentation of that method for more information.
</Desc>
    <FName>Closure::bindTo</FName>
    <Desc>public Closure Closure::bindTo ( object $newthis [, mixed $newscope = "static" ] )
Create and return a new anonymous function with the same body and bound variables as this one, but possibly with a different bound object and a new class scope. 
The “bound object” determines the value $this will have in the function body and the “class scope” represents a class which determines which private and protected members the anonymous function will be able to access. Namely, the members that will be visible are the same as if the anonymous function were a method of the class given as value of the newscope parameter. 
Static closures cannot have any bound object (the value of the parameter newthis should be NULL), but this function can nevertheless be used to change their class scope. 
This function will ensure that for a non-static closure, having a bound instance will imply being scoped and vice-versa. To this end, non-static closures that are given a scope but a NULL instance are made static and non-static non-scoped closures that are given a non-null instance are scoped to an unspecified class. 
Note: 
If you only want to duplicate the anonymous functions, you can use cloning instead.
</Desc>
    <FName>Closure::call</FName>
    <Desc>public mixed Closure::call ( object $newthis [, mixed $... ] )
Temporarily binds the closure to newthis, and calls it with any given parameters.
</Desc>
    <FName>Closure::__construct</FName>
    <Desc>private Closure::__construct ( void )
This method exists only to disallow instantiation of the Closure class. Objects of this class are created in the fashion described on the anonymous functions page.
</Desc>
    <FName>Closure::fromCallable</FName>
    <Desc>public static Closure Closure::fromCallable ( callable $callable )
Create and return a new anonymous function from given callable using the current scope. This method checks if the callable is callable in the current scope and throws a TypeError if it is not.
</Desc>
    <FName>Collator::asort</FName>
    <Desc>Object oriented style
public bool Collator::asort ( array &$arr [, int $sort_flag ] )
Procedural style 
bool collator_asort ( Collator $coll , array &$arr [, int $sort_flag ] )
This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant. Array elements will have sort order according to current locale rules. 
Equivalent to standard PHP asort().
</Desc>
    <FName>collator_asort</FName>
    <Desc>Object oriented style
public bool Collator::asort ( array &$arr [, int $sort_flag ] )
Procedural style 
bool collator_asort ( Collator $coll , array &$arr [, int $sort_flag ] )
This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant. Array elements will have sort order according to current locale rules. 
Equivalent to standard PHP asort().
</Desc>
    <FName>Collator::compare</FName>
    <Desc>Object oriented style 
public int Collator::compare ( string $str1 , string $str2 )
Procedural style 
int collator_compare ( Collator $coll , string $str1 , string $str2 )
Compare two Unicode strings according to collation rules.
</Desc>
    <FName>collator_compare</FName>
    <Desc>Object oriented style 
public int Collator::compare ( string $str1 , string $str2 )
Procedural style 
int collator_compare ( Collator $coll , string $str1 , string $str2 )
Compare two Unicode strings according to collation rules.
</Desc>
    <FName>Collator::__construct</FName>
    <Desc>public Collator::__construct ( string $locale )
Creates a new instance of Collator.
</Desc>
    <FName>Collator::create</FName>
    <Desc>Object oriented style
public static Collator Collator::create ( string $locale )
Procedural style 
Collator collator_create ( string $locale )
The strings will be compared using the options already specified.
</Desc>
    <FName>collator_create</FName>
    <Desc>Object oriented style
public static Collator Collator::create ( string $locale )
Procedural style 
Collator collator_create ( string $locale )
The strings will be compared using the options already specified.
</Desc>
    <FName>Collator::getAttribute</FName>
    <Desc>Object oriented style 
public int Collator::getAttribute ( int $attr )
Procedural style 
int collator_get_attribute ( Collator $coll , int $attr )
Get a value of an integer collator attribute.
</Desc>
    <FName>collator_get_attribute</FName>
    <Desc>Object oriented style 
public int Collator::getAttribute ( int $attr )
Procedural style 
int collator_get_attribute ( Collator $coll , int $attr )
Get a value of an integer collator attribute.
</Desc>
    <FName>Collator::getErrorCode</FName>
    <Desc>Object oriented style 
public int Collator::getErrorCode ( void )
Procedural style 
int collator_get_error_code ( Collator $coll )
</Desc>
    <FName>collator_get_error_code</FName>
    <Desc>Object oriented style 
public int Collator::getErrorCode ( void )
Procedural style 
int collator_get_error_code ( Collator $coll )
</Desc>
    <FName>Collator::getErrorMessage</FName>
    <Desc>Object oriented style 
public string Collator::getErrorMessage ( void )
Procedural style 
string collator_get_error_message ( Collator $coll )
Retrieves the message for the last error.
</Desc>
    <FName>collator_get_error_message</FName>
    <Desc>Object oriented style 
public string Collator::getErrorMessage ( void )
Procedural style 
string collator_get_error_message ( Collator $coll )
Retrieves the message for the last error.
</Desc>
    <FName>Collator::getLocale</FName>
    <Desc>Object oriented style 
public string Collator::getLocale ( int $type )
Procedural style 
string collator_get_locale ( Collator $coll , int $type )
Get collector locale name.
</Desc>
    <FName>collator_get_locale</FName>
    <Desc>Object oriented style 
public string Collator::getLocale ( int $type )
Procedural style 
string collator_get_locale ( Collator $coll , int $type )
Get collector locale name.
</Desc>
    <FName>Collator::getSortKey</FName>
    <Desc>Object oriented style 
public string Collator::getSortKey ( string $str )
Procedural style 
string collator_get_sort_key ( Collator $coll , string $str )
Return collation key for a string.
</Desc>
    <FName>collator_get_sort_key</FName>
    <Desc>Object oriented style 
public string Collator::getSortKey ( string $str )
Procedural style 
string collator_get_sort_key ( Collator $coll , string $str )
Return collation key for a string.
</Desc>
    <FName>Collator::getStrength</FName>
    <Desc>Object oriented style 
public int Collator::getStrength ( void )
Procedural style 
int collator_get_strength ( Collator $coll )
</Desc>
    <FName>collator_get_strength</FName>
    <Desc>Object oriented style 
public int Collator::getStrength ( void )
Procedural style 
int collator_get_strength ( Collator $coll )
</Desc>
    <FName>Collator::setAttribute</FName>
    <Desc>Object oriented style 
public bool Collator::setAttribute ( int $attr , int $val )
Procedural style 
bool collator_set_attribute ( Collator $coll , int $attr , int $val )
</Desc>
    <FName>collator_set_attribute</FName>
    <Desc>Object oriented style 
public bool Collator::setAttribute ( int $attr , int $val )
Procedural style 
bool collator_set_attribute ( Collator $coll , int $attr , int $val )
</Desc>
    <FName>Collator::setStrength</FName>
    <Desc>Object oriented style 
public bool Collator::setStrength ( int $strength )
Procedural style 
bool collator_set_strength ( Collator $coll , int $strength )
The » ICU Collation Service supports many levels of comparison (named "Levels", but also known as "Strengths"). Having these categories enables ICU to sort strings precisely according to local conventions. However, by allowing the levels to be selectively employed, searching for a string in text can be performed with various matching conditions. 
Primary Level: Typically, this is used to denote differences between base characters (for example, "a" < "b"). It is the strongest difference. For example, dictionaries are divided into different sections by base character. This is also called the level1 strength. 
Secondary Level: Accents in the characters are considered secondary differences (for example, "as" < "as" < "at"). Other differences between letters can also be considered secondary differences, depending on the language. A secondary difference is ignored when there is a primary difference anywhere in the strings. This is also called the level2 strength. 
Note: 
Note: In some languages (such as Danish), certain accented letters are considered to be separate base characters. In most languages, however, an accented letter only has a secondary difference from the unaccented version of that letter. 
Tertiary Level: Upper and lower case differences in characters are distinguished at the tertiary level (for example, "ao" < "Ao" < "ao"). In addition, a variant of a letter differs from the base form on the tertiary level (such as "A" and " "). Another example is the difference between large and small Kana. A tertiary difference is ignored when there is a primary or secondary difference anywhere in the strings. This is also called the level3 strength. 
Quaternary Level: When punctuation is ignored (see Ignoring Punctuations ) at level 13, an additional level can be used to distinguish words with and without punctuation (for example, "ab" < "a-b" < "aB"). This difference is ignored when there is a primary, secondary or tertiary difference. This is also known as the level4 strength. The quaternary level should only be used if ignoring punctuation is required or when processing Japanese text (see Hiragana processing). 
Identical Level: When all other levels are equal, the identical level is used as a tiebreaker. The Unicode code point values of the NFD form of each string are compared at this level, just in case there is no difference at levels 14. For example, Hebrew cantillation marks are only distinguished at this level. This level should be used sparingly, as only code point values differences between two strings is an extremely rare occurrence. Using this level substantially decreases the performance for both incremental comparison and sort key generation (as well as increasing the sort key length). It is also known as level 5 strength. 
For example, people may choose to ignore accents or ignore accents and case when searching for text. Almost all characters are distinguished by the first three levels, and in most locales the default value is thus Tertiary. However, if Alternate is set to be Shifted, then the Quaternary strength can be used to break ties among whitespace, punctuation, and symbols that would otherwise be ignored. If very fine distinctions among characters are required, then the Identical strength can be used (for example, Identical Strength distinguishes between the Mathematical Bold Small A and the Mathematical Italic Small A.). However, using levels higher than Tertiary the Identical strength result in significantly longer sort keys, and slower string comparison performance for equal strings.
</Desc>
    <FName>collator_set_strength</FName>
    <Desc>Object oriented style 
public bool Collator::setStrength ( int $strength )
Procedural style 
bool collator_set_strength ( Collator $coll , int $strength )
The » ICU Collation Service supports many levels of comparison (named "Levels", but also known as "Strengths"). Having these categories enables ICU to sort strings precisely according to local conventions. However, by allowing the levels to be selectively employed, searching for a string in text can be performed with various matching conditions. 
Primary Level: Typically, this is used to denote differences between base characters (for example, "a" < "b"). It is the strongest difference. For example, dictionaries are divided into different sections by base character. This is also called the level1 strength. 
Secondary Level: Accents in the characters are considered secondary differences (for example, "as" < "as" < "at"). Other differences between letters can also be considered secondary differences, depending on the language. A secondary difference is ignored when there is a primary difference anywhere in the strings. This is also called the level2 strength. 
Note: 
Note: In some languages (such as Danish), certain accented letters are considered to be separate base characters. In most languages, however, an accented letter only has a secondary difference from the unaccented version of that letter. 
Tertiary Level: Upper and lower case differences in characters are distinguished at the tertiary level (for example, "ao" < "Ao" < "ao"). In addition, a variant of a letter differs from the base form on the tertiary level (such as "A" and " "). Another example is the difference between large and small Kana. A tertiary difference is ignored when there is a primary or secondary difference anywhere in the strings. This is also called the level3 strength. 
Quaternary Level: When punctuation is ignored (see Ignoring Punctuations ) at level 13, an additional level can be used to distinguish words with and without punctuation (for example, "ab" < "a-b" < "aB"). This difference is ignored when there is a primary, secondary or tertiary difference. This is also known as the level4 strength. The quaternary level should only be used if ignoring punctuation is required or when processing Japanese text (see Hiragana processing). 
Identical Level: When all other levels are equal, the identical level is used as a tiebreaker. The Unicode code point values of the NFD form of each string are compared at this level, just in case there is no difference at levels 14. For example, Hebrew cantillation marks are only distinguished at this level. This level should be used sparingly, as only code point values differences between two strings is an extremely rare occurrence. Using this level substantially decreases the performance for both incremental comparison and sort key generation (as well as increasing the sort key length). It is also known as level 5 strength. 
For example, people may choose to ignore accents or ignore accents and case when searching for text. Almost all characters are distinguished by the first three levels, and in most locales the default value is thus Tertiary. However, if Alternate is set to be Shifted, then the Quaternary strength can be used to break ties among whitespace, punctuation, and symbols that would otherwise be ignored. If very fine distinctions among characters are required, then the Identical strength can be used (for example, Identical Strength distinguishes between the Mathematical Bold Small A and the Mathematical Italic Small A.). However, using levels higher than Tertiary the Identical strength result in significantly longer sort keys, and slower string comparison performance for equal strings.
</Desc>
    <FName>Collator::sort</FName>
    <Desc>Object oriented style 
public bool Collator::sort ( array &$arr [, int $sort_flag ] )
Procedural style 
bool collator_sort ( Collator $coll , array &$arr [, int $sort_flag ] )
This function sorts an array according to current locale rules.
Equivalent to standard PHP sort() .
</Desc>
    <FName>collator_sort</FName>
    <Desc>Object oriented style 
public bool Collator::sort ( array &$arr [, int $sort_flag ] )
Procedural style 
bool collator_sort ( Collator $coll , array &$arr [, int $sort_flag ] )
This function sorts an array according to current locale rules.
Equivalent to standard PHP sort() .
</Desc>
    <FName>Collator::sortWithSortKeys</FName>
    <Desc>Object oriented style 
public bool Collator::sortWithSortKeys ( array &$arr )
Procedural style 
bool collator_sort_with_sort_keys ( Collator $coll , array &$arr )
Similar to collator_sort() but uses ICU sorting keys produced by ucol_getSortKey() to gain more speed on large arrays.
</Desc>
    <FName>collator_sort_with_sort_keys</FName>
    <Desc>Object oriented style 
public bool Collator::sortWithSortKeys ( array &$arr )
Procedural style 
bool collator_sort_with_sort_keys ( Collator $coll , array &$arr )
Similar to collator_sort() but uses ICU sorting keys produced by ucol_getSortKey() to gain more speed on large arrays.
</Desc>
    <FName>Collectable::isGarbage</FName>
    <Desc>public bool Collectable::isGarbage ( void )
Can be called in Pool::collect() to determine if this object is garbage. 
See Also
Pool::collect() - Collect references to completed tasks 
</Desc>
    <FName>Collectable::setGarbage</FName>
    <Desc>public void Collectable::setGarbage ( void )
Should be called once per object when the object is finished being executed or referenced. 
See Also
Collectable::isGarbage() - Determine whether an object has been marked as garbage 
</Desc>
    <FName>CommonMark\CQL::__construct</FName>
    <Desc>public CommonMark\CQL::__construct ( string $query )
</Desc>
    <FName>CommonMark\CQL::__invoke</FName>
    <Desc>public CommonMark\CQL::__invoke ( \CommonMark\Node $root , callable $handler )
Shall invoke the current CQL function on the given root, executing the given handler on entry to a \CommonMark\Node
</Desc>
    <FName>CommonMark\Interfaces\IVisitable::accept</FName>
    <Desc>abstract public void CommonMark\Interfaces\IVisitable::accept ( CommonMark\Interfaces\IVisitor $visitor )
</Desc>
    <FName>CommonMark\Interfaces\IVisitor::enter</FName>
    <Desc>abstract public ?int|IVisitable CommonMark\Interfaces\IVisitor::enter ( IVisitable $visitable )
</Desc>
    <FName>CommonMark\Interfaces\IVisitor::leave</FName>
    <Desc>abstract public ?int|IVisitable CommonMark\Interfaces\IVisitor::leave ( IVisitable $visitable )
</Desc>
    <FName>CommonMark\Node\BulletList::__construct</FName>
    <Desc>public CommonMark\Node\BulletList::__construct ( void )
public CommonMark\Node\BulletList::__construct ( int $tight )
public CommonMark\Node\BulletList::__construct ( int $tight , int $delimiter )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node\CodeBlock::__construct</FName>
    <Desc>public CommonMark\Node\CodeBlock::__construct ( string $fence , string $literal )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node\Heading::__construct</FName>
    <Desc>public CommonMark\Node\Heading::__construct ( void )
public CommonMark\Node\Heading::__construct ( int $level )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node\Image::__construct</FName>
    <Desc>public CommonMark\Node\Image::__construct ( void )
public CommonMark\Node\Image::__construct ( string $url )
public CommonMark\Node\Image::__construct ( string $url , string $title )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node\Link::__construct</FName>
    <Desc>public CommonMark\Node\Link::__construct ( void )
public CommonMark\Node\Link::__construct ( string $url )
public CommonMark\Node\Link::__construct ( string $url , string $title )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node\OrderedList::__construct</FName>
    <Desc>public CommonMark\Node\OrderedList::__construct ( void )
public CommonMark\Node\OrderedList::__construct ( int $tight )
public CommonMark\Node\OrderedList::__construct ( int $tight , int $delimiter )
public CommonMark\Node\OrderedList::__construct ( int $tight , int $delimiter , int $start )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node\Text::__construct</FName>
    <Desc>public CommonMark\Node\Text::__construct ( void )
public CommonMark\Node\Text::__construct ( string $literal )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node::accept</FName>
    <Desc>public void CommonMark\Node::accept ( CommonMark\Interfaces\IVisitor $visitor )
</Desc>
    <FName>CommonMark\Node::appendChild</FName>
    <Desc>public CommonMark\Node CommonMark\Node::appendChild ( CommonMark\Node $child )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node::insertAfter</FName>
    <Desc>public CommonMark\Node CommonMark\Node::insertAfter ( CommonMark\Node $sibling )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node::insertBefore</FName>
    <Desc>public CommonMark\Node CommonMark\Node::insertBefore ( CommonMark\Node $sibling )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node::prependChild</FName>
    <Desc>public CommonMark\Node CommonMark\Node::prependChild ( CommonMark\Node $child )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node::replace</FName>
    <Desc>public CommonMark\Node CommonMark\Node::replace ( CommonMark\Node $target )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Node::unlink</FName>
    <Desc>public void CommonMark\Node::unlink ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Parser::__construct</FName>
    <Desc>public CommonMark\Parser::__construct ([ int $options ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Parser::finish</FName>
    <Desc>public CommonMark\Node CommonMark\Parser::finish ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Parser::parse</FName>
    <Desc>public void CommonMark\Parser::parse ( string $buffer )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Componere\Abstract\Definition::addInterface</FName>
    <Desc>public Definition Componere\Abstract\Definition::addInterface ( string $interface )
Shall implement the given interface on the current definition
</Desc>
    <FName>Componere\Abstract\Definition::addMethod</FName>
    <Desc>public Definition Componere\Abstract\Definition::addMethod ( string $name , \Componere\Method $method )
Shall create or override a method on the current definition.
</Desc>
    <FName>Componere\Abstract\Definition::addTrait</FName>
    <Desc>public Definition Componere\Abstract\Definition::addTrait ( string $trait )
Shall use the given trait for the current definition
</Desc>
    <FName>Componere\Abstract\Definition::getReflector</FName>
    <Desc>public \ReflectionClass Componere\Abstract\Definition::getReflector ( void )
Shall create or return a ReflectionClass
</Desc>
    <FName>Componere\Definition::addConstant</FName>
    <Desc>public Definition Componere\Definition::addConstant ( string $name , \Componere\Value $value )
Shall declare a class constant on the current Definition
</Desc>
    <FName>Componere\Definition::addProperty</FName>
    <Desc>public Definition Componere\Definition::addProperty ( string $name , \Componere\Value $value )
Shall declare a class property on the current Definition
</Desc>
    <FName>Componere\Definition::__construct</FName>
    <Desc>public Componere\Definition::__construct ( string $name )
public Componere\Definition::__construct ( string $name , string $parent )
public Componere\Definition::__construct ( string $name , array $interfaces )
public Componere\Definition::__construct ( string $name , string $parent , array $interfaces )
</Desc>
    <FName>Componere\Definition::getClosure</FName>
    <Desc>public \Closure Componere\Definition::getClosure ( string $name )
Shall return a Closure for the method specified by name
</Desc>
    <FName>Componere\Definition::getClosures</FName>
    <Desc>public array Componere\Definition::getClosures ( void )
Shall return an array of Closures
</Desc>
    <FName>Componere\Definition::isRegistered</FName>
    <Desc>public bool Componere\Definition::isRegistered ( void )
Shall detect the registration state of this Definition
</Desc>
    <FName>Componere\Definition::register</FName>
    <Desc>public void Componere\Definition::register ( void )
Shall register the current Definition 
Exceptions
Warning 
Shall throw RuntimeException if Definition was registered
</Desc>
    <FName>Componere\Method::__construct</FName>
    <Desc>public Componere\Method::__construct ( \Closure $closure )
</Desc>
    <FName>Componere\Method::getReflector</FName>
    <Desc>public \ReflectionMethod Componere\Method::getReflector ( void )
Shall create or return a ReflectionMethod
</Desc>
    <FName>Componere\Method::setPrivate</FName>
    <Desc>public Method Componere\Method::setPrivate ( void )
</Desc>
    <FName>Componere\Method::setProtected</FName>
    <Desc>public Method Componere\Method::setProtected ( void )
</Desc>
    <FName>Componere\Method::setStatic</FName>
    <Desc>public Method Componere\Method::setStatic ( void )
</Desc>
    <FName>Componere\Patch::apply</FName>
    <Desc>public void Componere\Patch::apply ( void )
Shall apply the current patch 
</Desc>
    <FName>Componere\Patch::__construct</FName>
    <Desc>public Componere\Patch::__construct ( object $instance )
public Componere\Patch::__construct ( object $instance , array $interfaces )
</Desc>
    <FName>Componere\Patch::derive</FName>
    <Desc>public Patch Componere\Patch::derive ( object $instance )
Shall derive a Patch for the given instance
</Desc>
    <FName>Componere\Patch::getClosure</FName>
    <Desc>public \Closure Componere\Patch::getClosure ( string $name )
Shall return a Closure for the method specified by name
</Desc>
    <FName>Componere\Patch::getClosures</FName>
    <Desc>public array Componere\Patch::getClosures ( void )
Shall return an array of Closures
</Desc>
    <FName>Componere\Patch::isApplied</FName>
    <Desc>public bool Componere\Patch::isApplied ( void )
</Desc>
    <FName>Componere\Patch::revert</FName>
    <Desc>public void Componere\Patch::revert ( void )
Shall revert the current patch 
</Desc>
    <FName>Componere\Value::__construct</FName>
    <Desc>public Componere\Value::__construct ([ $default ] )
</Desc>
    <FName>Componere\Value::hasDefault</FName>
    <Desc>public bool Componere\Value::hasDefault ( void )
</Desc>
    <FName>Componere\Value::isPrivate</FName>
    <Desc>public bool Componere\Value::isPrivate ( void )
</Desc>
    <FName>Componere\Value::isProtected</FName>
    <Desc>public bool Componere\Value::isProtected ( void )
</Desc>
    <FName>Componere\Value::isStatic</FName>
    <Desc>public bool Componere\Value::isStatic ( void )
</Desc>
    <FName>Componere\Value::setPrivate</FName>
    <Desc>public Value Componere\Value::setPrivate ( void )
</Desc>
    <FName>Componere\Value::setProtected</FName>
    <Desc>public Value Componere\Value::setProtected ( void )
</Desc>
    <FName>Componere\Value::setStatic</FName>
    <Desc>public Value Componere\Value::setStatic ( void )
</Desc>
    <FName>Componere\cast</FName>
    <Desc>Type Componere\cast ( Type , $object )
</Desc>
    <FName>Componere\cast_by_ref</FName>
    <Desc>Type Componere\cast_by_ref ( Type , $object )
</Desc>
    <FName>Cond::broadcast</FName>
    <Desc>final public static bool Cond::broadcast ( int $condition )
Broadcast to all Threads blocking on a call to Cond::wait().
</Desc>
    <FName>Cond::create</FName>
    <Desc>final public static int Cond::create ( void )
Creates a new Condition Variable for the caller.
</Desc>
    <FName>Cond::destroy</FName>
    <Desc>final public static bool Cond::destroy ( int $condition )
Destroying Condition Variable handles must be carried out explicitly by the programmer when they are finished with the Condition Variable. No Threads should be blocking on a call to Cond::wait() when the call to Cond::destroy() takes place.
</Desc>
    <FName>Cond::signal</FName>
    <Desc>final public static bool Cond::signal ( int $condition )
</Desc>
    <FName>Cond::wait</FName>
    <Desc>final public static bool Cond::wait ( int $condition , int $mutex [, int $timeout ] )
Wait for a signal on a Condition Variable, optionally specifying a timeout to limit waiting time.
</Desc>
    <FName>Countable::count</FName>
    <Desc>abstract public int Countable::count ( void )
This method is executed when using the count() function on an object implementing Countable.
</Desc>
    <FName>CURLFile::__construct</FName>
    <Desc>Object oriented style
public CURLFile::__construct ( string $filename [, string $mimetype [, string $postname ]] )
Procedural style
CURLFile curl_file_create ( string $filename [, string $mimetype [, string $postname ]] )
Creates a CURLFile object, used to upload a file with CURLOPT_POSTFIELDS.
</Desc>
    <FName>curl_file_create</FName>
    <Desc>Object oriented style
public CURLFile::__construct ( string $filename [, string $mimetype [, string $postname ]] )
Procedural style
CURLFile curl_file_create ( string $filename [, string $mimetype [, string $postname ]] )
Creates a CURLFile object, used to upload a file with CURLOPT_POSTFIELDS.
</Desc>
    <FName>CURLFile::getFilename</FName>
    <Desc>public string CURLFile::getFilename ( void )
</Desc>
    <FName>CURLFile::getMimeType</FName>
    <Desc>public string CURLFile::getMimeType ( void )
</Desc>
    <FName>CURLFile::getPostFilename</FName>
    <Desc>public string CURLFile::getPostFilename ( void )
</Desc>
    <FName>CURLFile::setMimeType</FName>
    <Desc>public void CURLFile::setMimeType ( string $mime )
</Desc>
    <FName>CURLFile::setPostFilename</FName>
    <Desc>public void CURLFile::setPostFilename ( string $postname )
</Desc>
    <FName>CURLFile::__wakeup</FName>
    <Desc>public void CURLFile::__wakeup ( void )
</Desc>
    <FName>DateInterval::__construct</FName>
    <Desc>public DateInterval::__construct ( string $interval_spec )
Creates a new DateInterval object.
</Desc>
    <FName>DateInterval::createFromDateString</FName>
    <Desc>public static DateInterval DateInterval::createFromDateString ( string $time )
Uses the normal date parsers and sets up a DateInterval from the relative parts of the parsed string.
</Desc>
    <FName>DateInterval::format</FName>
    <Desc>public string DateInterval::format ( string $format )
Formats the interval.
</Desc>
    <FName>DatePeriod::__construct</FName>
    <Desc>public DatePeriod::__construct ( DateTimeInterface $start , DateInterval $interval , int $recurrences [, int $options ] )
public DatePeriod::__construct ( DateTimeInterface $start , DateInterval $interval , DateTimeInterface $end [, int $options ] )
public DatePeriod::__construct ( string $isostr [, int $options ] )
Creates a new DatePeriod object.
</Desc>
    <FName>DatePeriod::getDateInterval</FName>
    <Desc>Object oriented style
public DateInterval DatePeriod::getDateInterval ( void )
Gets a DateInterval object representing the interval used for the period.
</Desc>
    <FName>DatePeriod::getEndDate</FName>
    <Desc>Object oriented style
public DateTimeInterface DatePeriod::getEndDate ( void )
Gets the end date of the period.
</Desc>
    <FName>DatePeriod::getStartDate</FName>
    <Desc>Object oriented style
public DateTimeInterface DatePeriod::getStartDate ( void )
Gets the start date of the period.
</Desc>
    <FName>DateTime::add</FName>
    <Desc>Object oriented style
public DateTime DateTime::add ( DateInterval $interval )
Procedural style
DateTime date_add ( DateTime $object , DateInterval $interval )
Adds the specified DateInterval object to the specified DateTime object.
</Desc>
    <FName>date_add</FName>
    <Desc>Object oriented style
public DateTime DateTime::add ( DateInterval $interval )
Procedural style
DateTime date_add ( DateTime $object , DateInterval $interval )
Adds the specified DateInterval object to the specified DateTime object.
</Desc>
    <FName>DateTime::__construct</FName>
    <Desc>Object oriented style
public DateTime::__construct ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
Procedural style
DateTime date_create ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
Returns new DateTime object.
</Desc>
    <FName>date_create</FName>
    <Desc>Object oriented style
public DateTime::__construct ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
Procedural style
DateTime date_create ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
Returns new DateTime object.
</Desc>
    <FName>DateTime::createFromFormat</FName>
    <Desc>Object oriented style
public static DateTime DateTime::createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] )
Procedural style
DateTime date_create_from_format ( string $format , string $time [, DateTimeZone $timezone ] )
Returns a new DateTime object representing the date and time specified by the time string, which was formatted in the given format.
</Desc>
    <FName>date_create_from_format</FName>
    <Desc>Object oriented style
public static DateTime DateTime::createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] )
Procedural style
DateTime date_create_from_format ( string $format , string $time [, DateTimeZone $timezone ] )
Returns a new DateTime object representing the date and time specified by the time string, which was formatted in the given format.
</Desc>
    <FName>DateTime::diff</FName>
    <Desc>Object oriented style
public DateInterval DateTime::diff ( DateTimeInterface $datetime2 [, bool $absolute = FALSE ] )
public DateInterval DateTimeImmutable::diff ( DateTimeInterface $datetime2 [, bool $absolute = FALSE ] )
public DateInterval DateTimeInterface::diff ( DateTimeInterface $datetime2 [, bool $absolute = FALSE ] )
Procedural style
DateInterval date_diff ( DateTimeInterface $datetime1 , DateTimeInterface $datetime2 [, bool $absolute = FALSE ] )
Returns the difference between two DateTimeInterface objects.
</Desc>
    <FName>DateTimeImmutable::diff</FName>
    <Desc>Object oriented style
public DateInterval DateTime::diff ( DateTimeInterface $datetime2 [, bool $absolute = FALSE ] )
public DateInterval DateTimeImmutable::diff ( DateTimeInterface $datetime2 [, bool $absolute = FALSE ] )
public DateInterval DateTimeInterface::diff ( DateTimeInterface $datetime2 [, bool $absolute = FALSE ] )
Procedural style
DateInterval date_diff ( DateTimeInterface $datetime1 , DateTimeInterface $datetime2 [, bool $absolute = FALSE ] )
Returns the difference between two DateTimeInterface objects.
</Desc>
    <FName>DateTime::format</FName>
    <Desc>Object oriented style
public string DateTime::format ( string $format )
public string DateTimeImmutable::format ( string $format )
public string DateTimeInterface::format ( string $format )
Procedural style
string date_format ( DateTimeInterface $object , string $format )
Returns date formatted according to given format.
</Desc>
    <FName>DateTimeImmutable::format</FName>
    <Desc>Object oriented style
public string DateTime::format ( string $format )
public string DateTimeImmutable::format ( string $format )
public string DateTimeInterface::format ( string $format )
Procedural style
string date_format ( DateTimeInterface $object , string $format )
Returns date formatted according to given format.
</Desc>
    <FName>DateTime::getLastErrors</FName>
    <Desc>Object oriented style
public static array DateTime::getLastErrors ( void )
Procedural style
array date_get_last_errors ( void )
Returns an array of warnings and errors found while parsing a date/time string.
</Desc>
    <FName>date_get_last_errors</FName>
    <Desc>Object oriented style
public static array DateTime::getLastErrors ( void )
Procedural style
array date_get_last_errors ( void )
Returns an array of warnings and errors found while parsing a date/time string.
</Desc>
    <FName>DateTime::getOffset</FName>
    <Desc>Object oriented style
public int DateTime::getOffset ( void )
public int DateTimeImmutable::getOffset ( void )
public int DateTimeInterface::getOffset ( void )
Procedural style
int date_offset_get ( DateTimeInterface $object )
Returns the timezone offset.
</Desc>
    <FName>DateTimeImmutable::getOffset</FName>
    <Desc>Object oriented style
public int DateTime::getOffset ( void )
public int DateTimeImmutable::getOffset ( void )
public int DateTimeInterface::getOffset ( void )
Procedural style
int date_offset_get ( DateTimeInterface $object )
Returns the timezone offset.
</Desc>
    <FName>DateTime::getTimestamp</FName>
    <Desc>Object oriented style
public int DateTime::getTimestamp ( void )
public int DateTimeImmutable::getTimestamp ( void )
public int DateTimeInterface::getTimestamp ( void )
Procedural style
int date_timestamp_get ( DateTimeInterface $object )
Gets the Unix timestamp.
</Desc>
    <FName>DateTimeImmutable::getTimestamp</FName>
    <Desc>Object oriented style
public int DateTime::getTimestamp ( void )
public int DateTimeImmutable::getTimestamp ( void )
public int DateTimeInterface::getTimestamp ( void )
Procedural style
int date_timestamp_get ( DateTimeInterface $object )
Gets the Unix timestamp.
</Desc>
    <FName>DateTime::getTimezone</FName>
    <Desc>Object oriented style
public DateTimeZone DateTime::getTimezone ( void )
public DateTimeZone DateTimeImmutable::getTimezone ( void )
public DateTimeZone DateTimeInterface::getTimezone ( void )
Procedural style
DateTimeZone date_timezone_get ( DateTimeInterface $object )
Return time zone relative to given DateTime.
</Desc>
    <FName>DateTimeImmutable::getTimezone</FName>
    <Desc>Object oriented style
public DateTimeZone DateTime::getTimezone ( void )
public DateTimeZone DateTimeImmutable::getTimezone ( void )
public DateTimeZone DateTimeInterface::getTimezone ( void )
Procedural style
DateTimeZone date_timezone_get ( DateTimeInterface $object )
Return time zone relative to given DateTime.
</Desc>
    <FName>DateTime::modify</FName>
    <Desc>Object oriented style
public DateTime DateTime::modify ( string $modify )
Procedural style
DateTime date_modify ( DateTime $object , string $modify )
Alter the timestamp of a DateTime object by incrementing or decrementing in a format accepted by strtotime().
</Desc>
    <FName>date_modify</FName>
    <Desc>Object oriented style
public DateTime DateTime::modify ( string $modify )
Procedural style
DateTime date_modify ( DateTime $object , string $modify )
Alter the timestamp of a DateTime object by incrementing or decrementing in a format accepted by strtotime().
</Desc>
    <FName>DateTime::__set_state</FName>
    <Desc>public static DateTime DateTime::__set_state ( array $array )
The __set_state() handler.
</Desc>
    <FName>DateTime::setDate</FName>
    <Desc>Object oriented style
public DateTime DateTime::setDate ( int $year , int $month , int $day )
Procedural style
DateTime date_date_set ( DateTime $object , int $year , int $month , int $day )
Resets the current date of the DateTime object to a different date.
</Desc>
    <FName>date_date_set</FName>
    <Desc>Object oriented style
public DateTime DateTime::setDate ( int $year , int $month , int $day )
Procedural style
DateTime date_date_set ( DateTime $object , int $year , int $month , int $day )
Resets the current date of the DateTime object to a different date.
</Desc>
    <FName>DateTime::setISODate</FName>
    <Desc>Object oriented style
public DateTime DateTime::setISODate ( int $year , int $week [, int $day = 1 ] )
Procedural style
DateTime date_isodate_set ( DateTime $object , int $year , int $week [, int $day = 1 ] )
Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.
</Desc>
    <FName>date_isodate_set</FName>
    <Desc>Object oriented style
public DateTime DateTime::setISODate ( int $year , int $week [, int $day = 1 ] )
Procedural style
DateTime date_isodate_set ( DateTime $object , int $year , int $week [, int $day = 1 ] )
Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.
</Desc>
    <FName>DateTime::setTime</FName>
    <Desc>Object oriented style
public DateTime DateTime::setTime ( int $hour , int $minute [, int $second = 0 [, int $microseconds = 0 ]] )
Procedural style
DateTime date_time_set ( DateTime $object , int $hour , int $minute [, int $second = 0 [, int $microseconds = 0 ]] )
Resets the current time of the DateTime object to a different time.
</Desc>
    <FName>date_time_set</FName>
    <Desc>Object oriented style
public DateTime DateTime::setTime ( int $hour , int $minute [, int $second = 0 [, int $microseconds = 0 ]] )
Procedural style
DateTime date_time_set ( DateTime $object , int $hour , int $minute [, int $second = 0 [, int $microseconds = 0 ]] )
Resets the current time of the DateTime object to a different time.
</Desc>
    <FName>DateTime::setTimestamp</FName>
    <Desc>Object oriented style
public DateTime DateTime::setTimestamp ( int $unixtimestamp )
Procedural style
DateTime date_timestamp_set ( DateTime $object , int $unixtimestamp )
Sets the date and time based on an Unix timestamp.
</Desc>
    <FName>date_timestamp_set</FName>
    <Desc>Object oriented style
public DateTime DateTime::setTimestamp ( int $unixtimestamp )
Procedural style
DateTime date_timestamp_set ( DateTime $object , int $unixtimestamp )
Sets the date and time based on an Unix timestamp.
</Desc>
    <FName>DateTime::setTimezone</FName>
    <Desc>Object oriented style
public DateTime DateTime::setTimezone ( DateTimeZone $timezone )
Procedural style
DateTime date_timezone_set ( DateTime $object , DateTimeZone $timezone )
Sets a new timezone for a DateTime object.
</Desc>
    <FName>date_timezone_set</FName>
    <Desc>Object oriented style
public DateTime DateTime::setTimezone ( DateTimeZone $timezone )
Procedural style
DateTime date_timezone_set ( DateTime $object , DateTimeZone $timezone )
Sets a new timezone for a DateTime object.
</Desc>
    <FName>DateTime::sub</FName>
    <Desc>Object oriented style
public DateTime DateTime::sub ( DateInterval $interval )
Procedural style
DateTime date_sub ( DateTime $object , DateInterval $interval )
Subtracts the specified DateInterval object from the specified DateTime object.
</Desc>
    <FName>date_sub</FName>
    <Desc>Object oriented style
public DateTime DateTime::sub ( DateInterval $interval )
Procedural style
DateTime date_sub ( DateTime $object , DateInterval $interval )
Subtracts the specified DateInterval object from the specified DateTime object.
</Desc>
    <FName>DateTime::__wakeup</FName>
    <Desc>public DateTime::__wakeup ( void )
public DateTimeImmutable::__wakeup ( void )
public DateTimeInterface::__wakeup ( void )
The __wakeup() handler.
</Desc>
    <FName>DateTimeImmutable::__wakeup</FName>
    <Desc>public DateTime::__wakeup ( void )
public DateTimeImmutable::__wakeup ( void )
public DateTimeInterface::__wakeup ( void )
The __wakeup() handler.
</Desc>
    <FName>DateTimeImmutable::add</FName>
    <Desc>public DateTimeImmutable DateTimeImmutable::add ( DateInterval $interval )
Like DateTime::add() but works with DateTimeImmutable. 
</Desc>
    <FName>DateTimeImmutable::__construct</FName>
    <Desc>Object oriented style
public DateTimeImmutable::__construct ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
Procedural style
DateTimeImmutable date_create_immutable ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
Like DateTime::__construct() but works with DateTimeImmutable. 
</Desc>
    <FName>date_create_immutable</FName>
    <Desc>Object oriented style
public DateTimeImmutable::__construct ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
Procedural style
DateTimeImmutable date_create_immutable ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
Like DateTime::__construct() but works with DateTimeImmutable. 
</Desc>
    <FName>DateTimeImmutable::createFromFormat</FName>
    <Desc>Object oriented style
public static DateTimeImmutable DateTimeImmutable::createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] )
Procedural style
DateTimeImmutable date_create_immutable_from_format ( string $format , string $time [, DateTimeZone $timezone ] )
Like DateTime::createFromFormat() but works with DateTimeImmutable. 
</Desc>
    <FName>date_create_immutable_from_format</FName>
    <Desc>Object oriented style
public static DateTimeImmutable DateTimeImmutable::createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] )
Procedural style
DateTimeImmutable date_create_immutable_from_format ( string $format , string $time [, DateTimeZone $timezone ] )
Like DateTime::createFromFormat() but works with DateTimeImmutable. 
</Desc>
    <FName>DateTimeImmutable::createFromMutable</FName>
    <Desc>public static DateTimeImmutable DateTimeImmutable::createFromMutable ( DateTime $datetime )
</Desc>
    <FName>DateTimeImmutable::getLastErrors</FName>
    <Desc>public static array DateTimeImmutable::getLastErrors ( void )
Like DateTime::getLastErrors() but works with DateTimeImmutable. 
</Desc>
    <FName>DateTimeImmutable::modify</FName>
    <Desc>public DateTimeImmutable DateTimeImmutable::modify ( string $modify )
Creates a new DateTimeImmutable object with modified timestamp. The original object is not modified.
</Desc>
    <FName>DateTimeImmutable::__set_state</FName>
    <Desc>public static DateTimeImmutable DateTimeImmutable::__set_state ( array $array )
Like DateTime::__set_state() but works with DateTimeImmutable. 
</Desc>
    <FName>DateTimeImmutable::setDate</FName>
    <Desc>public DateTimeImmutable DateTimeImmutable::setDate ( int $year , int $month , int $day )
Like DateTime::setDate() but works with DateTimeImmutable. 
</Desc>
    <FName>DateTimeImmutable::setISODate</FName>
    <Desc>public DateTimeImmutable DateTimeImmutable::setISODate ( int $year , int $week [, int $day = 1 ] )
Like DateTime::setISODate() but works with DateTimeImmutable. 
</Desc>
    <FName>DateTimeImmutable::setTime</FName>
    <Desc>public DateTimeImmutable DateTimeImmutable::setTime ( int $hour , int $minute [, int $second = 0 [, int $microseconds = 0 ]] )
Like DateTime::setTime() but works with DateTimeImmutable. 
</Desc>
    <FName>DateTimeImmutable::setTimestamp</FName>
    <Desc>public DateTimeImmutable DateTimeImmutable::setTimestamp ( int $unixtimestamp )
Like DateTime::setTimestamp() but works with DateTimeImmutable. 
</Desc>
    <FName>DateTimeImmutable::setTimezone</FName>
    <Desc>public DateTimeImmutable DateTimeImmutable::setTimezone ( DateTimeZone $timezone )
Like DateTime::setTimezone() but works with DateTimeImmutable. 
</Desc>
    <FName>DateTimeImmutable::sub</FName>
    <Desc>public DateTimeImmutable DateTimeImmutable::sub ( DateInterval $interval )
Like DateTime::sub() but works with DateTimeImmutable. 
</Desc>
    <FName>DateTimeZone::__construct</FName>
    <Desc>Object oriented style
public DateTimeZone::__construct ( string $timezone )
Procedural style
DateTimeZone timezone_open ( string $timezone )
Creates new DateTimeZone object.
</Desc>
    <FName>timezone_open</FName>
    <Desc>Object oriented style
public DateTimeZone::__construct ( string $timezone )
Procedural style
DateTimeZone timezone_open ( string $timezone )
Creates new DateTimeZone object.
</Desc>
    <FName>DateTimeZone::getLocation</FName>
    <Desc>Object oriented style
public array DateTimeZone::getLocation ( void )
Procedural style
array timezone_location_get ( DateTimeZone $object )
Returns location information for a timezone, including country code, latitude/longitude and comments.
</Desc>
    <FName>timezone_location_get</FName>
    <Desc>Object oriented style
public array DateTimeZone::getLocation ( void )
Procedural style
array timezone_location_get ( DateTimeZone $object )
Returns location information for a timezone, including country code, latitude/longitude and comments.
</Desc>
    <FName>DateTimeZone::getName</FName>
    <Desc>Object oriented style
public string DateTimeZone::getName ( void )
Procedural style
string timezone_name_get ( DateTimeZone $object )
Returns the name of the timezone.
</Desc>
    <FName>timezone_name_get</FName>
    <Desc>Object oriented style
public string DateTimeZone::getName ( void )
Procedural style
string timezone_name_get ( DateTimeZone $object )
Returns the name of the timezone.
</Desc>
    <FName>DateTimeZone::getOffset</FName>
    <Desc>Object oriented style
public int DateTimeZone::getOffset ( DateTime $datetime )
Procedural style
int timezone_offset_get ( DateTimeZone $object , DateTime $datetime )
This function returns the offset to GMT for the date/time specified in the datetime parameter. The GMT offset is calculated with the timezone information contained in the DateTimeZone object being used.
</Desc>
    <FName>timezone_offset_get</FName>
    <Desc>Object oriented style
public int DateTimeZone::getOffset ( DateTime $datetime )
Procedural style
int timezone_offset_get ( DateTimeZone $object , DateTime $datetime )
This function returns the offset to GMT for the date/time specified in the datetime parameter. The GMT offset is calculated with the timezone information contained in the DateTimeZone object being used.
</Desc>
    <FName>DateTimeZone::getTransitions</FName>
    <Desc>Object oriented style
public array DateTimeZone::getTransitions ([ int $timestamp_begin [, int $timestamp_end ]] )
Procedural style
array timezone_transitions_get ( DateTimeZone $object [, int $timestamp_begin [, int $timestamp_end ]] )
</Desc>
    <FName>timezone_transitions_get</FName>
    <Desc>Object oriented style
public array DateTimeZone::getTransitions ([ int $timestamp_begin [, int $timestamp_end ]] )
Procedural style
array timezone_transitions_get ( DateTimeZone $object [, int $timestamp_begin [, int $timestamp_end ]] )
</Desc>
    <FName>DateTimeZone::listAbbreviations</FName>
    <Desc>Object oriented style
public static array DateTimeZone::listAbbreviations ( void )
Procedural style
array timezone_abbreviations_list ( void )
</Desc>
    <FName>timezone_abbreviations_list</FName>
    <Desc>Object oriented style
public static array DateTimeZone::listAbbreviations ( void )
Procedural style
array timezone_abbreviations_list ( void )
</Desc>
    <FName>DateTimeZone::listIdentifiers</FName>
    <Desc>Object oriented style
public static array DateTimeZone::listIdentifiers ([ int $what = DateTimeZone::ALL [, string $country = NULL ]] )
Procedural style
array timezone_identifiers_list ([ int $what = DateTimeZone::ALL [, string $country = NULL ]] )
</Desc>
    <FName>timezone_identifiers_list</FName>
    <Desc>Object oriented style
public static array DateTimeZone::listIdentifiers ([ int $what = DateTimeZone::ALL [, string $country = NULL ]] )
Procedural style
array timezone_identifiers_list ([ int $what = DateTimeZone::ALL [, string $country = NULL ]] )
</Desc>
    <FName>Directory::close</FName>
    <Desc>public void Directory::close ([ resource $dir_handle ] )
Same as closedir(), only dir_handle defaults to $this->handle. 
</Desc>
    <FName>Directory::read</FName>
    <Desc>public string Directory::read ([ resource $dir_handle ] )
Same as readdir(), only dir_handle defaults to $this->handle. 
</Desc>
    <FName>Directory::rewind</FName>
    <Desc>public void Directory::rewind ([ resource $dir_handle ] )
Same as rewinddir(), only dir_handle defaults to $this->handle. 
</Desc>
    <FName>DirectoryIterator::__construct</FName>
    <Desc>public DirectoryIterator::__construct ( string $path )
Constructs a new directory iterator from a path.
</Desc>
    <FName>DirectoryIterator::current</FName>
    <Desc>public DirectoryIterator DirectoryIterator::current ( void )
Get the current DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::getATime</FName>
    <Desc>public int DirectoryIterator::getATime ( void )
Get the last access time of the current DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::getBasename</FName>
    <Desc>public string DirectoryIterator::getBasename ([ string $suffix ] )
Get the base name of the current DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::getCTime</FName>
    <Desc>public int DirectoryIterator::getCTime ( void )
Get the inode change time for the current DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::getExtension</FName>
    <Desc>public string DirectoryIterator::getExtension ( void )
Retrieves the file extension.
</Desc>
    <FName>DirectoryIterator::getFilename</FName>
    <Desc>public string DirectoryIterator::getFilename ( void )
Get the file name of the current DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::getGroup</FName>
    <Desc>public int DirectoryIterator::getGroup ( void )
Get the group id of the file.
</Desc>
    <FName>DirectoryIterator::getInode</FName>
    <Desc>public int DirectoryIterator::getInode ( void )
Get the inode number for the current DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::getMTime</FName>
    <Desc>public int DirectoryIterator::getMTime ( void )
Get the last modification time of the current DirectoryIterator item, as a Unix timestamp.
</Desc>
    <FName>DirectoryIterator::getOwner</FName>
    <Desc>public int DirectoryIterator::getOwner ( void )
Get the owner of the current DirectoryIterator item, in numerical format.
</Desc>
    <FName>DirectoryIterator::getPath</FName>
    <Desc>public string DirectoryIterator::getPath ( void )
Get the path to the current DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::getPathname</FName>
    <Desc>public string DirectoryIterator::getPathname ( void )
Get the path and file name of the current file.
</Desc>
    <FName>DirectoryIterator::getPerms</FName>
    <Desc>public int DirectoryIterator::getPerms ( void )
Get the permissions of the current DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::getSize</FName>
    <Desc>public int DirectoryIterator::getSize ( void )
Get the file size for the current DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::getType</FName>
    <Desc>public string DirectoryIterator::getType ( void )
Determines which file type the current DirectoryIterator item belongs to. One of file, link, or dir.
</Desc>
    <FName>DirectoryIterator::isDir</FName>
    <Desc>public bool DirectoryIterator::isDir ( void )
Determines if the current DirectoryIterator item is a directory.
</Desc>
    <FName>DirectoryIterator::isDot</FName>
    <Desc>public bool DirectoryIterator::isDot ( void )
Determines if the current DirectoryIterator item is a directory and either . or ..
</Desc>
    <FName>DirectoryIterator::isExecutable</FName>
    <Desc>public bool DirectoryIterator::isExecutable ( void )
Determines if the current DirectoryIterator item is executable.
</Desc>
    <FName>DirectoryIterator::isFile</FName>
    <Desc>public bool DirectoryIterator::isFile ( void )
Determines if the current DirectoryIterator item is a regular file.
</Desc>
    <FName>DirectoryIterator::isLink</FName>
    <Desc>public bool DirectoryIterator::isLink ( void )
Determines if the current DirectoryIterator item is a symbolic link.
</Desc>
    <FName>DirectoryIterator::isReadable</FName>
    <Desc>public bool DirectoryIterator::isReadable ( void )
Determines if the current DirectoryIterator item is readable.
</Desc>
    <FName>DirectoryIterator::isWritable</FName>
    <Desc>public bool DirectoryIterator::isWritable ( void )
Determines if the current DirectoryIterator item is writable.
</Desc>
    <FName>DirectoryIterator::key</FName>
    <Desc>public string DirectoryIterator::key ( void )
Get the key for the current DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::next</FName>
    <Desc>public void DirectoryIterator::next ( void )
Move forward to the next DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::rewind</FName>
    <Desc>public void DirectoryIterator::rewind ( void )
Rewind the DirectoryIterator back to the start.
</Desc>
    <FName>DirectoryIterator::seek</FName>
    <Desc>public void DirectoryIterator::seek ( int $position )
Seek to a given position in the DirectoryIterator.
</Desc>
    <FName>DirectoryIterator::__toString</FName>
    <Desc>public string DirectoryIterator::__toString ( void )
Get the file name of the current DirectoryIterator item.
</Desc>
    <FName>DirectoryIterator::valid</FName>
    <Desc>public bool DirectoryIterator::valid ( void )
Check whether current DirectoryIterator position is a valid file.
</Desc>
    <FName>DOMAttr::__construct</FName>
    <Desc>public DOMAttr::__construct ( string $name [, string $value ] )
Creates a new DOMAttr object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writable node, use DOMDocument::createAttribute.
</Desc>
    <FName>DOMAttr::isId</FName>
    <Desc>public bool DOMAttr::isId ( void )
This function checks if the attribute is a defined ID. 
According to the DOM standard this requires a DTD which defines the attribute ID to be of type ID. You need to validate your document with DOMDocument::validate or DOMDocument::validateOnParse before using this function.
</Desc>
    <FName>DOMCdataSection::__construct</FName>
    <Desc>public DOMCdataSection::__construct ( string $value )
Constructs a new CDATA node. This works like the DOMText class.
</Desc>
    <FName>DOMCharacterData::appendData</FName>
    <Desc>public void DOMCharacterData::appendData ( string $data )
Append the string data to the end of the character data of the node.
</Desc>
    <FName>DOMCharacterData::deleteData</FName>
    <Desc>public void DOMCharacterData::deleteData ( int $offset , int $count )
Deletes count characters starting from position offset.
</Desc>
    <FName>DOMCharacterData::insertData</FName>
    <Desc>public void DOMCharacterData::insertData ( int $offset , string $data )
Inserts string data at position offset.
</Desc>
    <FName>DOMCharacterData::replaceData</FName>
    <Desc>public void DOMCharacterData::replaceData ( int $offset , int $count , string $data )
Replace count characters starting from position offset with data.
</Desc>
    <FName>DOMCharacterData::substringData</FName>
    <Desc>public string DOMCharacterData::substringData ( int $offset , int $count )
Returns the specified substring.
</Desc>
    <FName>DOMComment::__construct</FName>
    <Desc>public DOMComment::__construct ([ string $value ] )
Creates a new DOMComment object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use DOMDocument::createComment.
</Desc>
    <FName>DOMDocument::__construct</FName>
    <Desc>public DOMDocument::__construct ([ string $version [, string $encoding ]] )
Creates a new DOMDocument object.
</Desc>
    <FName>DOMDocument::createAttribute</FName>
    <Desc>public DOMAttr DOMDocument::createAttribute ( string $name )
This function creates a new instance of class DOMAttr. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().
</Desc>
    <FName>DOMDocument::createAttributeNS</FName>
    <Desc>public DOMAttr DOMDocument::createAttributeNS ( string $namespaceURI , string $qualifiedName )
This function creates a new instance of class DOMAttr. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().
</Desc>
    <FName>DOMDocument::createCDATASection</FName>
    <Desc>public DOMCDATASection DOMDocument::createCDATASection ( string $data )
This function creates a new instance of class DOMCDATASection. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().
</Desc>
    <FName>DOMDocument::createComment</FName>
    <Desc>public DOMComment DOMDocument::createComment ( string $data )
This function creates a new instance of class DOMComment. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().
</Desc>
    <FName>DOMDocument::createDocumentFragment</FName>
    <Desc>public DOMDocumentFragment DOMDocument::createDocumentFragment ( void )
This function creates a new instance of class DOMDocumentFragment. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().
</Desc>
    <FName>DOMDocument::createElement</FName>
    <Desc>public DOMElement DOMDocument::createElement ( string $name [, string $value ] )
This function creates a new instance of class DOMElement. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().
</Desc>
    <FName>DOMDocument::createElementNS</FName>
    <Desc>public DOMElement DOMDocument::createElementNS ( string $namespaceURI , string $qualifiedName [, string $value ] )
This function creates a new element node with an associated namespace. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().
</Desc>
    <FName>DOMDocument::createEntityReference</FName>
    <Desc>public DOMEntityReference DOMDocument::createEntityReference ( string $name )
This function creates a new instance of class DOMEntityReference. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().
</Desc>
    <FName>DOMDocument::createProcessingInstruction</FName>
    <Desc>public DOMProcessingInstruction DOMDocument::createProcessingInstruction ( string $target [, string $data ] )
This function creates a new instance of class DOMProcessingInstruction. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().
</Desc>
    <FName>DOMDocument::createTextNode</FName>
    <Desc>public DOMText DOMDocument::createTextNode ( string $content )
This function creates a new instance of class DOMText. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().
</Desc>
    <FName>DOMDocument::getElementById</FName>
    <Desc>public DOMElement DOMDocument::getElementById ( string $elementId )
This function is similar to DOMDocument::getElementsByTagName but searches for an element with a given id. 
For this function to work, you will need either to set some ID attributes with DOMElement::setIdAttribute or a DTD which defines an attribute to be of type ID. In the later case, you will need to validate your document with DOMDocument::validate or DOMDocument::$validateOnParse before using this function.
</Desc>
    <FName>DOMDocument::getElementsByTagName</FName>
    <Desc>public DOMNodeList DOMDocument::getElementsByTagName ( string $name )
This function returns a new instance of class DOMNodeList containing all the elements with a given local tag name.
</Desc>
    <FName>DOMDocument::getElementsByTagNameNS</FName>
    <Desc>public DOMNodeList DOMDocument::getElementsByTagNameNS ( string $namespaceURI , string $localName )
Returns a DOMNodeList of all elements with a given local name and a namespace URI.
</Desc>
    <FName>DOMDocument::importNode</FName>
    <Desc>public DOMNode DOMDocument::importNode ( DOMNode $importedNode [, bool $deep ] )
This function returns a copy of the node to import and associates it with the current document.
</Desc>
    <FName>DOMDocument::load</FName>
    <Desc>public mixed DOMDocument::load ( string $filename [, int $options = 0 ] )
Loads an XML document from a file. 
Warning 
Unix style paths with forward slashes can cause significant performance degradation on Windows systems; be sure to call realpath() in such a case.
</Desc>
    <FName>DOMDocument::loadHTML</FName>
    <Desc>public bool DOMDocument::loadHTML ( string $source [, int $options = 0 ] )
The function parses the HTML contained in the string source. Unlike loading XML, HTML does not have to be well-formed to load. This function may also be called statically to load and create a DOMDocument object. The static invocation may be used when no DOMDocument properties need to be set prior to loading.
</Desc>
    <FName>DOMDocument::loadHTMLFile</FName>
    <Desc>public bool DOMDocument::loadHTMLFile ( string $filename [, int $options = 0 ] )
The function parses the HTML document in the file named filename. Unlike loading XML, HTML does not have to be well-formed to load.
</Desc>
    <FName>DOMDocument::loadXML</FName>
    <Desc>public mixed DOMDocument::loadXML ( string $source [, int $options = 0 ] )
Loads an XML document from a string.
</Desc>
    <FName>DOMDocument::normalizeDocument</FName>
    <Desc>public void DOMDocument::normalizeDocument ( void )
This method acts as if you saved and then loaded the document, putting the document in a "normal" form.
</Desc>
    <FName>DOMDocument::registerNodeClass</FName>
    <Desc>public bool DOMDocument::registerNodeClass ( string $baseclass , string $extendedclass )
This method allows you to register your own extended DOM class to be used afterward by the PHP DOM extension. 
This method is not part of the DOM standard.
</Desc>
    <FName>DOMDocument::relaxNGValidate</FName>
    <Desc>public bool DOMDocument::relaxNGValidate ( string $filename )
Performs » relaxNG validation on the document based on the given RNG schema.
</Desc>
    <FName>DOMDocument::relaxNGValidateSource</FName>
    <Desc>public bool DOMDocument::relaxNGValidateSource ( string $source )
Performs » relaxNG validation on the document based on the given RNG source.
</Desc>
    <FName>DOMDocument::save</FName>
    <Desc>public int DOMDocument::save ( string $filename [, int $options ] )
Creates an XML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.
</Desc>
    <FName>DOMDocument::saveHTML</FName>
    <Desc>public string DOMDocument::saveHTML ([ DOMNode $node = NULL ] )
Creates an HTML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.
</Desc>
    <FName>DOMDocument::saveHTMLFile</FName>
    <Desc>public int DOMDocument::saveHTMLFile ( string $filename )
Creates an HTML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.
</Desc>
    <FName>DOMDocument::saveXML</FName>
    <Desc>public string DOMDocument::saveXML ([ DOMNode $node [, int $options ]] )
Creates an XML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.
</Desc>
    <FName>DOMDocument::schemaValidate</FName>
    <Desc>public bool DOMDocument::schemaValidate ( string $filename [, int $flags ] )
Validates a document based on the given schema file.
</Desc>
    <FName>DOMDocument::schemaValidateSource</FName>
    <Desc>public bool DOMDocument::schemaValidateSource ( string $source [, int $flags ] )
Validates a document based on a schema defined in the given string.
</Desc>
    <FName>DOMDocument::validate</FName>
    <Desc>public bool DOMDocument::validate ( void )
Validates the document based on its DTD. 
You can also use the validateOnParse property of DOMDocument to make a DTD validation.
</Desc>
    <FName>DOMDocument::xinclude</FName>
    <Desc>public int DOMDocument::xinclude ([ int $options ] )
This method substitutes » XIncludes in a DOMDocument object. 
Note: 
Due to libxml2 automatically resolving entities, this method will produce unexpected results if the included XML file have an attached DTD.
</Desc>
    <FName>DOMDocumentFragment::appendXML</FName>
    <Desc>public bool DOMDocumentFragment::appendXML ( string $data )
Appends raw XML data to a DOMDocumentFragment. 
This method is not part of the DOM standard. It was created as a simpler approach for appending an XML DocumentFragment in a DOMDocument. 
If you want to stick to the standards, you will have to create a temporary DOMDocument with a dummy root and then loop through the child nodes of the root of your XML data to append them.
</Desc>
    <FName>DOMElement::__construct</FName>
    <Desc>public DOMElement::__construct ( string $name [, string $value [, string $namespaceURI ]] )
Creates a new DOMElement object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use DOMDocument::createElement or DOMDocument::createElementNS.
</Desc>
    <FName>DOMElement::getAttribute</FName>
    <Desc>public string DOMElement::getAttribute ( string $name )
Gets the value of the attribute with name name for the current node.
</Desc>
    <FName>DOMElement::getAttributeNode</FName>
    <Desc>public DOMAttr DOMElement::getAttributeNode ( string $name )
Returns the attribute node with name name for the current element.
</Desc>
    <FName>DOMElement::getAttributeNodeNS</FName>
    <Desc>public DOMAttr DOMElement::getAttributeNodeNS ( string $namespaceURI , string $localName )
Returns the attribute node in namespace namespaceURI with local name localName for the current node.
</Desc>
    <FName>DOMElement::getAttributeNS</FName>
    <Desc>public string DOMElement::getAttributeNS ( string $namespaceURI , string $localName )
Gets the value of the attribute in namespace namespaceURI with local name localName for the current node.
</Desc>
    <FName>DOMElement::getElementsByTagName</FName>
    <Desc>public DOMNodeList DOMElement::getElementsByTagName ( string $name )
This function returns a new instance of the class DOMNodeList of all descendant elements with a given tag name, in the order in which they are encountered in a preorder traversal of this element tree.
</Desc>
    <FName>DOMElement::getElementsByTagNameNS</FName>
    <Desc>public DOMNodeList DOMElement::getElementsByTagNameNS ( string $namespaceURI , string $localName )
This function fetch all the descendant elements with a given localName and namespaceURI.
</Desc>
    <FName>DOMElement::hasAttribute</FName>
    <Desc>public bool DOMElement::hasAttribute ( string $name )
Indicates whether attribute named name exists as a member of the element.
</Desc>
    <FName>DOMElement::hasAttributeNS</FName>
    <Desc>public bool DOMElement::hasAttributeNS ( string $namespaceURI , string $localName )
Indicates whether attribute in namespace namespaceURI named localName exists as a member of the element.
</Desc>
    <FName>DOMElement::removeAttribute</FName>
    <Desc>public bool DOMElement::removeAttribute ( string $name )
Removes attribute named name from the element.
</Desc>
    <FName>DOMElement::removeAttributeNode</FName>
    <Desc>public bool DOMElement::removeAttributeNode ( DOMAttr $oldnode )
Removes attribute oldnode from the element.
</Desc>
    <FName>DOMElement::removeAttributeNS</FName>
    <Desc>public bool DOMElement::removeAttributeNS ( string $namespaceURI , string $localName )
Removes attribute localName in namespace namespaceURI from the element.
</Desc>
    <FName>DOMElement::setAttribute</FName>
    <Desc>public DOMAttr DOMElement::setAttribute ( string $name , string $value )
Sets an attribute with name name to the given value. If the attribute does not exist, it will be created.
</Desc>
    <FName>DOMElement::setAttributeNode</FName>
    <Desc>public DOMAttr DOMElement::setAttributeNode ( DOMAttr $attr )
Adds new attribute node attr to element.
</Desc>
    <FName>DOMElement::setAttributeNodeNS</FName>
    <Desc>public DOMAttr DOMElement::setAttributeNodeNS ( DOMAttr $attr )
Adds new attribute node attr to element.
</Desc>
    <FName>DOMElement::setAttributeNS</FName>
    <Desc>public void DOMElement::setAttributeNS ( string $namespaceURI , string $qualifiedName , string $value )
Sets an attribute with namespace namespaceURI and name name to the given value. If the attribute does not exist, it will be created.
</Desc>
    <FName>DOMElement::setIdAttribute</FName>
    <Desc>public void DOMElement::setIdAttribute ( string $name , bool $isId )
Declares the attribute name to be of type ID.
</Desc>
    <FName>DOMElement::setIdAttributeNode</FName>
    <Desc>public void DOMElement::setIdAttributeNode ( DOMAttr $attr , bool $isId )
Declares the attribute specified by attr to be of type ID.
</Desc>
    <FName>DOMElement::setIdAttributeNS</FName>
    <Desc>public void DOMElement::setIdAttributeNS ( string $namespaceURI , string $localName , bool $isId )
Declares the attribute specified by localName and namespaceURI to be of type ID.
</Desc>
    <FName>DOMEntityReference::__construct</FName>
    <Desc>public DOMEntityReference::__construct ( string $name )
Creates a new DOMEntityReference object.
</Desc>
    <FName>DOMImplementation::__construct</FName>
    <Desc>DOMImplementation::__construct ( void )
Creates a new DOMImplementation object.
</Desc>
    <FName>DOMImplementation::createDocument</FName>
    <Desc>public DOMDocument DOMImplementation::createDocument ([ string $namespaceURI = NULL [, string $qualifiedName = NULL [, DOMDocumentType $doctype = NULL ]]] )
Creates a DOMDocument object of the specified type with its document element.
</Desc>
    <FName>DOMImplementation::createDocumentType</FName>
    <Desc>public DOMDocumentType DOMImplementation::createDocumentType ([ string $qualifiedName = NULL [, string $publicId = NULL [, string $systemId = NULL ]]] )
Creates an empty DOMDocumentType object. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur.
</Desc>
    <FName>DOMImplementation::hasFeature</FName>
    <Desc>public bool DOMImplementation::hasFeature ( string $feature , string $version )
Test if the DOM implementation implements a specific feature. 
You can find a list of all features in the » Conformance section of the DOM specification.
</Desc>
    <FName>DOMNamedNodeMap::getNamedItem</FName>
    <Desc>DOMNode DOMNamedNodeMap::getNamedItem ( string $name )
Retrieves a node specified by its nodeName.
</Desc>
    <FName>DOMNamedNodeMap::getNamedItemNS</FName>
    <Desc>DOMNode DOMNamedNodeMap::getNamedItemNS ( string $namespaceURI , string $localName )
Retrieves a node specified by localName and namespaceURI.
</Desc>
    <FName>DOMNamedNodeMap::item</FName>
    <Desc>DOMNode DOMNamedNodeMap::item ( int $index )
Retrieves a node specified by index within the DOMNamedNodeMap object.
</Desc>
    <FName>DOMNode::appendChild</FName>
    <Desc>public DOMNode DOMNode::appendChild ( DOMNode $newnode )
This function appends a child to an existing list of children or creates a new list of children. The child can be created with e.g. DOMDocument::createElement(), DOMDocument::createTextNode() etc. or simply by using any other node.
</Desc>
    <FName>DOMNode::C14N</FName>
    <Desc>public string DOMNode::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] )
Canonicalize nodes to a string
</Desc>
    <FName>DOMNode::C14NFile</FName>
    <Desc>public int DOMNode::C14NFile ( string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes ]]]] )
Canonicalize nodes to a file.
</Desc>
    <FName>DOMNode::cloneNode</FName>
    <Desc>public DOMNode DOMNode::cloneNode ([ bool $deep ] )
Creates a copy of the node.
</Desc>
    <FName>DOMNode::getLineNo</FName>
    <Desc>public int DOMNode::getLineNo ( void )
Gets line number for where the node is defined.
</Desc>
    <FName>DOMNode::getNodePath</FName>
    <Desc>public string DOMNode::getNodePath ( void )
Gets an XPath location path for the node.
</Desc>
    <FName>DOMNode::hasAttributes</FName>
    <Desc>public bool DOMNode::hasAttributes ( void )
This method checks if the node has attributes. The tested node has to be an XML_ELEMENT_NODE.
</Desc>
    <FName>DOMNode::hasChildNodes</FName>
    <Desc>public bool DOMNode::hasChildNodes ( void )
This function checks if the node has children.
</Desc>
    <FName>DOMNode::insertBefore</FName>
    <Desc>public DOMNode DOMNode::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] )
This function inserts a new node right before the reference node. If you plan to do further modifications on the appended child you must use the returned node.
</Desc>
    <FName>DOMNode::isDefaultNamespace</FName>
    <Desc>public bool DOMNode::isDefaultNamespace ( string $namespaceURI )
Tells whether namespaceURI is the default namespace.
</Desc>
    <FName>DOMNode::isSameNode</FName>
    <Desc>public bool DOMNode::isSameNode ( DOMNode $node )
This function indicates if two nodes are the same node. The comparison is not based on content
</Desc>
    <FName>DOMNode::isSupported</FName>
    <Desc>public bool DOMNode::isSupported ( string $feature , string $version )
Checks if the asked feature is supported for the specified version.
</Desc>
    <FName>DOMNode::lookupNamespaceUri</FName>
    <Desc>public string DOMNode::lookupNamespaceUri ( string $prefix )
Gets the namespace URI of the node based on the prefix.
</Desc>
    <FName>DOMNode::lookupPrefix</FName>
    <Desc>public string DOMNode::lookupPrefix ( string $namespaceURI )
Gets the namespace prefix of the node based on the namespace URI.
</Desc>
    <FName>DOMNode::normalize</FName>
    <Desc>public void DOMNode::normalize ( void )
Remove empty text nodes and merge adjacent text nodes in this node and all its children.
</Desc>
    <FName>DOMNode::removeChild</FName>
    <Desc>public DOMNode DOMNode::removeChild ( DOMNode $oldnode )
This functions removes a child from a list of children.
</Desc>
    <FName>DOMNode::replaceChild</FName>
    <Desc>public DOMNode DOMNode::replaceChild ( DOMNode $newnode , DOMNode $oldnode )
This function replaces the child oldnode with the passed new node. If the newnode is already a child it will not be added a second time. If the replacement succeeds the old node is returned.
</Desc>
    <FName>DOMNodeList::count</FName>
    <Desc>public int DOMNodeList::count ( void )
</Desc>
    <FName>DOMNodeList::item</FName>
    <Desc>DOMNode DOMNodeList::item ( int $index )
Retrieves a node specified by index within the DOMNodeList object. 
Tip 
If you need to know the number of nodes in the collection, use the length property of the DOMNodeList object.
</Desc>
    <FName>DOMProcessingInstruction::__construct</FName>
    <Desc>public DOMProcessingInstruction::__construct ( string $name [, string $value ] )
Creates a new DOMProcessingInstruction object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use DOMDocument::createProcessingInstruction.
</Desc>
    <FName>DOMText::__construct</FName>
    <Desc>public DOMText::__construct ([ string $value ] )
Creates a new DOMText object.
</Desc>
    <FName>DOMText::isElementContentWhitespace</FName>
    <Desc>public bool DOMText::isElementContentWhitespace ( void )
</Desc>
    <FName>DOMText::isWhitespaceInElementContent</FName>
    <Desc>public bool DOMText::isWhitespaceInElementContent ( void )
Indicates whether this text node contains only whitespace or it is empty. The text node is determined to contain whitespace in element content during the load of the document.
</Desc>
    <FName>DOMText::splitText</FName>
    <Desc>public DOMText DOMText::splitText ( int $offset )
Breaks this node into two nodes at the specified offset, keeping both in the tree as siblings. 
After being split, this node will contain all the content up to the offset. If the original node had a parent node, the new node is inserted as the next sibling of the original node. When the offset is equal to the length of this node, the new node has no data.
</Desc>
    <FName>DOMXPath::__construct</FName>
    <Desc>public DOMXPath::__construct ( DOMDocument $doc )
Creates a new DOMXPath object.
</Desc>
    <FName>DOMXPath::evaluate</FName>
    <Desc>public mixed DOMXPath::evaluate ( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = TRUE ]] )
Executes the given XPath expression and returns a typed result if possible.
</Desc>
    <FName>DOMXPath::query</FName>
    <Desc>public DOMNodeList DOMXPath::query ( string $expression [, DOMNode $contextnode [, bool $registerNodeNS = TRUE ]] )
Executes the given XPath expression.
</Desc>
    <FName>DOMXPath::registerNamespace</FName>
    <Desc>public bool DOMXPath::registerNamespace ( string $prefix , string $namespaceURI )
Registers the namespaceURI and prefix with the DOMXPath object.
</Desc>
    <FName>DOMXPath::registerPhpFunctions</FName>
    <Desc>public void DOMXPath::registerPhpFunctions ([ mixed $restrict ] )
This method enables the ability to use PHP functions within XPath expressions.
</Desc>
    <FName>Ds\Collection::clear</FName>
    <Desc>abstract public void Ds\Collection::clear ( void )
Removes all values from the collection.
</Desc>
    <FName>Ds\Collection::copy</FName>
    <Desc>abstract public Ds\Collection Ds\Collection::copy ( void )
Returns a shallow copy of the collection.
</Desc>
    <FName>Ds\Collection::isEmpty</FName>
    <Desc>abstract public bool Ds\Collection::isEmpty ( void )
Returns whether the collection is empty.
</Desc>
    <FName>Ds\Collection::toArray</FName>
    <Desc>abstract public array Ds\Collection::toArray ( void )
Converts the collection to an array. 
Note: 
Casting to an array is not supported yet.
</Desc>
    <FName>Ds\Deque::allocate</FName>
    <Desc>public void Ds\Deque::allocate ( int $capacity )
Ensures that enough memory is allocated for a required capacity. This removes the need to reallocate the internal as values are added.
</Desc>
    <FName>Ds\Deque::apply</FName>
    <Desc>public void Ds\Deque::apply ( callable $callback )
Updates all values by applying a callback function to each value in the deque.
</Desc>
    <FName>Ds\Deque::capacity</FName>
    <Desc>public int Ds\Deque::capacity ( void )
Returns the current capacity.
</Desc>
    <FName>Ds\Deque::clear</FName>
    <Desc>public void Ds\Deque::clear ( void )
Removes all values from the deque.
</Desc>
    <FName>Ds\Deque::__construct</FName>
    <Desc>public Ds\Deque::__construct ([ mixed $values ] )
Creates a new instance, using either a traversable object or an array for the initial values.
</Desc>
    <FName>Ds\Deque::contains</FName>
    <Desc>public bool Ds\Deque::contains ([ mixed $...values ] )
Determines if the deque contains all values.
</Desc>
    <FName>Ds\Deque::copy</FName>
    <Desc>public Ds\Deque Ds\Deque::copy ( void )
Returns a shallow copy of the deque.
</Desc>
    <FName>Ds\Deque::filter</FName>
    <Desc>public Ds\Deque Ds\Deque::filter ([ callable $callback ] )
Creates a new deque using a callable to determine which values to include.
</Desc>
    <FName>Ds\Deque::find</FName>
    <Desc>public mixed Ds\Deque::find ( mixed $value )
Returns the index of the value, or FALSE if not found.
</Desc>
    <FName>Ds\Deque::first</FName>
    <Desc>public mixed Ds\Deque::first ( void )
Returns the first value in the deque.
</Desc>
    <FName>Ds\Deque::get</FName>
    <Desc>public mixed Ds\Deque::get ( int $index )
Returns the value at a given index.
</Desc>
    <FName>Ds\Deque::insert</FName>
    <Desc>public void Ds\Deque::insert ( int $index [, mixed $...values ] )
Inserts values into the deque at a given index.
</Desc>
    <FName>Ds\Deque::isEmpty</FName>
    <Desc>public bool Ds\Deque::isEmpty ( void )
Returns whether the deque is empty.
</Desc>
    <FName>Ds\Deque::join</FName>
    <Desc>public string Ds\Deque::join ([ string $glue ] )
Joins all values together as a string using an optional separator between each value.
</Desc>
    <FName>Ds\Deque::last</FName>
    <Desc>public mixed Ds\Deque::last ( void )
Returns the last value in the deque.
</Desc>
    <FName>Ds\Deque::map</FName>
    <Desc>public Ds\Deque Ds\Deque::map ( callable $callback )
Returns the result of applying a callback function to each value in the deque.
</Desc>
    <FName>Ds\Deque::merge</FName>
    <Desc>public Ds\Deque Ds\Deque::merge ( mixed $values )
Returns the result of adding all given values to the deque.
</Desc>
    <FName>Ds\Deque::pop</FName>
    <Desc>public mixed Ds\Deque::pop ( void )
Removes and returns the last value.
</Desc>
    <FName>Ds\Deque::push</FName>
    <Desc>public void Ds\Deque::push ([ mixed $...values ] )
Adds values to the end of the deque.
</Desc>
    <FName>Ds\Deque::reduce</FName>
    <Desc>public mixed Ds\Deque::reduce ( callable $callback [, mixed $initial ] )
Reduces the deque to a single value using a callback function.
</Desc>
    <FName>Ds\Deque::remove</FName>
    <Desc>public mixed Ds\Deque::remove ( int $index )
Removes and returns a value by index.
</Desc>
    <FName>Ds\Deque::reverse</FName>
    <Desc>public void Ds\Deque::reverse ( void )
Reverses the deque in-place.
</Desc>
    <FName>Ds\Deque::reversed</FName>
    <Desc>public Ds\Deque Ds\Deque::reversed ( void )
Returns a reversed copy of the deque.
</Desc>
    <FName>Ds\Deque::rotate</FName>
    <Desc>public void Ds\Deque::rotate ( int $rotations )
Rotates the deque by a given number of rotations, which is equivalent to successively calling $deque->push($deque->shift()) if the number of rotations is positive, or $deque->unshift($deque->pop()) if negative.
</Desc>
    <FName>Ds\Deque::set</FName>
    <Desc>public void Ds\Deque::set ( int $index , mixed $value )
Updates a value at a given index.
</Desc>
    <FName>Ds\Deque::shift</FName>
    <Desc>public mixed Ds\Deque::shift ( void )
Removes and returns the first value.
</Desc>
    <FName>Ds\Deque::slice</FName>
    <Desc>public Ds\Deque Ds\Deque::slice ( int $index [, int $length ] )
Creates a sub-deque of a given range.
</Desc>
    <FName>Ds\Deque::sort</FName>
    <Desc>public void Ds\Deque::sort ([ callable $comparator ] )
Sorts the deque in-place, using an optional comparator function.
</Desc>
    <FName>Ds\Deque::sorted</FName>
    <Desc>public Ds\Deque Ds\Deque::sorted ([ callable $comparator ] )
Returns a sorted copy, using an optional comparator function.
</Desc>
    <FName>Ds\Deque::sum</FName>
    <Desc>public number Ds\Deque::sum ( void )
Returns the sum of all values in the deque. 
Note: 
Arrays and objects are considered equal to zero when calculating the sum.
</Desc>
    <FName>Ds\Deque::toArray</FName>
    <Desc>public array Ds\Deque::toArray ( void )
Converts the deque to an array. 
Note: 
Casting to an array is not supported yet.
</Desc>
    <FName>Ds\Deque::unshift</FName>
    <Desc>public void Ds\Deque::unshift ([ mixed $values ] )
Adds values to the front of the deque, moving all the current values forward to make room for the new values.
</Desc>
    <FName>Ds\Hashable::equals</FName>
    <Desc>abstract public bool Ds\Hashable::equals ( object $obj )
Determines whether another object is equal to the current instance. 
This method allows objects to be used as keys in structures such as Ds\Map and Ds\Set, or any other lookup structure that honors this interface. 
Note: 
It's guaranteed that obj is an instance of the same class. 
Caution 
It's important that objects which are equal also have the same hash value. See Ds\Hashable::hash().
</Desc>
    <FName>Ds\Hashable::hash</FName>
    <Desc>abstract public mixed Ds\Hashable::hash ( void )
Returns a scalar value to be used as the hash value of the objects. 
While the hash value does not define equality, all objects that are equal according to Ds\Hashable::equals() must have the same hash value. Hash values of equal objects don't have to be unique, for example you could just return TRUE for all objects and nothing would break - the only implication would be that hash tables then turn into linked lists because all your objects will be hashed to the same bucket. It's therefore very important that you pick a good hash value, such as an ID or email address. 
This method allows objects to be used as keys in structures such as Ds\Map and Ds\Set, or any other lookup structure that honors this interface. 
Caution 
Do not pick a value that might change within the object, such as a public property. Hash table lookups would fail because the hash has changed. 
Caution 
All objects that are equal must have the same hash value.
</Desc>
    <FName>Ds\Map::allocate</FName>
    <Desc>public void Ds\Map::allocate ( int $capacity )
Allocates enough memory for a required capacity.
</Desc>
    <FName>Ds\Map::apply</FName>
    <Desc>public void Ds\Map::apply ( callable $callback )
Updates all values by applying a callback function to each value in the map.
</Desc>
    <FName>Ds\Map::capacity</FName>
    <Desc>public int Ds\Map::capacity ( void )
Returns the current capacity.
</Desc>
    <FName>Ds\Map::clear</FName>
    <Desc>public void Ds\Map::clear ( void )
Removes all values from the map.
</Desc>
    <FName>Ds\Map::__construct</FName>
    <Desc>public Ds\Map::__construct ([ mixed $...values ] )
Creates a new instance, using either a traversable object or an array for the initial values.
</Desc>
    <FName>Ds\Map::copy</FName>
    <Desc>public Ds\Map Ds\Map::copy ( void )
Returns a shallow copy of the map.
</Desc>
    <FName>Ds\Map::diff</FName>
    <Desc>public Ds\Map Ds\Map::diff ( Ds\Map $map )
Returns the result of removing all keys from the current instance that are present in a given map. 
A \ B = {x ? A | x ? B}
</Desc>
    <FName>Ds\Map::filter</FName>
    <Desc>public Ds\Map Ds\Map::filter ([ callable $callback ] )
Creates a new map using a callable to determine which pairs to include.
</Desc>
    <FName>Ds\Map::first</FName>
    <Desc>public Ds\Pair Ds\Map::first ( void )
Returns the first pair in the map.
</Desc>
    <FName>Ds\Map::get</FName>
    <Desc>public mixed Ds\Map::get ( mixed $key [, mixed $default ] )
Returns the value for a given key, or an optional default value if the key could not be found. 
Note: 
Keys of type object are supported. If an object implements Ds\Hashable, equality will be determined by the object's equals function. If an object does not implement Ds\Hashable, objects must be references to the same instance to be considered equal. 
Note: 
You can also use array syntax to access values by key, eg. $map["key"]. 
Caution 
Be careful when using array syntax. Scalar keys will be coerced to integers by the engine. For example, $map["1"] will attempt to access int(1), while $map->get("1") will correctly look up the string key. 
See Arrays.
</Desc>
    <FName>Ds\Map::hasKey</FName>
    <Desc>public bool Ds\Map::hasKey ( mixed $key )
Determines whether the map contains a given key.
</Desc>
    <FName>Ds\Map::hasValue</FName>
    <Desc>public bool Ds\Map::hasValue ( mixed $value )
Determines whether the map contains a given value.
</Desc>
    <FName>Ds\Map::intersect</FName>
    <Desc>public Ds\Map Ds\Map::intersect ( Ds\Map $map )
Creates a new map containing the pairs of the current instance whose keys are also present in the given map. In other words, returns a copy of the current instance with all keys removed that are not also in the other map. 
A ? B = {x : x ? A ? x ? B} 
Note: 
Values from the current instance will be kept.
</Desc>
    <FName>Ds\Map::isEmpty</FName>
    <Desc>public bool Ds\Map::isEmpty ( void )
Returns whether the map is empty.
</Desc>
    <FName>Ds\Map::keys</FName>
    <Desc>public Ds\Set Ds\Map::keys ( void )
Returns a set containing all the keys of the map, in the same order.
</Desc>
    <FName>Ds\Map::ksort</FName>
    <Desc>public void Ds\Map::ksort ([ callable $comparator ] )
Sorts the map in-place by key, using an optional comparator function.
</Desc>
    <FName>Ds\Map::ksorted</FName>
    <Desc>public Ds\Map Ds\Map::ksorted ([ callable $comparator ] )
Returns a copy sorted by key, using an optional comparator function.
</Desc>
    <FName>Ds\Map::last</FName>
    <Desc>public Ds\Pair Ds\Map::last ( void )
Returns the last pair of the map.
</Desc>
    <FName>Ds\Map::map</FName>
    <Desc>public Ds\Map Ds\Map::map ( callable $callback )
Returns the result of applying a callback function to each value of the map.
</Desc>
    <FName>Ds\Map::merge</FName>
    <Desc>public Ds\Map Ds\Map::merge ( mixed $values )
Returns the result of associating all keys of a given traversable object or array with their corresponding values, combined with the current instance. 
Note: 
Values of the current instance will be overwritten by those provided where keys are equal.
</Desc>
    <FName>Ds\Map::pairs</FName>
    <Desc>public Ds\Sequence Ds\Map::pairs ( void )
Returns a Ds\Sequence containing all the pairs of the map.
</Desc>
    <FName>Ds\Map::put</FName>
    <Desc>public void Ds\Map::put ( mixed $key , mixed $value )
Associates a key with a value, overwriting a previous association if one exists. 
Note: 
Keys of type object are supported. If an object implements Ds\Hashable, equality will be determined by the object's equals function. If an object does not implement Ds\Hashable, objects must be references to the same instance to be considered equal. 
Note: 
You can also use array syntax to associate values by key, eg. $map["key"] = $value. 
Caution 
Be careful when using array syntax. Scalar keys will be coerced to integers by the engine. For example, $map["1"] will attempt to access int(1), while $map->get("1") will correctly look up the string key. 
See Arrays.
</Desc>
    <FName>Ds\Map::putAll</FName>
    <Desc>public void Ds\Map::putAll ( mixed $pairs )
Associates all key-value pairs of a traversable object or array. 
Note: 
Keys of type object are supported. If an object implements Ds\Hashable, equality will be determined by the object's equals function. If an object does not implement Ds\Hashable, objects must be references to the same instance to be considered equal.
</Desc>
    <FName>Ds\Map::reduce</FName>
    <Desc>public mixed Ds\Map::reduce ( callable $callback [, mixed $initial ] )
Reduces the map to a single value using a callback function.
</Desc>
    <FName>Ds\Map::remove</FName>
    <Desc>public mixed Ds\Map::remove ( mixed $key [, mixed $default ] )
Removes and returns a value by key, or return an optional default value if the key could not be found. 
Note: 
Keys of type object are supported. If an object implements Ds\Hashable, equality will be determined by the object's equals function. If an object does not implement Ds\Hashable, objects must be references to the same instance to be considered equal. 
Note: 
You can also use array syntax to access values by key, eg. $map["key"]. 
Caution 
Be careful when using array syntax. Scalar keys will be coerced to integers by the engine. For example, $map["1"] will attempt to access int(1), while $map->get("1") will correctly look up the string key. 
See Arrays.
</Desc>
    <FName>Ds\Map::reverse</FName>
    <Desc>public void Ds\Map::reverse ( void )
Reverses the map in-place.
</Desc>
    <FName>Ds\Map::reversed</FName>
    <Desc>public Ds\Map Ds\Map::reversed ( void )
Returns a reversed copy of the map.
</Desc>
    <FName>Ds\Map::skip</FName>
    <Desc>public Ds\Pair Ds\Map::skip ( int $position )
Returns the pair at a given zero-based position.
</Desc>
    <FName>Ds\Map::slice</FName>
    <Desc>public Ds\Map Ds\Map::slice ( int $index [, int $length ] )
Returns a subset of the map defined by a starting index and length.
</Desc>
    <FName>Ds\Map::sort</FName>
    <Desc>public void Ds\Map::sort ([ callable $comparator ] )
Sorts the map in-place by value, using an optional comparator function.
</Desc>
    <FName>Ds\Map::sorted</FName>
    <Desc>public Ds\Map Ds\Map::sorted ([ callable $comparator ] )
Returns a copy, sorted by value using an optional comparator function.
</Desc>
    <FName>Ds\Map::sum</FName>
    <Desc>public number Ds\Map::sum ( void )
Returns the sum of all values in the map. 
Note: 
Arrays and objects are considered equal to zero when calculating the sum.
</Desc>
    <FName>Ds\Map::toArray</FName>
    <Desc>public array Ds\Map::toArray ( void )
Converts the map to an array. 
Caution 
Maps where non-scalar keys are can't be converted to an array. 
Caution 
An array will treat all numeric keys as integers, eg. "1" and 1 as keys in the map will only result in 1 being included in the array. 
Note: 
Casting to an array is not supported yet.
</Desc>
    <FName>Ds\Map::union</FName>
    <Desc>public Ds\Map Ds\Map::union ( Ds\Map $map )
Creates a new map that contains the pairs of the current instance as well as the pairs of another map. 
A ? B = {x: x ? A ? x ? B} 
Note: 
Values of the current instance will be overwritten by those provided where keys are equal.
</Desc>
    <FName>Ds\Map::values</FName>
    <Desc>public Ds\Sequence Ds\Map::values ( void )
Returns a sequence containing all the values of the map, in the same order.
</Desc>
    <FName>Ds\Map::xor</FName>
    <Desc>public Ds\Map Ds\Map::xor ( Ds\Map $map )
Creates a new map containing keys of the current instance as well as another map, but not of both. 
A ? B = {x : x ? (A \ B) ? (B \ A)}
</Desc>
    <FName>Ds\Pair::clear</FName>
    <Desc>public void Ds\Pair::clear ( void )
Removes all values from the pair.
</Desc>
    <FName>Ds\Pair::__construct</FName>
    <Desc>public Ds\Pair::__construct ([ mixed $key [, mixed $value ]] )
Creates a new instance using a given key and value.
</Desc>
    <FName>Ds\Pair::copy</FName>
    <Desc>public Ds\Pair Ds\Pair::copy ( void )
Returns a shallow copy of the pair.
</Desc>
    <FName>Ds\Pair::isEmpty</FName>
    <Desc>public bool Ds\Pair::isEmpty ( void )
Returns whether the pair is empty.
</Desc>
    <FName>Ds\Pair::toArray</FName>
    <Desc>public array Ds\Pair::toArray ( void )
Converts the pair to an array. 
Note: 
Casting to an array is not supported yet.
</Desc>
    <FName>Ds\PriorityQueue::allocate</FName>
    <Desc>public void Ds\PriorityQueue::allocate ( int $capacity )
Ensures that enough memory is allocated for a required capacity. This removes the need to reallocate the internal as values are added.
</Desc>
    <FName>Ds\PriorityQueue::capacity</FName>
    <Desc>public int Ds\PriorityQueue::capacity ( void )
Returns the current capacity.
</Desc>
    <FName>Ds\PriorityQueue::clear</FName>
    <Desc>public void Ds\PriorityQueue::clear ( void )
Removes all values from the queue.
</Desc>
    <FName>Ds\PriorityQueue::__construct</FName>
    <Desc>public Ds\PriorityQueue::__construct ( void )
Creates a new instance.
</Desc>
    <FName>Ds\PriorityQueue::copy</FName>
    <Desc>public Ds\PriorityQueue Ds\PriorityQueue::copy ( void )
Returns a shallow copy of the queue.
</Desc>
    <FName>Ds\PriorityQueue::isEmpty</FName>
    <Desc>public bool Ds\PriorityQueue::isEmpty ( void )
Returns whether the queue is empty.
</Desc>
    <FName>Ds\PriorityQueue::peek</FName>
    <Desc>public mixed Ds\PriorityQueue::peek ( void )
Returns the value at the front of the queue, but does not remove it.
</Desc>
    <FName>Ds\PriorityQueue::pop</FName>
    <Desc>public mixed Ds\PriorityQueue::pop ( void )
Removes and returns the value at the front of the queue, ie. the value with the highest priority. 
Note: 
Values with equal priority fall back to FIFO (first in first out).
</Desc>
    <FName>Ds\PriorityQueue::push</FName>
    <Desc>public void Ds\PriorityQueue::push ( mixed $value , int $priority )
Pushes a value with a given priority into the queue.
</Desc>
    <FName>Ds\PriorityQueue::toArray</FName>
    <Desc>public array Ds\PriorityQueue::toArray ( void )
Converts the queue to an array. 
Note: 
This method is not destructive. 
Note: 
Casting to an array is not supported yet.
</Desc>
    <FName>Ds\Queue::allocate</FName>
    <Desc>public void Ds\Queue::allocate ( int $capacity )
Ensures that enough memory is allocated for a required capacity. This removes the need to reallocate the internal as values are added. 
Note: 
Capacity will always be rounded up to the nearest power of 2.
</Desc>
    <FName>Ds\Queue::capacity</FName>
    <Desc>public int Ds\Queue::capacity ( void )
Returns the current capacity.
</Desc>
    <FName>Ds\Queue::clear</FName>
    <Desc>public void Ds\Queue::clear ( void )
Removes all values from the queue.
</Desc>
    <FName>Ds\Queue::__construct</FName>
    <Desc>public Ds\Queue::__construct ([ mixed $values ] )
Creates a new instance, using either a traversable object or an array for the initial values.
</Desc>
    <FName>Ds\Queue::copy</FName>
    <Desc>public Ds\Queue Ds\Queue::copy ( void )
Returns a shallow copy of the queue.
</Desc>
    <FName>Ds\Queue::isEmpty</FName>
    <Desc>public bool Ds\Queue::isEmpty ( void )
Returns whether the queue is empty.
</Desc>
    <FName>Ds\Queue::peek</FName>
    <Desc>public mixed Ds\Queue::peek ( void )
Returns the value at the front of the queue, but does not remove it.
</Desc>
    <FName>Ds\Queue::pop</FName>
    <Desc>public mixed Ds\Queue::pop ( void )
Removes and returns the value at the front of the queue.
</Desc>
    <FName>Ds\Queue::push</FName>
    <Desc>public void Ds\Queue::push ([ mixed $...values ] )
Pushes values into the queue.
</Desc>
    <FName>Ds\Queue::toArray</FName>
    <Desc>public array Ds\Queue::toArray ( void )
Converts the queue to an array. 
Note: 
Casting to an array is not supported yet. 
Note: 
This method is not destructive.
</Desc>
    <FName>Ds\Sequence::allocate</FName>
    <Desc>abstract public void Ds\Sequence::allocate ( int $capacity )
Ensures that enough memory is allocated for a required capacity. This removes the need to reallocate the internal as values are added.
</Desc>
    <FName>Ds\Sequence::apply</FName>
    <Desc>abstract public void Ds\Sequence::apply ( callable $callback )
Updates all values by applying a callback function to each value in the sequence.
</Desc>
    <FName>Ds\Sequence::capacity</FName>
    <Desc>abstract public int Ds\Sequence::capacity ( void )
Returns the current capacity.
</Desc>
    <FName>Ds\Sequence::contains</FName>
    <Desc>abstract public bool Ds\Sequence::contains ([ mixed $...values ] )
Determines if the sequence contains all values.
</Desc>
    <FName>Ds\Sequence::filter</FName>
    <Desc>abstract public Ds\Sequence Ds\Sequence::filter ([ callable $callback ] )
Creates a new sequence using a callable to determine which values to include.
</Desc>
    <FName>Ds\Sequence::find</FName>
    <Desc>abstract public mixed Ds\Sequence::find ( mixed $value )
Returns the index of the value, or FALSE if not found.
</Desc>
    <FName>Ds\Sequence::first</FName>
    <Desc>abstract public mixed Ds\Sequence::first ( void )
Returns the first value in the sequence.
</Desc>
    <FName>Ds\Sequence::get</FName>
    <Desc>abstract public mixed Ds\Sequence::get ( int $index )
Returns the value at a given index.
</Desc>
    <FName>Ds\Sequence::insert</FName>
    <Desc>abstract public void Ds\Sequence::insert ( int $index [, mixed $...values ] )
Inserts values into the sequence at a given index.
</Desc>
    <FName>Ds\Sequence::join</FName>
    <Desc>abstract public string Ds\Sequence::join ([ string $glue ] )
Joins all values together as a string using an optional separator between each value.
</Desc>
    <FName>Ds\Sequence::last</FName>
    <Desc>abstract public mixed Ds\Sequence::last ( void )
Returns the last value in the sequence.
</Desc>
    <FName>Ds\Sequence::map</FName>
    <Desc>abstract public Ds\Sequence Ds\Sequence::map ( callable $callback )
Returns the result of applying a callback function to each value in the sequence.
</Desc>
    <FName>Ds\Sequence::merge</FName>
    <Desc>abstract public Ds\Sequence Ds\Sequence::merge ( mixed $values )
Returns the result of adding all given values to the sequence.
</Desc>
    <FName>Ds\Sequence::pop</FName>
    <Desc>abstract public mixed Ds\Sequence::pop ( void )
Removes and returns the last value.
</Desc>
    <FName>Ds\Sequence::push</FName>
    <Desc>abstract public void Ds\Sequence::push ([ mixed $...values ] )
Adds values to the end of the sequence.
</Desc>
    <FName>Ds\Sequence::reduce</FName>
    <Desc>abstract public mixed Ds\Sequence::reduce ( callable $callback [, mixed $initial ] )
Reduces the sequence to a single value using a callback function.
</Desc>
    <FName>Ds\Sequence::remove</FName>
    <Desc>abstract public mixed Ds\Sequence::remove ( int $index )
Removes and returns a value by index.
</Desc>
    <FName>Ds\Sequence::reverse</FName>
    <Desc>abstract public void Ds\Sequence::reverse ( void )
Reverses the sequence in-place.
</Desc>
    <FName>Ds\Sequence::reversed</FName>
    <Desc>abstract public Ds\Sequence Ds\Sequence::reversed ( void )
Returns a reversed copy of the sequence.
</Desc>
    <FName>Ds\Sequence::rotate</FName>
    <Desc>abstract public void Ds\Sequence::rotate ( int $rotations )
Rotates the sequence by a given number of rotations, which is equivalent to successively calling $sequence->push($sequence->shift()) if the number of rotations is positive, or $sequence->unshift($sequence->pop()) if negative.
</Desc>
    <FName>Ds\Sequence::set</FName>
    <Desc>abstract public void Ds\Sequence::set ( int $index , mixed $value )
Updates a value at a given index.
</Desc>
    <FName>Ds\Sequence::shift</FName>
    <Desc>abstract public mixed Ds\Sequence::shift ( void )
Removes and returns the first value.
</Desc>
    <FName>Ds\Sequence::slice</FName>
    <Desc>abstract public Ds\Sequence Ds\Sequence::slice ( int $index [, int $length ] )
Creates a sub-sequence of a given range.
</Desc>
    <FName>Ds\Sequence::sort</FName>
    <Desc>abstract public void Ds\Sequence::sort ([ callable $comparator ] )
Sorts the sequence in-place, using an optional comparator function.
</Desc>
    <FName>Ds\Sequence::sorted</FName>
    <Desc>abstract public Ds\Sequence Ds\Sequence::sorted ([ callable $comparator ] )
Returns a sorted copy, using an optional comparator function.
</Desc>
    <FName>Ds\Sequence::sum</FName>
    <Desc>abstract public number Ds\Sequence::sum ( void )
Returns the sum of all values in the sequence. 
Note: 
Arrays and objects are considered equal to zero when calculating the sum.
</Desc>
    <FName>Ds\Sequence::unshift</FName>
    <Desc>abstract public void Ds\Sequence::unshift ([ mixed $values ] )
Adds values to the front of the sequence, moving all the current values forward to make room for the new values.
</Desc>
    <FName>Ds\Set::add</FName>
    <Desc>public void Ds\Set::add ([ mixed $...values ] )
Adds all given values to the set that haven't already been added. 
Note: 
Values of type object are supported. If an object implements Ds\Hashable, equality will be determined by the object's equals function. If an object does not implement Ds\Hashable, objects must be references to the same instance to be considered equal. 
Caution 
All comparisons are strict (type and value).
</Desc>
    <FName>Ds\Set::allocate</FName>
    <Desc>public void Ds\Set::allocate ( int $capacity )
Allocates enough memory for a required capacity.
</Desc>
    <FName>Ds\Set::capacity</FName>
    <Desc>public int Ds\Set::capacity ( void )
Returns the current capacity.
</Desc>
    <FName>Ds\Set::clear</FName>
    <Desc>public void Ds\Set::clear ( void )
Removes all values from the set.
</Desc>
    <FName>Ds\Set::__construct</FName>
    <Desc>public Ds\Set::__construct ([ mixed $...values ] )
Creates a new instance, using either a traversable object or an array for the initial values.
</Desc>
    <FName>Ds\Set::contains</FName>
    <Desc>public bool Ds\Set::contains ([ mixed $...values ] )
Determines if the set contains all values. 
Note: 
Values of type object are supported. If an object implements Ds\Hashable, equality will be determined by the object's equals function. If an object does not implement Ds\Hashable, objects must be references to the same instance to be considered equal. 
Caution 
All comparisons are strict (type and value).
</Desc>
    <FName>Ds\Set::copy</FName>
    <Desc>public Ds\Set Ds\Set::copy ( void )
Returns a shallow copy of the set.
</Desc>
    <FName>Ds\Set::diff</FName>
    <Desc>public Ds\Set Ds\Set::diff ( Ds\Set $set )
Creates a new set using values that aren't in another set. 
A \ B = {x ? A | x ? B}
</Desc>
    <FName>Ds\Set::filter</FName>
    <Desc>public Ds\Set Ds\Set::filter ([ callable $callback ] )
Creates a new set using a callable to determine which values to include.
</Desc>
    <FName>Ds\Set::first</FName>
    <Desc>public void Ds\Set::first ( void )
Returns the first value in the set.
</Desc>
    <FName>Ds\Set::get</FName>
    <Desc>public mixed Ds\Set::get ( int $index )
Returns the value at a given index.
</Desc>
    <FName>Ds\Set::intersect</FName>
    <Desc>public Ds\Set Ds\Set::intersect ( Ds\Set $set )
Creates a new set using values common to both the current instance and another set. In other words, returns a copy of the current instance with all values removed that are not in the other set. 
A ? B = {x : x ? A ? x ? B}
</Desc>
    <FName>Ds\Set::isEmpty</FName>
    <Desc>public bool Ds\Set::isEmpty ( void )
Returns whether the set is empty.
</Desc>
    <FName>Ds\Set::join</FName>
    <Desc>public string Ds\Set::join ([ string $glue ] )
Joins all values together as a string using an optional separator between each value.
</Desc>
    <FName>Ds\Set::last</FName>
    <Desc>public void Ds\Set::last ( void )
Returns the last value in the set.
</Desc>
    <FName>Ds\Set::merge</FName>
    <Desc>public Ds\Set Ds\Set::merge ( mixed $values )
Returns the result of adding all given values to the set.
</Desc>
    <FName>Ds\Set::reduce</FName>
    <Desc>public mixed Ds\Set::reduce ( callable $callback [, mixed $initial ] )
Reduces the set to a single value using a callback function.
</Desc>
    <FName>Ds\Set::remove</FName>
    <Desc>public void Ds\Set::remove ([ mixed $...values ] )
Removes all given values from the set, ignoring any that are not in the set.
</Desc>
    <FName>Ds\Set::reverse</FName>
    <Desc>public void Ds\Set::reverse ( void )
Reverses the set in-place.
</Desc>
    <FName>Ds\Set::reversed</FName>
    <Desc>public Ds\Set Ds\Set::reversed ( void )
Returns a reversed copy of the set.
</Desc>
    <FName>Ds\Set::slice</FName>
    <Desc>public Ds\Set Ds\Set::slice ( int $index [, int $length ] )
Creates a sub-set of a given range.
</Desc>
    <FName>Ds\Set::sort</FName>
    <Desc>public void Ds\Set::sort ([ callable $comparator ] )
Sorts the set in-place, using an optional comparator function.
</Desc>
    <FName>Ds\Set::sorted</FName>
    <Desc>public Ds\Set Ds\Set::sorted ([ callable $comparator ] )
Returns a sorted copy, using an optional comparator function.
</Desc>
    <FName>Ds\Set::sum</FName>
    <Desc>public number Ds\Set::sum ( void )
Returns the sum of all values in the set. 
Note: 
Arrays and objects are considered equal to zero when calculating the sum.
</Desc>
    <FName>Ds\Set::toArray</FName>
    <Desc>public array Ds\Set::toArray ( void )
Converts the set to an array. 
Note: 
Casting to an array is not supported yet.
</Desc>
    <FName>Ds\Set::union</FName>
    <Desc>public Ds\Set Ds\Set::union ( Ds\Set $set )
Creates a new set that contains the values of the current instance as well as the values of another set. 
A ? B = {x: x ? A ? x ? B}
</Desc>
    <FName>Ds\Set::xor</FName>
    <Desc>public Ds\Set Ds\Set::xor ( Ds\Set $set )
Creates a new set containing values in the current instance as well as another set, but not in both. 
A ? B = {x : x ? (A \ B) ? (B \ A)}
</Desc>
    <FName>Ds\Stack::allocate</FName>
    <Desc>public void Ds\Stack::allocate ( int $capacity )
Ensures that enough memory is allocated for a required capacity. This removes the need to reallocate the internal as values are added.
</Desc>
    <FName>Ds\Stack::capacity</FName>
    <Desc>public int Ds\Stack::capacity ( void )
Returns the current capacity.
</Desc>
    <FName>Ds\Stack::clear</FName>
    <Desc>public void Ds\Stack::clear ( void )
Removes all values from the stack.
</Desc>
    <FName>Ds\Stack::__construct</FName>
    <Desc>public Ds\Stack::__construct ([ mixed $values ] )
Creates a new instance, using either a traversable object or an array for the initial values.
</Desc>
    <FName>Ds\Stack::copy</FName>
    <Desc>public Ds\Stack Ds\Stack::copy ( void )
Returns a shallow copy of the stack.
</Desc>
    <FName>Ds\Stack::isEmpty</FName>
    <Desc>public bool Ds\Stack::isEmpty ( void )
Returns whether the stack is empty.
</Desc>
    <FName>Ds\Stack::peek</FName>
    <Desc>public mixed Ds\Stack::peek ( void )
Returns the value at the top of the stack, but does not remove it.
</Desc>
    <FName>Ds\Stack::pop</FName>
    <Desc>public mixed Ds\Stack::pop ( void )
Removes and returns the value at the top of the stack.
</Desc>
    <FName>Ds\Stack::push</FName>
    <Desc>public void Ds\Stack::push ([ mixed $...values ] )
Pushes values onto the stack.
</Desc>
    <FName>Ds\Stack::toArray</FName>
    <Desc>public array Ds\Stack::toArray ( void )
Converts the stack to an array. 
Note: 
Casting to an array is not supported yet.
</Desc>
    <FName>Ds\Vector::allocate</FName>
    <Desc>public void Ds\Vector::allocate ( int $capacity )
Ensures that enough memory is allocated for a required capacity. This removes the need to reallocate the internal as values are added.
</Desc>
    <FName>Ds\Vector::apply</FName>
    <Desc>public void Ds\Vector::apply ( callable $callback )
Updates all values by applying a callback function to each value in the vector.
</Desc>
    <FName>Ds\Vector::capacity</FName>
    <Desc>public int Ds\Vector::capacity ( void )
Returns the current capacity.
</Desc>
    <FName>Ds\Vector::clear</FName>
    <Desc>public void Ds\Vector::clear ( void )
Removes all values from the vector.
</Desc>
    <FName>Ds\Vector::__construct</FName>
    <Desc>public Ds\Vector::__construct ([ mixed $values ] )
Creates a new instance, using either a traversable object or an array for the initial values.
</Desc>
    <FName>Ds\Vector::contains</FName>
    <Desc>public bool Ds\Vector::contains ([ mixed $...values ] )
Determines if the vector contains all values.
</Desc>
    <FName>Ds\Vector::copy</FName>
    <Desc>public Ds\Vector Ds\Vector::copy ( void )
Returns a shallow copy of the vector.
</Desc>
    <FName>Ds\Vector::filter</FName>
    <Desc>public Ds\Vector Ds\Vector::filter ([ callable $callback ] )
Creates a new vector using a callable to determine which values to include.
</Desc>
    <FName>Ds\Vector::find</FName>
    <Desc>public mixed Ds\Vector::find ( mixed $value )
Returns the index of the value, or FALSE if not found.
</Desc>
    <FName>Ds\Vector::first</FName>
    <Desc>public mixed Ds\Vector::first ( void )
Returns the first value in the vector.
</Desc>
    <FName>Ds\Vector::get</FName>
    <Desc>public mixed Ds\Vector::get ( int $index )
Returns the value at a given index.
</Desc>
    <FName>Ds\Vector::insert</FName>
    <Desc>public void Ds\Vector::insert ( int $index [, mixed $...values ] )
Inserts values into the vector at a given index.
</Desc>
    <FName>Ds\Vector::isEmpty</FName>
    <Desc>public bool Ds\Vector::isEmpty ( void )
Returns whether the vector is empty.
</Desc>
    <FName>Ds\Vector::join</FName>
    <Desc>public string Ds\Vector::join ([ string $glue ] )
Joins all values together as a string using an optional separator between each value.
</Desc>
    <FName>Ds\Vector::last</FName>
    <Desc>public mixed Ds\Vector::last ( void )
Returns the last value in the vector.
</Desc>
    <FName>Ds\Vector::map</FName>
    <Desc>public Ds\Vector Ds\Vector::map ( callable $callback )
Returns the result of applying a callback function to each value in the vector.
</Desc>
    <FName>Ds\Vector::merge</FName>
    <Desc>public Ds\Vector Ds\Vector::merge ( mixed $values )
Returns the result of adding all given values to the vector.
</Desc>
    <FName>Ds\Vector::pop</FName>
    <Desc>public mixed Ds\Vector::pop ( void )
Removes and returns the last value.
</Desc>
    <FName>Ds\Vector::push</FName>
    <Desc>public void Ds\Vector::push ([ mixed $...values ] )
Adds values to the end of the vector.
</Desc>
    <FName>Ds\Vector::reduce</FName>
    <Desc>public mixed Ds\Vector::reduce ( callable $callback [, mixed $initial ] )
Reduces the vector to a single value using a callback function.
</Desc>
    <FName>Ds\Vector::remove</FName>
    <Desc>public mixed Ds\Vector::remove ( int $index )
Removes and returns a value by index.
</Desc>
    <FName>Ds\Vector::reverse</FName>
    <Desc>public void Ds\Vector::reverse ( void )
Reverses the vector in-place.
</Desc>
    <FName>Ds\Vector::reversed</FName>
    <Desc>public Ds\Vector Ds\Vector::reversed ( void )
Returns a reversed copy of the vector.
</Desc>
    <FName>Ds\Vector::rotate</FName>
    <Desc>public void Ds\Vector::rotate ( int $rotations )
Rotates the vector by a given number of rotations, which is equivalent to successively calling $vector->push($vector->shift()) if the number of rotations is positive, or $vector->unshift($vector->pop()) if negative.
</Desc>
    <FName>Ds\Vector::set</FName>
    <Desc>public void Ds\Vector::set ( int $index , mixed $value )
Updates a value at a given index.
</Desc>
    <FName>Ds\Vector::shift</FName>
    <Desc>public mixed Ds\Vector::shift ( void )
Removes and returns the first value.
</Desc>
    <FName>Ds\Vector::slice</FName>
    <Desc>public Ds\Vector Ds\Vector::slice ( int $index [, int $length ] )
Creates a sub-vector of a given range.
</Desc>
    <FName>Ds\Vector::sort</FName>
    <Desc>public void Ds\Vector::sort ([ callable $comparator ] )
Sorts the vector in-place, using an optional comparator function.
</Desc>
    <FName>Ds\Vector::sorted</FName>
    <Desc>public Ds\Vector Ds\Vector::sorted ([ callable $comparator ] )
Returns a sorted copy, using an optional comparator function.
</Desc>
    <FName>Ds\Vector::sum</FName>
    <Desc>public number Ds\Vector::sum ( void )
Returns the sum of all values in the vector. 
Note: 
Arrays and objects are considered equal to zero when calculating the sum.
</Desc>
    <FName>Ds\Vector::toArray</FName>
    <Desc>public array Ds\Vector::toArray ( void )
Converts the vector to an array. 
Note: 
Casting to an array is not supported yet.
</Desc>
    <FName>Ds\Vector::unshift</FName>
    <Desc>public void Ds\Vector::unshift ([ mixed $values ] )
Adds values to the front of the vector, moving all the current values forward to make room for the new values.
</Desc>
    <FName>EmptyIterator::current</FName>
    <Desc>public mixed EmptyIterator::current ( void )
This function must not be called. It throws an exception upon access. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>EmptyIterator::key</FName>
    <Desc>public scalar EmptyIterator::key ( void )
This function must not be called. It throws an exception upon access. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>EmptyIterator::next</FName>
    <Desc>public void EmptyIterator::next ( void )
No operation, nothing to do. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>EmptyIterator::rewind</FName>
    <Desc>public void EmptyIterator::rewind ( void )
No operation, nothing to do. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>EmptyIterator::valid</FName>
    <Desc>public bool EmptyIterator::valid ( void )
The EmptyIterator valid() method. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Error::__clone</FName>
    <Desc>final private void Error::__clone ( void )
Error can not be clone, so this method results in fatal error.
</Desc>
    <FName>Error::__construct</FName>
    <Desc>public Error::__construct ([ string $message = "" [, int $code = 0 [, Throwable $previous = NULL ]]] )
Constructs the Error.
</Desc>
    <FName>Error::getCode</FName>
    <Desc>final public mixed Error::getCode ( void )
Returns the error code.
</Desc>
    <FName>Error::getFile</FName>
    <Desc>final public string Error::getFile ( void )
Get the name of the file the error occurred.
</Desc>
    <FName>Error::getLine</FName>
    <Desc>final public int Error::getLine ( void )
Get line number where the error occurred.
</Desc>
    <FName>Error::getMessage</FName>
    <Desc>final public string Error::getMessage ( void )
Returns the error message.
</Desc>
    <FName>Error::getPrevious</FName>
    <Desc>final public Throwable Error::getPrevious ( void )
Returns previous Throwable (the third parameter of Error::__construct()).
</Desc>
    <FName>Error::getTrace</FName>
    <Desc>final public array Error::getTrace ( void )
Returns the stack trace.
</Desc>
    <FName>Error::getTraceAsString</FName>
    <Desc>final public string Error::getTraceAsString ( void )
Returns the stack trace as a string.
</Desc>
    <FName>Error::__toString</FName>
    <Desc>public string Error::__toString ( void )
Returns the string representation of the error.
</Desc>
    <FName>ErrorException::__construct</FName>
    <Desc>public ErrorException::__construct ([ string $message = "" [, int $code = 0 [, int $severity = E_ERROR [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL ]]]]]] )
Constructs the Exception.
</Desc>
    <FName>ErrorException::getSeverity</FName>
    <Desc>final public int ErrorException::getSeverity ( void )
Returns the severity of the exception.
</Desc>
    <FName>Ev::backend</FName>
    <Desc>final public static int Ev::backend ( void )
Returns an integer describing the backend used by libev . See Backend flags
</Desc>
    <FName>Ev::depth</FName>
    <Desc>final public static int Ev::depth ( void )
The number of times Ev::run() was entered minus the number of times Ev::run() was exited normally, in other words, the recursion depth. Outside Ev::run() , this number is 0 . In a callback, this number is 1 , unless Ev::run() was invoked recursively (or from another thread), in which case it is higher.
</Desc>
    <FName>Ev::embeddableBackends</FName>
    <Desc>final public static void Ev::embeddableBackends ( void )
Returns the set of backends that are embeddable in other event loops.
</Desc>
    <FName>Ev::feedSignal</FName>
    <Desc>final public static void Ev::feedSignal ( int $signum )
Simulates a signal receive. It is safe to call this function at any time, from any context, including signal handlers or random threads. Its main use is to customise signal handling in the process. 
Unlike Ev::feedSignalEvent() , this works regardless of which loop has registered the signal.
</Desc>
    <FName>Ev::feedSignalEvent</FName>
    <Desc>final public static void Ev::feedSignalEvent ( int $signum )
Feed signal event into the default loop. Ev will react to this call as if the signal specified by signal had occurred.
</Desc>
    <FName>Ev::iteration</FName>
    <Desc>final public static int Ev::iteration ( void )
Return the number of times the event loop has polled for new events. Sometimes useful as a generation counter.
</Desc>
    <FName>Ev::now</FName>
    <Desc>final public static float Ev::now ( void )
Returns the time when the last iteration of the default event loop has started. This is the time that timers( EvTimer and EvPeriodic ) are based on, and referring to it is usually faster then calling Ev::time() .
</Desc>
    <FName>Ev::nowUpdate</FName>
    <Desc>final public static void Ev::nowUpdate ( void )
Establishes the current time by querying the kernel, updating the time returned by Ev::now() in the progress. This is a costly operation and is usually done automatically within Ev::run() . 
This method is rarely useful, but when some event callback runs for a very long time without entering the event loop, updating libev 's consideration of the current time is a good idea.
</Desc>
    <FName>Ev::recommendedBackends</FName>
    <Desc>final public static void Ev::recommendedBackends ( void )
Returns the set of all backends compiled into this binary of libev and also recommended for this platform, meaning it will work for most file descriptor types. This set is often smaller than the one returned by ev_supported_backends() , as for example kqueue is broken on most BSD systems and will not be auto-detected unless it is requested explicitly. This is the set of backends that libev will probe no backends specified explicitly.
</Desc>
    <FName>Ev::resume</FName>
    <Desc>final public static void Ev::resume ( void )
Ev::suspend() and Ev::resume() methods suspend and resume a loop correspondingly. 
All timer watchers will be delayed by the time spend between suspend and resume , and all periodic watchers will be rescheduled(that is, they will lose any events that would have occurred while suspended). 
After calling Ev::suspend() it is not allowed to call any function on the given loop other than Ev::resume() . Also it is not allowed to call Ev::resume() without a previous call to Ev::suspend() . 
Calling suspend / resume has the side effect of updating the event loop time(see Ev::nowUpdate() ).
</Desc>
    <FName>Ev::run</FName>
    <Desc>final public static void Ev::run ([ int $flags ] )
Begin checking for events and calling callbacks for the default loop . Returns when a callback calls Ev::stop() method, or the flags are nonzero(in which case the return value is true) or when there are no active watchers which reference the loop( EvWatcher::keepalive() is TRUE), in which case the return value will be FALSE. The return value can generally be interpreted as if TRUE, there is more work left to do .
</Desc>
    <FName>Ev::sleep</FName>
    <Desc>final public static void Ev::sleep ( float $seconds )
Block the process for the given number of seconds.
</Desc>
    <FName>Ev::stop</FName>
    <Desc>final public static void Ev::stop ([ int $how ] )
Stops the default event loop
</Desc>
    <FName>Ev::supportedBackends</FName>
    <Desc>final public static void Ev::supportedBackends ( void )
Returns the set of backends supported by current libev configuration.
</Desc>
    <FName>Ev::suspend</FName>
    <Desc>final public static void Ev::suspend ( void )
Ev::suspend() and Ev::resume() methods suspend and resume the default loop correspondingly. 
All timer watchers will be delayed by the time spend between suspend and resume , and all periodic watchers will be rescheduled(that is, they will lose any events that would have occurred while suspended). 
After calling Ev::suspend() it is not allowed to call any function on the given loop other than Ev::resume() . Also it is not allowed to call Ev::resume() without a previous call to Ev::suspend() .
</Desc>
    <FName>Ev::time</FName>
    <Desc>final public static float Ev::time ( void )
Returns the current time in fractional seconds since the epoch. Consider using Ev::now()
</Desc>
    <FName>Ev::verify</FName>
    <Desc>final public static void Ev::verify ( void )
Performs internal consistency checks(for debugging libev ) and abort the program if any data structures were found to be corrupted.
</Desc>
    <FName>EvCheck::__construct</FName>
    <Desc>public EvCheck::__construct ( callable $callback [, mixed $data [, int $priority ]] )
Constructs the EvCheck watcher object.
</Desc>
    <FName>EvCheck::createStopped</FName>
    <Desc>final public static object EvCheck::createStopped ( string $callback [, string $data [, string $priority ]] )
Create instance of a stopped EvCheck watcher
</Desc>
    <FName>EvChild::__construct</FName>
    <Desc>public EvChild::__construct ( int $pid , bool $trace , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Constructs the EvChild watcher object. 
Call the callback when a status change for process ID pid (or any PID if pid is 0 ) has been received(a status change happens when the process terminates or is killed, or, when trace is TRUE, additionally when it is stopped or continued). In other words, when the process receives a SIGCHLD , Ev will fetch the outstanding exit/wait status for all changed/zombie children and call the callback. 
It is valid to install a child watcher after an EvChild has exited but before the event loop has started its next iteration. For example, first one calls fork , then the new child process might exit, and only then an EvChild watcher is installed in the parent for the new PID . 
You can access both exit/tracing status and pid by using the rstatus and rpid properties of the watcher object. 
The number of PID watchers per PID is unlimited. All of them will be called. 
The EvChild::createStopped() method doesn't start(activate) the newly created watcher.
</Desc>
    <FName>EvChild::createStopped</FName>
    <Desc>final public static object EvChild::createStopped ( int $pid , bool $trace , callable $callback [, mixed $data [, int $priority ]] )
The same as EvChild::__construct() , but doesn't start the watcher automatically.
</Desc>
    <FName>EvChild::set</FName>
    <Desc>public void EvChild::set ( int $pid , bool $trace )
</Desc>
    <FName>EvEmbed::__construct</FName>
    <Desc>public EvEmbed::__construct ( object $other [, callable $callback [, mixed $data [, int $priority ]]] )
This is a rather advanced watcher type that lets to embed one event loop into another(currently only IO events are supported in the embedded loop, other types of watchers might be handled in a delayed or incorrect fashion and must not be used). 
See » the libev documentation for details. 
This watcher is most useful on BSD systems without working kqueue to still be able to handle a large number of sockets. See example below.
</Desc>
    <FName>EvEmbed::createStopped</FName>
    <Desc>final public static void EvEmbed::createStopped ( object $other [, callable $callback [, mixed $data [, int $priority ]]] )
The same as EvEmbed::__construct() , but doesn't start the watcher automatically.
</Desc>
    <FName>EvEmbed::set</FName>
    <Desc>public void EvEmbed::set ( object $other )
Configures the watcher to use other event loop object.
</Desc>
    <FName>EvEmbed::sweep</FName>
    <Desc>public void EvEmbed::sweep ( void )
Make a single, non-blocking sweep over the embedded loop. Works similarly to the following, but in the most appropriate way for embedded loops: 
<?php
$other->start(Ev::RUN_NOWAIT);
?>
</Desc>
    <FName>Event::add</FName>
    <Desc>public bool Event::add ([ float $timeout ] )
Marks event pending. Non-pending event will never occur, and the event callback will never be called. In conjuction with Event::del() an event could be re-scheduled by user at any time. 
If Event::add() is called on an already pending event, libevent will leave it pending and re-schedule it with the given timeout(if specified). If in this case timeout is not specified, Event::add() has no effect.
</Desc>
    <FName>Event::addSignal</FName>
    <Desc>public bool Event::addSignal ([ float $timeout ] )
Event::addSignal() is an alias of Event::add()
</Desc>
    <FName>Event::addTimer</FName>
    <Desc>public bool Event::addTimer ([ float $timeout ] )
Event::addTimer() is an alias of Event::add()
</Desc>
    <FName>Event::__construct</FName>
    <Desc>public Event::__construct ( EventBase $base , mixed $fd , int $what , callable $cb [, mixed $arg = NULL ] )
Constructs Event object.
</Desc>
    <FName>Event::del</FName>
    <Desc>public bool Event::del ( void )
Removes an event from the set of monitored events, i.e. makes it non-pending.
</Desc>
    <FName>Event::delSignal</FName>
    <Desc>public bool Event::delSignal ( void )
Event::delSignal() is an alias of Event::del() 
See Also
Event::del() - Makes event non-pending 
</Desc>
    <FName>Event::delTimer</FName>
    <Desc>public bool Event::delTimer ( void )
Event::delTimer() is an alias of Event::del() . 
See Also
Event::del() - Makes event non-pending
</Desc>
    <FName>Event::free</FName>
    <Desc>public void Event::free ( void )
Removes event from the list of events monitored by libevent, and free resources allocated for the event. 
Warning 
The Event::free() method currently doesn't destruct the object itself. To destruct the object completely call unset() , or assign NULL.
</Desc>
    <FName>Event::getSupportedMethods</FName>
    <Desc>public static array Event::getSupportedMethods ( void )
Returns array with of the names of the methods(backends) supported in this version of Libevent.
</Desc>
    <FName>Event::pending</FName>
    <Desc>public bool Event::pending ( int $flags )
Detects whether event is pending or scheduled
</Desc>
    <FName>Event::set</FName>
    <Desc>public bool Event::set ( EventBase $base , mixed $fd [, int $what [, callable $cb [, mixed $arg ]]] )
Re-configures event. Note, this function doesn't invoke obsolete libevent's event_set. It calls event_assign instead.
</Desc>
    <FName>Event::setPriority</FName>
    <Desc>public bool Event::setPriority ( int $priority )
Set event priority.
</Desc>
    <FName>Event::setTimer</FName>
    <Desc>public bool Event::setTimer ( EventBase $base , callable $cb [, mixed $arg ] )
Re-configures timer event. Note, this function doesn't invoke obsolete libevent's event_set . It calls event_assign instead.
</Desc>
    <FName>Event::signal</FName>
    <Desc>public static Event Event::signal ( EventBase $base , int $signum , callable $cb [, mixed $arg ] )
Constructs signal event object. This is a straightforward method to create a signal event. Note, the generic Event::__construct() method can contruct signal event objects too.
</Desc>
    <FName>Event::timer</FName>
    <Desc>public static Event Event::timer ( EventBase $base , callable $cb [, mixed $arg ] )
Constructs timer event object. This is a straightforward method to create a timer event. Note, the generic Event::__construct() method can contruct signal event objects too.
</Desc>
    <FName>EventBase::__construct</FName>
    <Desc>public EventBase::__construct ([ EventConfig $cfg ] )
Constructs EventBase object
</Desc>
    <FName>EventBase::dispatch</FName>
    <Desc>public void EventBase::dispatch ( void )
Wait for events to become active, and run their callbacks. The same as EventBase::loop() with no flags set. 
Warning 
Do NOT destroy the EventBase object as long as resources of the associated Event objects are not released. Otherwise, it will lead to unpredictable results!
</Desc>
    <FName>EventBase::exit</FName>
    <Desc>public bool EventBase::exit ([ float $timeout ] )
Tells event base to stop optionally after given number of seconds.
</Desc>
    <FName>EventBase::free</FName>
    <Desc>public void EventBase::free ( void )
Deallocates resources allocated by libevent for the EventBase object. 
Warning 
The EventBase::free() method doesn't destruct the object itself. To destruct the object completely call unset() , or assign NULL. 
This method does not deallocate or detach any of the events that are currently associated with the EventBase object, or close any of their sockets - beware.
</Desc>
    <FName>EventBase::getFeatures</FName>
    <Desc>public int EventBase::getFeatures ( void )
Returns bitmask of features supported.
</Desc>
    <FName>EventBase::getMethod</FName>
    <Desc>public string EventBase::getMethod ( void )
</Desc>
    <FName>EventBase::getTimeOfDayCached</FName>
    <Desc>public float EventBase::getTimeOfDayCached ( void )
On success returns the current time(as returned by gettimeofday() ), looking at the cached value in base if possible, and calling gettimeofday() or clock_gettime() as appropriate if there is no cached time.
</Desc>
    <FName>EventBase::gotExit</FName>
    <Desc>public bool EventBase::gotExit ( void )
Checks if the event loop was told to exit by EventBase::exit() .
</Desc>
    <FName>EventBase::gotStop</FName>
    <Desc>public bool EventBase::gotStop ( void )
Checks if the event loop was told to exit by EventBase::stop() .
</Desc>
    <FName>EventBase::loop</FName>
    <Desc>public bool EventBase::loop ([ int $flags ] )
Wait for events to become active, and run their callbacks. 
Warning 
Do NOT destroy the EventBase object as long as resources of the associated Event objects are not released. Otherwise, it will lead to unpredictable results!
</Desc>
    <FName>EventBase::priorityInit</FName>
    <Desc>public bool EventBase::priorityInit ( int $n_priorities )
Sets number of priorities per event base.
</Desc>
    <FName>EventBase::reInit</FName>
    <Desc>public bool EventBase::reInit ( void )
Re-initialize event base. Should be called after a fork.
</Desc>
    <FName>EventBase::stop</FName>
    <Desc>public bool EventBase::stop ( void )
Tells event_base to stop dispatching events
</Desc>
    <FName>EventBuffer::add</FName>
    <Desc>public bool EventBuffer::add ( string $data )
Append data to the end of an event buffer.
</Desc>
    <FName>EventBuffer::addBuffer</FName>
    <Desc>public bool EventBuffer::addBuffer ( EventBuffer $buf )
Move all data from the buffer provided in buf parameter to the end of current EventBuffer . This is a destructive add. The data from one buffer moves into the other buffer. However, no unnecessary memory copies occur.
</Desc>
    <FName>EventBuffer::appendFrom</FName>
    <Desc>public int EventBuffer::appendFrom ( EventBuffer $buf , int $len )
Moves the specified number of bytes from a source buffer to the end of the current buffer. If there are fewer number of bytes, it moves all the bytes available from the source buffer.
</Desc>
    <FName>EventBuffer::__construct</FName>
    <Desc>public EventBuffer::__construct ( void )
Constructs EventBuffer object
</Desc>
    <FName>EventBuffer::copyout</FName>
    <Desc>public int EventBuffer::copyout ( string &$data , int $max_bytes )
Behaves just like EventBuffer::read() , but does not drain any data from the buffer. I.e. it copies the first max_bytes bytes from the front of the buffer into data . If there are fewer than max_bytes bytes available, the function copies all the bytes there are.
</Desc>
    <FName>EventBuffer::drain</FName>
    <Desc>public bool EventBuffer::drain ( int $len )
Behaves as EventBuffer::read() , except that it does not copy the data: it just removes it from the front of the buffer.
</Desc>
    <FName>EventBuffer::enableLocking</FName>
    <Desc>public void EventBuffer::enableLocking ( void )
Enable locking on an EventBuffer so that it can safely be used by multiple threads at the same time. When locking is enabled, the lock will be held when callbacks are invoked. This could result in deadlock if you aren't careful. Plan accordingly!
</Desc>
    <FName>EventBuffer::expand</FName>
    <Desc>public bool EventBuffer::expand ( int $len )
Alters the last chunk of memory in the buffer, or adds a new chunk, such that the buffer is now large enough to contain len bytes without any further allocations.
</Desc>
    <FName>EventBuffer::freeze</FName>
    <Desc>public bool EventBuffer::freeze ( bool $at_front )
Prevent calls that modify an event buffer from succeeding
</Desc>
    <FName>EventBuffer::lock</FName>
    <Desc>public void EventBuffer::lock ( void )
Acquires a lock on buffer. Can be used in pair with EventBuffer::unlock() to make a set of operations atomic, i.e. thread-safe. Note, it is not needed to lock buffers for individual operations. When locking is enabled(see EventBuffer::enableLocking() ), individual operations on event buffers are already atomic.
</Desc>
    <FName>EventBuffer::prepend</FName>
    <Desc>public bool EventBuffer::prepend ( string $data )
Prepend data to the front of the buffer.
</Desc>
    <FName>EventBuffer::prependBuffer</FName>
    <Desc>public bool EventBuffer::prependBuffer ( EventBuffer $buf )
Behaves as EventBuffer::addBuffer() , except that it moves data to the front of the buffer.
</Desc>
    <FName>EventBuffer::pullup</FName>
    <Desc>public string EventBuffer::pullup ( int $size )
"Linearizes" the first size bytes of the buffer, copying or moving them as needed to ensure that they are all contiguous and occupying the same chunk of memory. If size is negative, the function linearizes the entire buffer. 
Warning 
Calling EventBuffer::pullup() with a large size can be quite slow, since it potentially needs to copy the entire buffer's contents.
</Desc>
    <FName>EventBuffer::read</FName>
    <Desc>public string EventBuffer::read ( int $max_bytes )
Read the first max_bytes from the buffer and drain the bytes read. If more max_bytes are requested than are available in the buffer, it only extracts as many bytes as available.
</Desc>
    <FName>EventBuffer::readFrom</FName>
    <Desc>public int EventBuffer::read ( mixed $fd , int $howmuch )
Read data from the file specified by fd onto the end of the buffer.
</Desc>
    <FName>EventBuffer::readLine</FName>
    <Desc>public string EventBuffer::readLine ( int $eol_style )
Extracts a line from the front of the buffer and returns it in a newly allocated string. If there is not a whole line to read, the function returns NULL. The line terminator is not included in the copied string.
</Desc>
    <FName>EventBuffer::search</FName>
    <Desc>public mixed EventBuffer::search ( string $what [, int $start = -1 [, int $end = -1 ]] )
Scans the buffer for an occurrence of the string what . It returns numeric position of the string, or FALSE if the string was not found. 
If the start argument is provided, it points to the position at which the search should begin; otherwise, the search is performed from the start of the string. If end argument provided, the search is performed between start and end buffer positions.
</Desc>
    <FName>EventBuffer::searchEol</FName>
    <Desc>public mixed EventBuffer::searchEol ([ int $start = -1 [, int $eol_style = EventBuffer::EOL_ANY ]] )
Scans the buffer for an occurrence of an end of line specified by eol_style parameter . It returns numeric position of the string, or FALSE if the string was not found. 
If the start argument is provided, it represents the position at which the search should begin; otherwise, the search is performed from the start of the string. If end argument provided, the search is performed between start and end buffer positions.
</Desc>
    <FName>EventBuffer::substr</FName>
    <Desc>public string EventBuffer::substr ( int $start [, int $length ] )
Substracts up to length bytes of the buffer data beginning at start position.
</Desc>
    <FName>EventBuffer::unfreeze</FName>
    <Desc>public bool EventBuffer::unfreeze ( bool $at_front )
Re-enable calls that modify an event buffer.
</Desc>
    <FName>EventBuffer::unlock</FName>
    <Desc>public bool EventBuffer::unlock ( void )
Releases lock acquired by EventBuffer::lock() .
</Desc>
    <FName>EventBuffer::write</FName>
    <Desc>public int EventBuffer::write ( mixed $fd [, int $howmuch ] )
Write contents of the buffer to a file descriptor. The buffer will be drained after the bytes have been successfully written.
</Desc>
    <FName>EventBufferEvent::close</FName>
    <Desc>public void EventBufferEvent::close ( void )
Closes file descriptor associated with the current buffer event. 
This method may be used in cases when the EventBufferEvent::OPT_CLOSE_ON_FREE option is not appropriate.
</Desc>
    <FName>EventBufferEvent::connect</FName>
    <Desc>public bool EventBufferEvent::connect ( string $addr )
Connect buffer event's file descriptor to given address(optionally with port), or a UNIX domain socket. 
If socket is not assigned to the buffer event, this function allocates a new socket and makes it non-blocking internally. 
To resolve DNS names(asyncronously), use EventBufferEvent::connectHost() method.
</Desc>
    <FName>EventBufferEvent::connectHost</FName>
    <Desc>public bool EventBufferEvent::connectHost ( EventDnsBase $dns_base , string $hostname , int $port [, int $family = EventUtil::AF_UNSPEC ] )
Resolves the DNS name hostname, looking for addresses of type family ( EventUtil::AF_* constants). If the name resolution fails, it invokes the event callback with an error event. If it succeeds, it launches a connection attempt just as EventBufferEvent::connect() would. 
dns_base is optional. May be NULL, or an object created with EventDnsBase::__construct() . For asyncronous hostname resolving pass a valid event dns base resource. Otherwise the hostname resolving will block. 
Note: 
EventDnsBase is available only if Event configured --with-event-extra ( event_extra library, libevent protocol-specific functionality support including HTTP, DNS, and RPC ). 
Note: 
EventBufferEvent::connectHost() requires libevent-2.0.3-alpha or greater.
</Desc>
    <FName>EventBufferEvent::__construct</FName>
    <Desc>public EventBufferEvent::__construct ( EventBase $base [, mixed $socket = NULL [, int $options = 0 [, callable $readcb = NULL [, callable $writecb = NULL [, callable $eventcb = NULL ]]]]] )
Create a buffer event on a socket, stream or a file descriptor. Passing NULL to socket means that the socket should be created later, e.g. by means of EventBufferEvent::connect() .
</Desc>
    <FName>EventBufferEvent::createPair</FName>
    <Desc>public static array EventBufferEvent::createPair ( EventBase $base [, int $options = 0 ] )
Returns array of two EventBufferEvent objects connected to each other. All the usual options are supported, except for EventBufferEvent::OPT_CLOSE_ON_FREE , which has no effect, and EventBufferEvent::OPT_DEFER_CALLBACKS , which is always on.
</Desc>
    <FName>EventBufferEvent::disable</FName>
    <Desc>public bool EventBufferEvent::disable ( int $events )
Disable events Event::READ , Event::WRITE , or Event::READ | Event::WRITE on a buffer event.
</Desc>
    <FName>EventBufferEvent::enable</FName>
    <Desc>public bool EventBufferEvent::enable ( int $events )
Enable events Event::READ , Event::WRITE , or Event::READ | Event::WRITE on a buffer event.
</Desc>
    <FName>EventBufferEvent::free</FName>
    <Desc>public void EventBufferEvent::free ( void )
Free resources allocated by buffer event. 
Usually there is no need to call this method, since normally it is done within internal object destructors. However, sometimes we have a long-time script allocating lots of instances, or a script with a heavy memory usage, where we need to free resources as soon as possible. In such cases EventBufferEvent::free() may be used to protect the script against running up to the memory_limit .
</Desc>
    <FName>EventBufferEvent::getDnsErrorString</FName>
    <Desc>public string EventBufferEvent::getDnsErrorString ( void )
Returns string describing the last failed DNS lookup attempt made by EventBufferEvent::connectHost() , or an empty string, if there is no DNS error detected.
</Desc>
    <FName>EventBufferEvent::getEnabled</FName>
    <Desc>public int EventBufferEvent::getEnabled ( void )
Returns bitmask of events currently enabled on the buffer event
</Desc>
    <FName>EventBufferEvent::getInput</FName>
    <Desc>public EventBuffer EventBufferEvent::getInput ( void )
Returns underlying input buffer associated with current buffer event. An input buffer is a storage for data to read. 
Note, there is also input property of EventBufferEvent class.
</Desc>
    <FName>EventBufferEvent::getOutput</FName>
    <Desc>public EventBuffer EventBufferEvent::getOutput ( void )
Returns underlying output buffer associated with current buffer event. An output buffer is a storage for data to be written. 
Note, there is also output property of EventBufferEvent class.
</Desc>
    <FName>EventBufferEvent::read</FName>
    <Desc>public string EventBufferEvent::read ( int $size )
Removes up to size bytes from the input buffer. Returns a string of data read from the input buffer.
</Desc>
    <FName>EventBufferEvent::readBuffer</FName>
    <Desc>public bool EventBufferEvent::readBuffer ( EventBuffer $buf )
Drains the entire contents of the input buffer and places them into buf .
</Desc>
    <FName>EventBufferEvent::setCallbacks</FName>
    <Desc>public void EventBufferEvent::setCallbacks ( callable $readcb , callable $writecb , callable $eventcb [, string $arg ] )
Assigns read, write and event(status) callbacks.
</Desc>
    <FName>EventBufferEvent::setPriority</FName>
    <Desc>public bool EventBufferEvent::setPriority ( int $priority )
Assign a priority to a bufferevent 
Warning 
Only supported for socket buffer events
</Desc>
    <FName>EventBufferEvent::setTimeouts</FName>
    <Desc>public bool EventBufferEvent::setTimeouts ( float $timeout_read , float $timeout_write )
Set the read and write timeout for a buffer event
</Desc>
    <FName>EventBufferEvent::setWatermark</FName>
    <Desc>public void EventBufferEvent::setWatermark ( int $events , int $lowmark , int $highmark )
Adjusts the read watermarks, the write watermarks , or both, of a single buffer event. 
A buffer event watermark is an edge, a value specifying number of bytes to be read or written before callback is invoked. By default every read/write event triggers a callback invokation. See » Fast portable non-blocking network programming with Libevent: Callbacks and watermarks
</Desc>
    <FName>EventBufferEvent::sslError</FName>
    <Desc>public string EventBufferEvent::sslError ( void )
Returns most recent OpenSSL error reported on the buffer event. 
Note: 
This function is available only if Event is compiled with OpenSSL support.
</Desc>
    <FName>EventBufferEvent::sslFilter</FName>
    <Desc>public static EventBufferEvent EventBufferEvent::sslFilter ( EventBase $base , EventBufferEvent $underlying , EventSslContext $ctx , int $state [, int $options = 0 ] )
Create a new SSL buffer event to send its data over another buffer event 
Note: 
This function is available only if Event is compiled with OpenSSL support.
</Desc>
    <FName>EventBufferEvent::sslGetCipherInfo</FName>
    <Desc>public string EventBufferEvent::sslGetCipherInfo ( void )
Retrieves description of the current cipher by means of the SSL_CIPHER_description SSL API function (see SSL_CIPHER_get_name(3) man page). 
Note: 
This function is available only if Event is compiled with OpenSSL support.
</Desc>
    <FName>EventBufferEvent::sslGetCipherName</FName>
    <Desc>public string EventBufferEvent::sslGetCipherName ( void )
Retrieves name of cipher used by current SSL connection. 
Note: 
This function is available only if Event is compiled with OpenSSL support.
</Desc>
    <FName>EventBufferEvent::sslGetCipherVersion</FName>
    <Desc>public string EventBufferEvent::sslGetCipherVersion ( void )
Retrieves version of cipher used by current SSL connection. 
Note: 
This function is available only if Event is compiled with OpenSSL support.
</Desc>
    <FName>EventBufferEvent::sslGetProtocol</FName>
    <Desc>public string EventBufferEvent::sslGetProtocol ( void )
Returns the name of the protocol used for current SSL connection. 
Note: 
This function is available only if Event is compiled with OpenSSL support.
</Desc>
    <FName>EventBufferEvent::sslRenegotiate</FName>
    <Desc>public void EventBufferEvent::sslRenegotiate ( void )
Tells a bufferevent to begin SSL renegotiation. 
Warning 
Calling this function tells the SSL to renegotiate, and the buffer event to invoke appropriate callbacks. This is an advanced topic; this should be generally avoided unless one really knows what he/she does, especially since many SSL versions have had known security issues related to renegotiation.
</Desc>
    <FName>EventBufferEvent::sslSocket</FName>
    <Desc>public static EventBufferEvent EventBufferEvent::sslSocket ( EventBase $base , mixed $socket , EventSslContext $ctx , int $state [, int $options ] )
Creates a new SSL buffer event to send its data over an SSL on a socket.
</Desc>
    <FName>EventBufferEvent::write</FName>
    <Desc>public bool EventBufferEvent::write ( string $data )
Adds data to a buffer event's output buffer
</Desc>
    <FName>EventBufferEvent::writeBuffer</FName>
    <Desc>public bool EventBufferEvent::writeBuffer ( EventBuffer $buf )
Adds contents of the entire buffer to a buffer event's output buffer
</Desc>
    <FName>EventConfig::avoidMethod</FName>
    <Desc>public bool EventConfig::avoidMethod ( string $method )
Tells libevent to avoid specific event method(backend). See » Creating an event base .
</Desc>
    <FName>EventConfig::__construct</FName>
    <Desc>public EventConfig::__construct ( void )
Constructs EventConfig object which could be passed to EventBase::__construct() constructor.
</Desc>
    <FName>EventConfig::requireFeatures</FName>
    <Desc>public bool EventConfig::requireFeatures ( int $feature )
Enters a required event method feature that the application demands
</Desc>
    <FName>EventConfig::setMaxDispatchInterval</FName>
    <Desc>public void EventConfig::setMaxDispatchInterval ( int $max_interval , int $max_callbacks , int $min_priority )
Prevents priority inversion by limiting how many low-priority event callbacks can be invoked before checking for more high-priority events. 
Note: 
Available since libevent 2.1.0-alpha .
</Desc>
    <FName>EventDnsBase::addNameserverIp</FName>
    <Desc>public bool EventDnsBase::addNameserverIp ( string $ip )
Adds a nameserver to the evdns_base.
</Desc>
    <FName>EventDnsBase::addSearch</FName>
    <Desc>public void EventDnsBase::addSearch ( string $domain )
Adds a domain to the list of search domains
</Desc>
    <FName>EventDnsBase::clearSearch</FName>
    <Desc>public void EventDnsBase::clearSearch ( void )
Removes all current search suffixes from the DNS base; the EventDnsBase::addSearch() function adds a suffix.
</Desc>
    <FName>EventDnsBase::__construct</FName>
    <Desc>public EventDnsBase::__construct ( EventBase $base , bool $initialize )
Constructs EventDnsBase object.
</Desc>
    <FName>EventDnsBase::countNameservers</FName>
    <Desc>public int EventDnsBase::countNameservers ( void )
Gets the number of configured nameservers
</Desc>
    <FName>EventDnsBase::loadHosts</FName>
    <Desc>public bool EventDnsBase::loadHosts ( string $hosts )
Loads a hosts file (in the same format as /etc/hosts ) from hosts file.
</Desc>
    <FName>EventDnsBase::parseResolvConf</FName>
    <Desc>public bool EventDnsBase::parseResolvConf ( int $flags , string $filename )
Scans the resolv.conf-formatted file stored in filename, and read in all the options from it that are listed in flags
</Desc>
    <FName>EventDnsBase::setOption</FName>
    <Desc>public bool EventDnsBase::setOption ( string $option , string $value )
Set the value of a configuration option.
</Desc>
    <FName>EventDnsBase::setSearchNdots</FName>
    <Desc>public bool EventDnsBase::setSearchNdots ( int $ndots )
Set the 'ndots' parameter for searches. Sets the number of dots which, when found in a name, causes the first query to be without any search domain.
</Desc>
    <FName>EventHttp::accept</FName>
    <Desc>public bool EventHttp::accept ( mixed $socket )
Makes an HTTP server accept connections on the specified socket stream or resource. The socket should be ready to accept connections. 
Can be called multiple times to accept connections on different sockets. 
Note: 
To bind a socket, listen , and accept connections on the socket in s single call use EventHttp::bind() . EventHttp::accept() is needed only if one already has a socket ready to accept connections.
</Desc>
    <FName>EventHttp::addServerAlias</FName>
    <Desc>public bool EventHttp::addServerAlias ( string $alias )
Adds a server alias to the HTTP server object.
</Desc>
    <FName>EventHttp::bind</FName>
    <Desc>public void EventHttp::bind ( string $address , int $port )
Binds an HTTP server on the specified address and port. 
Can be called multiple times to bind the same HTTP server to multiple different ports.
</Desc>
    <FName>EventHttp::__construct</FName>
    <Desc>public EventHttp::__construct ( EventBase $base [, EventSslContext $ctx = NULL ] )
Constructs the HTTP server object.
</Desc>
    <FName>EventHttp::removeServerAlias</FName>
    <Desc>public bool EventHttp::removeServerAlias ( string $alias )
Removes server alias added with EventHttp::addServerAlias()
</Desc>
    <FName>EventHttp::setAllowedMethods</FName>
    <Desc>public void EventHttp::setAllowedMethods ( int $methods )
Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks 
If not supported they will generate a "405 Method not allowed" response. 
By default this includes the following methods: GET , POST , HEAD , PUT , DELETE . See EventHttpRequest::CMD_* constants.
</Desc>
    <FName>EventHttp::setCallback</FName>
    <Desc>public void EventHttp::setCallback ( string $path , string $cb [, string $arg ] )
Sets a callback for specified URI.
</Desc>
    <FName>EventHttp::setDefaultCallback</FName>
    <Desc>public void EventHttp::setDefaultCallback ( string $cb [, string $arg ] )
Sets default callback to handle requests that are not caught by specific callbacks
</Desc>
    <FName>EventHttp::setMaxBodySize</FName>
    <Desc>public void EventHttp::setMaxBodySize ( int $value )
Sets maximum request body size.
</Desc>
    <FName>EventHttp::setMaxHeadersSize</FName>
    <Desc>public void EventHttp::setMaxHeadersSize ( int $value )
Sets maximum HTTP header size.
</Desc>
    <FName>EventHttp::setTimeout</FName>
    <Desc>public void EventHttp::setTimeout ( int $value )
Sets the timeout for an HTTP request.
</Desc>
    <FName>EventHttpConnection::__construct</FName>
    <Desc>public EventHttpConnection::__construct ( EventBase $base , EventDnsBase $dns_base , string $address , int $port [, EventSslContext $ctx = NULL ] )
Constructs EventHttpConnection object.
</Desc>
    <FName>EventHttpConnection::getBase</FName>
    <Desc>public EventBase EventHttpConnection::getBase ( void )
Returns event base associated with the connection.
</Desc>
    <FName>EventHttpConnection::getPeer</FName>
    <Desc>public void EventHttpConnection::getPeer ( string &$address , int &$port )
Gets the remote address and port associated with the connection
</Desc>
    <FName>EventHttpConnection::makeRequest</FName>
    <Desc>public bool EventHttpConnection::makeRequest ( EventHttpRequest $req , int $type , string $uri )
Makes an HTTP request over the specified connection. type is one of EventHttpRequest::CMD_* constants.
</Desc>
    <FName>EventHttpConnection::setCloseCallback</FName>
    <Desc>public void EventHttpConnection::setCloseCallback ( callable $callback [, mixed $data ] )
Sets callback for connection close.
</Desc>
    <FName>EventHttpConnection::setLocalAddress</FName>
    <Desc>public void EventHttpConnection::setLocalAddress ( string $address )
Sets the IP address from which http connections are made.
</Desc>
    <FName>EventHttpConnection::setLocalPort</FName>
    <Desc>public void EventHttpConnection::setLocalPort ( int $port )
Sets the local port from which connections are made.
</Desc>
    <FName>EventHttpConnection::setMaxBodySize</FName>
    <Desc>public void EventHttpConnection::setMaxBodySize ( string $max_size )
Sets maximum body size for the connection.
</Desc>
    <FName>EventHttpConnection::setMaxHeadersSize</FName>
    <Desc>public void EventHttpConnection::setMaxHeadersSize ( string $max_size )
Sets maximum header size for the connection.
</Desc>
    <FName>EventHttpConnection::setRetries</FName>
    <Desc>public void EventHttpConnection::setRetries ( int $retries )
Sets the retry limit for the connection
</Desc>
    <FName>EventHttpConnection::setTimeout</FName>
    <Desc>public void EventHttpConnection::setTimeout ( int $timeout )
Sets the timeout for the connection
</Desc>
    <FName>EventHttpRequest::addHeader</FName>
    <Desc>public bool EventHttpRequest::addHeader ( string $key , string $value , int $type )
Adds an HTTP header to the headers of the request.
</Desc>
    <FName>EventHttpRequest::cancel</FName>
    <Desc>public void EventHttpRequest::cancel ( void )
Cancels a pending HTTP request. 
Cancels an ongoing HTTP request. The callback associated with this request is not executed and the request object is freed. If the request is currently being processed, e.g. it is ongoing, the corresponding EventHttpConnection object is going to get reset. 
A request cannot be canceled if its callback has executed already. A request may be canceled reentrantly from its chunked callback.
</Desc>
    <FName>EventHttpRequest::clearHeaders</FName>
    <Desc>public void EventHttpRequest::clearHeaders ( void )
Removes all output headers from the header list of the request.
</Desc>
    <FName>EventHttpRequest::closeConnection</FName>
    <Desc>public void EventHttpRequest::closeConnection ( void )
Closes HTTP connection associated with the request.
</Desc>
    <FName>EventHttpRequest::__construct</FName>
    <Desc>public EventHttpRequest::__construct ( callable $callback [, mixed $data = NULL ] )
Constructs EventHttpRequest object.
</Desc>
    <FName>EventHttpRequest::findHeader</FName>
    <Desc>public void EventHttpRequest::findHeader ( string $key , string $type )
Finds the value belonging a header.
</Desc>
    <FName>EventHttpRequest::free</FName>
    <Desc>public void EventHttpRequest::free ( void )
Frees the object and removes associated events.
</Desc>
    <FName>EventHttpRequest::getBufferEvent</FName>
    <Desc>public EventBufferEvent EventHttpRequest::closeConnection ( void )
Returns EventBufferEvent object which represents buffer event that the connection is using. 
Warning 
The reference counter of the returned object will be incremented by one to protect internal structures against premature destruction when the method is called from a user callback. So the EventBufferEvent object should be freed explicitly with EventBufferEvent::free() method. Otherwise memory will leak.
</Desc>
    <FName>EventHttpRequest::getCommand</FName>
    <Desc>public void EventHttpRequest::getCommand ( void )
Returns the request command, one of EventHttpRequest::CMD_* constants.
</Desc>
    <FName>EventHttpRequest::getConnection</FName>
    <Desc>public EventHttpConnection EventHttpRequest::closeConnection ( void )
Returns EventHttpConnection object which represents HTTP connection associated with the request. 
Warning 
Libevent API allows HTTP request objects to be not bound to any HTTP connection. Therefore we can't unambiguously associate EventHttpRequest with EventHttpConnection . Thus, we construct EventHttpConnection object on-the-fly. Having no information about the event base, DNS base and connection-close callback, we just leave these fields unset. 
EventHttpRequest::getConnection() method is usually useful when we need to set up a callback on connection close. See EventHttpConnection::setCloseCallback() .
</Desc>
    <FName>EventHttpRequest::getHost</FName>
    <Desc>public string EventHttpRequest::getHost ( void )
Returns the request host.
</Desc>
    <FName>EventHttpRequest::getInputBuffer</FName>
    <Desc>public EventBuffer EventHttpRequest::getInputBuffer ( void )
Returns the input buffer.
</Desc>
    <FName>EventHttpRequest::getInputHeaders</FName>
    <Desc>public array EventHttpRequest::getInputHeaders ( void )
Returns associative array of the input headers.
</Desc>
    <FName>EventHttpRequest::getOutputBuffer</FName>
    <Desc>public EventBuffer EventHttpRequest::getOutputBuffer ( void )
Returns the output buffer of the request.
</Desc>
    <FName>EventHttpRequest::getOutputHeaders</FName>
    <Desc>public void EventHttpRequest::getOutputHeaders ( void )
Returns associative array of the output headers.
</Desc>
    <FName>EventHttpRequest::getResponseCode</FName>
    <Desc>public int EventHttpRequest::getResponseCode ( void )
Returns the response code.
</Desc>
    <FName>EventHttpRequest::getUri</FName>
    <Desc>public string EventHttpRequest::getUri ( void )
Returns the request URI
</Desc>
    <FName>EventHttpRequest::removeHeader</FName>
    <Desc>public void EventHttpRequest::removeHeader ( string $key , string $type )
Removes an HTTP header from the headers of the request.
</Desc>
    <FName>EventHttpRequest::sendError</FName>
    <Desc>public void EventHttpRequest::sendError ( int $error [, string $reason = NULL ] )
Send an HTML error message to the client.
</Desc>
    <FName>EventHttpRequest::sendReply</FName>
    <Desc>public void EventHttpRequest::sendReply ( int $code , string $reason [, EventBuffer $buf ] )
Send an HTML reply to the client. The body of the reply consists of data in optional buf parameter.
</Desc>
    <FName>EventHttpRequest::sendReplyChunk</FName>
    <Desc>public void EventHttpRequest::sendReplyChunk ( EventBuffer $buf )
Send another data chunk as part of an ongoing chunked reply. After calling this method buf will be empty.
</Desc>
    <FName>EventHttpRequest::sendReplyEnd</FName>
    <Desc>public void EventHttpRequest::sendReplyEnd ( void )
Complete a chunked reply, freeing the request as appropriate.
</Desc>
    <FName>EventHttpRequest::sendReplyStart</FName>
    <Desc>public void EventHttpRequest::sendReplyStart ( int $code , string $reason )
Initiate a reply that uses Transfer-Encoding chunked . 
This allows the caller to stream the reply back to the client and is useful when either not all of the reply data is immediately available or when sending very large replies. 
The caller needs to supply data chunks with EventHttpRequest::sendReplyChunk() and complete the reply by calling EventHttpRequest::sendReplyEnd() .
</Desc>
    <FName>EventListener::__construct</FName>
    <Desc>public EventListener::__construct ( EventBase $base , callable $cb , mixed $data , int $flags , int $backlog , mixed $target )
Creates new connection listener associated with an event base.
</Desc>
    <FName>EventListener::disable</FName>
    <Desc>public bool EventListener::disable ( void )
Disables an event connect listener object
</Desc>
    <FName>EventListener::enable</FName>
    <Desc>public bool EventListener::enable ( void )
Enables an event connect listener object
</Desc>
    <FName>EventListener::getBase</FName>
    <Desc>public void EventListener::getBase ( void )
Returns event base associated with the event listener.
</Desc>
    <FName>EventListener::getSocketName</FName>
    <Desc>public static bool EventListener::getSocketName ( string &$address [, mixed &$port ] )
Retreives the current address to which the listener's socket is bound.
</Desc>
    <FName>EventListener::setCallback</FName>
    <Desc>public void EventListener::setCallback ( callable $cb [, mixed $arg = NULL ] )
Adjust event connect listener's callback and optionally the callback argument.
</Desc>
    <FName>EventListener::setErrorCallback</FName>
    <Desc>public void EventListener::setErrorCallback ( string $cb )
Set event listener's error callback
</Desc>
    <FName>EventSslContext::__construct</FName>
    <Desc>public EventSslContext::__construct ( string $method , string $options )
Creates SSL context holding pointer to SSL_CTX (see the system manual).
</Desc>
    <FName>EventUtil::__construct</FName>
    <Desc>abstract public EventUtil::__construct ( void )
EventUtil is a singleton. Therefore the constructor is abstract, and it is impossible to create objects based on this class.
</Desc>
    <FName>EventUtil::getLastSocketErrno</FName>
    <Desc>public static int EventUtil::getLastSocketErrno ([ mixed $socket = NULL ] )
Returns the most recent socket error number( errno ).
</Desc>
    <FName>EventUtil::getLastSocketError</FName>
    <Desc>public static string EventUtil::getLastSocketError ([ mixed $socket ] )
Returns the most recent socket error.
</Desc>
    <FName>EventUtil::getSocketFd</FName>
    <Desc>public static int EventUtil::getSocketFd ( mixed $socket )
Returns numeric file descriptor of a socket or stream specified by socket argument just like the Event extension does it internally for all methods accepting socket resource or stream.
</Desc>
    <FName>EventUtil::getSocketName</FName>
    <Desc>public static bool EventUtil::getSocketName ( mixed $socket , string &$address [, mixed &$port ] )
Retreives the current address to which the socket is bound.
</Desc>
    <FName>EventUtil::setSocketOption</FName>
    <Desc>public static bool EventUtil::setSocketOption ( mixed $socket , int $level , int $optname , mixed $optval )
Sets socket options.
</Desc>
    <FName>EventUtil::sslRandPoll</FName>
    <Desc>public static void EventUtil::sslRandPoll ( void )
Generates entropy by means of OpenSSL's RAND_poll() (see the system manual).
</Desc>
    <FName>EvFork::__construct</FName>
    <Desc>public EvFork::__construct ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Constructs the EvFork watcher object and starts the watcher automatically.
</Desc>
    <FName>EvFork::createStopped</FName>
    <Desc>final public static object EvFork::createStopped ( string $callback [, string $data [, string $priority ]] )
The same as EvFork::__construct() , but doesn't start the watcher automatically.
</Desc>
    <FName>EvIdle::__construct</FName>
    <Desc>public EvIdle::__construct ( callable $callback [, mixed $data [, int $priority ]] )
Constructs the EvIdle watcher object and starts the watcher automatically.
</Desc>
    <FName>EvIdle::createStopped</FName>
    <Desc>final public static object EvIdle::createStopped ( string $callback [, mixed $data [, int $priority ]] )
The same as EvIdle::__construct() , but doesn't start the watcher automatically.
</Desc>
    <FName>EvIo::__construct</FName>
    <Desc>public EvIo::__construct ( mixed $fd , int $events , callable $callback [, mixed $data [, int $priority ]] )
Constructs EvIo watcher object and starts the watcher automatically.
</Desc>
    <FName>EvIo::createStopped</FName>
    <Desc>final public static EvIo EvIo::createStopped ( mixed $fd , int $events , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
The same as EvIo::__construct() , but doesn't start the watcher automatically.
</Desc>
    <FName>EvIo::set</FName>
    <Desc>public void EvIo::set ( mixed $fd , int $events )
Configures the EvIo watcher
</Desc>
    <FName>EvLoop::backend</FName>
    <Desc>public int EvLoop::backend ( void )
The same as Ev::backend() , but for the loop instance.
</Desc>
    <FName>EvLoop::check</FName>
    <Desc>final public EvCheck EvLoop::check ( string $callback [, string $data [, string $priority ]] )
Creates EvCheck object associated with the current event loop instance.
</Desc>
    <FName>EvLoop::child</FName>
    <Desc>final public EvChild EvLoop::child ( string $pid , string $trace , string $callback [, string $data [, string $priority ]] )
Creates EvChild object associated with the current event loop.
</Desc>
    <FName>EvLoop::__construct</FName>
    <Desc>public EvLoop::__construct ([ int $flags [, mixed $data = NULL [, float $io_interval = 0.0 [, float $timeout_interval = 0.0 ]]]] )
Constructs the event loop object.
</Desc>
    <FName>EvLoop::defaultLoop</FName>
    <Desc>public static EvLoop EvLoop::defaultLoop ([ int $flags = Ev::FLAG_AUTO [, mixed $data = NULL [, float $io_interval = 0. [, float $timeout_interval = 0. ]]]] )
If the default event loop is not created, EvLoop::defaultLoop() creates it with the specified parameters. Otherwise, it just returns the object representing previously created instance ignoring all the parameters.
</Desc>
    <FName>EvLoop::embed</FName>
    <Desc>final public EvEmbed EvLoop::embed ( string $other [, string $callback [, string $data [, string $priority ]]] )
Creates an instance of EvEmbed watcher associated with the current EvLoop object.
</Desc>
    <FName>EvLoop::fork</FName>
    <Desc>final public EvFork EvLoop::fork ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Creates EvFork watcher object associated with the current event loop instance
</Desc>
    <FName>EvLoop::idle</FName>
    <Desc>final public EvIdle EvLoop::idle ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Creates EvIdle watcher object associated with the current event loop instance
</Desc>
    <FName>EvLoop::invokePending</FName>
    <Desc>public void EvLoop::invokePending ( void )
Invoke all pending watchers while resetting their pending state.
</Desc>
    <FName>EvLoop::io</FName>
    <Desc>final public EvIo EvLoop::io ( mixed $fd , int $events , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Create EvIo watcher object associated with the current event loop instance.
</Desc>
    <FName>EvLoop::loopFork</FName>
    <Desc>public void EvLoop::loopFork ( void )
Must be called after a fork in the child, before entering or continuing the event loop. An alternative is to use Ev::FLAG_FORKCHECK which calls this function automatically, at some performance loss (refer to the » libev documentation ).
</Desc>
    <FName>EvLoop::now</FName>
    <Desc>public float EvLoop::now ( void )
Returns the current "event loop time", which is the time the event loop received events and started processing them. This timestamp does not change as long as callbacks are being processed, and this is also the base time used for relative timers. You can treat it as the timestamp of the event occurring(or more correctly, libev finding out about it).
</Desc>
    <FName>EvLoop::nowUpdate</FName>
    <Desc>public void EvLoop::nowUpdate ( void )
Establishes the current time by querying the kernel, updating the time returned by EvLoop::now() in the progress. This is a costly operation and is usually done automatically within EvLoop::run() .
</Desc>
    <FName>EvLoop::periodic</FName>
    <Desc>final public EvPeriodic EvLoop::periodic ( float $offset , float $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Creates EvPeriodic watcher object associated with the current event loop instance
</Desc>
    <FName>EvLoop::prepare</FName>
    <Desc>final public EvPrepare EvLoop::prepare ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Creates EvPrepare watcher object associated with the current event loop instance
</Desc>
    <FName>EvLoop::resume</FName>
    <Desc>public void EvLoop::resume ( void )
EvLoop::suspend() and EvLoop::resume() methods suspend and resume a loop correspondingly.
</Desc>
    <FName>EvLoop::run</FName>
    <Desc>public void EvLoop::run ([ int $flags = 0 ] )
Begin checking for events and calling callbacks for the current event loop. Returns when a callback calls Ev::stop() method, or the flags are nonzero(in which case the return value is true) or when there are no active watchers which reference the loop( EvWatcher::keepalive() is TRUE), in which case the return value will be FALSE. The return value can generally be interpreted as if TRUE, there is more work left to do .
</Desc>
    <FName>EvLoop::signal</FName>
    <Desc>final public EvSignal EvLoop::signal ( int $signum , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Creates EvSignal watcher object associated with the current event loop instance
</Desc>
    <FName>EvLoop::stat</FName>
    <Desc>final public EvStat EvLoop::stat ( string $path , float $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Creates EvStat watcher object associated with the current event loop instance
</Desc>
    <FName>EvLoop::stop</FName>
    <Desc>public void EvLoop::stop ([ int $how ] )
Stops the event loop
</Desc>
    <FName>EvLoop::suspend</FName>
    <Desc>public void EvLoop::suspend ( void )
EvLoop::suspend() and EvLoop::resume() methods suspend and resume a loop correspondingly.
</Desc>
    <FName>EvLoop::timer</FName>
    <Desc>final public EvTimer EvLoop::timer ( float $after , float $repeat , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Creates EvTimer watcher object associated with the current event loop instance
</Desc>
    <FName>EvLoop::verify</FName>
    <Desc>public void EvLoop::verify ( void )
Performs internal consistency checks(for debugging libev ) and abort the program if any data structures were found to be corrupted.
</Desc>
    <FName>EvPeriodic::again</FName>
    <Desc>public void EvPeriodic::again ( void )
Simply stops and restarts the periodic watcher again. This is only useful when attributes are changed.
</Desc>
    <FName>EvPeriodic::at</FName>
    <Desc>public float EvPeriodic::at ( void )
When the watcher is active, returns the absolute time that this watcher is supposed to trigger next. This is not the same as the offset argument to EvPeriodic::set() or EvPeriodic::__construct() , but indeed works even in interval mode.
</Desc>
    <FName>EvPeriodic::__construct</FName>
    <Desc>public EvPeriodic::__construct ( float $offset , string $interval , callable $reschedule_cb , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Constructs EvPeriodic watcher object and starts it automatically. EvPeriodic::createStopped() method creates stopped periodic watcher.
</Desc>
    <FName>EvPeriodic::createStopped</FName>
    <Desc>final public static EvPeriodic EvPeriodic::createStopped ( float $offset , float $interval , callable $reschedule_cb , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Create EvPeriodic object. Unlike EvPeriodic::__construct() this method doesn't start the watcher automatically.
</Desc>
    <FName>EvPeriodic::set</FName>
    <Desc>public void EvPeriodic::set ( float $offset , float $interval )
(Re-)Configures EvPeriodic watcher
</Desc>
    <FName>EvPrepare::__construct</FName>
    <Desc>public EvPrepare::__construct ( string $callback [, string $data [, string $priority ]] )
Constructs EvPrepare watcher object. And starts the watcher automatically. If need a stopped watcher consider using EvPrepare::createStopped()
</Desc>
    <FName>EvPrepare::createStopped</FName>
    <Desc>final public static EvPrepare EvPrepare::createStopped ( callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Creates a stopped instance of EvPrepare watcher. Unlike EvPrepare::__construct() , this method doesn' start the watcher automatically.
</Desc>
    <FName>EvSignal::__construct</FName>
    <Desc>public EvSignal::__construct ( int $signum , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Constructs EvSignal watcher object and starts it automatically. For a stopped periodic watcher consider using EvSignal::createStopped() method.
</Desc>
    <FName>EvSignal::createStopped</FName>
    <Desc>final public static EvSignal EvSignal::createStopped ( int $signum , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Create stopped EvSignal watcher object. Unlike EvSignal::__construct() , this method does't start the watcher automatically.
</Desc>
    <FName>EvSignal::set</FName>
    <Desc>public void EvSignal::set ( int $signum )
Configures the watcher.
</Desc>
    <FName>EvStat::attr</FName>
    <Desc>public array EvStat::attr ( void )
Returns array of the values most recently detected by Ev
</Desc>
    <FName>EvStat::__construct</FName>
    <Desc>public EvStat::__construct ( string $path , float $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Constructs EvStat watcher object and starts the watcher automatically.
</Desc>
    <FName>EvStat::createStopped</FName>
    <Desc>final public static void EvStat::createStopped ( string $path , float $interval , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Creates EvStat watcher object, but doesn't start it automatically(unlike EvStat::__construct() ).
</Desc>
    <FName>EvStat::prev</FName>
    <Desc>public void EvStat::prev ( void )
Just like EvStat::attr() , but returns the previous set of values.
</Desc>
    <FName>EvStat::set</FName>
    <Desc>public void EvStat::set ( string $path , float $interval )
Configures the watcher.
</Desc>
    <FName>EvStat::stat</FName>
    <Desc>public bool EvStat::stat ( void )
Initiates the stat call(updates internal cache). It stats(using lstat ) the path specified in the watcher and sets to the values found.
</Desc>
    <FName>EvTimer::again</FName>
    <Desc>public void EvTimer::again ( void )
This will act as if the timer timed out and restart it again if it is repeating. The exact semantics are: 
if the timer is pending, its pending status is cleared. 
if the timer is started but non-repeating, stop it (as if it timed out). 
if the timer is repeating, either start it if necessary (with the repeat value), or reset the running timer to the repeat value.
</Desc>
    <FName>EvTimer::__construct</FName>
    <Desc>public EvTimer::__construct ( float $after , float $repeat , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Constructs an EvTimer watcher object.
</Desc>
    <FName>EvTimer::createStopped</FName>
    <Desc>final public static EvTimer EvTimer::createStopped ( float $after , float $repeat , callable $callback [, mixed $data = NULL [, int $priority = 0 ]] )
Creates EvTimer stopped watcher object. Unlike EvTimer::__construct() , this method doesn't start the watcher automatically.
</Desc>
    <FName>EvTimer::set</FName>
    <Desc>public void EvTimer::set ( float $after , float $repeat )
Configures the watcher
</Desc>
    <FName>EvWatcher::clear</FName>
    <Desc>public int EvWatcher::clear ( void )
If the watcher is pending, this method clears its pending status and returns its revents bitset(as if its callback was invoked). If the watcher isn't pending it does nothing and returns 0 . 
Sometimes it can be useful to "poll" a watcher instead of waiting for its callback to be invoked, which can be accomplished with this function.
</Desc>
    <FName>EvWatcher::__construct</FName>
    <Desc>abstract public EvWatcher::__construct ( void )
EvWatcher::__construct() is an abstract constructor of a watcher object implemented in the derived classes. 
</Desc>
    <FName>EvWatcher::feed</FName>
    <Desc>public void EvWatcher::feed ( int $revents )
Feeds the given revents set into the event loop, as if the specified event had happened for the watcher.
</Desc>
    <FName>EvWatcher::getLoop</FName>
    <Desc>public EvLoop EvWatcher::getLoop ( void )
Returns the loop responsible for the watcher
</Desc>
    <FName>EvWatcher::invoke</FName>
    <Desc>public void EvWatcher::invoke ( int $revents )
Invokes the watcher callback with the given received events bit mask.
</Desc>
    <FName>EvWatcher::keepalive</FName>
    <Desc>public bool EvWatcher::keepalive ([ bool $value ] )
Configures whether to keep the loop from returning. With keepalive value set to FALSE the watcher won't keep Ev::run() / EvLoop::run() from returning even though the watcher is active. 
Watchers have keepalive value TRUE by default. 
Clearing keepalive status is useful when returning from Ev::run() / EvLoop::run() just because of the watcher is undesirable. It could be a long running UDP socket watcher or so.
</Desc>
    <FName>EvWatcher::setCallback</FName>
    <Desc>public void EvWatcher::setCallback ( callable $callback )
Sets new callback for the watcher
</Desc>
    <FName>EvWatcher::start</FName>
    <Desc>public void EvWatcher::start ( void )
Marks the watcher as active. Note that only active watchers will receive events.
</Desc>
    <FName>EvWatcher::stop</FName>
    <Desc>public void EvWatcher::stop ( void )
Marks the watcher as inactive. Note that only active watchers will receive events.
</Desc>
    <FName>Exception::__clone</FName>
    <Desc>final private void Exception::__clone ( void )
Tries to clone the Exception, which results in Fatal error.
</Desc>
    <FName>Exception::__construct</FName>
    <Desc>public Exception::__construct ([ string $message = "" [, int $code = 0 [, Throwable $previous = NULL ]]] )
Constructs the Exception.
</Desc>
    <FName>Exception::getCode</FName>
    <Desc>final public mixed Exception::getCode ( void )
Returns the Exception code.
</Desc>
    <FName>Exception::getFile</FName>
    <Desc>final public string Exception::getFile ( void )
Get the name of the file in which the exception was created.
</Desc>
    <FName>Exception::getLine</FName>
    <Desc>final public int Exception::getLine ( void )
Get line number where the exception was created.
</Desc>
    <FName>Exception::getMessage</FName>
    <Desc>final public string Exception::getMessage ( void )
Returns the Exception message.
</Desc>
    <FName>Exception::getPrevious</FName>
    <Desc>final public Throwable Exception::getPrevious ( void )
Returns previous exception (the third parameter of Exception::__construct()).
</Desc>
    <FName>Exception::getTrace</FName>
    <Desc>final public array Exception::getTrace ( void )
Returns the Exception stack trace.
</Desc>
    <FName>Exception::getTraceAsString</FName>
    <Desc>final public string Exception::getTraceAsString ( void )
Returns the Exception stack trace as a string.
</Desc>
    <FName>Exception::__toString</FName>
    <Desc>public string Exception::__toString ( void )
Returns the string representation of the exception.
</Desc>
    <FName>FANNConnection::__construct</FName>
    <Desc>public FANNConnection::__construct ( int $from_neuron , int $to_neuron , float $weight )
Create new connection and initialize its params. After creating the connection, only weight can be changed.
</Desc>
    <FName>FANNConnection::getFromNeuron</FName>
    <Desc>public int FANNConnection::getFromNeuron ( void )
Returns the postions of starting neuron.
</Desc>
    <FName>FANNConnection::getToNeuron</FName>
    <Desc>public int FANNConnection::getToNeuron ( void )
Returns the postions of terminating neuron.
</Desc>
    <FName>FANNConnection::getWeight</FName>
    <Desc>public void FANNConnection::getWeight ( void )
Returns the connection weight.
</Desc>
    <FName>FANNConnection::setWeight</FName>
    <Desc>public void FANNConnection::setWeight ( float $weight )
Sets the connection weight. 
This method is different than fann_set_weight(). It does not update the weight value in the network. The network value is updated only after calling fann_set_weight_array().
</Desc>
    <FName>FilesystemIterator::__construct</FName>
    <Desc>public FilesystemIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ] )
Constructs a new filesystem iterator from the path.
</Desc>
    <FName>FilesystemIterator::current</FName>
    <Desc>public mixed FilesystemIterator::current ( void )
Get file information of the current element.
</Desc>
    <FName>FilesystemIterator::getFlags</FName>
    <Desc>public int FilesystemIterator::getFlags ( void )
Gets the handling flags, as set in FilesystemIterator::__construct() or FilesystemIterator::setFlags().
</Desc>
    <FName>FilesystemIterator::key</FName>
    <Desc>public string FilesystemIterator::key ( void )
</Desc>
    <FName>FilesystemIterator::next</FName>
    <Desc>public void FilesystemIterator::next ( void )
Move to the next file.
</Desc>
    <FName>FilesystemIterator::rewind</FName>
    <Desc>public void FilesystemIterator::rewind ( void )
Rewinds the directory back to the start.
</Desc>
    <FName>FilesystemIterator::setFlags</FName>
    <Desc>public void FilesystemIterator::setFlags ([ int $flags ] )
Sets handling flags.
</Desc>
    <FName>FilterIterator::accept</FName>
    <Desc>public abstract bool FilterIterator::accept ( void )
Returns whether the current element of the iterator is acceptable through this filter.
</Desc>
    <FName>FilterIterator::__construct</FName>
    <Desc>public FilterIterator::__construct ( Iterator $iterator )
Constructs a new FilterIterator, which consists of a passed in iterator with filters applied to it. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>FilterIterator::current</FName>
    <Desc>public mixed FilterIterator::current ( void )
Warning
This function is currently not documented; only its argument list is available. 
Get the current element value.
</Desc>
    <FName>FilterIterator::getInnerIterator</FName>
    <Desc>public Iterator FilterIterator::getInnerIterator ( void )
Warning
This function is currently not documented; only its argument list is available. 
Get the inner iterator.
</Desc>
    <FName>FilterIterator::key</FName>
    <Desc>public mixed FilterIterator::key ( void )
Warning
This function is currently not documented; only its argument list is available. 
Get the current key.
</Desc>
    <FName>FilterIterator::next</FName>
    <Desc>public void FilterIterator::next ( void )
Warning
This function is currently not documented; only its argument list is available. 
Move the iterator forward.
</Desc>
    <FName>FilterIterator::rewind</FName>
    <Desc>public void FilterIterator::rewind ( void )
Warning
This function is currently not documented; only its argument list is available. 
Rewind the iterator.
</Desc>
    <FName>FilterIterator::valid</FName>
    <Desc>public bool FilterIterator::valid ( void )
Warning
This function is currently not documented; only its argument list is available. 
Checks whether the current element is valid.
</Desc>
    <FName>finfo::buffer</FName>
    <Desc>public string finfo::buffer ( string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )
This function is an alias of: finfo_buffer() 
</Desc>
    <FName>finfo::__construct</FName>
    <Desc>public finfo::__construct ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )
This function is an alias of: finfo_open() 
</Desc>
    <FName>finfo::file</FName>
    <Desc>public string finfo::file ( string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )
This function is an alias of: finfo_file() 
</Desc>
    <FName>finfo::set_flags</FName>
    <Desc>public bool finfo::set_flags ( int $options )
This function is an alias of: finfo_set_flags() 
</Desc>
    <FName>abs</FName>
    <Desc>number abs ( mixed $number )
Returns the absolute value of number.
</Desc>
    <FName>acos</FName>
    <Desc>float acos ( float $arg )
Returns the arc cosine of arg in radians. acos() is the inverse function of cos(), which means that a==cos(acos(a)) for every value of a that is within acos()' range.
</Desc>
    <FName>acosh</FName>
    <Desc>float acosh ( float $arg )
Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg.
</Desc>
    <FName>addcslashes</FName>
    <Desc>string addcslashes ( string $str , string $charlist )
Returns a string with backslashes before characters that are listed in charlist parameter.
</Desc>
    <FName>addslashes</FName>
    <Desc>string addslashes ( string $str )
Returns a string with backslashes added before characters that need to be escaped. These characters are: 
single quote (') 
double quote (") 
backslash (\) 
NUL (the NUL byte) 
A use case of addslashes() is escaping the aforementioned characters in a string that is to be evaluated by PHP: 
<?php
$str = "O'Reilly?";
eval("echo '" . addslashes($str) . "';");
?> 
Prior to PHP 5.4.0, the PHP directive magic_quotes_gpc was on by default and it essentially ran addslashes() on all GET, POST and COOKIE data. addslashes() must not be used on strings that have already been escaped with magic_quotes_gpc, as the strings will be double escaped. get_magic_quotes_gpc() can be used to check if magic_quotes_gpc is on. 
The addslashes() is sometimes incorrectly used to try to prevent SQL Injection. Instead, database-specific escaping functions and/or prepared statements should be used.
</Desc>
    <FName>apache_child_terminate</FName>
    <Desc>bool apache_child_terminate ( void )
apache_child_terminate() will register the Apache process executing the current PHP request for termination once execution of PHP code is completed. It may be used to terminate a process after a script with high memory consumption has been run as memory will usually only be freed internally but not given back to the operating system.
</Desc>
    <FName>apache_get_modules</FName>
    <Desc>array apache_get_modules ( void )
Get a list of loaded Apache modules.
</Desc>
    <FName>apache_get_version</FName>
    <Desc>string apache_get_version ( void )
Fetch the Apache version.
</Desc>
    <FName>apache_getenv</FName>
    <Desc>string apache_getenv ( string $variable [, bool $walk_to_top = FALSE ] )
Retrieve an Apache environment variable specified by variable. 
This function requires Apache 2 otherwise it's undefined.
</Desc>
    <FName>apache_lookup_uri</FName>
    <Desc>object apache_lookup_uri ( string $filename )
This performs a partial request for a URI. It goes just far enough to obtain all the important information about the given resource. 
This function is supported when PHP is installed as an Apache module or by the NSAPI server module in Netscape/iPlanet/SunONE webservers.
</Desc>
    <FName>apache_note</FName>
    <Desc>string apache_note ( string $note_name [, string $note_value = "" ] )
This function is a wrapper for Apache's table_get and table_set. It edits the table of notes that exists during a request. The table's purpose is to allow Apache modules to communicate. 
The main use for apache_note() is to pass information from one module to another within the same request.
</Desc>
    <FName>apache_request_headers</FName>
    <Desc>array apache_request_headers ( void )
Fetches all HTTP request headers from the current request.
</Desc>
    <FName>apache_reset_timeout</FName>
    <Desc>bool apache_reset_timeout ( void )
apache_reset_timeout() resets the Apache write timer, which defaults to 300 seconds. With set_time_limit(0); ignore_user_abort(true) and periodic apache_reset_timeout() calls, Apache can theoretically run forever. 
This function requires Apache 1.
</Desc>
    <FName>apache_response_headers</FName>
    <Desc>array apache_response_headers ( void )
Fetch all HTTP response headers.
</Desc>
    <FName>apache_setenv</FName>
    <Desc>bool apache_setenv ( string $variable , string $value [, bool $walk_to_top = FALSE ] )
apache_setenv() sets the value of the Apache environment variable specified by variable. 
Note: 
When setting an Apache environment variable, the corresponding $_SERVER variable is not changed.
</Desc>
    <FName>apc_add</FName>
    <Desc>bool apc_add ( string $key , mixed $var [, int $ttl = 0 ] )
array apc_add ( array $values [, mixed $unused = NULL [, int $ttl = 0 ]] )
Caches a variable in the data store, only if it's not already stored. 
Note: Unlike many other mechanisms in PHP, variables stored using apc_add() will persist between requests (until the value is removed from the cache).
</Desc>
    <FName>apc_bin_dump</FName>
    <Desc>string apc_bin_dump ([ array $files = NULL [, array $user_vars = NULL ]] )
Returns a binary dump of the given files and user variables from the APC cache. A NULL for files or user_vars signals a dump of every entry, whereas array() will dump nothing.
</Desc>
    <FName>apc_bin_dumpfile</FName>
    <Desc>int apc_bin_dumpfile ( array $files , array $user_vars , string $filename [, int $flags = 0 [, resource $context = NULL ]] )
Outputs a binary dump of the given files and user variables from the APC cache to the named file.
</Desc>
    <FName>apc_bin_load</FName>
    <Desc>bool apc_bin_load ( string $data [, int $flags = 0 ] )
Loads the given binary dump into the APC file/user cache.
</Desc>
    <FName>apc_bin_loadfile</FName>
    <Desc>bool apc_bin_loadfile ( string $filename [, resource $context = NULL [, int $flags = 0 ]] )
Loads a binary dump from a file into the APC file/user cache.
</Desc>
    <FName>apc_cache_info</FName>
    <Desc>array apc_cache_info ([ string $cache_type = "" [, bool $limited = FALSE ]] )
Retrieves cached information and meta-data from APC's data store.
</Desc>
    <FName>apc_cas</FName>
    <Desc>bool apc_cas ( string $key , int $old , int $new )
apc_cas() updates an already existing integer value if the old parameter matches the currently stored value with the value of the new parameter.
</Desc>
    <FName>apc_clear_cache</FName>
    <Desc>bool apc_clear_cache ([ string $cache_type = "" ] )
Clears the user/system cache.
</Desc>
    <FName>apc_compile_file</FName>
    <Desc>mixed apc_compile_file ( string $filename [, bool $atomic = TRUE ] )
Stores a file in the bytecode cache, bypassing all filters.
</Desc>
    <FName>apc_dec</FName>
    <Desc>int apc_dec ( string $key [, int $step = 1 [, bool &$success ]] )
Decreases a stored integer value.
</Desc>
    <FName>apc_define_constants</FName>
    <Desc>bool apc_define_constants ( string $key , array $constants [, bool $case_sensitive = TRUE ] )
define() is notoriously slow. Since the main benefit of APC is to increase the performance of scripts/applications, this mechanism is provided to streamline the process of mass constant definition. However, this function does not perform as well as anticipated. 
For a better-performing solution, try the » hidef extension from PECL. 
Note: To remove a set of stored constants (without clearing the entire cache), an empty array may be passed as the constants parameter, effectively clearing the stored value(s).
</Desc>
    <FName>apc_delete_file</FName>
    <Desc>mixed apc_delete_file ( mixed $keys )
Deletes the given files from the opcode cache.
</Desc>
    <FName>apc_delete</FName>
    <Desc>mixed apc_delete ( string $key )
Removes a stored variable from the cache.
</Desc>
    <FName>apc_exists</FName>
    <Desc>mixed apc_exists ( mixed $keys )
Checks if one or more APC keys exist.
</Desc>
    <FName>apc_fetch</FName>
    <Desc>mixed apc_fetch ( mixed $key [, bool &$success ] )
Fetchs a stored variable from the cache.
</Desc>
    <FName>apc_inc</FName>
    <Desc>int apc_inc ( string $key [, int $step = 1 [, bool &$success ]] )
Increases a stored number.
</Desc>
    <FName>apc_load_constants</FName>
    <Desc>bool apc_load_constants ( string $key [, bool $case_sensitive = TRUE ] )
Loads a set of constants from the cache.
</Desc>
    <FName>apc_sma_info</FName>
    <Desc>array apc_sma_info ([ bool $limited = FALSE ] )
Retrieves APC's Shared Memory Allocation information.
</Desc>
    <FName>apc_store</FName>
    <Desc>bool apc_store ( string $key , mixed $var [, int $ttl = 0 ] )
array apc_store ( array $values [, mixed $unused = NULL [, int $ttl = 0 ]] )
Cache a variable in the data store. 
Note: Unlike many other mechanisms in PHP, variables stored using apc_store() will persist between requests (until the value is removed from the cache).
</Desc>
    <FName>apcu_add</FName>
    <Desc>bool apcu_add ( string $key , mixed $var [, int $ttl = 0 ] )
array apcu_add ( array $values [, mixed $unused = NULL [, int $ttl = 0 ]] )
Caches a variable in the data store, only if it's not already stored. 
Note: Unlike many other mechanisms in PHP, variables stored using apcu_add() will persist between requests (until the value is removed from the cache).
</Desc>
    <FName>apcu_cache_info</FName>
    <Desc>array apcu_cache_info ([ bool $limited = FALSE ] )
Retrieves cached information and meta-data from APC's data store.
</Desc>
    <FName>apcu_cas</FName>
    <Desc>bool apcu_cas ( string $key , int $old , int $new )
apcu_cas() updates an already existing integer value if the old parameter matches the currently stored value with the value of the new parameter.
</Desc>
    <FName>apcu_clear_cache</FName>
    <Desc>bool apcu_clear_cache ( void )
Clears the cache.
</Desc>
    <FName>apcu_dec</FName>
    <Desc>int apcu_dec ( string $key [, int $step = 1 [, bool &$success ]] )
Decreases a stored integer value.
</Desc>
    <FName>apcu_delete</FName>
    <Desc>bool apcu_delete ( mixed $key )
Removes a stored variable from the cache.
</Desc>
    <FName>apcu_entry</FName>
    <Desc>mixed apcu_entry ( string $key , callable $generator [, int $ttl = 0 ] )
Atomically attempts to find key in the cache, if it cannot be found generator is called, passing key as the only argument. The return value of the call is then cached with the optionally specified ttl, and returned. 
Note: When control enters apcu_entry() the lock for the cache is acquired exclusively, it is released when control leaves apcu_entry(): In effect, this turns the body of generator into a critical section, disallowing two processes from executing the same code paths concurrently. In addition, it prohibits the concurrent execution of any other APCu functions, since they will acquire the same lock. 
Warning 
The only APCu function that can be called safely by generator is apcu_entry().
</Desc>
    <FName>apcu_exists</FName>
    <Desc>mixed apcu_exists ( mixed $keys )
Checks if one or more APCu entries exist.
</Desc>
    <FName>apcu_fetch</FName>
    <Desc>mixed apcu_fetch ( mixed $key [, bool &$success ] )
Fetchs an entry from the cache.
</Desc>
    <FName>apcu_inc</FName>
    <Desc>int apcu_inc ( string $key [, int $step = 1 [, bool &$success ]] )
Increases a stored number.
</Desc>
    <FName>apcu_sma_info</FName>
    <Desc>array apcu_sma_info ([ bool $limited = FALSE ] )
Retrieves APCu Shared Memory Allocation information.
</Desc>
    <FName>apcu_store</FName>
    <Desc>bool apcu_store ( string $key , mixed $var [, int $ttl = 0 ] )
array apcu_store ( array $values [, mixed $unused = NULL [, int $ttl = 0 ]] )
Cache a variable in the data store. 
Note: Unlike many other mechanisms in PHP, variables stored using apcu_store() will persist between requests (until the value is removed from the cache).
</Desc>
    <FName>apd_breakpoint</FName>
    <Desc>bool apd_breakpoint ( int $debug_level )
This can be used to stop the running of your script, and await responses on the connected socket. To step the program, just send enter (a blank line), or enter a php command to be executed.
</Desc>
    <FName>apd_callstack</FName>
    <Desc>array apd_callstack ( void )
Returns the current call stack as an array
</Desc>
    <FName>apd_clunk</FName>
    <Desc>void apd_clunk ( string $warning [, string $delimiter = "<BR />" ] )
Behaves like perl's Carp::cluck. Throw a warning and a callstack.
</Desc>
    <FName>apd_continue</FName>
    <Desc>bool apd_continue ( int $debug_level )
Usually sent via the socket to restart the interpreter.
</Desc>
    <FName>apd_croak</FName>
    <Desc>void apd_croak ( string $warning [, string $delimiter = "<BR />" ] )
Behaves like perl's Carp::croak. Throw an error, a callstack and then exit.
</Desc>
    <FName>apd_dump_function_table</FName>
    <Desc>void apd_dump_function_table ( void )
Outputs the current function table.
</Desc>
    <FName>apd_dump_persistent_resources</FName>
    <Desc>array apd_dump_persistent_resources ( void )
Return all persistent resources as an array.
</Desc>
    <FName>apd_dump_regular_resources</FName>
    <Desc>array apd_dump_regular_resources ( void )
Return all current regular resources as an array.
</Desc>
    <FName>apd_echo</FName>
    <Desc>bool apd_echo ( string $output )
Usually sent via the socket to request information about the running script.
</Desc>
    <FName>apd_get_active_symbols</FName>
    <Desc>array apd_get_active_symbols ( void )
Returns the names of all the variables defined in the active scope, (not their values).
</Desc>
    <FName>apd_set_pprof_trace</FName>
    <Desc>string apd_set_pprof_trace ([ string $dump_directory = ini_get("apd.dumpdir") [, string $fragment = "pprof" ]] )
Starts debugging to pprof_{process_id} in the dump directory.
</Desc>
    <FName>apd_set_session_trace_socket</FName>
    <Desc>bool apd_set_session_trace_socket ( string $tcp_server , int $socket_type , int $port , int $debug_level )
Connects to the specified tcp_server (eg. tcplisten) and sends debugging data to the socket.
</Desc>
    <FName>apd_set_session_trace</FName>
    <Desc>void apd_set_session_trace ( int $debug_level [, string $dump_directory = ini_get("apd.dumpdir") ] )
Starts debugging to apd_dump_{process_id} in the dump directory.
</Desc>
    <FName>apd_set_session</FName>
    <Desc>void apd_set_session ( int $debug_level )
This can be used to increase or decrease debugging in a different area of your application.
</Desc>
    <FName>array_change_key_case</FName>
    <Desc>array array_change_key_case ( array $array [, int $case = CASE_LOWER ] )
Returns an array with all keys from array lowercased or uppercased. Numbered indices are left as is.
</Desc>
    <FName>array_chunk</FName>
    <Desc>array array_chunk ( array $array , int $size [, bool $preserve_keys = FALSE ] )
Chunks an array into arrays with size elements. The last chunk may contain less than size elements.
</Desc>
    <FName>array_column</FName>
    <Desc>array array_column ( array $input , mixed $column_key [, mixed $index_key = NULL ] )
array_column() returns the values from a single column of the input, identified by the column_key. Optionally, an index_key may be provided to index the values in the returned array by the values from the index_key column of the input array.
</Desc>
    <FName>array_combine</FName>
    <Desc>array array_combine ( array $keys , array $values )
Creates an array by using the values from the keys array as keys and the values from the values array as the corresponding values.
</Desc>
    <FName>array_count_values</FName>
    <Desc>array array_count_values ( array $array )
array_count_values() returns an array using the values of array as keys and their frequency in array as values.
</Desc>
    <FName>array_diff_assoc</FName>
    <Desc>array array_diff_assoc ( array $array1 , array $array2 [, array $... ] )
Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are also used in the comparison.
</Desc>
    <FName>array_diff_key</FName>
    <Desc>array array_diff_key ( array $array1 , array $array2 [, array $... ] )
Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values.
</Desc>
    <FName>array_diff_uassoc</FName>
    <Desc>array array_diff_uassoc ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )
Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are used in the comparison. 
Unlike array_diff_assoc() a user supplied callback function is used for the indices comparison, not internal function.
</Desc>
    <FName>array_diff_ukey</FName>
    <Desc>array array_diff_ukey ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )
Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values. 
Unlike array_diff_key() a user supplied callback function is used for the indices comparison, not internal function.
</Desc>
    <FName>array_diff</FName>
    <Desc>array array_diff ( array $array1 , array $array2 [, array $... ] )
Compares array1 against one or more other arrays and returns the values in array1 that are not present in any of the other arrays.
</Desc>
    <FName>array_fill_keys</FName>
    <Desc>array array_fill_keys ( array $keys , mixed $value )
Fills an array with the value of the value parameter, using the values of the keys array as keys.
</Desc>
    <FName>array_fill</FName>
    <Desc>array array_fill ( int $start_index , int $num , mixed $value )
Fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter.
</Desc>
    <FName>array_filter</FName>
    <Desc>array array_filter ( array $array [, callable $callback [, int $flag = 0 ]] )
Iterates over each value in the array passing them to the callback function. If the callback function returns true, the current value from array is returned into the result array. Array keys are preserved.
</Desc>
    <FName>array_flip</FName>
    <Desc>array array_flip ( array $array )
array_flip() returns an array in flip order, i.e. keys from array become values and values from array become keys. 
Note that the values of array need to be valid keys, i.e. they need to be either integer or string. A warning will be emitted if a value has the wrong type, and the key/value pair in question will not be included in the result. 
If a value has several occurrences, the latest key will be used as its value, and all others will be lost.
</Desc>
    <FName>array_intersect_assoc</FName>
    <Desc>array array_intersect_assoc ( array $array1 , array $array2 [, array $... ] )
array_intersect_assoc() returns an array containing all the values of array1 that are present in all the arguments. Note that the keys are also used in the comparison unlike in array_intersect().
</Desc>
    <FName>array_intersect_key</FName>
    <Desc>array array_intersect_key ( array $array1 , array $array2 [, array $... ] )
array_intersect_key() returns an array containing all the entries of array1 which have keys that are present in all the arguments.
</Desc>
    <FName>array_intersect_uassoc</FName>
    <Desc>array array_intersect_uassoc ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )
array_intersect_uassoc() returns an array containing all the values of array1 that are present in all the arguments. Note that the keys are used in the comparison unlike in array_intersect().
</Desc>
    <FName>array_intersect_ukey</FName>
    <Desc>array array_intersect_ukey ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )
array_intersect_ukey() returns an array containing all the values of array1 which have matching keys that are present in all the arguments.
</Desc>
    <FName>array_intersect</FName>
    <Desc>array array_intersect ( array $array1 , array $array2 [, array $... ] )
array_intersect() returns an array containing all the values of array1 that are present in all the arguments. Note that keys are preserved.
</Desc>
    <FName>array_key_exists</FName>
    <Desc>bool array_key_exists ( mixed $key , array $array )
array_key_exists() returns TRUE if the given key is set in the array. key can be any value possible for an array index.
</Desc>
    <FName>array_key_first</FName>
    <Desc>mixed array_key_first ( array $array )
Get the first key of the given array without affecting the internal array pointer.
</Desc>
    <FName>array_key_last</FName>
    <Desc>mixed array_key_last ( array $array )
Get the last key of the given array without affecting the internal array pointer.
</Desc>
    <FName>array_keys</FName>
    <Desc>array array_keys ( array $array [, mixed $search_value [, bool $strict = FALSE ]] )
array_keys() returns the keys, numeric and string, from the array. 
If the optional search_value is specified, then only the keys for that value are returned. Otherwise, all the keys from the array are returned.
</Desc>
    <FName>array_map</FName>
    <Desc>array array_map ( callable $callback , array $array1 [, array $... ] )
array_map() returns an array containing all the elements of array1 after applying the callback function to each one. The number of parameters that the callback function accepts should match the number of arrays passed to the array_map()
</Desc>
    <FName>array_merge_recursive</FName>
    <Desc>array array_merge_recursive ( array $array1 [, array $... ] )
array_merge_recursive() merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array. 
If the input arrays have the same string keys, then the values for these keys are merged together into an array, and this is done recursively, so that if one of the values is an array itself, the function will merge it with a corresponding entry in another array too. If, however, the arrays have the same numeric key, the later value will not overwrite the original value, but will be appended.
</Desc>
    <FName>array_merge</FName>
    <Desc>array array_merge ( array $array1 [, array $... ] )
Merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array. 
If the input arrays have the same string keys, then the later value for that key will overwrite the previous one. If, however, the arrays contain numeric keys, the later value will not overwrite the original value, but will be appended. 
Values in the input array with numeric keys will be renumbered with incrementing keys starting from zero in the result array.
</Desc>
    <FName>array_multisort</FName>
    <Desc>bool array_multisort ( array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $... ]]] )
array_multisort() can be used to sort several arrays at once, or a multi-dimensional array by one or more dimensions. 
Associative (string) keys will be maintained, but numeric keys will be re-indexed. 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined.
</Desc>
    <FName>array_pad</FName>
    <Desc>array array_pad ( array $array , int $size , mixed $value )
array_pad() returns a copy of the array padded to size specified by size with value value. If size is positive then the array is padded on the right, if it's negative then on the left. If the absolute value of size is less than or equal to the length of the array then no padding takes place. It is possible to add at most 1048576 elements at a time.
</Desc>
    <FName>array_pop</FName>
    <Desc>mixed array_pop ( array &$array )
array_pop() pops and returns the value of the last element of array, shortening the array by one element. 
Note: This function will reset() the array pointer of the input array after use.
</Desc>
    <FName>array_product</FName>
    <Desc>number array_product ( array $array )
array_product() returns the product of values in an array.
</Desc>
    <FName>array_push</FName>
    <Desc>int array_push ( array &$array [, mixed $... ] )
array_push() treats array as a stack, and pushes the passed variables onto the end of array. The length of array increases by the number of variables pushed. Has the same effect as: 
<?php
$array[] = $var;
?> 
repeated for each passed value. 
Note: If you use array_push() to add one element to the array, it's better to use $array[] = because in that way there is no overhead of calling a function. 
Note: array_push() will raise a warning if the first argument is not an array. This differs from the $var[] behaviour where a new array is created.
</Desc>
    <FName>array_rand</FName>
    <Desc>mixed array_rand ( array $array [, int $num = 1 ] )
Picks one or more random entries out of an array, and returns the key (or keys) of the random entries. It uses a pseudo random number generator that is not suitable for cryptographic purposes.
</Desc>
    <FName>array_reduce</FName>
    <Desc>mixed array_reduce ( array $array , callable $callback [, mixed $initial = NULL ] )
array_reduce() applies iteratively the callback function to the elements of the array, so as to reduce the array to a single value.
</Desc>
    <FName>array_replace_recursive</FName>
    <Desc>array array_replace_recursive ( array $array1 [, array $... ] )
array_replace_recursive() replaces the values of array1 with the same values from all the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later array overwriting the previous values. 
array_replace_recursive() is recursive : it will recurse into arrays and apply the same process to the inner value. 
When the value in the first array is scalar, it will be replaced by the value in the second array, may it be scalar or array. When the value in the first array and the second array are both arrays, array_replace_recursive() will replace their respective value recursively.
</Desc>
    <FName>array_replace</FName>
    <Desc>array array_replace ( array $array1 [, array $... ] )
array_replace() replaces the values of array1 with values having the same keys in each of the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later arrays overwriting the previous values. 
array_replace() is not recursive : it will replace values in the first array by whatever type is in the second array.
</Desc>
    <FName>array_reverse</FName>
    <Desc>array array_reverse ( array $array [, bool $preserve_keys = FALSE ] )
Takes an input array and returns a new array with the order of the elements reversed.
</Desc>
    <FName>array_search</FName>
    <Desc>mixed array_search ( mixed $needle , array $haystack [, bool $strict = FALSE ] )
Searches haystack for needle.
</Desc>
    <FName>array_shift</FName>
    <Desc>mixed array_shift ( array &$array )
array_shift() shifts the first value of the array off and returns it, shortening the array by one element and moving everything down. All numerical array keys will be modified to start counting from zero while literal keys won't be touched. 
Note: This function will reset() the array pointer of the input array after use.
</Desc>
    <FName>array_slice</FName>
    <Desc>array array_slice ( array $array , int $offset [, int $length = NULL [, bool $preserve_keys = FALSE ]] )
array_slice() returns the sequence of elements from the array array as specified by the offset and length parameters.
</Desc>
    <FName>array_splice</FName>
    <Desc>array array_splice ( array &$input , int $offset [, int $length = count($input) [, mixed $replacement = array() ]] )
Removes the elements designated by offset and length from the input array, and replaces them with the elements of the replacement array, if supplied. 
Note that numeric keys in input are not preserved. 
Note: If replacement is not an array, it will be typecast to one (i.e. (array) $replacement). This may result in unexpected behavior when using an object or NULL replacement.
</Desc>
    <FName>array_sum</FName>
    <Desc>number array_sum ( array $array )
array_sum() returns the sum of values in an array.
</Desc>
    <FName>array_udiff_assoc</FName>
    <Desc>array array_udiff_assoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )
Computes the difference of arrays with additional index check, compares data by a callback function. 
Note: Please note that this function only checks one dimension of a n-dimensional array. Of course you can check deeper dimensions by using, for example, array_udiff_assoc($array1[0], $array2[0], "some_comparison_func");.
</Desc>
    <FName>array_udiff_uassoc</FName>
    <Desc>array array_udiff_uassoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func )
Computes the difference of arrays with additional index check, compares data and indexes by a callback function. 
Note that the keys are used in the comparison unlike array_diff() and array_udiff().
</Desc>
    <FName>array_udiff</FName>
    <Desc>array array_udiff ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )
Computes the difference of arrays by using a callback function for data comparison. This is unlike array_diff() which uses an internal function for comparing the data.
</Desc>
    <FName>array_uintersect_assoc</FName>
    <Desc>array array_uintersect_assoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )
Computes the intersection of arrays with additional index check, compares data by a callback function. 
Note that the keys are used in the comparison unlike in array_uintersect(). The data is compared by using a callback function.
</Desc>
    <FName>array_uintersect_uassoc</FName>
    <Desc>array array_uintersect_uassoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func )
Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions.
</Desc>
    <FName>array_uintersect</FName>
    <Desc>array array_uintersect ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )
Computes the intersection of arrays, compares data by a callback function.
</Desc>
    <FName>array_unique</FName>
    <Desc>array array_unique ( array $array [, int $sort_flags = SORT_STRING ] )
Takes an input array and returns a new array without duplicate values. 
Note that keys are preserved. If multiple elements compare equal under the given sort_flags, then the key and value of the first equal element will be retained. 
Note: Two elements are considered equal if and only if (string) $elem1 === (string) $elem2 i.e. when the string representation is the same, the first element will be used.
</Desc>
    <FName>array_unshift</FName>
    <Desc>int array_unshift ( array &$array [, mixed $... ] )
array_unshift() prepends passed elements to the front of the array. Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modified to start counting from zero while literal keys won't be changed.
</Desc>
    <FName>array_values</FName>
    <Desc>array array_values ( array $array )
array_values() returns all the values from the array and indexes the array numerically.
</Desc>
    <FName>array_walk_recursive</FName>
    <Desc>bool array_walk_recursive ( array &$array , callable $callback [, mixed $userdata = NULL ] )
Applies the user-defined callback function to each element of the array. This function will recurse into deeper arrays.
</Desc>
    <FName>array_walk</FName>
    <Desc>bool array_walk ( array &$array , callable $callback [, mixed $userdata = NULL ] )
Applies the user-defined callback function to each element of the array array. 
array_walk() is not affected by the internal array pointer of array. array_walk() will walk through the entire array regardless of pointer position.
</Desc>
    <FName>array</FName>
    <Desc>array array ([ mixed $... ] )
Creates an array. Read the section on the array type for more information on what an array is.
</Desc>
    <FName>arsort</FName>
    <Desc>bool arsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )
This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. 
This is used mainly when sorting associative arrays where the actual element order is significant. 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined.
</Desc>
    <FName>asin</FName>
    <Desc>float asin ( float $arg )
Returns the arc sine of arg in radians. asin() is the inverse function of sin(), which means that a==sin(asin(a)) for every value of a that is within asin()'s range.
</Desc>
    <FName>asinh</FName>
    <Desc>float asinh ( float $arg )
Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg.
</Desc>
    <FName>asort</FName>
    <Desc>bool asort ( array &$array [, int $sort_flags = SORT_REGULAR ] )
This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant. 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined.
</Desc>
    <FName>assert_options</FName>
    <Desc>mixed assert_options ( int $what [, mixed $value ] )
Set the various assert() control options or just query their current settings.
</Desc>
    <FName>assert</FName>
    <Desc>PHP 5 and 7
bool assert ( mixed $assertion [, string $description ] )
PHP 7
bool assert ( mixed $assertion [, Throwable $exception ] )
assert() will check the given assertion and take appropriate action if its result is FALSE. 
Traditional assertions (PHP 5 and 7)
If the assertion is given as a string it will be evaluated as PHP code by assert(). If you pass a boolean condition as assertion, this condition will not show up as parameter to the assertion function which you may have defined with assert_options(). The condition is converted to a string before calling that handler function, and the boolean FALSE is converted as the empty string. 
Assertions should be used as a debugging feature only. You may use them for sanity-checks that test for conditions that should always be TRUE and that indicate some programming errors if not or to check for the presence of certain features like extension functions or certain system limits and features. 
Assertions should not be used for normal runtime operations like input parameter checks. As a rule of thumb your code should always be able to work correctly if assertion checking is not activated. 
The behavior of assert() may be configured by assert_options() or by .ini-settings described in that functions manual page. 
The assert_options() function and/or ASSERT_CALLBACK configuration directive allow a callback function to be set to handle failed assertions. 
assert() callbacks are particularly useful for building automated test suites because they allow you to easily capture the code passed to the assertion, along with information on where the assertion was made. While this information can be captured via other methods, using assertions makes it much faster and easier! 
The callback function should accept three arguments. The first argument will contain the file the assertion failed in. The second argument will contain the line the assertion failed on and the third argument will contain the expression that failed (if any — literal values such as 1 or "two" will not be passed via this argument). Users of PHP 5.4.8 and later may also provide a fourth optional argument, which will contain the description given to assert(), if it was set. 
Expectations (PHP 7 only)
assert() is a language construct in PHP 7, allowing for the definition of expectations: assertions that take effect in development and testing environments, but are optimised away to have zero cost in production. 
While assert_options() can still be used to control behaviour as described above for backward compatibility reasons, PHP 7 only code should use the two new configuration directives to control the behaviour of assert() and not call assert_options(). 
PHP 7 configuration directives for assert() DirectiveDefault valuePossible values
zend.assertions 11: generate and execute code (development mode) 
0: generate code but jump around it at runtime 
-1: do not generate code (production mode) 

assert.exception 01: throw when the assertion fails, either by throwing the object provided as the exception or by throwing a new AssertionError object if exception wasn't provided 
0: use or generate a Throwable as described above, but only generate a warning based on that object rather than throwing it (compatible with PHP 5 behaviour)
</Desc>
    <FName>atan</FName>
    <Desc>float atan ( float $arg )
Returns the arc tangent of arg in radians. atan() is the inverse function of tan(), which means that a==tan(atan(a)) for every value of a that is within atan()'s range.
</Desc>
    <FName>atan2</FName>
    <Desc>float atan2 ( float $y , float $x )
This function calculates the arc tangent of the two variables x and y. It is similar to calculating the arc tangent of y / x, except that the signs of both arguments are used to determine the quadrant of the result. 
The function returns the result in radians, which is between -PI and PI (inclusive).
</Desc>
    <FName>atanh</FName>
    <Desc>float atanh ( float $arg )
Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg.
</Desc>
    <FName>__autoload</FName>
    <Desc>void __autoload ( string $class )
You can define this function to enable classes autoloading.
</Desc>
    <FName>base_convert</FName>
    <Desc>string base_convert ( string $number , int $frombase , int $tobase )
Returns a string containing number represented in base tobase. The base in which number is given is specified in frombase. Both frombase and tobase have to be between 2 and 36, inclusive. Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35. The case of the letters doesn't matter, i.e. number is interpreted case-insensitively. 
Warning 
base_convert() may lose precision on large numbers due to properties related to the internal "double" or "float" type used. Please see the Floating point numbers section in the manual for more specific information and limitations.
</Desc>
    <FName>base64_decode</FName>
    <Desc>string base64_decode ( string $data [, bool $strict = FALSE ] )
Decodes a base64 encoded data.
</Desc>
    <FName>base64_encode</FName>
    <Desc>string base64_encode ( string $data )
Encodes the given data with base64. 
This encoding is designed to make binary data survive transport through transport layers that are not 8-bit clean, such as mail bodies. 
Base64-encoded data takes about 33% more space than the original data.
</Desc>
    <FName>basename</FName>
    <Desc>string basename ( string $path [, string $suffix ] )
Given a string containing the path to a file or directory, this function will return the trailing name component. 
Note: 
basename() operates naively on the input string, and is not aware of the actual filesystem, or path components such as "..". 
Caution 
basename() is locale aware, so for it to see the correct basename with multibyte character paths, the matching locale must be set using the setlocale() function.
</Desc>
    <FName>bbcode_add_element</FName>
    <Desc>bool bbcode_add_element ( resource $bbcode_container , string $tag_name , array $tag_rules )
Adds a tag to an existing BBCode_Container tag_set using tag_rules.
</Desc>
    <FName>bbcode_add_smiley</FName>
    <Desc>bool bbcode_add_smiley ( resource $bbcode_container , string $smiley , string $replace_by )
Adds a smiley to the parser
</Desc>
    <FName>bbcode_create</FName>
    <Desc>resource bbcode_create ([ array $bbcode_initial_tags = NULL ] )
This function returns a new BBCode Resource used to parse BBCode strings.
</Desc>
    <FName>bbcode_destroy</FName>
    <Desc>bool bbcode_destroy ( resource $bbcode_container )
This function closes the resource opened by bbcode_create().
</Desc>
    <FName>bbcode_parse</FName>
    <Desc>string bbcode_parse ( resource $bbcode_container , string $to_parse )
This function parse the string to_parse following the rules in the bbcode_container created by bbcode_create()
</Desc>
    <FName>bbcode_set_arg_parser</FName>
    <Desc>bool bbcode_set_arg_parser ( resource $bbcode_container , resource $bbcode_arg_parser )
Attaches another parser to the bbcode_container. This parser is used only when arguments must be parsed. If this function is not used, the default argument parser is the parser itself.
</Desc>
    <FName>bbcode_set_flags</FName>
    <Desc>bool bbcode_set_flags ( resource $bbcode_container , int $flags [, int $mode = BBCODE_SET_FLAGS_SET ] )
Set or alter parser options
</Desc>
    <FName>bcadd</FName>
    <Desc>string bcadd ( string $left_operand , string $right_operand [, int $scale = 0 ] )
Sums left_operand and right_operand.
</Desc>
    <FName>bccomp</FName>
    <Desc>int bccomp ( string $left_operand , string $right_operand [, int $scale = 0 ] )
Compares the left_operand to the right_operand and returns the result as an integer.
</Desc>
    <FName>bcdiv</FName>
    <Desc>string bcdiv ( string $dividend , string $divisor [, int $scale = 0 ] )
Divides the dividend by the divisor.
</Desc>
    <FName>bcmod</FName>
    <Desc>string bcmod ( string $dividend , string $divisor [, int $scale ] )
Get the remainder of dividing dividend by divisor. Unless divisor is zero, the result has the same sign as dividend.
</Desc>
    <FName>bcmul</FName>
    <Desc>string bcmul ( string $left_operand , string $right_operand [, int $scale = 0 ] )
Multiply the left_operand by the right_operand.
</Desc>
    <FName>bcompiler_load_exe</FName>
    <Desc>bool bcompiler_load_exe ( string $filename )
Reads data from a bcompiler exe file and creates classes from the bytecodes.
</Desc>
    <FName>bcompiler_load</FName>
    <Desc>bool bcompiler_load ( string $filename )
Reads data from a bzcompressed file and creates classes from the bytecodes.
</Desc>
    <FName>bcompiler_parse_class</FName>
    <Desc>bool bcompiler_parse_class ( string $class , string $callback )
Reads the bytecodes of a class and calls back to a user function.
</Desc>
    <FName>bcompiler_read</FName>
    <Desc>bool bcompiler_read ( resource $filehandle )
Reads data from a open file handle and creates classes from the bytecodes.
</Desc>
    <FName>bcompiler_write_class</FName>
    <Desc>bool bcompiler_write_class ( resource $filehandle , string $className [, string $extends ] )
Reads the bytecodes from PHP for an existing class, and writes them to the open file handle.
</Desc>
    <FName>bcompiler_write_constant</FName>
    <Desc>bool bcompiler_write_constant ( resource $filehandle , string $constantName )
Reads the bytecodes from PHP for an existing constant, and writes them to the open file handle.
</Desc>
    <FName>bcompiler_write_exe_footer</FName>
    <Desc>bool bcompiler_write_exe_footer ( resource $filehandle , int $startpos )
An EXE (or self executable) file consists of 3 parts: 
The stub (executable code, e.g. a compiled C program) that loads PHP interpreter, bcompiler extension, stored Bytecodes and initiates a call for the specified function (e.g. main) or class method (e.g. main::main) 
The Bytecodes (uncompressed only for the moment) 
The bcompiler EXE footer 
To obtain a suitable stub you can compile php_embed-based stub phpe.c located in the examples/embed directory on bcompiler's CVS.
</Desc>
    <FName>bcompiler_write_file</FName>
    <Desc>bool bcompiler_write_file ( resource $filehandle , string $filename )
This function compiles specified source file into bytecodes, and writes them to the open file handle.
</Desc>
    <FName>bcompiler_write_footer</FName>
    <Desc>bool bcompiler_write_footer ( resource $filehandle )
Writes the single character \x00 to indicate End of compiled data.
</Desc>
    <FName>bcompiler_write_function</FName>
    <Desc>bool bcompiler_write_function ( resource $filehandle , string $functionName )
Reads the bytecodes from PHP for an existing function, and writes them to the open file handle. Order is not important, (eg. if function b uses function a, and you compile it like the example below, it will work perfectly OK).
</Desc>
    <FName>bcompiler_write_functions_from_file</FName>
    <Desc>bool bcompiler_write_functions_from_file ( resource $filehandle , string $fileName )
Searches for all functions declared in the given file, and writes their correspondent bytecodes to the open file handle.
</Desc>
    <FName>bcompiler_write_header</FName>
    <Desc>bool bcompiler_write_header ( resource $filehandle [, string $write_ver ] )
Writes the header part of a bcompiler file.
</Desc>
    <FName>bcompiler_write_included_filename</FName>
    <Desc>bool bcompiler_write_included_filename ( resource $filehandle , string $filename )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>bcpow</FName>
    <Desc>string bcpow ( string $base , string $exponent [, int $scale = 0 ] )
Raise base to the power exponent.
</Desc>
    <FName>bcpowmod</FName>
    <Desc>string bcpowmod ( string $base , string $exponent , string $modulus [, int $scale = 0 ] )
Use the fast-exponentiation method to raise base to the power exponent with respect to the modulus modulus.
</Desc>
    <FName>bcscale</FName>
    <Desc>int bcscale ([ int $scale ] )
Sets the default scale parameter for all subsequent calls to bc math functions that do not explicitly specify a scale parameter. If scale is omitted, the function gets the current scale factor.
</Desc>
    <FName>bcsqrt</FName>
    <Desc>string bcsqrt ( string $operand [, int $scale = 0 ] )
Return the square root of the operand.
</Desc>
    <FName>bcsub</FName>
    <Desc>string bcsub ( string $left_operand , string $right_operand [, int $scale = 0 ] )
Subtracts the right_operand from the left_operand.
</Desc>
    <FName>bin2hex</FName>
    <Desc>string bin2hex ( string $str )
Returns an ASCII string containing the hexadecimal representation of str. The conversion is done byte-wise with the high-nibble first.
</Desc>
    <FName>bind_textdomain_codeset</FName>
    <Desc>string bind_textdomain_codeset ( string $domain , string $codeset )
With bind_textdomain_codeset(), you can set in which encoding will be messages from domain returned by gettext() and similar functions.
</Desc>
    <FName>bindec</FName>
    <Desc>number bindec ( string $binary_string )
Returns the decimal equivalent of the binary number represented by the binary_string argument. 
bindec() converts a binary number to an integer or, if needed for size reasons, float. 
bindec() interprets all binary_string values as unsigned integers. This is because bindec() sees the most significant bit as another order of magnitude rather than as the sign bit.
</Desc>
    <FName>bindtextdomain</FName>
    <Desc>string bindtextdomain ( string $domain , string $directory )
The bindtextdomain() function sets the path for a domain.
</Desc>
    <FName>blenc_encrypt</FName>
    <Desc>string blenc_encrypt ( string $plaintext , string $encodedfile [, string $encryption_key ] )
Encrypt the plaintext content and write it into encodedfile
</Desc>
    <FName>boolval</FName>
    <Desc>bool boolval ( mixed $var )
Returns the boolean value of var.
</Desc>
    <FName>bson_decode</FName>
    <Desc>array bson_decode ( string $bson )
This function is very beta and entirely useless for 99% of users. It is only useful if you're doing something weird, such as writing your own driver on top of the PHP driver.
</Desc>
    <FName>bson_encode</FName>
    <Desc>string bson_encode ( mixed $anything )
This function is very beta and entirely useless for 99% of users. It is only useful if you're doing something weird, such as writing your own driver on top of the PHP driver.
</Desc>
    <FName>bzclose</FName>
    <Desc>int bzclose ( resource $bz )
Closes the given bzip2 file pointer.
</Desc>
    <FName>bzcompress</FName>
    <Desc>mixed bzcompress ( string $source [, int $blocksize = 4 [, int $workfactor = 0 ]] )
bzcompress() compresses the given string and returns it as bzip2 encoded data.
</Desc>
    <FName>bzdecompress</FName>
    <Desc>mixed bzdecompress ( string $source [, int $small = 0 ] )
bzdecompress() decompresses the given string containing bzip2 encoded data.
</Desc>
    <FName>bzerrno</FName>
    <Desc>int bzerrno ( resource $bz )
Returns the error number of any bzip2 error returned by the given file pointer.
</Desc>
    <FName>bzerror</FName>
    <Desc>array bzerror ( resource $bz )
Returns the error number and error string of any bzip2 error returned by the given file pointer.
</Desc>
    <FName>bzerrstr</FName>
    <Desc>string bzerrstr ( resource $bz )
Gets the error string of any bzip2 error returned by the given file pointer.
</Desc>
    <FName>bzflush</FName>
    <Desc>bool bzflush ( resource $bz )
Forces a write of all buffered bzip2 data for the file pointer bz.
</Desc>
    <FName>bzopen</FName>
    <Desc>resource bzopen ( mixed $file , string $mode )
bzopen() opens a bzip2 (.bz2) file for reading or writing.
</Desc>
    <FName>bzread</FName>
    <Desc>string bzread ( resource $bz [, int $length = 1024 ] )
bzread() reads from the given bzip2 file pointer. 
Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first.
</Desc>
    <FName>bzwrite</FName>
    <Desc>int bzwrite ( resource $bz , string $data [, int $length ] )
bzwrite() writes a string into the given bzip2 file stream.
</Desc>
    <FName>cairo_create</FName>
    <Desc>CairoContext cairo_create ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_create</FName>
    <Desc>CairoFontOptions cairo_font_options_create ( void )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_equal</FName>
    <Desc>bool cairo_font_options_equal ( CairoFontOptions $options , CairoFontOptions $other )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_get_antialias</FName>
    <Desc>int cairo_font_options_get_antialias ( CairoFontOptions $options )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_get_hint_metrics</FName>
    <Desc>int cairo_font_options_get_hint_metrics ( CairoFontOptions $options )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_get_hint_style</FName>
    <Desc>int cairo_font_options_get_hint_style ( CairoFontOptions $options )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_get_subpixel_order</FName>
    <Desc>int cairo_font_options_get_subpixel_order ( CairoFontOptions $options )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_hash</FName>
    <Desc>int cairo_font_options_hash ( CairoFontOptions $options )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_merge</FName>
    <Desc>void cairo_font_options_merge ( CairoFontOptions $options , CairoFontOptions $other )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_set_antialias</FName>
    <Desc>void cairo_font_options_set_antialias ( CairoFontOptions $options , int $antialias )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_set_hint_metrics</FName>
    <Desc>void cairo_font_options_set_hint_metrics ( CairoFontOptions $options , int $hint_metrics )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_set_hint_style</FName>
    <Desc>void cairo_font_options_set_hint_style ( CairoFontOptions $options , int $hint_style )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_set_subpixel_order</FName>
    <Desc>void cairo_font_options_set_subpixel_order ( CairoFontOptions $options , int $subpixel_order )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_font_options_status</FName>
    <Desc>int cairo_font_options_status ( CairoFontOptions $options )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_format_stride_for_width</FName>
    <Desc>int cairo_format_stride_for_width ( int $format , int $width )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_image_surface_create_for_data</FName>
    <Desc>CairoImageSurface cairo_image_surface_create_for_data ( string $data , int $format , int $width , int $height [, int $stride = -1 ] )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_image_surface_create_from_png</FName>
    <Desc>CairoImageSurface cairo_image_surface_create_from_png ( mixed $file )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_image_surface_create</FName>
    <Desc>CairoImageSurface cairo_image_surface_create ( int $format , int $width , int $height )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_image_surface_get_data</FName>
    <Desc>string cairo_image_surface_get_data ( CairoImageSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_image_surface_get_format</FName>
    <Desc>int cairo_image_surface_get_format ( CairoImageSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_image_surface_get_height</FName>
    <Desc>int cairo_image_surface_get_height ( CairoImageSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_image_surface_get_stride</FName>
    <Desc>int cairo_image_surface_get_stride ( CairoImageSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_image_surface_get_width</FName>
    <Desc>int cairo_image_surface_get_width ( CairoImageSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_matrix_create_scale</FName>
    <Desc>This function is an alias of: CairoMatrix::initScale(). 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>cairo_matrix_create_translate</FName>
    <Desc>This function is an alias of: CairoMatrix::initTranslate(). 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>cairo_matrix_invert</FName>
    <Desc>void cairo_matrix_invert ( CairoMatrix $matrix )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_matrix_multiply</FName>
    <Desc>CairoMatrix cairo_matrix_multiply ( CairoMatrix $matrix1 , CairoMatrix $matrix2 )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_matrix_transform_distance</FName>
    <Desc>array cairo_matrix_transform_distance ( CairoMatrix $matrix , float $dx , float $dy )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_matrix_transform_point</FName>
    <Desc>array cairo_matrix_transform_point ( CairoMatrix $matrix , float $dx , float $dy )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_matrix_translate</FName>
    <Desc>void cairo_matrix_translate ( CairoMatrix $matrix , float $tx , float $ty )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_add_color_stop_rgb</FName>
    <Desc>void cairo_pattern_add_color_stop_rgb ( CairoGradientPattern $pattern , float $offset , float $red , float $green , float $blue )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_add_color_stop_rgba</FName>
    <Desc>void cairo_pattern_add_color_stop_rgba ( CairoGradientPattern $pattern , float $offset , float $red , float $green , float $blue , float $alpha )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_create_for_surface</FName>
    <Desc>CairoPattern cairo_pattern_create_for_surface ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_create_linear</FName>
    <Desc>CairoPattern cairo_pattern_create_linear ( float $x0 , float $y0 , float $x1 , float $y1 )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_create_radial</FName>
    <Desc>CairoPattern cairo_pattern_create_radial ( float $x0 , float $y0 , float $r0 , float $x1 , float $y1 , float $r1 )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_create_rgb</FName>
    <Desc>CairoPattern cairo_pattern_create_rgb ( float $red , float $green , float $blue )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_create_rgba</FName>
    <Desc>CairoPattern cairo_pattern_create_rgba ( float $red , float $green , float $blue , float $alpha )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_get_color_stop_count</FName>
    <Desc>int cairo_pattern_get_color_stop_count ( CairoGradientPattern $pattern )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_get_color_stop_rgba</FName>
    <Desc>array cairo_pattern_get_color_stop_rgba ( CairoGradientPattern $pattern , int $index )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_get_extend</FName>
    <Desc>int cairo_pattern_get_extend ( string $pattern )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_get_filter</FName>
    <Desc>int cairo_pattern_get_filter ( CairoSurfacePattern $pattern )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_get_linear_points</FName>
    <Desc>array cairo_pattern_get_linear_points ( CairoLinearGradient $pattern )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_get_matrix</FName>
    <Desc>CairoMatrix cairo_pattern_get_matrix ( CairoPattern $pattern )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_get_radial_circles</FName>
    <Desc>array cairo_pattern_get_radial_circles ( CairoRadialGradient $pattern )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_get_rgba</FName>
    <Desc>array cairo_pattern_get_rgba ( CairoSolidPattern $pattern )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_get_surface</FName>
    <Desc>CairoSurface cairo_pattern_get_surface ( CairoSurfacePattern $pattern )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_get_type</FName>
    <Desc>int cairo_pattern_get_type ( CairoPattern $pattern )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_set_extend</FName>
    <Desc>void cairo_pattern_set_extend ( string $pattern , string $extend )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_set_filter</FName>
    <Desc>void cairo_pattern_set_filter ( CairoSurfacePattern $pattern , int $filter )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_set_matrix</FName>
    <Desc>void cairo_pattern_set_matrix ( CairoPattern $pattern , CairoMatrix $matrix )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pattern_status</FName>
    <Desc>int cairo_pattern_status ( CairoPattern $pattern )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pdf_surface_create</FName>
    <Desc>CairoPdfSurface cairo_pdf_surface_create ( string $file , float $width , float $height )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_pdf_surface_set_size</FName>
    <Desc>void cairo_pdf_surface_set_size ( CairoPdfSurface $surface , float $width , float $height )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_ps_get_levels</FName>
    <Desc>array cairo_ps_get_levels ( void )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_ps_level_to_string</FName>
    <Desc>string cairo_ps_level_to_string ( int $level )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_ps_surface_create</FName>
    <Desc>CairoPsSurface cairo_ps_surface_create ( string $file , float $width , float $height )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_ps_surface_dsc_begin_page_setup</FName>
    <Desc>void cairo_ps_surface_dsc_begin_page_setup ( CairoPsSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_ps_surface_dsc_begin_setup</FName>
    <Desc>void cairo_ps_surface_dsc_begin_setup ( CairoPsSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_ps_surface_dsc_comment</FName>
    <Desc>void cairo_ps_surface_dsc_comment ( CairoPsSurface $surface , string $comment )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_ps_surface_get_eps</FName>
    <Desc>bool cairo_ps_surface_get_eps ( CairoPsSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_ps_surface_restrict_to_level</FName>
    <Desc>void cairo_ps_surface_restrict_to_level ( CairoPsSurface $surface , int $level )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_ps_surface_set_eps</FName>
    <Desc>void cairo_ps_surface_set_eps ( CairoPsSurface $surface , bool $level )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_ps_surface_set_size</FName>
    <Desc>void cairo_ps_surface_set_size ( CairoPsSurface $surface , float $width , float $height )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scaled_font_create</FName>
    <Desc>CairoScaledFont cairo_scaled_font_create ( CairoFontFace $fontface , CairoMatrix $matrix , CairoMatrix $ctm , CairoFontOptions $fontoptions )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scaled_font_extents</FName>
    <Desc>array cairo_scaled_font_extents ( CairoScaledFont $scaledfont )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scaled_font_get_ctm</FName>
    <Desc>CairoMatrix cairo_scaled_font_get_ctm ( CairoScaledFont $scaledfont )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scaled_font_get_font_face</FName>
    <Desc>CairoFontFace cairo_scaled_font_get_font_face ( CairoScaledFont $scaledfont )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scaled_font_get_font_matrix</FName>
    <Desc>CairoFontOptions cairo_scaled_font_get_font_matrix ( CairoScaledFont $scaledfont )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scaled_font_get_font_options</FName>
    <Desc>CairoFontOptions cairo_scaled_font_get_font_options ( CairoScaledFont $scaledfont )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scaled_font_get_scale_matrix</FName>
    <Desc>CairoMatrix cairo_scaled_font_get_scale_matrix ( CairoScaledFont $scaledfont )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scaled_font_get_type</FName>
    <Desc>int cairo_scaled_font_get_type ( CairoScaledFont $scaledfont )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scaled_font_glyph_extents</FName>
    <Desc>array cairo_scaled_font_glyph_extents ( CairoScaledFont $scaledfont , array $glyphs )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scaled_font_status</FName>
    <Desc>int cairo_scaled_font_status ( CairoScaledFont $scaledfont )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_scaled_font_text_extents</FName>
    <Desc>array cairo_scaled_font_text_extents ( CairoScaledFont $scaledfont , string $text )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_copy_page</FName>
    <Desc>void cairo_surface_copy_page ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_create_similar</FName>
    <Desc>CairoSurface cairo_surface_create_similar ( CairoSurface $surface , int $content , float $width , float $height )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_finish</FName>
    <Desc>void cairo_surface_finish ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_flush</FName>
    <Desc>void cairo_surface_flush ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_get_content</FName>
    <Desc>int cairo_surface_get_content ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_get_device_offset</FName>
    <Desc>array cairo_surface_get_device_offset ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_get_font_options</FName>
    <Desc>CairoFontOptions cairo_surface_get_font_options ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_get_type</FName>
    <Desc>int cairo_surface_get_type ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_mark_dirty_rectangle</FName>
    <Desc>void cairo_surface_mark_dirty_rectangle ( CairoSurface $surface , float $x , float $y , float $width , float $height )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_mark_dirty</FName>
    <Desc>void cairo_surface_mark_dirty ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_set_device_offset</FName>
    <Desc>void cairo_surface_set_device_offset ( CairoSurface $surface , float $x , float $y )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_set_fallback_resolution</FName>
    <Desc>void cairo_surface_set_fallback_resolution ( CairoSurface $surface , float $x , float $y )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_show_page</FName>
    <Desc>void cairo_surface_show_page ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_status</FName>
    <Desc>int cairo_surface_status ( CairoSurface $surface )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_surface_write_to_png</FName>
    <Desc>void cairo_surface_write_to_png ( CairoSurface $surface , resource $stream )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_svg_surface_create</FName>
    <Desc>CairoSvgSurface cairo_svg_surface_create ( string $file , float $width , float $height )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_svg_surface_restrict_to_version</FName>
    <Desc>void cairo_svg_surface_restrict_to_version ( CairoSvgSurface $surface , int $version )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cairo_svg_version_to_string</FName>
    <Desc>string cairo_svg_version_to_string ( int $version )
The function description goes here. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cal_days_in_month</FName>
    <Desc>int cal_days_in_month ( int $calendar , int $month , int $year )
This function will return the number of days in the month of year for the specified calendar.
</Desc>
    <FName>cal_from_jd</FName>
    <Desc>array cal_from_jd ( int $jd , int $calendar )
cal_from_jd() converts the Julian day given in jd into a date of the specified calendar. Supported calendar values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
</Desc>
    <FName>cal_info</FName>
    <Desc>array cal_info ([ int $calendar = -1 ] )
cal_info() returns information on the specified calendar. 
Calendar information is returned as an array containing the elements calname, calsymbol, month, abbrevmonth and maxdaysinmonth. The names of the different calendars which can be used as calendar are as follows: 
0 or CAL_GREGORIAN - Gregorian Calendar 
1 or CAL_JULIAN - Julian Calendar 
2 or CAL_JEWISH - Jewish Calendar 
3 or CAL_FRENCH - French Revolutionary Calendar 
If no calendar is specified information on all supported calendars is returned as an array.
</Desc>
    <FName>cal_to_jd</FName>
    <Desc>int cal_to_jd ( int $calendar , int $month , int $day , int $year )
cal_to_jd() calculates the Julian day count for a date in the specified calendar. Supported calendars are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
</Desc>
    <FName>call_user_func_array</FName>
    <Desc>mixed call_user_func_array ( callable $callback , array $param_arr )
Calls the callback given by the first parameter with the parameters in param_arr.
</Desc>
    <FName>call_user_func</FName>
    <Desc>mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )
Calls the callback given by the first parameter and passes the remaining parameters as arguments.
</Desc>
    <FName>call_user_method_array</FName>
    <Desc>mixed call_user_method_array ( string $method_name , object &$obj , array $params )
</Desc>
    <FName>call_user_method</FName>
    <Desc>mixed call_user_method ( string $method_name , object &$obj [, mixed $parameter [, mixed $... ]] )
</Desc>
    <FName>ceil</FName>
    <Desc>float ceil ( float $value )
Returns the next highest integer value by rounding up value if necessary.
</Desc>
    <FName>chdb_create</FName>
    <Desc>bool chdb_create ( string $pathname , array $data )
chdb_create() creates a chdb file containing the specified key-value pairs. 
Note: 
chdb files are not portable across little-endian and big-endian environments. Except for that, they are portable across different architectures. Also compatibility across different versions of chdb is not guaranteed.
</Desc>
    <FName>chdir</FName>
    <Desc>bool chdir ( string $directory )
Changes PHP's current directory to directory.
</Desc>
    <FName>checkdate</FName>
    <Desc>bool checkdate ( int $month , int $day , int $year )
Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined.
</Desc>
    <FName>checkdnsrr</FName>
    <Desc>bool checkdnsrr ( string $host [, string $type = "MX" ] )
Searches DNS for records of type type corresponding to host.
</Desc>
    <FName>chgrp</FName>
    <Desc>bool chgrp ( string $filename , mixed $group )
Attempts to change the group of the file filename to group. 
Only the superuser may change the group of a file arbitrarily; other users may change the group of a file to any group of which that user is a member.
</Desc>
    <FName>chmod</FName>
    <Desc>bool chmod ( string $filename , int $mode )
Attempts to change the mode of the specified file to that given in mode.
</Desc>
    <FName>chop</FName>
    <Desc>This function is an alias of: rtrim(). 
Notes
Note: 
chop() is different than the Perl chop() function, which removes the last character in the string. 
</Desc>
    <FName>chown</FName>
    <Desc>bool chown ( string $filename , mixed $user )
Attempts to change the owner of the file filename to user user. Only the superuser may change the owner of a file.
</Desc>
    <FName>chr</FName>
    <Desc>string chr ( int $bytevalue )
Returns a one-character string containing the character specified by interpreting bytevalue as an unsigned integer. 
This can be used to create a one-character string in a single-byte encoding such as ASCII, ISO-8859, or Windows 1252, by passing the position of a desired character in the encoding's mapping table. However, note that this function is not aware of any string encoding, and in particular cannot be passed a Unicode code point value to generate a string in a multibyte encoding like UTF-8 or UTF-16. 
This function complements ord().
</Desc>
    <FName>chroot</FName>
    <Desc>bool chroot ( string $directory )
Changes the root directory of the current process to directory, and changes the current working directory to "/". 
This function is only available to GNU and BSD systems, and only when using the CLI, CGI or Embed SAPI. Also, this function requires root privileges.
</Desc>
    <FName>chunk_split</FName>
    <Desc>string chunk_split ( string $body [, int $chunklen = 76 [, string $end = "\r\n" ]] )
Can be used to split a string into smaller chunks which is useful for e.g. converting base64_encode() output to match RFC 2045 semantics. It inserts end every chunklen characters.
</Desc>
    <FName>class_alias</FName>
    <Desc>bool class_alias ( string $original , string $alias [, bool $autoload = TRUE ] )
Creates an alias named alias based on the user defined class original. The aliased class is exactly the same as the original class.
</Desc>
    <FName>class_exists</FName>
    <Desc>bool class_exists ( string $class_name [, bool $autoload = TRUE ] )
This function checks whether or not the given class has been defined.
</Desc>
    <FName>class_implements</FName>
    <Desc>array class_implements ( mixed $class [, bool $autoload = TRUE ] )
This function returns an array with the names of the interfaces that the given class and its parents implement.
</Desc>
    <FName>class_parents</FName>
    <Desc>array class_parents ( mixed $class [, bool $autoload = TRUE ] )
This function returns an array with the name of the parent classes of the given class.
</Desc>
    <FName>class_uses</FName>
    <Desc>array class_uses ( mixed $class [, bool $autoload = TRUE ] )
This function returns an array with the names of the traits that the given class uses. This does however not include any traits used by a parent class.
</Desc>
    <FName>classkit_import</FName>
    <Desc>array classkit_import ( string $filename )
Note: This function cannot be used to manipulate the currently running (or chained) method. 
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>classkit_method_add</FName>
    <Desc>bool classkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>classkit_method_copy</FName>
    <Desc>bool classkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>classkit_method_redefine</FName>
    <Desc>bool classkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] )
Note: This function cannot be used to manipulate the currently running (or chained) method. 
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>classkit_method_remove</FName>
    <Desc>bool classkit_method_remove ( string $classname , string $methodname )
Note: This function cannot be used to manipulate the currently running (or chained) method. 
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>classkit_method_rename</FName>
    <Desc>bool classkit_method_rename ( string $classname , string $methodname , string $newname )
Note: This function cannot be used to manipulate the currently running (or chained) method. 
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>clearstatcache</FName>
    <Desc>void clearstatcache ([ bool $clear_realpath_cache = FALSE [, string $filename ]] )
When you use stat(), lstat(), or any of the other functions listed in the affected functions list (below), PHP caches the information those functions return in order to provide faster performance. However, in certain cases, you may want to clear the cached information. For instance, if the same file is being checked multiple times within a single script, and that file is in danger of being removed or changed during that script's operation, you may elect to clear the status cache. In these cases, you can use the clearstatcache() function to clear the information that PHP caches about a file. 
You should also note that PHP doesn't cache information about non-existent files. So, if you call file_exists() on a file that doesn't exist, it will return FALSE until you create the file. If you create the file, it will return TRUE even if you then delete the file. However unlink() clears the cache automatically. 
Note: 
This function caches information about specific filenames, so you only need to call clearstatcache() if you are performing multiple operations on the same filename and require the information about that particular file to not be cached. 
Affected functions include stat(), lstat(), file_exists(), is_writable(), is_readable(), is_executable(), is_file(), is_dir(), is_link(), filectime(), fileatime(), filemtime(), fileinode(), filegroup(), fileowner(), filesize(), filetype(), and fileperms().
</Desc>
    <FName>cli_get_process_title</FName>
    <Desc>string cli_get_process_title ( void )
Returns the current process title, as set by cli_set_process_title(). Note that this may not exactly match what is shown in ps or top, depending on your operating system. 
This function is available only in CLI mode.
</Desc>
    <FName>cli_set_process_title</FName>
    <Desc>bool cli_set_process_title ( string $title )
Sets the process title visible in tools such as top and ps. This function is available only in CLI mode.
</Desc>
    <FName>closedir</FName>
    <Desc>void closedir ([ resource $dir_handle ] )
Closes the directory stream indicated by dir_handle. The stream must have previously been opened by opendir().
</Desc>
    <FName>closelog</FName>
    <Desc>bool closelog ( void )
closelog() closes the descriptor being used to write to the system logger. The use of closelog() is optional.
</Desc>
    <FName>com_create_guid</FName>
    <Desc>string com_create_guid ( void )
Generates a Globally Unique Identifier (GUID). 
A GUID is generated in the same way as DCE UUID's, except that the Microsoft convention is to enclose a GUID in curly braces.
</Desc>
    <FName>com_event_sink</FName>
    <Desc>bool com_event_sink ( variant $comobject , object $sinkobject [, mixed $sinkinterface ] )
Instructs COM to sink events generated by comobject into the PHP object sinkobject. 
Be careful how you use this feature; if you are doing something similar to the example below, then it doesn't really make sense to run it in a web server context.
</Desc>
    <FName>com_get_active_object</FName>
    <Desc>variant com_get_active_object ( string $progid [, int $code_page ] )
com_get_active_object() is similar to creating a new instance of a COM object, except that it will only return an object to your script if the object is already running. OLE applications use something known as the "Running Object Table" to allow well-known applications to be launched only once; this function exposes the COM library function GetActiveObject() to get a handle on a running instance.
</Desc>
    <FName>com_load_typelib</FName>
    <Desc>bool com_load_typelib ( string $typelib_name [, bool $case_insensitive = TRUE ] )
Loads a type-library and registers its constants in the engine, as though they were defined using define(). 
Note that it is much more efficient to use the configuration setting to pre-load and register the constants, although not so flexible. 
If you have turned on , then PHP will attempt to automatically register the constants associated with a COM object when you instantiate it. This depends on the interfaces provided by the COM object itself, and may not always be possible.
</Desc>
    <FName>com_message_pump</FName>
    <Desc>bool com_message_pump ([ int $timeoutms = 0 ] )
This function will sleep for up to timeoutms milliseconds, or until a message arrives in the queue. 
The purpose of this function is to route COM calls between apartments and handle various synchronization issues. This allows your script to wait efficiently for events to be triggered, while still handling other events or running other code in the background. You should use it in a loop, as demonstrated by the example in the com_event_sink() function, until you are finished using event bound COM objects.
</Desc>
    <FName>com_print_typeinfo</FName>
    <Desc>bool com_print_typeinfo ( object $comobject [, string $dispinterface [, bool $wantsink = FALSE ]] )
The purpose of this function is to help generate a skeleton class for use as an event sink. You may also use it to generate a dump of any COM object, provided that it supports enough of the introspection interfaces, and that you know the name of the interface you want to display.
</Desc>
    <FName>CommonMark\Parse</FName>
    <Desc>CommonMark\Node CommonMark\Parse ( string $content [, int $options ] )
Shall parse content
</Desc>
    <FName>CommonMark\Render\HTML</FName>
    <Desc>string CommonMark\Render\HTML ( CommonMark\Node $node [, int $options ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Render\Latex</FName>
    <Desc>string CommonMark\Render\Latex ( CommonMark\Node $node [, int $options [, int $width ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Render\Man</FName>
    <Desc>string CommonMark\Render\Man ( CommonMark\Node $node [, int $options [, int $width ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Render\XML</FName>
    <Desc>string CommonMark\Render\XML ( CommonMark\Node $node [, int $options ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CommonMark\Render</FName>
    <Desc>string CommonMark\Render ( CommonMark\Node $node [, int $options [, int $width ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>compact</FName>
    <Desc>array compact ( mixed $varname1 [, mixed $... ] )
Creates an array containing variables and their values. 
For each of these, compact() looks for a variable with that name in the current symbol table and adds it to the output array such that the variable name becomes the key and the contents of the variable become the value for that key. In short, it does the opposite of extract(). 
Note: 
Before PHP 7.3, any strings that are not set will silently be skipped.
</Desc>
    <FName>connection_aborted</FName>
    <Desc>int connection_aborted ( void )
Checks whether the client disconnected.
</Desc>
    <FName>connection_status</FName>
    <Desc>int connection_status ( void )
Gets the connection status bitfield.
</Desc>
    <FName>constant</FName>
    <Desc>mixed constant ( string $name )
Return the value of the constant indicated by name. 
constant() is useful if you need to retrieve the value of a constant, but do not know its name. I.e. it is stored in a variable or returned by a function. 
This function works also with class constants.
</Desc>
    <FName>convert_cyr_string</FName>
    <Desc>string convert_cyr_string ( string $str , string $from , string $to )
Converts from one Cyrillic character set to another.
</Desc>
    <FName>convert_uudecode</FName>
    <Desc>string convert_uudecode ( string $data )
convert_uudecode() decodes a uuencoded string. 
Note: convert_uudecode() neither accepts the begin nor the end line, which are part of uuencoded files.
</Desc>
    <FName>convert_uuencode</FName>
    <Desc>string convert_uuencode ( string $data )
convert_uuencode() encodes a string using the uuencode algorithm. 
Uuencode translates all strings (including binary data) into printable characters, making them safe for network transmissions. Uuencoded data is about 35% larger than the original. 
Note: convert_uuencode() neither produces the begin nor the end line, which are part of uuencoded files.
</Desc>
    <FName>copy</FName>
    <Desc>bool copy ( string $source , string $dest [, resource $context ] )
Makes a copy of the file source to dest. 
If you wish to move a file, use the rename() function.
</Desc>
    <FName>cos</FName>
    <Desc>float cos ( float $arg )
cos() returns the cosine of the arg parameter. The arg parameter is in radians.
</Desc>
    <FName>cosh</FName>
    <Desc>float cosh ( float $arg )
Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))/2.
</Desc>
    <FName>count_chars</FName>
    <Desc>mixed count_chars ( string $string [, int $mode = 0 ] )
Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways.
</Desc>
    <FName>count</FName>
    <Desc>int count ( mixed $array_or_countable [, int $mode = COUNT_NORMAL ] )
Counts all elements in an array, or something in an object. 
For objects, if you have SPL installed, you can hook into count() by implementing interface Countable. The interface has exactly one method, Countable::count(), which returns the return value for the count() function. 
Please see the Array section of the manual for a detailed explanation of how arrays are implemented and used in PHP.
</Desc>
    <FName>crack_check</FName>
    <Desc>bool crack_check ( resource $dictionary , string $password )
bool crack_check ( string $password , string $username = "" , string $gecos = "" , resource $dictionary = NULL )
Performs an obscure check with the given password on the specified dictionary. The alternative signature also takes into account the username and the GECOS information. 
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>crack_closedict</FName>
    <Desc>bool crack_closedict ([ resource $dictionary ] )
crack_closedict() closes the specified dictionary identifier. 
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>crack_getlastmessage</FName>
    <Desc>string crack_getlastmessage ( void )
crack_getlastmessage() returns the message from the last obscure check. 
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>crack_opendict</FName>
    <Desc>resource crack_opendict ( string $dictionary )
crack_opendict() opens the specified CrackLib dictionary for use with crack_check(). 
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Note: 
Only one dictionary may be open at a time.
</Desc>
    <FName>crc32</FName>
    <Desc>int crc32 ( string $str )
Generates the cyclic redundancy checksum polynomial of 32-bit lengths of the str. This is usually used to validate the integrity of data being transmitted. 
Warning 
Because PHP's integer type is signed many crc32 checksums will result in negative integers on 32bit platforms. On 64bit installations all crc32() results will be positive integers though. 
So you need to use the "%u" formatter of sprintf() or printf() to get the string representation of the unsigned crc32() checksum in decimal format. 
For a hexadecimal representation of the checksum you can either use the "%x" formatter of sprintf() or printf() or the dechex() conversion functions, both of these also take care of converting the crc32() result to an unsigned integer. 
Having 64bit installations also return negative integers for higher result values was considered but would break the hexadecimal conversion as negatives would get an extra 0xFFFFFFFF######## offset then. As hexadecimal representation seems to be the most common use case we decided to not break this even if it breaks direct decimal comparisons in about 50% of the cases when moving from 32 to 64bits. 
In retrospect having the function return an integer maybe wasn't the best idea and returning a hex string representation right away (as e.g. md5() does) might have been a better plan to begin with. 
For a more portable solution you may also consider the generic hash(). hash("crc32b", $str) will return the same string as str_pad(dechex(crc32($str)), 8, '0', STR_PAD_LEFT).
</Desc>
    <FName>create_function</FName>
    <Desc>string create_function ( string $args , string $code )
Creates an anonymous function from the parameters passed, and returns a unique name for it. 
Caution 
This function internally performs an eval() and as such has the same security issues as eval(). Additionally it has bad performance and memory usage characteristics. 
If you are using PHP 5.3.0 or newer a native anonymous function should be used instead.
</Desc>
    <FName>crypt</FName>
    <Desc>string crypt ( string $str [, string $salt ] )
crypt() will return a hashed string using the standard Unix DES-based algorithm or alternative algorithms that may be available on the system. 
The salt parameter is optional. However, crypt() creates a weak hash without the salt. PHP 5.6 or later raise an E_NOTICE error without it. Make sure to specify a strong enough salt for better security. 
password_hash() uses a strong hash, generates a strong salt, and applies proper rounds automatically. password_hash() is a simple crypt() wrapper and compatible with existing password hashes. Use of password_hash() is encouraged. 
Some operating systems support more than one type of hash. In fact, sometimes the standard DES-based algorithm is replaced by an MD5-based algorithm. The hash type is triggered by the salt argument. Prior to 5.3, PHP would determine the available algorithms at install-time based on the system's crypt(). If no salt is provided, PHP will auto-generate either a standard two character (DES) salt, or a twelve character (MD5), depending on the availability of MD5 crypt(). PHP sets a constant named CRYPT_SALT_LENGTH which indicates the longest valid salt allowed by the available hashes. 
The standard DES-based crypt() returns the salt as the first two characters of the output. It also only uses the first eight characters of str, so longer strings that start with the same eight characters will generate the same result (when the same salt is used). 
On systems where the crypt() function supports multiple hash types, the following constants are set to 0 or 1 depending on whether the given type is available: 
CRYPT_STD_DES - Standard DES-based hash with a two character salt from the alphabet "./0-9A-Za-z". Using invalid characters in the salt will cause crypt() to fail. 
CRYPT_EXT_DES - Extended DES-based hash. The "salt" is a 9-character string consisting of an underscore followed by 4 bytes of iteration count and 4 bytes of salt. These are encoded as printable characters, 6 bits per character, least significant character first. The values 0 to 63 are encoded as "./0-9A-Za-z". Using invalid characters in the salt will cause crypt() to fail. 
CRYPT_MD5 - MD5 hashing with a twelve character salt starting with $1$ 
CRYPT_BLOWFISH - Blowfish hashing with a salt as follows: "$2a$", "$2x$" or "$2y$", a two digit cost parameter, "$", and 22 characters from the alphabet "./0-9A-Za-z". Using characters outside of this range in the salt will cause crypt() to return a zero-length string. The two digit cost parameter is the base-2 logarithm of the iteration count for the underlying Blowfish-based hashing algorithmeter and must be in range 04-31, values outside this range will cause crypt() to fail. Versions of PHP before 5.3.7 only support "$2a$" as the salt prefix: PHP 5.3.7 introduced the new prefixes to fix a security weakness in the Blowfish implementation. Please refer to » this document for full details of the security fix, but to summarise, developers targeting only PHP 5.3.7 and later should use "$2y$" in preference to "$2a$". 
CRYPT_SHA256 - SHA-256 hash with a sixteen character salt prefixed with $5$. If the salt string starts with 'rounds=<N>$', the numeric value of N is used to indicate how many times the hashing loop should be executed, much like the cost parameter on Blowfish. The default number of rounds is 5000, there is a minimum of 1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to the nearest limit. 
CRYPT_SHA512 - SHA-512 hash with a sixteen character salt prefixed with $6$. If the salt string starts with 'rounds=<N>$', the numeric value of N is used to indicate how many times the hashing loop should be executed, much like the cost parameter on Blowfish. The default number of rounds is 5000, there is a minimum of 1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to the nearest limit. 
Note: 
As of PHP 5.3.0, PHP contains its own implementation and will use that if the system lacks of support for one or more of the algorithms.
</Desc>
    <FName>ctype_alnum</FName>
    <Desc>bool ctype_alnum ( string $text )
Checks if all of the characters in the provided string, text, are alphanumeric.
</Desc>
    <FName>ctype_alpha</FName>
    <Desc>bool ctype_alpha ( string $text )
Checks if all of the characters in the provided string, text, are alphabetic. In the standard C locale letters are just [A-Za-z] and ctype_alpha() is equivalent to (ctype_upper($text) || ctype_lower($text)) if $text is just a single character, but other languages have letters that are considered neither upper nor lower case.
</Desc>
    <FName>ctype_cntrl</FName>
    <Desc>bool ctype_cntrl ( string $text )
Checks if all of the characters in the provided string, text, are control characters. Control characters are e.g. line feed, tab, escape.
</Desc>
    <FName>ctype_digit</FName>
    <Desc>bool ctype_digit ( string $text )
Checks if all of the characters in the provided string, text, are numerical.
</Desc>
    <FName>ctype_graph</FName>
    <Desc>bool ctype_graph ( string $text )
Checks if all of the characters in the provided string, text, creates visible output.
</Desc>
    <FName>ctype_lower</FName>
    <Desc>bool ctype_lower ( string $text )
Checks if all of the characters in the provided string, text, are lowercase letters.
</Desc>
    <FName>ctype_print</FName>
    <Desc>bool ctype_print ( string $text )
Checks if all of the characters in the provided string, text, are printable.
</Desc>
    <FName>ctype_punct</FName>
    <Desc>bool ctype_punct ( string $text )
Checks if all of the characters in the provided string, text, are punctuation character.
</Desc>
    <FName>ctype_space</FName>
    <Desc>bool ctype_space ( string $text )
Checks if all of the characters in the provided string, text, creates whitespace.
</Desc>
    <FName>ctype_upper</FName>
    <Desc>bool ctype_upper ( string $text )
Checks if all of the characters in the provided string, text, are uppercase characters.
</Desc>
    <FName>ctype_xdigit</FName>
    <Desc>bool ctype_xdigit ( string $text )
Checks if all of the characters in the provided string, text, are hexadecimal 'digits'.
</Desc>
    <FName>cubrid_affected_rows</FName>
    <Desc>int cubrid_affected_rows ([ resource $conn_identifier ] )
int cubrid_affected_rows ([ resource $req_identifier ] )
The cubrid_affected_rows() function is used to get the number of rows affected by the SQL statement (INSERT, DELETE, UPDATE).
</Desc>
    <FName>cubrid_bind</FName>
    <Desc>bool cubrid_bind ( resource $req_identifier , int $bind_index , mixed $bind_value [, string $bind_value_type ] )
The cubrid_bind() function is used to bind values to a corresponding named or question mark placeholder in the SQL statement that was passed to cubrid_prepare(). If bind_value_type is not given, string will be the default. 
Note: 
If the type of data to be bound is BLOB/CLOB, CUBRID will try to map the data as a PHP stream. If the actually bind value type is not stream, CUBRID will convert it to string, and use it as the full path and file name of a file on the client filesystem. 
If the type of data to be bound explicitly is ENUM, the $bind_value argument should be the enum element which is in string format. 
In CUBRID shard envrioment, the $bind_value_type must be included in the cubrid_bind function. 
The following table shows the types of substitute values. 
CUBRID Bind Date TypesSupportBind TypeCorresponding SQL Type
SupportedSTRINGCHAR, VARCHAR
 NCHARNCHAR, NVARCHAR
 BITBIT, VARBIT
 NUMERIC or NUMBERSHORT, INT, NUMERIC
 FLOATFLOAT
 DOUBLEDOUBLE
 TIMETIME
 DATEDATE
 TIMESTAMPTIMESTAMP
 OBJECTOBJECT
 ENUMENUM
 BLOBBLOB
 CLOBCLOB
 NULLNULL
Not supportedSETSET
 MULTISETMULTISET
 SEQUENCESEQUENCE
</Desc>
    <FName>cubrid_client_encoding</FName>
    <Desc>string cubrid_client_encoding ([ resource $conn_identifier ] )
This function returns the current CUBRID connection charset and is similar to the CUBRID function cubrid_get_charset().
</Desc>
    <FName>cubrid_close_prepare</FName>
    <Desc>bool cubrid_close_prepare ( resource $req_identifier )
The cubrid_close_prepare() function closes the request handle given by the req_identifier argument, and releases the memory region related to the handle. It is an alias of cubrid_close_request().
</Desc>
    <FName>cubrid_close_request</FName>
    <Desc>bool cubrid_close_request ( resource $req_identifier )
The cubrid_close_request() function closes the request handle given by the req_identifier argument, and releases the memory region related to the handle. It is an alias of cubrid_close_prepare().
</Desc>
    <FName>cubrid_close</FName>
    <Desc>bool cubrid_close ([ resource $conn_identifier ] )
The cubrid_close() function ends the transaction currently in process, closes the connection handle and disconnects from server. If there is any request handles not closed yet at this point, they will be closed. It is similar to the CUBRID function cubrid_disconnect().
</Desc>
    <FName>cubrid_col_get</FName>
    <Desc>array cubrid_col_get ( resource $conn_identifier , string $oid , string $attr_name )
The cubrid_col_get() function is used to get contents of the elements of the collection type (set, multiset, sequence) attribute you requested as an array.
</Desc>
    <FName>cubrid_col_size</FName>
    <Desc>int cubrid_col_size ( resource $conn_identifier , string $oid , string $attr_name )
The cubrid_col_size() function is used to get the number of elements in a collection type (set, multiset, sequence) attribute.
</Desc>
    <FName>cubrid_column_names</FName>
    <Desc>array cubrid_column_names ( resource $req_identifier )
The cubrid_column_names() function is used to get the column names of the query result by using req_identifier.
</Desc>
    <FName>cubrid_column_types</FName>
    <Desc>array cubrid_column_types ( resource $req_identifier )
The cubrid_column_types() function gets column types of query results by using req_identifier.
</Desc>
    <FName>cubrid_commit</FName>
    <Desc>bool cubrid_commit ( resource $conn_identifier )
The cubrid_commit() function is used to execute commit on the transaction pointed by conn_identifier, currently in progress. Connection to the server is closed after the cubrid_commit() function is called; However, the connection handle is still valid. 
In CUBRID PHP, auto-commit mode is disabled by default for transaction management. You can set it by using cubrid_set_autocommit(). You can get its status by using cubrid_get_autocommit(). Before you start a transaction, remember to disable the auto-commit mode.
</Desc>
    <FName>cubrid_connect_with_url</FName>
    <Desc>resource cubrid_connect_with_url ( string $conn_url [, string $userid [, string $passwd [, bool $new_link = FALSE ]]] )
The cubrid_connect_with_url() function is used to establish the environment for connecting to your server by using connection information passed with an url string argument. If the HA feature is enabled in CUBRID, you must specify the connection information of the standby server, which is used for failover when failure occurs, in the url string argument of this function. If the user name and password is not given, then the "PUBLIC" connection will be made by default. 
<url> ::= CUBRID:<host>:<db_name>:<db_user>:<db_password>:[?<properties>] 
<properties> ::= <property> [&<property>] 
<properties> ::= alhosts=<alternative_hosts>[ &rctime=<time>] 
<properties> ::= login_timeout=<milli_sec> 
<properties> ::= query_timeout=<milli_sec> 
<properties> ::= disconnect_on_query_timeout=true|false 
<alternative_hosts> ::= <standby_broker1_host>:<port> [,<standby_broker2_host>:<port>] 
<host> := HOSTNAME | IP_ADDR 
<time> := SECOND 
<milli_sec> := MILLI SECOND 
host : A host name or IP address of the master database 
db_name : A name of the database 
db_user : A name of the database user 
db_password : A database user password 
alhosts : Specifies the broker information of the standby server, which is used for failover when it is impossible to connect to the active server. You can specify multiple brokers for failover, and the connection to the brokers is attempted in the order listed in alhosts 
rctime : An interval between the attempts to connect to the active broker in which failure occurred. After a failure occurs, the system connects to the broker specified by althosts (failover), terminates the transaction, and then attempts to connect to the active broker of the master database at every rctime. The default value is 600 seconds. 
login_timeout : Timeout value (unit: msec.) for database login. The default value is 0, which means infinite postponement. 
query_timeout : Timeout value (unit: msec.) for query request. Upon timeout, a message to cancel requesting a query transferred to server is sent. The return value can depend on the disconnect_on_query_timeout configuration; even though the message to cancel a request is sent to server, that request may succeed. 
disconnect_on_query_timeout : Configures a value whether to immediately return an error of function being executed upon timeout. The default value is false. 
Note: 
? and : that are used as identifiers in PHP connection URL can't be included in the password. The following is an example of a password that is invalid to use as connection URL because it contains "?:". 
$url = "CUBRID:localhost:33000:tdb:dba:12?:?login_timeout=100"; 
Passwords that contain ? or : may be passed as a separate parameter. 
$url = "CUBRID:localhost:33000:tbd:::?login_timeout=100"; 
$conn = cubrid_connect_with_url($url, "dba", "12?"); 
If user or password is empty,you can't delete ":",the following is an example. 
$url = "CUBRID:localhost:33000:demodb:::";
</Desc>
    <FName>cubrid_connect</FName>
    <Desc>resource cubrid_connect ( string $host , int $port , string $dbname [, string $userid [, string $passwd [, bool $new_link = FALSE ]]] )
The cubrid_connect() function is used to establish the environment for connecting to your server by using your server address, port number, database name, user name, and password. If the user name and password is not given, then the "PUBLIC" connection will be made by default.
</Desc>
    <FName>cubrid_current_oid</FName>
    <Desc>string cubrid_current_oid ( resource $req_identifier )
The cubrid_current_oid() function is used to get the oid of the current cursor location from the query result. To use cubrid_current_oid(), the query executed must be a updatable query, and the CUBRID_INCLUDE_OID option must be included during the query execution.
</Desc>
    <FName>cubrid_data_seek</FName>
    <Desc>bool cubrid_data_seek ( resource $result , int $row_number )
This function performs the moving of the internal row pointer of the CUBRID result (associated with the specified result identifier) to point to a specific row number. There are functions, such as cubrid_fetch_assoc(), which use the current stored value of row number.
</Desc>
    <FName>cubrid_db_name</FName>
    <Desc>string cubrid_db_name ( array $result , int $index )
Retrieve the database name from a call to cubrid_list_dbs().
</Desc>
    <FName>cubrid_disconnect</FName>
    <Desc>bool cubrid_disconnect ([ resource $conn_identifier ] )
The cubrid_disconnect() function closes the connection handle and disconnects from server. If any request handle is not closed at this point, it will be closed. It is similar to the CUBRID MySQL compatible function cubrid_close().
</Desc>
    <FName>cubrid_drop</FName>
    <Desc>bool cubrid_drop ( resource $conn_identifier , string $oid )
The cubrid_drop() function is used to delete an instance from database by using the oid of the instance.
</Desc>
    <FName>cubrid_errno</FName>
    <Desc>int cubrid_errno ([ resource $conn_identifier ] )
Returns the error number from the last CUBRID function. 
The cubrid_errno() function is used to get the error code of the error that occurred during the API execution. Usually, it gets the error code when API returns false as its return value.
</Desc>
    <FName>cubrid_error_code_facility</FName>
    <Desc>int cubrid_error_code_facility ( void )
The cubrid_error_code_facility() function is used to get the facility code (level in which the error occurred) from the error code of the error that occurred during the API execution. Usually, you can get the error code when API returns false as its return value.
</Desc>
    <FName>cubrid_error_code</FName>
    <Desc>int cubrid_error_code ( void )
The cubrid_error_code() function is used to get the error code of the error that occurred during the API execution. Usually, it gets the error code when API returns false as its return value.
</Desc>
    <FName>cubrid_error_msg</FName>
    <Desc>string cubrid_error_msg ( void )
The cubrid_error_msg() function is used to get the error message that occurred during the use of CUBRID API. Usually, it gets error message when API returns false as its return value.
</Desc>
    <FName>cubrid_error</FName>
    <Desc>string cubrid_error ([ resource $connection ] )
The cubrid_error() function is used to get the error message that occurred during the use of CUBRID API. Usually, it gets error message when API returns false as its return value.
</Desc>
    <FName>cubrid_execute</FName>
    <Desc>resource cubrid_execute ( resource $conn_identifier , string $sql [, int $option = 0 ] )
bool cubrid_execute ( resource $request_identifier [, int $option = 0 ] )
The cubrid_execute() function is used to execute the given SQL statement. It executes the query by using conn_identifier and SQL, and then returns the request identifier created. It is used for simple execution of query, where the parameter binding is not needed. In addition, the cubrid_execute() function is used to execute the prepared statement by means of cubrid_prepare() and cubrid_bind(). At this time, you need to specify arguments of request_identifier and option. 
The option is used to determine whether to get OID after query execution and whether to execute the query in synchronous or asynchronous mode. CUBRID_INCLUDE_OID and CUBRID_ASYNC (or CUBRID_EXEC_QUERY_ALL if you want to execute multiple SQL statements) can be specified by using a bitwise OR operator. If not specified, neither of them isselected. If the flag CUBRID_EXEC_QUERY_ALL is set, a synchronous mode (sync_mode) is used to retrieve query results, and in such cases the following rules are applied: 
The return value is the result of the first query. 
If an error occurs in any query, the execution is processed as a failure. 
In a query composed of q1 q2 q3, if an error occurs in q2 after q1 succeeds the execution, the result of q1 remains valid. That is, the previous successful query executions are not rolled back when an error occurs. 
If a query is executed successfully, the result of the second query can be obtained using cubrid_next_result(). 
If the first argument is request_identifier to execute the cubrid_prepare() function, you can specify an option, CUBRID_ASYNC only.
</Desc>
    <FName>cubrid_fetch_array</FName>
    <Desc>array cubrid_fetch_array ( resource $result [, int $type = CUBRID_BOTH ] )
The cubrid_fetch_array() function is used to get a single row from the query result and returns an array. The cursor automatically moves to the next row after getting the result.
</Desc>
    <FName>cubrid_fetch_assoc</FName>
    <Desc>array cubrid_fetch_assoc ( resource $result [, int $type ] )
This function returns the associative array, that corresponds to the fetched row, and then moves the internal data pointer ahead, or returns FALSE when the end is reached.
</Desc>
    <FName>cubrid_fetch_field</FName>
    <Desc>object cubrid_fetch_field ( resource $result [, int $field_offset = 0 ] )
This function returns an object with certain properties of the specific column. The properties of the object are: 
name 
column name
table 
name of the table that the column belongs to
def 
default value of the column
max_length 
maximum length of the column
not_null 
1 if the column cannot be NULL
primary_key 
1 if the column is a primary key
unique_key 
1 if the column is an unique key
multiple_key 
1 if the column is a non-unique key
numeric 
1 if the column is numeric
blob 
1 if the column is a BLOB
type 
the type of the column
unsigned 
1 if the column is unsigned
zerofill 
1 if the column is zero-filled
</Desc>
    <FName>cubrid_fetch_lengths</FName>
    <Desc>array cubrid_fetch_lengths ( resource $result )
This function returns an numeric array with the lengths of the values of each field from the current row of the result set or it returns FALSE on failure. 
Note: 
If field data type is BLOB/CLOB, you should get its length by using cubrid_lob_size().
</Desc>
    <FName>cubrid_fetch_object</FName>
    <Desc>object cubrid_fetch_object ( resource $result [, string $class_name [, array $params [, int $type ]]] )
This function returns an object with the column names of the result set as properties. The values of these properties are extracted from the current row of the result.
</Desc>
    <FName>cubrid_fetch_row</FName>
    <Desc>array cubrid_fetch_row ( resource $result [, int $type ] )
This function returns a numerical array with the values of the current row from the result set, starting from 0, and moves the internal data pointer ahead.
</Desc>
    <FName>cubrid_fetch</FName>
    <Desc>mixed cubrid_fetch ( resource $result [, int $type = CUBRID_BOTH ] )
The cubrid_fetch() function is used to get a single row from the query result. The cursor automatically moves to the next row after getting the result.
</Desc>
    <FName>cubrid_field_flags</FName>
    <Desc>string cubrid_field_flags ( resource $result , int $field_offset )
This function returns a string with the flags of the given field offset separated by space. You can split the returned value using explode. The possible flags could be: not_null, primary_key, unique_key, foreign_key, auto_increment, shared, reverse_index, reverse_unique and timestamp.
</Desc>
    <FName>cubrid_field_len</FName>
    <Desc>int cubrid_field_len ( resource $result , int $field_offset )
This function returns the maximum length of the specified field on success, or it returns FALSE on failure.
</Desc>
    <FName>cubrid_field_name</FName>
    <Desc>string cubrid_field_name ( resource $result , int $field_offset )
This function returns the name of the specified field index on success or it returns FALSE on failure.
</Desc>
    <FName>cubrid_field_seek</FName>
    <Desc>bool cubrid_field_seek ( resource $result [, int $field_offset = 0 ] )
This function moves the result set cursor to the specified field offset. This offset is used by cubrid_fetch_field() if it doesn't include a field offset. It returns TRUE on success or FALSE on failure.
</Desc>
    <FName>cubrid_field_table</FName>
    <Desc>string cubrid_field_table ( resource $result , int $field_offset )
This function returns the name of the table of the specified field. This is useful when using large select queries with JOINS.
</Desc>
    <FName>cubrid_field_type</FName>
    <Desc>string cubrid_field_type ( resource $result , int $field_offset )
This function returns the type of the column corresponding to the given field offset. The returned field type could be one of the following: "int", "real", "string", etc.
</Desc>
    <FName>cubrid_free_result</FName>
    <Desc>bool cubrid_free_result ( resource $req_identifier )
This function frees the memory occupied by the result data. It returns TRUE on success or FALSE on failure. Note that it can only frees the client fetch buffer now, and if you want free all memory, use function cubrid_close_request().
</Desc>
    <FName>cubrid_get_autocommit</FName>
    <Desc>bool cubrid_get_autocommit ( resource $conn_identifier )
The cubrid_get_autocommit() function is used to get the status of CUBRID database connection auto-commit mode. 
For CUBRID 8.4.0, auto-commit mode is disabled by default for transaction management. 
For CUBRID 8.4.1, auto-commit mode is enabled by default for transaction management.
</Desc>
    <FName>cubrid_get_charset</FName>
    <Desc>string cubrid_get_charset ( resource $conn_identifier )
This function returns the current CUBRID connection charset and is similar to the CUBRID MySQL compatible function cubrid_client_encoding().
</Desc>
    <FName>cubrid_get_class_name</FName>
    <Desc>string cubrid_get_class_name ( resource $conn_identifier , string $oid )
The cubrid_get_class_name() function is used to get the class name from oid. It doesn't work when selecting data from the system tables, for example db_class.
</Desc>
    <FName>cubrid_get_client_info</FName>
    <Desc>string cubrid_get_client_info ( void )
This function returns a string that represents the client library version.
</Desc>
    <FName>cubrid_get_db_parameter</FName>
    <Desc>array cubrid_get_db_parameter ( resource $conn_identifier )
This function returns the CUBRID database parameters or it returns FALSE on failure. It returns an associative array with the values for the following parameters: 
PARAM_ISOLATION_LEVEL 
PARAM_LOCK_TIMEOUT 
PARAM_MAX_STRING_LENGTH 
PARAM_AUTO_COMMIT 
Database parametersParameterDescription
PARAM_ISOLATION_LEVELThe transaction isolation level.
LOCK_TIMEOUTCUBRID provides the lock timeout feature, which sets the waiting time (in seconds) for the lock until the transaction lock setting is allowed. The default value of the lock_timeout_in_secs parameter is -1, which means the application client will wait indefinitely until the transaction lock is allowed. 
PARAM_AUTO_COMMITIn CUBRID PHP, auto-commit mode is disabled by default for transaction management. It can be set by using cubrid_set_autocommit(). 

The following table shows the isolation levels from 1 to 6. It consists of table schema (row) and isolation level: Levels of Isolation Supported by CUBRIDNameDescription
SERIALIZABLE (6)In this isolation level, problems concerning concurrency (e.g. dirty read, non-repeatable read, phantom read, etc.) do not occur.
REPEATABLE READ CLASS with REPEATABLE READ INSTANCES (5)Another transaction T2 cannot update the schema of table A while transaction T1 is viewing table A. Transaction T1 may experience phantom read for the record R that was inserted by another transaction T2 when it is repeatedly retrieving a specific record.
REPEATABLE READ CLASS with READ COMMITTED INSTANCES (or CURSOR STABILITY) (4)Another transaction T2 cannot update the schema of table A while transaction T1 is viewing table A. Transaction T1 may experience R read (non-repeatable read) that was updated and committed by another transaction T2 when it is repeatedly retrieving the record R.
REPEATABLE READ CLASS with READ UNCOMMITTED INSTANCES (3)Default isolation level. Another transaction T2 cannot update the schema of table A while transaction T1 is viewing table A. Transaction T1 may experience R' read (dirty read) for the record that was updated but not committed by another transaction T2.
READ COMMITTED CLASS with READ COMMITTED INSTANCES (2)Transaction T1 may experience A' read (non-repeatable read) for the table that was updated and committed by another transaction T2 while it is viewing table A repeatedly. Transaction T1 may experience R' read (non-repeatable read) for the record that was updated and committed by another transaction T2 while it is retrieving the record R repeatedly.
READ COMMITTED CLASS with READ UNCOMMITTED INSTANCES (1)Transaction T1 may experience A' read (non-repeatable read) for the table that was updated and committed by another transaction T2 while it is repeatedly viewing table A. Transaction T1 may experience R' read (dirty read) for the record that was updated but not committed by another transaction T2.
</Desc>
    <FName>cubrid_get_query_timeout</FName>
    <Desc>int cubrid_get_query_timeout ( resource $req_identifier )
The cubrid_get_query_timeout() function is used to get the query timeout of the request.
</Desc>
    <FName>cubrid_get_server_info</FName>
    <Desc>string cubrid_get_server_info ( resource $conn_identifier )
This function returns a string that represents the CUBRID server version.
</Desc>
    <FName>cubrid_get</FName>
    <Desc>mixed cubrid_get ( resource $conn_identifier , string $oid [, mixed $attr ] )
The cubrid_get() function is used to get the attribute of the instance of the given oid. You can get single attribute by using string data type for the attr argument, or many attributes by using array data type for the attr argument.
</Desc>
    <FName>cubrid_insert_id</FName>
    <Desc>string cubrid_insert_id ([ resource $conn_identifier ] )
The cubrid_insert_id() function retrieves the ID generated for the AUTO_INCREMENT column which is updated by the previous INSERT query. It returns 0 if the previous query does not generate new rows, or FALSE on failure. 
Note: 
CUBRID supports AUTO_INCREMENT for more than one columns in a table. In most cases, there will be a single AUTO_INCREMENT column in a table. If there are multiple AUTO_INCREMENT columns, this function should not be used even if it will return a value.
</Desc>
    <FName>cubrid_is_instance</FName>
    <Desc>int cubrid_is_instance ( resource $conn_identifier , string $oid )
The cubrid_is_instance() function is used to check whether the instance pointed by the given oid exists or not.
</Desc>
    <FName>cubrid_list_dbs</FName>
    <Desc>array cubrid_list_dbs ([ resource $conn_identifier ] )
This function returns an array with the list of all existing Cubrid databases.
</Desc>
    <FName>cubrid_load_from_glo</FName>
    <Desc>int cubrid_load_from_glo ( resource $conn_identifier , string $oid , string $file_name )
The cubrid_load_from_glo() function is used to read a data from a glo instance, and saves it in a designated file.
</Desc>
    <FName>cubrid_lob_close</FName>
    <Desc>bool cubrid_lob_close ( array $lob_identifier_array )
cubrid_lob_close() is used to close all BLOB/CLOB returned from cubrid_lob_get().
</Desc>
    <FName>cubrid_lob_export</FName>
    <Desc>bool cubrid_lob_export ( resource $conn_identifier , resource $lob_identifier , string $path_name )
cubrid_lob_export() is used to get BLOB/CLOB data from CUBRID database, and saves its contents to a file. To use this function, you must use cubrid_lob_get() first to get BLOB/CLOB info from CUBRID.
</Desc>
    <FName>cubrid_lob_get</FName>
    <Desc>array cubrid_lob_get ( resource $conn_identifier , string $sql )
cubrid_lob_get() is used to get BLOB/CLOB meta info from CUBRID database, CUBRID gets BLOB/CLOB by executing the SQL statement, and returns all LOBs as a resource array. Be sure that the SQL retrieves only one column and its data type is BLOB or CLOB. 
Remember to use cubrid_lob_close() to release the LOBs if you don't need it any more.
</Desc>
    <FName>cubrid_lob_send</FName>
    <Desc>bool cubrid_lob_send ( resource $conn_identifier , resource $lob_identifier )
cubrid_lob_send() reads BLOB/CLOB data and passes it straight through to the browser. To use this function, you must use cubrid_lob_get() first to get BLOB/CLOB info from CUBRID.
</Desc>
    <FName>cubrid_lob_size</FName>
    <Desc>string cubrid_lob_size ( resource $lob_identifier )
cubrid_lob_size() is used to get BLOB/CLOB data size.
</Desc>
    <FName>cubrid_lob2_bind</FName>
    <Desc>bool cubrid_lob2_bind ( resource $req_identifier , int $bind_index , mixed $bind_value [, string $bind_value_type ] )
The cubrid_lob2_bind() function is used to bind BLOB/CLOB datas to a corresponding question mark placeholder in the SQL statement that was passed to cubrid_prepare(). If bind_value_type is not given, string will be "BLOB" as the default. But if you use cubrid_lob2_new() before, bind_value_type will be consistent with type in cubrid_lob2_new() as the default.
</Desc>
    <FName>cubrid_lob2_close</FName>
    <Desc>bool cubrid_lob2_close ( resource $lob_identifier )
The cubrid_lob2_close() function is used to close LOB object returned from cubrid_lob2_new() or got from the result set.
</Desc>
    <FName>cubrid_lob2_export</FName>
    <Desc>bool cubrid_lob2_export ( resource $lob_identifier , string $file_name )
The cubrid_lob2_export() function is used to save the contents of BLOB/CLOB data to a file. To use this function, you must use cubrid_lob2_new() or fetch a lob object from CUBRID database first. If the file already exists, the operation will fail. This function will not influence the cursor position of the lob object. It operates the entire lob object.
</Desc>
    <FName>cubrid_lob2_import</FName>
    <Desc>bool cubrid_lob2_import ( resource $lob_identifier , string $file_name )
The cubrid_lob2_import() function is used to save the contents of BLOB/CLOB data from a file. To use this function, you must use cubrid_lob2_new() or fetch a lob object from CUBRID database first. If the file already exists, the operation will fail. This function will not influence the cursor position of the lob object. It operates the entire lob object.
</Desc>
    <FName>cubrid_lob2_new</FName>
    <Desc>resource cubrid_lob2_new ([ resource $conn_identifier [, string $type = "BLOB" ]] )
The cubrid_lob2_new() function is used to create a lob object (both BLOB and CLOB). This function should be used before you bind a lob object.
</Desc>
    <FName>cubrid_lob2_read</FName>
    <Desc>string cubrid_lob2_read ( resource $lob_identifier , int $len )
The cubrid_lob2_read() function reads len bytes from the LOB data and returns the bytes read.
</Desc>
    <FName>cubrid_lob2_seek</FName>
    <Desc>bool cubrid_lob2_seek ( resource $lob_identifier , int $offset [, int $origin = CUBRID_CURSOR_CURRENT ] )
The cubrid_lob2_seek() function is used to move the cursor position of a lob object by the value set in the offset argument, to the direction set in the origin argument. 
To set the origin argument, you can use CUBRID_CURSOR_FIRST to set the cursor position moving forward offset units from the first beginning. In this case, offset must be a positive value. 
If you use CUBRID_CURSOR_CURRENT for origin, you can move forward or backward. and offset can be positive or negative. 
If you use CUBRID_CURSOR_LAST for origin, you can move backward offset units from the end of LOB object and offset only can be positive.
</Desc>
    <FName>cubrid_lob2_seek64</FName>
    <Desc>bool cubrid_lob2_seek64 ( resource $lob_identifier , string $offset [, int $origin = CUBRID_CURSOR_CURRENT ] )
The cubrid_lob2_seek64() function is used to move the cursor position of a lob object by the value set in the offset argument, to the direction set in the origin argument. If the offset you want to move is larger than an integer data can be stored, you can use this function. 
To set the origin argument, you can use CUBRID_CURSOR_FIRST to set the cursor position moving forward offset units from the first beginning. In this case, offset must be a positive value. 
If you use CUBRID_CURSOR_CURRENT for origin, you can move forward or backward. and offset can be positive or negative. 
If you use CUBRID_CURSOR_LAST for origin, you can move backward offset units from the end of LOB object and offset only can be positive. 
Note: 
If you use this function to move the cursor position of the lob object, you should pass offset as a string.
</Desc>
    <FName>cubrid_lob2_size</FName>
    <Desc>int cubrid_lob2_size ( resource $lob_identifier )
The cubrid_lob2_size() function is used to get the size of a lob object.
</Desc>
    <FName>cubrid_lob2_size64</FName>
    <Desc>string cubrid_lob2_size64 ( resource $lob_identifier )
The cubrid_lob2_size64() function is used to get the size of a lob object. If the size of a lob object is larger than an integer data can be stored, you can use this function and it will return the size as a string.
</Desc>
    <FName>cubrid_lob2_tell</FName>
    <Desc>int cubrid_lob2_tell ( resource $lob_identifier )
The cubrid_lob2_tell() function is used to tell the cursor position of the LOB object.
</Desc>
    <FName>cubrid_lob2_tell64</FName>
    <Desc>string cubrid_lob2_tell64 ( resource $lob_identifier )
The cubrid_lob2_tell64() function is used to tell the cursor position of the LOB object. If the size of a lob object is larger than an integer data can be stored, you can use this function and it will return the position information as a string.
</Desc>
    <FName>cubrid_lob2_write</FName>
    <Desc>bool cubrid_lob2_write ( resource $lob_identifier , string $buf )
The cubrid_lob2_write() function reads as much as data from buf and stores it to the LOB object. Note that this function can only append characters now.
</Desc>
    <FName>cubrid_lock_read</FName>
    <Desc>bool cubrid_lock_read ( resource $conn_identifier , string $oid )
The cubrid_lock_read() function is used to put read lock on the instance pointed by given oid.
</Desc>
    <FName>cubrid_lock_write</FName>
    <Desc>bool cubrid_lock_write ( resource $conn_identifier , string $oid )
The cubrid_lock_write() function is used to put write lock on the instance pointed by the given oid.
</Desc>
    <FName>cubrid_move_cursor</FName>
    <Desc>bool cubrid_move_cursor ( resource $req_identifier , int $offset [, int $origin = CUBRID_CURSOR_CURRENT ] )
The cubrid_move_cursor() function is used to move the current cursor location of req_identifier by the value set in the offset argument, to the direction set in the origin argument. To set the origin argument, you can use CUBRID_CURSOR_FIRST for the first part of the result, CUBRID_CURSOR_CURRENT for the current location of the result, or CUBRID_CURSOR_LAST for the last part of the result. If origin argument is not explicitly designated, then the function uses CUBRID_CURSOR_CURRENT as its default value. 
If the value of cursor movement range goes over the valid limit, then the cursor moves to the next location after the valid range for the cursor. For example, if you move 20 units in the result with the size of 10, then the cursor will move to 11th place and return CUBRID_NO_MORE_DATA.
</Desc>
    <FName>cubrid_new_glo</FName>
    <Desc>string cubrid_new_glo ( resource $conn_identifier , string $class_name , string $file_name )
The cubrid_new_glo() function is used to create a glo instance in the requested class (glo class). The glo created is a LO type, and is stored in the file_name file.
</Desc>
    <FName>cubrid_next_result</FName>
    <Desc>bool cubrid_next_result ( resource $result )
The cubrid_next_result() function is used to get results of next query if multiple SQL statements are executed and CUBRID_EXEC_QUERY_ALL flag is set upon cubrid_execute().
</Desc>
    <FName>cubrid_num_cols</FName>
    <Desc>int cubrid_num_cols ( resource $result )
The cubrid_num_cols() function is used to get the number of columns from the query result. It can only be used when the query executed is a select statement.
</Desc>
    <FName>cubrid_num_fields</FName>
    <Desc>int cubrid_num_fields ( resource $result )
This function returns the number of columns in the result set, on success, or it returns FALSE on failure.
</Desc>
    <FName>cubrid_num_rows</FName>
    <Desc>int cubrid_num_rows ( resource $result )
The cubrid_num_rows() function is used to get the number of rows from the query result. You can use it only when the query executed is a select statement. When you want to know such value for INSERT, UPDATE, or DELETE query, you have to use the cubrid_affected_rows() function. 
Note: The cubrid_num_rows() function can only be used for synchronous query; it returns 0 when it is used for asynchronous query.
</Desc>
    <FName>cubrid_pconnect_with_url</FName>
    <Desc>resource cubrid_pconnect_with_url ( string $conn_url [, string $userid [, string $passwd ]] )
Establishes a persistent connection to a CUBRID server. 
cubrid_pconnect_with_url() acts very much like cubrid_connect_with_url() with two major differences. 
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, port, dbname and userid. If one is found, an identifier for it will be returned instead of opening a new connection. 
Second, the connection to the SQL server will not be closed when the execution of the script ends. Instead, the link will remain open for future use (cubrid_close() or cubrid_disconnect() will not close links established by cubrid_pconnect_with_url()). 
This type of link is therefore called 'persistent'. 
<url> ::= CUBRID:<host>:<db_name>:<db_user>:<db_password>:[?<properties>] 
<properties> ::= <property> [&<property>] 
<properties> ::= alhosts=<alternative_hosts>[ &rctime=<time>] 
<properties> ::= login_timeout=<milli_sec> 
<properties> ::= query_timeout=<milli_sec> 
<properties> ::= disconnect_on_query_timeout=true|false 
<alternative_hosts> ::= <standby_broker1_host>:<port> [,<standby_broker2_host>:<port>] 
<host> := HOSTNAME | IP_ADDR 
<time> := SECOND 
<milli_sec> := MILLI SECOND 
host : A host name or IP address of the master database 
db_name : A name of the database 
db_user : A name of the database user 
db_password : A database user password 
alhosts : Specifies the broker information of the standby server, which is used for failover when it is impossible to connect to the active server. You can specify multiple brokers for failover, and the connection to the brokers is attempted in the order listed in alhosts 
rctime : An interval between the attempts to connect to the active broker in which failure occurred. After a failure occurs, the system connects to the broker specified by althosts (failover), terminates the transaction, and then attempts to connect to the active broker of the master database at every rctime. The default value is 600 seconds. 
login_timeout : Timeout value (unit: msec.) for database login. The default value is 0, which means infinite postponement. 
query_timeout : Timeout value (unit: msec.) for query request. Upon timeout, a message to cancel requesting a query transferred to server is sent. The return value can depend on the disconnect_on_query_timeout configuration; even though the message to cancel a request is sent to server, that request may succeed. 
disconnect_on_query_timeout : Configures a value whether to immediately return an error of function being executed upon timeout. The default value is false. 
Note: 
? and : that are used as identifiers in PHP connection URL can't be included in the password. The following is an example of a password that is invalid to use as connection URL because it contains "?:". 
$url = "CUBRID:localhost:33000:tdb:dba:12?:?login_timeout=100"; 
Passwords that contain ? or : may be passed as a separate parameter. 
$url = "CUBRID:localhost:33000:tbd:::?login_timeout=100"; 
$conn = cubrid_pconnect_with_url ($url, "dba", "12?"); 
If user or password is empty,you can't delete ":",the following is an example. 
$url = "CUBRID:localhost:33000:demodb:::";
</Desc>
    <FName>cubrid_pconnect</FName>
    <Desc>resource cubrid_pconnect ( string $host , int $port , string $dbname [, string $userid [, string $passwd ]] )
Establishes a persistent connection to a CUBRID server. 
cubrid_pconnect() acts very much like cubrid_connect() with two major differences. 
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, port, dbname and userid. If one is found, an identifier for it will be returned instead of opening a new connection. 
Second, the connection to the SQL server will not be closed when the execution of the script ends. Instead, the link will remain open for future use (cubrid_close() or cubrid_disconnect() will not close links established by cubrid_pconnect()). 
This type of link is therefore called 'persistent'.
</Desc>
    <FName>cubrid_ping</FName>
    <Desc>bool cubrid_ping ([ resource $conn_identifier ] )
Checks whether or not the connection to the server is working.
</Desc>
    <FName>cubrid_prepare</FName>
    <Desc>resource cubrid_prepare ( resource $conn_identifier , string $prepare_stmt [, int $option = 0 ] )
The cubrid_prepare() function is a sort of API which represents SQL statements compiled previously to a given connection handle. This pre-compiled SQL statement will be included in the cubrid_prepare(). 
Accordingly, you can use this statement effectively to execute several times repeatedly or to process long data. Only a single statement can be used and a parameter may put a question mark (?) to appropriate area in the SQL statement. Add a parameter when you bind a value in the VALUES clause of INSERT statement or in the WHERE clause. Note that it is allowed to bind a value to a MARK(?) by using the cubrid_bind() function only.
</Desc>
    <FName>cubrid_put</FName>
    <Desc>bool cubrid_put ( resource $conn_identifier , string $oid [, string $attr ], mixed $value )
The cubrid_put() function is used to update an attribute of the instance of the given oid. 
You can update single attribute by using string data type to set attr. In such case, you can use integer, floating point or string type data for the value argument. To update multiple number of attributes, you can disregard the attr argument, and set value argument with associative array data type.
</Desc>
    <FName>cubrid_query</FName>
    <Desc>resource cubrid_query ( string $query [, resource $conn_identifier ] )
cubrid_query() sends a unique query (multiple queries are not supported) to the currently active database on the server that's associated with the specified conn_identifier.
</Desc>
    <FName>cubrid_real_escape_string</FName>
    <Desc>string cubrid_real_escape_string ( string $unescaped_string [, resource $conn_identifier ] )
This function returns the escaped string version of the given string. It will escape the following characters: '. In general, single quotations are used to enclose character string. Double quotations may be used as well depending on the value of ansi_quotes, which is a parameter related to SQL statement. If the ansi_quotes value is set to no, character string enclosed by double quotations is handled as character string, not as an identifier. The default value is yes. If you want to include a single quote as part of a character string, enter two single quotes in a row.
</Desc>
    <FName>cubrid_result</FName>
    <Desc>string cubrid_result ( resource $result , int $row [, mixed $field = 0 ] )
This function returns the value of a specific field in a specific row from a result set.
</Desc>
    <FName>cubrid_rollback</FName>
    <Desc>bool cubrid_rollback ( resource $conn_identifier )
The cubrid_rollback() function executes rollback on the transaction pointed by conn_identifier, currently in progress. 
Connection to server is closed after calling cubrid_rollback(). Connection handle, however, is still valid.
</Desc>
    <FName>cubrid_save_to_glo</FName>
    <Desc>int cubrid_save_to_glo ( resource $conn_identifier , string $oid , string $file_name )
The cubrid_save_to_glo() function is used to save requested file in a glo instance.
</Desc>
    <FName>cubrid_schema</FName>
    <Desc>array cubrid_schema ( resource $conn_identifier , int $schema_type [, string $class_name [, string $attr_name ]] )
The cubrid_schema() function is used to get the requested schema information from database. You have to designate class_name, if you want to get information on certain class, attr_name, if you want to get information on certain attribute (can be used only with CUBRID_ SCH_ATTR_PRIVILEGE). 
The result of the cubrid_schema function is returned as a two-dimensional array (column (associative array) * row (numeric array)). The following tables shows types of schema and the column structure of the result array to be returned based on the schema type. 
Result Composition of Each TypeSchemaColumn NumberColumn NameValue
CUBRID_SCH_CLASS1NAME 
 2TYPE0:system class 1:vclass 2:class
CUBRID_SCH_VCLASS1NAME 
 2TYPE1:vclass
CUBRID_SCH_QUERY_SPEC1QUERY_SPEC 
CUBRID_SCH_ATTRIBUTE / CUBRID_SCH_CLASS_ATTRIBUTE1ATTR_NAME 
 2DOMAIN 
 3SCALE 
 4PRECISION 
 5INDEXED1:indexed
 6NOT NULL1:not null
 7SHARED1:shared
 8UNIQUE1:unique
 9DEFAULT 
 10ATTR_ORDERbase:1
 11CLASS_NAME 
 12SOURCE_CLASS 
 13IS_KEY1:key
CUBRID_SCH_METHOD / CUBRID_SCH_CLASS_METHOD1NAME 
 2RET_DOMAIN 
 3ARG_DOMAIN 
CUBRID_SCH_METHOD_FILE1METHOD_FILE 
CUBRID_SCH_SUPERCLASS / CUBRID_SCH_DIRECT_SUPER_CLASS / CUBRID_SCH_SUBCLASS1CLASS_NAME 
 2TYPE0:system class 1:vclass 2:class
CUBRID_SCH_CONSTRAINT1TYPE0:unique 1:index 2:reverse unique 3:reverse index
 2NAME 
 3ATTR_NAME 
 4NUM_PAGES 
 5NUM_KEYS 
 6PRIMARY_KEY1:primary key
 7KEY_ORDERbase:1
CUBRID_SCH_TRIGGER1NAME 
 2STATUS 
 3EVENT 
 4TARGET_CLASS 
 5TARGET_ATTR 
 6ACTION_TIME 
 7ACTION 
 8PRIORITY 
 9CONDITION_TIME 
 10CONDITION 
CUBRID_SCH_CLASS_PRIVILEGE / CUBRID_SCH_ATTR_PRIVILEGE1CLASS_NAME / ATTR_NAME 
 2PRIVILEGE 
 3GRANTABLE 
CUBRID_SCH_PRIMARY_KEY1CLASS_NAME 
 2ATTR_NAME 
 3KEY_SEQbase:1
 4KEY_NAME 
CUBRID_SCH_IMPORTED_KEYS / CUBRID_SCH_EXPORTED_KEYS / CUBRID_SCH_CROSS_REFERENCE1PKTABLE_NAME 
 2PKCOLUMN_NAME 
 3FKTABLE_NAMEbase:1
 4FKCOLUMN_NAME 
 5KEY_SEQbase:1
 6UPDATE_ACTION0:cascade 1:restrict 2:no action 3:set null
 7DELETE_ACTION0:cascade 1:restrict 2:no action 3:set null
 8FK_NAME 
 9PK_NAME
</Desc>
    <FName>cubrid_send_glo</FName>
    <Desc>int cubrid_send_glo ( resource $conn_identifier , string $oid )
The cubrid_send_glo() function is used to read data from glo instance and sends it to the PHP standard output.
</Desc>
    <FName>cubrid_seq_drop</FName>
    <Desc>bool cubrid_seq_drop ( resource $conn_identifier , string $oid , string $attr_name , int $index )
The cubrid_seq_drop() function is used to delete an element you request from the given sequence type attribute in the database.
</Desc>
    <FName>cubrid_seq_insert</FName>
    <Desc>bool cubrid_seq_insert ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element )
The cubrid_col_insert() function is used to insert an element to a sequence type attribute in a requested location.
</Desc>
    <FName>cubrid_seq_put</FName>
    <Desc>bool cubrid_seq_put ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element )
The cubrid_seq_put() function is used to update the content of the requested element in a sequent type attribute using OID.
</Desc>
    <FName>cubrid_set_add</FName>
    <Desc>bool cubrid_set_add ( resource $conn_identifier , string $oid , string $attr_name , string $set_element )
The cubrid_set_add() function is used to insert a single element to a set type attribute (set, multiset, sequence) you requested.
</Desc>
    <FName>cubrid_set_autocommit</FName>
    <Desc>bool cubrid_set_autocommit ( resource $conn_identifier , bool $mode )
The cubrid_set_autocommit() function is used to set the CUBRID database auto-commit mode of the current database connection. 
In CUBRID PHP, auto-commit mode is disabled by default for transaction management. When auto-commit mode is truned from off to on, any pending work is automatically committed.
</Desc>
    <FName>cubrid_set_db_parameter</FName>
    <Desc>bool cubrid_set_db_parameter ( resource $conn_identifier , int $param_type , int $param_value )
The cubrid_set_db_parameter() function is used to set the CUBRID database parameters. It can set the following CUBRID database parameters: 
PARAM_ISOLATION_LEVEL 
PARAM_LOCK_TIMEOUT 
Note: 
The auto-commit mode can be set by using cubrid_set_autocommit().
</Desc>
    <FName>cubrid_set_drop</FName>
    <Desc>bool cubrid_set_drop ( resource $conn_identifier , string $oid , string $attr_name , string $set_element )
The cubrid_set_drop() function is used to delete an element that you request from the given set type (set, multiset) attribute of the database.
</Desc>
    <FName>cubrid_set_query_timeout</FName>
    <Desc>bool cubrid_set_query_timeout ( resource $req_identifier , int $timeout )
The cubrid_set_query_timeout() function is used to set the timeout time of query execution.
</Desc>
    <FName>cubrid_unbuffered_query</FName>
    <Desc>resource cubrid_unbuffered_query ( string $query [, resource $conn_identifier ] )
This function performs a query without waiting for that all query results have been complete. It will return when the results are being generated.
</Desc>
    <FName>cubrid_version</FName>
    <Desc>string cubrid_version ( void )
The cubrid_version() function is used to get the CUBRID PHP module's version.
</Desc>
    <FName>curl_close</FName>
    <Desc>void curl_close ( resource $ch )
Closes a cURL session and frees all resources. The cURL handle, ch, is also deleted.
</Desc>
    <FName>curl_copy_handle</FName>
    <Desc>resource curl_copy_handle ( resource $ch )
Copies a cURL handle keeping the same preferences.
</Desc>
    <FName>curl_errno</FName>
    <Desc>int curl_errno ( resource $ch )
Returns the error number for the last cURL operation.
</Desc>
    <FName>curl_error</FName>
    <Desc>string curl_error ( resource $ch )
Returns a clear text error message for the last cURL operation.
</Desc>
    <FName>curl_escape</FName>
    <Desc>string curl_escape ( resource $ch , string $str )
This function URL encodes the given string according to » RFC 3986.
</Desc>
    <FName>curl_exec</FName>
    <Desc>mixed curl_exec ( resource $ch )
Execute the given cURL session. 
This function should be called after initializing a cURL session and all the options for the session are set.
</Desc>
    <FName>curl_getinfo</FName>
    <Desc>mixed curl_getinfo ( resource $ch [, int $opt ] )
Gets information about the last transfer.
</Desc>
    <FName>curl_init</FName>
    <Desc>resource curl_init ([ string $url = NULL ] )
Initializes a new session and return a cURL handle for use with the curl_setopt(), curl_exec(), and curl_close() functions.
</Desc>
    <FName>curl_multi_add_handle</FName>
    <Desc>int curl_multi_add_handle ( resource $mh , resource $ch )
Adds the ch handle to the multi handle mh
</Desc>
    <FName>curl_multi_close</FName>
    <Desc>void curl_multi_close ( resource $mh )
Closes a set of cURL handles.
</Desc>
    <FName>curl_multi_errno</FName>
    <Desc>int curl_multi_errno ( resource $mh )
Return an integer containing the last multi curl error number.
</Desc>
    <FName>curl_multi_exec</FName>
    <Desc>int curl_multi_exec ( resource $mh , int &$still_running )
Processes each of the handles in the stack. This method can be called whether or not a handle needs to read or write data.
</Desc>
    <FName>curl_multi_getcontent</FName>
    <Desc>string curl_multi_getcontent ( resource $ch )
If CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, then this function will return the content of that cURL handle in the form of a string.
</Desc>
    <FName>curl_multi_info_read</FName>
    <Desc>array curl_multi_info_read ( resource $mh [, int &$msgs_in_queue = NULL ] )
Ask the multi handle if there are any messages or information from the individual transfers. Messages may include information such as an error code from the transfer or just the fact that a transfer is completed. 
Repeated calls to this function will return a new result each time, until a FALSE is returned as a signal that there is no more to get at this point. The integer pointed to with msgs_in_queue will contain the number of remaining messages after this function was called. 
Warning 
The data the returned resource points to will not survive calling curl_multi_remove_handle().
</Desc>
    <FName>curl_multi_init</FName>
    <Desc>resource curl_multi_init ( void )
Allows the processing of multiple cURL handles asynchronously.
</Desc>
    <FName>curl_multi_remove_handle</FName>
    <Desc>int curl_multi_remove_handle ( resource $mh , resource $ch )
Removes a given ch handle from the given mh handle. When the ch handle has been removed, it is again perfectly legal to run curl_exec() on this handle. Removing the ch handle while being used, will effectively halt the transfer in progress involving that handle.
</Desc>
    <FName>curl_multi_select</FName>
    <Desc>int curl_multi_select ( resource $mh [, float $timeout = 1.0 ] )
Blocks until there is activity on any of the curl_multi connections.
</Desc>
    <FName>curl_multi_setopt</FName>
    <Desc>bool curl_multi_setopt ( resource $mh , int $option , mixed $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>curl_multi_strerror</FName>
    <Desc>string curl_multi_strerror ( int $errornum )
Returns a text error message describing the given CURLM error code.
</Desc>
    <FName>curl_pause</FName>
    <Desc>int curl_pause ( resource $ch , int $bitmask )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>curl_reset</FName>
    <Desc>void curl_reset ( resource $ch )
This function re-initializes all options set on the given cURL handle to the default values.
</Desc>
    <FName>curl_setopt_array</FName>
    <Desc>bool curl_setopt_array ( resource $ch , array $options )
Sets multiple options for a cURL session. This function is useful for setting a large number of cURL options without repetitively calling curl_setopt().
</Desc>
    <FName>curl_setopt</FName>
    <Desc>bool curl_setopt ( resource $ch , int $option , mixed $value )
Sets an option on the given cURL session handle.
</Desc>
    <FName>curl_share_close</FName>
    <Desc>void curl_share_close ( resource $sh )
Closes a cURL share handle and frees all resources.
</Desc>
    <FName>curl_share_errno</FName>
    <Desc>int curl_share_errno ( resource $sh )
Return an integer containing the last share curl error number.
</Desc>
    <FName>curl_share_init</FName>
    <Desc>resource curl_share_init ( void )
Allows to share data between cURL handles.
</Desc>
    <FName>curl_share_setopt</FName>
    <Desc>bool curl_share_setopt ( resource $sh , int $option , string $value )
Sets an option on the given cURL share handle.
</Desc>
    <FName>curl_share_strerror</FName>
    <Desc>string curl_share_strerror ( int $errornum )
Returns a text error message describing the given error code.
</Desc>
    <FName>curl_strerror</FName>
    <Desc>string curl_strerror ( int $errornum )
Returns a text error message describing the given error code.
</Desc>
    <FName>curl_unescape</FName>
    <Desc>string curl_unescape ( resource $ch , string $str )
This function decodes the given URL encoded string.
</Desc>
    <FName>curl_version</FName>
    <Desc>array curl_version ([ int $age = CURLVERSION_NOW ] )
Returns information about the cURL version.
</Desc>
    <FName>current</FName>
    <Desc>mixed current ( array $array )
Every array has an internal pointer to its "current" element, which is initialized to the first element inserted into the array.
</Desc>
    <FName>cyrus_authenticate</FName>
    <Desc>void cyrus_authenticate ( resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password ]]]]]]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>cyrus_bind</FName>
    <Desc>bool cyrus_bind ( resource $connection , array $callbacks )
Binds callbacks to a Cyrus IMAP connection.
</Desc>
    <FName>cyrus_close</FName>
    <Desc>bool cyrus_close ( resource $connection )
Closes the connection to a Cyrus IMAP server.
</Desc>
    <FName>cyrus_connect</FName>
    <Desc>resource cyrus_connect ([ string $host [, string $port [, int $flags ]]] )
Connects to a Cyrus IMAP server.
</Desc>
    <FName>cyrus_query</FName>
    <Desc>array cyrus_query ( resource $connection , string $query )
Sends a query to a Cyrus IMAP server.
</Desc>
    <FName>cyrus_unbind</FName>
    <Desc>bool cyrus_unbind ( resource $connection , string $trigger_name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>date_default_timezone_get</FName>
    <Desc>string date_default_timezone_get ( void )
In order of preference, this function returns the default timezone by: 
Reading the timezone set using the date_default_timezone_set() function (if any) 
Prior to PHP 5.4.0 only: Reading the TZ environment variable (if non empty) 
Reading the value of the date.timezone ini option (if set) 
Prior to PHP 5.4.0 only: Querying the host operating system (if supported and allowed by the OS). This uses an algorithm that has to guess the timezone. This is by no means going to work correctly for every situation. A warning is shown when this stage is reached. Do not rely on it to be guessed correctly, and set date.timezone to the correct timezone instead. 
If none of the above succeed, date_default_timezone_get() will return a default timezone of UTC.
</Desc>
    <FName>date_default_timezone_set</FName>
    <Desc>bool date_default_timezone_set ( string $timezone_identifier )
date_default_timezone_set() sets the default timezone used by all date/time functions. 
Note: 
Since PHP 5.1.0 (when the date/time functions were rewritten), every call to a date/time function will generate a E_NOTICE if the timezone isn't valid, and/or a E_WARNING message if using the system settings or the TZ environment variable. 
Instead of using this function to set the default timezone in your script, you can also use the INI setting date.timezone to set the default timezone.
</Desc>
    <FName>date_diff</FName>
    <Desc>This function is an alias of: DateTime::diff() 
</Desc>
    <FName>date_format</FName>
    <Desc>This function is an alias of: DateTime::format() 
</Desc>
    <FName>date_interval_create_from_date_string</FName>
    <Desc>This function is an alias of: DateInterval::createFromDateString() 
</Desc>
    <FName>date_interval_format</FName>
    <Desc>This function is an alias of: DateInterval::format() 
</Desc>
    <FName>date_offset_get</FName>
    <Desc>This function is an alias of: DateTime::getOffset() 
</Desc>
    <FName>date_parse_from_format</FName>
    <Desc>array date_parse_from_format ( string $format , string $date )
Returns associative array with detailed info about given date.
</Desc>
    <FName>date_parse</FName>
    <Desc>array date_parse ( string $date )
</Desc>
    <FName>date_sun_info</FName>
    <Desc>array date_sun_info ( int $time , float $latitude , float $longitude )
</Desc>
    <FName>date_sunrise</FName>
    <Desc>mixed date_sunrise ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunrise_zenith") [, float $gmt_offset = 0 ]]]]] )
date_sunrise() returns the sunrise time for a given day (specified as a timestamp) and location.
</Desc>
    <FName>date_sunset</FName>
    <Desc>mixed date_sunset ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunset_zenith") [, float $gmt_offset = 0 ]]]]] )
date_sunset() returns the sunset time for a given day (specified as a timestamp) and location.
</Desc>
    <FName>date_timestamp_get</FName>
    <Desc>This function is an alias of: DateTime::getTimestamp() 
</Desc>
    <FName>date_timezone_get</FName>
    <Desc>This function is an alias of: DateTime::getTimezone() 
</Desc>
    <FName>date</FName>
    <Desc>string date ( string $format [, int $timestamp = time() ] )
Returns a string formatted according to the given format string using the given integer timestamp or the current time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time().
</Desc>
    <FName>db2_autocommit</FName>
    <Desc>mixed db2_autocommit ( resource $connection [, bool $value ] )
Sets or gets the AUTOCOMMIT behavior of the specified connection resource.
</Desc>
    <FName>db2_bind_param</FName>
    <Desc>bool db2_bind_param ( resource $stmt , int $parameter_number , string $variable_name [, int $parameter_type [, int $data_type = 0 [, int $precision = -1 [, int $scale = 0 ]]]] )
Binds a PHP variable to an SQL statement parameter in a statement resource returned by db2_prepare(). This function gives you more control over the parameter type, data type, precision, and scale for the parameter than simply passing the variable as part of the optional input array to db2_execute().
</Desc>
    <FName>db2_client_info</FName>
    <Desc>object db2_client_info ( resource $connection )
This function returns an object with read-only properties that return information about the DB2 database client. The following table lists the DB2 client properties: DB2 client propertiesProperty nameReturn typeDescription
APPL_CODEPAGEintThe application code page.
CONN_CODEPAGEintThe code page for the current connection.
DATA_SOURCE_NAMEstringThe data source name (DSN) used to create the current connection to the database.
DRIVER_NAMEstringThe name of the library that implements the DB2 Call Level Interface (CLI) specification.
DRIVER_ODBC_VERstringThe version of ODBC that the DB2 client supports. This returns a string "MM.mm" where MM is the major version and mm is the minor version. The DB2 client always returns "03.51". 
DRIVER_VERstringThe version of the client, in the form of a string "MM.mm.uuuu" where MM is the major version, mm is the minor version, and uuuu is the update. For example, "08.02.0001" represents major version 8, minor version 2, update 1. 
ODBC_SQL_CONFORMANCEstringThe level of ODBC SQL grammar supported by the client: 
MINIMUM 
Supports the minimum ODBC SQL grammar. 
CORE 
Supports the core ODBC SQL grammar. 
EXTENDED 
Supports extended ODBC SQL grammar. 
ODBC_VERstringThe version of ODBC that the ODBC driver manager supports. This returns a string "MM.mm.rrrr" where MM is the major version, mm is the minor version, and rrrr is the release. The DB2 client always returns "03.01.0000".
</Desc>
    <FName>db2_close</FName>
    <Desc>bool db2_close ( resource $connection )
This function closes a DB2 client connection created with db2_connect() and returns the corresponding resources to the database server. 
If you attempt to close a persistent DB2 client connection created with db2_pconnect(), the close request is ignored and the persistent DB2 client connection remains available for the next caller.
</Desc>
    <FName>db2_column_privileges</FName>
    <Desc>resource db2_column_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] )
Returns a result set listing the columns and associated privileges for a table.
</Desc>
    <FName>db2_columns</FName>
    <Desc>resource db2_columns ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] )
Returns a result set listing the columns and associated metadata for a table.
</Desc>
    <FName>db2_commit</FName>
    <Desc>bool db2_commit ( resource $connection )
Commits an in-progress transaction on the specified connection resource and begins a new transaction. PHP applications normally default to AUTOCOMMIT mode, so db2_commit() is not necessary unless AUTOCOMMIT has been turned off for the connection resource.
</Desc>
    <FName>db2_conn_error</FName>
    <Desc>string db2_conn_error ([ resource $connection ] )
db2_conn_error() returns an SQLSTATE value representing the reason the last attempt to connect to a database failed. As db2_connect() returns FALSE in the event of a failed connection attempt, you do not pass any parameters to db2_conn_error() to retrieve the SQLSTATE value. 
If, however, the connection was successful but becomes invalid over time, you can pass the connection parameter to retrieve the SQLSTATE value for a specific connection. 
To learn what the SQLSTATE value means, you can issue the following command at a DB2 Command Line Processor prompt: db2 '? sqlstate-value'. You can also call db2_conn_errormsg() to retrieve an explicit error message and the associated SQLCODE value.
</Desc>
    <FName>db2_conn_errormsg</FName>
    <Desc>string db2_conn_errormsg ([ resource $connection ] )
db2_conn_errormsg() returns an error message and SQLCODE value representing the reason the last database connection attempt failed. As db2_connect() returns FALSE in the event of a failed connection attempt, do not pass any parameters to db2_conn_errormsg() to retrieve the associated error message and SQLCODE value. 
If, however, the connection was successful but becomes invalid over time, you can pass the connection parameter to retrieve the associated error message and SQLCODE value for a specific connection.
</Desc>
    <FName>db2_connect</FName>
    <Desc>resource db2_connect ( string $database , string $username , string $password [, array $options ] )
Creates a new connection to an IBM DB2 Universal Database, IBM Cloudscape, or Apache Derby database.
</Desc>
    <FName>db2_cursor_type</FName>
    <Desc>int db2_cursor_type ( resource $stmt )
Returns the cursor type used by a statement resource. Use this to determine if you are working with a forward-only cursor or scrollable cursor.
</Desc>
    <FName>db2_escape_string</FName>
    <Desc>string db2_escape_string ( string $string_literal )
Prepends backslashes to special characters in the string argument.
</Desc>
    <FName>db2_exec</FName>
    <Desc>resource db2_exec ( resource $connection , string $statement [, array $options ] )
Executes an SQL statement directly. 
If you plan to interpolate PHP variables into the SQL statement, understand that this is one of the more common security exposures. Consider calling db2_prepare() to prepare an SQL statement with parameter markers for input values. Then you can call db2_execute() to pass in the input values and avoid SQL injection attacks. 
If you plan to repeatedly issue the same SQL statement with different parameters, consider calling db2_prepare() and db2_execute() to enable the database server to reuse its access plan and increase the efficiency of your database access.
</Desc>
    <FName>db2_execute</FName>
    <Desc>bool db2_execute ( resource $stmt [, array $parameters ] )
db2_execute() executes an SQL statement that was prepared by db2_prepare(). 
If the SQL statement returns a result set, for example, a SELECT statement or a CALL to a stored procedure that returns one or more result sets, you can retrieve a row as an array from the stmt resource using db2_fetch_assoc(), db2_fetch_both(), or db2_fetch_array(). Alternatively, you can use db2_fetch_row() to move the result set pointer to the next row and fetch a column at a time from that row with db2_result(). 
Refer to db2_prepare() for a brief discussion of the advantages of using db2_prepare() and db2_execute() rather than db2_exec().
</Desc>
    <FName>db2_fetch_array</FName>
    <Desc>array db2_fetch_array ( resource $stmt [, int $row_number = -1 ] )
Returns an array, indexed by column position, representing a row in a result set. The columns are 0-indexed.
</Desc>
    <FName>db2_fetch_assoc</FName>
    <Desc>array db2_fetch_assoc ( resource $stmt [, int $row_number = -1 ] )
Returns an array, indexed by column name, representing a row in a result set.
</Desc>
    <FName>db2_fetch_both</FName>
    <Desc>array db2_fetch_both ( resource $stmt [, int $row_number = -1 ] )
Returns an array, indexed by both column name and position, representing a row in a result set. Note that the row returned by db2_fetch_both() requires more memory than the single-indexed arrays returned by db2_fetch_assoc() or db2_fetch_array().
</Desc>
    <FName>db2_fetch_object</FName>
    <Desc>object db2_fetch_object ( resource $stmt [, int $row_number = -1 ] )
Returns an object in which each property represents a column returned in the row fetched from a result set.
</Desc>
    <FName>db2_fetch_row</FName>
    <Desc>bool db2_fetch_row ( resource $stmt [, int $row_number ] )
Use db2_fetch_row() to iterate through a result set, or to point to a specific row in a result set if you requested a scrollable cursor. 
To retrieve individual fields from the result set, call the db2_result() function. 
Rather than calling db2_fetch_row() and db2_result(), most applications will call one of db2_fetch_assoc(), db2_fetch_both(), or db2_fetch_array() to advance the result set pointer and return a complete row as an array.
</Desc>
    <FName>db2_field_display_size</FName>
    <Desc>int db2_field_display_size ( resource $stmt , mixed $column )
Returns the maximum number of bytes required to display a column in a result set.
</Desc>
    <FName>db2_field_name</FName>
    <Desc>string db2_field_name ( resource $stmt , mixed $column )
Returns the name of the specified column in the result set.
</Desc>
    <FName>db2_field_num</FName>
    <Desc>int db2_field_num ( resource $stmt , mixed $column )
Returns the position of the named column in a result set.
</Desc>
    <FName>db2_field_precision</FName>
    <Desc>int db2_field_precision ( resource $stmt , mixed $column )
Returns the precision of the indicated column in a result set.
</Desc>
    <FName>db2_field_scale</FName>
    <Desc>int db2_field_scale ( resource $stmt , mixed $column )
Returns the scale of the indicated column in a result set.
</Desc>
    <FName>db2_field_type</FName>
    <Desc>string db2_field_type ( resource $stmt , mixed $column )
Returns the data type of the indicated column in a result set.
</Desc>
    <FName>db2_field_width</FName>
    <Desc>int db2_field_width ( resource $stmt , mixed $column )
Returns the width of the current value of the indicated column in a result set. This is the maximum width of the column for a fixed-length data type, or the actual width of the column for a variable-length data type.
</Desc>
    <FName>db2_foreign_keys</FName>
    <Desc>resource db2_foreign_keys ( resource $connection , string $qualifier , string $schema , string $table-name )
Returns a result set listing the foreign keys for a table.
</Desc>
    <FName>db2_free_result</FName>
    <Desc>bool db2_free_result ( resource $stmt )
Frees the system and database resources that are associated with a result set. These resources are freed implicitly when a script finishes, but you can call db2_free_result() to explicitly free the result set resources before the end of the script.
</Desc>
    <FName>db2_free_stmt</FName>
    <Desc>bool db2_free_stmt ( resource $stmt )
Frees the system and database resources that are associated with a statement resource. These resources are freed implicitly when a script finishes, but you can call db2_free_stmt() to explicitly free the statement resources before the end of the script.
</Desc>
    <FName>db2_get_option</FName>
    <Desc>string db2_get_option ( resource $resource , string $option )
Retrieves the value of a specified option value for a statement resource or a connection resource.
</Desc>
    <FName>db2_last_insert_id</FName>
    <Desc>string db2_last_insert_id ( resource $resource )
Returns the auto generated ID of the last insert query that successfully executed on this connection. 
The result of this function is not affected by any of the following: 
A single row INSERT statement with a VALUES clause for a table without an identity column. 
A multiple row INSERT statement with a VALUES clause. 
An INSERT statement with a fullselect. 
A ROLLBACK TO SAVEPOINT statement.
</Desc>
    <FName>db2_lob_read</FName>
    <Desc>string db2_lob_read ( resource $stmt , int $colnum , int $length )
Use db2_lob_read() to iterate through a specified column of a result set and retrieve a user defined size of LOB data.
</Desc>
    <FName>db2_next_result</FName>
    <Desc>resource db2_next_result ( resource $stmt )
A stored procedure can return zero or more result sets. While you handle the first result set in exactly the same way you would handle the results returned by a simple SELECT statement, to fetch the second and subsequent result sets from a stored procedure you must call the db2_next_result() function and return the result to a uniquely named PHP variable.
</Desc>
    <FName>db2_num_fields</FName>
    <Desc>int db2_num_fields ( resource $stmt )
Returns the number of fields contained in a result set. This is most useful for handling the result sets returned by dynamically generated queries, or for result sets returned by stored procedures, where your application cannot otherwise know how to retrieve and use the results.
</Desc>
    <FName>db2_num_rows</FName>
    <Desc>int db2_num_rows ( resource $stmt )
Returns the number of rows deleted, inserted, or updated by an SQL statement. 
To determine the number of rows that will be returned by a SELECT statement, issue SELECT COUNT(*) with the same predicates as your intended SELECT statement and retrieve the value. 
If your application logic checks the number of rows returned by a SELECT statement and branches if the number of rows is 0, consider modifying your application to attempt to return the first row with one of db2_fetch_assoc(), db2_fetch_both(), db2_fetch_array(), or db2_fetch_row(), and branch if the fetch function returns FALSE. 
Note: 
If you issue a SELECT statement using a scrollable cursor, db2_num_rows() returns the number of rows returned by the SELECT statement. However, the overhead associated with scrollable cursors significantly degrades the performance of your application, so if this is the only reason you are considering using scrollable cursors, you should use a forward-only cursor and either call SELECT COUNT(*) or rely on the boolean return value of the fetch functions to achieve the equivalent functionality with much better performance.
</Desc>
    <FName>db2_pclose</FName>
    <Desc>bool db2_pclose ( resource $resource )
This function closes a DB2 client connection created with db2_pconnect() and returns the corresponding resources to the database server. 
Note: 
This function is only available on i5/OS in response to i5/OS system administration requests. 
If you have a persistent DB2 client connection created with db2_pconnect(), you may use this function to close the connection. To avoid substantial connection performance penalties, this function should only be used in rare cases when the persistent connection has become unresponsive or the persistent connection will not be needed for a long period of time.
</Desc>
    <FName>db2_pconnect</FName>
    <Desc>resource db2_pconnect ( string $database , string $username , string $password [, array $options ] )
Returns a persistent connection to an IBM DB2 Universal Database, IBM Cloudscape, or Apache Derby database. 
For more information on persistent connections, refer to Persistent Database Connections. 
Calling db2_close() on a persistent connection always returns TRUE, but the underlying DB2 client connection remains open and waiting to serve the next matching db2_pconnect() request. 
Users running version 1.9.0 or later of ibm_db2 should be aware that the extension will perform a transaction rollback on persistent connections at the end of a request, thus ending the transaction. This prevents the transaction block from carrying over to the next request which uses that connection if script execution ends before the transaction block does.
</Desc>
    <FName>db2_prepare</FName>
    <Desc>resource db2_prepare ( resource $connection , string $statement [, array $options ] )
db2_prepare() creates a prepared SQL statement which can include 0 or more parameter markers (? characters) representing parameters for input, output, or input/output. You can pass parameters to the prepared statement using db2_bind_param(), or for input values only, as an array passed to db2_execute(). 
There are three main advantages to using prepared statements in your application: 
Performance: when you prepare a statement, the database server creates an optimized access plan for retrieving data with that statement. Subsequently issuing the prepared statement with db2_execute() enables the statements to reuse that access plan and avoids the overhead of dynamically creating a new access plan for every statement you issue. 
Security: when you prepare a statement, you can include parameter markers for input values. When you execute a prepared statement with input values for placeholders, the database server checks each input value to ensure that the type matches the column definition or parameter definition. 
Advanced functionality: Parameter markers not only enable you to pass input values to prepared SQL statements, they also enable you to retrieve OUT and INOUT parameters from stored procedures using db2_bind_param().
</Desc>
    <FName>db2_primary_keys</FName>
    <Desc>resource db2_primary_keys ( resource $connection , string $qualifier , string $schema , string $table-name )
Returns a result set listing the primary keys for a table.
</Desc>
    <FName>db2_procedure_columns</FName>
    <Desc>resource db2_procedure_columns ( resource $connection , string $qualifier , string $schema , string $procedure , string $parameter )
Returns a result set listing the parameters for one or more stored procedures.
</Desc>
    <FName>db2_procedures</FName>
    <Desc>resource db2_procedures ( resource $connection , string $qualifier , string $schema , string $procedure )
Returns a result set listing the stored procedures registered in a database.
</Desc>
    <FName>db2_result</FName>
    <Desc>mixed db2_result ( resource $stmt , mixed $column )
Use db2_result() to return the value of a specified column in the current row of a result set. You must call db2_fetch_row() before calling db2_result() to set the location of the result set pointer.
</Desc>
    <FName>db2_rollback</FName>
    <Desc>bool db2_rollback ( resource $connection )
Rolls back an in-progress transaction on the specified connection resource and begins a new transaction. PHP applications normally default to AUTOCOMMIT mode, so db2_rollback() normally has no effect unless AUTOCOMMIT has been turned off for the connection resource.
</Desc>
    <FName>db2_server_info</FName>
    <Desc>object db2_server_info ( resource $connection )
This function returns an object with read-only properties that return information about the IBM DB2, Cloudscape, or Apache Derby database server. The following table lists the database server properties: Database server propertiesProperty nameReturn typeDescription
DBMS_NAMEstringThe name of the database server to which you are connected. For DB2 servers this is a combination of DB2 followed by the operating system on which the database server is running.
DBMS_VERstringThe version of the database server, in the form of a string "MM.mm.uuuu" where MM is the major version, mm is the minor version, and uuuu is the update. For example, "08.02.0001" represents major version 8, minor version 2, update 1. 
DB_CODEPAGEintThe code page of the database to which you are connected.
DB_NAMEstringThe name of the database to which you are connected.
DFT_ISOLATIONstringThe default transaction isolation level supported by the server: 
UR 
Uncommitted read: changes are immediately visible by all concurrent transactions. 
CS 
Cursor stability: a row read by one transaction can be altered and committed by a second concurrent transaction. 
RS 
Read stability: a transaction can add or remove rows matching a search condition or a pending transaction. 
RR 
Repeatable read: data affected by pending transaction is not available to other transactions. 
NC 
No commit: any changes are visible at the end of a successful operation. Explicit commits and rollbacks are not allowed. 
IDENTIFIER_QUOTE_CHARstringThe character used to delimit an identifier.
INST_NAMEstringThe instance on the database server that contains the database.
ISOLATION_OPTIONarrayAn array of the isolation options supported by the database server. The isolation options are described in the DFT_ISOLATION property.
KEYWORDSarrayAn array of the keywords reserved by the database server.
LIKE_ESCAPE_CLAUSEboolTRUE if the database server supports the use of % and _ wildcard characters. FALSE if the database server does not support these wildcard characters.
MAX_COL_NAME_LENintMaximum length of a column name supported by the database server, expressed in bytes.
MAX_IDENTIFIER_LENintMaximum length of an SQL identifier supported by the database server, expressed in characters.
MAX_INDEX_SIZEintMaximum size of columns combined in an index supported by the database server, expressed in bytes.
MAX_PROC_NAME_LENintMaximum length of a procedure name supported by the database server, expressed in bytes.
MAX_ROW_SIZEintMaximum length of a row in a base table supported by the database server, expressed in bytes.
MAX_SCHEMA_NAME_LENintMaximum length of a schema name supported by the database server, expressed in bytes.
MAX_STATEMENT_LENintMaximum length of an SQL statement supported by the database server, expressed in bytes.
MAX_TABLE_NAME_LENintMaximum length of a table name supported by the database server, expressed in bytes.
NON_NULLABLE_COLUMNSboolTRUE if the database server supports columns that can be defined as NOT NULL, FALSE if the database server does not support columns defined as NOT NULL.
PROCEDURESboolTRUE if the database server supports the use of the CALL statement to call stored procedures, FALSE if the database server does not support the CALL statement.
SPECIAL_CHARSstringA string containing all of the characters other than a-Z, 0-9, and underscore that can be used in an identifier name.
SQL_CONFORMANCEstringThe level of conformance to the ANSI/ISO SQL-92 specification offered by the database server: 
ENTRY 
Entry-level SQL-92 compliance. 
FIPS127 
FIPS-127-2 transitional compliance. 
FULL 
Full level SQL-92 compliance. 
INTERMEDIATE 
Intermediate level SQL-92 compliance.
</Desc>
    <FName>db2_set_option</FName>
    <Desc>bool db2_set_option ( resource $resource , array $options , int $type )
Sets options for a statement resource or a connection resource. You cannot set options for result set resources.
</Desc>
    <FName>db2_special_columns</FName>
    <Desc>resource db2_special_columns ( resource $connection , string $qualifier , string $schema , string $table_name , int $scope )
Returns a result set listing the unique row identifier columns for a table.
</Desc>
    <FName>db2_statistics</FName>
    <Desc>resource db2_statistics ( resource $connection , string $qualifier , string $schema , string $table-name , bool $unique )
Returns a result set listing the index and statistics for a table.
</Desc>
    <FName>db2_stmt_error</FName>
    <Desc>string db2_stmt_error ([ resource $stmt ] )
Returns a string containing the SQLSTATE value returned by an SQL statement. 
If you do not pass a statement resource as an argument to db2_stmt_error(), the driver returns the SQLSTATE value associated with the last attempt to return a statement resource, for example, from db2_prepare() or db2_exec(). 
To learn what the SQLSTATE value means, you can issue the following command at a DB2 Command Line Processor prompt: db2 '? sqlstate-value'. You can also call db2_stmt_errormsg() to retrieve an explicit error message and the associated SQLCODE value.
</Desc>
    <FName>db2_stmt_errormsg</FName>
    <Desc>string db2_stmt_errormsg ([ resource $stmt ] )
Returns a string containing the last SQL statement error message. 
If you do not pass a statement resource as an argument to db2_stmt_errormsg(), the driver returns the error message associated with the last attempt to return a statement resource, for example, from db2_prepare() or db2_exec().
</Desc>
    <FName>db2_table_privileges</FName>
    <Desc>resource db2_table_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table_name ]]] )
Returns a result set listing the tables and associated privileges in a database.
</Desc>
    <FName>db2_tables</FName>
    <Desc>resource db2_tables ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type ]]]] )
Returns a result set listing the tables and associated metadata in a database.
</Desc>
    <FName>dba_close</FName>
    <Desc>void dba_close ( resource $handle )
dba_close() closes the established database and frees all resources of the specified database handle.
</Desc>
    <FName>dba_delete</FName>
    <Desc>bool dba_delete ( string $key , resource $handle )
dba_delete() deletes the specified entry from the database.
</Desc>
    <FName>dba_exists</FName>
    <Desc>bool dba_exists ( string $key , resource $handle )
dba_exists() checks whether the specified key exists in the database.
</Desc>
    <FName>dba_fetch</FName>
    <Desc>string dba_fetch ( string $key , resource $handle )
string dba_fetch ( string $key , int $skip , resource $handle )
dba_fetch() fetches the data specified by key from the database specified with handle.
</Desc>
    <FName>dba_firstkey</FName>
    <Desc>string dba_firstkey ( resource $handle )
dba_firstkey() returns the first key of the database and resets the internal key pointer. This permits a linear search through the whole database.
</Desc>
    <FName>dba_handlers</FName>
    <Desc>array dba_handlers ([ bool $full_info = FALSE ] )
dba_handlers() list all the handlers supported by this extension.
</Desc>
    <FName>dba_insert</FName>
    <Desc>bool dba_insert ( string $key , string $value , resource $handle )
dba_insert() inserts the entry described with key and value into the database.
</Desc>
    <FName>dba_key_split</FName>
    <Desc>mixed dba_key_split ( mixed $key )
dba_key_split() splits a key (string representation) into an array representation.
</Desc>
    <FName>dba_list</FName>
    <Desc>array dba_list ( void )
dba_list() list all open database files.
</Desc>
    <FName>dba_nextkey</FName>
    <Desc>string dba_nextkey ( resource $handle )
dba_nextkey() returns the next key of the database and advances the internal key pointer.
</Desc>
    <FName>dba_open</FName>
    <Desc>resource dba_open ( string $path , string $mode [, string $handler [, mixed $... ]] )
dba_open() establishes a database instance for path with mode using handler.
</Desc>
    <FName>dba_optimize</FName>
    <Desc>bool dba_optimize ( resource $handle )
dba_optimize() optimizes the underlying database.
</Desc>
    <FName>dba_popen</FName>
    <Desc>resource dba_popen ( string $path , string $mode [, string $handler [, mixed $... ]] )
dba_popen() establishes a persistent database instance for path with mode using handler.
</Desc>
    <FName>dba_replace</FName>
    <Desc>bool dba_replace ( string $key , string $value , resource $handle )
dba_replace() replaces or inserts the entry described with key and value into the database specified by handle.
</Desc>
    <FName>dba_sync</FName>
    <Desc>bool dba_sync ( resource $handle )
dba_sync() synchronizes the database. This will probably trigger a physical write to the disk, if supported.
</Desc>
    <FName>dbase_add_record</FName>
    <Desc>bool dbase_add_record ( resource $dbase_identifier , array $record )
Adds the given data to the database.
</Desc>
    <FName>dbase_close</FName>
    <Desc>bool dbase_close ( resource $dbase_identifier )
Closes the given database link identifier.
</Desc>
    <FName>dbase_create</FName>
    <Desc>resource dbase_create ( string $filename , array $fields [, int $type = DBASE_TYPE_DBASE ] )
dbase_create() creates a dBase database with the given definition. If the file already exists, it is not truncated. dbase_pack() can be called to force truncation. 
Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.
Note: 
This function is affected by open_basedir.
</Desc>
    <FName>dbase_delete_record</FName>
    <Desc>bool dbase_delete_record ( resource $dbase_identifier , int $record_number )
Marks the given record to be deleted from the database. 
Note: 
To actually remove the record from the database, you must also call dbase_pack().
</Desc>
    <FName>dbase_get_header_info</FName>
    <Desc>array dbase_get_header_info ( resource $dbase_identifier )
Returns information on the column structure of the given database link identifier.
</Desc>
    <FName>dbase_get_record_with_names</FName>
    <Desc>array dbase_get_record_with_names ( resource $dbase_identifier , int $record_number )
Gets a record from a dBase database as an associative array.
</Desc>
    <FName>dbase_get_record</FName>
    <Desc>array dbase_get_record ( resource $dbase_identifier , int $record_number )
Gets a record from a database as an indexed array.
</Desc>
    <FName>dbase_numfields</FName>
    <Desc>int dbase_numfields ( resource $dbase_identifier )
Gets the number of fields (columns) in the specified database. 
Note: 
Field numbers are between 0 and dbase_numfields($db)-1, while record numbers are between 1 and dbase_numrecords($db).
</Desc>
    <FName>dbase_numrecords</FName>
    <Desc>int dbase_numrecords ( resource $dbase_identifier )
Gets the number of records (rows) in the specified database. 
Note: 
Record numbers are between 1 and dbase_numrecords($db), while field numbers are between 0 and dbase_numfields($db)-1.
</Desc>
    <FName>dbase_open</FName>
    <Desc>resource dbase_open ( string $filename , int $mode )
dbase_open() opens a dBase database with the given access mode. 
Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.
Note: 
This function is affected by open_basedir.
</Desc>
    <FName>dbase_pack</FName>
    <Desc>bool dbase_pack ( resource $dbase_identifier )
Packs the specified database by permanently deleting all records marked for deletion using dbase_delete_record(). Note that the file will be truncated after successful packing (contrary to dBASE III's PACK command).
</Desc>
    <FName>dbase_replace_record</FName>
    <Desc>bool dbase_replace_record ( resource $dbase_identifier , array $record , int $record_number )
Replaces the given record in the database with the given data.
</Desc>
    <FName>dbplus_add</FName>
    <Desc>int dbplus_add ( resource $relation , array $tuple )
Adds a tuple to a relation.
</Desc>
    <FName>dbplus_aql</FName>
    <Desc>resource dbplus_aql ( string $query [, string $server [, string $dbpath ]] )
Executes an AQL query on the given server and dbpath.
</Desc>
    <FName>dbplus_chdir</FName>
    <Desc>string dbplus_chdir ([ string $newdir ] )
Changes the virtual current directory where relation files will be looked for by dbplus_open().
</Desc>
    <FName>dbplus_close</FName>
    <Desc>mixed dbplus_close ( resource $relation )
Closes a relation previously opened by dbplus_open().
</Desc>
    <FName>dbplus_curr</FName>
    <Desc>int dbplus_curr ( resource $relation , array &$tuple )
Reads the data for the current tuple for the given relation.
</Desc>
    <FName>dbplus_errcode</FName>
    <Desc>string dbplus_errcode ([ int $errno ] )
Returns a clear error string for the given error code.
</Desc>
    <FName>dbplus_errno</FName>
    <Desc>int dbplus_errno ( void )
Returns the error code returned by the last db++ operation.
</Desc>
    <FName>dbplus_find</FName>
    <Desc>int dbplus_find ( resource $relation , array $constraints , mixed $tuple )
Places a constraint on the given relation. 
Further calls to functions like dbplus_curr() or dbplus_next() will only return tuples matching the given constraints.
</Desc>
    <FName>dbplus_first</FName>
    <Desc>int dbplus_first ( resource $relation , array &$tuple )
Reads the data for the first tuple for the given relation, makes it the current tuple and pass it back as an associative array in tuple.
</Desc>
    <FName>dbplus_flush</FName>
    <Desc>int dbplus_flush ( resource $relation )
Writes all changes applied to relation since the last flush to disk.
</Desc>
    <FName>dbplus_freealllocks</FName>
    <Desc>int dbplus_freealllocks ( void )
Frees all tuple locks held by this client.
</Desc>
    <FName>dbplus_freelock</FName>
    <Desc>int dbplus_freelock ( resource $relation , string $tuple )
Releases a write lock on the given tuple previously obtained by dbplus_getlock().
</Desc>
    <FName>dbplus_freerlocks</FName>
    <Desc>int dbplus_freerlocks ( resource $relation )
Frees all tuple locks held on the given relation.
</Desc>
    <FName>dbplus_getlock</FName>
    <Desc>int dbplus_getlock ( resource $relation , string $tuple )
Requests a write lock on the specified tuple.
</Desc>
    <FName>dbplus_getunique</FName>
    <Desc>int dbplus_getunique ( resource $relation , int $uniqueid )
Obtains a number guaranteed to be unique for the given relation and will pass it back in the variable given as uniqueid.
</Desc>
    <FName>dbplus_info</FName>
    <Desc>int dbplus_info ( resource $relation , string $key , array &$result )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>dbplus_last</FName>
    <Desc>int dbplus_last ( resource $relation , array &$tuple )
Reads the data for the last tuple for the given relation, makes it the current tuple and pass it back as an associative array in tuple.
</Desc>
    <FName>dbplus_lockrel</FName>
    <Desc>int dbplus_lockrel ( resource $relation )
Requests a write lock on the given relation. 
Other clients may still query the relation, but can't alter it while it is locked.
</Desc>
    <FName>dbplus_next</FName>
    <Desc>int dbplus_next ( resource $relation , array &$tuple )
Reads the data for the next tuple for the given relation, makes it the current tuple and will pass it back as an associative array in tuple.
</Desc>
    <FName>dbplus_open</FName>
    <Desc>resource dbplus_open ( string $name )
Opens the given relation file.
</Desc>
    <FName>dbplus_prev</FName>
    <Desc>int dbplus_prev ( resource $relation , array &$tuple )
Reads the data for the previous tuple for the given relation, makes it the current tuple and will pass it back as an associative array in tuple.
</Desc>
    <FName>dbplus_rchperm</FName>
    <Desc>int dbplus_rchperm ( resource $relation , int $mask , string $user , string $group )
Changes access permissions as specified by mask, user and group. The values for these are operating system specific.
</Desc>
    <FName>dbplus_rcreate</FName>
    <Desc>resource dbplus_rcreate ( string $name , mixed $domlist [, bool $overwrite ] )
Creates a new relation. Any existing relation sharing the same name will be overwritten if the relation is currently not in use and overwrite is set to TRUE.
</Desc>
    <FName>dbplus_rcrtexact</FName>
    <Desc>mixed dbplus_rcrtexact ( string $name , resource $relation [, bool $overwrite ] )
dbplus_rcrtexact() will create an exact but empty copy of the given relation under a new name.
</Desc>
    <FName>dbplus_rcrtlike</FName>
    <Desc>mixed dbplus_rcrtlike ( string $name , resource $relation [, int $overwrite ] )
dbplus_rcrtexact() will create an empty copy of the given relation under a new name, but with default indices.
</Desc>
    <FName>dbplus_resolve</FName>
    <Desc>array dbplus_resolve ( string $relation_name )
dbplus_resolve() will try to resolve the given relation_name and find out internal server id, real hostname and the database path on this host.
</Desc>
    <FName>dbplus_restorepos</FName>
    <Desc>int dbplus_restorepos ( resource $relation , array $tuple )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>dbplus_rkeys</FName>
    <Desc>mixed dbplus_rkeys ( resource $relation , mixed $domlist )
dbplus_rkeys() will replace the current primary key for relation with the combination of domains specified by domlist.
</Desc>
    <FName>dbplus_ropen</FName>
    <Desc>resource dbplus_ropen ( string $name )
dbplus_ropen() will open the relation file locally for quick access without any client/server overhead. Access is read only and only dbplus_curr() and dbplus_next() may be applied to the returned relation.
</Desc>
    <FName>dbplus_rquery</FName>
    <Desc>resource dbplus_rquery ( string $query [, string $dbpath ] )
dbplus_rquery() performs a local (raw) AQL query using an AQL interpreter embedded into the db++ client library. dbplus_rquery() is faster than dbplus_aql() but will work on local data only.
</Desc>
    <FName>dbplus_rrename</FName>
    <Desc>int dbplus_rrename ( resource $relation , string $name )
dbplus_rrename() will change the name of relation to name.
</Desc>
    <FName>dbplus_rsecindex</FName>
    <Desc>mixed dbplus_rsecindex ( resource $relation , mixed $domlist , int $type )
dbplus_rsecindex() will create a new secondary index for relation with consists of the domains specified by domlist and is of type type
</Desc>
    <FName>dbplus_runlink</FName>
    <Desc>int dbplus_runlink ( resource $relation )
dbplus_runlink() will close and remove the relation.
</Desc>
    <FName>dbplus_rzap</FName>
    <Desc>int dbplus_rzap ( resource $relation )
dbplus_rzap() will remove all tuples from relation.
</Desc>
    <FName>dbplus_savepos</FName>
    <Desc>int dbplus_savepos ( resource $relation )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>dbplus_setindex</FName>
    <Desc>int dbplus_setindex ( resource $relation , string $idx_name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>dbplus_setindexbynumber</FName>
    <Desc>int dbplus_setindexbynumber ( resource $relation , int $idx_number )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>dbplus_sql</FName>
    <Desc>resource dbplus_sql ( string $query [, string $server [, string $dbpath ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>dbplus_tcl</FName>
    <Desc>string dbplus_tcl ( int $sid , string $script )
A db++ server will prepare a TCL interpreter for each client connection. This interpreter will enable the server to execute TCL code provided by the client as a sort of stored procedures to improve the performance of database operations by avoiding client/server data transfers and context switches. 
dbplus_tcl() needs to pass the client connection id the TCL script code should be executed by. dbplus_resolve() will provide this connection id. The function will return whatever the TCL code returns or a TCL error message if the TCL code fails.
</Desc>
    <FName>dbplus_tremove</FName>
    <Desc>int dbplus_tremove ( resource $relation , array $tuple [, array &$current ] )
dbplus_tremove() removes tuple from relation if it perfectly matches a tuple within the relation. current, if given, will contain the data of the new current tuple after calling dbplus_tremove().
</Desc>
    <FName>dbplus_undo</FName>
    <Desc>int dbplus_undo ( resource $relation )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>dbplus_undoprepare</FName>
    <Desc>int dbplus_undoprepare ( resource $relation )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>dbplus_unlockrel</FName>
    <Desc>int dbplus_unlockrel ( resource $relation )
Release a write lock previously obtained by dbplus_lockrel().
</Desc>
    <FName>dbplus_unselect</FName>
    <Desc>int dbplus_unselect ( resource $relation )
Calling dbplus_unselect() will remove a constraint previously set by dbplus_find() on relation.
</Desc>
    <FName>dbplus_update</FName>
    <Desc>int dbplus_update ( resource $relation , array $old , array $new )
dbplus_update() replaces the old tuple with the data from the new one, only if the old completely matches a tuple within relation.
</Desc>
    <FName>dbplus_xlockrel</FName>
    <Desc>int dbplus_xlockrel ( resource $relation )
Request an exclusive lock on relation preventing even read access from other clients.
</Desc>
    <FName>dbplus_xunlockrel</FName>
    <Desc>int dbplus_xunlockrel ( resource $relation )
Releases an exclusive lock previously obtained by dbplus_xlockrel().
</Desc>
    <FName>dbx_close</FName>
    <Desc>int dbx_close ( object $link_identifier )
</Desc>
    <FName>dbx_compare</FName>
    <Desc>int dbx_compare ( array $row_a , array $row_b , string $column_key [, int $flags = DBX_CMP_ASC | DBX_CMP_NATIVE ] )
dbx_compare() is a helper function for dbx_sort() to ease the make and use of the custom sorting function.
</Desc>
    <FName>dbx_connect</FName>
    <Desc>object dbx_connect ( mixed $module , string $host , string $database , string $username , string $password [, int $persistent ] )
Opens a connection to a database.
</Desc>
    <FName>dbx_error</FName>
    <Desc>string dbx_error ( object $link_identifier )
dbx_error() returns the last error message.
</Desc>
    <FName>dbx_escape_string</FName>
    <Desc>string dbx_escape_string ( object $link_identifier , string $text )
Escape the given string so that it can safely be used in an sql-statement.
</Desc>
    <FName>dbx_fetch_row</FName>
    <Desc>mixed dbx_fetch_row ( object $result_identifier )
dbx_fetch_row() fetches rows from a result identifier that had the DBX_RESULT_UNBUFFERED flag set. 
When the DBX_RESULT_UNBUFFERED is not set in the query, dbx_fetch_row() will fail as all rows have already been fetched into the results data property. 
As a side effect, the rows property of the query-result object is incremented for each successful call to dbx_fetch_row().
</Desc>
    <FName>dbx_query</FName>
    <Desc>mixed dbx_query ( object $link_identifier , string $sql_statement [, int $flags ] )
Sends a query and fetch all results.
</Desc>
    <FName>dbx_sort</FName>
    <Desc>bool dbx_sort ( object $result , string $user_compare_function )
Sort a result from a dbx_query() call with a custom sort function.
</Desc>
    <FName>dcgettext</FName>
    <Desc>string dcgettext ( string $domain , string $message , int $category )
This function allows you to override the current domain for a single message lookup.
</Desc>
    <FName>dcngettext</FName>
    <Desc>string dcngettext ( string $domain , string $msgid1 , string $msgid2 , int $n , int $category )
This function allows you to override the current domain for a single plural message lookup.
</Desc>
    <FName>debug_backtrace</FName>
    <Desc>array debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] )
debug_backtrace() generates a PHP backtrace.
</Desc>
    <FName>debug_print_backtrace</FName>
    <Desc>void debug_print_backtrace ([ int $options = 0 [, int $limit = 0 ]] )
debug_print_backtrace() prints a PHP backtrace. It prints the function calls, included/required files and eval()ed stuff.
</Desc>
    <FName>debug_zval_dump</FName>
    <Desc>void debug_zval_dump ( mixed $variable [, mixed $... ] )
Dumps a string representation of an internal zend value to output.
</Desc>
    <FName>decbin</FName>
    <Desc>string decbin ( int $number )
Returns a string containing a binary representation of the given number argument.
</Desc>
    <FName>dechex</FName>
    <Desc>string dechex ( int $number )
Returns a string containing a hexadecimal representation of the given unsigned number argument. 
The largest number that can be converted is PHP_INT_MAX * 2 + 1 (or -1): on 32-bit platforms, this will be 4294967295 in decimal, which results in dechex() returning ffffffff.
</Desc>
    <FName>decoct</FName>
    <Desc>string decoct ( int $number )
Returns a string containing an octal representation of the given number argument. The largest number that can be converted depends on the platform in use. For 32-bit platforms this is usually 4294967295 in decimal resulting in 37777777777. For 64-bit platforms this is usually 9223372036854775807 in decimal resulting in 777777777777777777777.
</Desc>
    <FName>define_syslog_variables</FName>
    <Desc>void define_syslog_variables ( void )
Initializes all variables used in the syslog functions.
</Desc>
    <FName>define</FName>
    <Desc>bool define ( string $name , mixed $value [, bool $case_insensitive = FALSE ] )
Defines a named constant at runtime.
</Desc>
    <FName>defined</FName>
    <Desc>bool defined ( string $name )
Checks whether the given constant exists and is defined. 
Note: 
If you want to see if a variable exists, use isset() as defined() only applies to constants. If you want to see if a function exists, use function_exists().
</Desc>
    <FName>deflate_add</FName>
    <Desc>string deflate_add ( resource $context , string $data [, int $flush_mode = ZLIB_SYNC_FLUSH ] )
Incrementally deflates data in the specified context.
</Desc>
    <FName>deflate_init</FName>
    <Desc>resource deflate_init ( int $encoding [, array $options = array() ] )
Initializes an incremental deflate context using the specified encoding. 
Note that the window option here only sets the window size of the algorithm, differently from the zlib filters where the same parameter also sets the encoding to use; the encoding must be set with the encoding parameter. 
Limitation: there is currently no way to set the header information on a GZIP compressed stream, which are set as follows: GZIP signature (\x1f\x8B); compression method (\x08 == DEFLATE); 6 zero bytes; the operating system set to the current system (\x00 = Windows, \x03 = Unix, etc.)
</Desc>
    <FName>deg2rad</FName>
    <Desc>float deg2rad ( float $number )
This function converts number from degrees to the radian equivalent.
</Desc>
    <FName>delete</FName>
    <Desc>This is a dummy manual entry to satisfy those people who are looking for unlink() or unset() in the wrong place. 
See Also
unlink() - Deletes a file 
unset() - Unset a given variable 
</Desc>
    <FName>dgettext</FName>
    <Desc>string dgettext ( string $domain , string $message )
The dgettext() function allows you to override the current domain for a single message lookup.
</Desc>
    <FName>dio_close</FName>
    <Desc>void dio_close ( resource $fd )
The function dio_close() closes the file descriptor fd.
</Desc>
    <FName>dio_fcntl</FName>
    <Desc>mixed dio_fcntl ( resource $fd , int $cmd [, mixed $args ] )
The dio_fcntl() function performs the operation specified by cmd on the file descriptor fd. Some commands require additional arguments args to be supplied.
</Desc>
    <FName>dio_open</FName>
    <Desc>resource dio_open ( string $filename , int $flags [, int $mode = 0 ] )
dio_open() opens a file and returns a new file descriptor for it.
</Desc>
    <FName>dio_read</FName>
    <Desc>string dio_read ( resource $fd [, int $len = 1024 ] )
The function dio_read() reads and returns len bytes from file with descriptor fd.
</Desc>
    <FName>dio_seek</FName>
    <Desc>int dio_seek ( resource $fd , int $pos [, int $whence = SEEK_SET ] )
The function dio_seek() is used to change the file position of the given file descriptor.
</Desc>
    <FName>dio_stat</FName>
    <Desc>array dio_stat ( resource $fd )
dio_stat() returns information about the given file descriptor.
</Desc>
    <FName>dio_tcsetattr</FName>
    <Desc>bool dio_tcsetattr ( resource $fd , array $options )
dio_tcsetattr() sets the terminal attributes and baud rate of the open fd.
</Desc>
    <FName>dio_truncate</FName>
    <Desc>bool dio_truncate ( resource $fd , int $offset )
dio_truncate() truncates a file to at most offset bytes in size. 
If the file previously was larger than this size, the extra data is lost. If the file previously was shorter, it is unspecified whether the file is left unchanged or is extended. In the latter case the extended part reads as zero bytes.
</Desc>
    <FName>dio_write</FName>
    <Desc>int dio_write ( resource $fd , string $data [, int $len = 0 ] )
dio_write() writes up to len bytes from data to file fd.
</Desc>
    <FName>dir</FName>
    <Desc>Directory dir ( string $directory [, resource $context ] )
A pseudo-object oriented mechanism for reading a directory. The given directory is opened.
</Desc>
    <FName>dirname</FName>
    <Desc>string dirname ( string $path [, int $levels = 1 ] )
Given a string containing the path of a file or directory, this function will return the parent directory's path that is levels up from the current directory. 
Note: 
dirname() operates naively on the input string, and is not aware of the actual filesystem, or path components such as "..". 
Caution 
dirname() is locale aware, so for it to see the correct directory name with multibyte character paths, the matching locale must be set using the setlocale() function.
</Desc>
    <FName>disk_free_space</FName>
    <Desc>float disk_free_space ( string $directory )
Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition.
</Desc>
    <FName>disk_total_space</FName>
    <Desc>float disk_total_space ( string $directory )
Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition.
</Desc>
    <FName>diskfreespace</FName>
    <Desc>This function is an alias of: disk_free_space(). 
</Desc>
    <FName>dl</FName>
    <Desc>bool dl ( string $library )
Loads the PHP extension given by the parameter library. 
Use extension_loaded() to test whether a given extension is already available or not. This works on both built-in extensions and dynamically loaded ones (either through php.ini or dl()). 
Warning 
This function was removed from most SAPIs in PHP 5.3.0, and was removed from PHP-FPM in PHP 7.0.0.
</Desc>
    <FName>dngettext</FName>
    <Desc>string dngettext ( string $domain , string $msgid1 , string $msgid2 , int $n )
The dngettext() function allows you to override the current domain for a single plural message lookup.
</Desc>
    <FName>dns_check_record</FName>
    <Desc>This function is an alias of: checkdnsrr(). 
</Desc>
    <FName>dns_get_mx</FName>
    <Desc>This function is an alias of: getmxrr(). 
</Desc>
    <FName>dns_get_record</FName>
    <Desc>array dns_get_record ( string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl [, bool $raw = FALSE ]]]] )
Fetch DNS Resource Records associated with the given hostname.
</Desc>
    <FName>dom_import_simplexml</FName>
    <Desc>DOMElement dom_import_simplexml ( SimpleXMLElement $node )
This function takes the node node of class SimpleXML and makes it into a DOMElement node. This new object can then be used as a native DOMElement node.
</Desc>
    <FName>doubleval</FName>
    <Desc>This function is an alias of: floatval(). 
</Desc>
    <FName>each</FName>
    <Desc>array each ( array &$array )
Return the current key and value pair from an array and advance the array cursor. 
After each() has executed, the array cursor will be left on the next element of the array, or past the last element if it hits the end of the array. You have to use reset() if you want to traverse the array again using each.
</Desc>
    <FName>easter_date</FName>
    <Desc>int easter_date ([ int $year = date("Y") ] )
Returns the Unix timestamp corresponding to midnight on Easter of the given year. 
Warning 
This function will generate a warning if the year is outside of the range for Unix timestamps (i.e. typically before 1970 or after 2037 on 32bit systems). 
The date of Easter Day was defined by the Council of Nicaea in AD325 as the Sunday after the first full moon which falls on or after the Spring Equinox. The Equinox is assumed to always fall on 21st March, so the calculation reduces to determining the date of the full moon and the date of the following Sunday. The algorithm used here was introduced around the year 532 by Dionysius Exiguus. Under the Julian Calendar (for years before 1753) a simple 19-year cycle is used to track the phases of the Moon. Under the Gregorian Calendar (for years after 1753 - devised by Clavius and Lilius, and introduced by Pope Gregory XIII in October 1582, and into Britain and its then colonies in September 1752) two correction factors are added to make the cycle more accurate.
</Desc>
    <FName>easter_days</FName>
    <Desc>int easter_days ([ int $year = date("Y") [, int $method = CAL_EASTER_DEFAULT ]] )
Returns the number of days after March 21 on which Easter falls for a given year. If no year is specified, the current year is assumed. 
This function can be used instead of easter_date() to calculate Easter for years which fall outside the range of Unix timestamps (i.e. before 1970 or after 2037). 
The date of Easter Day was defined by the Council of Nicaea in AD325 as the Sunday after the first full moon which falls on or after the Spring Equinox. The Equinox is assumed to always fall on 21st March, so the calculation reduces to determining the date of the full moon and the date of the following Sunday. The algorithm used here was introduced around the year 532 by Dionysius Exiguus. Under the Julian Calendar (for years before 1753) a simple 19-year cycle is used to track the phases of the Moon. Under the Gregorian Calendar (for years after 1753 - devised by Clavius and Lilius, and introduced by Pope Gregory XIII in October 1582, and into Britain and its then colonies in September 1752) two correction factors are added to make the cycle more accurate.
</Desc>
    <FName>echo</FName>
    <Desc>void echo ( string $arg1 [, string $... ] )
Outputs all parameters. No additional newline is appended. 
echo is not actually a function (it is a language construct), so you are not required to use parentheses with it. echo (unlike some other language constructs) does not behave like a function, so it cannot always be used in the context of a function. Additionally, if you want to pass more than one parameter to echo, the parameters must not be enclosed within parentheses. 
echo also has a shortcut syntax, where you can immediately follow the opening tag with an equals sign. Prior to PHP 5.4.0, this short syntax only works with the short_open_tag configuration setting enabled. 
I have <?=$foo?> foo. 
The major differences to print are that echo accepts an argument list and doesn't have a return value.
</Desc>
    <FName>eio_busy</FName>
    <Desc>resource eio_busy ( int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_busy() artificially increases load taking delay seconds to execute. May be used for debugging, or benchmarking.
</Desc>
    <FName>eio_cancel</FName>
    <Desc>void eio_cancel ( resource $req )
eio_cancel() cancels a request specified by req
</Desc>
    <FName>eio_chmod</FName>
    <Desc>resource eio_chmod ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_chmod() changes file, or direcrory permissions. The new permissions are specified by mode.
</Desc>
    <FName>eio_chown</FName>
    <Desc>resource eio_chown ( string $path , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )
Changes file, or directory permissions.
</Desc>
    <FName>eio_close</FName>
    <Desc>resource eio_close ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_close() closes file specified by fd.
</Desc>
    <FName>eio_custom</FName>
    <Desc>resource eio_custom ( callable $execute , int $pri , callable $callback [, mixed $data = NULL ] )
eio_custom() executes custom function specified by execute processing it just like any other eio_* call.
</Desc>
    <FName>eio_dup2</FName>
    <Desc>resource eio_dup2 ( mixed $fd , mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_dup2() duplicates file descriptor.
</Desc>
    <FName>eio_event_loop</FName>
    <Desc>bool eio_event_loop ( void )
eio_event_loop() polls libeio until all requests proceeded.
</Desc>
    <FName>eio_fallocate</FName>
    <Desc>resource eio_fallocate ( mixed $fd , int $mode , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_fallocate() allows the caller to directly manipulate the allocated disk space for the file specified by fd file descriptor for the byte range starting at offset and continuing for length bytes. 
Note: File should be opened for writing

EIO_O_CREAT should be logically OR'd with EIO_O_WRONLY, or EIO_O_RDWR
</Desc>
    <FName>eio_fchmod</FName>
    <Desc>resource eio_fchmod ( mixed $fd , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_fchmod() changes permissions for the file specified by fd file descriptor.
</Desc>
    <FName>eio_fchown</FName>
    <Desc>resource eio_fchown ( mixed $fd , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )
eio_fchown() changes ownership of the file specified by fd file descriptor.
</Desc>
    <FName>eio_fdatasync</FName>
    <Desc>resource eio_fdatasync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_fdatasync() synchronizes a file's in-core state with storage device.
</Desc>
    <FName>eio_fstat</FName>
    <Desc>resource eio_fstat ( mixed $fd , int $pri , callable $callback [, mixed $data ] )
eio_fstat() returns file status information in result argument of callback
</Desc>
    <FName>eio_fstatvfs</FName>
    <Desc>resource eio_fstatvfs ( mixed $fd , int $pri , callable $callback [, mixed $data ] )
eio_fstatvfs() returns file system statistics in result of callback.
</Desc>
    <FName>eio_fsync</FName>
    <Desc>resource eio_fsync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
Synchronize a file's in-core state with storage device
</Desc>
    <FName>eio_ftruncate</FName>
    <Desc>resource eio_ftruncate ( mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )
eio_ftruncate() causes a regular file referenced by fd file descriptor to be truncated to precisely length bytes.
</Desc>
    <FName>eio_futime</FName>
    <Desc>resource eio_futime ( mixed $fd , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_futime() changes file last access and modification times.
</Desc>
    <FName>eio_get_event_stream</FName>
    <Desc>mixed eio_get_event_stream ( void )
eio_get_event_stream() acquires stream representing a variable used in internal communications with libeio. Could be used to bind with some event loop provided by other PECL extension, for example libevent.
</Desc>
    <FName>eio_get_last_error</FName>
    <Desc>string eio_get_last_error ( resource $req )
eio_get_last_error() returns string describing the last error associated with req.
</Desc>
    <FName>eio_grp_add</FName>
    <Desc>void eio_grp_add ( resource $grp , resource $req )
eio_grp_add() adds a request to the request group.
</Desc>
    <FName>eio_grp_cancel</FName>
    <Desc>void eio_grp_cancel ( resource $grp )
eio_grp_cancel() cancels a group request specified by grp request group resource.
</Desc>
    <FName>eio_grp_limit</FName>
    <Desc>void eio_grp_limit ( resource $grp , int $limit )
Limit number of requests in the request group.
</Desc>
    <FName>eio_grp</FName>
    <Desc>resource eio_grp ( callable $callback [, string $data = NULL ] )
eio_grp() creates a request group.
</Desc>
    <FName>eio_init</FName>
    <Desc>void eio_init ( void )
eio_init() (re-)initializes Eio. It allocates memory for internal structures of libeio and Eio itself. You may call eio_init() before using Eio functions. Otherwise it will be called internally first time you invoke an Eio function in a process. 
Warning 
This deprecated feature will certainly be removed in the future. Since Eio 1.1.0 eio_init() is deprecated. In Eio 1.0.0 because of » libeio's restrictions you must call eio_init() in child process, if you fork one by any means. You have to avoid using Eio in parent process, if you use it in childs.
</Desc>
    <FName>eio_link</FName>
    <Desc>resource eio_link ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_link() creates a hardlink new_path for a file specified by path.
</Desc>
    <FName>eio_lstat</FName>
    <Desc>resource eio_lstat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] )
eio_lstat() returns file status information in result argument of callback
</Desc>
    <FName>eio_mkdir</FName>
    <Desc>resource eio_mkdir ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_mkdir() creates directory with specified access mode.
</Desc>
    <FName>eio_mknod</FName>
    <Desc>resource eio_mknod ( string $path , int $mode , int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_mknod() creates ordinary or special(often) file. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>eio_nop</FName>
    <Desc>resource eio_nop ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_nop() does nothing, except go through the whole request cycle. Could be useful in debugging.
</Desc>
    <FName>eio_npending</FName>
    <Desc>int eio_npending ( void )
eio_npending() returns number of finished, but unhandled requests
</Desc>
    <FName>eio_nready</FName>
    <Desc>int eio_nready ( void )
</Desc>
    <FName>eio_nreqs</FName>
    <Desc>int eio_nreqs ( void )
eio_nreqs() could be called in a custom loop calling eio_poll().
</Desc>
    <FName>eio_nthreads</FName>
    <Desc>int eio_nthreads ( void )
</Desc>
    <FName>eio_open</FName>
    <Desc>resource eio_open ( string $path , int $flags , int $mode , int $pri , callable $callback [, mixed $data = NULL ] )
eio_open() opens file specified by path in access mode mode with
</Desc>
    <FName>eio_poll</FName>
    <Desc>int eio_poll ( void )
eio_poll() can be used to implement special event loop. For this eio_nreqs() could be used to test if there are unprocessed requests. 
Note: 
Applicable only when implementing userspace event loop.
</Desc>
    <FName>eio_read</FName>
    <Desc>resource eio_read ( mixed $fd , int $length , int $offset , int $pri , callable $callback [, mixed $data = NULL ] )
eio_read() reads up to length bytes from fd file descriptor at offset. The read bytes are stored in result argument of callback.
</Desc>
    <FName>eio_readahead</FName>
    <Desc>resource eio_readahead ( mixed $fd , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_readahead() populates the page cache with data from a file so that subsequent reads from that file will not block on disk I/O. See READAHEAD(2) man page for details.
</Desc>
    <FName>eio_readdir</FName>
    <Desc>resource eio_readdir ( string $path , int $flags , int $pri , callable $callback [, string $data = NULL ] )
Reads through a whole directory(via the opendir, readdir and closedir system calls) and returns either the names or an array in result argument of callback function, depending on the flags argument.
</Desc>
    <FName>eio_readlink</FName>
    <Desc>resource eio_readlink ( string $path , int $pri , callable $callback [, string $data = NULL ] )
</Desc>
    <FName>eio_realpath</FName>
    <Desc>resource eio_realpath ( string $path , int $pri , callable $callback [, string $data = NULL ] )
eio_realpath() returns the canonicalized absolute pathname in result argument of callback function.
</Desc>
    <FName>eio_rename</FName>
    <Desc>resource eio_rename ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_rename() renames or moves a file to new location.
</Desc>
    <FName>eio_rmdir</FName>
    <Desc>resource eio_rmdir ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_rmdir() removes a directory.
</Desc>
    <FName>eio_seek</FName>
    <Desc>resource eio_seek ( mixed $fd , int $offset , int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_seek() repositions the offset of the open file associated with stream, Socket resource, or file descriptor specified by fd to the argument offset according to the directive whence as follows: 
EIO_SEEK_SET - Set position equal to offset bytes. 
EIO_SEEK_CUR - Set position to current location plus offset. 
EIO_SEEK_END - Set position to end-of-file plus offset.
</Desc>
    <FName>eio_sendfile</FName>
    <Desc>resource eio_sendfile ( mixed $out_fd , mixed $in_fd , int $offset , int $length [, int $pri [, callable $callback [, string $data ]]] )
eio_sendfile() copies data between one file descriptor and another. See SENDFILE(2) man page for details.
</Desc>
    <FName>eio_set_max_idle</FName>
    <Desc>void eio_set_max_idle ( int $nthreads )
</Desc>
    <FName>eio_set_max_parallel</FName>
    <Desc>void eio_set_max_parallel ( int $nthreads )
</Desc>
    <FName>eio_set_max_poll_reqs</FName>
    <Desc>void eio_set_max_poll_reqs ( int $nreqs )
</Desc>
    <FName>eio_set_max_poll_time</FName>
    <Desc>void eio_set_max_poll_time ( float $nseconds )
Polling stops, if poll took longer than nseconds seconds.
</Desc>
    <FName>eio_set_min_parallel</FName>
    <Desc>void eio_set_min_parallel ( string $nthreads )
</Desc>
    <FName>eio_stat</FName>
    <Desc>resource eio_stat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] )
eio_stat() returns file status information in result argument of callback
</Desc>
    <FName>eio_statvfs</FName>
    <Desc>resource eio_statvfs ( string $path , int $pri , callable $callback [, mixed $data ] )
eio_statvfs() returns file system statistics information in result argument of callback
</Desc>
    <FName>eio_symlink</FName>
    <Desc>resource eio_symlink ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_symlink() creates a symbolic link new_path to path.
</Desc>
    <FName>eio_sync_file_range</FName>
    <Desc>resource eio_sync_file_range ( mixed $fd , int $offset , int $nbytes , int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_sync_file_range() permits fine control when synchronizing the open file referred to by the file descriptor fd with disk.
</Desc>
    <FName>eio_sync</FName>
    <Desc>resource eio_sync ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
</Desc>
    <FName>eio_syncfs</FName>
    <Desc>resource eio_syncfs ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
</Desc>
    <FName>eio_truncate</FName>
    <Desc>resource eio_truncate ( string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )
eio_truncate() causes the regular file named by path to be truncated to a size of precisely length bytes
</Desc>
    <FName>eio_unlink</FName>
    <Desc>resource eio_unlink ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_unlink() deletes a name from the file system.
</Desc>
    <FName>eio_utime</FName>
    <Desc>resource eio_utime ( string $path , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
</Desc>
    <FName>eio_write</FName>
    <Desc>resource eio_write ( mixed $fd , string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]]] )
eio_write() writes up to length bytes from str at offset offset from the beginning of the file.
</Desc>
    <FName>empty</FName>
    <Desc>bool empty ( mixed $var )
Determine whether a variable is considered to be empty. A variable is considered empty if it does not exist or if its value equals FALSE. empty() does not generate a warning if the variable does not exist.
</Desc>
    <FName>enchant_broker_describe</FName>
    <Desc>array enchant_broker_describe ( resource $broker )
Enumerates the Enchant providers and tells you some rudimentary information about them. The same info is provided through phpinfo().
</Desc>
    <FName>enchant_broker_dict_exists</FName>
    <Desc>bool enchant_broker_dict_exists ( resource $broker , string $tag )
Tells if a dictionary exists or not, using a non-empty tags
</Desc>
    <FName>enchant_broker_free_dict</FName>
    <Desc>bool enchant_broker_free_dict ( resource $dict )
Free a dictionary resource.
</Desc>
    <FName>enchant_broker_free</FName>
    <Desc>bool enchant_broker_free ( resource $broker )
Free a broker resource with all its dictionaries.
</Desc>
    <FName>enchant_broker_get_dict_path</FName>
    <Desc>bool enchant_broker_get_dict_path ( resource $broker , int $dict_type )
Get the directory path for a given backend.
</Desc>
    <FName>enchant_broker_get_error</FName>
    <Desc>string enchant_broker_get_error ( resource $broker )
Returns the last error which occurred in this broker.
</Desc>
    <FName>enchant_broker_init</FName>
    <Desc>resource enchant_broker_init ( void )
</Desc>
    <FName>enchant_broker_list_dicts</FName>
    <Desc>mixed enchant_broker_list_dicts ( resource $broker )
Returns a list of available dictionaries with their details.
</Desc>
    <FName>enchant_broker_request_dict</FName>
    <Desc>resource enchant_broker_request_dict ( resource $broker , string $tag )
create a new dictionary using tag, the non-empty language tag you wish to request a dictionary for ("en_US", "de_DE", ...)
</Desc>
    <FName>enchant_broker_request_pwl_dict</FName>
    <Desc>resource enchant_broker_request_pwl_dict ( resource $broker , string $filename )
Creates a dictionary using a PWL file. A PWL file is personal word file one word per line.
</Desc>
    <FName>enchant_broker_set_dict_path</FName>
    <Desc>bool enchant_broker_set_dict_path ( resource $broker , int $dict_type , string $value )
Set the directory path for a given backend.
</Desc>
    <FName>enchant_broker_set_ordering</FName>
    <Desc>bool enchant_broker_set_ordering ( resource $broker , string $tag , string $ordering )
Declares a preference of dictionaries to use for the language described/referred to by 'tag'. The ordering is a comma delimited list of provider names. As a special exception, the "*" tag can be used as a language tag to declare a default ordering for any language that does not explicitly declare an ordering.
</Desc>
    <FName>enchant_dict_add_to_personal</FName>
    <Desc>void enchant_dict_add_to_personal ( resource $dict , string $word )
Add a word to personal word list of the given dictionary.
</Desc>
    <FName>enchant_dict_add_to_session</FName>
    <Desc>void enchant_dict_add_to_session ( resource $dict , string $word )
Add a word to the given dictionary. It will be added only for the active spell-checking session.
</Desc>
    <FName>enchant_dict_check</FName>
    <Desc>bool enchant_dict_check ( resource $dict , string $word )
If the word is correctly spelled return TRUE, otherwise return FALSE
</Desc>
    <FName>enchant_dict_describe</FName>
    <Desc>mixed enchant_dict_describe ( resource $dict )
Returns the details of the dictionary.
</Desc>
    <FName>enchant_dict_get_error</FName>
    <Desc>string enchant_dict_get_error ( resource $dict )
Returns the last error of the current spelling-session
</Desc>
    <FName>enchant_dict_is_in_session</FName>
    <Desc>bool enchant_dict_is_in_session ( resource $dict , string $word )
Tells whether or not a word already exists in the current session.
</Desc>
    <FName>enchant_dict_quick_check</FName>
    <Desc>bool enchant_dict_quick_check ( resource $dict , string $word [, array &$suggestions ] )
If the word is correctly spelled return TRUE, otherwise return FALSE, if suggestions variable is provided, fill it with spelling alternatives.
</Desc>
    <FName>enchant_dict_store_replacement</FName>
    <Desc>void enchant_dict_store_replacement ( resource $dict , string $mis , string $cor )
Add a correction for 'mis' using 'cor'. Notes that you replaced @mis with @cor, so it's possibly more likely that future occurrences of @mis will be replaced with @cor. So it might bump @cor up in the suggestion list.
</Desc>
    <FName>enchant_dict_suggest</FName>
    <Desc>array enchant_dict_suggest ( resource $dict , string $word )
</Desc>
    <FName>end</FName>
    <Desc>mixed end ( array &$array )
end() advances array's internal pointer to the last element, and returns its value.
</Desc>
    <FName>ereg_replace</FName>
    <Desc>string ereg_replace ( string $pattern , string $replacement , string $string )
This function scans string for matches to pattern, then replaces the matched text with replacement.
</Desc>
    <FName>ereg</FName>
    <Desc>int ereg ( string $pattern , string $string [, array &$regs ] )
Searches a string for matches to the regular expression given in pattern in a case-sensitive way.
</Desc>
    <FName>eregi_replace</FName>
    <Desc>string eregi_replace ( string $pattern , string $replacement , string $string )
This function is identical to ereg_replace() except that this ignores case distinction when matching alphabetic characters.
</Desc>
    <FName>eregi</FName>
    <Desc>int eregi ( string $pattern , string $string [, array &$regs ] )
This function is identical to ereg() except that it ignores case distinction when matching alphabetic characters.
</Desc>
    <FName>error_clear_last</FName>
    <Desc>void error_clear_last ( void )
</Desc>
    <FName>error_get_last</FName>
    <Desc>array error_get_last ( void )
Gets information about the last error that occurred.
</Desc>
    <FName>error_log</FName>
    <Desc>bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )
Sends an error message to the web server's error log or to a file.
</Desc>
    <FName>error_reporting</FName>
    <Desc>int error_reporting ([ int $level ] )
The error_reporting() function sets the error_reporting directive at runtime. PHP has many levels of errors, using this function sets that level for the duration (runtime) of your script. If the optional level is not set, error_reporting() will just return the current error reporting level.
</Desc>
    <FName>escapeshellarg</FName>
    <Desc>string escapeshellarg ( string $arg )
escapeshellarg() adds single quotes around a string and quotes/escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument. This function should be used to escape individual arguments to shell functions coming from user input. The shell functions include exec(), system() and the backtick operator. 
On Windows, escapeshellarg() instead replaces percent signs, exclamation marks (delayed variable substitution) and double quotes with spaces and adds double quotes around the string.
</Desc>
    <FName>escapeshellcmd</FName>
    <Desc>string escapeshellcmd ( string $command )
escapeshellcmd() escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands. This function should be used to make sure that any data coming from user input is escaped before this data is passed to the exec() or system() functions, or to the backtick operator. 
Following characters are preceded by a backslash: &#;`|*?~<>^()[]{}$\, \x0A and \xFF. ' and " are escaped only if they are not paired. In Windows, all these characters plus % and ! are replaced by a space instead.
</Desc>
    <FName>eval</FName>
    <Desc>mixed eval ( string $code )
Evaluates the given code as PHP. 
Caution 
The eval() language construct is very dangerous because it allows execution of arbitrary PHP code. Its use thus is discouraged. If you have carefully verified that there is no other option than to use this construct, pay special attention not to pass any user provided data into it without properly validating it beforehand.
</Desc>
    <FName>event_add</FName>
    <Desc>bool event_add ( resource $event [, int $timeout = -1 ] )
event_add() schedules the execution of the event when the event specified in event_set() occurs or in at least the time specified by the timeout argument. If timeout was not specified, not timeout is set. The event must be already initalized by event_set() and event_base_set() functions. If the event already has a timeout set, it is replaced by the new one.
</Desc>
    <FName>event_base_free</FName>
    <Desc>void event_base_free ( resource $event_base )
Destroys the specified event_base and frees all the resources associated. Note that it's not possible to destroy an event base with events attached to it.
</Desc>
    <FName>event_base_loop</FName>
    <Desc>int event_base_loop ( resource $event_base [, int $flags = 0 ] )
Starts event loop for the specified event base.
</Desc>
    <FName>event_base_loopbreak</FName>
    <Desc>bool event_base_loopbreak ( resource $event_base )
Abort the active event loop immediately. The behaviour is similar to break statement.
</Desc>
    <FName>event_base_loopexit</FName>
    <Desc>bool event_base_loopexit ( resource $event_base [, int $timeout = -1 ] )
The next event loop iteration after the given timer expires will complete normally, then exit without blocking for events again.
</Desc>
    <FName>event_base_new</FName>
    <Desc>resource event_base_new ( void )
Returns new event base, which can be used later in event_base_set(), event_base_loop() and other functions.
</Desc>
    <FName>event_base_priority_init</FName>
    <Desc>bool event_base_priority_init ( resource $event_base , int $npriorities )
Sets the number of different event priority levels. 
By default all events are scheduled with the same priority (npriorities/2). Using event_base_priority_init() you can change the number of event priority levels and then set a desired priority for each event.
</Desc>
    <FName>event_base_reinit</FName>
    <Desc>bool event_base_reinit ( resource $event_base )
Some event mechanisms do not survive across fork. The event_base needs to be reinitialized with this function.
</Desc>
    <FName>event_base_set</FName>
    <Desc>bool event_base_set ( resource $event , resource $event_base )
Associates the event_base with the event.
</Desc>
    <FName>event_buffer_base_set</FName>
    <Desc>bool event_buffer_base_set ( resource $bevent , resource $event_base )
Assign the specified bevent to the event_base.
</Desc>
    <FName>event_buffer_disable</FName>
    <Desc>bool event_buffer_disable ( resource $bevent , int $events )
Disables the specified buffered event.
</Desc>
    <FName>event_buffer_enable</FName>
    <Desc>bool event_buffer_enable ( resource $bevent , int $events )
Enables the specified buffered event.
</Desc>
    <FName>event_buffer_fd_set</FName>
    <Desc>void event_buffer_fd_set ( resource $bevent , resource $fd )
Changes the file descriptor on which the buffered event operates.
</Desc>
    <FName>event_buffer_free</FName>
    <Desc>void event_buffer_free ( resource $bevent )
Destroys the specified buffered event and frees all the resources associated.
</Desc>
    <FName>event_buffer_new</FName>
    <Desc>resource event_buffer_new ( resource $stream , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] )
Libevent provides an abstraction layer on top of the regular event API. Using buffered event you don't need to deal with the I/O manually, instead it provides input and output buffers that get filled and drained automatically.
</Desc>
    <FName>event_buffer_priority_set</FName>
    <Desc>bool event_buffer_priority_set ( resource $bevent , int $priority )
Assign a priority to the bevent.
</Desc>
    <FName>event_buffer_read</FName>
    <Desc>string event_buffer_read ( resource $bevent , int $data_size )
Reads data from the input buffer of the buffered event.
</Desc>
    <FName>event_buffer_set_callback</FName>
    <Desc>bool event_buffer_set_callback ( resource $event , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] )
Sets or changes existing callbacks for the buffered event.
</Desc>
    <FName>event_buffer_timeout_set</FName>
    <Desc>void event_buffer_timeout_set ( resource $bevent , int $read_timeout , int $write_timeout )
Sets the read and write timeouts for the specified buffered event.
</Desc>
    <FName>event_buffer_watermark_set</FName>
    <Desc>void event_buffer_watermark_set ( resource $bevent , int $events , int $lowmark , int $highmark )
Sets the watermarks for read and write events. Libevent does not invoke read callback unless there is at least lowmark bytes in the input buffer; if the read buffer is beyond the highmark, reading is stopped. On output, the write callback is invoked whenever the buffered data falls below the lowmark.
</Desc>
    <FName>event_buffer_write</FName>
    <Desc>bool event_buffer_write ( resource $bevent , string $data [, int $data_size = -1 ] )
Writes data to the specified buffered event. The data is appended to the output buffer and written to the descriptor when it becomes available for writing.
</Desc>
    <FName>event_del</FName>
    <Desc>bool event_del ( resource $event )
Cancels the event.
</Desc>
    <FName>event_free</FName>
    <Desc>void event_free ( resource $event )
Frees previously created event resource.
</Desc>
    <FName>event_new</FName>
    <Desc>resource event_new ( void )
Creates and returns a new event resource.
</Desc>
    <FName>event_priority_set</FName>
    <Desc>bool event_priority_set ( resource $event , int $priority )
Assign a priority to the event.
</Desc>
    <FName>event_set</FName>
    <Desc>bool event_set ( resource $event , mixed $fd , int $events , mixed $callback [, mixed $arg ] )
Prepares the event to be used in event_add(). The event is prepared to call the function specified by the callback on the events specified in parameter events, which is a set of the following flags: EV_TIMEOUT, EV_SIGNAL, EV_READ, EV_WRITE and EV_PERSIST. 
If EV_SIGNAL bit is set in parameter events, the fd is interpreted as signal number. 
After initializing the event, use event_base_set() to associate the event with its event base. 
In case of matching event, these three arguments are passed to the callback function: 
fd 
Signal number or resource indicating the stream. 
events 
A flag indicating the event. Consists of the following flags: EV_TIMEOUT, EV_SIGNAL, EV_READ, EV_WRITE and EV_PERSIST. 
arg 
Optional parameter, previously passed to event_set() as arg.
</Desc>
    <FName>event_timer_add</FName>
    <Desc>This function is an alias of: event_add(). 
</Desc>
    <FName>event_timer_del</FName>
    <Desc>This function is an alias of: event_del(). 
</Desc>
    <FName>event_timer_new</FName>
    <Desc>This function is an alias of: event_new(). 
</Desc>
    <FName>event_timer_set</FName>
    <Desc>bool event_timer_set ( resource $event , callable $callback [, mixed $arg ] )
Prepares the timer event to be used in event_add(). The event is prepared to call the function specified by the callback when the event timeout elapses. 
After initializing the event, use event_base_set() to associate the event with its event base. 
In case of matching event, these three arguments are passed to the callback function: 
fd 
Signal number or resource indicating the stream. 
events 
A flag indicating the event. This will always be EV_TIMEOUT for timer events. 
arg 
Optional parameter, previously passed to event_timer_set() as arg.
</Desc>
    <FName>exec</FName>
    <Desc>string exec ( string $command [, array &$output [, int &$return_var ]] )
exec() executes the given command.
</Desc>
    <FName>exif_imagetype</FName>
    <Desc>int exif_imagetype ( string $filename )
exif_imagetype() reads the first bytes of an image and checks its signature. 
exif_imagetype() can be used to avoid calls to other exif functions with unsupported file types or in conjunction with $_SERVER['HTTP_ACCEPT'] to check whether or not the viewer is able to see a specific image in the browser.
</Desc>
    <FName>exif_read_data</FName>
    <Desc>array exif_read_data ( mixed $stream [, string $sections = NULL [, bool $arrays = FALSE [, bool $thumbnail = FALSE ]]] )
exif_read_data() reads the EXIF headers from an image file. This way you can read meta data generated by digital cameras. 
EXIF headers tend to be present in JPEG/TIFF images generated by digital cameras, but unfortunately each digital camera maker has a different idea of how to actually tag their images, so you can't always rely on a specific Exif header being present. 
Height and Width are computed the same way getimagesize() does so their values must not be part of any header returned. Also, html is a height/width text string to be used inside normal HTML. 
When an Exif header contains a Copyright note, this itself can contain two values. As the solution is inconsistent in the Exif 2.10 standard, the COMPUTED section will return both entries Copyright.Photographer and Copyright.Editor while the IFD0 sections contains the byte array with the NULL character that splits both entries. Or just the first entry if the datatype was wrong (normal behaviour of Exif). The COMPUTED will also contain the entry Copyright which is either the original copyright string, or a comma separated list of the photo and editor copyright. 
The tag UserComment has the same problem as the Copyright tag. It can store two values. First the encoding used, and second the value itself. If so the IFD section only contains the encoding or a byte array. The COMPUTED section will store both in the entries UserCommentEncoding and UserComment. The entry UserComment is available in both cases so it should be used in preference to the value in IFD0 section. 
exif_read_data() also validates EXIF data tags according to the EXIF specification (» http://exif.org/Exif2-2.PDF, page 20). 
Note: 
Windows Me/XP can both wipe the Exif headers when connecting to a camera.
</Desc>
    <FName>exif_tagname</FName>
    <Desc>string exif_tagname ( int $index )
</Desc>
    <FName>exif_thumbnail</FName>
    <Desc>string exif_thumbnail ( mixed $stream [, int &$width [, int &$height [, int &$imagetype ]]] )
exif_thumbnail() reads the embedded thumbnail of an image. 
If you want to deliver thumbnails through this function, you should send the mimetype information using the header() function. 
It is possible that exif_thumbnail() cannot create an image but can determine its size. In this case, the return value is FALSE but width and height are set.
</Desc>
    <FName>exit</FName>
    <Desc>void exit ([ string $status ] )
void exit ( int $status )
Terminates execution of the script. Shutdown functions and object destructors will always be executed even if exit is called. 
exit is a language construct and it can be called without parentheses if no status is passed.
</Desc>
    <FName>exp</FName>
    <Desc>float exp ( float $arg )
Returns e raised to the power of arg. 
Note: 
'e' is the base of the natural system of logarithms, or approximately 2.718282.
</Desc>
    <FName>expect_expectl</FName>
    <Desc>int expect_expectl ( resource $expect , array $cases [, array &$match ] )
Waits until the output from a process matches one of the patterns, a specified time period has passed, or an EOF is seen. 
If match is provided, then it is filled with the result of search. The matched string can be found in match[0]. The match substrings (according to the parentheses) in the original pattern can be found in match[1], match[2], and so on, up to match[9] (the limitation of libexpect).
</Desc>
    <FName>expect_popen</FName>
    <Desc>resource expect_popen ( string $command )
Execute command via Bourne shell, and open the PTY stream to the process.
</Desc>
    <FName>explode</FName>
    <Desc>array explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] )
Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.
</Desc>
    <FName>expm1</FName>
    <Desc>float expm1 ( float $arg )
expm1() returns the equivalent to 'exp(arg) - 1' computed in a way that is accurate even if the value of arg is near zero, a case where 'exp (arg) - 1' would be inaccurate due to subtraction of two numbers that are nearly equal.
</Desc>
    <FName>extension_loaded</FName>
    <Desc>bool extension_loaded ( string $name )
Finds out whether the extension is loaded.
</Desc>
    <FName>extract</FName>
    <Desc>int extract ( array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL ]] )
Import variables from an array into the current symbol table. 
Checks each key to see whether it has a valid variable name. It also checks for collisions with existing variables in the symbol table. 
Warning 
Do not use extract() on untrusted data, like user input (e.g. $_GET, $_FILES).
</Desc>
    <FName>ezmlm_hash</FName>
    <Desc>int ezmlm_hash ( string $addr )
ezmlm_hash() calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database.
</Desc>
    <FName>fam_cancel_monitor</FName>
    <Desc>bool fam_cancel_monitor ( resource $fam , resource $fam_monitor )
Terminates monitoring on a resource. 
In addition an FAMAcknowledge event occurs.
</Desc>
    <FName>fam_close</FName>
    <Desc>void fam_close ( resource $fam )
Closes a connection to the FAM service.
</Desc>
    <FName>fam_monitor_collection</FName>
    <Desc>resource fam_monitor_collection ( resource $fam , string $dirname , int $depth , string $mask )
Requests monitoring for a collection of files within a directory. 
A FAM event will be generated whenever the status of the files change. The possible event codes are described in detail in the constants part of this section.
</Desc>
    <FName>fam_monitor_directory</FName>
    <Desc>resource fam_monitor_directory ( resource $fam , string $dirname )
Requests monitoring for a directory and all contained files. 
A FAM event will be generated whenever the status of the directory (i.e. the result of function stat() on that directory) or its content (i.e. the results of readdir()) changes. 
The possible event codes are described in detail in the constants part of this section.
</Desc>
    <FName>fam_monitor_file</FName>
    <Desc>resource fam_monitor_file ( resource $fam , string $filename )
Requests monitoring for a single file. A FAM event will be generated whenever the file status changes (i.e. the result of function stat() on that file). 
The possible event codes are described in detail in the constants part of this section.
</Desc>
    <FName>fam_next_event</FName>
    <Desc>array fam_next_event ( resource $fam )
Returns the next pending FAM event. 
The function will block until an event is available which can be checked for using fam_pending().
</Desc>
    <FName>fam_open</FName>
    <Desc>resource fam_open ([ string $appname ] )
Opens a connection to the FAM service daemon.
</Desc>
    <FName>fam_pending</FName>
    <Desc>int fam_pending ( resource $fam )
Checks for pending FAM events.
</Desc>
    <FName>fam_resume_monitor</FName>
    <Desc>bool fam_resume_monitor ( resource $fam , resource $fam_monitor )
Resumes monitoring of a resource previously suspended using fam_suspend_monitor().
</Desc>
    <FName>fam_suspend_monitor</FName>
    <Desc>bool fam_suspend_monitor ( resource $fam , resource $fam_monitor )
fam_suspend_monitor() temporarily suspend monitoring of a resource. 
Monitoring can later be continued using fam_resume_monitor() without the need of requesting a complete new monitor.
</Desc>
    <FName>fann_cascadetrain_on_data</FName>
    <Desc>bool fann_cascadetrain_on_data ( resource $ann , resource $data , int $max_neurons , int $neurons_between_reports , float $desired_error )
The cascade output change fraction is a number between 0 and 1 determining how large a fraction the fann_get_MSE() value should change within fann_get_cascade_output_stagnation_epochs() during training of the output connections, in order for the training not to stagnate. If the training stagnates, the training of the output connections will be ended and new candidates will be prepared. 
This training uses the parameters set using the fann_set_cascade_..., but it also uses another training algorithm as it’s internal training algorithm. This algorithm can be set to either FANN_TRAIN_RPROP or FANN_TRAIN_QUICKPROP by fann_set_training_algorithm(), and the parameters set for these training algorithms will also affect the cascade training.
</Desc>
    <FName>fann_cascadetrain_on_file</FName>
    <Desc>bool fann_cascadetrain_on_file ( resource $ann , string $filename , int $max_neurons , int $neurons_between_reports , float $desired_error )
Does the same as fann_cascadetrain_on_data(), but reads the training data directly from a file.
</Desc>
    <FName>fann_clear_scaling_params</FName>
    <Desc>bool fann_clear_scaling_params ( resource $ann )
Clears scaling parameters.
</Desc>
    <FName>fann_copy</FName>
    <Desc>resource fann_copy ( resource $ann )
Creates a copy of a fann structure.
</Desc>
    <FName>fann_create_from_file</FName>
    <Desc>resource fann_create_from_file ( string $configuration_file )
Constructs a backpropagation neural network from a configuration file, which have been saved by fann_save().
</Desc>
    <FName>fann_create_shortcut_array</FName>
    <Desc>resource fann_create_shortcut_array ( int $num_layers , array $layers )
Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections using an array of layers sizes.
</Desc>
    <FName>fann_create_shortcut</FName>
    <Desc>resource fann_create_shortcut ( int $num_layers , int $num_neurons1 , int $num_neurons2 [, int $... ] )
Creates a standard backpropagation neural network, which is not fully connected and which also has shortcut connections. 
Shortcut connections are connections that skip layers. A fully connected network with shortcut connections, is a network where all neurons are connected to all neurons in later layers. Including direct connections from the input layer to the output layer.
</Desc>
    <FName>fann_create_sparse_array</FName>
    <Desc>resource fann_create_sparse_array ( float $connection_rate , int $num_layers , array $layers )
Creates a standard backpropagation neural network, which is not fully connected using an array of layer sizes.
</Desc>
    <FName>fann_create_sparse</FName>
    <Desc>resource fann_create_sparse ( float $connection_rate , int $num_layers , int $num_neurons1 , int $num_neurons2 [, int $... ] )
Creates a standard backpropagation neural network, which is not fully connected.
</Desc>
    <FName>fann_create_standard_array</FName>
    <Desc>resource fann_create_standard_array ( int $num_layers , array $layers )
Creates a standard fully connected backpropagation neural network. 
There will be a bias neuron in each layer (except the output layer), and this bias neuron will be connected to all neurons in the next layer. When running the network, the bias nodes always emits 1. 
To destroy a neural network use the fann_destroy() function.
</Desc>
    <FName>fann_create_standard</FName>
    <Desc>resource fann_create_standard ( int $num_layers , int $num_neurons1 , int $num_neurons2 [, int $... ] )
Creates a standard fully connected backpropagation neural network. 
There will be a bias neuron in each layer (except the output layer), and this bias neuron will be connected to all neurons in the next layer. When running the network, the bias nodes always emits 1. 
To destroy a neural network use the fann_destroy() function.
</Desc>
    <FName>fann_create_train_from_callback</FName>
    <Desc>resource fann_create_train_from_callback ( int $num_data , int $num_input , int $num_output , callable $user_function )
Creates the training data struct from a user supplied function. As the training data are numerable (data 1, data 2...), the user must write a function that receives the number of the training data set (input, output) and returns the set.
</Desc>
    <FName>fann_create_train</FName>
    <Desc>resource fann_create_train ( int $num_data , int $num_input , int $num_output )
Creates an empty training data struct.
</Desc>
    <FName>fann_descale_input</FName>
    <Desc>bool fann_descale_input ( resource $ann , array $input_vector )
Scale data in input vector after get it from ann based on previously calculated parameters.
</Desc>
    <FName>fann_descale_output</FName>
    <Desc>bool fann_descale_output ( resource $ann , array $output_vector )
Scale data in output vector after get it from ann based on previously calculated parameters.
</Desc>
    <FName>fann_descale_train</FName>
    <Desc>bool fann_descale_train ( resource $ann , resource $train_data )
Descale input and output data based on previously calculated parameters.
</Desc>
    <FName>fann_destroy_train</FName>
    <Desc>bool fann_destroy_train ( resource $train_data )
Destructs the training data
</Desc>
    <FName>fann_destroy</FName>
    <Desc>bool fann_destroy ( resource $ann )
Destroys the entire network and properly freeing all the associated memory.
</Desc>
    <FName>fann_duplicate_train_data</FName>
    <Desc>resource fann_duplicate_train_data ( resource $data )
Returns an exact copy of a fann train data resource.
</Desc>
    <FName>fann_get_activation_function</FName>
    <Desc>int fann_get_activation_function ( resource $ann , int $layer , int $neuron )
Get the activation function for neuron number neuron in layer number layer, counting the input layer as layer 0. 
It is not possible to get activation functions for the neurons in the input layer. 
The return value is one of the activation functions constants.
</Desc>
    <FName>fann_get_activation_steepness</FName>
    <Desc>float fann_get_activation_steepness ( resource $ann , int $layer , int $neuron )
Get the activation steepness for neuron number neuron in layer number layer, counting the input layer as layer 0. 
It is not possible to get activation steepness for the neurons in the input layer. 
The steepness of an activation function says something about how fast the activation function goes from the minimum to the maximum. A high value for the activation function will also give a more agressive training. 
When training neural networks where the output values should be at the extremes (usually 0 and 1, depending on the activation function), a steep activation function can be used (e.g. 1.0). 
The default activation steepness is 0.5.
</Desc>
    <FName>fann_get_bias_array</FName>
    <Desc>array fann_get_bias_array ( resource $ann )
Get the number of bias in each layer in the network.
</Desc>
    <FName>fann_get_bit_fail_limit</FName>
    <Desc>float fann_get_bit_fail_limit ( resource $ann )
Returns the bit fail limit used during training. 
The bit fail limit is used during training where the stop function is set to FANN_STOPFUNC_BIT. 
The limit is the maximum accepted difference between the desired output and the actual output during training. Each output that diverges more than this limit is counted as an error bit. This difference is divided by two when dealing with symmetric activation functions, so that symmetric and not symmetric activation functions can use the same limit. 
The default bit fail limit is 0.35.
</Desc>
    <FName>fann_get_bit_fail</FName>
    <Desc>int fann_get_bit_fail ( resource $ann )
The number of fail bits; means the number of output neurons which differ more than the bit fail limit (see fann_get_bit_fail_limit(), fann_set_bit_fail_limit()). The bits are counted in all of the training data, so this number can be higher than the number of training data. 
This value is reset by fann_reset_MSE() and updated by all the same functions which also updates the MSE value (e.g. fann_test_data(), fann_train_epoch())
</Desc>
    <FName>fann_get_cascade_activation_functions_count</FName>
    <Desc>int fann_get_cascade_activation_functions_count ( resource $ann )
The number of activation functions in the fann_get_cascade_activation_functions() array. 
The default number of activation functions is 6.
</Desc>
    <FName>fann_get_cascade_activation_functions</FName>
    <Desc>array fann_get_cascade_activation_functions ( resource $ann )
The cascade activation functions array is an array of the different activation functions used by the candidates 
See fann_get_cascade_num_candidates() for a description of which candidate neurons will be generated by this array. 
The default activation functions are FANN_SIGMOID, FANN_SIGMOID_SYMMETRIC, FANN_GAUSSIAN, FANN_GAUSSIAN_SYMMETRIC, FANN_ELLIOT, FANN_ELLIOT_SYMMETRIC.
</Desc>
    <FName>fann_get_cascade_activation_steepnesses_count</FName>
    <Desc>int fann_get_cascade_activation_steepnesses_count ( resource $ann )
The number of activation steepnesses in the fann_get_cascade_activation_functions() array. 
The default number of activation steepnesses is 4.
</Desc>
    <FName>fann_get_cascade_activation_steepnesses</FName>
    <Desc>array fann_get_cascade_activation_steepnesses ( resource $ann )
The cascade activation steepnesses array is an array of the different activation functions used by the candidates. 
See fann_get_cascade_num_candidates() for a description of which candidate neurons will be generated by this array. 
The default activation steepnesses are {0.25, 0.50, 0.75, 1.00}.
</Desc>
    <FName>fann_get_cascade_candidate_change_fraction</FName>
    <Desc>float fann_get_cascade_candidate_change_fraction ( resource $ann )
The cascade candidate change fraction is a number between 0 and 1 determining how large a fraction the fann_get_MSE() value should change within fann_get_cascade_candidate_stagnation_epochs() during training of the candidate neurons, in order for the training not to stagnate. If the training stagnates, the training of the candidate neurons will be ended and the best candidate will be selected. 
It means that if the MSE does not change by a fraction of fann_get_cascade_candidate_change_fraction() during a period of fann_get_cascade_candidate_stagnation_epochs(), the training of the candidate neurons is stopped because the training has stagnated. 
If the cascade candidate change fraction is low, the candidate neurons will be trained more and if the fraction is high they will be trained less. 
The default cascade candidate change fraction is 0.01, which is equalent to a 1% change in MSE.
</Desc>
    <FName>fann_get_cascade_candidate_limit</FName>
    <Desc>float fann_get_cascade_candidate_limit ( resource $ann )
The candidate limit is a limit for how much the candidate neuron may be trained. The limit is a limit on the proportion between the MSE and candidate score. 
Set this to a lower value to avoid overfitting and to a higher if overfitting is not a problem. 
The default candidate limit is 1000.0.
</Desc>
    <FName>fann_get_cascade_candidate_stagnation_epochs</FName>
    <Desc>int fann_get_cascade_candidate_stagnation_epochs ( resource $ann )
The number of cascade candidate stagnation epochs determines the number of epochs training is allowed to continue without changing the MSE by a fraction of fann_get_cascade_candidate_change_fraction(). 
See more info about this parameter in fann_get_cascade_candidate_change_fraction(). 
The default number of cascade candidate stagnation epochs is 12.
</Desc>
    <FName>fann_get_cascade_max_cand_epochs</FName>
    <Desc>int fann_get_cascade_max_cand_epochs ( resource $ann )
The maximum candidate epochs determines the maximum number of epochs the input connections to the candidates may be trained before adding a new candidate neuron. 
The default max candidate epochs is 150.
</Desc>
    <FName>fann_get_cascade_max_out_epochs</FName>
    <Desc>int fann_get_cascade_max_out_epochs ( resource $ann )
The maximum out epochs determines the maximum number of epochs the output connections may be trained after adding a new candidate neuron. 
The default max out epochs is 150.
</Desc>
    <FName>fann_get_cascade_min_cand_epochs</FName>
    <Desc>int fann_get_cascade_min_cand_epochs ( resource $ann )
The minimum candidate epochs determines the minimum number of epochs the input connections to the candidates may be trained before adding a new candidate neuron. 
The default min candidate epochs is 50.
</Desc>
    <FName>fann_get_cascade_min_out_epochs</FName>
    <Desc>int fann_get_cascade_min_out_epochs ( resource $ann )
The minimum out epochs determines the minimum number of epochs the output connections must be trained after adding a new candidate neuron. 
The default min out epochs is 50.
</Desc>
    <FName>fann_get_cascade_num_candidate_groups</FName>
    <Desc>int fann_get_cascade_num_candidate_groups ( resource $ann )
The number of candidate groups is the number of groups of identical candidates which will be used during training. 
This number can be used to have more candidates without having to define new parameters for the candidates. 
See fann_get_cascade_num_candidates() for a description of which candidate neurons will be generated by this parameter. 
The default number of candidate groups is 2.
</Desc>
    <FName>fann_get_cascade_num_candidates</FName>
    <Desc>int fann_get_cascade_num_candidates ( resource $ann )
The number of candidates used during training (calculated by multiplying fann_get_cascade_activation_functions_count(), fann_get_cascade_activation_steepnesses_count() and fann_get_cascade_num_candidate_groups()). 
The actual candidates is defined by the fann_get_cascade_activation_functions() and fann_get_cascade_activation_steepnesses() arrays. These arrays define the activation functions and activation steepnesses used for the candidate neurons. If there are 2 activation functions in the activation function array and 3 steepnesses in the steepness array, then there will be 2x3=6 different candidates which will be trained. These 6 different candidates can be copied into several candidate groups, where the only difference between these groups is the initial weights. If the number of groups is set to 2, then the number of candidate neurons will be 2x3x2=12. The number of candidate groups is defined by fann_set_cascade_num_candidate_groups(). 
The default number of candidates is 6x4x2 = 48
</Desc>
    <FName>fann_get_cascade_output_change_fraction</FName>
    <Desc>float fann_get_cascade_output_change_fraction ( resource $ann )
The cascade output change fraction is a number between 0 and 1 determining how large a fraction of the fann_get_MSE() value should change within fann_get_cascade_output_stagnation_epochs() during training of the output connections, in order for the training not to stagnate. If the training stagnates, the training of the output connections will be ended and new candidates will be prepared. 
It means that if the MSE does not change by a fraction of fann_get_cascade_output_change_fraction() during a period of fann_get_cascade_output_stagnation_epochs(), the training of the output connections is stopped because the training has stagnated. 
If the cascade output change fraction is low, the output connections will be trained more and if the fraction is high, they will be trained less. 
The default cascade output change fraction is 0.01, which is equalent to a 1% change in MSE.
</Desc>
    <FName>fann_get_cascade_output_stagnation_epochs</FName>
    <Desc>int fann_get_cascade_output_stagnation_epochs ( resource $ann )
The number of cascade output stagnation epochs determines the number of epochs training is allowed to continue without changing the MSE by a fraction of fann_get_cascade_output_change_fraction(). 
See more info about this parameter in fann_get_cascade_output_change_fraction(). 
The default number of cascade output stagnation epochs is 12.
</Desc>
    <FName>fann_get_cascade_weight_multiplier</FName>
    <Desc>float fann_get_cascade_weight_multiplier ( resource $ann )
The weight multiplier is a parameter which is used to multiply the weights from the candidate neuron before adding the neuron to the neural network. This parameter is usually between 0 and 1, and is used to make the training a bit less aggressive. 
The default weight multiplier is 0.4.
</Desc>
    <FName>fann_get_connection_array</FName>
    <Desc>array fann_get_connection_array ( resource $ann )
Get connections in the network.
</Desc>
    <FName>fann_get_connection_rate</FName>
    <Desc>float fann_get_connection_rate ( resource $ann )
Get the connection rate used when the network was created.
</Desc>
    <FName>fann_get_errno</FName>
    <Desc>int fann_get_errno ( resource $errdat )
Returns the last error number.
</Desc>
    <FName>fann_get_errstr</FName>
    <Desc>string fann_get_errstr ( resource $errdat )
Returns the last errstr.
</Desc>
    <FName>fann_get_layer_array</FName>
    <Desc>array fann_get_layer_array ( resource $ann )
Get the number of neurons in each layer in the neural network. 
Bias is not included so the layers match the fann_create functions.
</Desc>
    <FName>fann_get_learning_momentum</FName>
    <Desc>float fann_get_learning_momentum ( resource $ann )
The learning momentum can be used to speed up FANN_TRAIN_INCREMENTAL training. A too high momentum will however not benefit training. Setting momentum to 0 will be the same as not using the momentum parameter. The recommended value of this parameter is between 0.0 and 1.0. 
The default momentum is 0.
</Desc>
    <FName>fann_get_learning_rate</FName>
    <Desc>float fann_get_learning_rate ( resource $ann )
The learning rate is used to determine how aggressive training should be for some of the training algorithms (FANN_TRAIN_INCREMENTAL, FANN_TRAIN_BATCH, FANN_TRAIN_QUICKPROP). Do however note that it is not used in FANN_TRAIN_RPROP. 
The default learning rate is 0.7.
</Desc>
    <FName>fann_get_MSE</FName>
    <Desc>float fann_get_MSE ( resource $ann )
Reads the mean square error from the network. 
Reads the mean square error from the network. This value is calculated during training or testing and can therefore sometimes be a bit off if the weights have been changed since the last calculation of the value.
</Desc>
    <FName>fann_get_network_type</FName>
    <Desc>int fann_get_network_type ( resource $ann )
Get the type of neural network it was created as.
</Desc>
    <FName>fann_get_num_input</FName>
    <Desc>int fann_get_num_input ( resource $ann )
Get the number of input neurons.
</Desc>
    <FName>fann_get_num_layers</FName>
    <Desc>int fann_get_num_layers ( resource $ann )
Get the number of layers in the neural network.
</Desc>
    <FName>fann_get_num_output</FName>
    <Desc>int fann_get_num_output ( resource $ann )
Get the number of output neurons.
</Desc>
    <FName>fann_get_quickprop_decay</FName>
    <Desc>float fann_get_quickprop_decay ( resource $ann )
The decay is a small negative valued number which is a factor that the weights should decrease in each iteration during quickprop training. This is used to make sure that the weights do not become too high during training. 
The default decay is -0.0001.
</Desc>
    <FName>fann_get_quickprop_mu</FName>
    <Desc>float fann_get_quickprop_mu ( resource $ann )
The mu factor is used to increase and decrease the step-size during quickprop training. The mu factor should always be above 1, since it would otherwise decrease the step-size when it was suppose to increase it. 
The default mu factor is 1.75.
</Desc>
    <FName>fann_get_rprop_decrease_factor</FName>
    <Desc>float fann_get_rprop_decrease_factor ( resource $ann )
The decrease factor is a value smaller than 1, which is used to decrease the step-size during RPROP training. 
The default decrease factor is 0.5.
</Desc>
    <FName>fann_get_rprop_delta_max</FName>
    <Desc>float fann_get_rprop_delta_max ( resource $ann )
The maximum step-size is a positive number determining how large the maximum step-size may be. 
The default delta max is 50.0.
</Desc>
    <FName>fann_get_rprop_delta_min</FName>
    <Desc>float fann_get_rprop_delta_min ( resource $ann )
The minimum step-size is a small positive number determining how small the minimum step-size may be. 
The default value delta min is 0.0.
</Desc>
    <FName>fann_get_rprop_delta_zero</FName>
    <Desc>int fann_get_rprop_delta_zero ( resource $ann )
The initial step-size is a positive number determining the initial step size. 
The default delta zero is 0.1.
</Desc>
    <FName>fann_get_rprop_increase_factor</FName>
    <Desc>float fann_get_rprop_increase_factor ( resource $ann )
The increase factor is a value larger than 1, which is used to increase the step-size during RPROP training. 
The default increase factor is 1.2.
</Desc>
    <FName>fann_get_sarprop_step_error_shift</FName>
    <Desc>float fann_get_sarprop_step_error_shift ( resource $ann )
Returns the sarprop step error shift. 
The default step error shift is 1.385.
</Desc>
    <FName>fann_get_sarprop_step_error_threshold_factor</FName>
    <Desc>float fann_get_sarprop_step_error_threshold_factor ( resource $ann )
The sarprop step error threshold factor. 
The default factor is 0.1.
</Desc>
    <FName>fann_get_sarprop_temperature</FName>
    <Desc>float fann_get_sarprop_temperature ( resource $ann )
Returns the sarprop temperature. 
The default temperature is 0.015.
</Desc>
    <FName>fann_get_sarprop_weight_decay_shift</FName>
    <Desc>float fann_get_sarprop_weight_decay_shift ( resource $ann )
The sarprop weight decay shift. 
The default delta max is -6.644.
</Desc>
    <FName>fann_get_total_connections</FName>
    <Desc>int fann_get_total_connections ( resource $ann )
Get the total number of connections in the entire network.
</Desc>
    <FName>fann_get_total_neurons</FName>
    <Desc>int fann_get_total_neurons ( resource $ann )
Get the total number of neurons in the entire network. This number does also include the bias neurons, so a 2-4-2 network has 2+4+2 +2(bias) = 10 neurons.
</Desc>
    <FName>fann_get_train_error_function</FName>
    <Desc>int fann_get_train_error_function ( resource $ann )
Returns the error function used during training. 
The error functions are described further in error functions constants. 
The default error function is FANN_ERRORFUNC_TANH.
</Desc>
    <FName>fann_get_train_stop_function</FName>
    <Desc>int fann_get_train_stop_function ( resource $ann )
Returns the stop function used during training. 
The stop functions are described further in stop functions constants. 
The default stop function is FANN_STOPFUNC_MSE.
</Desc>
    <FName>fann_get_training_algorithm</FName>
    <Desc>int fann_get_training_algorithm ( resource $ann )
Returns the training algorithm. This training algorithm is used by fann_train_on_data() and associated functions. 
Note that this algorithm is also used during fann_cascadetrain_on_data(), although only FANN_TRAIN_RPROP and FANN_TRAIN_QUICKPROP is allowed during cascade training.
</Desc>
    <FName>fann_init_weights</FName>
    <Desc>bool fann_init_weights ( resource $ann , resource $train_data )
Initialize the weights using Widrow + Nguyen’s algorithm. 
This function behaves similarly to fann_randomize_weights(). It will use the algorithm developed by Derrick Nguyen and Bernard Widrow to set the weights in such a way as to speed up training. This technique is not always successful, and in some cases can be less efficient than a purely random initialization. 
The algorithm requires access to the range of the input data (for example largest and smallest input), and therefore accepts a second argument, data, which is the training data that will be used to train the network.
</Desc>
    <FName>fann_length_train_data</FName>
    <Desc>int fann_length_train_data ( resource $data )
Returns the number of training patterns in the train data resource.
</Desc>
    <FName>fann_merge_train_data</FName>
    <Desc>resource fann_merge_train_data ( resource $data1 , resource $data2 )
Merges the data from data1 and data2 into a new train data resource.
</Desc>
    <FName>fann_num_input_train_data</FName>
    <Desc>int fann_num_input_train_data ( resource $data )
Returns the number of inputs in each of the training patterns in the train data resource.
</Desc>
    <FName>fann_num_output_train_data</FName>
    <Desc>int fann_num_output_train_data ( resource $data )
Returns the number of outputs in each of the training patterns in the train data resource.
</Desc>
    <FName>fann_print_error</FName>
    <Desc>void fann_print_error ( resource $errdat )
Prints the error string.
</Desc>
    <FName>fann_randomize_weights</FName>
    <Desc>bool fann_randomize_weights ( resource $ann , float $min_weight , float $max_weight )
Give each connection a random weight between min_weight and max_weight 
From the beginning the weights are random between -0.1 and 0.1.
</Desc>
    <FName>fann_read_train_from_file</FName>
    <Desc>resource fann_read_train_from_file ( string $filename )
Reads a file that stores training data.
</Desc>
    <FName>fann_reset_errno</FName>
    <Desc>void fann_reset_errno ( resource $errdat )
Resets the last error number.
</Desc>
    <FName>fann_reset_errstr</FName>
    <Desc>void fann_reset_errstr ( resource $errdat )
Resets the last error string.
</Desc>
    <FName>fann_reset_MSE</FName>
    <Desc>bool fann_reset_MSE ( string $ann )
Resets the mean square error from the network. 
This function also resets the number of bits that fail.
</Desc>
    <FName>fann_run</FName>
    <Desc>array fann_run ( resource $ann , array $input )
Will run input through the neural network, returning an array of outputs, the number of which being equal to the number of neurons in the output layer.
</Desc>
    <FName>fann_save_train</FName>
    <Desc>bool fann_save_train ( resource $data , string $file_name )
Save the training data to a file, with the format as specified in fann_read_train_from_file().
</Desc>
    <FName>fann_save</FName>
    <Desc>bool fann_save ( resource $ann , string $configuration_file )
Saves the entire network to a configuration file. 
The configuration file contains all information about the neural network and enables fann_create_from_file() to create an exact copy of the neural network and all of the parameters associated with the neural network. 
These three parameters (fann_set_callback(), fann_set_error_log(), fann_set_user_data()) are NOT saved to the file because they cannot safely be ported to a different location. Also temporary parameters generated during training like fann_get_MSE() is not saved.
</Desc>
    <FName>fann_scale_input_train_data</FName>
    <Desc>bool fann_scale_input_train_data ( resource $train_data , float $new_min , float $new_max )
Scales the inputs in the training data to the specified range.
</Desc>
    <FName>fann_scale_input</FName>
    <Desc>bool fann_scale_input ( resource $ann , array $input_vector )
Scale data in input vector before feed it to ann based on previously calculated parameters.
</Desc>
    <FName>fann_scale_output_train_data</FName>
    <Desc>bool fann_scale_output_train_data ( resource $train_data , float $new_min , float $new_max )
Scales the outputs in the training data to the specified range.
</Desc>
    <FName>fann_scale_output</FName>
    <Desc>bool fann_scale_output ( resource $ann , array $output_vector )
Scale data in output vector before feed it to ann based on previously calculated parameters.
</Desc>
    <FName>fann_scale_train_data</FName>
    <Desc>bool fann_scale_train_data ( resource $train_data , float $new_min , float $new_max )
Scales the inputs and outputs in the training data to the specified range.
</Desc>
    <FName>fann_scale_train</FName>
    <Desc>bool fann_scale_train ( resource $ann , resource $train_data )
Scale input and output data based on previously calculated parameters.
</Desc>
    <FName>fann_set_activation_function_hidden</FName>
    <Desc>bool fann_set_activation_function_hidden ( resource $ann , int $activation_function )
Sets the activation function for all of the hidden layers.
</Desc>
    <FName>fann_set_activation_function_layer</FName>
    <Desc>bool fann_set_activation_function_layer ( resource $ann , int $activation_function , int $layer )
Set the activation function for all the neurons in the layer number layer, counting the input layer as layer 0. 
It is not possible to set activation functions for the neurons in the input layer.
</Desc>
    <FName>fann_set_activation_function_output</FName>
    <Desc>bool fann_set_activation_function_output ( resource $ann , int $activation_function )
Sets the activation function for the output layer.
</Desc>
    <FName>fann_set_activation_function</FName>
    <Desc>bool fann_set_activation_function ( resource $ann , int $activation_function , int $layer , int $neuron )
Set the activation function for neuron number neuron in layer number layer, counting the input layer as layer 0. 
It is not possible to set activation functions for the neurons in the input layer. 
When choosing an activation function it is important to note that the activation functions have different range. FANN_SIGMOID is e.g. in the 0 - 1 range while FANN_SIGMOID_SYMMETRIC is in the -1 - 1 range and FANN_LINEAR is unbound. 
The supplied activation_function value must be one of the activation functions constants. 
The return value is one of the activation functions constants.
</Desc>
    <FName>fann_set_activation_steepness_hidden</FName>
    <Desc>bool fann_set_activation_steepness_hidden ( resource $ann , float $activation_steepness )
Sets the steepness of the activation steepness for all neurons in the all hidden layers.
</Desc>
    <FName>fann_set_activation_steepness_layer</FName>
    <Desc>bool fann_set_activation_steepness_layer ( resource $ann , float $activation_steepness , int $layer )
Set the activation steepness for all of the neurons in layer number layer, counting the input layer as layer 0. 
It is not possible to set activation steepness for the neurons in the input layer.
</Desc>
    <FName>fann_set_activation_steepness_output</FName>
    <Desc>bool fann_set_activation_steepness_output ( resource $ann , float $activation_steepness )
Sets the steepness of the activation steepness in the output layer.
</Desc>
    <FName>fann_set_activation_steepness</FName>
    <Desc>bool fann_set_activation_steepness ( resource $ann , float $activation_steepness , int $layer , int $neuron )
Set the activation steepness for neuron number neuron in layer number layer, counting the input layer as layer 0. 
It is not possible to set activation steepness for the neurons in the input layer. 
The steepness of an activation function says something about how fast the activation function goes from the minimum to the maximum. A high value for the activation function will also give a more agressive training. 
When training neural networks where the output values should be at the extremes (usually 0 and 1, depending on the activation function), a steep activation function can be used (e.g. 1.0). 
The default activation steepness is 0.5.
</Desc>
    <FName>fann_set_bit_fail_limit</FName>
    <Desc>bool fann_set_bit_fail_limit ( resource $ann , float $bit_fail_limit )
Set the bit fail limit used during training.
</Desc>
    <FName>fann_set_callback</FName>
    <Desc>bool fann_set_callback ( resource $ann , collable $callback )
Sets the callback function for use during training. It means that it is called from fann_train_on_data() or fann_train_on_file().
</Desc>
    <FName>fann_set_cascade_activation_functions</FName>
    <Desc>bool fann_set_cascade_activation_functions ( resource $ann , array $cascade_activation_functions )
Sets the array of cascade candidate activation functions. 
See fann_get_cascade_num_candidates() for a description of which candidate neurons will be generated by this array.
</Desc>
    <FName>fann_set_cascade_activation_steepnesses</FName>
    <Desc>bool fann_set_cascade_activation_steepnesses ( resource $ann , array $cascade_activation_steepnesses_count )
Sets the array of cascade candidate activation steepnesses. 
See fann_get_cascade_num_candidates() for a description of which candidate neurons will be generated by this array.
</Desc>
    <FName>fann_set_cascade_candidate_change_fraction</FName>
    <Desc>bool fann_set_cascade_candidate_change_fraction ( resource $ann , float $cascade_candidate_change_fraction )
Sets the cascade candidate change fraction.
</Desc>
    <FName>fann_set_cascade_candidate_limit</FName>
    <Desc>bool fann_set_cascade_candidate_limit ( resource $ann , float $cascade_candidate_limit )
Sets the candidate limit.
</Desc>
    <FName>fann_set_cascade_candidate_stagnation_epochs</FName>
    <Desc>bool fann_set_cascade_candidate_stagnation_epochs ( resource $ann , int $cascade_candidate_stagnation_epochs )
Sets the number of cascade candidate stagnation epochs.
</Desc>
    <FName>fann_set_cascade_max_cand_epochs</FName>
    <Desc>bool fann_set_cascade_max_cand_epochs ( resource $ann , int $cascade_max_cand_epochs )
Sets the max candidate epochs.
</Desc>
    <FName>fann_set_cascade_max_out_epochs</FName>
    <Desc>bool fann_set_cascade_max_out_epochs ( resource $ann , int $cascade_max_out_epochs )
Sets the maximum out epochs.
</Desc>
    <FName>fann_set_cascade_min_cand_epochs</FName>
    <Desc>bool fann_set_cascade_min_cand_epochs ( resource $ann , int $cascade_min_cand_epochs )
Sets the min candidate epochs.
</Desc>
    <FName>fann_set_cascade_min_out_epochs</FName>
    <Desc>bool fann_set_cascade_min_out_epochs ( resource $ann , int $cascade_min_out_epochs )
Sets the minimum out epochs.
</Desc>
    <FName>fann_set_cascade_num_candidate_groups</FName>
    <Desc>bool fann_set_cascade_num_candidate_groups ( resource $ann , int $cascade_num_candidate_groups )
Sets the number of candidate groups.
</Desc>
    <FName>fann_set_cascade_output_change_fraction</FName>
    <Desc>bool fann_set_cascade_output_change_fraction ( resource $ann , float $cascade_output_change_fraction )
Sets the cascade output change fraction.
</Desc>
    <FName>fann_set_cascade_output_stagnation_epochs</FName>
    <Desc>bool fann_set_cascade_output_stagnation_epochs ( resource $ann , int $cascade_output_stagnation_epochs )
Sets the number of cascade output stagnation epochs.
</Desc>
    <FName>fann_set_cascade_weight_multiplier</FName>
    <Desc>bool fann_set_cascade_weight_multiplier ( resource $ann , float $cascade_weight_multiplier )
Sets the weight multiplier.
</Desc>
    <FName>fann_set_error_log</FName>
    <Desc>void fann_set_error_log ( resource $errdat , string $log_file )
Sets where the errors are logged to.
</Desc>
    <FName>fann_set_input_scaling_params</FName>
    <Desc>bool fann_set_input_scaling_params ( resource $ann , resource $train_data , float $new_input_min , float $new_input_max )
Calculate input scaling parameters for future use based on training data.
</Desc>
    <FName>fann_set_learning_momentum</FName>
    <Desc>bool fann_set_learning_momentum ( resource $ann , float $learning_momentum )
Sets the learning momentum. 
More info available in fann_get_learning_momentum().
</Desc>
    <FName>fann_set_learning_rate</FName>
    <Desc>bool fann_set_learning_rate ( resource $ann , float $learning_rate )
Sets the learning rate. 
More info available in fann_get_learning_rate().
</Desc>
    <FName>fann_set_output_scaling_params</FName>
    <Desc>bool fann_set_output_scaling_params ( resource $ann , resource $train_data , float $new_output_min , float $new_output_max )
Calculate output scaling parameters for future use based on training data.
</Desc>
    <FName>fann_set_quickprop_decay</FName>
    <Desc>bool fann_set_quickprop_decay ( resource $ann , float $quickprop_decay )
Sets the quickprop decay factor.
</Desc>
    <FName>fann_set_quickprop_mu</FName>
    <Desc>bool fann_set_quickprop_mu ( resource $ann , float $quickprop_mu )
Sets the quickprop mu factor.
</Desc>
    <FName>fann_set_rprop_decrease_factor</FName>
    <Desc>bool fann_set_rprop_decrease_factor ( resource $ann , float $rprop_decrease_factor )
Sets the decrease factor used during RPROP training.
</Desc>
    <FName>fann_set_rprop_delta_max</FName>
    <Desc>bool fann_set_rprop_delta_max ( resource $ann , float $rprop_delta_max )
The maximum step-size is a positive number determining how large the maximum step-size may be.
</Desc>
    <FName>fann_set_rprop_delta_min</FName>
    <Desc>bool fann_set_rprop_delta_min ( resource $ann , float $rprop_delta_min )
The minimum step-size is a small positive number determining how small the minimum step-size may be.
</Desc>
    <FName>fann_set_rprop_delta_zero</FName>
    <Desc>bool fann_set_rprop_delta_zero ( resource $ann , float $rprop_delta_zero )
The initial step-size is a positive number determining the initial step size.
</Desc>
    <FName>fann_set_rprop_increase_factor</FName>
    <Desc>bool fann_set_rprop_increase_factor ( resource $ann , float $rprop_increase_factor )
Sets the increase factor used during RPROP training.
</Desc>
    <FName>fann_set_sarprop_step_error_shift</FName>
    <Desc>bool fann_set_sarprop_step_error_shift ( resource $ann , float $sarprop_step_error_shift )
Sets the sarprop step error shift.
</Desc>
    <FName>fann_set_sarprop_step_error_threshold_factor</FName>
    <Desc>bool fann_set_sarprop_step_error_threshold_factor ( resource $ann , float $sarprop_step_error_threshold_factor )
Sets the sarprop step error threshold factor.
</Desc>
    <FName>fann_set_sarprop_temperature</FName>
    <Desc>bool fann_set_sarprop_temperature ( resource $ann , float $sarprop_temperature )
Sets the sarprop temperature.
</Desc>
    <FName>fann_set_sarprop_weight_decay_shift</FName>
    <Desc>bool fann_set_sarprop_weight_decay_shift ( resource $ann , float $sarprop_weight_decay_shift )
Sets the sarprop weight decay shift.
</Desc>
    <FName>fann_set_scaling_params</FName>
    <Desc>bool fann_set_scaling_params ( resource $ann , resource $train_data , float $new_input_min , float $new_input_max , float $new_output_min , float $new_output_max )
Calculate input and output scaling parameters for future use based on training data.
</Desc>
    <FName>fann_set_train_error_function</FName>
    <Desc>bool fann_set_train_error_function ( resource $ann , int $error_function )
Sets the error function used during training. 
The error functions are described further in error functions constants.
</Desc>
    <FName>fann_set_train_stop_function</FName>
    <Desc>bool fann_set_train_stop_function ( resource $ann , int $stop_function )
Sets the stop function used during training. 
The stop functions are described further in stop functions constants.
</Desc>
    <FName>fann_set_training_algorithm</FName>
    <Desc>bool fann_set_training_algorithm ( resource $ann , int $training_algorithm )
Sets the training algorithm. 
More info available in fann_get_training_algorithm().
</Desc>
    <FName>fann_set_weight_array</FName>
    <Desc>bool fann_set_weight_array ( resource $ann , array $connections )
Set connections in the network. 
Only the weights can be changed, connections and weights are ignored if they do not already exist in the network.
</Desc>
    <FName>fann_set_weight</FName>
    <Desc>bool fann_set_weight ( resource $ann , int $from_neuron , int $to_neuron , float $weight )
Set a connections in the network.
</Desc>
    <FName>fann_shuffle_train_data</FName>
    <Desc>bool fann_shuffle_train_data ( resource $train_data )
Shuffles training data, randomizing the order. This is recommended for incremental training, while it have no influence during batch training.
</Desc>
    <FName>fann_subset_train_data</FName>
    <Desc>resource fann_subset_train_data ( resource $data , int $pos , int $length )
Returns an copy of a subset of the train data resource, starting at position pos and length elements forward. 
The fann_subset_train_data(train_data, 0, fann_length_train_data(train_data)) do the same as fann_duplicate_train_data()
</Desc>
    <FName>fann_test_data</FName>
    <Desc>float fann_test_data ( resource $ann , resource $data )
Test a set of training data and calculates the MSE for the training data. 
This function updates the MSE and the bit fail values.
</Desc>
    <FName>fann_test</FName>
    <Desc>array fann_test ( resource $ann , array $input , array $desired_output )
Test with a set of inputs, and a set of desired outputs. This operation updates the mean square error, but does not change the network in any way.
</Desc>
    <FName>fann_train_epoch</FName>
    <Desc>float fann_train_epoch ( resource $ann , resource $data )
Train one epoch with the training data stored in data. One epoch is where all of the training data is considered exactly once. 
This function returns the MSE error as it is calculated either before or during the actual training. This is not the actual MSE after the training epoch, but since calculating this will require to go through the entire training set once more. It is more than adequate to use this value during training. 
The training algorithm used by this function is chosen by fann_set_training_algorithm() function.
</Desc>
    <FName>fann_train_on_data</FName>
    <Desc>bool fann_train_on_data ( resource $ann , resource $data , int $max_epochs , int $epochs_between_reports , float $desired_error )
Trains on an entire dataset for a period of time. 
This training uses the training algorithm chosen by fann_set_training_algorithm() and the parameters set for these training algorithms.
</Desc>
    <FName>fann_train_on_file</FName>
    <Desc>bool fann_train_on_file ( resource $ann , string $filename , int $max_epochs , int $epochs_between_reports , float $desired_error )
Trains on an entire dataset, which is read from file, for a period of time. 
This training uses the training algorithm chosen by fann_set_training_algorithm() and the parameters set for these training algorithms.
</Desc>
    <FName>fann_train</FName>
    <Desc>bool fann_train ( resource $ann , array $input , array $desired_output )
Train one iteration with a set of inputs, and a set of desired outputs. This training is always incremental training, since only one pattern is presented.
</Desc>
    <FName>fastcgi_finish_request</FName>
    <Desc>bool fastcgi_finish_request ( void )
This function flushes all response data to the client and finishes the request. This allows for time consuming tasks to be performed without leaving the connection to the client open.
</Desc>
    <FName>fbsql_affected_rows</FName>
    <Desc>int fbsql_affected_rows ([ resource $link_identifier ] )
fbsql_affected_rows() returns the number of rows affected by the last INSERT, UPDATE or DELETE query associated with link_identifier. 
Note: 
If you are using transactions, you need to call fbsql_affected_rows() after your INSERT, UPDATE, or DELETE query, not after the commit. 
If the last query was a DELETE query with no WHERE clause, all of the records will have been deleted from the table but this function will return zero. 
Note: 
When using UPDATE, FrontBase will not update columns where the new value is the same as the old value. This creates the possibility that fbsql_affected_rows() may not actually equal the number of rows matched, only the number of rows that were literally affected by the query.
</Desc>
    <FName>fbsql_autocommit</FName>
    <Desc>bool fbsql_autocommit ( resource $link_identifier [, bool $OnOff ] )
Returns the current autocommit status.
</Desc>
    <FName>fbsql_blob_size</FName>
    <Desc>int fbsql_blob_size ( string $blob_handle [, resource $link_identifier ] )
Returns the size of the given BLOB.
</Desc>
    <FName>fbsql_change_user</FName>
    <Desc>bool fbsql_change_user ( string $user , string $password [, string $database [, resource $link_identifier ]] )
fbsql_change_user() changes the logged in user of the specified connection. If the new user and password authorization fails, the current connected user stays active.
</Desc>
    <FName>fbsql_clob_size</FName>
    <Desc>int fbsql_clob_size ( string $clob_handle [, resource $link_identifier ] )
Returns the size of the given CLOB.
</Desc>
    <FName>fbsql_close</FName>
    <Desc>bool fbsql_close ([ resource $link_identifier ] )
Closes the connection to the FrontBase server that's associated with the specified link identifier. 
Using fbsql_close() isn't usually necessary, as non-persistent open links are automatically closed at the end of the script's execution.
</Desc>
    <FName>fbsql_commit</FName>
    <Desc>bool fbsql_commit ([ resource $link_identifier ] )
Ends the current transaction by writing all inserts, updates and deletes to the disk and unlocking all row and table locks held by the transaction. This command is only needed if autocommit is set to false.
</Desc>
    <FName>fbsql_connect</FName>
    <Desc>resource fbsql_connect ([ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password") ]]] )
fbsql_connect() establishes a connection to a FrontBase server. 
If a second call is made to fbsql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned. 
The link to the server will be closed as soon as the execution of the script ends, unless it's closed earlier by explicitly calling fbsql_close().
</Desc>
    <FName>fbsql_create_blob</FName>
    <Desc>string fbsql_create_blob ( string $blob_data [, resource $link_identifier ] )
Creates a BLOB from the given data.
</Desc>
    <FName>fbsql_create_clob</FName>
    <Desc>string fbsql_create_clob ( string $clob_data [, resource $link_identifier ] )
Creates a CLOB from the given data.
</Desc>
    <FName>fbsql_create_db</FName>
    <Desc>bool fbsql_create_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )
Attempts to create a new database on the specified server.
</Desc>
    <FName>fbsql_data_seek</FName>
    <Desc>bool fbsql_data_seek ( resource $result , int $row_number )
Moves the internal row pointer of the FrontBase result associated with the specified result identifier to point to the specified row number. 
The next call to fbsql_fetch_row() would return that row.
</Desc>
    <FName>fbsql_database_password</FName>
    <Desc>string fbsql_database_password ( resource $link_identifier [, string $database_password ] )
Sets and retrieves the database password used by the connection. If a database is protected by a database password, the user must call this function before calling fbsql_select_db(). 
If no link is open, the function will try to establish a link as if fbsql_connect() was called, and use it. 
This function does not change the database password in the database nor can it be used to retrieve the database password for a database.
</Desc>
    <FName>fbsql_database</FName>
    <Desc>string fbsql_database ( resource $link_identifier [, string $database ] )
Get or set the database name used with the connection.
</Desc>
    <FName>fbsql_db_query</FName>
    <Desc>resource fbsql_db_query ( string $database , string $query [, resource $link_identifier ] )
Selects a database and executes a query on it.
</Desc>
    <FName>fbsql_db_status</FName>
    <Desc>int fbsql_db_status ( string $database_name [, resource $link_identifier ] )
Gets the current status of the specified database.
</Desc>
    <FName>fbsql_drop_db</FName>
    <Desc>bool fbsql_drop_db ( string $database_name [, resource $link_identifier ] )
fbsql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier.
</Desc>
    <FName>fbsql_errno</FName>
    <Desc>int fbsql_errno ([ resource $link_identifier ] )
Returns the numerical value of the error message from previous FrontBase operation. 
Errors coming back from the fbsql database backend don't issue warnings. Instead, use fbsql_errno() to retrieve the error code. Note that this function only returns the error code from the most recently executed fbsql function (not including fbsql_error() and fbsql_errno()), so if you want to use it, make sure you check the value before calling another fbsql function.
</Desc>
    <FName>fbsql_error</FName>
    <Desc>string fbsql_error ([ resource $link_identifier ] )
Returns the error message from previous FrontBase operation. 
Errors coming back from the fbsql database backend don't issue warnings. Instead, use fbsql_error() to retrieve the error text. Note that this function only returns the error code from the most recently executed fbsql function (not including fbsql_error() and fbsql_errno()), so if you want to use it, make sure you check the value before calling another fbsql function.
</Desc>
    <FName>fbsql_fetch_array</FName>
    <Desc>array fbsql_fetch_array ( resource $result [, int $result_type ] )
fbsql_fetch_array() is a combination of fbsql_fetch_row() and fbsql_fetch_assoc(). 
An important thing to note is that using fbsql_fetch_array() is NOT significantly slower than using fbsql_fetch_row(), while it provides a significant added value.
</Desc>
    <FName>fbsql_fetch_assoc</FName>
    <Desc>array fbsql_fetch_assoc ( resource $result )
Calling fbsql_fetch_assoc() is equivalent to calling fbsql_fetch_array() with FBSQL_ASSOC as second parameter. It only returns an associative array. 
This is the way fbsql_fetch_array() originally worked. If you need the numeric indices as well as the associative, use fbsql_fetch_array(). 
An important thing to note is that using fbsql_fetch_assoc() is NOT significantly slower than using fbsql_fetch_row(), while it provides a significant added value.
</Desc>
    <FName>fbsql_fetch_field</FName>
    <Desc>object fbsql_fetch_field ( resource $result [, int $field_offset ] )
Used in order to obtain information about fields in a certain query result.
</Desc>
    <FName>fbsql_fetch_lengths</FName>
    <Desc>array fbsql_fetch_lengths ( resource $result )
Stores the lengths of each result column in the last row returned by fbsql_fetch_row(), fbsql_fetch_array() and fbsql_fetch_object() in an array.
</Desc>
    <FName>fbsql_fetch_object</FName>
    <Desc>object fbsql_fetch_object ( resource $result )
fbsql_fetch_object() is similar to fbsql_fetch_array(), with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names). 
Speed-wise, the function is identical to fbsql_fetch_array(), and almost as quick as fbsql_fetch_row() (the difference is insignificant).
</Desc>
    <FName>fbsql_fetch_row</FName>
    <Desc>array fbsql_fetch_row ( resource $result )
fbsql_fetch_row() fetches one row of data from the result associated with the specified result identifier. 
Subsequent call to fbsql_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.
</Desc>
    <FName>fbsql_field_flags</FName>
    <Desc>string fbsql_field_flags ( resource $result [, int $field_offset ] )
Gets the flags associated with the specified field in a result.
</Desc>
    <FName>fbsql_field_len</FName>
    <Desc>int fbsql_field_len ( resource $result [, int $field_offset ] )
Returns the length of the specified field.
</Desc>
    <FName>fbsql_field_name</FName>
    <Desc>string fbsql_field_name ( resource $result [, int $field_index ] )
Returns the name of the specified field index.
</Desc>
    <FName>fbsql_field_seek</FName>
    <Desc>bool fbsql_field_seek ( resource $result [, int $field_offset ] )
Seeks to the specified field offset. If the next call to fbsql_fetch_field() doesn't include a field offset, the field offset specified in fbsql_field_seek() will be returned.
</Desc>
    <FName>fbsql_field_table</FName>
    <Desc>string fbsql_field_table ( resource $result [, int $field_offset ] )
Returns the name of the table that the specified field is in.
</Desc>
    <FName>fbsql_field_type</FName>
    <Desc>string fbsql_field_type ( resource $result [, int $field_offset ] )
fbsql_field_type() is similar to the fbsql_field_name() function, but the field type is returned instead.
</Desc>
    <FName>fbsql_free_result</FName>
    <Desc>bool fbsql_free_result ( resource $result )
Frees all memory associated with the given result identifier. 
fbsql_free_result() only needs to be called if you are concerned about how much memory is being used for queries that return large result sets. All associated result memory is automatically freed at the end of the script's execution.
</Desc>
    <FName>fbsql_get_autostart_info</FName>
    <Desc>array fbsql_get_autostart_info ([ resource $link_identifier ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>fbsql_hostname</FName>
    <Desc>string fbsql_hostname ( resource $link_identifier [, string $host_name ] )
Gets or sets the host name used with a connection.
</Desc>
    <FName>fbsql_insert_id</FName>
    <Desc>int fbsql_insert_id ([ resource $link_identifier ] )
Gets the id generated from the previous INSERT operation which created a DEFAULT UNIQUE value. 
Note: 
The value of the FrontBase SQL function fbsql_insert_id() always contains the most recently generated DEFAULT UNIQUE value, and is not reset between queries.
</Desc>
    <FName>fbsql_list_dbs</FName>
    <Desc>resource fbsql_list_dbs ([ resource $link_identifier ] )
Return a result pointer containing the databases available from the current fbsql daemon. Use the fbsql_tablename() to traverse this result pointer.
</Desc>
    <FName>fbsql_list_fields</FName>
    <Desc>resource fbsql_list_fields ( string $database_name , string $table_name [, resource $link_identifier ] )
Retrieves information about the given table.
</Desc>
    <FName>fbsql_list_tables</FName>
    <Desc>resource fbsql_list_tables ( string $database [, resource $link_identifier ] )
Returns a result pointer describing the database.
</Desc>
    <FName>fbsql_next_result</FName>
    <Desc>bool fbsql_next_result ( resource $result )
When sending more than one SQL statement to the server or executing a stored procedure with multiple results will cause the server to return multiple result sets. This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the words from the new result set.
</Desc>
    <FName>fbsql_num_fields</FName>
    <Desc>int fbsql_num_fields ( resource $result )
Returns the number of fields in the given result set.
</Desc>
    <FName>fbsql_num_rows</FName>
    <Desc>int fbsql_num_rows ( resource $result )
Gets the number of rows in the given result set. 
This function is only valid for SELECT statements. To retrieve the number of rows returned from a INSERT, UPDATE or DELETE query, use fbsql_affected_rows().
</Desc>
    <FName>fbsql_password</FName>
    <Desc>string fbsql_password ( resource $link_identifier [, string $password ] )
Get or set the user password used with a connection.
</Desc>
    <FName>fbsql_pconnect</FName>
    <Desc>resource fbsql_pconnect ([ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password") ]]] )
Establishes a persistent connection to a FrontBase server. 
To set the server port number, use fbsql_select_db(). 
fbsql_pconnect() acts very much like fbsql_connect() with two major differences: 
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password. If one is found, an identifier for it will be returned instead of opening a new connection. 
Second, the connection to the SQL server will not be closed when the execution of the script ends. Instead, the link will remain open for future use. 
This type of links is therefore called 'persistent'.
</Desc>
    <FName>fbsql_query</FName>
    <Desc>resource fbsql_query ( string $query [, resource $link_identifier [, int $batch_size ]] )
Sends a query to the currently active database on the server. 
If the query succeeds, you can call fbsql_num_rows() to find out how many rows were returned for a SELECT statement or fbsql_affected_rows() to find out how many rows were affected by a DELETE, INSERT, REPLACE, or UPDATE statement.
</Desc>
    <FName>fbsql_read_blob</FName>
    <Desc>string fbsql_read_blob ( string $blob_handle [, resource $link_identifier ] )
Reads BLOB data from the database. 
If a select statement contains BLOB and/or CLOB columns FrontBase will return the data directly when data is fetched. This default behavior can be changed with fbsql_set_lob_mode() so the fetch functions will return handles to BLOB and CLOB data. If a handle is fetched a user must call fbsql_read_blob() to get the actual BLOB data from the database.
</Desc>
    <FName>fbsql_read_clob</FName>
    <Desc>string fbsql_read_clob ( string $clob_handle [, resource $link_identifier ] )
Reads CLOB data from the database. 
If a select statement contains BLOB and/or CLOB columns FrontBase will return the data directly when data is fetched. This default behavior can be changed with fbsql_set_lob_mode() so the fetch functions will return handles to BLOB and CLOB data. If a handle is fetched a user must call fbsql_read_clob() to get the actual CLOB data from the database.
</Desc>
    <FName>fbsql_result</FName>
    <Desc>mixed fbsql_result ( resource $result [, int $row [, mixed $field ]] )
Returns the contents of one cell from a FrontBase result set. 
When working on large result sets, you should consider using one of the functions that fetch an entire row (specified below). As these functions return the contents of multiple cells in one function call, they're MUCH quicker than fbsql_result(). 
Calls to fbsql_result() should not be mixed with calls to other functions that deal with the result set.
</Desc>
    <FName>fbsql_rollback</FName>
    <Desc>bool fbsql_rollback ([ resource $link_identifier ] )
Ends the current transaction by rolling back all statements issued since last commit. 
This command is only needed if autocommit is set to false.
</Desc>
    <FName>fbsql_rows_fetched</FName>
    <Desc>int fbsql_rows_fetched ( resource $result )
Gets the number of rows affected by the last statement.
</Desc>
    <FName>fbsql_select_db</FName>
    <Desc>bool fbsql_select_db ([ string $database_name [, resource $link_identifier ]] )
Sets the current active database on the given link identifier. 
The client contacts FBExec to obtain the port number to use for the connection to the database. If the database name is a number the system will use that as a port number and it will not ask FBExec for the port number. The FrontBase server can be stared as FRontBase -FBExec=No -port=<port number> <database name>. 
Every subsequent call to fbsql_query() will be made on the active database.
</Desc>
    <FName>fbsql_set_characterset</FName>
    <Desc>void fbsql_set_characterset ( resource $link_identifier , int $characterset [, int $in_out_both ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>fbsql_set_lob_mode</FName>
    <Desc>bool fbsql_set_lob_mode ( resource $result , int $lob_mode )
Sets the mode for retrieving LOB data from the database. 
When BLOB and CLOB data is retrieved in FrontBase it can be retrieved direct or indirect. Direct retrieved LOB data will always be fetched no matter the setting of the lob mode. If the LOB data is less than 512 bytes it will always be retrieved directly.
</Desc>
    <FName>fbsql_set_password</FName>
    <Desc>bool fbsql_set_password ( resource $link_identifier , string $user , string $password , string $old_password )
Changes the password for the given user.
</Desc>
    <FName>fbsql_set_transaction</FName>
    <Desc>void fbsql_set_transaction ( resource $link_identifier , int $locking , int $isolation )
Sets the transaction locking and isolation.
</Desc>
    <FName>fbsql_start_db</FName>
    <Desc>bool fbsql_start_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )
Start a database on local or remote server.
</Desc>
    <FName>fbsql_stop_db</FName>
    <Desc>bool fbsql_stop_db ( string $database_name [, resource $link_identifier ] )
Stops a database on local or remote server.
</Desc>
    <FName>fbsql_table_name</FName>
    <Desc>string fbsql_table_name ( resource $result , int $index )
fbsql_table_name() gets the name of the current table in the given result set. 
The fbsql_num_rows() function may be used to determine the number of tables in the result pointer.
</Desc>
    <FName>fbsql_tablename</FName>
    <Desc>This function is an alias of: fbsql_table_name(). 
</Desc>
    <FName>fbsql_username</FName>
    <Desc>string fbsql_username ( resource $link_identifier [, string $username ] )
Get or set the username used for the connection.
</Desc>
    <FName>fbsql_warnings</FName>
    <Desc>bool fbsql_warnings ([ bool $OnOff ] )
Enables or disables FrontBase warnings.
</Desc>
    <FName>fclose</FName>
    <Desc>bool fclose ( resource $handle )
The file pointed to by handle is closed.
</Desc>
    <FName>fdf_add_doc_javascript</FName>
    <Desc>bool fdf_add_doc_javascript ( resource $fdf_document , string $script_name , string $script_code )
Adds a script to the FDF, which Acrobat then adds to the doc-level scripts of a document, once the FDF is imported into it.
</Desc>
    <FName>fdf_add_template</FName>
    <Desc>bool fdf_add_template ( resource $fdf_document , int $newpage , string $filename , string $template , int $rename )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>fdf_close</FName>
    <Desc>void fdf_close ( resource $fdf_document )
Closes the FDF document.
</Desc>
    <FName>fdf_create</FName>
    <Desc>resource fdf_create ( void )
Creates a new FDF document. 
This function is needed if one would like to populate input fields in a PDF document with data.
</Desc>
    <FName>fdf_enum_values</FName>
    <Desc>bool fdf_enum_values ( resource $fdf_document , callable $function [, mixed $userdata ] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>fdf_errno</FName>
    <Desc>int fdf_errno ( void )
Gets the error code set by the last FDF function call. 
A textual description of the error may be obtained using with fdf_error().
</Desc>
    <FName>fdf_error</FName>
    <Desc>string fdf_error ([ int $error_code = -1 ] )
Gets a textual description for the FDF error code given in error_code.
</Desc>
    <FName>fdf_get_ap</FName>
    <Desc>bool fdf_get_ap ( resource $fdf_document , string $field , int $face , string $filename )
Gets the appearance of a field (i.e. the value of the /AP key) and stores it in a file.
</Desc>
    <FName>fdf_get_attachment</FName>
    <Desc>array fdf_get_attachment ( resource $fdf_document , string $fieldname , string $savepath )
Extracts a file uploaded by means of the "file selection" field fieldname and stores it under savepath.
</Desc>
    <FName>fdf_get_encoding</FName>
    <Desc>string fdf_get_encoding ( resource $fdf_document )
Gets the value of the /Encoding key.
</Desc>
    <FName>fdf_get_file</FName>
    <Desc>string fdf_get_file ( resource $fdf_document )
Gets the value of the /F key.
</Desc>
    <FName>fdf_get_flags</FName>
    <Desc>int fdf_get_flags ( resource $fdf_document , string $fieldname , int $whichflags )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>fdf_get_opt</FName>
    <Desc>mixed fdf_get_opt ( resource $fdf_document , string $fieldname [, int $element = -1 ] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>fdf_get_status</FName>
    <Desc>string fdf_get_status ( resource $fdf_document )
Gets the value of the /STATUS key.
</Desc>
    <FName>fdf_get_value</FName>
    <Desc>mixed fdf_get_value ( resource $fdf_document , string $fieldname [, int $which = -1 ] )
Gets the value for the requested field.
</Desc>
    <FName>fdf_get_version</FName>
    <Desc>string fdf_get_version ([ resource $fdf_document ] )
Return the FDF version for the given document, or the toolkit API version number if no parameter is given.
</Desc>
    <FName>fdf_header</FName>
    <Desc>void fdf_header ( void )
This is a convenience function to set appropriate HTTP headers for FDF output. It sets the Content-type: to application/vnd.fdf.
</Desc>
    <FName>fdf_next_field_name</FName>
    <Desc>string fdf_next_field_name ( resource $fdf_document [, string $fieldname ] )
Gets the name of the field after the given field. This name can be used with several functions.
</Desc>
    <FName>fdf_open_string</FName>
    <Desc>resource fdf_open_string ( string $fdf_data )
Reads form data from a string. 
You can use fdf_open_string() together with $HTTP_FDF_DATA to process FDF form input from a remote client.
</Desc>
    <FName>fdf_open</FName>
    <Desc>resource fdf_open ( string $filename )
Opens a file with form data. 
You can also use fdf_open_string() to process the results of a PDF form POST request.
</Desc>
    <FName>fdf_remove_item</FName>
    <Desc>bool fdf_remove_item ( resource $fdf_document , string $fieldname , int $item )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>fdf_save_string</FName>
    <Desc>string fdf_save_string ( resource $fdf_document )
Returns the FDF document as a string.
</Desc>
    <FName>fdf_save</FName>
    <Desc>bool fdf_save ( resource $fdf_document [, string $filename ] )
Saves a FDF document.
</Desc>
    <FName>fdf_set_ap</FName>
    <Desc>bool fdf_set_ap ( resource $fdf_document , string $field_name , int $face , string $filename , int $page_number )
Sets the appearance of a field (i.e. the value of the /AP key).
</Desc>
    <FName>fdf_set_encoding</FName>
    <Desc>bool fdf_set_encoding ( resource $fdf_document , string $encoding )
Sets the character encoding for the FDF document.
</Desc>
    <FName>fdf_set_file</FName>
    <Desc>bool fdf_set_file ( resource $fdf_document , string $url [, string $target_frame ] )
Selects a different PDF document to display the form results in then the form it originated from.
</Desc>
    <FName>fdf_set_flags</FName>
    <Desc>bool fdf_set_flags ( resource $fdf_document , string $fieldname , int $whichFlags , int $newFlags )
Sets certain flags of the given field.
</Desc>
    <FName>fdf_set_javascript_action</FName>
    <Desc>bool fdf_set_javascript_action ( resource $fdf_document , string $fieldname , int $trigger , string $script )
Sets a javascript action for the given field.
</Desc>
    <FName>fdf_set_on_import_javascript</FName>
    <Desc>bool fdf_set_on_import_javascript ( resource $fdf_document , string $script , bool $before_data_import )
Warning
This function is currently not documented; only its argument list is available. 
See Also
fdf_add_doc_javascript() - Adds javascript code to the FDF document 
fdf_set_javascript_action() - Sets an javascript action of a field 
</Desc>
    <FName>fdf_set_opt</FName>
    <Desc>bool fdf_set_opt ( resource $fdf_document , string $fieldname , int $element , string $str1 , string $str2 )
Sets options of the given field.
</Desc>
    <FName>fdf_set_status</FName>
    <Desc>bool fdf_set_status ( resource $fdf_document , string $status )
Sets the value of the /STATUS key. When a client receives a FDF with a status set it will present the value in an alert box.
</Desc>
    <FName>fdf_set_submit_form_action</FName>
    <Desc>bool fdf_set_submit_form_action ( resource $fdf_document , string $fieldname , int $trigger , string $script , int $flags )
Sets a submit form action for the given field.
</Desc>
    <FName>fdf_set_target_frame</FName>
    <Desc>bool fdf_set_target_frame ( resource $fdf_document , string $frame_name )
Sets the target frame to display a result PDF defined with fdf_save_file() in.
</Desc>
    <FName>fdf_set_value</FName>
    <Desc>bool fdf_set_value ( resource $fdf_document , string $fieldname , mixed $value [, int $isName ] )
Sets the value for the given field.
</Desc>
    <FName>fdf_set_version</FName>
    <Desc>bool fdf_set_version ( resource $fdf_document , string $version )
Sets the FDF version for the given document. 
Some features supported by this extension are only available in newer FDF versions.
</Desc>
    <FName>feof</FName>
    <Desc>bool feof ( resource $handle )
Tests for end-of-file on a file pointer.
</Desc>
    <FName>fflush</FName>
    <Desc>bool fflush ( resource $handle )
This function forces a write of all buffered output to the resource pointed to by the file handle.
</Desc>
    <FName>fgetc</FName>
    <Desc>string fgetc ( resource $handle )
Gets a character from the given file pointer.
</Desc>
    <FName>fgetcsv</FName>
    <Desc>array fgetcsv ( resource $handle [, int $length = 0 [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\" ]]]] )
Similar to fgets() except that fgetcsv() parses the line it reads for fields in CSV format and returns an array containing the fields read. 
Note: 
The locale settings are taken into account by this function. If LC_CTYPE is e.g. en_US.UTF-8, files in one-byte encodings may be read wrongly by this function.
</Desc>
    <FName>fgets</FName>
    <Desc>string fgets ( resource $handle [, int $length ] )
Gets a line from file pointer.
</Desc>
    <FName>fgetss</FName>
    <Desc>string fgetss ( resource $handle [, int $length [, string $allowable_tags ]] )
Identical to fgets(), except that fgetss() attempts to strip any NUL bytes, HTML and PHP tags from the text it reads.
</Desc>
    <FName>file_exists</FName>
    <Desc>bool file_exists ( string $filename )
Checks whether a file or directory exists.
</Desc>
    <FName>file_get_contents</FName>
    <Desc>string file_get_contents ( string $filename [, bool $use_include_path = FALSE [, resource $context [, int $offset = 0 [, int $maxlen ]]]] )
This function is similar to file(), except that file_get_contents() returns the file in a string, starting at the specified offset up to maxlen bytes. On failure, file_get_contents() will return FALSE. 
file_get_contents() is the preferred way to read the contents of a file into a string. It will use memory mapping techniques if supported by your OS to enhance performance. 
Note: 
If you're opening a URI with special characters, such as spaces, you need to encode the URI with urlencode().
</Desc>
    <FName>file_put_contents</FName>
    <Desc>int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )
This function is identical to calling fopen(), fwrite() and fclose() successively to write data to a file. 
If filename does not exist, the file is created. Otherwise, the existing file is overwritten, unless the FILE_APPEND flag is set.
</Desc>
    <FName>file</FName>
    <Desc>array file ( string $filename [, int $flags = 0 [, resource $context ]] )
Reads an entire file into an array. 
Note: 
You can use file_get_contents() to return the contents of a file as a string.
</Desc>
    <FName>fileatime</FName>
    <Desc>int fileatime ( string $filename )
Gets the last access time of the given file.
</Desc>
    <FName>filectime</FName>
    <Desc>int filectime ( string $filename )
Gets the inode change time of a file.
</Desc>
    <FName>filegroup</FName>
    <Desc>int filegroup ( string $filename )
Gets the file group. The group ID is returned in numerical format, use posix_getgrgid() to resolve it to a group name.
</Desc>
    <FName>fileinode</FName>
    <Desc>int fileinode ( string $filename )
Gets the file inode.
</Desc>
    <FName>filemtime</FName>
    <Desc>int filemtime ( string $filename )
This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed.
</Desc>
    <FName>fileowner</FName>
    <Desc>int fileowner ( string $filename )
Gets the file owner.
</Desc>
    <FName>fileperms</FName>
    <Desc>int fileperms ( string $filename )
Gets permissions for the given file.
</Desc>
    <FName>filepro_fieldcount</FName>
    <Desc>int filepro_fieldcount ( void )
Returns the number of fields (columns) in the opened filePro database.
</Desc>
    <FName>filepro_fieldname</FName>
    <Desc>string filepro_fieldname ( int $field_number )
Returns the name of the field corresponding to field_number.
</Desc>
    <FName>filepro_fieldtype</FName>
    <Desc>string filepro_fieldtype ( int $field_number )
Returns the edit type of the field corresponding to field_number.
</Desc>
    <FName>filepro_fieldwidth</FName>
    <Desc>int filepro_fieldwidth ( int $field_number )
Returns the width of the field corresponding to field_number.
</Desc>
    <FName>filepro_retrieve</FName>
    <Desc>string filepro_retrieve ( int $row_number , int $field_number )
Returns the data from the specified location in the database. 
Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.
</Desc>
    <FName>filepro_rowcount</FName>
    <Desc>int filepro_rowcount ( void )
Returns the number of rows in the opened filePro database. 
Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.
</Desc>
    <FName>filepro</FName>
    <Desc>bool filepro ( string $directory )
This reads and verifies the map file, storing the field count and info. 
No locking is done, so you should avoid modifying your filePro database while it may be opened in PHP. 
Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.
</Desc>
    <FName>filesize</FName>
    <Desc>int filesize ( string $filename )
Gets the size for the given file.
</Desc>
    <FName>filetype</FName>
    <Desc>string filetype ( string $filename )
Returns the type of the given file.
</Desc>
    <FName>filter_has_var</FName>
    <Desc>bool filter_has_var ( int $type , string $variable_name )
</Desc>
    <FName>filter_id</FName>
    <Desc>int filter_id ( string $filtername )
</Desc>
    <FName>filter_input_array</FName>
    <Desc>mixed filter_input_array ( int $type [, mixed $definition [, bool $add_empty = TRUE ]] )
This function is useful for retrieving many values without repetitively calling filter_input().
</Desc>
    <FName>filter_input</FName>
    <Desc>mixed filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] )
</Desc>
    <FName>filter_list</FName>
    <Desc>array filter_list ( void )
</Desc>
    <FName>filter_var_array</FName>
    <Desc>mixed filter_var_array ( array $data [, mixed $definition [, bool $add_empty = TRUE ]] )
This function is useful for retrieving many values without repetitively calling filter_var().
</Desc>
    <FName>filter_var</FName>
    <Desc>mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] )
</Desc>
    <FName>finfo_buffer</FName>
    <Desc>Procedural style
string finfo_buffer ( resource $finfo , string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )
Object oriented style
public string finfo::buffer ( string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )
This function is used to get information about binary data in a string.
</Desc>
    <FName>finfo_close</FName>
    <Desc>bool finfo_close ( resource $finfo )
This function closes the resource opened by finfo_open().
</Desc>
    <FName>finfo_file</FName>
    <Desc>Procedural style
string finfo_file ( resource $finfo , string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )
Object oriented style
public string finfo::file ( string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )
This function is used to get information about a file.
</Desc>
    <FName>finfo_open</FName>
    <Desc>Procedural style
resource finfo_open ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )
Object oriented style (constructor):
public finfo::__construct ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )
This function opens a magic database and returns its resource.
</Desc>
    <FName>finfo_set_flags</FName>
    <Desc>Procedural style
bool finfo_set_flags ( resource $finfo , int $options )
Object oriented style
public bool finfo::set_flags ( int $options )
This function sets various Fileinfo options. Options can be set also directly in finfo_open() or other Fileinfo functions.
</Desc>
    <FName>floatval</FName>
    <Desc>float floatval ( mixed $var )
Gets the float value of var.
</Desc>
    <FName>flock</FName>
    <Desc>bool flock ( resource $handle , int $operation [, int &$wouldblock ] )
flock() allows you to perform a simple reader/writer model which can be used on virtually every platform (including most Unix derivatives and even Windows). 
On versions of PHP before 5.3.2, the lock is released also by fclose() (which is also called automatically when script finished). 
PHP supports a portable way of locking complete files in an advisory way (which means all accessing programs have to use the same way of locking or it will not work). By default, this function will block until the requested lock is acquired; this may be controlled with the LOCK_NB option documented below.
</Desc>
    <FName>floor</FName>
    <Desc>float floor ( float $value )
Returns the next lowest integer value (as float) by rounding down value if necessary.
</Desc>
    <FName>flush</FName>
    <Desc>void flush ( void )
Flushes the system write buffers of PHP and whatever backend PHP is using (CGI, a web server, etc). This attempts to push current output all the way to the browser with a few caveats. 
flush() may not be able to override the buffering scheme of your web server and it has no effect on any client-side buffering in the browser. It also doesn't affect PHP's userspace output buffering mechanism. This means you will have to call both ob_flush() and flush() to flush the ob output buffers if you are using those. 
Several servers, especially on Win32, will still buffer the output from your script until it terminates before transmitting the results to the browser. 
Server modules for Apache like mod_gzip may do buffering of their own that will cause flush() to not result in data being sent immediately to the client. 
Even the browser may buffer its input before displaying it. Netscape, for example, buffers text until it receives an end-of-line or the beginning of a tag, and it won't render tables until the </table> tag of the outermost table is seen. 
Some versions of Microsoft Internet Explorer will only start to display the page after they have received 256 bytes of output, so you may need to send extra whitespace before flushing to get those browsers to display the page.
</Desc>
    <FName>fmod</FName>
    <Desc>float fmod ( float $x , float $y )
Returns the floating point remainder of dividing the dividend (x) by the divisor (y). The remainder (r) is defined as: x = i * y + r, for some integer i. If y is non-zero, r has the same sign as x and a magnitude less than the magnitude of y.
</Desc>
    <FName>fnmatch</FName>
    <Desc>bool fnmatch ( string $pattern , string $string [, int $flags = 0 ] )
fnmatch() checks if the passed string would match the given shell wildcard pattern.
</Desc>
    <FName>fopen</FName>
    <Desc>resource fopen ( string $filename , string $mode [, bool $use_include_path = FALSE [, resource $context ]] )
fopen() binds a named resource, specified by filename, to a stream.
</Desc>
    <FName>forward_static_call_array</FName>
    <Desc>mixed forward_static_call_array ( callable $function , array $parameters )
Calls a user defined function or method given by the function parameter. This function must be called within a method context, it can't be used outside a class. It uses the late static binding. All arguments of the forwarded method are passed as values, and as an array, similarly to call_user_func_array().
</Desc>
    <FName>forward_static_call</FName>
    <Desc>mixed forward_static_call ( callable $function [, mixed $parameter [, mixed $... ]] )
Calls a user defined function or method given by the function parameter, with the following arguments. This function must be called within a method context, it can't be used outside a class. It uses the late static binding.
</Desc>
    <FName>fpassthru</FName>
    <Desc>int fpassthru ( resource $handle )
Reads to EOF on the given file pointer from the current position and writes the results to the output buffer. 
You may need to call rewind() to reset the file pointer to the beginning of the file if you have already written data to the file. 
If you just want to dump the contents of a file to the output buffer, without first modifying it or seeking to a particular offset, you may want to use the readfile(), which saves you the fopen() call.
</Desc>
    <FName>fprintf</FName>
    <Desc>int fprintf ( resource $handle , string $format [, mixed $args [, mixed $... ]] )
Write a string produced according to format to the stream resource specified by handle.
</Desc>
    <FName>fputcsv</FName>
    <Desc>int fputcsv ( resource $handle , array $fields [, string $delimiter = "," [, string $enclosure = '"' [, string $escape_char = "\\" ]]] )
fputcsv() formats a line (passed as a fields array) as CSV and write it (terminated by a newline) to the specified file handle.
</Desc>
    <FName>fputs</FName>
    <Desc>This function is an alias of: fwrite(). 
</Desc>
    <FName>fread</FName>
    <Desc>string fread ( resource $handle , int $length )
fread() reads up to length bytes from the file pointer referenced by handle. Reading stops as soon as one of the following conditions is met: 
length bytes have been read 
EOF (end of file) is reached 
a packet becomes available or the socket timeout occurs (for network streams) 
if the stream is read buffered and it does not represent a plain file, at most one read of up to a number of bytes equal to the chunk size (usually 8192) is made; depending on the previously buffered data, the size of the returned data may be larger than the chunk size.
</Desc>
    <FName>frenchtojd</FName>
    <Desc>int frenchtojd ( int $month , int $day , int $year )
Converts a date from the French Republican Calendar to a Julian Day Count. 
These routines only convert dates in years 1 through 14 (Gregorian dates 22 September 1792 through 22 September 1806). This more than covers the period when the calendar was in use.
</Desc>
    <FName>fribidi_log2vis</FName>
    <Desc>string fribidi_log2vis ( string $str , string $direction , int $charset )
Converts a logical string to a visual one.
</Desc>
    <FName>fscanf</FName>
    <Desc>mixed fscanf ( resource $handle , string $format [, mixed &$... ] )
The function fscanf() is similar to sscanf(), but it takes its input from a file associated with handle and interprets the input according to the specified format, which is described in the documentation for sprintf(). 
Any whitespace in the format string matches any whitespace in the input stream. This means that even a tab \t in the format string can match a single space character in the input stream. 
Each call to fscanf() reads one line from the file.
</Desc>
    <FName>fseek</FName>
    <Desc>int fseek ( resource $handle , int $offset [, int $whence = SEEK_SET ] )
Sets the file position indicator for the file referenced by handle. The new position, measured in bytes from the beginning of the file, is obtained by adding offset to the position specified by whence. 
In general, it is allowed to seek past the end-of-file; if data is then written, reads in any unwritten region between the end-of-file and the sought position will yield bytes with value 0. However, certain streams may not support this behavior, especially when they have an underlying fixed size storage.
</Desc>
    <FName>fsockopen</FName>
    <Desc>resource fsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] )
Initiates a socket connection to the resource specified by hostname. 
PHP supports targets in the Internet and Unix domains as described in List of Supported Socket Transports. A list of supported transports can also be retrieved using stream_get_transports(). 
The socket will by default be opened in blocking mode. You can switch it to non-blocking mode by using stream_set_blocking(). 
The function stream_socket_client() is similar but provides a richer set of options, including non-blocking connection and the ability to provide a stream context.
</Desc>
    <FName>fstat</FName>
    <Desc>array fstat ( resource $handle )
Gathers the statistics of the file opened by the file pointer handle. This function is similar to the stat() function except that it operates on an open file pointer instead of a filename.
</Desc>
    <FName>ftell</FName>
    <Desc>int ftell ( resource $handle )
Returns the position of the file pointer referenced by handle.
</Desc>
    <FName>ftok</FName>
    <Desc>int ftok ( string $pathname , string $proj )
The function converts the pathname of an existing accessible file and a project identifier into an integer for use with for example shmop_open() and other System V IPC keys.
</Desc>
    <FName>ftp_alloc</FName>
    <Desc>bool ftp_alloc ( resource $ftp_stream , int $filesize [, string &$result ] )
Sends an ALLO command to the remote FTP server to allocate space for a file to be uploaded. 
Note: 
Many FTP servers do not support this command. These servers may return a failure code (FALSE) indicating the command is not supported or a success code (TRUE) to indicate that pre-allocation is not necessary and the client should continue as though the operation were successful. Because of this, it may be best to reserve this function for servers which explicitly require preallocation.
</Desc>
    <FName>ftp_append</FName>
    <Desc>bool ftp_append ( resource $ftp , string $remote_file , string $local_file [, int $mode = FTP_IMAGE ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ftp_cdup</FName>
    <Desc>bool ftp_cdup ( resource $ftp_stream )
Changes to the parent directory.
</Desc>
    <FName>ftp_chdir</FName>
    <Desc>bool ftp_chdir ( resource $ftp_stream , string $directory )
Changes the current directory to the specified one.
</Desc>
    <FName>ftp_chmod</FName>
    <Desc>int ftp_chmod ( resource $ftp_stream , int $mode , string $filename )
Sets the permissions on the specified remote file to mode.
</Desc>
    <FName>ftp_close</FName>
    <Desc>bool ftp_close ( resource $ftp_stream )
ftp_close() closes the given link identifier and releases the resource. 
Note: 
After calling this function, you can no longer use the FTP connection and must create a new one with ftp_connect().
</Desc>
    <FName>ftp_connect</FName>
    <Desc>resource ftp_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )
ftp_connect() opens an FTP connection to the specified host.
</Desc>
    <FName>ftp_delete</FName>
    <Desc>bool ftp_delete ( resource $ftp_stream , string $path )
ftp_delete() deletes the file specified by path from the FTP server.
</Desc>
    <FName>ftp_exec</FName>
    <Desc>bool ftp_exec ( resource $ftp_stream , string $command )
Sends a SITE EXEC command request to the FTP server.
</Desc>
    <FName>ftp_fget</FName>
    <Desc>bool ftp_fget ( resource $ftp_stream , resource $handle , string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0 ]] )
ftp_fget() retrieves remote_file from the FTP server, and writes it to the given file pointer.
</Desc>
    <FName>ftp_fput</FName>
    <Desc>bool ftp_fput ( resource $ftp_stream , string $remote_file , resource $handle [, int $mode = FTP_IMAGE [, int $startpos = 0 ]] )
ftp_fput() uploads the data from a file pointer to a remote file on the FTP server.
</Desc>
    <FName>ftp_get_option</FName>
    <Desc>mixed ftp_get_option ( resource $ftp_stream , int $option )
This function returns the value for the requested option from the specified FTP connection.
</Desc>
    <FName>ftp_get</FName>
    <Desc>bool ftp_get ( resource $ftp_stream , string $local_file , string $remote_file [, int $mode = FTP_BINARY [, int $resumepos = 0 ]] )
ftp_get() retrieves a remote file from the FTP server, and saves it into a local file.
</Desc>
    <FName>ftp_login</FName>
    <Desc>bool ftp_login ( resource $ftp_stream , string $username , string $password )
Logs in to the given FTP stream.
</Desc>
    <FName>ftp_mdtm</FName>
    <Desc>int ftp_mdtm ( resource $ftp_stream , string $remote_file )
ftp_mdtm() gets the last modified time for a remote file. 
Note: 
Not all servers support this feature! 
Note: 
ftp_mdtm() does not work with directories.
</Desc>
    <FName>ftp_mkdir</FName>
    <Desc>string ftp_mkdir ( resource $ftp_stream , string $directory )
Creates the specified directory on the FTP server.
</Desc>
    <FName>ftp_mlsd</FName>
    <Desc>array ftp_mlsd ( resource $ftp_stream , string $directory )
</Desc>
    <FName>ftp_nb_continue</FName>
    <Desc>int ftp_nb_continue ( resource $ftp_stream )
Continues retrieving/sending a file non-blocking.
</Desc>
    <FName>ftp_nb_fget</FName>
    <Desc>int ftp_nb_fget ( resource $ftp_stream , resource $handle , string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0 ]] )
ftp_nb_fget() retrieves a remote file from the FTP server. 
The difference between this function and ftp_fget() is that this function retrieves the file asynchronously, so your program can perform other operations while the file is being downloaded.
</Desc>
    <FName>ftp_nb_fput</FName>
    <Desc>int ftp_nb_fput ( resource $ftp_stream , string $remote_file , resource $handle [, int $mode = FTP_IMAGE [, int $startpos = 0 ]] )
ftp_nb_fput() uploads the data from a file pointer to a remote file on the FTP server. 
The difference between this function and the ftp_fput() is that this function uploads the file asynchronously, so your program can perform other operations while the file is being uploaded.
</Desc>
    <FName>ftp_nb_get</FName>
    <Desc>int ftp_nb_get ( resource $ftp_stream , string $local_file , string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0 ]] )
ftp_nb_get() retrieves a remote file from the FTP server, and saves it into a local file. 
The difference between this function and ftp_get() is that this function retrieves the file asynchronously, so your program can perform other operations while the file is being downloaded.
</Desc>
    <FName>ftp_nb_put</FName>
    <Desc>int ftp_nb_put ( resource $ftp_stream , string $remote_file , string $local_file [, int $mode = FTP_IMAGE [, int $startpos = 0 ]] )
ftp_nb_put() stores a local file on the FTP server. 
The difference between this function and the ftp_put() is that this function uploads the file asynchronously, so your program can perform other operations while the file is being uploaded.
</Desc>
    <FName>ftp_nlist</FName>
    <Desc>array ftp_nlist ( resource $ftp_stream , string $directory )
</Desc>
    <FName>ftp_pasv</FName>
    <Desc>bool ftp_pasv ( resource $ftp_stream , bool $pasv )
ftp_pasv() turns on or off passive mode. In passive mode, data connections are initiated by the client, rather than by the server. It may be needed if the client is behind firewall. 
Please note that ftp_pasv() can only be called after a successful login or otherwise it will fail.
</Desc>
    <FName>ftp_put</FName>
    <Desc>bool ftp_put ( resource $ftp_stream , string $remote_file , string $local_file [, int $mode = FTP_IMAGE [, int $startpos = 0 ]] )
ftp_put() stores a local file on the FTP server.
</Desc>
    <FName>ftp_pwd</FName>
    <Desc>string ftp_pwd ( resource $ftp_stream )
</Desc>
    <FName>ftp_quit</FName>
    <Desc>This function is an alias of: ftp_close(). 
</Desc>
    <FName>ftp_raw</FName>
    <Desc>array ftp_raw ( resource $ftp_stream , string $command )
Sends an arbitrary command to the FTP server.
</Desc>
    <FName>ftp_rawlist</FName>
    <Desc>array ftp_rawlist ( resource $ftp_stream , string $directory [, bool $recursive = FALSE ] )
ftp_rawlist() executes the FTP LIST command, and returns the result as an array.
</Desc>
    <FName>ftp_rename</FName>
    <Desc>bool ftp_rename ( resource $ftp_stream , string $oldname , string $newname )
ftp_rename() renames a file or a directory on the FTP server.
</Desc>
    <FName>ftp_rmdir</FName>
    <Desc>bool ftp_rmdir ( resource $ftp_stream , string $directory )
Removes the specified directory on the FTP server.
</Desc>
    <FName>ftp_set_option</FName>
    <Desc>bool ftp_set_option ( resource $ftp_stream , int $option , mixed $value )
This function controls various runtime options for the specified FTP stream.
</Desc>
    <FName>ftp_site</FName>
    <Desc>bool ftp_site ( resource $ftp_stream , string $command )
ftp_site() sends the given SITE command to the FTP server. 
SITE commands are not standardized, and vary from server to server. They are useful for handling such things as file permissions and group membership.
</Desc>
    <FName>ftp_size</FName>
    <Desc>int ftp_size ( resource $ftp_stream , string $remote_file )
ftp_size() returns the size of the given file in bytes. 
Note: 
Not all servers support this feature.
</Desc>
    <FName>ftp_ssl_connect</FName>
    <Desc>resource ftp_ssl_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )
ftp_ssl_connect() opens an explicit SSL-FTP connection to the specified host. That implies that ftp_ssl_connect() will succeed even if the server is not configured for SSL-FTP, or its certificate is invalid. Only when ftp_login() is called, the client will send the appropriate AUTH FTP command, so ftp_login() will fail in the mentioned cases. 
Note: Why this function may not exist

ftp_ssl_connect() is only available if both the ftp module and the OpenSSL support is built statically into php, this means that on Windows this function will be undefined in the official PHP builds. To make this function available on Windows you must compile your own PHP binaries. 
Note: 
ftp_ssl_connect() is not intended for use with sFTP. To use sFTP with PHP, please see ssh2_sftp().
</Desc>
    <FName>ftp_systype</FName>
    <Desc>string ftp_systype ( resource $ftp_stream )
Returns the system type identifier of the remote FTP server.
</Desc>
    <FName>ftruncate</FName>
    <Desc>bool ftruncate ( resource $handle , int $size )
Takes the filepointer, handle, and truncates the file to length, size.
</Desc>
    <FName>func_get_arg</FName>
    <Desc>mixed func_get_arg ( int $arg_num )
Gets the specified argument from a user-defined function's argument list. 
This function may be used in conjunction with func_get_args() and func_num_args() to allow user-defined functions to accept variable-length argument lists.
</Desc>
    <FName>func_get_args</FName>
    <Desc>array func_get_args ( void )
Gets an array of the function's argument list. 
This function may be used in conjunction with func_get_arg() and func_num_args() to allow user-defined functions to accept variable-length argument lists.
</Desc>
    <FName>func_num_args</FName>
    <Desc>int func_num_args ( void )
Gets the number of arguments passed to the function. 
This function may be used in conjunction with func_get_arg() and func_get_args() to allow user-defined functions to accept variable-length argument lists.
</Desc>
    <FName>function_exists</FName>
    <Desc>bool function_exists ( string $function_name )
Checks the list of defined functions, both built-in (internal) and user-defined, for function_name.
</Desc>
    <FName>fwrite</FName>
    <Desc>int fwrite ( resource $handle , string $string [, int $length ] )
fwrite() writes the contents of string to the file stream pointed to by handle.
</Desc>
    <FName>gc_collect_cycles</FName>
    <Desc>int gc_collect_cycles ( void )
Forces collection of any existing garbage cycles.
</Desc>
    <FName>gc_disable</FName>
    <Desc>void gc_disable ( void )
Deactivates the circular reference collector, setting zend.enable_gc to 0.
</Desc>
    <FName>gc_enable</FName>
    <Desc>void gc_enable ( void )
Activates the circular reference collector, setting zend.enable_gc to 1.
</Desc>
    <FName>gc_enabled</FName>
    <Desc>bool gc_enabled ( void )
Returns status of the circular reference collector.
</Desc>
    <FName>gc_mem_caches</FName>
    <Desc>int gc_mem_caches ( void )
Reclaims memory used by the Zend Engine memory manager.
</Desc>
    <FName>gd_info</FName>
    <Desc>array gd_info ( void )
Gets information about the version and capabilities of the installed GD library.
</Desc>
    <FName>geoip_asnum_by_name</FName>
    <Desc>string geoip_asnum_by_name ( string $hostname )
The geoip_asnum_by_name() function will return the Autonomous System Numbers (ASN) associated with an IP address.
</Desc>
    <FName>geoip_continent_code_by_name</FName>
    <Desc>string geoip_continent_code_by_name ( string $hostname )
The geoip_continent_code_by_name() function will return the two letter continent code corresponding to a hostname or an IP address.
</Desc>
    <FName>geoip_country_code_by_name</FName>
    <Desc>string geoip_country_code_by_name ( string $hostname )
The geoip_country_code_by_name() function will return the two letter country code corresponding to a hostname or an IP address.
</Desc>
    <FName>geoip_country_code3_by_name</FName>
    <Desc>string geoip_country_code3_by_name ( string $hostname )
The geoip_country_code3_by_name() function will return the three letter country code corresponding to a hostname or an IP address.
</Desc>
    <FName>geoip_country_name_by_name</FName>
    <Desc>string geoip_country_name_by_name ( string $hostname )
The geoip_country_name_by_name() function will return the full country name corresponding to a hostname or an IP address.
</Desc>
    <FName>geoip_database_info</FName>
    <Desc>string geoip_database_info ([ int $database = GEOIP_COUNTRY_EDITION ] )
The geoip_database_info() function returns the corresponding GeoIP Database version as it is defined inside the binary file. 
If this function is called without arguments, it returns the version of the GeoIP Free Country Edition.
</Desc>
    <FName>geoip_db_avail</FName>
    <Desc>bool geoip_db_avail ( int $database )
The geoip_db_avail() function returns if the corresponding GeoIP Database is available and can be opened on disk. 
It does not indicate if the file is a proper database, only if it is readable.
</Desc>
    <FName>geoip_db_filename</FName>
    <Desc>string geoip_db_filename ( int $database )
The geoip_db_filename() function returns the filename of the corresponding GeoIP Database. 
It does not indicate if the file exists or not on disk, only where the library is looking for the database.
</Desc>
    <FName>geoip_db_get_all_info</FName>
    <Desc>array geoip_db_get_all_info ( void )
The geoip_db_get_all_info() function will return detailed information as a multi-dimensional array about all the GeoIP database types. 
This function is available even if no databases are installed. It will simply list them as non-available. 
The names of the different keys of the returning associative array are as follows: 
"available" -- Boolean, indicate if DB is available (see geoip_db_avail()) 
"description" -- The database description 
"filename" -- The database filename on disk (see geoip_db_filename())
</Desc>
    <FName>geoip_domain_by_name</FName>
    <Desc>string geoip_domain_by_name ( string $hostname )
The geoip_domain_by_name() function will return the second level domain names associated with a hostname or an IP address. 
This function is currently only available to users who have bought a commercial GeoIP Domain Edition. A warning will be issued if the proper database cannot be located.
</Desc>
    <FName>geoip_id_by_name</FName>
    <Desc>int geoip_id_by_name ( string $hostname )
The geoip_id_by_name() function will return the Internet connection type corresponding to a hostname or an IP address. 
The return value is numeric and can be compared to the following constants: 
GEOIP_UNKNOWN_SPEED 
GEOIP_DIALUP_SPEED 
GEOIP_CABLEDSL_SPEED 
GEOIP_CORPORATE_SPEED
</Desc>
    <FName>geoip_isp_by_name</FName>
    <Desc>string geoip_isp_by_name ( string $hostname )
The geoip_isp_by_name() function will return the name of the Internet Service Provider (ISP) that an IP is assigned to. 
This function is currently only available to users who have bought a commercial GeoIP ISP Edition. A warning will be issued if the proper database cannot be located.
</Desc>
    <FName>geoip_netspeedcell_by_name</FName>
    <Desc>string geoip_netspeedcell_by_name ( string $hostname )
The geoip_netspeedcell_by_name() function will return the Internet connection type and speed corresponding to a hostname or an IP address. 
This function is only available if using GeoIP Library version 1.4.8 or newer. 
This function is currently only available to users who have bought a commercial GeoIP NetSpeedCell Edition. A warning will be issued if the proper database cannot be located. 
The return value is a string, common values are: 
Cable/DSL 
Dialup 
Cellular 
Corporate
</Desc>
    <FName>geoip_org_by_name</FName>
    <Desc>string geoip_org_by_name ( string $hostname )
The geoip_org_by_name() function will return the name of the organization that an IP is assigned to. 
This function is currently only available to users who have bought a commercial GeoIP Organization, ISP or AS Edition. A warning will be issued if the proper database cannot be located.
</Desc>
    <FName>geoip_record_by_name</FName>
    <Desc>array geoip_record_by_name ( string $hostname )
The geoip_record_by_name() function will return the record information corresponding to a hostname or an IP address. 
This function is available for both GeoLite City Edition and commercial GeoIP City Edition. A warning will be issued if the proper database cannot be located. 
The names of the different keys of the returning associative array are as follows: 
"continent_code" -- Two letter continent code (as of version 1.0.4 with libgeoip 1.4.3 or newer) 
"country_code" -- Two letter country code (see geoip_country_code_by_name()) 
"country_code3" -- Three letter country code (see geoip_country_code3_by_name()) 
"country_name" -- The country name (see geoip_country_name_by_name()) 
"region" -- The region code (ex: CA for California) 
"city" -- The city. 
"postal_code" -- The Postal Code, FSA or Zip Code. 
"latitude" -- The Latitude as signed double. 
"longitude" -- The Longitude as signed double. 
"dma_code" -- Designated Market Area code (USA and Canada only) 
"area_code" -- The PSTN area code (ex: 212)
</Desc>
    <FName>geoip_region_by_name</FName>
    <Desc>array geoip_region_by_name ( string $hostname )
The geoip_region_by_name() function will return the country and region corresponding to a hostname or an IP address. 
This function is currently only available to users who have bought a commercial GeoIP Region Edition. A warning will be issued if the proper database cannot be located. 
The names of the different keys of the returning associative array are as follows: 
"country_code" -- Two letter country code (see geoip_country_code_by_name()) 
"region" -- The region code (ex: CA for California)
</Desc>
    <FName>geoip_region_name_by_code</FName>
    <Desc>string geoip_region_name_by_code ( string $country_code , string $region_code )
The geoip_region_name_by_code() function will return the region name corresponding to a country and region code combo. 
In the United States, the region code corresponds to the two-letter abbreviation of each state. In Canada, the region code corresponds to the two-letter province or territory code as attributed by Canada Post. 
For the rest of the world, GeoIP uses FIPS 10-4 codes to represent regions. You can check » http://www.maxmind.com/app/fips10_4 for a detailed list of FIPS 10-4 codes. 
This function is always available if using GeoIP Library version 1.4.1 or newer. The data is taken directly from the GeoIP Library and not from any database.
</Desc>
    <FName>geoip_setup_custom_directory</FName>
    <Desc>void geoip_setup_custom_directory ( string $path )
The geoip_setup_custom_directory() function will change the default directory of the GeoIP database. This is equivalent to changing geoip.custom_directory.
</Desc>
    <FName>geoip_time_zone_by_country_and_region</FName>
    <Desc>string geoip_time_zone_by_country_and_region ( string $country_code [, string $region_code ] )
The geoip_time_zone_by_country_and_region() function will return the time zone corresponding to a country and region code combo. 
In the United States, the region code corresponds to the two-letter abbreviation of each state. In Canada, the region code corresponds to the two-letter province or territory code as attributed by Canada Post. 
For the rest of the world, GeoIP uses FIPS 10-4 codes to represent regions. You can check » http://www.maxmind.com/app/fips10_4 for a detailed list of FIPS 10-4 codes. 
This function is always available if using GeoIP Library version 1.4.1 or newer. The data is taken directly from the GeoIP Library and not from any database.
</Desc>
    <FName>get_browser</FName>
    <Desc>mixed get_browser ([ string $user_agent [, bool $return_array = FALSE ]] )
Attempts to determine the capabilities of the user's browser, by looking up the browser's information in the browscap.ini file.
</Desc>
    <FName>get_called_class</FName>
    <Desc>string get_called_class ( void )
Gets the name of the class the static method is called in.
</Desc>
    <FName>get_cfg_var</FName>
    <Desc>mixed get_cfg_var ( string $option )
Gets the value of a PHP configuration option. 
This function will not return configuration information set when the PHP was compiled, or read from an Apache configuration file. 
To check whether the system is using a configuration file, try retrieving the value of the cfg_file_path configuration setting. If this is available, a configuration file is being used.
</Desc>
    <FName>get_class_methods</FName>
    <Desc>array get_class_methods ( mixed $class_name )
Gets the class methods names.
</Desc>
    <FName>get_class_vars</FName>
    <Desc>array get_class_vars ( string $class_name )
Get the default properties of the given class.
</Desc>
    <FName>get_class</FName>
    <Desc>string get_class ([ object $object ] )
Gets the name of the class of the given object.
</Desc>
    <FName>get_current_user</FName>
    <Desc>string get_current_user ( void )
Returns the name of the owner of the current PHP script.
</Desc>
    <FName>get_declared_classes</FName>
    <Desc>array get_declared_classes ( void )
Gets the declared classes.
</Desc>
    <FName>get_declared_interfaces</FName>
    <Desc>array get_declared_interfaces ( void )
Gets the declared interfaces.
</Desc>
    <FName>get_declared_traits</FName>
    <Desc>array get_declared_traits ( void )
</Desc>
    <FName>get_defined_constants</FName>
    <Desc>array get_defined_constants ([ bool $categorize = FALSE ] )
Returns the names and values of all the constants currently defined. This includes those created by extensions as well as those created with the define() function.
</Desc>
    <FName>get_defined_functions</FName>
    <Desc>array get_defined_functions ([ bool $exclude_disabled = FALSE ] )
Gets an array of all defined functions.
</Desc>
    <FName>get_defined_vars</FName>
    <Desc>array get_defined_vars ( void )
This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that get_defined_vars() is called.
</Desc>
    <FName>get_extension_funcs</FName>
    <Desc>array get_extension_funcs ( string $module_name )
This function returns the names of all the functions defined in the module indicated by module_name.
</Desc>
    <FName>get_headers</FName>
    <Desc>array get_headers ( string $url [, int $format = 0 [, resource $context ]] )
get_headers() returns an array with the headers sent by the server in response to a HTTP request.
</Desc>
    <FName>get_html_translation_table</FName>
    <Desc>array get_html_translation_table ([ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = "UTF-8" ]]] )
get_html_translation_table() will return the translation table that is used internally for htmlspecialchars() and htmlentities(). 
Note: 
Special characters can be encoded in several ways. E.g. " can be encoded as &quot;, &#34; or &#x22. get_html_translation_table() returns only the form used by htmlspecialchars() and htmlentities().
</Desc>
    <FName>get_include_path</FName>
    <Desc>string get_include_path ( void )
Gets the current include_path configuration option value.
</Desc>
    <FName>get_included_files</FName>
    <Desc>array get_included_files ( void )
Gets the names of all files that have been included using include, include_once, require or require_once.
</Desc>
    <FName>get_loaded_extensions</FName>
    <Desc>array get_loaded_extensions ([ bool $zend_extensions = FALSE ] )
This function returns the names of all the modules compiled and loaded in the PHP interpreter.
</Desc>
    <FName>get_magic_quotes_gpc</FName>
    <Desc>bool get_magic_quotes_gpc ( void )
Returns the current configuration setting of magic_quotes_gpc 
Keep in mind that attempting to set magic_quotes_gpc at runtime will not work. 
For more information about magic_quotes, see this security section.
</Desc>
    <FName>get_magic_quotes_runtime</FName>
    <Desc>bool get_magic_quotes_runtime ( void )
Returns the current active configuration setting of magic_quotes_runtime.
</Desc>
    <FName>get_meta_tags</FName>
    <Desc>array get_meta_tags ( string $filename [, bool $use_include_path = FALSE ] )
Opens filename and parses it line by line for <meta> tags in the file. The parsing stops at </head>.
</Desc>
    <FName>get_object_vars</FName>
    <Desc>array get_object_vars ( object $object )
Gets the accessible non-static properties of the given object according to scope.
</Desc>
    <FName>get_parent_class</FName>
    <Desc>string get_parent_class ([ mixed $object ] )
Retrieves the parent class name for object or class.
</Desc>
    <FName>get_required_files</FName>
    <Desc>This function is an alias of: get_included_files(). 
</Desc>
    <FName>get_resource_type</FName>
    <Desc>string get_resource_type ( resource $handle )
This function gets the type of the given resource.
</Desc>
    <FName>get_resources</FName>
    <Desc>array get_resources ([ string $type ] )
Returns an array of all currently active resources, optionally filtered by resource type.
</Desc>
    <FName>getallheaders</FName>
    <Desc>array getallheaders ( void )
Fetches all HTTP headers from the current request. 
This function is an alias for apache_request_headers(). Please read the apache_request_headers() documentation for more information on how this function works.
</Desc>
    <FName>getcwd</FName>
    <Desc>string getcwd ( void )
Gets the current working directory.
</Desc>
    <FName>getdate</FName>
    <Desc>array getdate ([ int $timestamp = time() ] )
Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given.
</Desc>
    <FName>getenv</FName>
    <Desc>string getenv ( string $varname [, bool $local_only = FALSE ] )
array getenv ( void )
Gets the value of an environment variable. 
You can see a list of all the environmental variables by using phpinfo(). Many of these variables are listed within » RFC 3875, specifically section 4.1, "Request Meta-Variables".
</Desc>
    <FName>gethostbyaddr</FName>
    <Desc>string gethostbyaddr ( string $ip_address )
Returns the host name of the Internet host specified by ip_address.
</Desc>
    <FName>gethostbyname</FName>
    <Desc>string gethostbyname ( string $hostname )
Returns the IPv4 address of the Internet host specified by hostname.
</Desc>
    <FName>gethostbynamel</FName>
    <Desc>array gethostbynamel ( string $hostname )
Returns a list of IPv4 addresses to which the Internet host specified by hostname resolves.
</Desc>
    <FName>gethostname</FName>
    <Desc>string gethostname ( void )
gethostname() gets the standard host name for the local machine.
</Desc>
    <FName>getimagesize</FName>
    <Desc>array getimagesize ( string $filename [, array &$imageinfo ] )
The getimagesize() function will determine the size of any supported given image file and return the dimensions along with the file type and a height/width text string to be used inside a normal HTML IMG tag and the correspondent HTTP content type. 
getimagesize() can also return some more information in imageinfo parameter. 
Caution 
This function expects filename to be a valid image file. If a non-image file is supplied, it may be incorrectly detected as an image and the function will return successfully, but the array may contain nonsensical values. 
Do not use getimagesize() to check that a given file is a valid image. Use a purpose-built solution such as the Fileinfo extension instead. 
Note: Note that JPC and JP2 are capable of having components with different bit depths. In this case, the value for "bits" is the highest bit depth encountered. Also, JP2 files may contain multiple JPEG 2000 codestreams. In this case, getimagesize() returns the values for the first codestream it encounters in the root of the file. 
Note: The information about icons are retrieved from the icon with the highest bitrate. 
Note: GIF images consist of one or more frames, where each frame may only occupy part of the image. The size of the image which is reported by getimagesize() is the overall size (read from the logical screen descriptor).
</Desc>
    <FName>getimagesizefromstring</FName>
    <Desc>array getimagesizefromstring ( string $imagedata [, array &$imageinfo ] )
Identical to getimagesize() except that getimagesizefromstring() accepts a string instead of a file name as the first parameter. 
See the getimagesize() documentation for details on how this function works.
</Desc>
    <FName>getlastmod</FName>
    <Desc>int getlastmod ( void )
Gets the time of the last modification of the main script of execution. 
If you're interested in getting the last modification time of a different file, consider using filemtime().
</Desc>
    <FName>getmxrr</FName>
    <Desc>bool getmxrr ( string $hostname , array &$mxhosts [, array &$weight ] )
Searches DNS for MX records corresponding to hostname.
</Desc>
    <FName>getmygid</FName>
    <Desc>int getmygid ( void )
Gets the group ID of the current script.
</Desc>
    <FName>getmyinode</FName>
    <Desc>int getmyinode ( void )
Gets the inode of the current script.
</Desc>
    <FName>getmypid</FName>
    <Desc>int getmypid ( void )
Gets the current PHP process ID.
</Desc>
    <FName>getmyuid</FName>
    <Desc>int getmyuid ( void )
Gets the user ID of the current script.
</Desc>
    <FName>getopt</FName>
    <Desc>array getopt ( string $options [, array $longopts [, int &$optind ]] )
Parses options passed to the script.
</Desc>
    <FName>getprotobyname</FName>
    <Desc>int getprotobyname ( string $name )
getprotobyname() returns the protocol number associated with the protocol name as per /etc/protocols.
</Desc>
    <FName>getprotobynumber</FName>
    <Desc>string getprotobynumber ( int $number )
getprotobynumber() returns the protocol name associated with protocol number as per /etc/protocols.
</Desc>
    <FName>getrandmax</FName>
    <Desc>int getrandmax ( void )
Returns the maximum value that can be returned by a call to rand().
</Desc>
    <FName>getrusage</FName>
    <Desc>array getrusage ([ int $who = 0 ] )
This is an interface to getrusage(2). It gets data returned from the system call.
</Desc>
    <FName>getservbyname</FName>
    <Desc>int getservbyname ( string $service , string $protocol )
getservbyname() returns the Internet port which corresponds to service for the specified protocol as per /etc/services.
</Desc>
    <FName>getservbyport</FName>
    <Desc>string getservbyport ( int $port , string $protocol )
getservbyport() returns the Internet service associated with port for the specified protocol as per /etc/services.
</Desc>
    <FName>gettext</FName>
    <Desc>string gettext ( string $message )
Looks up a message in the current domain.
</Desc>
    <FName>gettimeofday</FName>
    <Desc>mixed gettimeofday ([ bool $return_float = FALSE ] )
This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call.
</Desc>
    <FName>gettype</FName>
    <Desc>string gettype ( mixed $var )
Returns the type of the PHP variable var. For type checking, use is_* functions.
</Desc>
    <FName>glob</FName>
    <Desc>array glob ( string $pattern [, int $flags = 0 ] )
The glob() function searches for all the pathnames matching pattern according to the rules used by the libc glob() function, which is similar to the rules used by common shells.
</Desc>
    <FName>gmdate</FName>
    <Desc>string gmdate ( string $format [, int $timestamp = time() ] )
Identical to the date() function except that the time returned is Greenwich Mean Time (GMT).
</Desc>
    <FName>gmmktime</FName>
    <Desc>int gmmktime ([ int $hour = gmdate("H") [, int $minute = gmdate("i") [, int $second = gmdate("s") [, int $month = gmdate("n") [, int $day = gmdate("j") [, int $year = gmdate("Y") [, int $is_dst = -1 ]]]]]]] )
Identical to mktime() except the passed parameters represents a GMT date. gmmktime() internally uses mktime() so only times valid in derived local time can be used. 
Like mktime(), arguments may be left out in order from right to left, with any omitted arguments being set to the current corresponding GMT value.
</Desc>
    <FName>gmp_abs</FName>
    <Desc>GMP gmp_abs ( GMP $a )
Get the absolute value of a number.
</Desc>
    <FName>gmp_add</FName>
    <Desc>GMP gmp_add ( GMP $a , GMP $b )
Add two numbers.
</Desc>
    <FName>gmp_and</FName>
    <Desc>GMP gmp_and ( GMP $a , GMP $b )
Calculates bitwise AND of two GMP numbers.
</Desc>
    <FName>gmp_clrbit</FName>
    <Desc>void gmp_clrbit ( GMP $a , int $index )
Clears (sets to 0) bit index in a. The index starts at 0.
</Desc>
    <FName>gmp_cmp</FName>
    <Desc>int gmp_cmp ( GMP $a , GMP $b )
Compares two numbers.
</Desc>
    <FName>gmp_com</FName>
    <Desc>GMP gmp_com ( GMP $a )
Returns the one's complement of a.
</Desc>
    <FName>gmp_div_q</FName>
    <Desc>GMP gmp_div_q ( GMP $a , GMP $b [, int $round = GMP_ROUND_ZERO ] )
Divides a by b and returns the integer result.
</Desc>
    <FName>gmp_div_qr</FName>
    <Desc>array gmp_div_qr ( GMP $n , GMP $d [, int $round = GMP_ROUND_ZERO ] )
The function divides n by d.
</Desc>
    <FName>gmp_div_r</FName>
    <Desc>GMP gmp_div_r ( GMP $n , GMP $d [, int $round = GMP_ROUND_ZERO ] )
Calculates remainder of the integer division of n by d. The remainder has the sign of the n argument, if not zero.
</Desc>
    <FName>gmp_div</FName>
    <Desc>This function is an alias of: gmp_div_q(). 
</Desc>
    <FName>gmp_divexact</FName>
    <Desc>GMP gmp_divexact ( GMP $n , GMP $d )
Divides n by d, using fast "exact division" algorithm. This function produces correct results only when it is known in advance that d divides n.
</Desc>
    <FName>gmp_export</FName>
    <Desc>string gmp_export ( GMP $gmpnumber [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN ]] )
Export a GMP number to a binary string
</Desc>
    <FName>gmp_fact</FName>
    <Desc>GMP gmp_fact ( mixed $a )
Calculates factorial (a!) of a.
</Desc>
    <FName>gmp_gcd</FName>
    <Desc>GMP gmp_gcd ( GMP $a , GMP $b )
Calculate greatest common divisor of a and b. The result is always positive even if either of, or both, input operands are negative.
</Desc>
    <FName>gmp_gcdext</FName>
    <Desc>array gmp_gcdext ( GMP $a , GMP $b )
Calculates g, s, and t, such that a*s + b*t = g = gcd(a,b), where gcd is the greatest common divisor. Returns an array with respective elements g, s and t. 
This function can be used to solve linear Diophantine equations in two variables. These are equations that allow only integer solutions and have the form: a*x + b*y = c. For more information, go to the » "Diophantine Equation" page at MathWorld
</Desc>
    <FName>gmp_hamdist</FName>
    <Desc>int gmp_hamdist ( GMP $a , GMP $b )
Returns the hamming distance between a and b. Both operands should be non-negative.
</Desc>
    <FName>gmp_import</FName>
    <Desc>GMP gmp_import ( string $data [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN ]] )
Import a GMP number from a binary string
</Desc>
    <FName>gmp_init</FName>
    <Desc>GMP gmp_init ( mixed $number [, int $base = 0 ] )
Creates a GMP number from an integer or string.
</Desc>
    <FName>gmp_intval</FName>
    <Desc>int gmp_intval ( GMP $gmpnumber )
This function converts GMP number into native PHP integers.
</Desc>
    <FName>gmp_invert</FName>
    <Desc>GMP gmp_invert ( GMP $a , GMP $b )
Computes the inverse of a modulo b.
</Desc>
    <FName>gmp_jacobi</FName>
    <Desc>int gmp_jacobi ( GMP $a , GMP $p )
Computes » Jacobi symbol of a and p. p should be odd and must be positive.
</Desc>
    <FName>gmp_legendre</FName>
    <Desc>int gmp_legendre ( GMP $a , GMP $p )
Compute the »  Legendre symbol of a and p. p should be odd and must be positive.
</Desc>
    <FName>gmp_mod</FName>
    <Desc>GMP gmp_mod ( GMP $n , GMP $d )
Calculates n modulo d. The result is always non-negative, the sign of d is ignored.
</Desc>
    <FName>gmp_mul</FName>
    <Desc>GMP gmp_mul ( GMP $a , GMP $b )
Multiplies a by b and returns the result.
</Desc>
    <FName>gmp_neg</FName>
    <Desc>GMP gmp_neg ( GMP $a )
Returns the negative value of a number.
</Desc>
    <FName>gmp_nextprime</FName>
    <Desc>GMP gmp_nextprime ( int $a )
Find next prime number
</Desc>
    <FName>gmp_or</FName>
    <Desc>GMP gmp_or ( GMP $a , GMP $b )
Calculates bitwise inclusive OR of two GMP numbers.
</Desc>
    <FName>gmp_perfect_square</FName>
    <Desc>bool gmp_perfect_square ( GMP $a )
Check if a number is a perfect square.
</Desc>
    <FName>gmp_popcount</FName>
    <Desc>int gmp_popcount ( GMP $a )
Get the population count.
</Desc>
    <FName>gmp_pow</FName>
    <Desc>GMP gmp_pow ( GMP $base , int $exp )
Raise base into power exp.
</Desc>
    <FName>gmp_powm</FName>
    <Desc>GMP gmp_powm ( GMP $base , GMP $exp , GMP $mod )
Calculate (base raised into power exp) modulo mod. If exp is negative, result is undefined.
</Desc>
    <FName>gmp_prob_prime</FName>
    <Desc>int gmp_prob_prime ( GMP $a [, int $reps = 10 ] )
The function uses Miller-Rabin's probabilistic test to check if a number is a prime.
</Desc>
    <FName>gmp_random_bits</FName>
    <Desc>GMP gmp_random_bits ( int $bits )
Generate a random number. The number will be between 0 and (2 ** bits) - 1. 
bits must greater than 0, and the maximum value is restricted by available memory.
</Desc>
    <FName>gmp_random_range</FName>
    <Desc>GMP gmp_random_range ( GMP $min , GMP $max )
Generate a random number. The number will be between min and max. 
min and max can both be negative but min must always be less than max.
</Desc>
    <FName>gmp_random_seed</FName>
    <Desc>void gmp_random_seed ( mixed $seed )
</Desc>
    <FName>gmp_random</FName>
    <Desc>GMP gmp_random ([ int $limiter = 20 ] )
Generate a random number. The number will be between 0 and (2 ** n) - 1, where n is the number of bits per limb multiplied by limiter. If limiter is negative, negative numbers are generated. 
A limb is an internal GMP mechanism. The number of bits in a limb is not static, and can vary from system to system. Generally, the number of bits in a limb is either 32 or 64, but this is not guaranteed.
</Desc>
    <FName>gmp_root</FName>
    <Desc>GMP gmp_root ( GMP $a , int $nth )
Takes the nth root of a and returns the integer component of the result.
</Desc>
    <FName>gmp_rootrem</FName>
    <Desc>array gmp_rootrem ( GMP $a , int $nth )
Takes the nth root of a and returns the integer component and remainder of the result.
</Desc>
    <FName>gmp_scan0</FName>
    <Desc>int gmp_scan0 ( GMP $a , int $start )
Scans a, starting with bit start, towards more significant bits, until the first clear bit is found.
</Desc>
    <FName>gmp_scan1</FName>
    <Desc>int gmp_scan1 ( GMP $a , int $start )
Scans a, starting with bit start, towards more significant bits, until the first set bit is found.
</Desc>
    <FName>gmp_setbit</FName>
    <Desc>void gmp_setbit ( GMP $a , int $index [, bool $bit_on = TRUE ] )
Sets bit index in a.
</Desc>
    <FName>gmp_sign</FName>
    <Desc>int gmp_sign ( GMP $a )
Checks the sign of a number.
</Desc>
    <FName>gmp_sqrt</FName>
    <Desc>GMP gmp_sqrt ( GMP $a )
Calculates square root of a.
</Desc>
    <FName>gmp_sqrtrem</FName>
    <Desc>array gmp_sqrtrem ( GMP $a )
Calculate the square root of a number, with remainder.
</Desc>
    <FName>gmp_strval</FName>
    <Desc>string gmp_strval ( GMP $gmpnumber [, int $base = 10 ] )
Convert GMP number to string representation in base base. The default base is 10.
</Desc>
    <FName>gmp_sub</FName>
    <Desc>GMP gmp_sub ( GMP $a , GMP $b )
Subtracts b from a and returns the result.
</Desc>
    <FName>gmp_testbit</FName>
    <Desc>bool gmp_testbit ( GMP $a , int $index )
Tests if the specified bit is set.
</Desc>
    <FName>gmp_xor</FName>
    <Desc>GMP gmp_xor ( GMP $a , GMP $b )
Calculates bitwise exclusive OR (XOR) of two GMP numbers.
</Desc>
    <FName>gmstrftime</FName>
    <Desc>string gmstrftime ( string $format [, int $timestamp = time() ] )
Behaves the same as strftime() except that the time returned is Greenwich Mean Time (GMT). For example, when run in Eastern Standard Time (GMT -0500), the first line below prints "Dec 31 1998 20:00:00", while the second prints "Jan 01 1999 01:00:00".
</Desc>
    <FName>gnupg_adddecryptkey</FName>
    <Desc>bool gnupg_adddecryptkey ( resource $identifier , string $fingerprint , string $passphrase )
</Desc>
    <FName>gnupg_addencryptkey</FName>
    <Desc>bool gnupg_addencryptkey ( resource $identifier , string $fingerprint )
</Desc>
    <FName>gnupg_addsignkey</FName>
    <Desc>bool gnupg_addsignkey ( resource $identifier , string $fingerprint [, string $passphrase ] )
</Desc>
    <FName>gnupg_cleardecryptkeys</FName>
    <Desc>bool gnupg_cleardecryptkeys ( resource $identifier )
</Desc>
    <FName>gnupg_clearencryptkeys</FName>
    <Desc>bool gnupg_clearencryptkeys ( resource $identifier )
</Desc>
    <FName>gnupg_clearsignkeys</FName>
    <Desc>bool gnupg_clearsignkeys ( resource $identifier )
</Desc>
    <FName>gnupg_decrypt</FName>
    <Desc>string gnupg_decrypt ( resource $identifier , string $text )
Decrypts the given text with the keys, which were set with gnupg_adddecryptkey before.
</Desc>
    <FName>gnupg_decryptverify</FName>
    <Desc>array gnupg_decryptverify ( resource $identifier , string $text , string &$plaintext )
Decrypts and verifies a given text and returns information about the signature.
</Desc>
    <FName>gnupg_encrypt</FName>
    <Desc>string gnupg_encrypt ( resource $identifier , string $plaintext )
Encrypts the given plaintext with the keys, which were set with gnupg_addencryptkey before and returns the encrypted text.
</Desc>
    <FName>gnupg_encryptsign</FName>
    <Desc>string gnupg_encryptsign ( resource $identifier , string $plaintext )
Encrypts and signs the given plaintext with the keys, which were set with gnupg_addsignkey and gnupg_addencryptkey before and returns the encrypted and signed text.
</Desc>
    <FName>gnupg_export</FName>
    <Desc>string gnupg_export ( resource $identifier , string $fingerprint )
Exports the key fingerprint.
</Desc>
    <FName>gnupg_geterror</FName>
    <Desc>string gnupg_geterror ( resource $identifier )
</Desc>
    <FName>gnupg_getprotocol</FName>
    <Desc>int gnupg_getprotocol ( resource $identifier )
</Desc>
    <FName>gnupg_import</FName>
    <Desc>array gnupg_import ( resource $identifier , string $keydata )
Imports the key keydata and returns an array with information about the importprocess.
</Desc>
    <FName>gnupg_init</FName>
    <Desc>resource gnupg_init ( void )
</Desc>
    <FName>gnupg_keyinfo</FName>
    <Desc>array gnupg_keyinfo ( resource $identifier , string $pattern )
</Desc>
    <FName>gnupg_setarmor</FName>
    <Desc>bool gnupg_setarmor ( resource $identifier , int $armor )
Toggle the armored output.
</Desc>
    <FName>gnupg_seterrormode</FName>
    <Desc>void gnupg_seterrormode ( resource $identifier , int $errormode )
Sets the mode for error_reporting.
</Desc>
    <FName>gnupg_setsignmode</FName>
    <Desc>bool gnupg_setsignmode ( resource $identifier , int $signmode )
Sets the mode for signing.
</Desc>
    <FName>gnupg_sign</FName>
    <Desc>string gnupg_sign ( resource $identifier , string $plaintext )
Signs the given plaintext with the keys, which were set with gnupg_addsignkey before and returns the signed text or the signature, depending on what was set with gnupg_setsignmode.
</Desc>
    <FName>gnupg_verify</FName>
    <Desc>array gnupg_verify ( resource $identifier , string $signed_text , string $signature [, string &$plaintext ] )
Verifies the given signed_text and returns information about the signature.
</Desc>
    <FName>gopher_parsedir</FName>
    <Desc>array gopher_parsedir ( string $dirent )
gopher_parsedir() parses a gopher formatted directory entry into an associative array. 
While gopher returns text/plain documents for actual document requests. A request to a directory (such as /) will return specially encoded series of lines with each line being one directory entry or information line.
</Desc>
    <FName>grapheme_extract</FName>
    <Desc>Procedural style
string grapheme_extract ( string $haystack , int $size [, int $extract_type [, int $start = 0 [, int &$next ]]] )
Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8.
</Desc>
    <FName>grapheme_stripos</FName>
    <Desc>Procedural style
int grapheme_stripos ( string $haystack , string $needle [, int $offset = 0 ] )
Find position (in grapheme units) of first occurrence of a case-insensitive string
</Desc>
    <FName>grapheme_stristr</FName>
    <Desc>Procedural style
string grapheme_stristr ( string $haystack , string $needle [, bool $before_needle = FALSE ] )
Returns part of haystack string starting from and including the first occurrence of case-insensitive needle to the end of haystack.
</Desc>
    <FName>grapheme_strlen</FName>
    <Desc>Procedural style
int grapheme_strlen ( string $input )
Get string length in grapheme units (not bytes or characters)
</Desc>
    <FName>grapheme_strpos</FName>
    <Desc>Procedural style
int grapheme_strpos ( string $haystack , string $needle [, int $offset = 0 ] )
Find position (in grapheme units) of first occurrence of a string
</Desc>
    <FName>grapheme_strripos</FName>
    <Desc>Procedural style
int grapheme_strripos ( string $haystack , string $needle [, int $offset = 0 ] )
Find position (in grapheme units) of last occurrence of a case-insensitive string
</Desc>
    <FName>grapheme_strrpos</FName>
    <Desc>Procedural style
int grapheme_strrpos ( string $haystack , string $needle [, int $offset = 0 ] )
Find position (in grapheme units) of last occurrence of a string
</Desc>
    <FName>grapheme_strstr</FName>
    <Desc>Procedural style
string grapheme_strstr ( string $haystack , string $needle [, bool $before_needle = FALSE ] )
Returns part of haystack string from the first occurrence of needle to the end of haystack (including the needle).
</Desc>
    <FName>grapheme_substr</FName>
    <Desc>Procedural style
string grapheme_substr ( string $string , int $start [, int $length ] )
Return part of a string
</Desc>
    <FName>gregoriantojd</FName>
    <Desc>int gregoriantojd ( int $month , int $day , int $year )
The valid range for the Gregorian calendar is from November 25, 4714 B.C. to at least December 31, 9999 A.D.
Although this function can handle dates all the way back to 4714 B.C., such use may not be meaningful. The Gregorian calendar was not instituted until October 15, 1582 (or October 5, 1582 in the Julian calendar). Some countries did not accept it until much later. For example, Britain converted in 1752, The USSR in 1918 and Greece in 1923. Most European countries used the Julian calendar prior to the Gregorian.
</Desc>
    <FName>gupnp_context_get_host_ip</FName>
    <Desc>string gupnp_context_get_host_ip ( resource $context )
Get the IP address we advertise ourselves as using.
</Desc>
    <FName>gupnp_context_get_port</FName>
    <Desc>int gupnp_context_get_port ( resource $context )
Get the port that the SOAP server is running on.
</Desc>
    <FName>gupnp_context_get_subscription_timeout</FName>
    <Desc>int gupnp_context_get_subscription_timeout ( resource $context )
Get the event subscription timeout (in seconds), or 0 meaning there is no timeout.
</Desc>
    <FName>gupnp_context_host_path</FName>
    <Desc>bool gupnp_context_host_path ( resource $context , string $local_path , string $server_path )
Start hosting local_path at server_path. Files with the path local_path.LOCALE (if they exist) will be served up when LOCALE is specified in the request's Accept-Language header.
</Desc>
    <FName>gupnp_context_new</FName>
    <Desc>resource gupnp_context_new ([ string $host_ip [, int $port = 0 ]] )
Create a new context with the specified host_ip and port.
</Desc>
    <FName>gupnp_context_set_subscription_timeout</FName>
    <Desc>void gupnp_context_set_subscription_timeout ( resource $context , int $timeout )
Sets the event subscription timeout (in seconds) to time out. Note that any client side subscriptions will automatically be renewed.
</Desc>
    <FName>gupnp_context_timeout_add</FName>
    <Desc>bool gupnp_context_timeout_add ( resource $context , int $timeout , mixed $callback [, mixed $arg ] )
Sets a function to be called at regular intervals.
</Desc>
    <FName>gupnp_context_unhost_path</FName>
    <Desc>bool gupnp_context_unhost_path ( resource $context , string $server_path )
Stop hosting the file or folder at server_path.
</Desc>
    <FName>gupnp_control_point_browse_start</FName>
    <Desc>bool gupnp_control_point_browse_start ( resource $cpoint )
Start the search and calls user-defined callback.
</Desc>
    <FName>gupnp_control_point_browse_stop</FName>
    <Desc>bool gupnp_control_point_browse_stop ( resource $cpoint )
Stop the search and calls user-defined callback.
</Desc>
    <FName>gupnp_control_point_callback_set</FName>
    <Desc>bool gupnp_control_point_callback_set ( resource $cpoint , int $signal , mixed $callback [, mixed $arg ] )
Set control point callback function for signal.
</Desc>
    <FName>gupnp_control_point_new</FName>
    <Desc>resource gupnp_control_point_new ( resource $context , string $target )
Create a new control point with the specified target.
</Desc>
    <FName>gupnp_device_action_callback_set</FName>
    <Desc>bool gupnp_device_action_callback_set ( resource $root_device , int $signal , string $action_name , mixed $callback [, mixed $arg ] )
Set device callback function for signal and action.
</Desc>
    <FName>gupnp_device_info_get_service</FName>
    <Desc>resource gupnp_device_info_get_service ( resource $root_device , string $type )
Get the service with type or false if no such device was found.
</Desc>
    <FName>gupnp_device_info_get</FName>
    <Desc>array gupnp_device_info_get ( resource $root_device )
Get info of root device.
</Desc>
    <FName>gupnp_root_device_get_available</FName>
    <Desc>bool gupnp_root_device_get_available ( resource $root_device )
Get whether or not root_device is available (announcing its presence).
</Desc>
    <FName>gupnp_root_device_get_relative_location</FName>
    <Desc>string gupnp_root_device_get_relative_location ( resource $root_device )
Get the relative location of root device.
</Desc>
    <FName>gupnp_root_device_new</FName>
    <Desc>resource gupnp_root_device_new ( resource $context , string $location , string $description_dir )
Create a new root device, automatically downloading and parsing location.
</Desc>
    <FName>gupnp_root_device_set_available</FName>
    <Desc>bool gupnp_root_device_set_available ( resource $root_device , bool $available )
Controls whether or not root_device is available (announcing its presence).
</Desc>
    <FName>gupnp_root_device_start</FName>
    <Desc>bool gupnp_root_device_start ( resource $root_device )
Start root server's main loop.
</Desc>
    <FName>gupnp_root_device_stop</FName>
    <Desc>bool gupnp_root_device_stop ( resource $root_device )
Stop root server's main loop.
</Desc>
    <FName>gupnp_service_action_get</FName>
    <Desc>mixed gupnp_service_action_get ( resource $action , string $name , int $type )
Retrieves the specified action arguments.
</Desc>
    <FName>gupnp_service_action_return_error</FName>
    <Desc>bool gupnp_service_action_return_error ( resource $action , int $error_code [, string $error_description ] )
Return error code.
</Desc>
    <FName>gupnp_service_action_return</FName>
    <Desc>bool gupnp_service_action_return ( resource $action )
Return successfully.
</Desc>
    <FName>gupnp_service_action_set</FName>
    <Desc>bool gupnp_service_action_set ( resource $action , string $name , int $type , mixed $value )
Sets the specified action return values.
</Desc>
    <FName>gupnp_service_freeze_notify</FName>
    <Desc>bool gupnp_service_freeze_notify ( resource $service )
Causes new notifications to be queued up until gupnp_service_thaw_notify() is called.
</Desc>
    <FName>gupnp_service_info_get_introspection</FName>
    <Desc>mixed gupnp_service_info_get_introspection ( resource $proxy [, mixed $callback [, mixed $arg ]] )
Get resource introspection of service or register callback if corresponding parameter was passed.
</Desc>
    <FName>gupnp_service_info_get</FName>
    <Desc>array gupnp_service_info_get ( resource $proxy )
Get full info of service.
</Desc>
    <FName>gupnp_service_introspection_get_state_variable</FName>
    <Desc>array gupnp_service_introspection_get_state_variable ( resource $introspection , string $variable_name )
Returns the state variable data by the name variable_name in this service.
</Desc>
    <FName>gupnp_service_notify</FName>
    <Desc>bool gupnp_service_notify ( resource $service , string $name , int $type , mixed $value )
Notifies listening clients that the property have changed to the specified values.
</Desc>
    <FName>gupnp_service_proxy_action_get</FName>
    <Desc>mixed gupnp_service_proxy_action_get ( resource $proxy , string $action , string $name , int $type )
Send action with parameters to the service exposed by proxy synchronously and get value.
</Desc>
    <FName>gupnp_service_proxy_action_set</FName>
    <Desc>bool gupnp_service_proxy_action_set ( resource $proxy , string $action , string $name , mixed $value , int $type )
Send action with parameters to the service exposed by proxy synchronously and set value.
</Desc>
    <FName>gupnp_service_proxy_add_notify</FName>
    <Desc>bool gupnp_service_proxy_add_notify ( resource $proxy , string $value , int $type , mixed $callback [, mixed $arg ] )
Sets up callback to be called whenever a change notification for variable is recieved.
</Desc>
    <FName>gupnp_service_proxy_callback_set</FName>
    <Desc>bool gupnp_service_proxy_callback_set ( resource $proxy , int $signal , mixed $callback [, mixed $arg ] )
Set service proxy callback for signal.
</Desc>
    <FName>gupnp_service_proxy_get_subscribed</FName>
    <Desc>bool gupnp_service_proxy_get_subscribed ( resource $proxy )
Check whether subscription is valid to the service.
</Desc>
    <FName>gupnp_service_proxy_remove_notify</FName>
    <Desc>bool gupnp_service_proxy_remove_notify ( resource $proxy , string $value )
Cancels the variable change notification.
</Desc>
    <FName>gupnp_service_proxy_set_subscribed</FName>
    <Desc>bool gupnp_service_proxy_set_subscribed ( resource $proxy , bool $subscribed )
(Un)subscribes to the service.
</Desc>
    <FName>gupnp_service_thaw_notify</FName>
    <Desc>bool gupnp_service_thaw_notify ( resource $service )
Sends out any pending notifications and stops queuing of new ones.
</Desc>
    <FName>gzclose</FName>
    <Desc>bool gzclose ( resource $zp )
Closes the given gz-file pointer.
</Desc>
    <FName>gzcompress</FName>
    <Desc>string gzcompress ( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE ]] )
This function compresses the given string using the ZLIB data format. 
For details on the ZLIB compression algorithm see the document "» ZLIB Compressed Data Format Specification version 3.3" (RFC 1950). 
Note: 
This is not the same as gzip compression, which includes some header data. See gzencode() for gzip compression.
</Desc>
    <FName>gzdecode</FName>
    <Desc>string gzdecode ( string $data [, int $length ] )
This function returns a decoded version of the input data.
</Desc>
    <FName>gzdeflate</FName>
    <Desc>string gzdeflate ( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW ]] )
This function compresses the given string using the DEFLATE data format. 
For details on the DEFLATE compression algorithm see the document "» DEFLATE Compressed Data Format Specification version 1.3" (RFC 1951).
</Desc>
    <FName>gzencode</FName>
    <Desc>string gzencode ( string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]] )
This function returns a compressed version of the input data compatible with the output of the gzip program. 
For more information on the GZIP file format, see the document: » GZIP file format specification version 4.3 (RFC 1952).
</Desc>
    <FName>gzeof</FName>
    <Desc>int gzeof ( resource $zp )
Tests the given GZ file pointer for EOF.
</Desc>
    <FName>gzfile</FName>
    <Desc>array gzfile ( string $filename [, int $use_include_path = 0 ] )
This function is identical to readgzfile(), except that it returns the file in an array.
</Desc>
    <FName>gzgetc</FName>
    <Desc>string gzgetc ( resource $zp )
Returns a string containing a single (uncompressed) character read from the given gz-file pointer.
</Desc>
    <FName>gzgets</FName>
    <Desc>string gzgets ( resource $zp [, int $length ] )
Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes have been read, on a newline, or on EOF (whichever comes first).
</Desc>
    <FName>gzgetss</FName>
    <Desc>string gzgetss ( resource $zp , int $length [, string $allowable_tags ] )
Identical to gzgets(), except that gzgetss() attempts to strip any HTML and PHP tags from the text it reads.
</Desc>
    <FName>gzinflate</FName>
    <Desc>string gzinflate ( string $data [, int $length = 0 ] )
This function inflates a deflated string.
</Desc>
    <FName>gzopen</FName>
    <Desc>resource gzopen ( string $filename , string $mode [, int $use_include_path = 0 ] )
Opens a gzip (.gz) file for reading or writing. 
gzopen() can be used to read a file which is not in gzip format; in this case gzread() will directly read from the file without decompression.
</Desc>
    <FName>gzpassthru</FName>
    <Desc>int gzpassthru ( resource $zp )
Reads to EOF on the given gz-file pointer from the current position and writes the (uncompressed) results to standard output. 
Note: 
You may need to call gzrewind() to reset the file pointer to the beginning of the file if you have already written data to it. 
Tip 
If you just want to dump the contents of a file to the output buffer, without first modifying it or seeking to a particular offset, you may want to use the readgzfile() function, which saves you the gzopen() call.
</Desc>
    <FName>gzputs</FName>
    <Desc>This function is an alias of: gzwrite(). 
</Desc>
    <FName>gzread</FName>
    <Desc>string gzread ( resource $zp , int $length )
gzread() reads up to length bytes from the given gz-file pointer. Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first.
</Desc>
    <FName>gzrewind</FName>
    <Desc>bool gzrewind ( resource $zp )
Sets the file position indicator of the given gz-file pointer to the beginning of the file stream.
</Desc>
    <FName>gzseek</FName>
    <Desc>int gzseek ( resource $zp , int $offset [, int $whence = SEEK_SET ] )
Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent to calling (in C) gzseek(zp, offset, SEEK_SET). 
If the file is opened for reading, this function is emulated but can be extremely slow. If the file is opened for writing, only forward seeks are supported; gzseek() then compresses a sequence of zeroes up to the new starting position.
</Desc>
    <FName>gztell</FName>
    <Desc>int gztell ( resource $zp )
Gets the position of the given file pointer; i.e., its offset into the uncompressed file stream.
</Desc>
    <FName>gzuncompress</FName>
    <Desc>string gzuncompress ( string $data [, int $length = 0 ] )
This function uncompress a compressed string.
</Desc>
    <FName>gzwrite</FName>
    <Desc>int gzwrite ( resource $zp , string $string [, int $length ] )
gzwrite() writes the contents of string to the given gz-file.
</Desc>
    <FName>__halt_compiler</FName>
    <Desc>void __halt_compiler ( void )
Halts the execution of the compiler. This can be useful to embed data in PHP scripts, like the installation files. 
Byte position of the data start can be determined by the __COMPILER_HALT_OFFSET__ constant which is defined only if there is a __halt_compiler() presented in the file.
</Desc>
    <FName>hash_algos</FName>
    <Desc>array hash_algos ( void )
</Desc>
    <FName>hash_copy</FName>
    <Desc>HashContext hash_copy ( HashContext $context )
</Desc>
    <FName>hash_equals</FName>
    <Desc>bool hash_equals ( string $known_string , string $user_string )
Compares two strings using the same time whether they're equal or not. 
This function should be used to mitigate timing attacks; for instance, when testing crypt() password hashes.
</Desc>
    <FName>hash_file</FName>
    <Desc>string hash_file ( string $algo , string $filename [, bool $raw_output = FALSE ] )
</Desc>
    <FName>hash_final</FName>
    <Desc>string hash_final ( HashContext $context [, bool $raw_output = FALSE ] )
</Desc>
    <FName>hash_hkdf</FName>
    <Desc>string hash_hkdf ( string $algo , string $ikm [, int $length = 0 [, string $info = '' [, string $salt = '' ]]] )
</Desc>
    <FName>hash_hmac_algos</FName>
    <Desc>array hash_hmac_algos ( void )
</Desc>
    <FName>hash_hmac_file</FName>
    <Desc>string hash_hmac_file ( string $algo , string $filename , string $key [, bool $raw_output = FALSE ] )
</Desc>
    <FName>hash_hmac</FName>
    <Desc>string hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = FALSE ] )
</Desc>
    <FName>hash_init</FName>
    <Desc>HashContext hash_init ( string $algo [, int $options = 0 [, string $key = NULL ]] )
</Desc>
    <FName>hash_pbkdf2</FName>
    <Desc>string hash_pbkdf2 ( string $algo , string $password , string $salt , int $iterations [, int $length = 0 [, bool $raw_output = FALSE ]] )
</Desc>
    <FName>hash_update_file</FName>
    <Desc>bool hash_update_file ( HashContext $hcontext , string $filename [, resource $scontext = NULL ] )
</Desc>
    <FName>hash_update_stream</FName>
    <Desc>int hash_update_stream ( HashContext $context , resource $handle [, int $length = -1 ] )
</Desc>
    <FName>hash_update</FName>
    <Desc>bool hash_update ( HashContext $context , string $data )
</Desc>
    <FName>hash</FName>
    <Desc>string hash ( string $algo , string $data [, bool $raw_output = FALSE ] )
</Desc>
    <FName>header_register_callback</FName>
    <Desc>bool header_register_callback ( callable $callback )
Registers a function that will be called when PHP starts sending output. 
The callback is executed just after PHP prepares all headers to be sent, and before any other output is sent, creating a window to manipulate the outgoing headers before being sent.
</Desc>
    <FName>header_remove</FName>
    <Desc>void header_remove ([ string $name ] )
Removes an HTTP header previously set using header().
</Desc>
    <FName>header</FName>
    <Desc>void header ( string $header [, bool $replace = TRUE [, int $http_response_code ]] )
header() is used to send a raw HTTP header. See the » HTTP/1.1 specification for more information on HTTP headers. 
Remember that header() must be called before any actual output is sent, either by normal HTML tags, blank lines in a file, or from PHP. It is a very common error to read code with include, or require, functions, or another file access function, and have spaces or empty lines that are output before header() is called. The same problem exists when using a single PHP/HTML file. 
<html>
<?php
/* This will give an error. Note the output
 * above, which is before the header() call */
header('Location: http://www.example.com/');
exit;
?>
</Desc>
    <FName>headers_list</FName>
    <Desc>array headers_list ( void )
headers_list() will return a list of headers to be sent to the browser / client. To determine whether or not these headers have been sent yet, use headers_sent().
</Desc>
    <FName>headers_sent</FName>
    <Desc>bool headers_sent ([ string &$file [, int &$line ]] )
Checks if or where headers have been sent. 
You can't add any more header lines using the header() function once the header block has already been sent. Using this function you can at least prevent getting HTTP header related error messages. Another option is to use Output Buffering.
</Desc>
    <FName>hebrev</FName>
    <Desc>string hebrev ( string $hebrew_text [, int $max_chars_per_line = 0 ] )
Converts logical Hebrew text to visual text. 
The function tries to avoid breaking words.
</Desc>
    <FName>hebrevc</FName>
    <Desc>string hebrevc ( string $hebrew_text [, int $max_chars_per_line = 0 ] )
This function is similar to hebrev() with the difference that it converts newlines (\n) to "<br>\n". 
The function tries to avoid breaking words.
</Desc>
    <FName>hex2bin</FName>
    <Desc>string hex2bin ( string $data )
Decodes a hexadecimally encoded binary string. 
Caution 
This function does NOT convert a hexadecimal number to a binary number. This can be done using the base_convert() function.
</Desc>
    <FName>hexdec</FName>
    <Desc>number hexdec ( string $hex_string )
Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec() converts a hexadecimal string to a decimal number. 
hexdec() will ignore any non-hexadecimal characters it encounters.
</Desc>
    <FName>highlight_file</FName>
    <Desc>mixed highlight_file ( string $filename [, bool $return = FALSE ] )
Prints out or returns a syntax highlighted version of the code contained in filename using the colors defined in the built-in syntax highlighter for PHP. 
Many servers are configured to automatically highlight files with a phps extension. For example, example.phps when viewed will show the syntax highlighted source of the file. To enable this, add this line to the httpd.conf: 
AddType application/x-httpd-php-source .phps
</Desc>
    <FName>highlight_string</FName>
    <Desc>mixed highlight_string ( string $str [, bool $return = FALSE ] )
Outputs or returns html markup for a syntax highlighted version of the given PHP code using the colors defined in the built-in syntax highlighter for PHP.
</Desc>
    <FName>hrtime</FName>
    <Desc>mixed hrtime ([ bool $get_as_number = FALSE ] )
Returns the system's high resolution time, counted from an arbitrary point in time. The delivered timestamp is monotonic and can not be adjusted.
</Desc>
    <FName>html_entity_decode</FName>
    <Desc>string html_entity_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset") ]] )
html_entity_decode() is the opposite of htmlentities() in that it converts HTML entities in the string to their corresponding characters. 
More precisely, this function decodes all the entities (including all numeric entities) that a) are necessarily valid for the chosen document type — i.e., for XML, this function does not decode named entities that might be defined in some DTD — and b) whose character or characters are in the coded character set associated with the chosen encoding and are permitted in the chosen document type. All other entities are left as is.
</Desc>
    <FName>htmlentities</FName>
    <Desc>string htmlentities ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset") [, bool $double_encode = TRUE ]]] )
This function is identical to htmlspecialchars() in all ways, except with htmlentities(), all characters which have HTML character entity equivalents are translated into these entities. 
If you want to decode instead (the reverse) you can use html_entity_decode().
</Desc>
    <FName>htmlspecialchars_decode</FName>
    <Desc>string htmlspecialchars_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 ] )
This function is the opposite of htmlspecialchars(). It converts special HTML entities back to characters. 
The converted entities are: &amp;, &quot; (when ENT_NOQUOTES is not set), &#039; (when ENT_QUOTES is set), &lt; and &gt;.
</Desc>
    <FName>htmlspecialchars</FName>
    <Desc>string htmlspecialchars ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset") [, bool $double_encode = TRUE ]]] )
Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with these conversions made. If you require all input substrings that have associated named entities to be translated, use htmlentities() instead. 
If the input string passed to this function and the final document share the same character set, this function is sufficient to prepare input for inclusion in most contexts of an HTML document. If, however, the input can represent characters that are not coded in the final document character set and you wish to retain those characters (as numeric or named entities), both this function and htmlentities() (which only encodes substrings that have named entity equivalents) may be insufficient. You may have to use mb_encode_numericentity() instead. 
Performed translationsCharacterReplacement
& (ampersand)&amp;
" (double quote)&quot;, unless ENT_NOQUOTES is set
' (single quote)&#039; (for ENT_HTML401) or &apos; (for ENT_XML1, ENT_XHTML or ENT_HTML5), but only when ENT_QUOTES is set 
< (less than)&lt;
> (greater than)&gt;
</Desc>
    <FName>http_build_query</FName>
    <Desc>string http_build_query ( mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]] )
Generates a URL-encoded query string from the associative (or indexed) array provided.
</Desc>
    <FName>http_response_code</FName>
    <Desc>mixed http_response_code ([ int $response_code ] )
Gets or sets the HTTP response status code.
</Desc>
    <FName>hwapi_attribute_new</FName>
    <Desc>HW_API_Attribute hwapi_attribute_new ([ string $name [, string $value ]] )
Creates a new instance of hw_api_attribute with the given name and value.
</Desc>
    <FName>hwapi_content_new</FName>
    <Desc>HW_API_Content hwapi_content_new ( string $content , string $mimetype )
Creates a new content object from the string content.
</Desc>
    <FName>hwapi_hgcsp</FName>
    <Desc>HW_API hwapi_hgcsp ( string $hostname [, int $port ] )
Opens a connection to the Hyperwave server on host hostname. The protocol used is HGCSP.
</Desc>
    <FName>hwapi_object_new</FName>
    <Desc>hw_api_object hwapi_object_new ( array $parameter )
Creates a new instance of the class hw_api_object.
</Desc>
    <FName>hypot</FName>
    <Desc>float hypot ( float $x , float $y )
hypot() returns the length of the hypotenuse of a right-angle triangle with sides of length x and y, or the distance of the point (x, y) from the origin. This is equivalent to sqrt(x*x + y*y).
</Desc>
    <FName>ibase_add_user</FName>
    <Desc>bool ibase_add_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )
</Desc>
    <FName>ibase_affected_rows</FName>
    <Desc>int ibase_affected_rows ([ resource $link_identifier ] )
This function returns the number of rows that were affected by the previous query (INSERT, UPDATE or DELETE) that was executed from within the specified transaction context.
</Desc>
    <FName>ibase_backup</FName>
    <Desc>mixed ibase_backup ( resource $service_handle , string $source_db , string $dest_file [, int $options = 0 [, bool $verbose = FALSE ]] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ibase_blob_add</FName>
    <Desc>void ibase_blob_add ( resource $blob_handle , string $data )
ibase_blob_add() adds data into a blob created with ibase_blob_create().
</Desc>
    <FName>ibase_blob_cancel</FName>
    <Desc>bool ibase_blob_cancel ( resource $blob_handle )
This function will discard a BLOB if it has not yet been closed by ibase_blob_close().
</Desc>
    <FName>ibase_blob_close</FName>
    <Desc>mixed ibase_blob_close ( resource $blob_handle )
This function closes a BLOB that has either been opened for reading by ibase_blob_open() or has been opened for writing by ibase_blob_create().
</Desc>
    <FName>ibase_blob_create</FName>
    <Desc>resource ibase_blob_create ([ resource $link_identifier = NULL ] )
ibase_blob_create() creates a new BLOB for filling with data.
</Desc>
    <FName>ibase_blob_echo</FName>
    <Desc>bool ibase_blob_echo ( string $blob_id )
bool ibase_blob_echo ( resource $link_identifier , string $blob_id )
This function opens a BLOB for reading and sends its contents directly to standard output (the browser, in most cases).
</Desc>
    <FName>ibase_blob_get</FName>
    <Desc>string ibase_blob_get ( resource $blob_handle , int $len )
This function returns at most len bytes from a BLOB that has been opened for reading by ibase_blob_open(). 
Note: 
It is not possible to read from a BLOB that has been opened for writing by ibase_blob_create().
</Desc>
    <FName>ibase_blob_import</FName>
    <Desc>string ibase_blob_import ( resource $link_identifier , resource $file_handle )
string ibase_blob_import ( resource $file_handle )
This function creates a BLOB, reads an entire file into it, closes it and returns the assigned BLOB id.
</Desc>
    <FName>ibase_blob_info</FName>
    <Desc>array ibase_blob_info ( resource $link_identifier , string $blob_id )
array ibase_blob_info ( string $blob_id )
Returns the BLOB length and other useful information.
</Desc>
    <FName>ibase_blob_open</FName>
    <Desc>resource ibase_blob_open ( resource $link_identifier , string $blob_id )
resource ibase_blob_open ( string $blob_id )
Opens an existing BLOB for reading.
</Desc>
    <FName>ibase_close</FName>
    <Desc>bool ibase_close ([ resource $connection_id = NULL ] )
Closes the link to an InterBase database that's associated with a connection id returned from ibase_connect(). Default transaction on link is committed, other transactions are rolled back.
</Desc>
    <FName>ibase_commit_ret</FName>
    <Desc>bool ibase_commit_ret ([ resource $link_or_trans_identifier = NULL ] )
Commits a transaction without closing it.
</Desc>
    <FName>ibase_commit</FName>
    <Desc>bool ibase_commit ([ resource $link_or_trans_identifier = NULL ] )
Commits a transaction.
</Desc>
    <FName>ibase_connect</FName>
    <Desc>resource ibase_connect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )
Establishes a connection to an Firebird/InterBase server. 
In case a second call is made to ibase_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned. The link to the server will be closed as soon as the execution of the script ends, unless it's closed earlier by explicitly calling ibase_close().
</Desc>
    <FName>ibase_db_info</FName>
    <Desc>string ibase_db_info ( resource $service_handle , string $db , int $action [, int $argument = 0 ] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ibase_delete_user</FName>
    <Desc>bool ibase_delete_user ( resource $service_handle , string $user_name )
</Desc>
    <FName>ibase_drop_db</FName>
    <Desc>bool ibase_drop_db ([ resource $connection = NULL ] )
This functions drops a database that was opened by either ibase_connect() or ibase_pconnect(). The database is closed and deleted from the server.
</Desc>
    <FName>ibase_errcode</FName>
    <Desc>int ibase_errcode ( void )
Returns the error code that resulted from the most recent InterBase function call.
</Desc>
    <FName>ibase_errmsg</FName>
    <Desc>string ibase_errmsg ( void )
Returns the error message that resulted from the most recent InterBase function call.
</Desc>
    <FName>ibase_execute</FName>
    <Desc>resource ibase_execute ( resource $query [, mixed $bind_arg [, mixed $... ]] )
Execute a query prepared by ibase_prepare(). 
This is a lot more effective than using ibase_query() if you are repeating a same kind of query several times with only some parameters changing.
</Desc>
    <FName>ibase_fetch_assoc</FName>
    <Desc>array ibase_fetch_assoc ( resource $result [, int $fetch_flag = 0 ] )
Fetch a result row from a query as an associative array. 
ibase_fetch_assoc() fetches one row of data from the result. If two or more columns of the result have the same field names, the last column will take precedence. To access the other column(s) of the same name, you either need to access the result with numeric indices by using ibase_fetch_row() or use alias names in your query.
</Desc>
    <FName>ibase_fetch_object</FName>
    <Desc>object ibase_fetch_object ( resource $result_id [, int $fetch_flag = 0 ] )
Fetches a row as a pseudo-object from a given result identifier. 
Subsequent calls to ibase_fetch_object() return the next row in the result set.
</Desc>
    <FName>ibase_fetch_row</FName>
    <Desc>array ibase_fetch_row ( resource $result_identifier [, int $fetch_flag = 0 ] )
ibase_fetch_row() fetches one row of data from the given result set. 
Subsequent calls to ibase_fetch_row() return the next row in the result set, or FALSE if there are no more rows.
</Desc>
    <FName>ibase_field_info</FName>
    <Desc>array ibase_field_info ( resource $result , int $field_number )
Returns an array with information about a field after a select query has been run.
</Desc>
    <FName>ibase_free_event_handler</FName>
    <Desc>bool ibase_free_event_handler ( resource $event )
This function causes the registered event handler specified by event to be cancelled. The callback function will no longer be called for the events it was registered to handle.
</Desc>
    <FName>ibase_free_query</FName>
    <Desc>bool ibase_free_query ( resource $query )
Frees a prepared query.
</Desc>
    <FName>ibase_free_result</FName>
    <Desc>bool ibase_free_result ( resource $result_identifier )
Frees a result set.
</Desc>
    <FName>ibase_gen_id</FName>
    <Desc>mixed ibase_gen_id ( string $generator [, int $increment = 1 [, resource $link_identifier = NULL ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ibase_maintain_db</FName>
    <Desc>bool ibase_maintain_db ( resource $service_handle , string $db , int $action [, int $argument = 0 ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ibase_modify_user</FName>
    <Desc>bool ibase_modify_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )
</Desc>
    <FName>ibase_name_result</FName>
    <Desc>bool ibase_name_result ( resource $result , string $name )
This function assigns a name to a result set. This name can be used later in UPDATE|DELETE ... WHERE CURRENT OF name statements.
</Desc>
    <FName>ibase_num_fields</FName>
    <Desc>int ibase_num_fields ( resource $result_id )
Get the number of fields in a result set.
</Desc>
    <FName>ibase_num_params</FName>
    <Desc>int ibase_num_params ( resource $query )
This function returns the number of parameters in the prepared query specified by query. This is the number of binding arguments that must be present when calling ibase_execute().
</Desc>
    <FName>ibase_param_info</FName>
    <Desc>array ibase_param_info ( resource $query , int $param_number )
Returns an array with information about a parameter after a query has been prepared.
</Desc>
    <FName>ibase_pconnect</FName>
    <Desc>resource ibase_pconnect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )
Opens a persistent connection to an InterBase database. 
ibase_pconnect() acts very much like ibase_connect() with two major differences. 
First, when connecting, the function will first try to find a (persistent) link that's already opened with the same parameters. If one is found, an identifier for it will be returned instead of opening a new connection. 
Second, the connection to the InterBase server will not be closed when the execution of the script ends. Instead, the link will remain open for future use (ibase_close() will not close links established by ibase_pconnect()). This type of link is therefore called 'persistent'.
</Desc>
    <FName>ibase_prepare</FName>
    <Desc>resource ibase_prepare ( string $query )
resource ibase_prepare ( resource $link_identifier , string $query )
resource ibase_prepare ( resource $link_identifier , string $trans , string $query )
Prepare a query for later binding of parameter placeholders and execution (via ibase_execute()).
</Desc>
    <FName>ibase_query</FName>
    <Desc>resource ibase_query ([ resource $link_identifier ], string $query [, int $bind_args ] )
Performs a query on an InterBase database.
</Desc>
    <FName>ibase_restore</FName>
    <Desc>mixed ibase_restore ( resource $service_handle , string $source_file , string $dest_db [, int $options = 0 [, bool $verbose = FALSE ]] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ibase_rollback_ret</FName>
    <Desc>bool ibase_rollback_ret ([ resource $link_or_trans_identifier = NULL ] )
Rolls back a transaction without closing it.
</Desc>
    <FName>ibase_rollback</FName>
    <Desc>bool ibase_rollback ([ resource $link_or_trans_identifier = NULL ] )
Rolls back a transaction.
</Desc>
    <FName>ibase_server_info</FName>
    <Desc>string ibase_server_info ( resource $service_handle , int $action )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ibase_service_attach</FName>
    <Desc>resource ibase_service_attach ( string $host , string $dba_username , string $dba_password )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ibase_service_detach</FName>
    <Desc>bool ibase_service_detach ( resource $service_handle )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ibase_set_event_handler</FName>
    <Desc>resource ibase_set_event_handler ( callable $event_handler , string $event_name1 [, string $event_name2 [, string $... ]] )
resource ibase_set_event_handler ( resource $connection , callable $event_handler , string $event_name1 [, string $event_name2 [, string $... ]] )
This function registers a PHP user function as event handler for the specified events.
</Desc>
    <FName>ibase_trans</FName>
    <Desc>resource ibase_trans ([ int $trans_args [, resource $link_identifier ]] )
resource ibase_trans ([ resource $link_identifier [, int $trans_args ]] )
Begins a transaction. 
Note: 
The first call to ibase_trans() will not return the default transaction of a connection. All transactions started by ibase_trans() will be rolled back at the end of the script if they were not committed or rolled back by either ibase_commit() or ibase_rollback(). 
Note: 
This function will accept multiple trans_args and link_identifier arguments. This allows transactions over multiple database connections, which are committed using a 2-phase commit algorithm. This means you can rely on the updates to either succeed in every database, or fail in every database. It does NOT mean you can use tables from different databases in the same query! 
If you use transactions over multiple databases, you will have to specify both the link_id and transaction_id in calls to ibase_query() and ibase_prepare().
</Desc>
    <FName>ibase_wait_event</FName>
    <Desc>string ibase_wait_event ( string $event_name1 [, string $event_name2 [, string $... ]] )
string ibase_wait_event ( resource $connection , string $event_name1 [, string $event_name2 [, string $... ]] )
This function suspends execution of the script until one of the specified events is posted by the database. The name of the event that was posted is returned. This function accepts up to 15 event arguments.
</Desc>
    <FName>iconv_get_encoding</FName>
    <Desc>mixed iconv_get_encoding ([ string $type = "all" ] )
Retrieve internal configuration variables of iconv extension.
</Desc>
    <FName>iconv_mime_decode_headers</FName>
    <Desc>array iconv_mime_decode_headers ( string $encoded_headers [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )
Decodes multiple MIME header fields at once.
</Desc>
    <FName>iconv_mime_decode</FName>
    <Desc>string iconv_mime_decode ( string $encoded_header [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )
Decodes a MIME header field.
</Desc>
    <FName>iconv_mime_encode</FName>
    <Desc>string iconv_mime_encode ( string $field_name , string $field_value [, array $preferences = NULL ] )
Composes and returns a string that represents a valid MIME header field, which looks like the following: 
Subject: =?ISO-8859-1?Q?Pr=FCfung_f=FCr?= Entwerfen von einer MIME kopfzeile
In the above example, "Subject" is the field name and the portion that begins with "=?ISO-8859-1?..." is the field value.
</Desc>
    <FName>iconv_set_encoding</FName>
    <Desc>bool iconv_set_encoding ( string $type , string $charset )
Changes the value of the internal configuration variable specified by type to charset.
</Desc>
    <FName>iconv_strlen</FName>
    <Desc>int iconv_strlen ( string $str [, string $charset = ini_get("iconv.internal_encoding") ] )
In contrast to strlen(), iconv_strlen() counts the occurrences of characters in the given byte sequence str on the basis of the specified character set, the result of which is not necessarily identical to the length of the string in byte.
</Desc>
    <FName>iconv_strpos</FName>
    <Desc>int iconv_strpos ( string $haystack , string $needle [, int $offset = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )
Finds position of first occurrence of a needle within a haystack. 
In contrast to strpos(), the return value of iconv_strpos() is the number of characters that appear before the needle, rather than the offset in bytes to the position where the needle has been found. The characters are counted on the basis of the specified character set charset.
</Desc>
    <FName>iconv_strrpos</FName>
    <Desc>int iconv_strrpos ( string $haystack , string $needle [, string $charset = ini_get("iconv.internal_encoding") ] )
Finds the last occurrence of a needle within a haystack. 
In contrast to strrpos(), the return value of iconv_strrpos() is the number of characters that appear before the needle, rather than the offset in bytes to the position where the needle has been found. The characters are counted on the basis of the specified character set charset.
</Desc>
    <FName>iconv_substr</FName>
    <Desc>string iconv_substr ( string $str , int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get("iconv.internal_encoding") ]] )
Cuts a portion of str specified by the offset and length parameters.
</Desc>
    <FName>iconv</FName>
    <Desc>string iconv ( string $in_charset , string $out_charset , string $str )
Performs a character set conversion on the string str from in_charset to out_charset.
</Desc>
    <FName>id3_get_frame_long_name</FName>
    <Desc>string id3_get_frame_long_name ( string $frameId )
id3_get_frame_long_name() returns the long name for an ID3v2 frame.
</Desc>
    <FName>id3_get_frame_short_name</FName>
    <Desc>string id3_get_frame_short_name ( string $frameId )
id3_get_frame_short_name() returns the short name for an ID3v2 frame.
</Desc>
    <FName>id3_get_genre_id</FName>
    <Desc>int id3_get_genre_id ( string $genre )
id3_get_genre_id() returns the id for a genre.
</Desc>
    <FName>id3_get_genre_list</FName>
    <Desc>array id3_get_genre_list ( void )
id3_get_genre_list() returns an array containing all possible genres that may be stored in an ID3 tag. This list has been created by Eric Kemp and later extended by WinAmp. 
This function is useful to provide you users a list of genres from which they may choose one. When updating the ID3 tag you will always have to specify the genre as an integer ranging from 0 to 147.
</Desc>
    <FName>id3_get_genre_name</FName>
    <Desc>string id3_get_genre_name ( int $genre_id )
id3_get_genre_name() returns the name for a genre id.
</Desc>
    <FName>id3_get_tag</FName>
    <Desc>array id3_get_tag ( string $filename [, int $version = ID3_BEST ] )
id3_get_tag() is used to get all information stored in the id3 tag of the specified file.
</Desc>
    <FName>id3_get_version</FName>
    <Desc>int id3_get_version ( string $filename )
id3_get_version() retrieves the version(s) of the ID3 tag(s) in the MP3 file. 
If a file contains an ID3 v1.1 tag, it always contains a 1.0 tag, as version 1.1 is just an extension of 1.0.
</Desc>
    <FName>id3_remove_tag</FName>
    <Desc>bool id3_remove_tag ( string $filename [, int $version = ID3_V1_0 ] )
id3_remove_tag() is used to remove the information stored of an ID3 tag.
</Desc>
    <FName>id3_set_tag</FName>
    <Desc>bool id3_set_tag ( string $filename , array $tag [, int $version = ID3_V1_0 ] )
id3_set_tag() is used to change the information stored of an ID3 tag. If no tag has been present, it will be added to the file.
</Desc>
    <FName>idate</FName>
    <Desc>int idate ( string $format [, int $timestamp = time() ] )
Returns a number formatted according to the given format string using the given integer timestamp or the current local time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time(). 
Unlike the function date(), idate() accepts just one char in the format parameter.
</Desc>
    <FName>idn_to_ascii</FName>
    <Desc>Procedural style
string idn_to_ascii ( string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_UTS46 [, array &$idna_info ]]] )
This function converts a Unicode domain name to an IDNA ASCII-compatible format.
</Desc>
    <FName>idn_to_utf8</FName>
    <Desc>Procedural style
string idn_to_utf8 ( string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_UTS46 [, array &$idna_info ]]] )
This function converts a Unicode domain name from an IDNA ASCII-compatible format to plain Unicode, encoded in UTF-8.
</Desc>
    <FName>ifx_affected_rows</FName>
    <Desc>int ifx_affected_rows ( resource $result_id )
Returns the number of rows affected by a query associated with result_id. 
For inserts, updates and deletes the number is the real number (sqlerrd[2]) of affected rows. For selects it is an estimate (sqlerrd[0]). Don't rely on it. The database server can never return the actual number of rows that will be returned by a SELECT because it has not even begun fetching them at this stage (just after the "PREPARE" when the optimizer has determined the query plan). 
Useful after ifx_prepare() to limit queries to reasonable result sets.
</Desc>
    <FName>ifx_blobinfile_mode</FName>
    <Desc>bool ifx_blobinfile_mode ( int $mode )
Set the default blob mode for all select queries.
</Desc>
    <FName>ifx_byteasvarchar</FName>
    <Desc>bool ifx_byteasvarchar ( int $mode )
Sets the default byte mode for all select-queries.
</Desc>
    <FName>ifx_close</FName>
    <Desc>bool ifx_close ([ resource $link_identifier ] )
ifx_close() closes the link to an Informix database that's associated with the specified link identifier. 
Note that this isn't usually necessary, as non-persistent open links are automatically closed at the end of the script's execution. 
ifx_close() will not close persistent links generated by ifx_pconnect().
</Desc>
    <FName>ifx_connect</FName>
    <Desc>resource ifx_connect ([ string $database [, string $userid [, string $password ]]] )
ifx_connect() establishes a connection to an Informix server. 
In case a second call is made to ifx_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned. 
The link to the server will be closed as soon as the execution of the script ends, unless it's closed earlier by explicitly calling ifx_close().
</Desc>
    <FName>ifx_copy_blob</FName>
    <Desc>int ifx_copy_blob ( int $bid )
Duplicates the given blob object.
</Desc>
    <FName>ifx_create_blob</FName>
    <Desc>int ifx_create_blob ( int $type , int $mode , string $param )
Creates a blob object.
</Desc>
    <FName>ifx_create_char</FName>
    <Desc>int ifx_create_char ( string $param )
Creates an char object.
</Desc>
    <FName>ifx_do</FName>
    <Desc>bool ifx_do ( resource $result_id )
Executes a previously prepared query or opens a cursor for it. 
Does NOT free result_id on error. 
Also sets the real number of ifx_affected_rows() for non-select statements for retrieval by ifx_affected_rows().
</Desc>
    <FName>ifx_error</FName>
    <Desc>string ifx_error ([ resource $link_identifier ] )
Returns in a string one character describing the general results of a statement and both SQLSTATE and SQLCODE associated with the most recent SQL statement executed.
</Desc>
    <FName>ifx_errormsg</FName>
    <Desc>string ifx_errormsg ([ int $errorcode ] )
Returns the Informix error message associated with the most recent Informix error.
</Desc>
    <FName>ifx_fetch_row</FName>
    <Desc>array ifx_fetch_row ( resource $result_id [, mixed $position ] )
Fetches one row of data from the result associated with the specified result identifier. 
Subsequent calls to ifx_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.
</Desc>
    <FName>ifx_fieldproperties</FName>
    <Desc>array ifx_fieldproperties ( resource $result_id )
Returns the Informix SQL fieldproperties of every field in the query as an associative array. Properties are encoded as: "SQLTYPE;length;precision;scale;ISNULLABLE" where SQLTYPE = the Informix type like "SQLVCHAR" etc. and ISNULLABLE = "Y" or "N".
</Desc>
    <FName>ifx_fieldtypes</FName>
    <Desc>array ifx_fieldtypes ( resource $result_id )
Returns an associative array with fieldnames as key and the SQL fieldtypes as data for the query associated with result_id.
</Desc>
    <FName>ifx_free_blob</FName>
    <Desc>bool ifx_free_blob ( int $bid )
Deletes the blobobject for the given blob object-id.
</Desc>
    <FName>ifx_free_char</FName>
    <Desc>bool ifx_free_char ( int $bid )
Deletes the charobject for the given char object-id.
</Desc>
    <FName>ifx_free_result</FName>
    <Desc>bool ifx_free_result ( resource $result_id )
Releases resources for the query associated with result_id.
</Desc>
    <FName>ifx_get_blob</FName>
    <Desc>string ifx_get_blob ( int $bid )
Returns the content of the blob object.
</Desc>
    <FName>ifx_get_char</FName>
    <Desc>string ifx_get_char ( int $bid )
Returns the content of the char object.
</Desc>
    <FName>ifx_getsqlca</FName>
    <Desc>array ifx_getsqlca ( resource $result_id )
Returns a pseudo-row with sqlca.sqlerrd[0] ... sqlca.sqlerrd[5] after the query associated with result_id. 
For inserts, updates and deletes the values returned are those as set by the server after executing the query. This gives access to the number of affected rows and the serial insert value. For SELECTs the values are those saved after the PREPARE statement. This gives access to the *estimated* number of affected rows. The use of this function saves the overhead of executing a SELECT dbinfo('sqlca.sqlerrdx') query, as it retrieves the values that were saved by the ifx driver at the appropriate moment.
</Desc>
    <FName>ifx_htmltbl_result</FName>
    <Desc>int ifx_htmltbl_result ( resource $result_id [, string $html_table_options ] )
Formats and prints all rows of the result_id query into a HTML table.
</Desc>
    <FName>ifx_nullformat</FName>
    <Desc>bool ifx_nullformat ( int $mode )
Sets the default return value of a NULL-value on a fetch row.
</Desc>
    <FName>ifx_num_fields</FName>
    <Desc>int ifx_num_fields ( resource $result_id )
After preparing or executing a query, this call gives you the number of columns in the query.
</Desc>
    <FName>ifx_num_rows</FName>
    <Desc>int ifx_num_rows ( resource $result_id )
Gives the number of rows fetched so far for a query with result_id after a ifx_query() or ifx_do() query.
</Desc>
    <FName>ifx_pconnect</FName>
    <Desc>resource ifx_pconnect ([ string $database [, string $userid [, string $password ]]] )
ifx_pconnect() acts very much like ifx_connect() with two major differences. 
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password. If one is found, an identifier for it will be returned instead of opening a new connection. 
Second, the connection to the SQL server will not be closed when the execution of the script ends. Instead, the link will remain open for future use (ifx_close() will not close links established by ifx_pconnect()). 
This type of links is therefore called 'persistent'.
</Desc>
    <FName>ifx_prepare</FName>
    <Desc>resource ifx_prepare ( string $query , resource $link_identifier [, int $cursor_def ], mixed $blobidarray )
Prepares a query for later use with ifx_do(). 
For "select-type" queries a cursor is declared and opened. Non-select queries are "execute immediate". 
For either query type the number of (estimated or real) affected rows is saved for retrieval by ifx_affected_rows(). 
If the contents of the TEXT (or BYTE) column allow it, you can also use ifx_textasvarchar(1) and ifx_byteasvarchar(1). This allows you to treat TEXT (or BYTE) columns just as if they were ordinary (but long) VARCHAR columns for select queries, and you don't need to bother with blob id's. 
With ifx_textasvarchar(0) or ifx_byteasvarchar(0) (the default situation), select queries will return BLOB columns as blob id's (integer value). You can get the value of the blob as a string or file with the blob functions (see below).
</Desc>
    <FName>ifx_query</FName>
    <Desc>resource ifx_query ( string $query , resource $link_identifier [, int $cursor_type [, mixed $blobidarray ]] )
Sends a query to the currently active database on the server that's associated with the specified link identifier. 
For "select-type" queries a cursor is declared and opened. Non-select queries are "execute immediate". 
For either query type the number of (estimated or real) affected rows is saved for retrieval by ifx_affected_rows(). 
If the contents of the TEXT (or BYTE) column allow it, you can also use ifx_textasvarchar(1) and ifx_byteasvarchar(1). This allows you to treat TEXT (or BYTE) columns just as if they were ordinary (but long) VARCHAR columns for select queries, and you don't need to bother with blob id's. 
With ifx_textasvarchar(0) or ifx_byteasvarchar(0) (the default situation), select queries will return BLOB columns as blob id's (integer value). You can get the value of the blob as a string or file with the blob functions (see below).
</Desc>
    <FName>ifx_textasvarchar</FName>
    <Desc>bool ifx_textasvarchar ( int $mode )
Sets the default text mode for all select-queries.
</Desc>
    <FName>ifx_update_blob</FName>
    <Desc>bool ifx_update_blob ( int $bid , string $content )
Updates the content of the blob object for the given blob object bid.
</Desc>
    <FName>ifx_update_char</FName>
    <Desc>bool ifx_update_char ( int $bid , string $content )
Updates the content of the char object for the given char object bid.
</Desc>
    <FName>ifxus_close_slob</FName>
    <Desc>bool ifxus_close_slob ( int $bid )
Deletes the slob object on the given slob object-id bid.
</Desc>
    <FName>ifxus_create_slob</FName>
    <Desc>int ifxus_create_slob ( int $mode )
Creates an slob object and opens it.
</Desc>
    <FName>ifxus_free_slob</FName>
    <Desc>bool ifxus_free_slob ( int $bid )
Deletes the slob object.
</Desc>
    <FName>ifxus_open_slob</FName>
    <Desc>int ifxus_open_slob ( int $bid , int $mode )
Opens an slob object. bid should be an existing slob id.
</Desc>
    <FName>ifxus_read_slob</FName>
    <Desc>string ifxus_read_slob ( int $bid , int $nbytes )
Reads nbytes of the slob object.
</Desc>
    <FName>ifxus_seek_slob</FName>
    <Desc>int ifxus_seek_slob ( int $bid , int $mode , int $offset )
Sets the current file or seek position of an open slob object.
</Desc>
    <FName>ifxus_tell_slob</FName>
    <Desc>int ifxus_tell_slob ( int $bid )
Returns the current file or seek position of an open slob object
</Desc>
    <FName>ifxus_write_slob</FName>
    <Desc>int ifxus_write_slob ( int $bid , string $content )
Writes a string into the slob object.
</Desc>
    <FName>ignore_user_abort</FName>
    <Desc>int ignore_user_abort ([ bool $value ] )
Sets whether a client disconnect should cause a script to be aborted. 
When running PHP as a command line script, and the script's tty goes away without the script being terminated then the script will die the next time it tries to write anything, unless value is set to TRUE
</Desc>
    <FName>iis_add_server</FName>
    <Desc>int iis_add_server ( string $path , string $comment , string $server_ip , int $port , string $host_name , int $rights , int $start_server )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_get_dir_security</FName>
    <Desc>int iis_get_dir_security ( int $server_instance , string $virtual_path )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_get_script_map</FName>
    <Desc>string iis_get_script_map ( int $server_instance , string $virtual_path , string $script_extension )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_get_server_by_comment</FName>
    <Desc>int iis_get_server_by_comment ( string $comment )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_get_server_by_path</FName>
    <Desc>int iis_get_server_by_path ( string $path )
Each virtual server in IIS is associated with an instance number. iis_get_server_by_path() finds the instance number from the actual path to the root directory.
</Desc>
    <FName>iis_get_server_rights</FName>
    <Desc>int iis_get_server_rights ( int $server_instance , string $virtual_path )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_get_service_state</FName>
    <Desc>int iis_get_service_state ( string $service_id )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_remove_server</FName>
    <Desc>int iis_remove_server ( int $server_instance )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_set_app_settings</FName>
    <Desc>int iis_set_app_settings ( int $server_instance , string $virtual_path , string $application_scope )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_set_dir_security</FName>
    <Desc>int iis_set_dir_security ( int $server_instance , string $virtual_path , int $directory_flags )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_set_script_map</FName>
    <Desc>int iis_set_script_map ( int $server_instance , string $virtual_path , string $script_extension , string $engine_path , int $allow_scripting )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_set_server_rights</FName>
    <Desc>int iis_set_server_rights ( int $server_instance , string $virtual_path , int $directory_flags )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_start_server</FName>
    <Desc>int iis_start_server ( int $server_instance )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_start_service</FName>
    <Desc>int iis_start_service ( string $service_id )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_stop_server</FName>
    <Desc>int iis_stop_server ( int $server_instance )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>iis_stop_service</FName>
    <Desc>int iis_stop_service ( string $service_id )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>image_type_to_extension</FName>
    <Desc>string image_type_to_extension ( int $imagetype [, bool $include_dot = TRUE ] )
Returns the extension for the given IMAGETYPE_XXX constant.
</Desc>
    <FName>image_type_to_mime_type</FName>
    <Desc>string image_type_to_mime_type ( int $imagetype )
The image_type_to_mime_type() function will determine the Mime-Type for an IMAGETYPE constant.
</Desc>
    <FName>image2wbmp</FName>
    <Desc>bool image2wbmp ( resource $image [, string $filename [, int $foreground ]] )
image2wbmp() outputs or save a WBMP version of the given image.
</Desc>
    <FName>imageaffine</FName>
    <Desc>resource imageaffine ( resource $image , array $affine [, array $clip ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>imageaffinematrixconcat</FName>
    <Desc>array imageaffinematrixconcat ( array $m1 , array $m2 )
Returns the concatenation of two affine transformation matrices, what is useful if multiple transformations should be applied to the same image in one go.
</Desc>
    <FName>imageaffinematrixget</FName>
    <Desc>array imageaffinematrixget ( int $type [, mixed $options ] )
Returns an affine transformation matrix.
</Desc>
    <FName>imagealphablending</FName>
    <Desc>bool imagealphablending ( resource $image , bool $blendmode )
imagealphablending() allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as imagesetpixel() determines how much of the underlying color should be allowed to shine through. As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image. The resulting pixel is opaque. In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel. Blending mode is not available when drawing on palette images.
</Desc>
    <FName>imageantialias</FName>
    <Desc>bool imageantialias ( resource $image , bool $enabled )
Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components. It works using a direct blend operation. It works only with truecolor images. 
Thickness and styled are not supported. 
Using antialiased primitives with transparent background color can end with some unexpected results. The blend method uses the background color as any other colors. The lack of alpha component support does not allow an alpha based antialiasing method.
</Desc>
    <FName>imagearc</FName>
    <Desc>bool imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color )
imagearc() draws an arc of circle centered at the given coordinates.
</Desc>
    <FName>imagebmp</FName>
    <Desc>bool imagebmp ( resource $image [, mixed $to = NULL [, bool $compressed = TRUE ]] )
Outputs or saves a BMP version of the given image.
</Desc>
    <FName>imagechar</FName>
    <Desc>bool imagechar ( resource $image , int $font , int $x , int $y , string $c , int $color )
imagechar() draws the first character of c in the image identified by image with its upper-left at x,y (top left is 0, 0) with the color color.
</Desc>
    <FName>imagecharup</FName>
    <Desc>bool imagecharup ( resource $image , int $font , int $x , int $y , string $c , int $color )
Draws the character c vertically at the specified coordinate on the given image.
</Desc>
    <FName>imagecolorallocate</FName>
    <Desc>int imagecolorallocate ( resource $image , int $red , int $green , int $blue )
Returns a color identifier representing the color composed of the given RGB components. 
imagecolorallocate() must be called to create each color that is to be used in the image represented by image. 
Note: 
The first call to imagecolorallocate() fills the background color in palette-based images - images created using imagecreate().
</Desc>
    <FName>imagecolorallocatealpha</FName>
    <Desc>int imagecolorallocatealpha ( resource $image , int $red , int $green , int $blue , int $alpha )
imagecolorallocatealpha() behaves identically to imagecolorallocate() with the addition of the transparency parameter alpha.
</Desc>
    <FName>imagecolorat</FName>
    <Desc>int imagecolorat ( resource $image , int $x , int $y )
Returns the index of the color of the pixel at the specified location in the image specified by image. 
If the image is a truecolor image, this function returns the RGB value of that pixel as integer. Use bitshifting and masking to access the distinct red, green and blue component values:
</Desc>
    <FName>imagecolorclosest</FName>
    <Desc>int imagecolorclosest ( resource $image , int $red , int $green , int $blue )
Returns the index of the color in the palette of the image which is "closest" to the specified RGB value. 
The "distance" between the desired color and each color in the palette is calculated as if the RGB values represented points in three-dimensional space. 
If you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.
</Desc>
    <FName>imagecolorclosestalpha</FName>
    <Desc>int imagecolorclosestalpha ( resource $image , int $red , int $green , int $blue , int $alpha )
Returns the index of the color in the palette of the image which is "closest" to the specified RGB value and alpha level.
</Desc>
    <FName>imagecolorclosesthwb</FName>
    <Desc>int imagecolorclosesthwb ( resource $image , int $red , int $green , int $blue )
Get the index of the color which has the hue, white and blackness nearest the given color.
</Desc>
    <FName>imagecolordeallocate</FName>
    <Desc>bool imagecolordeallocate ( resource $image , int $color )
De-allocates a color previously allocated with imagecolorallocate() or imagecolorallocatealpha().
</Desc>
    <FName>imagecolorexact</FName>
    <Desc>int imagecolorexact ( resource $image , int $red , int $green , int $blue )
Returns the index of the specified color in the palette of the image. 
If you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.
</Desc>
    <FName>imagecolorexactalpha</FName>
    <Desc>int imagecolorexactalpha ( resource $image , int $red , int $green , int $blue , int $alpha )
Returns the index of the specified color+alpha in the palette of the image.
</Desc>
    <FName>imagecolormatch</FName>
    <Desc>bool imagecolormatch ( resource $image1 , resource $image2 )
Makes the colors of the palette version of an image more closely match the true color version.
</Desc>
    <FName>imagecolorresolve</FName>
    <Desc>int imagecolorresolve ( resource $image , int $red , int $green , int $blue )
This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative. 
If you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.
</Desc>
    <FName>imagecolorresolvealpha</FName>
    <Desc>int imagecolorresolvealpha ( resource $image , int $red , int $green , int $blue , int $alpha )
This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.
</Desc>
    <FName>imagecolorset</FName>
    <Desc>void imagecolorset ( resource $image , int $index , int $red , int $green , int $blue [, int $alpha = 0 ] )
This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill.
</Desc>
    <FName>imagecolorsforindex</FName>
    <Desc>array imagecolorsforindex ( resource $image , int $index )
Gets the color for a specified index.
</Desc>
    <FName>imagecolorstotal</FName>
    <Desc>int imagecolorstotal ( resource $image )
Returns the number of colors in an image palette.
</Desc>
    <FName>imagecolortransparent</FName>
    <Desc>int imagecolortransparent ( resource $image [, int $color ] )
Sets the transparent color in the given image.
</Desc>
    <FName>imageconvolution</FName>
    <Desc>bool imageconvolution ( resource $image , array $matrix , float $div , float $offset )
Applies a convolution matrix on the image, using the given coefficient and offset.
</Desc>
    <FName>imagecopy</FName>
    <Desc>bool imagecopy ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h )
Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.
</Desc>
    <FName>imagecopymerge</FName>
    <Desc>bool imagecopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )
Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.
</Desc>
    <FName>imagecopymergegray</FName>
    <Desc>bool imagecopymergegray ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )
imagecopymergegray() copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y. 
This function is identical to imagecopymerge() except that when merging it preserves the hue of the source by converting the destination pixels to gray scale before the copy operation.
</Desc>
    <FName>imagecopyresampled</FName>
    <Desc>bool imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )
imagecopyresampled() copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity. 
In other words, imagecopyresampled() will take a rectangular area from src_image of width src_w and height src_h at position (src_x,src_y) and place it in a rectangular area of dst_image of width dst_w and height dst_h at position (dst_x,dst_y). 
If the source and destination coordinates and width and heights differ, appropriate stretching or shrinking of the image fragment will be performed. The coordinates refer to the upper left corner. This function can be used to copy regions within the same image (if dst_image is the same as src_image) but if the regions overlap the results will be unpredictable.
</Desc>
    <FName>imagecopyresized</FName>
    <Desc>bool imagecopyresized ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )
imagecopyresized() copies a rectangular portion of one image to another image. dst_image is the destination image, src_image is the source image identifier. 
In other words, imagecopyresized() will take a rectangular area from src_image of width src_w and height src_h at position (src_x,src_y) and place it in a rectangular area of dst_image of width dst_w and height dst_h at position (dst_x,dst_y). 
If the source and destination coordinates and width and heights differ, appropriate stretching or shrinking of the image fragment will be performed. The coordinates refer to the upper left corner. This function can be used to copy regions within the same image (if dst_image is the same as src_image) but if the regions overlap the results will be unpredictable.
</Desc>
    <FName>imagecreate</FName>
    <Desc>resource imagecreate ( int $width , int $height )
imagecreate() returns an image identifier representing a blank image of specified size. 
In general, we recommend the use of imagecreatetruecolor() instead of imagecreate() so that image processing occurs on the highest quality image possible. If you want to output a palette image, then imagetruecolortopalette() should be called immediately before saving the image with imagepng() or imagegif().
</Desc>
    <FName>imagecreatefrombmp</FName>
    <Desc>resource imagecreatefrombmp ( string $filename )
imagecreatefrombmp() returns an image identifier representing the image obtained from the given filename. 
Tip
A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.
</Desc>
    <FName>imagecreatefromgd</FName>
    <Desc>resource imagecreatefromgd ( string $filename )
Create a new image from GD file or URL. 
Tip
A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.
</Desc>
    <FName>imagecreatefromgd2</FName>
    <Desc>resource imagecreatefromgd2 ( string $filename )
Create a new image from GD2 file or URL. 
Tip
A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.
</Desc>
    <FName>imagecreatefromgd2part</FName>
    <Desc>resource imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height )
Create a new image from a given part of GD2 file or URL. 
Tip
A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.
</Desc>
    <FName>imagecreatefromgif</FName>
    <Desc>resource imagecreatefromgif ( string $filename )
imagecreatefromgif() returns an image identifier representing the image obtained from the given filename. 
Caution 
When reading GIF files into memory, only the first frame is returned in the image resource pointer. The size of the image is not necessarily what is reported by getimagesize(). 
Tip
A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.
</Desc>
    <FName>imagecreatefromjpeg</FName>
    <Desc>resource imagecreatefromjpeg ( string $filename )
imagecreatefromjpeg() returns an image identifier representing the image obtained from the given filename. 
Tip
A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.
</Desc>
    <FName>imagecreatefrompng</FName>
    <Desc>resource imagecreatefrompng ( string $filename )
imagecreatefrompng() returns an image identifier representing the image obtained from the given filename. 
Tip
A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.
</Desc>
    <FName>imagecreatefromstring</FName>
    <Desc>resource imagecreatefromstring ( string $image )
imagecreatefromstring() returns an image identifier representing the image obtained from the given image. These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, BMP, WBMP, and GD2.
</Desc>
    <FName>imagecreatefromwbmp</FName>
    <Desc>resource imagecreatefromwbmp ( string $filename )
imagecreatefromwbmp() returns an image identifier representing the image obtained from the given filename. 
Tip
A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.
</Desc>
    <FName>imagecreatefromwebp</FName>
    <Desc>resource imagecreatefromwebp ( string $filename )
imagecreatefromwebp() returns an image identifier representing the image obtained from the given filename. 
Tip
A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.
</Desc>
    <FName>imagecreatefromxbm</FName>
    <Desc>resource imagecreatefromxbm ( string $filename )
imagecreatefromxbm() returns an image identifier representing the image obtained from the given filename. 
Tip
A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.
</Desc>
    <FName>imagecreatefromxpm</FName>
    <Desc>resource imagecreatefromxpm ( string $filename )
imagecreatefromxpm() returns an image identifier representing the image obtained from the given filename. 
Tip
A URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.
</Desc>
    <FName>imagecreatetruecolor</FName>
    <Desc>resource imagecreatetruecolor ( int $width , int $height )
imagecreatetruecolor() returns an image identifier representing a black image of the specified size.
</Desc>
    <FName>imagecrop</FName>
    <Desc>resource imagecrop ( resource $image , array $rect )
Crops an image to the given rectangular area and returns the resulting image. The given image is not modified.
</Desc>
    <FName>imagecropauto</FName>
    <Desc>resource imagecropauto ( resource $image [, int $mode = -1 [, float $threshold = .5 [, int $color = -1 ]]] )
Automatically crops an image according to the given mode.
</Desc>
    <FName>imagedashedline</FName>
    <Desc>bool imagedashedline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )
This function is deprecated. Use combination of imagesetstyle() and imageline() instead.
</Desc>
    <FName>imagedestroy</FName>
    <Desc>bool imagedestroy ( resource $image )
imagedestroy() frees any memory associated with image image.
</Desc>
    <FName>imageellipse</FName>
    <Desc>bool imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )
Draws an ellipse centered at the specified coordinates.
</Desc>
    <FName>imagefill</FName>
    <Desc>bool imagefill ( resource $image , int $x , int $y , int $color )
Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given color in the image.
</Desc>
    <FName>imagefilledarc</FName>
    <Desc>bool imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style )
Draws a partial arc centered at the specified coordinate in the given image.
</Desc>
    <FName>imagefilledellipse</FName>
    <Desc>bool imagefilledellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )
Draws an ellipse centered at the specified coordinate on the given image.
</Desc>
    <FName>imagefilledpolygon</FName>
    <Desc>bool imagefilledpolygon ( resource $image , array $points , int $num_points , int $color )
imagefilledpolygon() creates a filled polygon in the given image.
</Desc>
    <FName>imagefilledrectangle</FName>
    <Desc>bool imagefilledrectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )
Creates a rectangle filled with color in the given image starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image.
</Desc>
    <FName>imagefilltoborder</FName>
    <Desc>bool imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color )
imagefilltoborder() performs a flood fill whose border color is defined by border. The starting point for the fill is x, y (top left is 0, 0) and the region is filled with color color.
</Desc>
    <FName>imagefilter</FName>
    <Desc>bool imagefilter ( resource $image , int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] )
imagefilter() applies the given filter filtertype on the image.
</Desc>
    <FName>imageflip</FName>
    <Desc>bool imageflip ( resource $image , int $mode )
Flips the image image using the given mode.
</Desc>
    <FName>imagefontheight</FName>
    <Desc>int imagefontheight ( int $font )
Returns the pixel height of a character in the specified font.
</Desc>
    <FName>imagefontwidth</FName>
    <Desc>int imagefontwidth ( int $font )
Returns the pixel width of a character in font.
</Desc>
    <FName>imageftbbox</FName>
    <Desc>array imageftbbox ( float $size , float $angle , string $fontfile , string $text [, array $extrainfo ] )
This function calculates and returns the bounding box in pixels for a FreeType text. 
Note: 
imageftbbox() is an extended variant of imagettfbbox() which additionally supports the extrainfo.
</Desc>
    <FName>imagefttext</FName>
    <Desc>array imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text [, array $extrainfo ] )
Note: 
imagefttext() is an extended variant of imagettftext() which additionally supports the extrainfo.
</Desc>
    <FName>imagegammacorrect</FName>
    <Desc>bool imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma )
Applies gamma correction to the given gd image given an input and an output gamma.
</Desc>
    <FName>imagegd</FName>
    <Desc>bool imagegd ( resource $image [, mixed $to = NULL ] )
Outputs a GD image to the given to.
</Desc>
    <FName>imagegd2</FName>
    <Desc>bool imagegd2 ( resource $image [, mixed $to = NULL [, int $chunk_size = 128 [, int $type = IMG_GD2_RAW ]]] )
Outputs a GD2 image to the given to.
</Desc>
    <FName>imagegetclip</FName>
    <Desc>array imagegetclip ( resource $im )
imagegetclip() retrieves the current clipping rectangle, i.e. the area beyond which no pixels will be drawn.
</Desc>
    <FName>imagegif</FName>
    <Desc>bool imagegif ( resource $image [, mixed $to ] )
imagegif() creates the GIF file in to from the image image. The image argument is the return from the imagecreate() or imagecreatefrom* function. 
The image format will be GIF87a unless the image has been made transparent with imagecolortransparent(), in which case the image format will be GIF89a.
</Desc>
    <FName>imagegrabscreen</FName>
    <Desc>resource imagegrabscreen ( void )
Grabs a screenshot of the whole screen. 
Note: 
This function is only available on Windows.
</Desc>
    <FName>imagegrabwindow</FName>
    <Desc>resource imagegrabwindow ( int $window_handle [, int $client_area = 0 ] )
Grabs a window or its client area using a windows handle (HWND property in COM instance) 
Note: 
This function is only available on Windows.
</Desc>
    <FName>imageinterlace</FName>
    <Desc>int imageinterlace ( resource $image [, int $interlace = 0 ] )
imageinterlace() turns the interlace bit on or off. 
If the interlace bit is set and the image is used as a JPEG image, the image is created as a progressive JPEG.
</Desc>
    <FName>imageistruecolor</FName>
    <Desc>bool imageistruecolor ( resource $image )
imageistruecolor() finds whether the image image is a truecolor image.
</Desc>
    <FName>imagejpeg</FName>
    <Desc>bool imagejpeg ( resource $image [, mixed $to [, int $quality ]] )
imagejpeg() creates a JPEG file from the given image.
</Desc>
    <FName>imagelayereffect</FName>
    <Desc>bool imagelayereffect ( resource $image , int $effect )
Set the alpha blending flag to use layering effects.
</Desc>
    <FName>imageline</FName>
    <Desc>bool imageline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )
Draws a line between the two given points.
</Desc>
    <FName>imageloadfont</FName>
    <Desc>int imageloadfont ( string $file )
imageloadfont() loads a user-defined bitmap and returns its identifier.
</Desc>
    <FName>imageopenpolygon</FName>
    <Desc>bool imageopenpolygon ( resource $image , array $points , int $num_points , int $color )
imageopenpolygon() draws an open polygon on the given image. Contrary to imagepolygon(), no line is drawn between the last and the first point.
</Desc>
    <FName>imagepalettecopy</FName>
    <Desc>void imagepalettecopy ( resource $destination , resource $source )
imagepalettecopy() copies the palette from the source image to the destination image.
</Desc>
    <FName>imagepalettetotruecolor</FName>
    <Desc>bool imagepalettetotruecolor ( resource $src )
Converts a palette based image, created by functions like imagecreate() to a true color image, like imagecreatetruecolor().
</Desc>
    <FName>imagepng</FName>
    <Desc>bool imagepng ( resource $image [, mixed $to [, int $quality [, int $filters ]]] )
Outputs or saves a PNG image from the given image.
</Desc>
    <FName>imagepolygon</FName>
    <Desc>bool imagepolygon ( resource $image , array $points , int $num_points , int $color )
imagepolygon() creates a polygon in the given image.
</Desc>
    <FName>imagepsbbox</FName>
    <Desc>array imagepsbbox ( string $text , resource $font , int $size )
array imagepsbbox ( string $text , resource $font , int $size , int $space , int $tightness , float $angle )
Gives the bounding box of a text rectangle using PostScript Type1 fonts. 
The bounding box is calculated using information available from character metrics, and unfortunately tends to differ slightly from the results achieved by actually rasterizing the text. If the angle is 0 degrees, you can expect the text to need 1 pixel more to every direction.
</Desc>
    <FName>imagepsencodefont</FName>
    <Desc>bool imagepsencodefont ( resource $font_index , string $encodingfile )
Loads a character encoding vector from a file and changes the fonts encoding vector to it. As a PostScript fonts default vector lacks most of the character positions above 127, you'll definitely want to change this if you use a language other than English. 
If you find yourself using this function all the time, a much better way to define the encoding is to set ps.default_encoding in the configuration file to point to the right encoding file and all fonts you load will automatically have the right encoding.
</Desc>
    <FName>imagepsextendfont</FName>
    <Desc>bool imagepsextendfont ( resource $font_index , float $extend )
Extend or condense a font (font_index), if the value of the extend parameter is less than one you will be condensing the font.
</Desc>
    <FName>imagepsfreefont</FName>
    <Desc>bool imagepsfreefont ( resource $font_index )
imagepsfreefont() frees memory used by a PostScript Type 1 font.
</Desc>
    <FName>imagepsloadfont</FName>
    <Desc>resource imagepsloadfont ( string $filename )
Load a PostScript Type 1 font from the given filename.
</Desc>
    <FName>imagepsslantfont</FName>
    <Desc>bool imagepsslantfont ( resource $font_index , float $slant )
Slant a given font.
</Desc>
    <FName>imagepstext</FName>
    <Desc>array imagepstext ( resource $image , string $text , resource $font_index , int $size , int $foreground , int $background , int $x , int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4 ]]]] )
Draws a text on an image using PostScript Type1 fonts. 
Refer to PostScript documentation about fonts and their measuring system if you have trouble understanding how this works.
</Desc>
    <FName>imagerectangle</FName>
    <Desc>bool imagerectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )
imagerectangle() creates a rectangle starting at the specified coordinates.
</Desc>
    <FName>imageresolution</FName>
    <Desc>mixed imageresolution ( resource $image [, int $res_x [, int $res_y ]] )
imageresolution() allows to set and get the resolution of an image in DPI (dots per inch). If none of the optional parameters is given, the current resolution is returned as indexed array. If only res_x is given, the horizontal and vertical resolution are set to this value. If both optional parameters are given, the horizontal and vertical resolution are set to these values, respectively. 
The resolution is only used as meta information when images are read from and written to formats supporting this kind of information (curently PNG and JPEG). It does not affect any drawing operations. The default resolution for new images is 96 DPI.
</Desc>
    <FName>imagerotate</FName>
    <Desc>resource imagerotate ( resource $image , float $angle , int $bgd_color [, int $ignore_transparent = 0 ] )
Rotates the image image using the given angle in degrees. 
The center of rotation is the center of the image, and the rotated image may have different dimensions than the original image.
</Desc>
    <FName>imagesavealpha</FName>
    <Desc>bool imagesavealpha ( resource $image , bool $saveflag )
imagesavealpha() sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images. 
You have to unset alphablending (imagealphablending($im, false)), to use it. 
Alpha channel is not supported by all browsers, if you have problem with your browser, try to load your script with an alpha channel compliant browser, e.g. latest Mozilla.
</Desc>
    <FName>imagescale</FName>
    <Desc>resource imagescale ( resource $image , int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED ]] )
imagescale() scales an image using the given interpolation algorithm.
</Desc>
    <FName>imagesetbrush</FName>
    <Desc>bool imagesetbrush ( resource $image , resource $brush )
imagesetbrush() sets the brush image to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED.
</Desc>
    <FName>imagesetclip</FName>
    <Desc>bool imagesetclip ( resource $im , int $x1 , int $y1 , int $x2 , int $y2 )
imagesetclip() sets the current clipping rectangle, i.e. the area beyond which no pixels will be drawn.
</Desc>
    <FName>imagesetinterpolation</FName>
    <Desc>bool imagesetinterpolation ( resource $image [, int $method = IMG_BILINEAR_FIXED ] )
Sets the interpolation method, setting an interpolation method affects the rendering of various functions in GD, such as the imagerotate() function.
</Desc>
    <FName>imagesetpixel</FName>
    <Desc>bool imagesetpixel ( resource $image , int $x , int $y , int $color )
imagesetpixel() draws a pixel at the specified coordinate.
</Desc>
    <FName>imagesetstyle</FName>
    <Desc>bool imagesetstyle ( resource $image , array $style )
imagesetstyle() sets the style to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special color IMG_COLOR_STYLED or lines of images with color IMG_COLOR_STYLEDBRUSHED.
</Desc>
    <FName>imagesetthickness</FName>
    <Desc>bool imagesetthickness ( resource $image , int $thickness )
imagesetthickness() sets the thickness of the lines drawn when drawing rectangles, polygons, arcs etc. to thickness pixels.
</Desc>
    <FName>imagesettile</FName>
    <Desc>bool imagesettile ( resource $image , resource $tile )
imagesettile() sets the tile image to be used by all region filling functions (such as imagefill() and imagefilledpolygon()) when filling with the special color IMG_COLOR_TILED. 
A tile is an image used to fill an area with a repeated pattern. Any GD image can be used as a tile, and by setting the transparent color index of the tile image with imagecolortransparent(), a tile allows certain parts of the underlying area to shine through can be created. 
Note: 
You need not take special action when you are finished with a tile, but if you destroy the tile image, you must not use the IMG_COLOR_TILED color until you have set a new tile image!
</Desc>
    <FName>imagestring</FName>
    <Desc>bool imagestring ( resource $image , int $font , int $x , int $y , string $string , int $color )
Draws a string at the given coordinates.
</Desc>
    <FName>imagestringup</FName>
    <Desc>bool imagestringup ( resource $image , int $font , int $x , int $y , string $string , int $color )
Draws a string vertically at the given coordinates.
</Desc>
    <FName>imagesx</FName>
    <Desc>int imagesx ( resource $image )
Returns the width of the given image resource.
</Desc>
    <FName>imagesy</FName>
    <Desc>int imagesy ( resource $image )
Returns the height of the given image resource.
</Desc>
    <FName>imagetruecolortopalette</FName>
    <Desc>bool imagetruecolortopalette ( resource $image , bool $dither , int $ncolors )
imagetruecolortopalette() converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality.
</Desc>
    <FName>imagettfbbox</FName>
    <Desc>array imagettfbbox ( float $size , float $angle , string $fontfile , string $text )
This function calculates and returns the bounding box in pixels for a TrueType text. 
Note: 
imageftbbox() is an extended variant of imagettfbbox() which additionally supports the extrainfo.
</Desc>
    <FName>imagettftext</FName>
    <Desc>array imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text )
Writes the given text into the image using TrueType fonts. 
Note: 
imagefttext() is an extended variant of imagettftext() which additionally supports the extrainfo.
</Desc>
    <FName>imagetypes</FName>
    <Desc>int imagetypes ( void )
Returns the image types supported by the current PHP installation.
</Desc>
    <FName>imagewbmp</FName>
    <Desc>bool imagewbmp ( resource $image [, mixed $to [, int $foreground ]] )
imagewbmp() outputs or save a WBMP version of the given image.
</Desc>
    <FName>imagewebp</FName>
    <Desc>bool imagewebp ( resource $image [, mixed $to = NULL [, int $quality = 80 ]] )
Outputs or saves a WebP version of the given image.
</Desc>
    <FName>imagexbm</FName>
    <Desc>bool imagexbm ( resource $image , string $filename [, int $foreground ] )
Outputs or save an XBM version of the given image. 
Note: imagexbm() doesn't apply any padding, so the image width has to be a multiple of 8. This restriction does no longer apply as of PHP 5.6.24 and 7.0.9, respectively.
</Desc>
    <FName>imap_8bit</FName>
    <Desc>string imap_8bit ( string $string )
Convert an 8bit string to a quoted-printable string (according to » RFC2045, section 6.7).
</Desc>
    <FName>imap_alerts</FName>
    <Desc>array imap_alerts ( void )
Returns all of the IMAP alert messages generated since the last imap_alerts() call, or the beginning of the page. 
When imap_alerts() is called, the alert stack is subsequently cleared. The IMAP specification requires that these messages be passed to the user.
</Desc>
    <FName>imap_append</FName>
    <Desc>bool imap_append ( resource $imap_stream , string $mailbox , string $message [, string $options = NULL [, string $internal_date = NULL ]] )
Appends a string message to the specified mailbox.
</Desc>
    <FName>imap_base64</FName>
    <Desc>string imap_base64 ( string $text )
Decodes the given BASE-64 encoded text.
</Desc>
    <FName>imap_binary</FName>
    <Desc>string imap_binary ( string $string )
Convert an 8bit string to a base64 string according to » RFC2045, Section 6.8.
</Desc>
    <FName>imap_body</FName>
    <Desc>string imap_body ( resource $imap_stream , int $msg_number [, int $options = 0 ] )
imap_body() returns the body of the message, numbered msg_number in the current mailbox. 
imap_body() will only return a verbatim copy of the message body. To extract single parts of a multipart MIME-encoded message you have to use imap_fetchstructure() to analyze its structure and imap_fetchbody() to extract a copy of a single body component.
</Desc>
    <FName>imap_bodystruct</FName>
    <Desc>object imap_bodystruct ( resource $imap_stream , int $msg_number , string $section )
Read the structure of a specified body section of a specific message.
</Desc>
    <FName>imap_check</FName>
    <Desc>object imap_check ( resource $imap_stream )
Checks information about the current mailbox.
</Desc>
    <FName>imap_clearflag_full</FName>
    <Desc>bool imap_clearflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = 0 ] )
This function causes a store to delete the specified flag to the flags set for the messages in the specified sequence.
</Desc>
    <FName>imap_close</FName>
    <Desc>bool imap_close ( resource $imap_stream [, int $flag = 0 ] )
Closes the imap stream.
</Desc>
    <FName>imap_create</FName>
    <Desc>This function is an alias of: imap_createmailbox(). 
</Desc>
    <FName>imap_createmailbox</FName>
    <Desc>bool imap_createmailbox ( resource $imap_stream , string $mailbox )
Creates a new mailbox specified by mailbox.
</Desc>
    <FName>imap_delete</FName>
    <Desc>bool imap_delete ( resource $imap_stream , int $msg_number [, int $options = 0 ] )
Marks messages listed in msg_number for deletion. Messages marked for deletion will stay in the mailbox until either imap_expunge() is called or imap_close() is called with the optional parameter CL_EXPUNGE.
</Desc>
    <FName>imap_deletemailbox</FName>
    <Desc>bool imap_deletemailbox ( resource $imap_stream , string $mailbox )
Deletes the specified mailbox.
</Desc>
    <FName>imap_errors</FName>
    <Desc>array imap_errors ( void )
Gets all of the IMAP errors (if any) that have occurred during this page request or since the error stack was reset. 
When imap_errors() is called, the error stack is subsequently cleared.
</Desc>
    <FName>imap_expunge</FName>
    <Desc>bool imap_expunge ( resource $imap_stream )
Deletes all the messages marked for deletion by imap_delete(), imap_mail_move(), or imap_setflag_full().
</Desc>
    <FName>imap_fetch_overview</FName>
    <Desc>array imap_fetch_overview ( resource $imap_stream , string $sequence [, int $options = 0 ] )
This function fetches mail headers for the given sequence and returns an overview of their contents.
</Desc>
    <FName>imap_fetchbody</FName>
    <Desc>string imap_fetchbody ( resource $imap_stream , int $msg_number , string $section [, int $options = 0 ] )
Fetch of a particular section of the body of the specified messages. Body parts are not decoded by this function.
</Desc>
    <FName>imap_fetchheader</FName>
    <Desc>string imap_fetchheader ( resource $imap_stream , int $msg_number [, int $options = 0 ] )
This function causes a fetch of the complete, unfiltered » RFC2822 format header of the specified message.
</Desc>
    <FName>imap_fetchmime</FName>
    <Desc>string imap_fetchmime ( resource $imap_stream , int $msg_number , string $section [, int $options = 0 ] )
Fetch the MIME headers of a particular section of the body of the specified messages.
</Desc>
    <FName>imap_fetchstructure</FName>
    <Desc>object imap_fetchstructure ( resource $imap_stream , int $msg_number [, int $options = 0 ] )
Fetches all the structured information for a given message.
</Desc>
    <FName>imap_fetchtext</FName>
    <Desc>This function is an alias of: imap_body(). 
</Desc>
    <FName>imap_gc</FName>
    <Desc>bool imap_gc ( resource $imap_stream , int $caches )
Purges the cache of entries of a specific type.
</Desc>
    <FName>imap_get_quota</FName>
    <Desc>array imap_get_quota ( resource $imap_stream , string $quota_root )
Retrieve the quota level settings, and usage statics per mailbox. 
For a non-admin user version of this function, please see the imap_get_quotaroot() function of PHP.
</Desc>
    <FName>imap_get_quotaroot</FName>
    <Desc>array imap_get_quotaroot ( resource $imap_stream , string $quota_root )
Retrieve the quota settings per user. The limit value represents the total amount of space allowed for this user's total mailbox usage. The usage value represents the user's current total mailbox capacity.
</Desc>
    <FName>imap_getacl</FName>
    <Desc>array imap_getacl ( resource $imap_stream , string $mailbox )
Gets the ACL for a given mailbox.
</Desc>
    <FName>imap_getmailboxes</FName>
    <Desc>array imap_getmailboxes ( resource $imap_stream , string $ref , string $pattern )
Gets information on the mailboxes.
</Desc>
    <FName>imap_getsubscribed</FName>
    <Desc>array imap_getsubscribed ( resource $imap_stream , string $ref , string $pattern )
Gets information about the subscribed mailboxes. 
Identical to imap_getmailboxes(), except that it only returns mailboxes that the user is subscribed to.
</Desc>
    <FName>imap_header</FName>
    <Desc>This function is an alias of: imap_headerinfo(). 
</Desc>
    <FName>imap_headerinfo</FName>
    <Desc>object imap_headerinfo ( resource $imap_stream , int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL ]]] )
Gets information about the given message number by reading its headers.
</Desc>
    <FName>imap_headers</FName>
    <Desc>array imap_headers ( resource $imap_stream )
Returns headers for all messages in a mailbox.
</Desc>
    <FName>imap_last_error</FName>
    <Desc>string imap_last_error ( void )
Gets the full text of the last IMAP error message that occurred on the current page. The error stack is untouched; calling imap_last_error() subsequently, with no intervening errors, will return the same error.
</Desc>
    <FName>imap_list</FName>
    <Desc>array imap_list ( resource $imap_stream , string $ref , string $pattern )
Read the list of mailboxes.
</Desc>
    <FName>imap_listmailbox</FName>
    <Desc>This function is an alias of: imap_list(). 
</Desc>
    <FName>imap_listscan</FName>
    <Desc>array imap_listscan ( resource $imap_stream , string $ref , string $pattern , string $content )
Returns an array containing the names of the mailboxes that have content in the text of the mailbox. 
This function is similar to imap_listmailbox(), but it will additionally check for the presence of the string content inside the mailbox data.
</Desc>
    <FName>imap_listsubscribed</FName>
    <Desc>This function is an alias of: imap_lsub(). 
</Desc>
    <FName>imap_lsub</FName>
    <Desc>array imap_lsub ( resource $imap_stream , string $ref , string $pattern )
Gets an array of all the mailboxes that you have subscribed.
</Desc>
    <FName>imap_mail_compose</FName>
    <Desc>string imap_mail_compose ( array $envelope , array $body )
Create a MIME message based on the given envelope and body sections.
</Desc>
    <FName>imap_mail_copy</FName>
    <Desc>bool imap_mail_copy ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] )
Copies mail messages specified by msglist to specified mailbox.
</Desc>
    <FName>imap_mail_move</FName>
    <Desc>bool imap_mail_move ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] )
Moves mail messages specified by msglist to the specified mailbox.
</Desc>
    <FName>imap_mail</FName>
    <Desc>bool imap_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL ]]]] )
This function allows sending of emails with correct handling of Cc and Bcc receivers. 
The parameters to, cc and bcc are all strings and are all parsed as » RFC822 address lists.
</Desc>
    <FName>imap_mailboxmsginfo</FName>
    <Desc>object imap_mailboxmsginfo ( resource $imap_stream )
Checks the current mailbox status on the server. It is similar to imap_status(), but will additionally sum up the size of all messages in the mailbox, which will take some additional time to execute.
</Desc>
    <FName>imap_mime_header_decode</FName>
    <Desc>array imap_mime_header_decode ( string $text )
Decodes MIME message header extensions that are non ASCII text (see » RFC2047).
</Desc>
    <FName>imap_msgno</FName>
    <Desc>int imap_msgno ( resource $imap_stream , int $uid )
Returns the message sequence number for the given uid. 
This function is the inverse of imap_uid().
</Desc>
    <FName>imap_mutf7_to_utf8</FName>
    <Desc>string imap_mutf7_to_utf8 ( string $in )
Decode a modified UTF-7 (as specified in RFC 2060, section 5.1.3) string to UTF-8. 
Note: 
This function is only available, if libcclient exports utf8_to_mutf7().
</Desc>
    <FName>imap_num_msg</FName>
    <Desc>int imap_num_msg ( resource $imap_stream )
Gets the number of messages in the current mailbox.
</Desc>
    <FName>imap_num_recent</FName>
    <Desc>int imap_num_recent ( resource $imap_stream )
Gets the number of recent messages in the current mailbox.
</Desc>
    <FName>imap_open</FName>
    <Desc>resource imap_open ( string $mailbox , string $username , string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL ]]] )
Opens an IMAP stream to a mailbox. 
This function can also be used to open streams to POP3 and NNTP servers, but some functions and features are only available on IMAP servers.
</Desc>
    <FName>imap_ping</FName>
    <Desc>bool imap_ping ( resource $imap_stream )
imap_ping() pings the stream to see if it's still active. It may discover new mail; this is the preferred method for a periodic "new mail check" as well as a "keep alive" for servers which have inactivity timeout.
</Desc>
    <FName>imap_qprint</FName>
    <Desc>string imap_qprint ( string $string )
Convert a quoted-printable string to an 8 bit string according to » RFC2045, section 6.7.
</Desc>
    <FName>imap_rename</FName>
    <Desc>This function is an alias of: imap_renamemailbox(). 
</Desc>
    <FName>imap_renamemailbox</FName>
    <Desc>bool imap_renamemailbox ( resource $imap_stream , string $old_mbox , string $new_mbox )
This function renames on old mailbox to new mailbox (see imap_open() for the format of mbox names).
</Desc>
    <FName>imap_reopen</FName>
    <Desc>bool imap_reopen ( resource $imap_stream , string $mailbox [, int $options = 0 [, int $n_retries = 0 ]] )
Reopens the specified stream to a new mailbox on an IMAP or NNTP server.
</Desc>
    <FName>imap_rfc822_parse_adrlist</FName>
    <Desc>array imap_rfc822_parse_adrlist ( string $address , string $default_host )
Parses the address string as defined in » RFC2822 and for each address.
</Desc>
    <FName>imap_rfc822_parse_headers</FName>
    <Desc>object imap_rfc822_parse_headers ( string $headers [, string $defaulthost = "UNKNOWN" ] )
Gets an object of various header elements, similar to imap_header().
</Desc>
    <FName>imap_rfc822_write_address</FName>
    <Desc>string imap_rfc822_write_address ( string $mailbox , string $host , string $personal )
Returns a properly formatted email address as defined in » RFC2822 given the needed information.
</Desc>
    <FName>imap_savebody</FName>
    <Desc>bool imap_savebody ( resource $imap_stream , mixed $file , int $msg_number [, string $part_number = "" [, int $options = 0 ]] )
Saves a part or the whole body of the specified message.
</Desc>
    <FName>imap_scan</FName>
    <Desc>This function is an alias of: imap_listscan(). 
</Desc>
    <FName>imap_scanmailbox</FName>
    <Desc>This function is an alias of: imap_listscan(). 
</Desc>
    <FName>imap_search</FName>
    <Desc>array imap_search ( resource $imap_stream , string $criteria [, int $options = SE_FREE [, string $charset = NULL ]] )
This function performs a search on the mailbox currently opened in the given IMAP stream. 
For example, to match all unanswered messages sent by Mom, you'd use: "UNANSWERED FROM mom". Searches appear to be case insensitive. This list of criteria is from a reading of the UW c-client source code and may be incomplete or inaccurate (see also » RFC2060, section 6.4.4).
</Desc>
    <FName>imap_set_quota</FName>
    <Desc>bool imap_set_quota ( resource $imap_stream , string $quota_root , int $quota_limit )
Sets an upper limit quota on a per mailbox basis.
</Desc>
    <FName>imap_setacl</FName>
    <Desc>bool imap_setacl ( resource $imap_stream , string $mailbox , string $id , string $rights )
Sets the ACL for a giving mailbox.
</Desc>
    <FName>imap_setflag_full</FName>
    <Desc>bool imap_setflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = NIL ] )
Causes a store to add the specified flag to the flags set for the messages in the specified sequence.
</Desc>
    <FName>imap_sort</FName>
    <Desc>array imap_sort ( resource $imap_stream , int $criteria , int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NULL ]]] )
Gets and sorts message numbers by the given parameters.
</Desc>
    <FName>imap_status</FName>
    <Desc>object imap_status ( resource $imap_stream , string $mailbox , int $options )
Gets status information about the given mailbox.
</Desc>
    <FName>imap_subscribe</FName>
    <Desc>bool imap_subscribe ( resource $imap_stream , string $mailbox )
Subscribe to a new mailbox.
</Desc>
    <FName>imap_thread</FName>
    <Desc>array imap_thread ( resource $imap_stream [, int $options = SE_FREE ] )
Gets a tree of a threaded message.
</Desc>
    <FName>imap_timeout</FName>
    <Desc>mixed imap_timeout ( int $timeout_type [, int $timeout = -1 ] )
Sets or fetches the imap timeout.
</Desc>
    <FName>imap_uid</FName>
    <Desc>int imap_uid ( resource $imap_stream , int $msg_number )
This function returns the UID for the given message sequence number. An UID is a unique identifier that will not change over time while a message sequence number may change whenever the content of the mailbox changes. 
This function is the inverse of imap_msgno().
</Desc>
    <FName>imap_undelete</FName>
    <Desc>bool imap_undelete ( resource $imap_stream , int $msg_number [, int $flags = 0 ] )
Removes the deletion flag for a specified message, which is set by imap_delete() or imap_mail_move().
</Desc>
    <FName>imap_unsubscribe</FName>
    <Desc>bool imap_unsubscribe ( resource $imap_stream , string $mailbox )
Unsubscribe from the specified mailbox.
</Desc>
    <FName>imap_utf7_decode</FName>
    <Desc>string imap_utf7_decode ( string $text )
Decodes modified UTF-7 text into ISO-8859-1 string. 
This function is needed to decode mailbox names that contain certain characters which are not in range of printable ASCII characters.
</Desc>
    <FName>imap_utf7_encode</FName>
    <Desc>string imap_utf7_encode ( string $data )
Converts data to modified UTF-7 text. 
This is needed to encode mailbox names that contain certain characters which are not in range of printable ASCII characters.
</Desc>
    <FName>imap_utf8_to_mutf7</FName>
    <Desc>string imap_utf8_to_mutf7 ( string $in )
Encode a UTF-8 string to modified UTF-7 (as specified in RFC 2060, section 5.1.3). 
Note: 
This function is only available, if libcclient exports utf8_to_mutf7().
</Desc>
    <FName>imap_utf8</FName>
    <Desc>string imap_utf8 ( string $mime_encoded_text )
Converts the given mime_encoded_text to UTF-8.
</Desc>
    <FName>implode</FName>
    <Desc>string implode ( string $glue , array $pieces )
string implode ( array $pieces )
Join array elements with a glue string. 
Note: 
implode() can, for historical reasons, accept its parameters in either order. For consistency with explode(), however, it may be less confusing to use the documented order of arguments.
</Desc>
    <FName>import_request_variables</FName>
    <Desc>bool import_request_variables ( string $types [, string $prefix ] )
Imports GET/POST/Cookie variables into the global scope. It is useful if you disabled register_globals, but would like to see some variables in the global scope. 
If you're interested in importing other variables into the global scope, such as $_SERVER, consider using extract(). 
Warning
This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.
</Desc>
    <FName>in_array</FName>
    <Desc>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )
Searches haystack for needle using loose comparison unless strict is set.
</Desc>
    <FName>inclued_get_data</FName>
    <Desc>array inclued_get_data ( void )
Get the inclued data.
</Desc>
    <FName>inet_ntop</FName>
    <Desc>string inet_ntop ( string $in_addr )
This function converts a 32bit IPv4, or 128bit IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate string representation.
</Desc>
    <FName>inet_pton</FName>
    <Desc>string inet_pton ( string $address )
This function converts a human readable IPv4 or IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate 32bit or 128bit binary structure.
</Desc>
    <FName>inflate_add</FName>
    <Desc>string inflate_add ( resource $context , string $encoded_data [, int $flush_mode = ZLIB_SYNC_FLUSH ] )
Incrementally inflates encoded data in the specified context. 
Limitation: header information from GZIP compressed data are not made available.
</Desc>
    <FName>inflate_get_read_len</FName>
    <Desc>int inflate_get_read_len ( resource $resource )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>inflate_get_status</FName>
    <Desc>int inflate_get_status ( resource $resource )
Usually returns either ZLIB_OK or ZLIB_STREAM_END.
</Desc>
    <FName>inflate_init</FName>
    <Desc>resource inflate_init ( int $encoding [, array $options = array() ] )
Initialize an incremental inflate context with the specified encoding.
</Desc>
    <FName>ingres_autocommit_state</FName>
    <Desc>bool ingres_autocommit_state ( resource $link )
ingres_autocommit_state() is called to determine whether the current link has autocommit enabled or not.
</Desc>
    <FName>ingres_autocommit</FName>
    <Desc>bool ingres_autocommit ( resource $link )
ingres_autocommit() is called before opening a transaction (before the first call to ingres_query() or just after a call to ingres_rollback() or ingres_commit()) to switch the autocommit mode of the server on or off (when the script begins the autocommit mode is off). 
When autocommit mode is on, every query is automatically committed by the server, as if ingres_commit() was called after every call to ingres_query(). To see if autocommit is enabled use, ingres_autocommit_state(). 
By default Ingres will rollback any uncommitted transactions at the end of a request. Use this function or ingres_commit() to ensure your data is committed to the database.
</Desc>
    <FName>ingres_charset</FName>
    <Desc>string ingres_charset ( resource $link )
ingres_charset() is called to determine the character set being used by the Ingres client, from II_CHARSETxx (where xx is the installation code). 
Note: 
You can override the value returned by using the function putenv(). Changing the value of II_CHARSETxx in a running Ingres installation can cause data corruption.
</Desc>
    <FName>ingres_close</FName>
    <Desc>bool ingres_close ( resource $link )
ingres_close() closes the connection to the Ingres server that is associated with the specified link. 
ingres_close() is usually unnecessary, as it will not close persistent connections and all non-persistent connections are automatically closed at the end of the script.
</Desc>
    <FName>ingres_commit</FName>
    <Desc>bool ingres_commit ( resource $link )
ingres_commit() commits the currently open transaction, making all changes made to the database permanent. 
This closes the transaction. A new transaction can be opened by sending a query with ingres_query(). 
You can also have the server commit automatically after every query by calling ingres_autocommit() before opening the transaction. 
By default Ingres will roll back any uncommitted transactions at the end of a request. Use this function or ingres_autocommit() to ensure your that data is committed to the database.
</Desc>
    <FName>ingres_connect</FName>
    <Desc>resource ingres_connect ([ string $database [, string $username [, string $password [, array $options ]]]] )
ingres_connect() opens a connection with the given Ingres database. 
The connection is closed when the script ends or when ingres_close() is called on this link.
</Desc>
    <FName>ingres_cursor</FName>
    <Desc>string ingres_cursor ( resource $result )
Returns a string with the active cursor name. If no cursor is active then NULL is returned.
</Desc>
    <FName>ingres_errno</FName>
    <Desc>int ingres_errno ([ resource $link ] )
Returns an integer containing the last error number. If no error was reported 0 is returned. 
If a link resource is passed to ingres_errno() it returns the last error recorded for the link. If no link is passed, then ingres_errno() returns the last error reported using the default link. 
The function, ingres_errno(), should always be called after executing a database query. Calling another function before ingres_errno() is called will reset or change any error code from the last Ingres function call.
</Desc>
    <FName>ingres_error</FName>
    <Desc>string ingres_error ([ resource $link ] )
Returns a string containing the last error, or NULL if no error has occurred. 
If a link resource is passed to ingres_error(), it returns the last error recorded for the link. If no link is passed then ingres_error() returns the last error reported using the default link. 
The function, ingres_error(), should always be called after executing any database query. Calling another function before ingres_error() is called will reset or change any error message from the last Ingres function call.
</Desc>
    <FName>ingres_errsqlstate</FName>
    <Desc>string ingres_errsqlstate ([ resource $link ] )
Returns a string containing the last SQLSTATE, or NULL if no error has occurred. 
If a link resource is passed to ingres_errsqlstate(), it returns the last error recorded for the link. If no link is passed, then ingres_errsqlstate() returns the last error reported using the default link. 
The function, ingres_errsqlstate(), should always be called after executing any database query. Calling another function before ingres_errsqlstate() is called will reset or change any error message from the last Ingres function call.
</Desc>
    <FName>ingres_escape_string</FName>
    <Desc>string ingres_escape_string ( resource $link , string $source_string )
ingres_escape_string() is used to escape certain characters within a string before it is sent to the database server.
</Desc>
    <FName>ingres_execute</FName>
    <Desc>bool ingres_execute ( resource $result [, array $params [, string $types ]] )
Execute a query prepared using ingres_prepare(). 
Note: Related Configurations

See also the ingres.describe, ingres.scrollable and ingres.utf8 directives in Runtime Configuration.
</Desc>
    <FName>ingres_fetch_array</FName>
    <Desc>array ingres_fetch_array ( resource $result [, int $result_type ] )
This function is an extended version of ingres_fetch_row(). In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys. 
If two or more columns of the result have the same field names, the last column will take precedence. To access the another column or columns of the same name, you must use the numeric index of the column or make an alias for the column. For example: 
<?php

$result = ingres_query($link, "select ap_place as city, ap_ccode as country from airport where ap_iatacode = 'VLL'"); 
$result = ingres_fetch_array($result);
$foo = $result["city"];
$bar = $result["country"];

?> 
With regard to speed, the function is identical to ingres_fetch_object(), and almost as quick as ingres_fetch_row() (the difference is insignificant). 
By default, arrays created by ingres_fetch_array() start from position 1 and not 0 as with other DBMS extensions. The starting position can be adjusted to 0 using the configuration parameter ingres.array_index_start. 
Note: Related Configurations

See also the ingres.array_index_start, ingres.fetch_buffer_size and ingres.utf8 directives in Runtime Configuration.
</Desc>
    <FName>ingres_fetch_assoc</FName>
    <Desc>array ingres_fetch_assoc ( resource $result )
This function is stores the data fetched from a query executed using ingres_query() in an associative array, using the field names as keys. 
With regard to speed, the function is identical to ingres_fetch_object(), and almost as quick as ingres_fetch_row() (the difference is insignificant). 
By default, arrays created by ingres_fetch_assoc() start from position 1 and not 0 as with other DBMS extensions. The starting position can be adjusted to 0 using the configuration parameter ingres.array_index_start. 
Note: Related Configurations

See also the ingres.array_index_start, ingres.fetch_buffer_size and ingres.utf8 directives in Runtime Configuration.
</Desc>
    <FName>ingres_fetch_object</FName>
    <Desc>object ingres_fetch_object ( resource $result [, int $result_type ] )
This function is similar to ingres_fetch_array(), with one difference - an object is returned instead of an array. Indirectly, this means that you can access the data only by the field names and not by their offsets (numbers are illegal property names). 
With regard to speed, the function is identical to ingres_fetch_array(), and almost as quick as ingres_fetch_row() (the difference is insignificant). 
Note: Related Configurations

See also the ingres.fetch_buffer_size and ingres.utf8 directives in Runtime Configuration.
</Desc>
    <FName>ingres_fetch_proc_return</FName>
    <Desc>int ingres_fetch_proc_return ( resource $result )
This function is used to retrieve the return value following the execution of an Ingres database procedure (stored procedure). 
Note: 
If used with a row-producing procedure, this function should be called after all the rows from the procedure have been fetched using ingres_fetch_array(), ingres_fetch_object() or ingres_fetch_row(). This function will eliminate any rows yet to be fetched should there be any left over.
</Desc>
    <FName>ingres_fetch_row</FName>
    <Desc>array ingres_fetch_row ( resource $result )
ingres_fetch_row() returns an array that corresponds to the fetched row, or FALSE if there are no more rows. Each result column is stored in an array offset, starting at offset 1. 
Subsequent calls to ingres_fetch_row() return the next row in the result set, or FALSE if there are no more rows. 
By default, arrays created by ingres_fetch_row() start from position 1 and not 0 as with other DBMS extensions. The starting position can be adjusted to 0 using the configuration parameter ingres.array_index_start. 
Note: Related Configurations

See also the ingres.array_index_start, ingres.fetch_buffer_size and ingres.utf8 directives in Runtime Configuration.
</Desc>
    <FName>ingres_field_length</FName>
    <Desc>int ingres_field_length ( resource $result , int $index )
ingres_field_length() returns the length of a field. This is the number of bytes the server uses to store the field. For detailed information, see the Ingres OpenAPI User Guide, Appendix "Data Types" in the Ingres documentation. 
Note: Related Configurations

See ingres.array_index_start in Runtime Configuration
</Desc>
    <FName>ingres_field_name</FName>
    <Desc>string ingres_field_name ( resource $result , int $index )
ingres_field_name() returns the name of a field in a query result. 
Note: Related Configurations

See ingres.array_index_start in Runtime Configuration
</Desc>
    <FName>ingres_field_nullable</FName>
    <Desc>bool ingres_field_nullable ( resource $result , int $index )
Test if a field is nullable. 
Note: Related Configurations

See ingres.array_index_start in Runtime Configuration
</Desc>
    <FName>ingres_field_precision</FName>
    <Desc>int ingres_field_precision ( resource $result , int $index )
ingres_field_precision() returns the precision of a field. This value is used only for decimal, float, and money SQL data types. For detailed information, see the Ingres OpenAPI User Guide, Appendix "Data Types" in the Ingres documentation. 
Note: Related Configurations

See ingres.array_index_start in Runtime Configuration
</Desc>
    <FName>ingres_field_scale</FName>
    <Desc>int ingres_field_scale ( resource $result , int $index )
ingres_field_scale() returns the scale of a field. This value is used only for the decimal SQL data type. For detailed information, see the Ingres OpenAPI User Guide, Appendix "Data Types" in the Ingres documentation. 
Note: Related Configurations

See ingres.array_index_start in Runtime Configuration
</Desc>
    <FName>ingres_field_type</FName>
    <Desc>string ingres_field_type ( resource $result , int $index )
Get the type of a field in a query result. 
Note: Related Configurations

See ingres.array_index_start in Runtime Configuration
</Desc>
    <FName>ingres_free_result</FName>
    <Desc>bool ingres_free_result ( resource $result )
</Desc>
    <FName>ingres_next_error</FName>
    <Desc>bool ingres_next_error ([ resource $link ] )
Get the next Ingres error for the last executed query. Each call to ingres_next_error() can be followed by a call to ingres_errno(), ingres_error() or ingres_errsqlstate() to get the respective error number, error text, or SQL STATE. While ingres_next_error() returns TRUE, there are more errors to fetch.
</Desc>
    <FName>ingres_num_fields</FName>
    <Desc>int ingres_num_fields ( resource $result )
ingres_num_fields() returns the number of fields in the results returned by the Ingres server after a call to ingres_query().
</Desc>
    <FName>ingres_num_rows</FName>
    <Desc>int ingres_num_rows ( resource $result )
This function primarily is meant to get the number of rows modified in the database. However, it can be used to retrieve the number of rows to fetch for a SELECT statement. 
Note: 
If scrollable cursors are disabled and this function is called before using ingres_fetch_array(), ingres_fetch_object(), or ingres_fetch_row(), the server will delete the result's data and the script will be unable to get them. 
Instead, you should retrieve the result's data using one of these fetch functions in a loop until it returns FALSE, indicating that no more results are available.
</Desc>
    <FName>ingres_pconnect</FName>
    <Desc>resource ingres_pconnect ([ string $database [, string $username [, string $password [, array $options ]]]] )
Open a persistent connection to an Ingres database. 
There are only two differences between this function and ingres_connect(): First, when connecting, the function will initially try to find a (persistent) link that is already opened with the same parameters. If one is found, an identifier for it will be returned instead of opening a new connection. Second, the connection to the Ingres server will not be closed when the execution of the script ends. Instead, the link will remain open for future use (ingres_close() will not close links established by ingres_pconnect()). This type of link is therefore called "persistent".
</Desc>
    <FName>ingres_prepare</FName>
    <Desc>mixed ingres_prepare ( resource $link , string $query )
Prepares a query for execution by ingres_execute(). 
The query becomes part of the currently open transaction. If there is no open transaction, ingres_query() opens a new transaction. To close the transaction, you can call either ingres_commit() to commit the changes made to the database or ingres_rollback() to cancel these changes. When the script ends, any open transaction is rolled back (by calling ingres_rollback()). You can also use ingres_autocommit() before opening a new transaction to have every SQL query immediately committed. 
Note: Related Configurations

See also the ingres.describe, ingres.scrollable and ingres.utf8 directives in Runtime Configuration.
</Desc>
    <FName>ingres_query</FName>
    <Desc>mixed ingres_query ( resource $link , string $query [, array $params [, string $types ]] )
ingres_query() sends the given query to the Ingres server. 
The query becomes part of the currently open transaction. If there is no open transaction, ingres_query() opens a new transaction. To close the transaction, you can call either ingres_commit() to commit the changes made to the database or ingres_rollback() to cancel these changes. When the script ends, any open transaction is rolled back (by calling ingres_rollback()). You can also use ingres_autocommit() before opening a new transaction to have every SQL query immediately committed. 
Note: Related Configurations

See also the ingres.describe, ingres.scrollable and ingres.utf8 directives in Runtime Configuration
</Desc>
    <FName>ingres_result_seek</FName>
    <Desc>bool ingres_result_seek ( resource $result , int $position )
This function is used to position the cursor associated with the result resource before issuing a fetch. If ingres.array_index_start is set to 0 then the first row is 0 else it is 1. ingres_result_seek() can be used only with queries that make use of scrollable cursors. It cannot be used with ingres_unbuffered_query(). 
Note: Related Configurations

See also the ingres.scrollable and ingres.array_index_start directives in Runtime Configuration.
</Desc>
    <FName>ingres_rollback</FName>
    <Desc>bool ingres_rollback ( resource $link )
ingres_rollback() rolls back the currently open transaction, actually cancelling all changes made to the database during the transaction. 
This closes the transaction. A new transaction can be opened by sending a query with ingres_query().
</Desc>
    <FName>ingres_set_environment</FName>
    <Desc>bool ingres_set_environment ( resource $link , array $options )
ingres_set_environment() is called to set environmental options that affect the output of certain values from Ingres, such as the timezone, date format, decimal character separator, and float precision.
</Desc>
    <FName>ingres_unbuffered_query</FName>
    <Desc>mixed ingres_unbuffered_query ( resource $link , string $query [, array $params [, string $types ]] )
ingres_unbuffered_query() sends the given query to the Ingres server. 
The query becomes part of the currently open transaction. If there is no open transaction, ingres_unbuffered_query() opens a new transaction. To close the transaction, you can call either ingres_commit() to commit the changes made to the database or ingres_rollback() to cancel these changes. When the script ends, any open transaction is rolled back (by calling ingres_rollback()). You can also use ingres_autocommit() before opening a new transaction to have every SQL query immediately committed. Ingres allows only a single unbuffered statement to be active at any one time. The extension will close any active unbuffered statements before executing any SQL. In addition you cannot use ingres_result_seek() to position the row before fetching. 
Note: Related Configurations

See also the ingres.describe and ingres.utf8 directives in Runtime Configuration.
</Desc>
    <FName>ini_alter</FName>
    <Desc>This function is an alias of: ini_set(). 
</Desc>
    <FName>ini_get_all</FName>
    <Desc>array ini_get_all ([ string $extension [, bool $details = TRUE ]] )
Returns all the registered configuration options.
</Desc>
    <FName>ini_get</FName>
    <Desc>string ini_get ( string $varname )
Returns the value of the configuration option on success.
</Desc>
    <FName>ini_restore</FName>
    <Desc>void ini_restore ( string $varname )
Restores a given configuration option to its original value.
</Desc>
    <FName>ini_set</FName>
    <Desc>string ini_set ( string $varname , string $newvalue )
Sets the value of the given configuration option. The configuration option will keep this new value during the script's execution, and will be restored at the script's ending.
</Desc>
    <FName>inotify_add_watch</FName>
    <Desc>int inotify_add_watch ( resource $inotify_instance , string $pathname , int $mask )
inotify_add_watch() adds a new watch or modify an existing watch for the file or directory specified in pathname. 
Using inotify_add_watch() on a watched object replaces the existing watch. Using the IN_MASK_ADD constant adds (OR) events to the existing watch.
</Desc>
    <FName>inotify_init</FName>
    <Desc>resource inotify_init ( void )
Initialize an inotify instance for use with inotify_add_watch()
</Desc>
    <FName>inotify_queue_len</FName>
    <Desc>int inotify_queue_len ( resource $inotify_instance )
This function allows to know if inotify_read() will block or not. If a number upper than zero is returned, there are pending events and inotify_read() will not block.
</Desc>
    <FName>inotify_read</FName>
    <Desc>array inotify_read ( resource $inotify_instance )
Read inotify events from an inotify instance.
</Desc>
    <FName>inotify_rm_watch</FName>
    <Desc>bool inotify_rm_watch ( resource $inotify_instance , int $watch_descriptor )
inotify_rm_watch() removes the watch watch_descriptor from the inotify instance inotify_instance.
</Desc>
    <FName>intdiv</FName>
    <Desc>int intdiv ( int $dividend , int $divisor )
Returns the integer quotient of the division of dividend by divisor.
</Desc>
    <FName>interface_exists</FName>
    <Desc>bool interface_exists ( string $interface_name [, bool $autoload = TRUE ] )
Checks if the given interface has been defined.
</Desc>
    <FName>intl_error_name</FName>
    <Desc>string intl_error_name ( int $error_code )
Return ICU error code name.
</Desc>
    <FName>intl_get_error_code</FName>
    <Desc>int intl_get_error_code ( void )
Useful to handle errors occurred in static methods when there's no object to get error code from.
</Desc>
    <FName>intl_get_error_message</FName>
    <Desc>string intl_get_error_message ( void )
Get error message from last internationalization function called.
</Desc>
    <FName>intl_is_failure</FName>
    <Desc>bool intl_is_failure ( int $error_code )
</Desc>
    <FName>intval</FName>
    <Desc>int intval ( mixed $var [, int $base = 10 ] )
Returns the integer value of var, using the specified base for the conversion (the default is base 10). intval() should not be used on objects, as doing so will emit an E_NOTICE level error and return 1.
</Desc>
    <FName>ip2long</FName>
    <Desc>int ip2long ( string $ip_address )
The function ip2long() generates an long integer representation of IPv4 Internet network address from its Internet standard format (dotted string) representation. 
ip2long() will also work with non-complete IP addresses. Read » http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/commtrf2/inet_addr.htm for more info.
</Desc>
    <FName>iptcembed</FName>
    <Desc>mixed iptcembed ( string $iptcdata , string $jpeg_file_name [, int $spool = 0 ] )
Embeds binary IPTC data into a JPEG image.
</Desc>
    <FName>iptcparse</FName>
    <Desc>array iptcparse ( string $iptcblock )
Parses an » IPTC block into its single tags.
</Desc>
    <FName>is_a</FName>
    <Desc>bool is_a ( object $object , string $class_name [, bool $allow_string = FALSE ] )
Checks if the given object is of this class or has this class as one of its parents.
</Desc>
    <FName>is_array</FName>
    <Desc>bool is_array ( mixed $var )
Finds whether the given variable is an array.
</Desc>
    <FName>is_bool</FName>
    <Desc>bool is_bool ( mixed $var )
Finds whether the given variable is a boolean.
</Desc>
    <FName>is_callable</FName>
    <Desc>bool is_callable ( mixed $var [, bool $syntax_only = FALSE [, string &$callable_name ]] )
Verify that the contents of a variable can be called as a function. This can check that a simple variable contains the name of a valid function, or that an array contains a properly encoded object and function name.
</Desc>
    <FName>is_countable</FName>
    <Desc>bool is_countable ( mixed $var )
Verify that the contents of a variable is an array or an object implementing Countable
</Desc>
    <FName>is_dir</FName>
    <Desc>bool is_dir ( string $filename )
Tells whether the given filename is a directory.
</Desc>
    <FName>is_double</FName>
    <Desc>This function is an alias of: is_float(). 
</Desc>
    <FName>is_executable</FName>
    <Desc>bool is_executable ( string $filename )
Tells whether the filename is executable.
</Desc>
    <FName>is_file</FName>
    <Desc>bool is_file ( string $filename )
Tells whether the given file is a regular file.
</Desc>
    <FName>is_finite</FName>
    <Desc>bool is_finite ( float $val )
Checks whether val is a legal finite on this platform.
</Desc>
    <FName>is_float</FName>
    <Desc>bool is_float ( mixed $var )
Finds whether the type of the given variable is float. 
Note: 
To test if a variable is a number or a numeric string (such as form input, which is always a string), you must use is_numeric().
</Desc>
    <FName>is_infinite</FName>
    <Desc>bool is_infinite ( float $val )
Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform.
</Desc>
    <FName>is_int</FName>
    <Desc>bool is_int ( mixed $var )
Finds whether the type of the given variable is integer. 
Note: 
To test if a variable is a number or a numeric string (such as form input, which is always a string), you must use is_numeric().
</Desc>
    <FName>is_integer</FName>
    <Desc>This function is an alias of: is_int(). 
</Desc>
    <FName>is_iterable</FName>
    <Desc>bool is_iterable ( mixed $var )
Verify that the contents of a variable is accepted by the iterable pseudo-type, i.e. that it is an array or an object implementing Traversable
</Desc>
    <FName>is_link</FName>
    <Desc>bool is_link ( string $filename )
Tells whether the given file is a symbolic link.
</Desc>
    <FName>is_long</FName>
    <Desc>This function is an alias of: is_int(). 
</Desc>
    <FName>is_nan</FName>
    <Desc>bool is_nan ( float $val )
Checks whether val is 'not a number', like the result of acos(1.01).
</Desc>
    <FName>is_null</FName>
    <Desc>bool is_null ( mixed $var )
Finds whether the given variable is NULL.
</Desc>
    <FName>is_numeric</FName>
    <Desc>bool is_numeric ( mixed $var )
Finds whether the given variable is numeric. Numeric strings consist of optional sign, any number of digits, optional decimal part and optional exponential part. Thus +0123.45e6 is a valid numeric value. Hexadecimal (e.g. 0xf4c3b00c) and binary (e.g. 0b10100111001) notation is not allowed.
</Desc>
    <FName>is_object</FName>
    <Desc>bool is_object ( mixed $var )
Finds whether the given variable is an object.
</Desc>
    <FName>is_readable</FName>
    <Desc>bool is_readable ( string $filename )
Tells whether a file exists and is readable.
</Desc>
    <FName>is_real</FName>
    <Desc>This function is an alias of: is_float(). 
</Desc>
    <FName>is_resource</FName>
    <Desc>bool is_resource ( mixed $var )
Finds whether the given variable is a resource.
</Desc>
    <FName>is_scalar</FName>
    <Desc>bool is_scalar ( mixed $var )
Finds whether the given variable is a scalar. 
Scalar variables are those containing an integer, float, string or boolean. Types array, object and resource are not scalar. 
Note: 
is_scalar() does not consider resource type values to be scalar as resources are abstract datatypes which are currently based on integers. This implementation detail should not be relied upon, as it may change. 
Note: 
is_scalar() does not consider NULL to be scalar.
</Desc>
    <FName>is_soap_fault</FName>
    <Desc>bool is_soap_fault ( mixed $object )
This function is useful to check if the SOAP call failed, but without using exceptions. To use it, create a SoapClient object with the exceptions option set to zero or FALSE. In this case, the SOAP method will return a special SoapFault object which encapsulates the fault details (faultcode, faultstring, faultactor and faultdetails). 
If exceptions is not set then SOAP call will throw an exception on error. is_soap_fault() checks if the given parameter is a SoapFault object.
</Desc>
    <FName>is_string</FName>
    <Desc>bool is_string ( mixed $var )
Finds whether the type of the given variable is string.
</Desc>
    <FName>is_subclass_of</FName>
    <Desc>bool is_subclass_of ( mixed $object , string $class_name [, bool $allow_string = TRUE ] )
Checks if the given object has the class class_name as one of its parents or implements it.
</Desc>
    <FName>is_tainted</FName>
    <Desc>bool is_tainted ( string $string )
Checks whether a string is tainted
</Desc>
    <FName>is_uploaded_file</FName>
    <Desc>bool is_uploaded_file ( string $filename )
Returns TRUE if the file named by filename was uploaded via HTTP POST. This is useful to help ensure that a malicious user hasn't tried to trick the script into working on files upon which it should not be working--for instance, /etc/passwd. 
This sort of check is especially important if there is any chance that anything done with uploaded files could reveal their contents to the user, or even to other users on the same system. 
For proper working, the function is_uploaded_file() needs an argument like $_FILES['userfile']['tmp_name'], - the name of the uploaded file on the client's machine $_FILES['userfile']['name'] does not work.
</Desc>
    <FName>is_writable</FName>
    <Desc>bool is_writable ( string $filename )
Returns TRUE if the filename exists and is writable. The filename argument may be a directory name allowing you to check if a directory is writable. 
Keep in mind that PHP may be accessing the file as the user id that the web server runs as (often 'nobody'). Safe mode limitations are not taken into account.
</Desc>
    <FName>is_writeable</FName>
    <Desc>This function is an alias of: is_writable(). 
</Desc>
    <FName>isset</FName>
    <Desc>bool isset ( mixed $var [, mixed $... ] )
Determine if a variable is set and is not NULL. 
If a variable has been unset with unset(), it will no longer be set. isset() will return FALSE if testing a variable that has been set to NULL. Also note that a null character ("\0") is not equivalent to the PHP NULL constant. 
If multiple parameters are supplied then isset() will return TRUE only if all of the parameters are set. Evaluation goes from left to right and stops as soon as an unset variable is encountered.
</Desc>
    <FName>iterator_apply</FName>
    <Desc>int iterator_apply ( Traversable $iterator , callable $function [, array $args = NULL ] )
Calls a function for every element in an iterator.
</Desc>
    <FName>iterator_count</FName>
    <Desc>int iterator_count ( Traversable $iterator )
Count the elements in an iterator. iterator_count() is not guaranteed to retain the current position of the iterator.
</Desc>
    <FName>iterator_to_array</FName>
    <Desc>array iterator_to_array ( Traversable $iterator [, bool $use_keys = TRUE ] )
Copy the elements of an iterator into an array.
</Desc>
    <FName>jddayofweek</FName>
    <Desc>mixed jddayofweek ( int $julianday [, int $mode = CAL_DOW_DAYNO ] )
Returns the day of the week. Can return a string or an integer depending on the mode.
</Desc>
    <FName>jdmonthname</FName>
    <Desc>string jdmonthname ( int $julianday , int $mode )
Returns a string containing a month name. mode tells this function which calendar to convert the Julian Day Count to, and what type of month names are to be returned. Calendar modesModeMeaningValues
CAL_MONTH_GREGORIAN_SHORTGregorian - abbreviatedJan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec
CAL_MONTH_GREGORIAN_LONGGregorianJanuary, February, March, April, May, June, July, August, September, October, November, December
CAL_MONTH_JULIAN_SHORTJulian - abbreviatedJan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec
CAL_MONTH_JULIAN_LONGJulianJanuary, February, March, April, May, June, July, August, September, October, November, December
CAL_MONTH_JEWISHJewishTishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan, Tammuz, Av, Elul
CAL_MONTH_FRENCHFrench RepublicanVendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra
</Desc>
    <FName>jdtofrench</FName>
    <Desc>string jdtofrench ( int $juliandaycount )
Converts a Julian Day Count to the French Republican Calendar.
</Desc>
    <FName>jdtogregorian</FName>
    <Desc>string jdtogregorian ( int $julianday )
Converts Julian Day Count to a string containing the Gregorian date in the format of "month/day/year".
</Desc>
    <FName>jdtojewish</FName>
    <Desc>string jdtojewish ( int $juliandaycount [, bool $hebrew = FALSE [, int $fl = 0 ]] )
Converts a Julian Day Count to the Jewish Calendar.
</Desc>
    <FName>jdtojulian</FName>
    <Desc>string jdtojulian ( int $julianday )
Converts Julian Day Count to a string containing the Julian Calendar Date in the format of "month/day/year".
</Desc>
    <FName>jdtounix</FName>
    <Desc>int jdtounix ( int $jday )
This function will return a Unix timestamp corresponding to the Julian Day given in jday or FALSE if jday is not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588 <= jday <= 2465342 ). The time returned is UTC.
</Desc>
    <FName>jewishtojd</FName>
    <Desc>int jewishtojd ( int $month , int $day , int $year )
Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful. The Jewish calendar has been in use for several thousand years, but in the early days there was no formula to determine the start of a month. A new month was started when the new moon was first observed.
</Desc>
    <FName>join</FName>
    <Desc>This function is an alias of: implode(). 
</Desc>
    <FName>jpeg2wbmp</FName>
    <Desc>bool jpeg2wbmp ( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )
Converts a JPEG file into a WBMP file.
</Desc>
    <FName>json_decode</FName>
    <Desc>mixed json_decode ( string $json [, bool $assoc = FALSE [, int $depth = 512 [, int $options = 0 ]]] )
Takes a JSON encoded string and converts it into a PHP variable.
</Desc>
    <FName>json_encode</FName>
    <Desc>string json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] )
Returns a string containing the JSON representation of the supplied value. 
The encoding is affected by the supplied options and additionally the encoding of float values depends on the value of serialize_precision.
</Desc>
    <FName>json_last_error_msg</FName>
    <Desc>string json_last_error_msg ( void )
</Desc>
    <FName>json_last_error</FName>
    <Desc>int json_last_error ( void )
Returns the last error (if any) occurred during the last JSON encoding/decoding.
</Desc>
    <FName>judy_type</FName>
    <Desc>int judy_type ( Judy $array )
judy_type() return an integer corresponding to the Judy type of the specified Judy array.
</Desc>
    <FName>judy_version</FName>
    <Desc>string judy_version ( void )
Return a string of the PHP Judy version. If the return value is not used, the string will be printed.
</Desc>
    <FName>juliantojd</FName>
    <Desc>int juliantojd ( int $month , int $day , int $year )
Valid Range for Julian Calendar 4713 B.C. to 9999 A.D. 
Although this function can handle dates all the way back to 4713 B.C., such use may not be meaningful. The calendar was created in 46 B.C., but the details did not stabilize until at least 8 A.D., and perhaps as late at the 4th century. Also, the beginning of a year varied from one culture to another - not all accepted January as the first month. 
Caution 
Remember, the current calendar system being used worldwide is the Gregorian calendar. gregoriantojd() can be used to convert such dates to their Julian Day count.
</Desc>
    <FName>kadm5_chpass_principal</FName>
    <Desc>bool kadm5_chpass_principal ( resource $handle , string $principal , string $password )
kadm5_chpass_principal() sets the new password password for the principal.
</Desc>
    <FName>kadm5_create_principal</FName>
    <Desc>bool kadm5_create_principal ( resource $handle , string $principal [, string $password [, array $options ]] )
Creates a principal with the given password.
</Desc>
    <FName>kadm5_delete_principal</FName>
    <Desc>bool kadm5_delete_principal ( resource $handle , string $principal )
Removes the principal from the Kerberos database.
</Desc>
    <FName>kadm5_destroy</FName>
    <Desc>bool kadm5_destroy ( resource $handle )
Closes the connection to the admin server and releases all related resources.
</Desc>
    <FName>kadm5_flush</FName>
    <Desc>bool kadm5_flush ( resource $handle )
Flush all changes to the Kerberos database, leaving the connection to the Kerberos admin server open.
</Desc>
    <FName>kadm5_get_policies</FName>
    <Desc>array kadm5_get_policies ( resource $handle )
Gets an array containing the policies's names.
</Desc>
    <FName>kadm5_get_principal</FName>
    <Desc>array kadm5_get_principal ( resource $handle , string $principal )
Gets the principal's entries from the Kerberos database.
</Desc>
    <FName>kadm5_get_principals</FName>
    <Desc>array kadm5_get_principals ( resource $handle )
kadm5_get_principals() returns an array containing the principals's names.
</Desc>
    <FName>kadm5_init_with_password</FName>
    <Desc>resource kadm5_init_with_password ( string $admin_server , string $realm , string $principal , string $password )
Opens a connection with the KADM5 library using the principal and the given password to obtain initial credentials from the admin_server.
</Desc>
    <FName>kadm5_modify_principal</FName>
    <Desc>bool kadm5_modify_principal ( resource $handle , string $principal , array $options )
Modifies a principal according to the given options.
</Desc>
    <FName>key_exists</FName>
    <Desc>This function is an alias of: array_key_exists(). 
</Desc>
    <FName>key</FName>
    <Desc>mixed key ( array $array )
key() returns the index element of the current array position.
</Desc>
    <FName>krsort</FName>
    <Desc>bool krsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )
Sorts an array by key in reverse order, maintaining key to data correlations. This is useful mainly for associative arrays.
</Desc>
    <FName>ksort</FName>
    <Desc>bool ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] )
Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays.
</Desc>
    <FName>lcfirst</FName>
    <Desc>string lcfirst ( string $str )
Returns a string with the first character of str lowercased if that character is alphabetic. 
Note that 'alphabetic' is determined by the current locale. For instance, in the default "C" locale characters such as umlaut-a (a) will not be converted.
</Desc>
    <FName>lcg_value</FName>
    <Desc>float lcg_value ( void )
lcg_value() returns a pseudo random number in the range of (0, 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes. 
Caution
This function does not generate cryptographically secure values, and should not be used for cryptographic purposes. If you need a cryptographically secure value, consider using random_int(), random_bytes(), or openssl_random_pseudo_bytes() instead.
</Desc>
    <FName>lchgrp</FName>
    <Desc>bool lchgrp ( string $filename , mixed $group )
Attempts to change the group of the symlink filename to group. 
Only the superuser may change the group of a symlink arbitrarily; other users may change the group of a symlink to any group of which that user is a member.
</Desc>
    <FName>lchown</FName>
    <Desc>bool lchown ( string $filename , mixed $user )
Attempts to change the owner of the symlink filename to user user. 
Only the superuser may change the owner of a symlink.
</Desc>
    <FName>ldap_8859_to_t61</FName>
    <Desc>string ldap_8859_to_t61 ( string $value )
Translate ISO-8859 characters to t61 characters. 
This function is useful if you have to talk to a legacy LDAPv2 server.
</Desc>
    <FName>ldap_add</FName>
    <Desc>bool ldap_add ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] )
Add entries in the LDAP directory.
</Desc>
    <FName>ldap_bind</FName>
    <Desc>bool ldap_bind ( resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL ]] )
Binds to the LDAP directory with specified RDN and password.
</Desc>
    <FName>ldap_close</FName>
    <Desc>This function is an alias of: ldap_unbind(). 
</Desc>
    <FName>ldap_compare</FName>
    <Desc>mixed ldap_compare ( resource $link_identifier , string $dn , string $attribute , string $value [, array $serverctrls ] )
Compare value of attribute with value of same attribute in an LDAP directory entry.
</Desc>
    <FName>ldap_connect</FName>
    <Desc>resource ldap_connect ([ string $host = NULL [, int $port = 389 ]] )
Creates an LDAP link identifier and checks whether the given host and port are plausible. 
Note: This function does not open a connection. It checks whether the given parameters are plausible and can be used to open a connection as soon as one is needed.
</Desc>
    <FName>ldap_control_paged_result_response</FName>
    <Desc>bool ldap_control_paged_result_response ( resource $link , resource $result [, string &$cookie [, int &$estimated ]] )
Retrieve the pagination information send by the server.
</Desc>
    <FName>ldap_control_paged_result</FName>
    <Desc>bool ldap_control_paged_result ( resource $link , int $pagesize [, bool $iscritical = FALSE [, string $cookie = "" ]] )
Enable LDAP pagination by sending the pagination control (page size, cookie...).
</Desc>
    <FName>ldap_count_entries</FName>
    <Desc>int ldap_count_entries ( resource $link_identifier , resource $result_identifier )
Returns the number of entries stored in the result of previous search operations.
</Desc>
    <FName>ldap_delete</FName>
    <Desc>bool ldap_delete ( resource $link_identifier , string $dn [, array $serverctrls ] )
Deletes a particular entry in LDAP directory.
</Desc>
    <FName>ldap_dn2ufn</FName>
    <Desc>string ldap_dn2ufn ( string $dn )
Turns the specified dn, into a more user-friendly form, stripping off type names.
</Desc>
    <FName>ldap_err2str</FName>
    <Desc>string ldap_err2str ( int $errno )
Returns the string error message explaining the error number errno. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.
</Desc>
    <FName>ldap_errno</FName>
    <Desc>int ldap_errno ( resource $link_identifier )
Returns the standardized error number returned by the last LDAP command. This number can be converted into a textual error message using ldap_err2str().
</Desc>
    <FName>ldap_error</FName>
    <Desc>string ldap_error ( resource $link_identifier )
Returns the string error message explaining the error generated by the last LDAP command for the given link_identifier. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check. 
Unless you lower your warning level in your php.ini sufficiently or prefix your LDAP commands with @ (at) characters to suppress warning output, the errors generated will also show up in your HTML output.
</Desc>
    <FName>ldap_escape</FName>
    <Desc>string ldap_escape ( string $value [, string $ignore [, int $flags ]] )
Escapes value for use in the context implied by flags.
</Desc>
    <FName>ldap_exop_passwd</FName>
    <Desc>mixed ldap_exop_passwd ( resource $link [, string $user [, string $oldpw [, string $newpw [, array &$serverctrls ]]]] )
Performs a PASSWD extended operation.
</Desc>
    <FName>ldap_exop_refresh</FName>
    <Desc>int ldap_exop_refresh ( resource $link , string $dn , int $ttl )
Performs a Refresh extended operation and returns the data.
</Desc>
    <FName>ldap_exop_whoami</FName>
    <Desc>string ldap_exop_whoami ( resource $link )
Performs a WHOAMI extended operation and returns the data.
</Desc>
    <FName>ldap_exop</FName>
    <Desc>mixed ldap_exop ( resource $link , string $reqoid [, string $reqdata [, array $servercontrols [, string &$retdata [, string &$retoid ]]]] )
Performs an extended operation on the specified link with reqoid the OID of the operation and reqdata the data.
</Desc>
    <FName>ldap_explode_dn</FName>
    <Desc>array ldap_explode_dn ( string $dn , int $with_attrib )
Splits the DN returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as Relative Distinguished Name, or RDN.
</Desc>
    <FName>ldap_first_attribute</FName>
    <Desc>string ldap_first_attribute ( resource $link_identifier , resource $result_entry_identifier )
Gets the first attribute in the given entry. Remaining attributes are retrieved by calling ldap_next_attribute() successively. 
Similar to reading entries, attributes are also read one by one from a particular entry.
</Desc>
    <FName>ldap_first_entry</FName>
    <Desc>resource ldap_first_entry ( resource $link_identifier , resource $result_identifier )
Returns the entry identifier for first entry in the result. This entry identifier is then supplied to ldap_next_entry() routine to get successive entries from the result. 
Entries in the LDAP result are read sequentially using the ldap_first_entry() and ldap_next_entry() functions.
</Desc>
    <FName>ldap_first_reference</FName>
    <Desc>resource ldap_first_reference ( resource $link , resource $result )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ldap_free_result</FName>
    <Desc>bool ldap_free_result ( resource $result_identifier )
Frees up the memory allocated internally to store the result. All result memory will be automatically freed when the script terminates. 
Typically all the memory allocated for the LDAP result gets freed at the end of the script. In case the script is making successive searches which return large result sets, ldap_free_result() could be called to keep the runtime memory usage by the script low.
</Desc>
    <FName>ldap_get_attributes</FName>
    <Desc>array ldap_get_attributes ( resource $link_identifier , resource $result_entry_identifier )
Reads attributes and values from an entry in the search result. 
Having located a specific entry in the directory, you can find out what information is held for that entry by using this call. You would use this call for an application which "browses" directory entries and/or where you do not know the structure of the directory entries. In many applications you will be searching for a specific attribute such as an email address or a surname, and won't care what other data is held. 
return_value["count"] = number of attributes in the entry
return_value[0] = first attribute
return_value[n] = nth attribute

return_value["attribute"]["count"] = number of values for attribute
return_value["attribute"][0] = first value of the attribute
return_value["attribute"][i] = (i+1)th value of the attribute
</Desc>
    <FName>ldap_get_dn</FName>
    <Desc>string ldap_get_dn ( resource $link_identifier , resource $result_entry_identifier )
Finds out the DN of an entry in the result.
</Desc>
    <FName>ldap_get_entries</FName>
    <Desc>array ldap_get_entries ( resource $link_identifier , resource $result_identifier )
Reads multiple entries from the given result, and then reading the attributes and multiple values.
</Desc>
    <FName>ldap_get_option</FName>
    <Desc>bool ldap_get_option ( resource $link_identifier , int $option , mixed &$retval )
Sets retval to the value of the specified option.
</Desc>
    <FName>ldap_get_values_len</FName>
    <Desc>array ldap_get_values_len ( resource $link_identifier , resource $result_entry_identifier , string $attribute )
Reads all the values of the attribute in the entry in the result. 
This function is used exactly like ldap_get_values() except that it handles binary data and not string data.
</Desc>
    <FName>ldap_get_values</FName>
    <Desc>array ldap_get_values ( resource $link_identifier , resource $result_entry_identifier , string $attribute )
Reads all the values of the attribute in the entry in the result. 
This call needs a result_entry_identifier, so needs to be preceded by one of the ldap search calls and one of the calls to get an individual entry. 
You application will either be hard coded to look for certain attributes (such as "surname" or "mail") or you will have to use the ldap_get_attributes() call to work out what attributes exist for a given entry.
</Desc>
    <FName>ldap_list</FName>
    <Desc>resource ldap_list ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls ]]]]]] )
Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_ONELEVEL. 
LDAP_SCOPE_ONELEVEL means that the search should only return information that is at the level immediately below the base_dn given in the call. (Equivalent to typing "ls" and getting a list of files and folders in the current working directory.)
</Desc>
    <FName>ldap_mod_add</FName>
    <Desc>bool ldap_mod_add ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] )
Adds one or more attribute values to the specified dn. To add a whole new object see ldap_add() function.
</Desc>
    <FName>ldap_mod_del</FName>
    <Desc>bool ldap_mod_del ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] )
Removes one or more attribute values from the specified dn. Object deletions are done by the ldap_delete() function.
</Desc>
    <FName>ldap_mod_replace</FName>
    <Desc>bool ldap_mod_replace ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] )
Replaces one or more attributes from the specified dn. It may also add or remove attributes.
</Desc>
    <FName>ldap_modify_batch</FName>
    <Desc>bool ldap_modify_batch ( resource $link_identifier , string $dn , array $entry [, array $serverctrls ] )
Modifies an existing entry in the LDAP directory. Allows detailed specification of the modifications to perform.
</Desc>
    <FName>ldap_modify</FName>
    <Desc>This function is an alias of: ldap_mod_replace(). 
See Also
ldap_rename() - Modify the name of an entry 
</Desc>
    <FName>ldap_next_attribute</FName>
    <Desc>string ldap_next_attribute ( resource $link_identifier , resource $result_entry_identifier )
Retrieves the attributes in an entry. The first call to ldap_next_attribute() is made with the result_entry_identifier returned from ldap_first_attribute().
</Desc>
    <FName>ldap_next_entry</FName>
    <Desc>resource ldap_next_entry ( resource $link_identifier , resource $result_entry_identifier )
Retrieve the entries stored in the result. Successive calls to the ldap_next_entry() return entries one by one till there are no more entries. The first call to ldap_next_entry() is made after the call to ldap_first_entry() with the result_entry_identifier as returned from the ldap_first_entry().
</Desc>
    <FName>ldap_next_reference</FName>
    <Desc>resource ldap_next_reference ( resource $link , resource $entry )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ldap_parse_exop</FName>
    <Desc>bool ldap_parse_exop ( resource $link , resource $result [, string &$retdata [, string &$retoid ]] )
Parse LDAP extended operation data from result object result
</Desc>
    <FName>ldap_parse_reference</FName>
    <Desc>bool ldap_parse_reference ( resource $link , resource $entry , array &$referrals )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ldap_parse_result</FName>
    <Desc>bool ldap_parse_result ( resource $link , resource $result , int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals [, array &$serverctrls ]]]] )
Parses an LDAP search result.
</Desc>
    <FName>ldap_read</FName>
    <Desc>resource ldap_read ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls ]]]]]] )
Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the directory.
</Desc>
    <FName>ldap_rename</FName>
    <Desc>bool ldap_rename ( resource $link_identifier , string $dn , string $newrdn , string $newparent , bool $deleteoldrdn [, array $serverctrls ] )
The entry specified by dn is renamed/moved.
</Desc>
    <FName>ldap_sasl_bind</FName>
    <Desc>bool ldap_sasl_bind ( resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL ]]]]]]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ldap_search</FName>
    <Desc>resource ldap_search ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls ]]]]]] )
Performs the search for a specified filter on the directory with the scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the entire directory. 
From 4.0.5 on it's also possible to do parallel searches. To do this you use an array of link identifiers, rather than a single identifier, as the first argument. If you don't want the same base DN and the same filter for all the searches, you can also use an array of base DNs and/or an array of filters. Those arrays must be of the same size as the link identifier array since the first entries of the arrays are used for one search, the second entries are used for another, and so on. When doing parallel searches an array of search result identifiers is returned, except in case of error, then the entry corresponding to the search will be FALSE. This is very much like the value normally returned, except that a result identifier is always returned when a search was made. There are some rare cases where the normal search returns FALSE while the parallel search returns an identifier.
</Desc>
    <FName>ldap_set_option</FName>
    <Desc>bool ldap_set_option ( resource $link_identifier , int $option , mixed $newval )
Sets the value of the specified option to be newval.
</Desc>
    <FName>ldap_set_rebind_proc</FName>
    <Desc>bool ldap_set_rebind_proc ( resource $link , callable $callback )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ldap_sort</FName>
    <Desc>bool ldap_sort ( resource $link , resource $result , string $sortfilter )
Sort the result of a LDAP search, returned by ldap_search(). 
As this function sorts the returned values on the client side it is possible that you might not get the expected results in case you reach the sizelimit either of the server or defined within ldap_search(). 
Warning
This feature has been DEPRECATED as of PHP 7.0.0. Relying on this feature is highly discouraged.
</Desc>
    <FName>ldap_start_tls</FName>
    <Desc>bool ldap_start_tls ( resource $link )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ldap_t61_to_8859</FName>
    <Desc>string ldap_t61_to_8859 ( string $value )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ldap_unbind</FName>
    <Desc>bool ldap_unbind ( resource $link_identifier )
Unbinds from the LDAP directory.
</Desc>
    <FName>levenshtein</FName>
    <Desc>int levenshtein ( string $str1 , string $str2 )
int levenshtein ( string $str1 , string $str2 , int $cost_ins , int $cost_rep , int $cost_del )
The Levenshtein distance is defined as the minimal number of characters you have to replace, insert or delete to transform str1 into str2. The complexity of the algorithm is O(m*n), where n and m are the length of str1 and str2 (rather good when compared to similar_text(), which is O(max(n,m)**3), but still expensive). 
In its simplest form the function will take only the two strings as parameter and will calculate just the number of insert, replace and delete operations needed to transform str1 into str2. 
A second variant will take three additional parameters that define the cost of insert, replace and delete operations. This is more general and adaptive than variant one, but not as efficient.
</Desc>
    <FName>libxml_clear_errors</FName>
    <Desc>void libxml_clear_errors ( void )
libxml_clear_errors() clears the libxml error buffer.
</Desc>
    <FName>libxml_disable_entity_loader</FName>
    <Desc>bool libxml_disable_entity_loader ([ bool $disable = TRUE ] )
Disable/enable the ability to load external entities.
</Desc>
    <FName>libxml_get_errors</FName>
    <Desc>array libxml_get_errors ( void )
Retrieve array of errors.
</Desc>
    <FName>libxml_get_last_error</FName>
    <Desc>LibXMLError libxml_get_last_error ( void )
Retrieve last error from libxml.
</Desc>
    <FName>libxml_set_external_entity_loader</FName>
    <Desc>bool libxml_set_external_entity_loader ( callable $resolver_function )
Changes the default external entity loader.
</Desc>
    <FName>libxml_set_streams_context</FName>
    <Desc>void libxml_set_streams_context ( resource $streams_context )
Sets the streams context for the next libxml document load or write.
</Desc>
    <FName>libxml_use_internal_errors</FName>
    <Desc>bool libxml_use_internal_errors ([ bool $use_errors = FALSE ] )
libxml_use_internal_errors() allows you to disable standard libxml errors and enable user error handling.
</Desc>
    <FName>link</FName>
    <Desc>bool link ( string $target , string $link )
link() creates a hard link.
</Desc>
    <FName>linkinfo</FName>
    <Desc>int linkinfo ( string $path )
Gets information about a link. 
This function is used to verify if a link (pointed to by path) really exists (using the same method as the S_ISLNK macro defined in stat.h).
</Desc>
    <FName>list</FName>
    <Desc>array list ( mixed $var1 [, mixed $... ] )
Like array(), this is not really a function, but a language construct. list() is used to assign a list of variables in one operation. 
Note: 
Before PHP 7.1.0, list() only worked on numerical arrays and assumes the numerical indices start at 0. 
Warning 
In PHP 5, list() assigns the values starting with the right-most parameter. In PHP 7, list() starts with the left-most parameter. 
If you are using plain variables, you don't have to worry about this. But if you are using arrays with indices you usually expect the order of the indices in the array the same you wrote in the list() from left to right, which is not the case in PHP 5, as it's assigned in the reverse order. 
Generally speaking, it is advisable to avoid relying on a specific order of operation, as this may change again in the future. 
Warning 
Modification of the array during list() execution (e.g. using list($a, $b) = $b) results in undefined behavior.
</Desc>
    <FName>localeconv</FName>
    <Desc>array localeconv ( void )
Returns an associative array containing localized numeric and monetary formatting information.
</Desc>
    <FName>localtime</FName>
    <Desc>array localtime ([ int $timestamp = time() [, bool $is_associative = FALSE ]] )
The localtime() function returns an array identical to that of the structure returned by the C function call.
</Desc>
    <FName>log_cmd_delete</FName>
    <Desc>log_cmd_delete ( array $server , array $writeOptions , array $deleteOptions , array $protocolOptions )
A callable function, used by the log_cmd_delete context option, when deleteing a document 
Note: 
This is not a real function, only a prototype of how the function should be.
</Desc>
    <FName>log_cmd_insert</FName>
    <Desc>log_cmd_insert ( array $server , array $document , array $writeOptions , array $protocolOptions )
A callable function, used by the log_cmd_insert context option, when inserting a document 
Note: 
This is not a real function, only a prototype of how the function should be.
</Desc>
    <FName>log_cmd_update</FName>
    <Desc>log_cmd_update ( array $server , array $writeOptions , array $updateOptions , array $protocolOptions )
A callable function, used by the log_cmd_update context option, when updateing a document 
Note: 
This is not a real function, only a prototype of how the function should be.
</Desc>
    <FName>log_getmore</FName>
    <Desc>log_getmore ( array $server , array $info )
A callable function, used by the log_getmore context option, when executing a GET_MORE operation. 
Note: 
This is not a real function, only a prototype of how the function should be.
</Desc>
    <FName>log_killcursor</FName>
    <Desc>log_killcursor ( array $server , array $info )
A callable function, used by the log_killcursor context option, when reading a killcursor from MongoDB. 
Note: 
This is not a real function, only a prototype of how the function should be.
</Desc>
    <FName>log_reply</FName>
    <Desc>log_reply ( array $server , array $messageHeaders , array $operationHeaders )
A callable function, used by the log_reply context option, when reading a reply from MongoDB. 
Note: 
This is not a real function, only a prototype of how the function should be.
</Desc>
    <FName>log_write_batch</FName>
    <Desc>log_write_batch ( array $server , array $writeOptions , array $batch , array $protocolOptions )
A callable function, used by the log_write_batch context option, when executing a batch operation. 
Note: 
This is not a real function, only a prototype of how the function should be.
</Desc>
    <FName>log</FName>
    <Desc>float log ( float $arg [, float $base = M_E ] )
If the optional base parameter is specified, log() returns logbase arg, otherwise log() returns the natural logarithm of arg.
</Desc>
    <FName>log10</FName>
    <Desc>float log10 ( float $arg )
Returns the base-10 logarithm of arg.
</Desc>
    <FName>log1p</FName>
    <Desc>float log1p ( float $number )
log1p() returns log(1 + number) computed in a way that is accurate even when the value of number is close to zero. log() might only return log(1) in this case due to lack of precision.
</Desc>
    <FName>long2ip</FName>
    <Desc>string long2ip ( int $proper_address )
The function long2ip() generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the long integer representation.
</Desc>
    <FName>lstat</FName>
    <Desc>array lstat ( string $filename )
Gathers the statistics of the file or symbolic link named by filename.
</Desc>
    <FName>ltrim</FName>
    <Desc>string ltrim ( string $str [, string $character_mask ] )
Strip whitespace (or other characters) from the beginning of a string.
</Desc>
    <FName>lzf_compress</FName>
    <Desc>string lzf_compress ( string $data )
lzf_compress() compresses the given data string using LZF encoding.
</Desc>
    <FName>lzf_decompress</FName>
    <Desc>string lzf_decompress ( string $data )
lzf_compress() decompresses the given data string containing lzf encoded data.
</Desc>
    <FName>lzf_optimized_for</FName>
    <Desc>int lzf_optimized_for ( void )
Determines what was LZF extension optimized for during compilation.
</Desc>
    <FName>m_checkstatus</FName>
    <Desc>int m_checkstatus ( resource $conn , int $identifier )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_completeauthorizations</FName>
    <Desc>int m_completeauthorizations ( resource $conn , int &$array )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_connect</FName>
    <Desc>int m_connect ( resource $conn )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_connectionerror</FName>
    <Desc>string m_connectionerror ( resource $conn )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_deletetrans</FName>
    <Desc>bool m_deletetrans ( resource $conn , int $identifier )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_destroyconn</FName>
    <Desc>bool m_destroyconn ( resource $conn )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_destroyengine</FName>
    <Desc>void m_destroyengine ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_getcell</FName>
    <Desc>string m_getcell ( resource $conn , int $identifier , string $column , int $row )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_getcellbynum</FName>
    <Desc>string m_getcellbynum ( resource $conn , int $identifier , int $column , int $row )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_getcommadelimited</FName>
    <Desc>string m_getcommadelimited ( resource $conn , int $identifier )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_getheader</FName>
    <Desc>string m_getheader ( resource $conn , int $identifier , int $column_num )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_initconn</FName>
    <Desc>resource m_initconn ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_initengine</FName>
    <Desc>int m_initengine ( string $location )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_iscommadelimited</FName>
    <Desc>int m_iscommadelimited ( resource $conn , int $identifier )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_maxconntimeout</FName>
    <Desc>bool m_maxconntimeout ( resource $conn , int $secs )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_monitor</FName>
    <Desc>int m_monitor ( resource $conn )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_numcolumns</FName>
    <Desc>int m_numcolumns ( resource $conn , int $identifier )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_numrows</FName>
    <Desc>int m_numrows ( resource $conn , int $identifier )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_parsecommadelimited</FName>
    <Desc>int m_parsecommadelimited ( resource $conn , int $identifier )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_responsekeys</FName>
    <Desc>array m_responsekeys ( resource $conn , int $identifier )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_responseparam</FName>
    <Desc>string m_responseparam ( resource $conn , int $identifier , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_returnstatus</FName>
    <Desc>int m_returnstatus ( resource $conn , int $identifier )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_setblocking</FName>
    <Desc>int m_setblocking ( resource $conn , int $tf )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_setdropfile</FName>
    <Desc>int m_setdropfile ( resource $conn , string $directory )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_setip</FName>
    <Desc>int m_setip ( resource $conn , string $host , int $port )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_setssl_cafile</FName>
    <Desc>int m_setssl_cafile ( resource $conn , string $cafile )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_setssl_files</FName>
    <Desc>int m_setssl_files ( resource $conn , string $sslkeyfile , string $sslcertfile )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_setssl</FName>
    <Desc>int m_setssl ( resource $conn , string $host , int $port )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_settimeout</FName>
    <Desc>int m_settimeout ( resource $conn , int $seconds )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_sslcert_gen_hash</FName>
    <Desc>string m_sslcert_gen_hash ( string $filename )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_transactionssent</FName>
    <Desc>int m_transactionssent ( resource $conn )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_transinqueue</FName>
    <Desc>int m_transinqueue ( resource $conn )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_transkeyval</FName>
    <Desc>int m_transkeyval ( resource $conn , int $identifier , string $key , string $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_transnew</FName>
    <Desc>int m_transnew ( resource $conn )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_transsend</FName>
    <Desc>int m_transsend ( resource $conn , int $identifier )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_uwait</FName>
    <Desc>int m_uwait ( int $microsecs )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_validateidentifier</FName>
    <Desc>int m_validateidentifier ( resource $conn , int $tf )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_verifyconnection</FName>
    <Desc>bool m_verifyconnection ( resource $conn , int $tf )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>m_verifysslcert</FName>
    <Desc>bool m_verifysslcert ( resource $conn , int $tf )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>magic_quotes_runtime</FName>
    <Desc>This function is an alias of: set_magic_quotes_runtime() 
</Desc>
    <FName>mail</FName>
    <Desc>bool mail ( string $to , string $subject , string $message [, mixed $additional_headers [, string $additional_parameters ]] )
Sends an email.
</Desc>
    <FName>mailparse_determine_best_xfer_encoding</FName>
    <Desc>string mailparse_determine_best_xfer_encoding ( resource $fp )
Figures out the best way of encoding the content read from the given file pointer.
</Desc>
    <FName>mailparse_msg_create</FName>
    <Desc>resource mailparse_msg_create ( void )
Create a MIME mail resource.
</Desc>
    <FName>mailparse_msg_extract_part_file</FName>
    <Desc>string mailparse_msg_extract_part_file ( resource $mimemail , mixed $filename [, callable $callbackfunc ] )
Extracts/decodes a message section from the supplied filename. 
The contents of the section will be decoded according to their transfer encoding - base64, quoted-printable and uuencoded text are supported.
</Desc>
    <FName>mailparse_msg_extract_part</FName>
    <Desc>void mailparse_msg_extract_part ( resource $mimemail , string $msgbody [, callable $callbackfunc ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mailparse_msg_extract_whole_part_file</FName>
    <Desc>string mailparse_msg_extract_whole_part_file ( resource $mimemail , string $filename [, callable $callbackfunc ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mailparse_msg_free</FName>
    <Desc>bool mailparse_msg_free ( resource $mimemail )
Frees a MIME resource.
</Desc>
    <FName>mailparse_msg_get_part_data</FName>
    <Desc>array mailparse_msg_get_part_data ( resource $mimemail )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mailparse_msg_get_part</FName>
    <Desc>resource mailparse_msg_get_part ( resource $mimemail , string $mimesection )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mailparse_msg_get_structure</FName>
    <Desc>array mailparse_msg_get_structure ( resource $mimemail )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mailparse_msg_parse_file</FName>
    <Desc>resource mailparse_msg_parse_file ( string $filename )
Parses a file. This is the optimal way of parsing a mail file that you have on disk.
</Desc>
    <FName>mailparse_msg_parse</FName>
    <Desc>bool mailparse_msg_parse ( resource $mimemail , string $data )
Incrementally parse data into the supplied mime mail resource. 
This function allow you to stream portions of a file at a time, rather than read and parse the whole thing.
</Desc>
    <FName>mailparse_rfc822_parse_addresses</FName>
    <Desc>array mailparse_rfc822_parse_addresses ( string $addresses )
Parses a » RFC 822 compliant recipient list, such as that found in the To: header.
</Desc>
    <FName>mailparse_stream_encode</FName>
    <Desc>bool mailparse_stream_encode ( resource $sourcefp , resource $destfp , string $encoding )
Streams data from the source file pointer, apply encoding and write to the destination file pointer.
</Desc>
    <FName>mailparse_uudecode_all</FName>
    <Desc>array mailparse_uudecode_all ( resource $fp )
Scans the data from the given file pointer and extract each embedded uuencoded file into a temporary file.
</Desc>
    <FName>main</FName>
    <Desc>There is no function named main() except in the PHP source. In PHP 4.3.0, a new type of error handling in the PHP source (php_error_docref) was introduced. One feature is to provide links to a manual page in PHP error messages when the PHP directives html_errors (on by default) and docref_root (on by default until PHP 4.3.2) are set. 
Sometimes error messages refer to a manual page for the function main() which is why this page exists. If you discover such a reference, please » file a bug report, indicating the PHP function caused the error that linked to main() and it will be fixed and properly documented. 
Known errors that point to main()Function nameNo longer points here as of
include5.1.0
include_once5.1.0
require5.1.0
require_once5.1.0

See Also
html_errors 
display_errors 
</Desc>
    <FName>max</FName>
    <Desc>mixed max ( array $values )
mixed max ( mixed $value1 , mixed $value2 [, mixed $... ] )
If the first and only parameter is an array, max() returns the highest value in that array. If at least two parameters are provided, max() returns the biggest of these values. 
Note: 
Values of different types will be compared using the standard comparison rules. For instance, a non-numeric string will be compared to an integer as though it were 0, but multiple non-numeric string values will be compared alphanumerically. The actual value returned will be of the original type with no conversion applied. 
Caution 
Be careful when passing arguments with mixed types values because max() can produce unpredictable results.
</Desc>
    <FName>maxdb_affected_rows</FName>
    <Desc>Procedural style
int maxdb_affected_rows ( resource $link )
Object oriented style
int $maxdb->affected_rows;
maxdb_affected_rows() returns the number of rows affected by the last INSERT, UPDATE, or DELETE query associated with the provided link parameter. If this number cannot be determined, this function will return -1. 
Note: 
For SELECT statements maxdb_affected_rows() works like maxdb_num_rows(). 
The maxdb_affected_rows() function only works with queries which modify a table. In order to return the number of rows from a SELECT query, use the maxdb_num_rows() function instead.
</Desc>
    <FName>maxdb::affected_rows</FName>
    <Desc>Procedural style
int maxdb_affected_rows ( resource $link )
Object oriented style
int $maxdb->affected_rows;
maxdb_affected_rows() returns the number of rows affected by the last INSERT, UPDATE, or DELETE query associated with the provided link parameter. If this number cannot be determined, this function will return -1. 
Note: 
For SELECT statements maxdb_affected_rows() works like maxdb_num_rows(). 
The maxdb_affected_rows() function only works with queries which modify a table. In order to return the number of rows from a SELECT query, use the maxdb_num_rows() function instead.
</Desc>
    <FName>maxdb_autocommit</FName>
    <Desc>Procedural style
bool maxdb_autocommit ( resource $link , bool $mode )
Object oriented style
bool maxdb::auto_commit ( bool $mode )
maxdb_autocommit() is used to turn on or off auto-commit mode on queries for the database connection represented by the link resource.
</Desc>
    <FName>maxdb::auto_commit</FName>
    <Desc>Procedural style
bool maxdb_autocommit ( resource $link , bool $mode )
Object oriented style
bool maxdb::auto_commit ( bool $mode )
maxdb_autocommit() is used to turn on or off auto-commit mode on queries for the database connection represented by the link resource.
</Desc>
    <FName>maxdb_bind_param</FName>
    <Desc>This function is an alias of: maxdb_stmt_bind_param() 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>maxdb_bind_result</FName>
    <Desc>This function is an alias of: maxdb_stmt_bind_result(). 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>maxdb_change_user</FName>
    <Desc>Procedural style
bool maxdb_change_user ( resource $link , string $user , string $password , string $database )
Object oriented style
bool maxdb::change_user ( string $user , string $password , string $database )
maxdb_change_user() is used to change the user of the specified database connection as given by the link parameter and to set the current database to that specified by the database parameter. 
In order to successfully change users a valid username and password parameters must be provided and that user must have sufficient permissions to access the desired database. If for any reason authorization fails, the current user authentication will remain. 
Note: 
Using this command will always cause the current database connection to behave as if was a completely new database connection, regardless of if the operation was completed successfully. This reset includes performing a rollback on any active transactions, closing all temporary tables, and unlocking all locked tables.
</Desc>
    <FName>maxdb::change_user</FName>
    <Desc>Procedural style
bool maxdb_change_user ( resource $link , string $user , string $password , string $database )
Object oriented style
bool maxdb::change_user ( string $user , string $password , string $database )
maxdb_change_user() is used to change the user of the specified database connection as given by the link parameter and to set the current database to that specified by the database parameter. 
In order to successfully change users a valid username and password parameters must be provided and that user must have sufficient permissions to access the desired database. If for any reason authorization fails, the current user authentication will remain. 
Note: 
Using this command will always cause the current database connection to behave as if was a completely new database connection, regardless of if the operation was completed successfully. This reset includes performing a rollback on any active transactions, closing all temporary tables, and unlocking all locked tables.
</Desc>
    <FName>maxdb_character_set_name</FName>
    <Desc>Procedural style
string maxdb_character_set_name ( resource $link )
Object oriented style
string maxdb::character_set_name ( void )
Returns the current character set for the database connection specified by the link parameter.
</Desc>
    <FName>maxdb::character_set_name</FName>
    <Desc>Procedural style
string maxdb_character_set_name ( resource $link )
Object oriented style
string maxdb::character_set_name ( void )
Returns the current character set for the database connection specified by the link parameter.
</Desc>
    <FName>maxdb_client_encoding</FName>
    <Desc>This function is an alias of: maxdb_character_set_name(). 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>maxdb_close_long_data</FName>
    <Desc>This function is an alias of: maxdb_stmt_close_long_data(). 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>maxdb::close_long_data</FName>
    <Desc>This function is an alias of: maxdb_stmt_close_long_data(). 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>maxdb_close</FName>
    <Desc>Procedural style
bool maxdb_close ( resource $link )
Object oriented style
bool maxdb::close ( void )
The maxdb_close() function closes a previously opened database connection specified by the link parameter.
</Desc>
    <FName>maxdb::close</FName>
    <Desc>Procedural style
bool maxdb_close ( resource $link )
Object oriented style
bool maxdb::close ( void )
The maxdb_close() function closes a previously opened database connection specified by the link parameter.
</Desc>
    <FName>maxdb_commit</FName>
    <Desc>Procedural style
bool maxdb_commit ( resource $link )
Object oriented style
bool maxdb::commit ( void )
Commits the current transaction for the database connection specified by the link parameter.
</Desc>
    <FName>maxdb::commit</FName>
    <Desc>Procedural style
bool maxdb_commit ( resource $link )
Object oriented style
bool maxdb::commit ( void )
Commits the current transaction for the database connection specified by the link parameter.
</Desc>
    <FName>maxdb_connect_errno</FName>
    <Desc>int maxdb_connect_errno ( void )
The maxdb_connect_errno() function will return the last error code number for last call to maxdb_connect(). If no errors have occurred, this function will return zero.
</Desc>
    <FName>maxdb_connect_error</FName>
    <Desc>string maxdb_connect_error ( void )
The maxdb_connect_error() function is identical to the corresponding maxdb_connect_errno() function in every way, except instead of returning an integer error code the maxdb_connect_error() function will return a string representation of the last error to occur for the last maxdb_connect() call. If no error has occurred, this function will return an empty string.
</Desc>
    <FName>maxdb_connect</FName>
    <Desc>Procedural style
resource maxdb_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )
Object oriented style
maxdb::__construct ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )
The maxdb_connect() function attempts to open a connection to the MaxDB Server running on host which can be either a host name or an IP address. Passing the string "localhost" to this parameter, the local host is assumed. If successful, the maxdb_connect() will return an resource representing the connection to the database or FALSE on failure. 
The username and password parameters specify the username and password under which to connect to the MaxDB server. If the password is not provided (the NULL value is passed), the MaxDB server will attempt to authenticate the user against the maxdb.default_pw in php.ini. 
The dbname parameter if provided will specify the default database to be used when performing queries. If not provied, the entry maxdb.default_db in php.ini is used. 
The port and socket parameters are ignored for the MaxDB server.
</Desc>
    <FName>maxdb::__construct</FName>
    <Desc>Procedural style
resource maxdb_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )
Object oriented style
maxdb::__construct ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )
The maxdb_connect() function attempts to open a connection to the MaxDB Server running on host which can be either a host name or an IP address. Passing the string "localhost" to this parameter, the local host is assumed. If successful, the maxdb_connect() will return an resource representing the connection to the database or FALSE on failure. 
The username and password parameters specify the username and password under which to connect to the MaxDB server. If the password is not provided (the NULL value is passed), the MaxDB server will attempt to authenticate the user against the maxdb.default_pw in php.ini. 
The dbname parameter if provided will specify the default database to be used when performing queries. If not provied, the entry maxdb.default_db in php.ini is used. 
The port and socket parameters are ignored for the MaxDB server.
</Desc>
    <FName>maxdb_data_seek</FName>
    <Desc>Procedural style
bool maxdb_data_seek ( resource $result , int $offset )
Object oriented style
bool maxdb_result::data_seek ( int $offset )
The maxdb_data_seek() function seeks to an arbitrary result pointer specified by the offset in the result set represented by result. The offset parameter must be between zero and the total number of rows minus one (0..maxdb_num_rows() - 1).
</Desc>
    <FName>maxdb_result::data_seek</FName>
    <Desc>Procedural style
bool maxdb_data_seek ( resource $result , int $offset )
Object oriented style
bool maxdb_result::data_seek ( int $offset )
The maxdb_data_seek() function seeks to an arbitrary result pointer specified by the offset in the result set represented by result. The offset parameter must be between zero and the total number of rows minus one (0..maxdb_num_rows() - 1).
</Desc>
    <FName>maxdb_debug</FName>
    <Desc>void maxdb_debug ( string $debug )
The maxdb_debug() can be used to trace the SQLDBC communication. The following strings can be used as a parameter to maxdb_debug(): 
TRACE SHORT ON|OFF - Enables/disables method call trace. 
TRACE LONG ON|OFF - Enables/disables method argument and detail debug trace. 
TRACE PACKET ON|OFF|<size> - Enables/disables packet trace, limiting the size of the traced object to the specified number of bytes, or 1000 if no size is specified. 
TRACE SQL ON|OFF - Enables/disables high level api trace. 
TRACE TIMESTAMP ON|OFF - Enables/disables a timestamp prefix on each line that is traced. 
TRACE SIZE <size> - Limits the size of the trace file to <size> bytes, at least 8192 bytes are required.
</Desc>
    <FName>maxdb_disable_reads_from_master</FName>
    <Desc>Procedural style
bool maxdb_disable_reads_from_master ( resource $link )
Object oriented style
void maxdb::disable_reads_from_master ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb::disable_reads_from_master</FName>
    <Desc>Procedural style
bool maxdb_disable_reads_from_master ( resource $link )
Object oriented style
void maxdb::disable_reads_from_master ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_disable_rpl_parse</FName>
    <Desc>bool maxdb_disable_rpl_parse ( resource $link )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_dump_debug_info</FName>
    <Desc>bool maxdb_dump_debug_info ( resource $link )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_embedded_connect</FName>
    <Desc>resource maxdb_embedded_connect ([ string $dbname ] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_enable_reads_from_master</FName>
    <Desc>bool maxdb_enable_reads_from_master ( resource $link )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_enable_rpl_parse</FName>
    <Desc>bool maxdb_enable_rpl_parse ( resource $link )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_errno</FName>
    <Desc>Procedural style
int maxdb_errno ( resource $link )
Object oriented style
int $maxdb->errno;
The maxdb_errno() function will return the last error code for the most recent MaxDB function call that can succeed or fail with respect to the database link defined by the link parameter. If no errors have occurred, this function will return zero.
</Desc>
    <FName>maxdb::errno</FName>
    <Desc>Procedural style
int maxdb_errno ( resource $link )
Object oriented style
int $maxdb->errno;
The maxdb_errno() function will return the last error code for the most recent MaxDB function call that can succeed or fail with respect to the database link defined by the link parameter. If no errors have occurred, this function will return zero.
</Desc>
    <FName>maxdb_error</FName>
    <Desc>Procedural style
string maxdb_error ( resource $link )
Object oriented style
string $maxdb->error;
The maxdb_error() function is identical to the corresponding maxdb_errno() function in every way, except instead of returning an integer error code the maxdb_error() function will return a string representation of the last error to occur for the database connection represented by the link parameter. If no error has occurred, this function will return an empty string.
</Desc>
    <FName>maxdb::error</FName>
    <Desc>Procedural style
string maxdb_error ( resource $link )
Object oriented style
string $maxdb->error;
The maxdb_error() function is identical to the corresponding maxdb_errno() function in every way, except instead of returning an integer error code the maxdb_error() function will return a string representation of the last error to occur for the database connection represented by the link parameter. If no error has occurred, this function will return an empty string.
</Desc>
    <FName>maxdb_escape_string</FName>
    <Desc>This function is an alias of: maxdb_real_escape_string(). 
</Desc>
    <FName>maxdb_execute</FName>
    <Desc>This function is an alias of: maxdb_stmt_execute(). 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>maxdb_fetch_array</FName>
    <Desc>Procedural style
mixed maxdb_fetch_array ( resource $result [, int $resulttype ] )
Object oriented style
mixed maxdb_result::fetch_array ([ int $resulttype ] )
Returns an array that corresponds to the fetched row or NULL if there are no more rows for the resultset represented by the result parameter. 
maxdb_fetch_array() is an extended version of the maxdb_fetch_row() function. In addition to storing the data in the numeric indices of the result array, the maxdb_fetch_array() function can also store the data in associative indices, using the field names of the result set as keys. 
Note: Field names returned by this function are case-sensitive.
Note: This function sets NULL fields to the PHP NULL value.
If two or more columns of the result have the same field names, the last column will take precedence and overwrite the earlier data. In order to access multiple columns with the same name, the numerically indexed version of the row must be used. 
The optional second argument resulttype is a constant indicating what type of array should be produced from the current row data. The possible values for this parameter are the constants MAXDB_ASSOC, MAXDB_ASSOC_UPPER, MAXDB_ASSOC_LOWER, MAXDB_NUM, or MAXDB_BOTH. By default the maxdb_fetch_array() function will assume MAXDB_BOTH, which is a combination of MAXDB_NUM and MAXDB_ASSOC for this parameter. 
By using the MAXDB_ASSOC constant this function will behave identically to the maxdb_fetch_assoc(), while MAXDB_NUM will behave identically to the maxdb_fetch_row() function. The final option MAXDB_BOTH will create a single array with the attributes of both. 
By using the MAXDB_ASSOC_UPPER constant, the behaviour of this function is identical to the use of MAXDB_ASSOC except the array index of a column is the fieldname in upper case. 
By using the MAXDB_ASSOC_LOWER constant, the behaviour of this function is identical to the use of MAXDB_ASSOC except the array index of a column is the fieldname in lower case.
</Desc>
    <FName>maxdb_result::fetch_array</FName>
    <Desc>Procedural style
mixed maxdb_fetch_array ( resource $result [, int $resulttype ] )
Object oriented style
mixed maxdb_result::fetch_array ([ int $resulttype ] )
Returns an array that corresponds to the fetched row or NULL if there are no more rows for the resultset represented by the result parameter. 
maxdb_fetch_array() is an extended version of the maxdb_fetch_row() function. In addition to storing the data in the numeric indices of the result array, the maxdb_fetch_array() function can also store the data in associative indices, using the field names of the result set as keys. 
Note: Field names returned by this function are case-sensitive.
Note: This function sets NULL fields to the PHP NULL value.
If two or more columns of the result have the same field names, the last column will take precedence and overwrite the earlier data. In order to access multiple columns with the same name, the numerically indexed version of the row must be used. 
The optional second argument resulttype is a constant indicating what type of array should be produced from the current row data. The possible values for this parameter are the constants MAXDB_ASSOC, MAXDB_ASSOC_UPPER, MAXDB_ASSOC_LOWER, MAXDB_NUM, or MAXDB_BOTH. By default the maxdb_fetch_array() function will assume MAXDB_BOTH, which is a combination of MAXDB_NUM and MAXDB_ASSOC for this parameter. 
By using the MAXDB_ASSOC constant this function will behave identically to the maxdb_fetch_assoc(), while MAXDB_NUM will behave identically to the maxdb_fetch_row() function. The final option MAXDB_BOTH will create a single array with the attributes of both. 
By using the MAXDB_ASSOC_UPPER constant, the behaviour of this function is identical to the use of MAXDB_ASSOC except the array index of a column is the fieldname in upper case. 
By using the MAXDB_ASSOC_LOWER constant, the behaviour of this function is identical to the use of MAXDB_ASSOC except the array index of a column is the fieldname in lower case.
</Desc>
    <FName>maxdb_fetch_assoc</FName>
    <Desc>Procedural style
array maxdb_fetch_assoc ( resource $result )
Object oriented style
array maxdb_result::fetch_assoc ( void )
Returns an associative array that corresponds to the fetched row or NULL if there are no more rows. 
The maxdb_fetch_assoc() function is used to return an associative array representing the next row in the result set for the result represented by the result parameter, where each key in the array represents the name of one of the result set's columns. 
If two or more columns of the result have the same field names, the last column will take precedence. To access the other column(s) of the same name, you either need to access the result with numeric indices by using maxdb_fetch_row() or add alias names. 
Note: Field names returned by this function are case-sensitive.
Note: This function sets NULL fields to the PHP NULL value.
</Desc>
    <FName>maxdb_result::fetch_assoc</FName>
    <Desc>Procedural style
array maxdb_fetch_assoc ( resource $result )
Object oriented style
array maxdb_result::fetch_assoc ( void )
Returns an associative array that corresponds to the fetched row or NULL if there are no more rows. 
The maxdb_fetch_assoc() function is used to return an associative array representing the next row in the result set for the result represented by the result parameter, where each key in the array represents the name of one of the result set's columns. 
If two or more columns of the result have the same field names, the last column will take precedence. To access the other column(s) of the same name, you either need to access the result with numeric indices by using maxdb_fetch_row() or add alias names. 
Note: Field names returned by this function are case-sensitive.
Note: This function sets NULL fields to the PHP NULL value.
</Desc>
    <FName>maxdb_fetch_field_direct</FName>
    <Desc>Procedural style
mixed maxdb_fetch_field_direct ( resource $result , int $fieldnr )
Object oriented style
mixed maxdb_result::fetch_field_direct ( int $fieldnr )
maxdb_fetch_field_direct() returns an resource which contains field definition information from specified resultset. The value of fieldnr must be in the range from 0 to number of fields - 1.
</Desc>
    <FName>maxdb_result::fetch_field_direct</FName>
    <Desc>Procedural style
mixed maxdb_fetch_field_direct ( resource $result , int $fieldnr )
Object oriented style
mixed maxdb_result::fetch_field_direct ( int $fieldnr )
maxdb_fetch_field_direct() returns an resource which contains field definition information from specified resultset. The value of fieldnr must be in the range from 0 to number of fields - 1.
</Desc>
    <FName>maxdb_fetch_field</FName>
    <Desc>Procedural style
mixed maxdb_fetch_field ( resource $result )
Object oriented style
mixed maxdb_result::fetch_field ( void )
The maxdb_fetch_field() returns the definition of one column of a result set as an resource. Call this function repeatedly to retrieve information about all columns in the result set. maxdb_fetch_field() returns FALSE when no more fields are left.
</Desc>
    <FName>maxdb_result::fetch_field</FName>
    <Desc>Procedural style
mixed maxdb_fetch_field ( resource $result )
Object oriented style
mixed maxdb_result::fetch_field ( void )
The maxdb_fetch_field() returns the definition of one column of a result set as an resource. Call this function repeatedly to retrieve information about all columns in the result set. maxdb_fetch_field() returns FALSE when no more fields are left.
</Desc>
    <FName>maxdb_fetch_fields</FName>
    <Desc>Procedural style
mixed maxdb_fetch_fields ( resource $result )
Object oriented style
mixed maxdb_result::fetch_fields ( void )
This function serves an identical purpose to the maxdb_fetch_field() function with the single difference that, instead of returning one resource at a time for each field, the columns are returned as an array of resources.
</Desc>
    <FName>maxdb_result::fetch_fields</FName>
    <Desc>Procedural style
mixed maxdb_fetch_fields ( resource $result )
Object oriented style
mixed maxdb_result::fetch_fields ( void )
This function serves an identical purpose to the maxdb_fetch_field() function with the single difference that, instead of returning one resource at a time for each field, the columns are returned as an array of resources.
</Desc>
    <FName>maxdb_fetch_lengths</FName>
    <Desc>Procedural style
array maxdb_fetch_lengths ( resource $result )
Object oriented style
array $maxdb_result->lengths;
The maxdb_fetch_lengths() function returns an array containing the lengths of every column of the current row within the result set represented by the result parameter. If successful, a numerically indexed array representing the lengths of each column is returned or FALSE on failure.
</Desc>
    <FName>maxdb_result::lengths</FName>
    <Desc>Procedural style
array maxdb_fetch_lengths ( resource $result )
Object oriented style
array $maxdb_result->lengths;
The maxdb_fetch_lengths() function returns an array containing the lengths of every column of the current row within the result set represented by the result parameter. If successful, a numerically indexed array representing the lengths of each column is returned or FALSE on failure.
</Desc>
    <FName>maxdb_fetch_object</FName>
    <Desc>Procedural style
object maxdb_fetch_object ( object $result )
Object oriented style
object maxdb_result::fetch_object ( void )
The maxdb_fetch_object() will return the current row result set as an object where the attributes of the object represent the names of the fields found within the result set. If no more rows exist in the current result set, NULL is returned.
</Desc>
    <FName>maxdb_result::fetch_object</FName>
    <Desc>Procedural style
object maxdb_fetch_object ( object $result )
Object oriented style
object maxdb_result::fetch_object ( void )
The maxdb_fetch_object() will return the current row result set as an object where the attributes of the object represent the names of the fields found within the result set. If no more rows exist in the current result set, NULL is returned.
</Desc>
    <FName>maxdb_fetch_row</FName>
    <Desc>Procedural style
mixed maxdb_fetch_row ( resource $result )
Object oriented style
mixed maxdb_result::fetch_row ( void )
Returns an array that corresponds to the fetched row, or NULL if there are no more rows. 
maxdb_fetch_row() fetches one row of data from the result set represented by result and returns it as an enumerated array, where each column is stored in an array offset starting from 0 (zero). Each subsequent call to the maxdb_fetch_row() function will return the next row within the result set, or FALSE if there are no more rows.
</Desc>
    <FName>maxdb_result::fetch_row</FName>
    <Desc>Procedural style
mixed maxdb_fetch_row ( resource $result )
Object oriented style
mixed maxdb_result::fetch_row ( void )
Returns an array that corresponds to the fetched row, or NULL if there are no more rows. 
maxdb_fetch_row() fetches one row of data from the result set represented by result and returns it as an enumerated array, where each column is stored in an array offset starting from 0 (zero). Each subsequent call to the maxdb_fetch_row() function will return the next row within the result set, or FALSE if there are no more rows.
</Desc>
    <FName>maxdb_fetch</FName>
    <Desc>This function is an alias of: maxdb_stmt_fetch(). 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>maxdb_field_count</FName>
    <Desc>Procedural style
int maxdb_field_count ( resource $link )
Object oriented style
int maxdb::field_count ( void )
Returns the number of columns for the most recent query on the connection represented by the link parameter. This function can be useful when using the maxdb_store_result() function to determine if the query should have produced a non-empty result set or not without knowing the nature of the query.
</Desc>
    <FName>maxdb::field_count</FName>
    <Desc>Procedural style
int maxdb_field_count ( resource $link )
Object oriented style
int maxdb::field_count ( void )
Returns the number of columns for the most recent query on the connection represented by the link parameter. This function can be useful when using the maxdb_store_result() function to determine if the query should have produced a non-empty result set or not without knowing the nature of the query.
</Desc>
    <FName>maxdb_field_seek</FName>
    <Desc>Procedural style
bool maxdb_field_seek ( resource $result , int $fieldnr )
Object oriented style
bool maxdb_result::field_seek ( int $fieldnr )
Sets the field cursor to the given offset. The next call to maxdb_fetch_field() will retrieve the field definition of the column associated with that offset. 
Note: 
To seek to the beginning of a row, pass an offset value of zero.
</Desc>
    <FName>maxdb_result::field_seek</FName>
    <Desc>Procedural style
bool maxdb_field_seek ( resource $result , int $fieldnr )
Object oriented style
bool maxdb_result::field_seek ( int $fieldnr )
Sets the field cursor to the given offset. The next call to maxdb_fetch_field() will retrieve the field definition of the column associated with that offset. 
Note: 
To seek to the beginning of a row, pass an offset value of zero.
</Desc>
    <FName>maxdb_field_tell</FName>
    <Desc>Procedural style
int maxdb_field_tell ( resource $result )
Object oriented style
int $maxdb_result->current_field;
Returns the position of the field cursor used for the last maxdb_fetch_field() call. This value can be used as an argument to maxdb_field_seek().
</Desc>
    <FName>maxdb_result::current_field</FName>
    <Desc>Procedural style
int maxdb_field_tell ( resource $result )
Object oriented style
int $maxdb_result->current_field;
Returns the position of the field cursor used for the last maxdb_fetch_field() call. This value can be used as an argument to maxdb_field_seek().
</Desc>
    <FName>maxdb_free_result</FName>
    <Desc>Procedural style
void maxdb_free_result ( resource $result )
Object oriented style
void maxdb_result::free ( void )
The maxdb_free_result() function frees the memory associated with the result represented by the result parameter, which was allocated by maxdb_query(), maxdb_store_result() or maxdb_use_result(). 
Note: 
You should always free your result with maxdb_free_result(), when your result resource is not needed anymore.
</Desc>
    <FName>maxdb_result::free</FName>
    <Desc>Procedural style
void maxdb_free_result ( resource $result )
Object oriented style
void maxdb_result::free ( void )
The maxdb_free_result() function frees the memory associated with the result represented by the result parameter, which was allocated by maxdb_query(), maxdb_store_result() or maxdb_use_result(). 
Note: 
You should always free your result with maxdb_free_result(), when your result resource is not needed anymore.
</Desc>
    <FName>maxdb_get_client_info</FName>
    <Desc>string maxdb_get_client_info ( void )
The maxdb_get_client_info() function is used to return a string representing the client version being used in the MaxDB extension.
</Desc>
    <FName>maxdb_get_client_version</FName>
    <Desc>int maxdb_get_client_version ( void )
Returns client version number as an integer.
</Desc>
    <FName>maxdb_get_host_info</FName>
    <Desc>Procedural style
string maxdb_get_host_info ( resource $link )
Object oriented style
string $maxdb->host_info;
The maxdb_get_host_info() function returns a string describing the connection represented by the link parameter is using.
</Desc>
    <FName>maxdb::get_host_info</FName>
    <Desc>Procedural style
string maxdb_get_host_info ( resource $link )
Object oriented style
string $maxdb->host_info;
The maxdb_get_host_info() function returns a string describing the connection represented by the link parameter is using.
</Desc>
    <FName>maxdb_get_metadata</FName>
    <Desc>This function is an alias of: maxdb_stmt_result_metadata(). 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>maxdb_get_proto_info</FName>
    <Desc>Procedural style
int maxdb_get_proto_info ( resource $link )
Object oriented style
string $maxdb->protocol_version;
Returns an integer representing the MaxDB protocol version used by the connection represented by the link parameter.
</Desc>
    <FName>maxdb::protocol_version</FName>
    <Desc>Procedural style
int maxdb_get_proto_info ( resource $link )
Object oriented style
string $maxdb->protocol_version;
Returns an integer representing the MaxDB protocol version used by the connection represented by the link parameter.
</Desc>
    <FName>maxdb_get_server_info</FName>
    <Desc>Procedural style
string maxdb_get_server_info ( resource $link )
Object oriented style
string $maxdb->server_info;
Returns a string representing the version of the MaxDB server that the MaxDB extension is connected to (represented by the link parameter).
</Desc>
    <FName>maxdb::server_info</FName>
    <Desc>Procedural style
string maxdb_get_server_info ( resource $link )
Object oriented style
string $maxdb->server_info;
Returns a string representing the version of the MaxDB server that the MaxDB extension is connected to (represented by the link parameter).
</Desc>
    <FName>maxdb_get_server_version</FName>
    <Desc>Procedural style
int maxdb_get_server_version ( resource $link )
Object oriented style
int $maxdb->server_version;
The maxdb_get_server_version() function returns the version of the server connected to (represented by the link parameter) as an integer. 
The form of this version number is main_version * 10000 + minor_version * 100 + sub_version (i.e. version 7.5.0 is 70500).
</Desc>
    <FName>maxdb::server_version</FName>
    <Desc>Procedural style
int maxdb_get_server_version ( resource $link )
Object oriented style
int $maxdb->server_version;
The maxdb_get_server_version() function returns the version of the server connected to (represented by the link parameter) as an integer. 
The form of this version number is main_version * 10000 + minor_version * 100 + sub_version (i.e. version 7.5.0 is 70500).
</Desc>
    <FName>maxdb_info</FName>
    <Desc>Procedural style
string maxdb_info ( resource $link )
Object oriented style
string $maxdb->info;
The maxdb_info() function returns a string providing information about the last query executed. The nature of this string is provided below: 
Possible maxdb_info return valuesQuery typeExample result string
INSERT INTO...SELECT...Records: 100 Duplicates: 0 Warnings: 0
INSERT INTO...VALUES (...),(...),(...)Records: 3 Duplicates: 0 Warnings: 0
LOAD DATA INFILE ...Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
ALTER TABLE ...Records: 3 Duplicates: 0 Warnings: 0
UPDATE ...Rows matched: 40 Changed: 40 Warnings: 0

Note: 
Queries which do not fall into one of the above formats are not supported. In these situations, maxdb_info() will return an empty string.
</Desc>
    <FName>maxdb::info</FName>
    <Desc>Procedural style
string maxdb_info ( resource $link )
Object oriented style
string $maxdb->info;
The maxdb_info() function returns a string providing information about the last query executed. The nature of this string is provided below: 
Possible maxdb_info return valuesQuery typeExample result string
INSERT INTO...SELECT...Records: 100 Duplicates: 0 Warnings: 0
INSERT INTO...VALUES (...),(...),(...)Records: 3 Duplicates: 0 Warnings: 0
LOAD DATA INFILE ...Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
ALTER TABLE ...Records: 3 Duplicates: 0 Warnings: 0
UPDATE ...Rows matched: 40 Changed: 40 Warnings: 0

Note: 
Queries which do not fall into one of the above formats are not supported. In these situations, maxdb_info() will return an empty string.
</Desc>
    <FName>maxdb_init</FName>
    <Desc>resource maxdb_init ( void )
Allocates or initializes a MaxDB resource suitable for maxdb_options() and maxdb_real_connect(). 
Note: 
Any subsequent calls to any maxdb function (except maxdb_options()) will fail until maxdb_real_connect() was called.
</Desc>
    <FName>maxdb_insert_id</FName>
    <Desc>Procedural style
mixed maxdb_insert_id ( resource $link )
Object oriented style
mixed $maxdb->insert_id;
The maxdb_insert_id() function returns the ID generated by a query on a table with a column having the DEFAULT SERIAL attribute. If the last query wasn't an INSERT or UPDATE statement or if the modified table does not have a column with the DEFAULT SERIAL attribute, this function will return zero.
</Desc>
    <FName>maxdb::insert_id</FName>
    <Desc>Procedural style
mixed maxdb_insert_id ( resource $link )
Object oriented style
mixed $maxdb->insert_id;
The maxdb_insert_id() function returns the ID generated by a query on a table with a column having the DEFAULT SERIAL attribute. If the last query wasn't an INSERT or UPDATE statement or if the modified table does not have a column with the DEFAULT SERIAL attribute, this function will return zero.
</Desc>
    <FName>maxdb_kill</FName>
    <Desc>Procedural style
bool maxdb_kill ( resource $link , int $processid )
Object oriented style
bool maxdb::kill ( int $processid )
This function is used to disconnect from a MaxDB server specified by the processid parameter.
</Desc>
    <FName>maxdb::kill</FName>
    <Desc>Procedural style
bool maxdb_kill ( resource $link , int $processid )
Object oriented style
bool maxdb::kill ( int $processid )
This function is used to disconnect from a MaxDB server specified by the processid parameter.
</Desc>
    <FName>maxdb_master_query</FName>
    <Desc>bool maxdb_master_query ( resource $link , string $query )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_more_results</FName>
    <Desc>bool maxdb_more_results ( resource $link )
maxdb_more_results() indicates if one or more result sets are available from a previous call to maxdb_multi_query().
</Desc>
    <FName>maxdb::more_results</FName>
    <Desc>bool maxdb_more_results ( resource $link )
maxdb_more_results() indicates if one or more result sets are available from a previous call to maxdb_multi_query().
</Desc>
    <FName>maxdb_multi_query</FName>
    <Desc>Procedural style
bool maxdb_multi_query ( resource $link , string $query )
Object oriented style
bool maxdb::multi_query ( string $query )
The maxdb_multi_query() works like the function maxdb_query(). Multiple queries are not yet supported.
</Desc>
    <FName>maxdb::multi_query</FName>
    <Desc>Procedural style
bool maxdb_multi_query ( resource $link , string $query )
Object oriented style
bool maxdb::multi_query ( string $query )
The maxdb_multi_query() works like the function maxdb_query(). Multiple queries are not yet supported.
</Desc>
    <FName>maxdb_next_result</FName>
    <Desc>bool maxdb_next_result ( resource $link )
Since multiple queries are not yet supported, maxdb_next_result() returns always FALSE.
</Desc>
    <FName>maxdb::next_result</FName>
    <Desc>bool maxdb_next_result ( resource $link )
Since multiple queries are not yet supported, maxdb_next_result() returns always FALSE.
</Desc>
    <FName>maxdb_num_fields</FName>
    <Desc>Procedural style
int maxdb_num_fields ( resource $result )
Object oriented style
int $maxdb_result->field_count;
maxdb_num_fields() returns the number of fields from specified result set.
</Desc>
    <FName>maxdb_result::field_count</FName>
    <Desc>Procedural style
int maxdb_num_fields ( resource $result )
Object oriented style
int $maxdb_result->field_count;
maxdb_num_fields() returns the number of fields from specified result set.
</Desc>
    <FName>maxdb_num_rows</FName>
    <Desc>Procedural style
int maxdb_num_rows ( resource $result )
Object oriented style
int $maxdb->num_rows;
Returns the number of rows in the result set. 
The use of maxdb_num_rows() depends on whether you use buffered or unbuffered result sets. In case you use unbuffered resultsets maxdb_num_rows() will not correct the correct number of rows until all the rows in the result have been retrieved.
</Desc>
    <FName>maxdb::num_rows</FName>
    <Desc>Procedural style
int maxdb_num_rows ( resource $result )
Object oriented style
int $maxdb->num_rows;
Returns the number of rows in the result set. 
The use of maxdb_num_rows() depends on whether you use buffered or unbuffered result sets. In case you use unbuffered resultsets maxdb_num_rows() will not correct the correct number of rows until all the rows in the result have been retrieved.
</Desc>
    <FName>maxdb_options</FName>
    <Desc>Procedural style
bool maxdb_options ( resource $link , int $option , mixed $value )
Object oriented style
bool maxdb::options ( int $option , mixed $value )
maxdb_options() can be used to set extra connect options and affect behavior for a connection. 
This function may be called multiple times to set several options. 
maxdb_options() should be called after maxdb_init() and before maxdb_real_connect(). 
The parameter option is the option that you want to set, the value is the value for the option. For detailed description of the options see » http://maxdb.sap.com/documentation/ The parameter option can be one of the following values: Valid optionsNameDescription
MAXDB_COMPNAMEThe component name used to initialise the SQLDBC runtime environment.
MAXDB_APPLICATIONThe application to be connected to the database.
MAXDB_APPVERSIONThe version of the application.
MAXDB_SQLMODEThe SQL mode. 
MAXDB_UNICODETRUE, if the connection is an unicode (UCS2) client or FALSE, if not. 
MAXDB_TIMEOUTThe maximum allowed time of inactivity after which the connection to the database is closed by the system. 
MAXDB_ISOLATIONLEVELSpecifies whether and how shared locks and exclusive locks are implicitly requested or released. 
MAXDB_PACKETCOUNTThe number of different request packets used for the connection. 
MAXDB_STATEMENTCACHESIZEThe number of prepared statements to be cached for the connection for re-use. 
MAXDB_CURSORPREFIXThe prefix to use for result tables that are automatically named.
</Desc>
    <FName>maxdb::options</FName>
    <Desc>Procedural style
bool maxdb_options ( resource $link , int $option , mixed $value )
Object oriented style
bool maxdb::options ( int $option , mixed $value )
maxdb_options() can be used to set extra connect options and affect behavior for a connection. 
This function may be called multiple times to set several options. 
maxdb_options() should be called after maxdb_init() and before maxdb_real_connect(). 
The parameter option is the option that you want to set, the value is the value for the option. For detailed description of the options see » http://maxdb.sap.com/documentation/ The parameter option can be one of the following values: Valid optionsNameDescription
MAXDB_COMPNAMEThe component name used to initialise the SQLDBC runtime environment.
MAXDB_APPLICATIONThe application to be connected to the database.
MAXDB_APPVERSIONThe version of the application.
MAXDB_SQLMODEThe SQL mode. 
MAXDB_UNICODETRUE, if the connection is an unicode (UCS2) client or FALSE, if not. 
MAXDB_TIMEOUTThe maximum allowed time of inactivity after which the connection to the database is closed by the system. 
MAXDB_ISOLATIONLEVELSpecifies whether and how shared locks and exclusive locks are implicitly requested or released. 
MAXDB_PACKETCOUNTThe number of different request packets used for the connection. 
MAXDB_STATEMENTCACHESIZEThe number of prepared statements to be cached for the connection for re-use. 
MAXDB_CURSORPREFIXThe prefix to use for result tables that are automatically named.
</Desc>
    <FName>maxdb_param_count</FName>
    <Desc>This function is an alias of: maxdb_stmt_param_count(). 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>maxdb_ping</FName>
    <Desc>Procedural style
bool maxdb_ping ( resource $link )
Object oriented style
bool maxdb::ping ( void )
Checks whether the connection to the server is working. If it has gone down, and global option maxdb.reconnect is enabled an automatic reconnection is attempted. 
This function can be used by clients that remain idle for a long while, to check whether the server has closed the connection and reconnect if necessary.
</Desc>
    <FName>maxdb::ping</FName>
    <Desc>Procedural style
bool maxdb_ping ( resource $link )
Object oriented style
bool maxdb::ping ( void )
Checks whether the connection to the server is working. If it has gone down, and global option maxdb.reconnect is enabled an automatic reconnection is attempted. 
This function can be used by clients that remain idle for a long while, to check whether the server has closed the connection and reconnect if necessary.
</Desc>
    <FName>maxdb_prepare</FName>
    <Desc>Procedural style
resource maxdb_prepare ( resource $link , string $query )
Object oriented style
maxdb_stmt maxdb::prepare ( string $query )
maxdb_prepare() prepares the SQL query pointed to by the null-terminated string query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement. 
Note: 
You should not add a terminating semicolon or \g to the statement. 
The parameter query can include one or more parameter markers in the SQL statement by embedding question mark (?) characters at the appropriate positions. 
Note: 
The markers are legal only in certain places in SQL statements. For example, they are allowed in the VALUES() list of an INSERT statement (to specify column values for a row), or in a comparison with a column in a WHERE clause to specify a comparison value. 
However, they are not allowed for identifiers (such as table or column names), in the select list that names the columns to be returned by a SELECT statement), or to specify both operands of a binary operator such as the = equal sign. The latter restriction is necessary because it would be impossible to determine the parameter type. In general, parameters are legal only in Data Manipulation Languange (DML) statements, and not in Data Defination Language (DDL) statements. 
The parameter markers must be bound to application variables using maxdb_stmt_bind_param() and/or maxdb_stmt_bind_result() before executing the statement or fetching rows.
</Desc>
    <FName>maxdb::prepare</FName>
    <Desc>Procedural style
resource maxdb_prepare ( resource $link , string $query )
Object oriented style
maxdb_stmt maxdb::prepare ( string $query )
maxdb_prepare() prepares the SQL query pointed to by the null-terminated string query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement. 
Note: 
You should not add a terminating semicolon or \g to the statement. 
The parameter query can include one or more parameter markers in the SQL statement by embedding question mark (?) characters at the appropriate positions. 
Note: 
The markers are legal only in certain places in SQL statements. For example, they are allowed in the VALUES() list of an INSERT statement (to specify column values for a row), or in a comparison with a column in a WHERE clause to specify a comparison value. 
However, they are not allowed for identifiers (such as table or column names), in the select list that names the columns to be returned by a SELECT statement), or to specify both operands of a binary operator such as the = equal sign. The latter restriction is necessary because it would be impossible to determine the parameter type. In general, parameters are legal only in Data Manipulation Languange (DML) statements, and not in Data Defination Language (DDL) statements. 
The parameter markers must be bound to application variables using maxdb_stmt_bind_param() and/or maxdb_stmt_bind_result() before executing the statement or fetching rows.
</Desc>
    <FName>maxdb_query</FName>
    <Desc>Procedural style
mixed maxdb_query ( resource $link , string $query [, int $resultmode ] )
Object oriented style
mixed maxdb::query ( string $query )
The maxdb_query() function is used to simplify the act of performing a query against the database represented by the link parameter.
</Desc>
    <FName>maxdb::query</FName>
    <Desc>Procedural style
mixed maxdb_query ( resource $link , string $query [, int $resultmode ] )
Object oriented style
mixed maxdb::query ( string $query )
The maxdb_query() function is used to simplify the act of performing a query against the database represented by the link parameter.
</Desc>
    <FName>maxdb_real_connect</FName>
    <Desc>Procedural style
bool maxdb_real_connect ( resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )
Object oriented style
bool maxdb::real_connect ([ string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )
maxdb_real_connect() attempts to establish a connection to a MaxDB database engine running on hostname. 
This function differs from maxdb_connect(): 
maxdb_real_connect() needs a valid resource which has to be created by function maxdb_init() 
With function maxdb_options() you can set various options for connection.
</Desc>
    <FName>maxdb::real_connect</FName>
    <Desc>Procedural style
bool maxdb_real_connect ( resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )
Object oriented style
bool maxdb::real_connect ([ string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )
maxdb_real_connect() attempts to establish a connection to a MaxDB database engine running on hostname. 
This function differs from maxdb_connect(): 
maxdb_real_connect() needs a valid resource which has to be created by function maxdb_init() 
With function maxdb_options() you can set various options for connection.
</Desc>
    <FName>maxdb_real_escape_string</FName>
    <Desc>Procedural style
string maxdb_real_escape_string ( resource $link , string $escapestr )
Object oriented style
string maxdb::real_escape_string ( string $escapestr )
This function is used to create a legal SQL string that you can use in an SQL statement. The string escapestr is encoded to an escaped SQL string, taking into account the current character set of the connection. 
Characters encoded are ', ".
</Desc>
    <FName>maxdb::real_escape_string</FName>
    <Desc>Procedural style
string maxdb_real_escape_string ( resource $link , string $escapestr )
Object oriented style
string maxdb::real_escape_string ( string $escapestr )
This function is used to create a legal SQL string that you can use in an SQL statement. The string escapestr is encoded to an escaped SQL string, taking into account the current character set of the connection. 
Characters encoded are ', ".
</Desc>
    <FName>maxdb_real_query</FName>
    <Desc>Procedural style
bool maxdb_real_query ( resource $link , string $query )
Object oriented style
bool maxdb::real_query ( string $query )
The maxdb_real_query() is functionally identical with the maxdb_query(). 
Note: 
In order to determine if a given query should return a result set or not, see maxdb_field_count().
</Desc>
    <FName>maxdb::real_query</FName>
    <Desc>Procedural style
bool maxdb_real_query ( resource $link , string $query )
Object oriented style
bool maxdb::real_query ( string $query )
The maxdb_real_query() is functionally identical with the maxdb_query(). 
Note: 
In order to determine if a given query should return a result set or not, see maxdb_field_count().
</Desc>
    <FName>maxdb_report</FName>
    <Desc>bool maxdb_report ( int $flags )
</Desc>
    <FName>maxdb_rollback</FName>
    <Desc>Procedural style
bool maxdb_rollback ( resource $link )
Object oriented style
bool maxdb::rollback ( void )
Rollbacks the current transaction for the database specified by the link parameter.
</Desc>
    <FName>maxdb::rollback</FName>
    <Desc>Procedural style
bool maxdb_rollback ( resource $link )
Object oriented style
bool maxdb::rollback ( void )
Rollbacks the current transaction for the database specified by the link parameter.
</Desc>
    <FName>maxdb_rpl_parse_enabled</FName>
    <Desc>int maxdb_rpl_parse_enabled ( resource $link )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_rpl_probe</FName>
    <Desc>bool maxdb_rpl_probe ( resource $link )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_rpl_query_type</FName>
    <Desc>Procedural style
int maxdb_rpl_query_type ( resource $link )
Object oriented style
int maxdb::rpl_query_type ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb::rpl_query_type</FName>
    <Desc>Procedural style
int maxdb_rpl_query_type ( resource $link )
Object oriented style
int maxdb::rpl_query_type ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_select_db</FName>
    <Desc>bool maxdb_select_db ( resource $link , string $dbname )
The maxdb_select_db() function selects the default database (specified by the dbname parameter) to be used when performing queries against the database connection represented by the link parameter. 
Note: 
This function should only be used to change the default database for the connection. You can select the default database with 4th parameter in maxdb_connect().
</Desc>
    <FName>maxdb::select_db</FName>
    <Desc>bool maxdb_select_db ( resource $link , string $dbname )
The maxdb_select_db() function selects the default database (specified by the dbname parameter) to be used when performing queries against the database connection represented by the link parameter. 
Note: 
This function should only be used to change the default database for the connection. You can select the default database with 4th parameter in maxdb_connect().
</Desc>
    <FName>maxdb_send_long_data</FName>
    <Desc>This function is an alias of: maxdb_stmt_send_long_data(). 
This function alias is deprecated and only exists for backwards compatibility reasons. The use of this function is not recommended, as it may be removed from PHP in the future. 
</Desc>
    <FName>maxdb_send_query</FName>
    <Desc>Procedural style
bool maxdb_send_query ( resource $link , string $query )
Object oriented style
bool maxdb::send_query ( string $query )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb::send_query</FName>
    <Desc>Procedural style
bool maxdb_send_query ( resource $link , string $query )
Object oriented style
bool maxdb::send_query ( string $query )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_server_end</FName>
    <Desc>void maxdb_server_end ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_server_init</FName>
    <Desc>bool maxdb_server_init ([ array $server [, array $groups ]] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_set_opt</FName>
    <Desc>This function is an alias of: maxdb_options(). 
</Desc>
    <FName>maxdb_sqlstate</FName>
    <Desc>Procedural style
string maxdb_sqlstate ( resource $link )
Object oriented style
string $maxdb->sqlstate;
Returns a string containing the SQLSTATE error code for the last error. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. 
Note: 
Note that not all MaxDB errors are yet mapped to SQLSTATE's. The value HY000 (general error) is used for unmapped errors.
</Desc>
    <FName>maxdb::sqlstate</FName>
    <Desc>Procedural style
string maxdb_sqlstate ( resource $link )
Object oriented style
string $maxdb->sqlstate;
Returns a string containing the SQLSTATE error code for the last error. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. 
Note: 
Note that not all MaxDB errors are yet mapped to SQLSTATE's. The value HY000 (general error) is used for unmapped errors.
</Desc>
    <FName>maxdb_ssl_set</FName>
    <Desc>Procedural style
bool maxdb_ssl_set ( resource $link , string $key , string $cert , string $ca , string $capath , string $cipher )
Object oriented style
bool maxdb::ssl_set ( string $key , string $cert , string $ca , string $capath , string $cipher )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb::ssl_set</FName>
    <Desc>Procedural style
bool maxdb_ssl_set ( resource $link , string $key , string $cert , string $ca , string $capath , string $cipher )
Object oriented style
bool maxdb::ssl_set ( string $key , string $cert , string $ca , string $capath , string $cipher )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_stat</FName>
    <Desc>Procedural style
string maxdb_stat ( resource $link )
Object oriented style
string maxdb::stat ( void )
maxdb_stat() returns a string containing several information about the MaxDB server running.
</Desc>
    <FName>maxdb::stat</FName>
    <Desc>Procedural style
string maxdb_stat ( resource $link )
Object oriented style
string maxdb::stat ( void )
maxdb_stat() returns a string containing several information about the MaxDB server running.
</Desc>
    <FName>maxdb_stmt_affected_rows</FName>
    <Desc>Procedural style
int maxdb_stmt_affected_rows ( resource $stmt )
Object oriented style
int $maxdb_stmt->affected_rows;
maxdb_stmt_affected_rows() returns the number of rows affected by INSERT, UPDATE, or DELETE query. If the last query was invalid or the number of rows can not determined, this function will return -1.
</Desc>
    <FName>maxdb_stmt::affected_rows</FName>
    <Desc>Procedural style
int maxdb_stmt_affected_rows ( resource $stmt )
Object oriented style
int $maxdb_stmt->affected_rows;
maxdb_stmt_affected_rows() returns the number of rows affected by INSERT, UPDATE, or DELETE query. If the last query was invalid or the number of rows can not determined, this function will return -1.
</Desc>
    <FName>maxdb_stmt_bind_param</FName>
    <Desc>Procedural style
bool maxdb_stmt_bind_param ( resource $stmt , string $types , mixed &$var1 [, mixed &$... ] )
Object oriented style
bool maxdb_stmt::bind_param ( string $types , mixed &$var1 [, mixed &$... ] )
Procedural style (extended syntax):
bool maxdb_stmt_bind_param ( resource $stmt , string $types , array &$var )
Object oriented style (extended syntax):
bool maxdb_stmt::bind_param ( string $types , array &$var )
maxdb_stmt_bind_param() is used to bind variables for the parameter markers in the SQL statement that was passed to maxdb_prepare(). The string types contains one or more characters which specify the types for the corresponding bind variables. 
The extended syntax of maxdb_stmt_bind_param() allows to give the parameters as an array instead of a variable list of PHP variables to the function. If the array variable has not been used before calling maxdb_stmt_bind_param(), it has to be initialized as an emtpy array. See the examples how to use maxdb_stmt_bind_param() with extended syntax. 
Variables for SELECT INTO SQL statements can also be bound using maxdb_stmt_bind_param().
</Desc>
    <FName>maxdb_stmt::bind_param</FName>
    <Desc>Procedural style
bool maxdb_stmt_bind_param ( resource $stmt , string $types , mixed &$var1 [, mixed &$... ] )
Object oriented style
bool maxdb_stmt::bind_param ( string $types , mixed &$var1 [, mixed &$... ] )
Procedural style (extended syntax):
bool maxdb_stmt_bind_param ( resource $stmt , string $types , array &$var )
Object oriented style (extended syntax):
bool maxdb_stmt::bind_param ( string $types , array &$var )
maxdb_stmt_bind_param() is used to bind variables for the parameter markers in the SQL statement that was passed to maxdb_prepare(). The string types contains one or more characters which specify the types for the corresponding bind variables. 
The extended syntax of maxdb_stmt_bind_param() allows to give the parameters as an array instead of a variable list of PHP variables to the function. If the array variable has not been used before calling maxdb_stmt_bind_param(), it has to be initialized as an emtpy array. See the examples how to use maxdb_stmt_bind_param() with extended syntax. 
Variables for SELECT INTO SQL statements can also be bound using maxdb_stmt_bind_param().
</Desc>
    <FName>maxdb_stmt_bind_result</FName>
    <Desc>Procedural style
bool maxdb_stmt_bind_result ( resource $stmt , mixed &$var1 [, mixed &$... ] )
Object oriented style
bool maxdb_stmt::bind_result ( mixed &$var1 [, mixed &$... ] )
maxdb_stmt_bind_result() is used to associate (bind) columns in the result set to variables. When maxdb_stmt_fetch() is called to fetch data, the MaxDB client/server protocol places the data for the bound columns into the specified variables var1, .... 
Note: 
Note that all columns must be bound prior to calling maxdb_stmt_fetch(). Depending on column types bound variables can silently change to the corresponding PHP type. 
A column can be bound or rebound at any time, even after a result set has been partially retrieved. The new binding takes effect the next time maxdb_stmt_fetch() is called.
</Desc>
    <FName>maxdb_stmt::bind_result</FName>
    <Desc>Procedural style
bool maxdb_stmt_bind_result ( resource $stmt , mixed &$var1 [, mixed &$... ] )
Object oriented style
bool maxdb_stmt::bind_result ( mixed &$var1 [, mixed &$... ] )
maxdb_stmt_bind_result() is used to associate (bind) columns in the result set to variables. When maxdb_stmt_fetch() is called to fetch data, the MaxDB client/server protocol places the data for the bound columns into the specified variables var1, .... 
Note: 
Note that all columns must be bound prior to calling maxdb_stmt_fetch(). Depending on column types bound variables can silently change to the corresponding PHP type. 
A column can be bound or rebound at any time, even after a result set has been partially retrieved. The new binding takes effect the next time maxdb_stmt_fetch() is called.
</Desc>
    <FName>maxdb_stmt_close_long_data</FName>
    <Desc>Procedural style
bool maxdb_stmt_close_long_data ( resource $stmt , int $param_nr )
Object oriented style
bool maxdb_stmt::close_long_data ( void )
This function has to be called after a sequence of maxdb_stmt_send_long_data(), that was started after maxdb_execute(). 
param_nr indicates which parameter to associate the end of data with.
</Desc>
    <FName>maxdb_stmt::close_long_data</FName>
    <Desc>Procedural style
bool maxdb_stmt_close_long_data ( resource $stmt , int $param_nr )
Object oriented style
bool maxdb_stmt::close_long_data ( void )
This function has to be called after a sequence of maxdb_stmt_send_long_data(), that was started after maxdb_execute(). 
param_nr indicates which parameter to associate the end of data with.
</Desc>
    <FName>maxdb_stmt_close</FName>
    <Desc>Procedural style
bool maxdb_stmt_close ( resource $stmt )
Object oriented style
bool maxdb_stmt::close ( void )
Closes a prepared statement. maxdb_stmt_close() also deallocates the statement handle pointed to by stmt. If the current statement has pending or unread results, this function cancels them so that the next query can be executed.
</Desc>
    <FName>maxdb_stmt::close</FName>
    <Desc>Procedural style
bool maxdb_stmt_close ( resource $stmt )
Object oriented style
bool maxdb_stmt::close ( void )
Closes a prepared statement. maxdb_stmt_close() also deallocates the statement handle pointed to by stmt. If the current statement has pending or unread results, this function cancels them so that the next query can be executed.
</Desc>
    <FName>maxdb_stmt_data_seek</FName>
    <Desc>Procedural style
bool maxdb_stmt_data_seek ( resource $statement , int $offset )
Object oriented style
bool maxdb_stmt::data_seek ( int $offset )
The maxdb_stmt_data_seek() function seeks to an arbitrary result pointer specified by the offset in the statement result set represented by statement. The offset parameter must be between zero and the total number of rows minus one (0..maxdb_stmt_num_rows() - 1).
</Desc>
    <FName>maxdb_stmt::data_seek</FName>
    <Desc>Procedural style
bool maxdb_stmt_data_seek ( resource $statement , int $offset )
Object oriented style
bool maxdb_stmt::data_seek ( int $offset )
The maxdb_stmt_data_seek() function seeks to an arbitrary result pointer specified by the offset in the statement result set represented by statement. The offset parameter must be between zero and the total number of rows minus one (0..maxdb_stmt_num_rows() - 1).
</Desc>
    <FName>maxdb_stmt_errno</FName>
    <Desc>Procedural style
int maxdb_stmt_errno ( resource $stmt )
Object oriented style
int $maxdb_stmt->errno;
For the statement specified by stmt, maxdb_stmt_errno() returns the error code for the most recently invoked statement function that can succeed or fail. 
Note: 
For possible error codes see documentation of SQLDBC: » http://maxdb.sap.com/documentation/.
</Desc>
    <FName>maxdb_stmt::errno</FName>
    <Desc>Procedural style
int maxdb_stmt_errno ( resource $stmt )
Object oriented style
int $maxdb_stmt->errno;
For the statement specified by stmt, maxdb_stmt_errno() returns the error code for the most recently invoked statement function that can succeed or fail. 
Note: 
For possible error codes see documentation of SQLDBC: » http://maxdb.sap.com/documentation/.
</Desc>
    <FName>maxdb_stmt_error</FName>
    <Desc>Procedural style
string maxdb_stmt_error ( resource $stmt )
Object oriented style
string $maxdb_stmt->error;
For the statement specified by stmt, maxdb_stmt_error() returns a containing the error message for the most recently invoked statement function that can succeed or fail.
</Desc>
    <FName>maxdb_stmt::error</FName>
    <Desc>Procedural style
string maxdb_stmt_error ( resource $stmt )
Object oriented style
string $maxdb_stmt->error;
For the statement specified by stmt, maxdb_stmt_error() returns a containing the error message for the most recently invoked statement function that can succeed or fail.
</Desc>
    <FName>maxdb_stmt_execute</FName>
    <Desc>Procedural style
bool maxdb_stmt_execute ( resource $stmt )
Object oriented style
bool maxdb_stmt::execute ( void )
The maxdb_stmt_execute() function executes a query that has been previously prepared using the maxdb_prepare() function represented by the stmt resource. When executed any parameter markers which exist will automatically be replaced with the appropiate data. 
If the statement is UPDATE, DELETE, or INSERT, the total number of affected rows can be determined by using the maxdb_stmt_affected_rows() function. Likewise, if the query yields a result set the maxdb_fetch() function is used. 
Note: 
When using maxdb_stmt_execute(), the maxdb_fetch() function must be used to fetch the data prior to preforming any additional queries.
</Desc>
    <FName>maxdb_stmt::execute</FName>
    <Desc>Procedural style
bool maxdb_stmt_execute ( resource $stmt )
Object oriented style
bool maxdb_stmt::execute ( void )
The maxdb_stmt_execute() function executes a query that has been previously prepared using the maxdb_prepare() function represented by the stmt resource. When executed any parameter markers which exist will automatically be replaced with the appropiate data. 
If the statement is UPDATE, DELETE, or INSERT, the total number of affected rows can be determined by using the maxdb_stmt_affected_rows() function. Likewise, if the query yields a result set the maxdb_fetch() function is used. 
Note: 
When using maxdb_stmt_execute(), the maxdb_fetch() function must be used to fetch the data prior to preforming any additional queries.
</Desc>
    <FName>maxdb_stmt_fetch</FName>
    <Desc>Procedural style
bool maxdb_stmt_fetch ( resource $stmt )
Object oriented style
bool maxdb_stmt::fetch ( void )
maxdb_stmt_fetch() returns row data using the variables bound by maxdb_stmt_bind_result(). 
Note: 
Note that all columns must be bound by the application before calling maxdb_stmt_fetch().
</Desc>
    <FName>maxdb_stmt::fetch</FName>
    <Desc>Procedural style
bool maxdb_stmt_fetch ( resource $stmt )
Object oriented style
bool maxdb_stmt::fetch ( void )
maxdb_stmt_fetch() returns row data using the variables bound by maxdb_stmt_bind_result(). 
Note: 
Note that all columns must be bound by the application before calling maxdb_stmt_fetch().
</Desc>
    <FName>maxdb_stmt_free_result</FName>
    <Desc>Procedural style
void maxdb_stmt_free_result ( resource $stmt )
Object oriented style
void maxdb_stmt::free_result ( void )
The maxdb_stmt_free_result() function frees the result memory associated with the statement represented by the stmt parameter, which was allocated by maxdb_stmt_store_result().
</Desc>
    <FName>maxdb_stmt::free_result</FName>
    <Desc>Procedural style
void maxdb_stmt_free_result ( resource $stmt )
Object oriented style
void maxdb_stmt::free_result ( void )
The maxdb_stmt_free_result() function frees the result memory associated with the statement represented by the stmt parameter, which was allocated by maxdb_stmt_store_result().
</Desc>
    <FName>maxdb_stmt_init</FName>
    <Desc>Procedural style
resource maxdb_stmt_init ( resource $link )
Object oriented style
object maxdb::stmt_init ( void )
Allocates and initializes a statement resource suitable for maxdb_stmt_prepare(). 
Note: 
Any subsequent calls to any maxdb_stmt function will fail until maxdb_stmt_prepare() was called.
</Desc>
    <FName>maxdb::stmt_init</FName>
    <Desc>Procedural style
resource maxdb_stmt_init ( resource $link )
Object oriented style
object maxdb::stmt_init ( void )
Allocates and initializes a statement resource suitable for maxdb_stmt_prepare(). 
Note: 
Any subsequent calls to any maxdb_stmt function will fail until maxdb_stmt_prepare() was called.
</Desc>
    <FName>maxdb_stmt_num_rows</FName>
    <Desc>Procedural style
int maxdb_stmt_num_rows ( resource $stmt )
Object oriented style
int $maxdb_stmt->num_rows;
Returns the number of rows in the result set.
</Desc>
    <FName>maxdb_stmt::num_rows</FName>
    <Desc>Procedural style
int maxdb_stmt_num_rows ( resource $stmt )
Object oriented style
int $maxdb_stmt->num_rows;
Returns the number of rows in the result set.
</Desc>
    <FName>maxdb_stmt_param_count</FName>
    <Desc>Procedural style
int maxdb_stmt_param_count ( resource $stmt )
Object oriented style
int $maxdb_stmt->param_count;
maxdb_stmt_param_count() returns the number of parameter markers present in the prepared statement.
</Desc>
    <FName>maxdb_stmt::param_count</FName>
    <Desc>Procedural style
int maxdb_stmt_param_count ( resource $stmt )
Object oriented style
int $maxdb_stmt->param_count;
maxdb_stmt_param_count() returns the number of parameter markers present in the prepared statement.
</Desc>
    <FName>maxdb_stmt_prepare</FName>
    <Desc>Procedural style
bool maxdb_stmt_prepare ( resource $stmt , string $query )
Object oriented style
mixed maxdb_stmt::prepare ( string $query )
maxdb_stmt_prepare() prepares the SQL query pointed to by the null-terminated string query. The statement resource has to be allocated by maxdb_stmt_init(). The query must consist of a single SQL statement. 
Note: 
You should not add a terminating semicolon or \g to the statement. 
The parameter query can include one or more parameter markers in the SQL statement by embedding question mark (?) characters at the appropriate positions. 
Note: 
The markers are legal only in certain places in SQL statements. For example, they are allowed in the VALUES() list of an INSERT statement (to specify column values for a row), or in a comparison with a column in a WHERE clause to specify a comparison value. 
However, they are not allowed for identifiers (such as table or column names), in the select list that names the columns to be returned by a SELECT statement), or to specify both operands of a binary operator such as the = equal sign. The latter restriction is necessary because it would be impossible to determine the parameter type. In general, parameters are legal only in Data Manipulation Languange (DML) statements, and not in Data Defination Language (DDL) statements. 
The parameter markers must be bound to application variables using maxdb_stmt_bind_param() and/or maxdb_stmt_bind_result() before executing the statement or fetching rows.
</Desc>
    <FName>maxdb_stmt::prepare</FName>
    <Desc>Procedural style
bool maxdb_stmt_prepare ( resource $stmt , string $query )
Object oriented style
mixed maxdb_stmt::prepare ( string $query )
maxdb_stmt_prepare() prepares the SQL query pointed to by the null-terminated string query. The statement resource has to be allocated by maxdb_stmt_init(). The query must consist of a single SQL statement. 
Note: 
You should not add a terminating semicolon or \g to the statement. 
The parameter query can include one or more parameter markers in the SQL statement by embedding question mark (?) characters at the appropriate positions. 
Note: 
The markers are legal only in certain places in SQL statements. For example, they are allowed in the VALUES() list of an INSERT statement (to specify column values for a row), or in a comparison with a column in a WHERE clause to specify a comparison value. 
However, they are not allowed for identifiers (such as table or column names), in the select list that names the columns to be returned by a SELECT statement), or to specify both operands of a binary operator such as the = equal sign. The latter restriction is necessary because it would be impossible to determine the parameter type. In general, parameters are legal only in Data Manipulation Languange (DML) statements, and not in Data Defination Language (DDL) statements. 
The parameter markers must be bound to application variables using maxdb_stmt_bind_param() and/or maxdb_stmt_bind_result() before executing the statement or fetching rows.
</Desc>
    <FName>maxdb_stmt_reset</FName>
    <Desc>Procedural style
bool maxdb_stmt_reset ( resource $stmt )
Object oriented style
bool maxdb_stmt::reset ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_stmt::reset</FName>
    <Desc>Procedural style
bool maxdb_stmt_reset ( resource $stmt )
Object oriented style
bool maxdb_stmt::reset ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>maxdb_stmt_result_metadata</FName>
    <Desc>Procedural style
resource maxdb_stmt_result_metadata ( resource $stmt )
Object oriented style
resource maxdb_stmt::result_metadata ( void )
If a statement passed to maxdb_prepare() is one that produces a result set, maxdb_stmt_result_metadata() returns the result resource that can be used to process the meta information such as total number of fields and individual field information. 
Note: 
This result set pointer can be passed as an argument to any of the field-based functions that process result set metadata, such as: 
maxdb_num_fields()
maxdb_fetch_field()
maxdb_fetch_field_direct()
maxdb_fetch_fields()
maxdb_field_count()
maxdb_field_seek()
maxdb_field_tell()
maxdb_free_result()
The result set structure should be freed when you are done with it, which you can do by passing it to maxdb_free_result() 
Note: 
The result set returned by maxdb_stmt_result_metadata() contains only metadata. It does not contain any row results. The rows are obtained by using the statement handle with maxdb_fetch().
</Desc>
    <FName>maxdb_stmt::result_metadata</FName>
    <Desc>Procedural style
resource maxdb_stmt_result_metadata ( resource $stmt )
Object oriented style
resource maxdb_stmt::result_metadata ( void )
If a statement passed to maxdb_prepare() is one that produces a result set, maxdb_stmt_result_metadata() returns the result resource that can be used to process the meta information such as total number of fields and individual field information. 
Note: 
This result set pointer can be passed as an argument to any of the field-based functions that process result set metadata, such as: 
maxdb_num_fields()
maxdb_fetch_field()
maxdb_fetch_field_direct()
maxdb_fetch_fields()
maxdb_field_count()
maxdb_field_seek()
maxdb_field_tell()
maxdb_free_result()
The result set structure should be freed when you are done with it, which you can do by passing it to maxdb_free_result() 
Note: 
The result set returned by maxdb_stmt_result_metadata() contains only metadata. It does not contain any row results. The rows are obtained by using the statement handle with maxdb_fetch().
</Desc>
    <FName>maxdb_stmt_send_long_data</FName>
    <Desc>Procedural style
bool maxdb_stmt_send_long_data ( resource $stmt , int $param_nr , string $data )
Object oriented style
bool maxdb_stmt::stmt_send_long_data ( int $param_nr , string $data )
Allows to send parameter data to the server in pieces (or chunks). This function can be called multiple times to send the parts of a character or binary data value for a column, which must be one of the TEXT or BLOB datatypes. 
param_nr indicates which parameter to associate the data with.
</Desc>
    <FName>maxdb_stmt::send_long_data</FName>
    <Desc>Procedural style
bool maxdb_stmt_send_long_data ( resource $stmt , int $param_nr , string $data )
Object oriented style
bool maxdb_stmt::stmt_send_long_data ( int $param_nr , string $data )
Allows to send parameter data to the server in pieces (or chunks). This function can be called multiple times to send the parts of a character or binary data value for a column, which must be one of the TEXT or BLOB datatypes. 
param_nr indicates which parameter to associate the data with.
</Desc>
    <FName>maxdb_stmt_sqlstate</FName>
    <Desc>string maxdb_stmt_sqlstate ( resource $stmt )
Returns a string containing the SQLSTATE error code for the most recently invoked prepared statement function that can succeed or fail. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. 
Note: 
Note that not all MaxDB errors are yet mapped to SQLSTATE's. The value HY000 (general error) is used for unmapped errors.
</Desc>
    <FName>maxdb_stmt_store_result</FName>
    <Desc>Procedural style
bool maxdb_stmt_store_result ( resource $stmt )
Object oriented style
object maxdb_stmt::store_result ( void )
maxdb_stmt_store_result() has no functionally effect and should not be used for retrieving data from MaxDB server.
</Desc>
    <FName>maxdb_stmt::store_result</FName>
    <Desc>Procedural style
bool maxdb_stmt_store_result ( resource $stmt )
Object oriented style
object maxdb_stmt::store_result ( void )
maxdb_stmt_store_result() has no functionally effect and should not be used for retrieving data from MaxDB server.
</Desc>
    <FName>maxdb_store_result</FName>
    <Desc>Procedural style
resource maxdb_store_result ( resource $link )
Object oriented style
object maxdb::store_result ( void )
This function has no functionally effect.
</Desc>
    <FName>maxdb::store_result</FName>
    <Desc>Procedural style
resource maxdb_store_result ( resource $link )
Object oriented style
object maxdb::store_result ( void )
This function has no functionally effect.
</Desc>
    <FName>maxdb_thread_id</FName>
    <Desc>Procedural style
int maxdb_thread_id ( resource $link )
Object oriented style
int $maxdb->thread_id;
The maxdb_thread_id() function returns the thread ID for the current connection which can then be killed using the maxdb_kill() function. If the connection is lost and you reconnect with maxdb_ping(), the thread ID will be other. Therefore you should get the thread ID only when you need it. 
Note: 
The thread ID is assigned on a connection-by-connection basis. Hence, if the connection is broken and then re-established a new thread ID will be assigned.
</Desc>
    <FName>maxdb::thread_id</FName>
    <Desc>Procedural style
int maxdb_thread_id ( resource $link )
Object oriented style
int $maxdb->thread_id;
The maxdb_thread_id() function returns the thread ID for the current connection which can then be killed using the maxdb_kill() function. If the connection is lost and you reconnect with maxdb_ping(), the thread ID will be other. Therefore you should get the thread ID only when you need it. 
Note: 
The thread ID is assigned on a connection-by-connection basis. Hence, if the connection is broken and then re-established a new thread ID will be assigned.
</Desc>
    <FName>maxdb_thread_safe</FName>
    <Desc>bool maxdb_thread_safe ( void )
maxdb_thread_safe() indicates whether the client library is compiled as thread-safe.
</Desc>
    <FName>maxdb_use_result</FName>
    <Desc>Procedural style
resource maxdb_use_result ( resource $link )
Object oriented style
resource maxdb::use_result ( void )
maxdb_use_result() has no effect.
</Desc>
    <FName>maxdb::use_result</FName>
    <Desc>Procedural style
resource maxdb_use_result ( resource $link )
Object oriented style
resource maxdb::use_result ( void )
maxdb_use_result() has no effect.
</Desc>
    <FName>maxdb_warning_count</FName>
    <Desc>Procedural style
int maxdb_warning_count ( resource $link )
Object oriented style
int $maxdb->warning_count;
maxdb_warning_count() returns the number of warnings from the last query in the connection represented by the link parameter.
</Desc>
    <FName>maxdb::warning_count</FName>
    <Desc>Procedural style
int maxdb_warning_count ( resource $link )
Object oriented style
int $maxdb->warning_count;
maxdb_warning_count() returns the number of warnings from the last query in the connection represented by the link parameter.
</Desc>
    <FName>mb_check_encoding</FName>
    <Desc>bool mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] )
Checks if the specified byte stream is valid for the specified encoding. It is useful to prevent so-called "Invalid Encoding Attack".
</Desc>
    <FName>mb_chr</FName>
    <Desc>string mb_chr ( int $cp [, string $encoding ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mb_convert_case</FName>
    <Desc>string mb_convert_case ( string $str , int $mode [, string $encoding = mb_internal_encoding() ] )
Performs case folding on a string, converted in the way specified by mode.
</Desc>
    <FName>mb_convert_encoding</FName>
    <Desc>string mb_convert_encoding ( string $str , string $to_encoding [, mixed $from_encoding = mb_internal_encoding() ] )
Converts the character encoding of string str to to_encoding from optionally from_encoding.
</Desc>
    <FName>mb_convert_kana</FName>
    <Desc>string mb_convert_kana ( string $str [, string $option = "KV" [, string $encoding = mb_internal_encoding() ]] )
Performs a "han-kaku" - "zen-kaku" conversion for string str. This function is only useful for Japanese.
</Desc>
    <FName>mb_convert_variables</FName>
    <Desc>string mb_convert_variables ( string $to_encoding , mixed $from_encoding , mixed &$vars [, mixed &$... ] )
Converts character encoding of variables vars in encoding from_encoding to encoding to_encoding. 
mb_convert_variables() join strings in Array or Object to detect encoding, since encoding detection tends to fail for short strings. Therefore, it is impossible to mix encoding in single array or object.
</Desc>
    <FName>mb_decode_mimeheader</FName>
    <Desc>string mb_decode_mimeheader ( string $str )
Decodes encoded-word string str in MIME header.
</Desc>
    <FName>mb_decode_numericentity</FName>
    <Desc>string mb_decode_numericentity ( string $str , array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE ]] )
Convert numeric string reference of string str in a specified block to character.
</Desc>
    <FName>mb_detect_encoding</FName>
    <Desc>string mb_detect_encoding ( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = FALSE ]] )
Detects character encoding in string str.
</Desc>
    <FName>mb_detect_order</FName>
    <Desc>mixed mb_detect_order ([ mixed $encoding_list = mb_detect_order() ] )
Sets the automatic character encoding detection order to encoding_list.
</Desc>
    <FName>mb_encode_mimeheader</FName>
    <Desc>string mb_encode_mimeheader ( string $str [, string $charset = determined by mb_language() [, string $transfer_encoding = "B" [, string $linefeed = "\r\n" [, int $indent = 0 ]]]] )
Encodes a given string str by the MIME header encoding scheme.
</Desc>
    <FName>mb_encode_numericentity</FName>
    <Desc>string mb_encode_numericentity ( string $str , array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE ]] )
Converts specified character codes in string str from character code to HTML numeric character reference.
</Desc>
    <FName>mb_encoding_aliases</FName>
    <Desc>array mb_encoding_aliases ( string $encoding )
Returns an array of aliases for a known encoding type.
</Desc>
    <FName>mb_ereg_match</FName>
    <Desc>bool mb_ereg_match ( string $pattern , string $string [, string $option = "msr" ] )
A regular expression match for a multibyte string
</Desc>
    <FName>mb_ereg_replace_callback</FName>
    <Desc>string mb_ereg_replace_callback ( string $pattern , callable $callback , string $string [, string $option = "msr" ] )
Scans string for matches to pattern, then replaces the matched text with the output of callback function. 
The behavior of this function is almost identical to mb_ereg_replace(), except for the fact that instead of replacement parameter, one should specify a callback.
</Desc>
    <FName>mb_ereg_replace</FName>
    <Desc>string mb_ereg_replace ( string $pattern , string $replacement , string $string [, string $option = "msr" ] )
Scans string for matches to pattern, then replaces the matched text with replacement
</Desc>
    <FName>mb_ereg_search_getpos</FName>
    <Desc>int mb_ereg_search_getpos ( void )
Returns the start point for the next regular expression match.
</Desc>
    <FName>mb_ereg_search_getregs</FName>
    <Desc>array mb_ereg_search_getregs ( void )
Retrieve the result from the last multibyte regular expression match
</Desc>
    <FName>mb_ereg_search_init</FName>
    <Desc>bool mb_ereg_search_init ( string $string [, string $pattern [, string $option = "msr" ]] )
mb_ereg_search_init() sets string and pattern for a multibyte regular expression. These values are used for mb_ereg_search(), mb_ereg_search_pos(), and mb_ereg_search_regs().
</Desc>
    <FName>mb_ereg_search_pos</FName>
    <Desc>array mb_ereg_search_pos ([ string $pattern [, string $option = "ms" ]] )
Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string 
The string for match is specified by mb_ereg_search_init(). If it is not specified, the previous one will be used.
</Desc>
    <FName>mb_ereg_search_regs</FName>
    <Desc>array mb_ereg_search_regs ([ string $pattern [, string $option = "ms" ]] )
Returns the matched part of a multibyte regular expression.
</Desc>
    <FName>mb_ereg_search_setpos</FName>
    <Desc>bool mb_ereg_search_setpos ( int $position )
mb_ereg_search_setpos() sets the starting point of a match for mb_ereg_search().
</Desc>
    <FName>mb_ereg_search</FName>
    <Desc>bool mb_ereg_search ([ string $pattern [, string $option = "ms" ]] )
Performs a multibyte regular expression match for a predefined multibyte string.
</Desc>
    <FName>mb_ereg</FName>
    <Desc>int mb_ereg ( string $pattern , string $string [, array &$regs ] )
Executes the regular expression match with multibyte support.
</Desc>
    <FName>mb_eregi_replace</FName>
    <Desc>string mb_eregi_replace ( string $pattern , string $replace , string $string [, string $option = "msri" ] )
Scans string for matches to pattern, then replaces the matched text with replacement.
</Desc>
    <FName>mb_eregi</FName>
    <Desc>int mb_eregi ( string $pattern , string $string [, array &$regs ] )
Executes the case insensitive regular expression match with multibyte support.
</Desc>
    <FName>mb_get_info</FName>
    <Desc>mixed mb_get_info ([ string $type = "all" ] )
mb_get_info() returns the internal setting parameters of mbstring.
</Desc>
    <FName>mb_http_input</FName>
    <Desc>mixed mb_http_input ([ string $type = "" ] )
Detects the HTTP input character encoding.
</Desc>
    <FName>mb_http_output</FName>
    <Desc>mixed mb_http_output ([ string $encoding = mb_http_output() ] )
Set/Get the HTTP output character encoding. Output after this function is called will be converted from the set internal encoding to encoding.
</Desc>
    <FName>mb_internal_encoding</FName>
    <Desc>mixed mb_internal_encoding ([ string $encoding = mb_internal_encoding() ] )
Set/Get the internal character encoding
</Desc>
    <FName>mb_language</FName>
    <Desc>mixed mb_language ([ string $language = mb_language() ] )
Set/Get the current language.
</Desc>
    <FName>mb_list_encodings</FName>
    <Desc>array mb_list_encodings ( void )
Returns an array containing all supported encodings.
</Desc>
    <FName>mb_ord</FName>
    <Desc>int mb_ord ( string $str [, string $encoding ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mb_output_handler</FName>
    <Desc>string mb_output_handler ( string $contents , int $status )
mb_output_handler() is ob_start() callback function. mb_output_handler() converts characters in the output buffer from internal character encoding to HTTP output character encoding.
</Desc>
    <FName>mb_parse_str</FName>
    <Desc>bool mb_parse_str ( string $encoded_string [, array &$result ] )
Parses GET/POST/COOKIE data and sets global variables. Since PHP does not provide raw POST/COOKIE data, it can only be used for GET data for now. It parses URL encoded data, detects encoding, converts coding to internal encoding and set values to the result array or global variables.
</Desc>
    <FName>mb_preferred_mime_name</FName>
    <Desc>string mb_preferred_mime_name ( string $encoding )
Get a MIME charset string for a specific encoding.
</Desc>
    <FName>mb_regex_encoding</FName>
    <Desc>mixed mb_regex_encoding ([ string $encoding = mb_regex_encoding() ] )
Set/Get character encoding for a multibyte regex.
</Desc>
    <FName>mb_regex_set_options</FName>
    <Desc>string mb_regex_set_options ([ string $options = mb_regex_set_options() ] )
Sets the default options described by options for multibyte regex functions.
</Desc>
    <FName>mb_scrub</FName>
    <Desc>string mb_scrub ( string $str [, string $encoding ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mb_send_mail</FName>
    <Desc>bool mb_send_mail ( string $to , string $subject , string $message [, mixed $additional_headers = NULL [, string $additional_parameter = NULL ]] )
Sends email. Headers and messages are converted and encoded according to the mb_language() setting. It's a wrapper function for mail(), so see also mail() for details.
</Desc>
    <FName>mb_split</FName>
    <Desc>array mb_split ( string $pattern , string $string [, int $limit = -1 ] )
Split a multibyte string using regular expression pattern and returns the result as an array.
</Desc>
    <FName>mb_strcut</FName>
    <Desc>string mb_strcut ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )
mb_strcut() extracts a substring from a string similarly to mb_substr(), but operates on bytes instead of characters. If the cut position happens to be between two bytes of a multi-byte character, the cut is performed starting from the first byte of that character. This is also the difference to the substr() function, which would simply cut the string between the bytes and thus result in a malformed byte sequence.
</Desc>
    <FName>mb_strimwidth</FName>
    <Desc>string mb_strimwidth ( string $str , int $start , int $width [, string $trimmarker = "" [, string $encoding = mb_internal_encoding() ]] )
Truncates string str to specified width.
</Desc>
    <FName>mb_stripos</FName>
    <Desc>int mb_stripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )
mb_stripos() returns the numeric position of the first occurrence of needle in the haystack string. Unlike mb_strpos(), mb_stripos() is case-insensitive. If needle is not found, it returns FALSE.
</Desc>
    <FName>mb_stristr</FName>
    <Desc>string mb_stristr ( string $haystack , string $needle [, bool $before_needle = FALSE [, string $encoding = mb_internal_encoding() ]] )
mb_stristr() finds the first occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strstr(), mb_stristr() is case-insensitive. If needle is not found, it returns FALSE.
</Desc>
    <FName>mb_strlen</FName>
    <Desc>int mb_strlen ( string $str [, string $encoding = mb_internal_encoding() ] )
Gets the length of a string.
</Desc>
    <FName>mb_strpos</FName>
    <Desc>int mb_strpos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )
Finds position of the first occurrence of a string in a string. 
Performs a multi-byte safe strpos() operation based on number of characters. The first character's position is 0, the second character position is 1, and so on.
</Desc>
    <FName>mb_strrchr</FName>
    <Desc>string mb_strrchr ( string $haystack , string $needle [, bool $part = FALSE [, string $encoding = mb_internal_encoding() ]] )
mb_strrchr() finds the last occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.
</Desc>
    <FName>mb_strrichr</FName>
    <Desc>string mb_strrichr ( string $haystack , string $needle [, bool $part = FALSE [, string $encoding = mb_internal_encoding() ]] )
mb_strrichr() finds the last occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strrchr(), mb_strrichr() is case-insensitive. If needle is not found, it returns FALSE.
</Desc>
    <FName>mb_strripos</FName>
    <Desc>int mb_strripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )
mb_strripos() performs multi-byte safe strripos() operation based on number of characters. needle position is counted from the beginning of haystack. First character's position is 0. Second character position is 1. Unlike mb_strrpos(), mb_strripos() is case-insensitive.
</Desc>
    <FName>mb_strrpos</FName>
    <Desc>int mb_strrpos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )
Performs a multibyte safe strrpos() operation based on the number of characters. needle position is counted from the beginning of haystack. First character's position is 0. Second character position is 1.
</Desc>
    <FName>mb_strstr</FName>
    <Desc>string mb_strstr ( string $haystack , string $needle [, bool $before_needle = FALSE [, string $encoding = mb_internal_encoding() ]] )
mb_strstr() finds the first occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.
</Desc>
    <FName>mb_strtolower</FName>
    <Desc>string mb_strtolower ( string $str [, string $encoding = mb_internal_encoding() ] )
Returns str with all alphabetic characters converted to lowercase.
</Desc>
    <FName>mb_strtoupper</FName>
    <Desc>string mb_strtoupper ( string $str [, string $encoding = mb_internal_encoding() ] )
Returns str with all alphabetic characters converted to uppercase.
</Desc>
    <FName>mb_strwidth</FName>
    <Desc>int mb_strwidth ( string $str [, string $encoding = mb_internal_encoding() ] )
Returns the width of string str, where halfwidth characters count as 1, and fullwidth characters count as 2. 
The fullwidth characters are: U+1100-U+115F, U+11A3-U+11A7, U+11FA-U+11FF, U+2329-U+232A, U+2E80-U+2E99, U+2E9B-U+2EF3, U+2F00-U+2FD5, U+2FF0-U+2FFB, U+3000-U+303E, U+3041-U+3096, U+3099-U+30FF, U+3105-U+312D, U+3131-U+318E, U+3190-U+31BA, U+31C0-U+31E3, U+31F0-U+321E, U+3220-U+3247, U+3250-U+32FE, U+3300-U+4DBF, U+4E00-U+A48C, U+A490-U+A4C6, U+A960-U+A97C, U+AC00-U+D7A3, U+D7B0-U+D7C6, U+D7CB-U+D7FB, U+F900-U+FAFF, U+FE10-U+FE19, U+FE30-U+FE52, U+FE54-U+FE66, U+FE68-U+FE6B, U+FF01-U+FF60, U+FFE0-U+FFE6, U+1B000-U+1B001, U+1F200-U+1F202, U+1F210-U+1F23A, U+1F240-U+1F248, U+1F250-U+1F251, U+20000-U+2FFFD, U+30000-U+3FFFD. All other characters are halfwidth characters.
</Desc>
    <FName>mb_substitute_character</FName>
    <Desc>mixed mb_substitute_character ([ mixed $substchar = mb_substitute_character() ] )
Specifies a substitution character when input character encoding is invalid or character code does not exist in output character encoding. Invalid characters may be substituted NULL (no output), string or integer value (Unicode character code value). 
This setting affects mb_convert_encoding(), mb_convert_variables(), mb_output_handler(), and mb_send_mail().
</Desc>
    <FName>mb_substr_count</FName>
    <Desc>int mb_substr_count ( string $haystack , string $needle [, string $encoding = mb_internal_encoding() ] )
Counts the number of times the needle substring occurs in the haystack string.
</Desc>
    <FName>mb_substr</FName>
    <Desc>string mb_substr ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )
Performs a multi-byte safe substr() operation based on number of characters. Position is counted from the beginning of str. First character's position is 0. Second character position is 1, and so on.
</Desc>
    <FName>mcrypt_cbc</FName>
    <Desc>string mcrypt_cbc ( int $cipher , string $key , string $data , int $mode [, string $iv ] )
string mcrypt_cbc ( string $cipher , string $key , string $data , int $mode [, string $iv ] )
The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. 
</Desc>
    <FName>mcrypt_cfb</FName>
    <Desc>string mcrypt_cfb ( int $cipher , string $key , string $data , int $mode , string $iv )
string mcrypt_cfb ( string $cipher , string $key , string $data , int $mode [, string $iv ] )
The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. 
</Desc>
    <FName>mcrypt_create_iv</FName>
    <Desc>string mcrypt_create_iv ( int $size [, int $source = MCRYPT_DEV_URANDOM ] )
Creates an initialization vector (IV) from a random source. 
The IV is only meant to give an alternative seed to the encryption routines. This IV does not need to be secret at all, though it can be desirable. You even can send it along with your ciphertext without losing security.
</Desc>
    <FName>mcrypt_decrypt</FName>
    <Desc>string mcrypt_decrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )
Decrypts the data and returns the unencrypted data.
</Desc>
    <FName>mcrypt_ecb</FName>
    <Desc>string mcrypt_ecb ( int $cipher , string $key , string $data , int $mode )
string mcrypt_ecb ( string $cipher , string $key , string $data , int $mode [, string $iv ] )
The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. 
</Desc>
    <FName>mcrypt_enc_get_algorithms_name</FName>
    <Desc>string mcrypt_enc_get_algorithms_name ( resource $td )
This function returns the name of the algorithm.
</Desc>
    <FName>mcrypt_enc_get_block_size</FName>
    <Desc>int mcrypt_enc_get_block_size ( resource $td )
Gets the blocksize of the opened algorithm.
</Desc>
    <FName>mcrypt_enc_get_iv_size</FName>
    <Desc>int mcrypt_enc_get_iv_size ( resource $td )
This function returns the size of the IV of the algorithm specified by the encryption descriptor in bytes. An IV is used in cbc, cfb and ofb modes, and in some algorithms in stream mode.
</Desc>
    <FName>mcrypt_enc_get_key_size</FName>
    <Desc>int mcrypt_enc_get_key_size ( resource $td )
Gets the maximum supported key size of the algorithm in bytes.
</Desc>
    <FName>mcrypt_enc_get_modes_name</FName>
    <Desc>string mcrypt_enc_get_modes_name ( resource $td )
This function returns the name of the mode.
</Desc>
    <FName>mcrypt_enc_get_supported_key_sizes</FName>
    <Desc>array mcrypt_enc_get_supported_key_sizes ( resource $td )
Gets the supported key sizes of the opened algorithm.
</Desc>
    <FName>mcrypt_enc_is_block_algorithm_mode</FName>
    <Desc>bool mcrypt_enc_is_block_algorithm_mode ( resource $td )
Tells whether the algorithm of the opened mode works on blocks (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb)..
</Desc>
    <FName>mcrypt_enc_is_block_algorithm</FName>
    <Desc>bool mcrypt_enc_is_block_algorithm ( resource $td )
Tells whether the algorithm of the opened mode is a block algorithm.
</Desc>
    <FName>mcrypt_enc_is_block_mode</FName>
    <Desc>bool mcrypt_enc_is_block_mode ( resource $td )
Tells whether the opened mode outputs blocks (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream).
</Desc>
    <FName>mcrypt_enc_self_test</FName>
    <Desc>int mcrypt_enc_self_test ( resource $td )
This function runs the self test on the algorithm specified by the descriptor td.
</Desc>
    <FName>mcrypt_encrypt</FName>
    <Desc>string mcrypt_encrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )
Encrypts the data and returns it.
</Desc>
    <FName>mcrypt_generic_deinit</FName>
    <Desc>bool mcrypt_generic_deinit ( resource $td )
This function terminates encryption specified by the encryption descriptor (td). It clears all buffers, but does not close the module. You need to call mcrypt_module_close() yourself. (But PHP does this for you at the end of the script.)
</Desc>
    <FName>mcrypt_generic_end</FName>
    <Desc>bool mcrypt_generic_end ( resource $td )
Warning 
mcrypt_generic_deinit() should be used instead of this function, as it can cause crashes when used with mcrypt_module_close() due to multiple buffer frees. 
This function terminates encryption specified by the encryption descriptor (td). Actually it clears all buffers, and closes all the modules used. Returns FALSE on error, or TRUE on success. 
</Desc>
    <FName>mcrypt_generic_init</FName>
    <Desc>int mcrypt_generic_init ( resource $td , string $key , string $iv )
You need to call this function before every call to mcrypt_generic() or mdecrypt_generic().
</Desc>
    <FName>mcrypt_generic</FName>
    <Desc>string mcrypt_generic ( resource $td , string $data )
This function encrypts data. The data is padded with "\0" to make sure the length of the data is n * blocksize. This function returns the encrypted data. Note that the length of the returned string can in fact be longer than the input, due to the padding of the data. 
If you want to store the encrypted data in a database make sure to store the entire string as returned by mcrypt_generic, or the string will not entirely decrypt properly. If your original string is 10 characters long and the block size is 8 (use mcrypt_enc_get_block_size() to determine the blocksize), you would need at least 16 characters in your database field. Note the string returned by mdecrypt_generic() will be 16 characters as well...use rtrim($str, "\0") to remove the padding. 
If you are for example storing the data in a MySQL database remember that varchar fields automatically have trailing spaces removed during insertion. As encrypted data can end in a space (ASCII 32), the data will be damaged by this removal. Store data in a tinyblob/tinytext (or larger) field instead.
</Desc>
    <FName>mcrypt_get_block_size</FName>
    <Desc>int mcrypt_get_block_size ( int $cipher )
int mcrypt_get_block_size ( string $cipher , string $mode )
The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x. 
mcrypt_get_block_size() is used to get the size of a block of the specified cipher (in combination with an encryption mode). 
It is more useful to use the mcrypt_enc_get_block_size() function as this uses the resource returned by mcrypt_module_open().
</Desc>
    <FName>mcrypt_get_cipher_name</FName>
    <Desc>string mcrypt_get_cipher_name ( int $cipher )
string mcrypt_get_cipher_name ( string $cipher )
mcrypt_get_cipher_name() is used to get the name of the specified cipher. 
mcrypt_get_cipher_name() takes the cipher number as an argument (libmcrypt 2.2.x) or takes the cipher name as an argument (libmcrypt 2.4.x or higher) and returns the name of the cipher or FALSE, if the cipher does not exist.
</Desc>
    <FName>mcrypt_get_iv_size</FName>
    <Desc>int mcrypt_get_iv_size ( string $cipher , string $mode )
Gets the size of the IV belonging to a specific cipher/mode combination. 
It is more useful to use the mcrypt_enc_get_iv_size() function as this uses the resource returned by mcrypt_module_open().
</Desc>
    <FName>mcrypt_get_key_size</FName>
    <Desc>int mcrypt_get_key_size ( int $cipher )
int mcrypt_get_key_size ( string $cipher , string $mode )
The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x. 
mcrypt_get_key_size() is used to get the size of a key of the specified cipher (in combination with an encryption mode). 
It is more useful to use the mcrypt_enc_get_key_size() function as this uses the resource returned by mcrypt_module_open().
</Desc>
    <FName>mcrypt_list_algorithms</FName>
    <Desc>array mcrypt_list_algorithms ([ string $lib_dir = ini_get("mcrypt.algorithms_dir") ] )
Gets the list of all supported algorithms in the lib_dir parameter.
</Desc>
    <FName>mcrypt_list_modes</FName>
    <Desc>array mcrypt_list_modes ([ string $lib_dir = ini_get("mcrypt.modes_dir") ] )
Gets the list of all supported modes in the lib_dir parameter.
</Desc>
    <FName>mcrypt_module_close</FName>
    <Desc>bool mcrypt_module_close ( resource $td )
Closes the specified encryption handle.
</Desc>
    <FName>mcrypt_module_get_algo_block_size</FName>
    <Desc>int mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] )
Gets the blocksize of the specified algorithm.
</Desc>
    <FName>mcrypt_module_get_algo_key_size</FName>
    <Desc>int mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] )
Gets the maximum supported keysize of the opened mode.
</Desc>
    <FName>mcrypt_module_get_supported_key_sizes</FName>
    <Desc>array mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] )
Returns an array with the key sizes supported by the specified algorithm. If it returns an empty array then all key sizes between 1 and mcrypt_module_get_algo_key_size() are supported by the algorithm.
</Desc>
    <FName>mcrypt_module_is_block_algorithm_mode</FName>
    <Desc>bool mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] )
This function returns TRUE if the mode is for use with block algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb).
</Desc>
    <FName>mcrypt_module_is_block_algorithm</FName>
    <Desc>bool mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] )
This function returns TRUE if the specified algorithm is a block algorithm, or FALSE if it is a stream one.
</Desc>
    <FName>mcrypt_module_is_block_mode</FName>
    <Desc>bool mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] )
This function returns TRUE if the mode outputs blocks of bytes or FALSE if it outputs just bytes. (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream).
</Desc>
    <FName>mcrypt_module_open</FName>
    <Desc>resource mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory )
This function opens the module of the algorithm and the mode to be used. The name of the algorithm is specified in algorithm, e.g. "twofish" or is one of the MCRYPT_ciphername constants. The module is closed by calling mcrypt_module_close().
</Desc>
    <FName>mcrypt_module_self_test</FName>
    <Desc>bool mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] )
This function runs the self test on the algorithm specified.
</Desc>
    <FName>mcrypt_ofb</FName>
    <Desc>string mcrypt_ofb ( int $cipher , string $key , string $data , int $mode , string $iv )
string mcrypt_ofb ( string $cipher , string $key , string $data , int $mode [, string $iv ] )
The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT. 
</Desc>
    <FName>md5_file</FName>
    <Desc>string md5_file ( string $filename [, bool $raw_output = FALSE ] )
Calculates the MD5 hash of the file specified by the filename parameter using the » RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash. The hash is a 32-character hexadecimal number.
</Desc>
    <FName>md5</FName>
    <Desc>string md5 ( string $str [, bool $raw_output = FALSE ] )
Calculates the MD5 hash of str using the » RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash.
</Desc>
    <FName>mdecrypt_generic</FName>
    <Desc>string mdecrypt_generic ( resource $td , string $data )
This function decrypts data. Note that the length of the returned string can in fact be longer than the unencrypted string, due to the padding of the data.
</Desc>
    <FName>memcache_debug</FName>
    <Desc>bool memcache_debug ( bool $on_off )
memcache_debug() turns on debug output if parameter on_off is equal to TRUE and turns off if it's FALSE. 
Note: 
memcache_debug() is accessible only if PHP was built with --enable-debug option and always returns TRUE in this case. Otherwise, this function has no effect and always returns FALSE.
</Desc>
    <FName>memory_get_peak_usage</FName>
    <Desc>int memory_get_peak_usage ([ bool $real_usage = FALSE ] )
Returns the peak of memory, in bytes, that's been allocated to your PHP script.
</Desc>
    <FName>memory_get_usage</FName>
    <Desc>int memory_get_usage ([ bool $real_usage = FALSE ] )
Returns the amount of memory, in bytes, that's currently being allocated to your PHP script.
</Desc>
    <FName>metaphone</FName>
    <Desc>string metaphone ( string $str [, int $phonemes = 0 ] )
Calculates the metaphone key of str. 
Similar to soundex() metaphone creates the same key for similar sounding words. It's more accurate than soundex() as it knows the basic rules of English pronunciation. The metaphone generated keys are of variable length. 
Metaphone was developed by Lawrence Philips <lphilips at verity dot com>. It is described in ["Practical Algorithms for Programmers", Binstock & Rex, Addison Wesley, 1995].
</Desc>
    <FName>method_exists</FName>
    <Desc>bool method_exists ( mixed $object , string $method_name )
Checks if the class method exists in the given object.
</Desc>
    <FName>mhash_count</FName>
    <Desc>int mhash_count ( void )
Gets the highest available hash ID.
</Desc>
    <FName>mhash_get_block_size</FName>
    <Desc>int mhash_get_block_size ( int $hash )
Gets the size of a block of the specified hash.
</Desc>
    <FName>mhash_get_hash_name</FName>
    <Desc>string mhash_get_hash_name ( int $hash )
Gets the name of the specified hash.
</Desc>
    <FName>mhash_keygen_s2k</FName>
    <Desc>string mhash_keygen_s2k ( int $hash , string $password , string $salt , int $bytes )
Generates a key according to the given hash, using an user provided password. 
This is the Salted S2K algorithm as specified in the OpenPGP document (» RFC 2440). 
Keep in mind that user supplied passwords are not really suitable to be used as keys in cryptographic algorithms, since users normally choose keys they can write on keyboard. These passwords use only 6 to 7 bits per character (or less). It is highly recommended to use some kind of transformation (like this function) to the user supplied key.
</Desc>
    <FName>mhash</FName>
    <Desc>string mhash ( int $hash , string $data [, string $key ] )
mhash() applies a hash function specified by hash to the data.
</Desc>
    <FName>microtime</FName>
    <Desc>mixed microtime ([ bool $get_as_float = FALSE ] )
microtime() returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call.
</Desc>
    <FName>mime_content_type</FName>
    <Desc>string mime_content_type ( string $filename )
Returns the MIME content type for a file as determined by using information from the magic.mime file.
</Desc>
    <FName>min</FName>
    <Desc>mixed min ( array $values )
mixed min ( mixed $value1 , mixed $value2 [, mixed $... ] )
If the first and only parameter is an array, min() returns the lowest value in that array. If at least two parameters are provided, min() returns the smallest of these values. 
Note: 
Values of different types will be compared using the standard comparison rules. For instance, a non-numeric string will be compared to an integer as though it were 0, but multiple non-numeric string values will be compared alphanumerically. The actual value returned will be of the original type with no conversion applied. 
Caution 
Be careful when passing arguments with mixed types values because min() can produce unpredictable results.
</Desc>
    <FName>ming_keypress</FName>
    <Desc>int ming_keypress ( string $char )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ming_setcubicthreshold</FName>
    <Desc>void ming_setcubicthreshold ( int $threshold )
Sets the threshold error for drawing cubic beziers.
</Desc>
    <FName>ming_setscale</FName>
    <Desc>void ming_setscale ( float $scale )
Sets the scale of the output SWF. Inside the SWF file, coordinates are measured in TWIPS, rather than PIXELS. There are 20 TWIPS in 1 pixel.
</Desc>
    <FName>ming_setswfcompression</FName>
    <Desc>void ming_setswfcompression ( int $level )
Sets the SWF output compression level.
</Desc>
    <FName>ming_useconstants</FName>
    <Desc>void ming_useconstants ( int $use )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ming_useswfversion</FName>
    <Desc>void ming_useswfversion ( int $version )
Sets the SWF version to be used in the movie. This affect the bahaviour of Action Script.
</Desc>
    <FName>mkdir</FName>
    <Desc>bool mkdir ( string $pathname [, int $mode = 0777 [, bool $recursive = FALSE [, resource $context ]]] )
Attempts to create the directory specified by pathname.
</Desc>
    <FName>mktime</FName>
    <Desc>int mktime ([ int $hour = date("H") [, int $minute = date("i") [, int $second = date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date("Y") [, int $is_dst = -1 ]]]]]]] )
Returns the Unix timestamp corresponding to the arguments given. This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified. 
Arguments may be left out in order from right to left; any arguments thus omitted will be set to the current value according to the local date and time. 
Notes
Note: 
As of PHP 5.1, when called with no arguments, mktime() throws an E_STRICT notice: use the time() function instead.
</Desc>
    <FName>money_format</FName>
    <Desc>string money_format ( string $format , float $number )
money_format() returns a formatted version of number. This function wraps the C library function strfmon(), with the difference that this implementation converts only one number at a time.
</Desc>
    <FName>MongoDB\BSON\fromJSON</FName>
    <Desc>string MongoDB\BSON\fromJSON ( string $json )
Converts an » extended JSON string to its BSON representation.
</Desc>
    <FName>MongoDB\BSON\fromPHP</FName>
    <Desc>string MongoDB\BSON\fromPHP ( array|object $value )
Serializes a PHP array or object (e.g. document) to its » BSON representation. The returned binary string will describe a BSON document.
</Desc>
    <FName>MongoDB\BSON\toCanonicalExtendedJSON</FName>
    <Desc>string MongoDB\BSON\toCanonicalExtendedJSON ( string $bson )
Converts a BSON string to its » Canonical Extended JSON representation. The canonical format prefers type fidelity at the expense of concise output and is most suited for producing output that can be converted back to BSON without any loss of type information (e.g. numeric types will remain differentiated).
</Desc>
    <FName>MongoDB\BSON\toJSON</FName>
    <Desc>string MongoDB\BSON\toJSON ( string $bson )
Converts a BSON string to its » Legacy Extended JSON representation. 
Note: There exist several JSON formats for representing BSON. This function implements the "strict mode" defined in » MongoDB Extended JSON, which has been superseded by the canonical and relaxed formats defined in the » Extended JSON Specification and implemented by MongoDB\BSON\toCanonicalExtendedJSON() and MongoDB\BSON\toRelaxedExtendedJSON(), respectively. 
Warning 
» JSON does not support NAN and INF and MongoDB's Legacy Extended JSON format does not define an alternative representation for these values (» libbson will output nan and inf literals, which may not be parsed as valid JSON). If you are working with BSON that may contain non-finite numbers, please use MongoDB\BSON\toCanonicalExtendedJSON() or MongoDB\BSON\toRelaxedExtendedJSON().
</Desc>
    <FName>MongoDB\BSON\toPHP</FName>
    <Desc>array|object MongoDB\BSON\toPHP ( string $bson [, array $typeMap = array() ] )
Unserializes a BSON document (i.e. binary string) to its PHP representation. The typeMap paramater may be used to control the PHP types used for converting BSON arrays and documents (both root and embedded). 
Warning 
Fields containing deprecated BSON types (i.e. undefined, symbol, DBPointer) are represented only by bare-bones objects of the classes MongoDB\BSON\Undefined, MongoDB\BSON\Symbol, and MongoDB\BSON\DBPointer, when converting BSON to PHP. These objects are created from BSON data and used for storing these types back into the database, but can not be instantiated as they have a private constructor.
</Desc>
    <FName>MongoDB\BSON\toRelaxedExtendedJSON</FName>
    <Desc>string MongoDB\BSON\toRelaxedExtendedJSON ( string $bson )
Converts a BSON string to its » Relaxed Extended JSON representation. The relaxed format prefers use of JSON type primitives at the expense of type fidelity and is most suited for producing output that can be easily consumed by web APIs and humans.
</Desc>
    <FName>MongoDB\Driver\Monitoring\addSubscriber</FName>
    <Desc>void MongoDB\Driver\Monitoring\addSubscriber ( MongoDB\Driver\Monitoring\Subscriber $subscriber )
Registers a new monitoring event subscriber with the driver. Registered subscribers will be notified of monitoring events through specific methods. 
Note: If the object is already registered, this function is a no-op.
</Desc>
    <FName>MongoDB\Driver\Monitoring\removeSubscriber</FName>
    <Desc>void MongoDB\Driver\Monitoring\removeSubscriber ( MongoDB\Driver\Monitoring\Subscriber $subscriber )
Unregisters an existing monitoring event subscriber from the driver. Unregistered subscribers will no longer be notified of monitoring events. 
Note: If the object is not registered, this function is a no-op.
</Desc>
    <FName>move_uploaded_file</FName>
    <Desc>bool move_uploaded_file ( string $filename , string $destination )
This function checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism). If the file is valid, it will be moved to the filename given by destination. 
This sort of check is especially important if there is any chance that anything done with uploaded files could reveal their contents to the user, or even to other users on the same system.
</Desc>
    <FName>mqseries_back</FName>
    <Desc>void mqseries_back ( resource $hconn , resource &$compCode , resource &$reason )
The mqseries_back() (MQBACK) call indicates to the queue manager that all the message gets and puts that have occurred since the last syncpoint are to be backed out. Messages put as part of a unit of work are deleted; messages retrieved as part of a unit of work are reinstated on the queue. 
Using mqseries_back() only works in conjunction with mqseries_begin() and only function when connecting directly to a Queueu manager. Not via the mqclient interface.
</Desc>
    <FName>mqseries_begin</FName>
    <Desc>void mqseries_begin ( resource $hconn , array $beginOptions , resource &$compCode , resource &$reason )
The mqseries_begin() (MQBEGIN) call begins a unit of work that is coordinated by the queue manager, and that may involve external resource managers. 
Using mqseries_begin() starts the unit of work. Either mqseries_back() or mqseries_cmit() ends the unit of work.
</Desc>
    <FName>mqseries_close</FName>
    <Desc>void mqseries_close ( resource $hconn , resource $hobj , int $options , resource &$compCode , resource &$reason )
The mqseries_close() (MQCLOSE) call relinquishes access to an object, and is the inverse of the mqseries_open() (MQOPEN) call.
</Desc>
    <FName>mqseries_cmit</FName>
    <Desc>void mqseries_cmit ( resource $hconn , resource &$compCode , resource &$reason )
The mqseries_cmit() (MQCMIT) call indicates to the queue manager that the application has reached a syncpoint, and that all of the message gets and puts that have occurred since the last syncpoint are to be made permanent. Messages put as part of a unit of work are made available to other applications; messages retrieved as part of a unit of work are deleted.
</Desc>
    <FName>mqseries_conn</FName>
    <Desc>void mqseries_conn ( string $qManagerName , resource &$hconn , resource &$compCode , resource &$reason )
The mqseries_conn() (MQCONN) call connects an application program to a queue manager. It provides a queue manager connection handle, which is used by the application on subsequent message queuing calls.
</Desc>
    <FName>mqseries_connx</FName>
    <Desc>void mqseries_connx ( string $qManagerName , array &$connOptions , resource &$hconn , resource &$compCode , resource &$reason )
The mqseries_connx() (MQCONNX) call connects an application program to a queue manager. It provides a queue manager connection handle, which is used by the application on subsequent MQ calls. 
The mqseries_connx() call is like the mqseries_conn() (MQCONN) call, except that MQCONNX allows options to be specified to control the way that the call works.
</Desc>
    <FName>mqseries_disc</FName>
    <Desc>void mqseries_disc ( resource $hconn , resource &$compCode , resource &$reason )
The mqseries_disc() (MQDISC) call breaks the connection between the queue manager and the application program, and is the inverse of the mqseries_conn() (MQCONN) or mqseries_connx() (MQCONNX) call.
</Desc>
    <FName>mqseries_get</FName>
    <Desc>void mqseries_get ( resource $hConn , resource $hObj , array &$md , array &$gmo , int &$bufferLength , string &$msg , int &$data_length , resource &$compCode , resource &$reason )
The mqseries_get() (MQGET) call retrieves a message from a local queue that has been opened using the mqseries_open() (MQOPEN) call
</Desc>
    <FName>mqseries_inq</FName>
    <Desc>void mqseries_inq ( resource $hconn , resource $hobj , int $selectorCount , array $selectors , int $intAttrCount , resource &$intAttr , int $charAttrLength , resource &$charAttr , resource &$compCode , resource &$reason )
The mqseries_inq() (MQINQ) call returns an array of integers and a set of character strings containing the attributes of an object.
</Desc>
    <FName>mqseries_open</FName>
    <Desc>void mqseries_open ( resource $hconn , array &$objDesc , int $option , resource &$hobj , resource &$compCode , resource &$reason )
The mqseries_open() (MQOPEN) call establishes access to an object.
</Desc>
    <FName>mqseries_put</FName>
    <Desc>void mqseries_put ( resource $hConn , resource $hObj , array &$md , array &$pmo , string $message , resource &$compCode , resource &$reason )
The mqseries_put() (MQPUT) call puts a message on a queue or distribution list. The queue or distribution list must already be open.
</Desc>
    <FName>mqseries_put1</FName>
    <Desc>void mqseries_put1 ( resource $hconn , resource &$objDesc , resource &$msgDesc , resource &$pmo , string $buffer , resource &$compCode , resource &$reason )
The mqseries_put1() (MQPUT1) call puts one message on a queue. The queue need not be open. 
You can use both the mqseries_put() and mqseries_put1() calls to put messages on a queue; which call to use depends on the circumstances. Use the mqseries_put() (MQPUT) call to place multiple messages on the same queue. Use the mqseries_put1() (MQPUT1) call to put only one message on a queue. This call encapsulates the MQOPEN, MQPUT, and MQCLOSE calls into a single call, minimizing the number of calls that must be issued.
</Desc>
    <FName>mqseries_set</FName>
    <Desc>void mqseries_set ( resource $hConn , resource $hObj , int $selectorCount , array $selectors , int $intAttrCount , array $intAttrs , int $charAttrLength , array $charAttrs , resource &$compCode , resource &$reason )
The mqseries_set() (MQSET) call is used to change the attributes of an object represented by a handle. The object must be a queue.
</Desc>
    <FName>mqseries_strerror</FName>
    <Desc>string mqseries_strerror ( int $reason )
mqseries_strerror() returns the message that correspond to the reason result code.
</Desc>
    <FName>msession_connect</FName>
    <Desc>bool msession_connect ( string $host , string $port )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_count</FName>
    <Desc>int msession_count ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_create</FName>
    <Desc>bool msession_create ( string $session [, string $classname [, string $data ]] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_destroy</FName>
    <Desc>bool msession_destroy ( string $name )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_disconnect</FName>
    <Desc>void msession_disconnect ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_find</FName>
    <Desc>array msession_find ( string $name , string $value )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_get_array</FName>
    <Desc>array msession_get_array ( string $session )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_get_data</FName>
    <Desc>string msession_get_data ( string $session )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_get</FName>
    <Desc>string msession_get ( string $session , string $name , string $value )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_inc</FName>
    <Desc>string msession_inc ( string $session , string $name )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_list</FName>
    <Desc>array msession_list ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_listvar</FName>
    <Desc>array msession_listvar ( string $name )
Used for searching sessions with common attributes.
</Desc>
    <FName>msession_lock</FName>
    <Desc>int msession_lock ( string $name )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_plugin</FName>
    <Desc>string msession_plugin ( string $session , string $val [, string $param ] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_randstr</FName>
    <Desc>string msession_randstr ( int $param )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_set_array</FName>
    <Desc>void msession_set_array ( string $session , array $tuples )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_set_data</FName>
    <Desc>bool msession_set_data ( string $session , string $value )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_set</FName>
    <Desc>bool msession_set ( string $session , string $name , string $value )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_timeout</FName>
    <Desc>int msession_timeout ( string $session [, int $param ] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_uniq</FName>
    <Desc>string msession_uniq ( int $param [, string $classname [, string $data ]] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msession_unlock</FName>
    <Desc>int msession_unlock ( string $session , int $key )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>msg_get_queue</FName>
    <Desc>resource msg_get_queue ( int $key [, int $perms = 0666 ] )
msg_get_queue() returns an id that can be used to access the System V message queue with the given key. The first call creates the message queue with the optional perms. A second call to msg_get_queue() for the same key will return a different message queue identifier, but both identifiers access the same underlying message queue.
</Desc>
    <FName>msg_queue_exists</FName>
    <Desc>bool msg_queue_exists ( int $key )
Checks whether the message queue key exists.
</Desc>
    <FName>msg_receive</FName>
    <Desc>bool msg_receive ( resource $queue , int $desiredmsgtype , int &$msgtype , int $maxsize , mixed &$message [, bool $unserialize = TRUE [, int $flags = 0 [, int &$errorcode ]]] )
msg_receive() will receive the first message from the specified queue of the type specified by desiredmsgtype.
</Desc>
    <FName>msg_remove_queue</FName>
    <Desc>bool msg_remove_queue ( resource $queue )
msg_remove_queue() destroys the message queue specified by the queue. Only use this function when all processes have finished working with the message queue and you need to release the system resources held by it.
</Desc>
    <FName>msg_send</FName>
    <Desc>bool msg_send ( resource $queue , int $msgtype , mixed $message [, bool $serialize = TRUE [, bool $blocking = TRUE [, int &$errorcode ]]] )
msg_send() sends a message of type msgtype (which MUST be greater than 0) to the message queue specified by queue.
</Desc>
    <FName>msg_set_queue</FName>
    <Desc>bool msg_set_queue ( resource $queue , array $data )
msg_set_queue() allows you to change the values of the msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the underlying message queue data structure. 
Changing the data structure will require that PHP be running as the same user that created the queue, owns the queue (as determined by the existing msg_perm.xxx fields), or be running with root privileges. root privileges are required to raise the msg_qbytes values above the system defined limit.
</Desc>
    <FName>msg_stat_queue</FName>
    <Desc>array msg_stat_queue ( resource $queue )
msg_stat_queue() returns the message queue meta data for the message queue specified by the queue. This is useful, for example, to determine which process sent the message that was just received.
</Desc>
    <FName>msql_affected_rows</FName>
    <Desc>int msql_affected_rows ( resource $result )
Returns number of affected rows by the last SELECT, UPDATE or DELETE query associated with result.
</Desc>
    <FName>msql_close</FName>
    <Desc>bool msql_close ([ resource $link_identifier ] )
msql_close() closes the non-persistent connection to the mSQL server that's associated with the specified link identifier. 
Using msql_close() isn't usually necessary, as non-persistent open links are automatically closed at the end of the script's execution. See also freeing resources.
</Desc>
    <FName>msql_connect</FName>
    <Desc>resource msql_connect ([ string $hostname ] )
msql_connect() establishes a connection to a mSQL server. 
If a second call is made to msql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned. 
The link to the server will be closed as soon as the execution of the script ends, unless it's closed earlier by explicitly calling msql_close().
</Desc>
    <FName>msql_create_db</FName>
    <Desc>bool msql_create_db ( string $database_name [, resource $link_identifier ] )
msql_create_db() attempts to create a new database on the mSQL server.
</Desc>
    <FName>msql_createdb</FName>
    <Desc>This function is an alias of: msql_create_db(). 
</Desc>
    <FName>msql_data_seek</FName>
    <Desc>bool msql_data_seek ( resource $result , int $row_number )
msql_data_seek() moves the internal row pointer of the mSQL result associated with the specified query identifier to point to the specified row number. The next call to msql_fetch_row() would return that row.
</Desc>
    <FName>msql_db_query</FName>
    <Desc>resource msql_db_query ( string $database , string $query [, resource $link_identifier ] )
msql_db_query() selects a database and executes a query on it.
</Desc>
    <FName>msql_dbname</FName>
    <Desc>This function is an alias of: msql_result(). 
</Desc>
    <FName>msql_drop_db</FName>
    <Desc>bool msql_drop_db ( string $database_name [, resource $link_identifier ] )
msql_drop_db() attempts to drop (remove) a database from the mSQL server.
</Desc>
    <FName>msql_error</FName>
    <Desc>string msql_error ( void )
msql_error() returns the last issued error by the mSQL server. Note that only the last error message is accessible with msql_error().
</Desc>
    <FName>msql_fetch_array</FName>
    <Desc>array msql_fetch_array ( resource $result [, int $result_type ] )
msql_fetch_array() is an extended version of msql_fetch_row(). In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys. 
An important thing to note is that using msql_fetch_array() is NOT significantly slower than using msql_fetch_row(), while it provides a significant added value.
</Desc>
    <FName>msql_fetch_field</FName>
    <Desc>object msql_fetch_field ( resource $result [, int $field_offset = 0 ] )
msql_fetch_field() can be used in order to obtain information about fields in a certain query result.
</Desc>
    <FName>msql_fetch_object</FName>
    <Desc>object msql_fetch_object ( resource $result )
msql_fetch_object() is similar to msql_fetch_array(), with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names). 
Speed-wise, the function is identical to msql_fetch_array(), and almost as quick as msql_fetch_row() (the difference is insignificant).
</Desc>
    <FName>msql_fetch_row</FName>
    <Desc>array msql_fetch_row ( resource $result )
msql_fetch_row() fetches one row of data from the result associated with the specified query identifier. The row is returned as an array. Each result column is stored in an array offset, starting at offset 0. 
Subsequent call to msql_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.
</Desc>
    <FName>msql_field_flags</FName>
    <Desc>string msql_field_flags ( resource $result , int $field_offset )
msql_field_flags() returns the field flags of the specified field.
</Desc>
    <FName>msql_field_len</FName>
    <Desc>int msql_field_len ( resource $result , int $field_offset )
msql_field_len() returns the length of the specified field.
</Desc>
    <FName>msql_field_name</FName>
    <Desc>string msql_field_name ( resource $result , int $field_offset )
msql_field_name() gets the name of the specified field index.
</Desc>
    <FName>msql_field_seek</FName>
    <Desc>bool msql_field_seek ( resource $result , int $field_offset )
Seeks to the specified field offset. If the next call to msql_fetch_field() won't include a field offset, this field would be returned.
</Desc>
    <FName>msql_field_table</FName>
    <Desc>int msql_field_table ( resource $result , int $field_offset )
Returns the name of the table that the specified field is in.
</Desc>
    <FName>msql_field_type</FName>
    <Desc>string msql_field_type ( resource $result , int $field_offset )
msql_field_type() gets the type of the specified field index.
</Desc>
    <FName>msql_fieldflags</FName>
    <Desc>This function is an alias of msql_field_flags(). 
</Desc>
    <FName>msql_fieldlen</FName>
    <Desc>This function is an alias of msql_field_len(). 
</Desc>
    <FName>msql_fieldname</FName>
    <Desc>This function is an alias of msql_field_name(). 
</Desc>
    <FName>msql_fieldtable</FName>
    <Desc>This function is an alias of msql_field_table(). 
</Desc>
    <FName>msql_fieldtype</FName>
    <Desc>This function is an alias of msql_field_type(). 
</Desc>
    <FName>msql_free_result</FName>
    <Desc>bool msql_free_result ( resource $result )
msql_free_result() frees the memory associated with query_identifier. When PHP completes a request, this memory is freed automatically, so you only need to call this function when you want to make sure you don't use too much memory while the script is running.
</Desc>
    <FName>msql_list_dbs</FName>
    <Desc>resource msql_list_dbs ([ resource $link_identifier ] )
msql_list_tables() lists the databases available on the specified link_identifier.
</Desc>
    <FName>msql_list_fields</FName>
    <Desc>resource msql_list_fields ( string $database , string $tablename [, resource $link_identifier ] )
msql_list_fields() returns information about the given table.
</Desc>
    <FName>msql_list_tables</FName>
    <Desc>resource msql_list_tables ( string $database [, resource $link_identifier ] )
msql_list_tables() lists the tables on the specified database.
</Desc>
    <FName>msql_num_fields</FName>
    <Desc>int msql_num_fields ( resource $result )
msql_num_fields() returns the number of fields in a result set.
</Desc>
    <FName>msql_num_rows</FName>
    <Desc>int msql_num_rows ( resource $query_identifier )
msql_num_rows() returns the number of rows in a result set.
</Desc>
    <FName>msql_numfields</FName>
    <Desc>This function is an alias of msql_num_fields(). 
</Desc>
    <FName>msql_numrows</FName>
    <Desc>This function is an alias of msql_num_rows(). 
</Desc>
    <FName>msql_pconnect</FName>
    <Desc>resource msql_pconnect ([ string $hostname ] )
msql_pconnect() acts very much like msql_connect() with two major differences. 
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host. If one is found, an identifier for it will be returned instead of opening a new connection. 
Second, the connection to the SQL server will not be closed when the execution of the script ends. Instead, the link will remain open for future use (msql_close() will not close links established by this function).
</Desc>
    <FName>msql_query</FName>
    <Desc>resource msql_query ( string $query [, resource $link_identifier ] )
msql_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
</Desc>
    <FName>msql_regcase</FName>
    <Desc>This function is an alias of sql_regcase(). 
</Desc>
    <FName>msql_result</FName>
    <Desc>string msql_result ( resource $result , int $row [, mixed $field ] )
msql_result() returns the contents of one cell from a mSQL result set. 
When working on large result sets, you should consider using one of the functions that fetch an entire row (specified below). As these functions return the contents of multiple cells in one function call, they are often much quicker than msql_result(). 
Recommended high-performance alternatives: msql_fetch_row(), msql_fetch_array(), and msql_fetch_object().
</Desc>
    <FName>msql_select_db</FName>
    <Desc>bool msql_select_db ( string $database_name [, resource $link_identifier ] )
msql_select_db() sets the current active database on the server that's associated with the specified link_identifier. 
Subsequent calls to msql_query() will be made on the active database.
</Desc>
    <FName>msql_tablename</FName>
    <Desc>This function is an alias of msql_result(). 
</Desc>
    <FName>msql</FName>
    <Desc>This function is an alias of msql_db_query(). 
</Desc>
    <FName>mssql_bind</FName>
    <Desc>bool mssql_bind ( resource $stmt , string $param_name , mixed &$var , int $type [, bool $is_output = FALSE [, bool $is_null = FALSE [, int $maxlen = -1 ]]] )
Binds a parameter to a stored procedure or a remote stored procedure.
</Desc>
    <FName>mssql_close</FName>
    <Desc>bool mssql_close ([ resource $link_identifier ] )
Closes the link to a MS SQL Server database that's associated with the specified link identifier. If the link identifier isn't specified, the last opened link is assumed. 
Note that this isn't usually necessary, as non-persistent open links are automatically closed at the end of the script's execution.
</Desc>
    <FName>mssql_connect</FName>
    <Desc>resource mssql_connect ([ string $servername [, string $username [, string $password [, bool $new_link = FALSE ]]]] )
mssql_connect() establishes a connection to a MS SQL server. 
The link to the server will be closed as soon as the execution of the script ends, unless it's closed earlier by explicitly calling mssql_close().
</Desc>
    <FName>mssql_data_seek</FName>
    <Desc>bool mssql_data_seek ( resource $result_identifier , int $row_number )
mssql_data_seek() moves the internal row pointer of the MS SQL result associated with the specified result identifier to point to the specified row number, first row being number 0. The next call to mssql_fetch_row() would return that row.
</Desc>
    <FName>mssql_execute</FName>
    <Desc>mixed mssql_execute ( resource $stmt [, bool $skip_results = FALSE ] )
Executes a stored procedure on a MS SQL server database
</Desc>
    <FName>mssql_fetch_array</FName>
    <Desc>array mssql_fetch_array ( resource $result [, int $result_type = MSSQL_BOTH ] )
mssql_fetch_array() is an extended version of mssql_fetch_row(). In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys. 
An important thing to note is that using mssql_fetch_array() is NOT significantly slower than using mssql_fetch_row(), while it provides a significant added value.
</Desc>
    <FName>mssql_fetch_assoc</FName>
    <Desc>array mssql_fetch_assoc ( resource $result_id )
Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. mssql_fetch_assoc() is equivalent to calling mssql_fetch_array() with MSSQL_ASSOC for the optional second parameter.
</Desc>
    <FName>mssql_fetch_batch</FName>
    <Desc>int mssql_fetch_batch ( resource $result )
Returns the next batch of records.
</Desc>
    <FName>mssql_fetch_field</FName>
    <Desc>object mssql_fetch_field ( resource $result [, int $field_offset = -1 ] )
mssql_fetch_field() can be used in order to obtain information about fields in a certain query result.
</Desc>
    <FName>mssql_fetch_object</FName>
    <Desc>object mssql_fetch_object ( resource $result )
mssql_fetch_object() is similar to mssql_fetch_array(), with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names). 
Speed-wise, the function is identical to mssql_fetch_array(), and almost as quick as mssql_fetch_row() (the difference is insignificant).
</Desc>
    <FName>mssql_fetch_row</FName>
    <Desc>array mssql_fetch_row ( resource $result )
mssql_fetch_row() fetches one row of data from the result associated with the specified result identifier. The row is returned as an array. Each result column is stored in an array offset, starting at offset 0. 
Subsequent call to mssql_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.
</Desc>
    <FName>mssql_field_length</FName>
    <Desc>int mssql_field_length ( resource $result [, int $offset = -1 ] )
Returns the length of field no. offset in result.
</Desc>
    <FName>mssql_field_name</FName>
    <Desc>string mssql_field_name ( resource $result [, int $offset = -1 ] )
Returns the name of field no. offset in result.
</Desc>
    <FName>mssql_field_seek</FName>
    <Desc>bool mssql_field_seek ( resource $result , int $field_offset )
Seeks to the specified field offset. If the next call to mssql_fetch_field() won't include a field offset, this field would be returned.
</Desc>
    <FName>mssql_field_type</FName>
    <Desc>string mssql_field_type ( resource $result [, int $offset = -1 ] )
Returns the type of field no. offset in result.
</Desc>
    <FName>mssql_free_result</FName>
    <Desc>bool mssql_free_result ( resource $result )
mssql_free_result() only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call mssql_free_result() with the result identifier as an argument and the associated result memory will be freed.
</Desc>
    <FName>mssql_free_statement</FName>
    <Desc>bool mssql_free_statement ( resource $stmt )
mssql_free_statement() only needs to be called if you are worried about using too much memory while your script is running. All statement memory will automatically be freed when the script ends. You may call mssql_free_statement() with the statement identifier as an argument and the associated statement memory will be freed.
</Desc>
    <FName>mssql_get_last_message</FName>
    <Desc>string mssql_get_last_message ( void )
Gets the last message from the MS-SQL server
</Desc>
    <FName>mssql_guid_string</FName>
    <Desc>string mssql_guid_string ( string $binary [, bool $short_format = FALSE ] )
Converts a 16 byte binary GUID to a string.
</Desc>
    <FName>mssql_init</FName>
    <Desc>resource mssql_init ( string $sp_name [, resource $link_identifier ] )
Initializes a stored procedure or a remote stored procedure.
</Desc>
    <FName>mssql_min_error_severity</FName>
    <Desc>void mssql_min_error_severity ( int $severity )
Sets the minimum error severity.
</Desc>
    <FName>mssql_min_message_severity</FName>
    <Desc>void mssql_min_message_severity ( int $severity )
Sets the minimum message severity.
</Desc>
    <FName>mssql_next_result</FName>
    <Desc>bool mssql_next_result ( resource $result_id )
When sending more than one SQL statement to the server or executing a stored procedure with multiple results, it will cause the server to return multiple result sets. This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the rows from the new result set.
</Desc>
    <FName>mssql_num_fields</FName>
    <Desc>int mssql_num_fields ( resource $result )
mssql_num_fields() returns the number of fields in a result set.
</Desc>
    <FName>mssql_num_rows</FName>
    <Desc>int mssql_num_rows ( resource $result )
mssql_num_rows() returns the number of rows in a result set.
</Desc>
    <FName>mssql_pconnect</FName>
    <Desc>resource mssql_pconnect ([ string $servername [, string $username [, string $password [, bool $new_link = FALSE ]]]] )
mssql_pconnect() acts very much like mssql_connect() with two major differences. 
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password. If one is found, an identifier for it will be returned instead of opening a new connection. 
Second, the connection to the SQL server will not be closed when the execution of the script ends. Instead, the link will remain open for future use (mssql_close() will not close links established by mssql_pconnect()). 
This type of links is therefore called 'persistent'.
</Desc>
    <FName>mssql_query</FName>
    <Desc>mixed mssql_query ( string $query [, resource $link_identifier [, int $batch_size = 0 ]] )
mssql_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
</Desc>
    <FName>mssql_result</FName>
    <Desc>string mssql_result ( resource $result , int $row , mixed $field )
mssql_result() returns the contents of one cell from a MS SQL result set.
</Desc>
    <FName>mssql_rows_affected</FName>
    <Desc>int mssql_rows_affected ( resource $link_identifier )
Returns the number of records affected by the last write query.
</Desc>
    <FName>mssql_select_db</FName>
    <Desc>bool mssql_select_db ( string $database_name [, resource $link_identifier ] )
mssql_select_db() sets the current active database on the server that's associated with the specified link identifier. 
Every subsequent call to mssql_query() will be made on the active database.
</Desc>
    <FName>mt_getrandmax</FName>
    <Desc>int mt_getrandmax ( void )
Returns the maximum value that can be returned by a call to mt_rand().
</Desc>
    <FName>mt_rand</FName>
    <Desc>int mt_rand ( void )
int mt_rand ( int $min , int $max )
Caution
This function does not generate cryptographically secure values, and should not be used for cryptographic purposes. If you need a cryptographically secure value, consider using random_int(), random_bytes(), or openssl_random_pseudo_bytes() instead.
Many random number generators of older libcs have dubious or unknown characteristics and are slow. The mt_rand() function is a drop-in replacement for the older rand(). It uses a random number generator with known characteristics using the » Mersenne Twister, which will produce random numbers four times faster than what the average libc rand() provides. 
If called without the optional min, max arguments mt_rand() returns a pseudo-random value between 0 and mt_getrandmax(). If you want a random number between 5 and 15 (inclusive), for example, use mt_rand(5, 15).
</Desc>
    <FName>mt_srand</FName>
    <Desc>void mt_srand ([ int $seed [, int $mode = MT_RAND_MT19937 ]] )
Seeds the random number generator with seed or with a random value if no seed is given. 
Note: There is no need to seed the random number generator with srand() or mt_srand() as this is done automatically.
</Desc>
    <FName>mysql_affected_rows</FName>
    <Desc>int mysql_affected_rows ([ resource $link_identifier = NULL ] )
Get the number of affected rows by the last INSERT, UPDATE, REPLACE or DELETE query associated with link_identifier.
</Desc>
    <FName>mysql_client_encoding</FName>
    <Desc>string mysql_client_encoding ([ resource $link_identifier = NULL ] )
Retrieves the character_set variable from MySQL.
</Desc>
    <FName>mysql_close</FName>
    <Desc>bool mysql_close ([ resource $link_identifier = NULL ] )
mysql_close() closes the non-persistent connection to the MySQL server that's associated with the specified link identifier. If link_identifier isn't specified, the last opened link is used. 
Open non-persistent MySQL connections and result sets are automatically destroyed when a PHP script finishes its execution. So, while explicitly closing open connections and freeing result sets is optional, doing so is recommended. This will immediately return resources to PHP and MySQL, which can improve performance. For related information, see freeing resources
</Desc>
    <FName>mysql_connect</FName>
    <Desc>resource mysql_connect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, bool $new_link = FALSE [, int $client_flags = 0 ]]]]] )
Opens or reuses a connection to a MySQL server.
</Desc>
    <FName>mysql_create_db</FName>
    <Desc>bool mysql_create_db ( string $database_name [, resource $link_identifier = NULL ] )
mysql_create_db() attempts to create a new database on the server associated with the specified link identifier.
</Desc>
    <FName>mysql_data_seek</FName>
    <Desc>bool mysql_data_seek ( resource $result , int $row_number )
mysql_data_seek() moves the internal row pointer of the MySQL result associated with the specified result identifier to point to the specified row number. The next call to a MySQL fetch function, such as mysql_fetch_assoc(), would return that row. 
row_number starts at 0. The row_number should be a value in the range from 0 to mysql_num_rows() - 1. However if the result set is empty (mysql_num_rows() == 0), a seek to 0 will fail with a E_WARNING and mysql_data_seek() will return FALSE.
</Desc>
    <FName>mysql_db_name</FName>
    <Desc>string mysql_db_name ( resource $result , int $row [, mixed $field = NULL ] )
Retrieve the database name from a call to mysql_list_dbs().
</Desc>
    <FName>mysql_db_query</FName>
    <Desc>resource mysql_db_query ( string $database , string $query [, resource $link_identifier = NULL ] )
mysql_db_query() selects a database, and executes a query on it.
</Desc>
    <FName>mysql_drop_db</FName>
    <Desc>bool mysql_drop_db ( string $database_name [, resource $link_identifier = NULL ] )
mysql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier. This function is deprecated, it is preferable to use mysql_query() to issue an sql DROP DATABASE statement instead.
</Desc>
    <FName>mysql_errno</FName>
    <Desc>int mysql_errno ([ resource $link_identifier = NULL ] )
Returns the error number from the last MySQL function. 
Errors coming back from the MySQL database backend no longer issue warnings. Instead, use mysql_errno() to retrieve the error code. Note that this function only returns the error code from the most recently executed MySQL function (not including mysql_error() and mysql_errno()), so if you want to use it, make sure you check the value before calling another MySQL function.
</Desc>
    <FName>mysql_error</FName>
    <Desc>string mysql_error ([ resource $link_identifier = NULL ] )
Returns the error text from the last MySQL function. Errors coming back from the MySQL database backend no longer issue warnings. Instead, use mysql_error() to retrieve the error text. Note that this function only returns the error text from the most recently executed MySQL function (not including mysql_error() and mysql_errno()), so if you want to use it, make sure you check the value before calling another MySQL function.
</Desc>
    <FName>mysql_escape_string</FName>
    <Desc>string mysql_escape_string ( string $unescaped_string )
This function will escape the unescaped_string, so that it is safe to place it in a mysql_query(). This function is deprecated. 
This function is identical to mysql_real_escape_string() except that mysql_real_escape_string() takes a connection handler and escapes the string according to the current character set. mysql_escape_string() does not take a connection argument and does not respect the current charset setting.
</Desc>
    <FName>mysql_fetch_array</FName>
    <Desc>array mysql_fetch_array ( resource $result [, int $result_type = MYSQL_BOTH ] )
Returns an array that corresponds to the fetched row and moves the internal data pointer ahead.
</Desc>
    <FName>mysql_fetch_assoc</FName>
    <Desc>array mysql_fetch_assoc ( resource $result )
Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. mysql_fetch_assoc() is equivalent to calling mysql_fetch_array() with MYSQL_ASSOC for the optional second parameter. It only returns an associative array.
</Desc>
    <FName>mysql_fetch_field</FName>
    <Desc>object mysql_fetch_field ( resource $result [, int $field_offset = 0 ] )
Returns an object containing field information. This function can be used to obtain information about fields in the provided query result.
</Desc>
    <FName>mysql_fetch_lengths</FName>
    <Desc>array mysql_fetch_lengths ( resource $result )
Returns an array that corresponds to the lengths of each field in the last row fetched by MySQL. 
mysql_fetch_lengths() stores the lengths of each result column in the last row returned by mysql_fetch_row(), mysql_fetch_assoc(), mysql_fetch_array(), and mysql_fetch_object() in an array, starting at offset 0.
</Desc>
    <FName>mysql_fetch_object</FName>
    <Desc>object mysql_fetch_object ( resource $result [, string $class_name [, array $params ]] )
Returns an object with properties that correspond to the fetched row and moves the internal data pointer ahead.
</Desc>
    <FName>mysql_fetch_row</FName>
    <Desc>array mysql_fetch_row ( resource $result )
Returns a numerical array that corresponds to the fetched row and moves the internal data pointer ahead.
</Desc>
    <FName>mysql_field_flags</FName>
    <Desc>string mysql_field_flags ( resource $result , int $field_offset )
mysql_field_flags() returns the field flags of the specified field. The flags are reported as a single word per flag separated by a single space, so that you can split the returned value using explode().
</Desc>
    <FName>mysql_field_len</FName>
    <Desc>int mysql_field_len ( resource $result , int $field_offset )
mysql_field_len() returns the length of the specified field.
</Desc>
    <FName>mysql_field_name</FName>
    <Desc>string mysql_field_name ( resource $result , int $field_offset )
mysql_field_name() returns the name of the specified field index.
</Desc>
    <FName>mysql_field_seek</FName>
    <Desc>bool mysql_field_seek ( resource $result , int $field_offset )
Seeks to the specified field offset. If the next call to mysql_fetch_field() doesn't include a field offset, the field offset specified in mysql_field_seek() will be returned.
</Desc>
    <FName>mysql_field_table</FName>
    <Desc>string mysql_field_table ( resource $result , int $field_offset )
Returns the name of the table that the specified field is in.
</Desc>
    <FName>mysql_field_type</FName>
    <Desc>string mysql_field_type ( resource $result , int $field_offset )
mysql_field_type() is similar to the mysql_field_name() function. The arguments are identical, but the field type is returned instead.
</Desc>
    <FName>mysql_free_result</FName>
    <Desc>bool mysql_free_result ( resource $result )
mysql_free_result() will free all memory associated with the result identifier result. 
mysql_free_result() only needs to be called if you are concerned about how much memory is being used for queries that return large result sets. All associated result memory is automatically freed at the end of the script's execution.
</Desc>
    <FName>mysql_get_client_info</FName>
    <Desc>string mysql_get_client_info ( void )
mysql_get_client_info() returns a string that represents the client library version.
</Desc>
    <FName>mysql_get_host_info</FName>
    <Desc>string mysql_get_host_info ([ resource $link_identifier = NULL ] )
Describes the type of connection in use for the connection, including the server host name.
</Desc>
    <FName>mysql_get_proto_info</FName>
    <Desc>int mysql_get_proto_info ([ resource $link_identifier = NULL ] )
Retrieves the MySQL protocol.
</Desc>
    <FName>mysql_get_server_info</FName>
    <Desc>string mysql_get_server_info ([ resource $link_identifier = NULL ] )
Retrieves the MySQL server version.
</Desc>
    <FName>mysql_info</FName>
    <Desc>string mysql_info ([ resource $link_identifier = NULL ] )
Returns detailed information about the last query.
</Desc>
    <FName>mysql_insert_id</FName>
    <Desc>int mysql_insert_id ([ resource $link_identifier = NULL ] )
Retrieves the ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT).
</Desc>
    <FName>mysql_list_dbs</FName>
    <Desc>resource mysql_list_dbs ([ resource $link_identifier = NULL ] )
Returns a result pointer containing the databases available from the current mysql daemon.
</Desc>
    <FName>mysql_list_fields</FName>
    <Desc>resource mysql_list_fields ( string $database_name , string $table_name [, resource $link_identifier = NULL ] )
Retrieves information about the given table name. 
This function is deprecated. It is preferable to use mysql_query() to issue an SQL SHOW COLUMNS FROM table [LIKE 'name'] statement instead.
</Desc>
    <FName>mysql_list_processes</FName>
    <Desc>resource mysql_list_processes ([ resource $link_identifier = NULL ] )
Retrieves the current MySQL server threads.
</Desc>
    <FName>mysql_list_tables</FName>
    <Desc>resource mysql_list_tables ( string $database [, resource $link_identifier = NULL ] )
Retrieves a list of table names from a MySQL database. 
This function is deprecated. It is preferable to use mysql_query() to issue an SQL SHOW TABLES [FROM db_name] [LIKE 'pattern'] statement instead.
</Desc>
    <FName>mysql_num_fields</FName>
    <Desc>int mysql_num_fields ( resource $result )
Retrieves the number of fields from a query.
</Desc>
    <FName>mysql_num_rows</FName>
    <Desc>int mysql_num_rows ( resource $result )
Retrieves the number of rows from a result set. This command is only valid for statements like SELECT or SHOW that return an actual result set. To retrieve the number of rows affected by a INSERT, UPDATE, REPLACE or DELETE query, use mysql_affected_rows().
</Desc>
    <FName>mysql_pconnect</FName>
    <Desc>resource mysql_pconnect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, int $client_flags = 0 ]]]] )
Establishes a persistent connection to a MySQL server. 
mysql_pconnect() acts very much like mysql_connect() with two major differences. 
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password. If one is found, an identifier for it will be returned instead of opening a new connection. 
Second, the connection to the SQL server will not be closed when the execution of the script ends. Instead, the link will remain open for future use (mysql_close() will not close links established by mysql_pconnect()). 
This type of link is therefore called 'persistent'.
</Desc>
    <FName>mysql_ping</FName>
    <Desc>bool mysql_ping ([ resource $link_identifier = NULL ] )
Checks whether or not the connection to the server is working. If it has gone down, an automatic reconnection is attempted. This function can be used by scripts that remain idle for a long while, to check whether or not the server has closed the connection and reconnect if necessary. 
Note: 
Automatic reconnection is disabled by default in versions of MySQL >= 5.0.3.
</Desc>
    <FName>mysql_query</FName>
    <Desc>mixed mysql_query ( string $query [, resource $link_identifier = NULL ] )
mysql_query() sends a unique query (multiple queries are not supported) to the currently active database on the server that's associated with the specified link_identifier.
</Desc>
    <FName>mysql_real_escape_string</FName>
    <Desc>string mysql_real_escape_string ( string $unescaped_string [, resource $link_identifier = NULL ] )
Escapes special characters in the unescaped_string, taking into account the current character set of the connection so that it is safe to place it in a mysql_query(). If binary data is to be inserted, this function must be used. 
mysql_real_escape_string() calls MySQL's library function mysql_real_escape_string, which prepends backslashes to the following characters: \x00, \n, \r, \, ', " and \x1a. 
This function must always (with few exceptions) be used to make data safe before sending a query to MySQL. 
Caution 
Security: the default character set
The character set must be set either at the server level, or with the API function mysql_set_charset() for it to affect mysql_real_escape_string(). See the concepts section on character sets for more information.
</Desc>
    <FName>mysql_result</FName>
    <Desc>string mysql_result ( resource $result , int $row [, mixed $field = 0 ] )
Retrieves the contents of one cell from a MySQL result set. 
When working on large result sets, you should consider using one of the functions that fetch an entire row (specified below). As these functions return the contents of multiple cells in one function call, they're MUCH quicker than mysql_result(). Also, note that specifying a numeric offset for the field argument is much quicker than specifying a fieldname or tablename.fieldname argument.
</Desc>
    <FName>mysql_select_db</FName>
    <Desc>bool mysql_select_db ( string $database_name [, resource $link_identifier = NULL ] )
Sets the current active database on the server that's associated with the specified link identifier. Every subsequent call to mysql_query() will be made on the active database.
</Desc>
    <FName>mysql_set_charset</FName>
    <Desc>bool mysql_set_charset ( string $charset [, resource $link_identifier = NULL ] )
Sets the default character set for the current connection.
</Desc>
    <FName>mysql_stat</FName>
    <Desc>string mysql_stat ([ resource $link_identifier = NULL ] )
mysql_stat() returns the current server status.
</Desc>
    <FName>mysql_tablename</FName>
    <Desc>string mysql_tablename ( resource $result , int $i )
Retrieves the table name from a result. 
This function is deprecated. It is preferable to use mysql_query() to issue an SQL SHOW TABLES [FROM db_name] [LIKE 'pattern'] statement instead.
</Desc>
    <FName>mysql_thread_id</FName>
    <Desc>int mysql_thread_id ([ resource $link_identifier = NULL ] )
Retrieves the current thread ID. If the connection is lost, and a reconnect with mysql_ping() is executed, the thread ID will change. This means only retrieve the thread ID when needed.
</Desc>
    <FName>mysql_unbuffered_query</FName>
    <Desc>resource mysql_unbuffered_query ( string $query [, resource $link_identifier = NULL ] )
mysql_unbuffered_query() sends the SQL query query to MySQL without automatically fetching and buffering the result rows as mysql_query() does. This saves a considerable amount of memory with SQL queries that produce large result sets, and you can start working on the result set immediately after the first row has been retrieved as you don't have to wait until the complete SQL query has been performed. To use mysql_unbuffered_query() while multiple database connections are open, you must specify the optional parameter link_identifier to identify which connection you want to use.
</Desc>
    <FName>expression</FName>
    <Desc>object mysql_xdevapi\expression ( string $expression )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>getSession</FName>
    <Desc>mysql_xdevapi\Session mysql_xdevapi\getSession ( string $uri )
Connects to the MySQL server.
</Desc>
    <FName>mysqli_bind_param</FName>
    <Desc>This function is an alias of mysqli_stmt_bind_param(). 
Warning
This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.
See Also
mysqli_stmt_bind_param() - Binds variables to a prepared statement as parameters 
</Desc>
    <FName>mysqli_bind_result</FName>
    <Desc>This function is an alias of mysqli_stmt_bind_result(). 
Warning
This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.
See Also
mysqli_stmt_bind_result() - Binds variables to a prepared statement for result storage 
</Desc>
    <FName>mysqli_client_encoding</FName>
    <Desc>This function is an alias of mysqli_character_set_name(). 
Warning
This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.
See Also
mysqli_real_escape_string() - Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection 
</Desc>
    <FName>mysqli_connect</FName>
    <Desc>This function is an alias of: mysqli::__construct() 
Although the mysqli::__construct() documentation also includes procedural examples that use the mysqli_connect() function, here is a short example:
</Desc>
    <FName>mysqli::disable_reads_from_master</FName>
    <Desc>Object oriented style
void mysqli::disable_reads_from_master ( void )
Procedural style
bool mysqli_disable_reads_from_master ( mysqli $link )
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli_disable_reads_from_master</FName>
    <Desc>Object oriented style
void mysqli::disable_reads_from_master ( void )
Procedural style
bool mysqli_disable_reads_from_master ( mysqli $link )
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli_disable_rpl_parse</FName>
    <Desc>bool mysqli_disable_rpl_parse ( mysqli $link )
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli_enable_reads_from_master</FName>
    <Desc>bool mysqli_enable_reads_from_master ( mysqli $link )
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli_enable_rpl_parse</FName>
    <Desc>bool mysqli_enable_rpl_parse ( mysqli $link )
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli_escape_string</FName>
    <Desc>This function is an alias of: mysqli_real_escape_string(). 
</Desc>
    <FName>mysqli_execute</FName>
    <Desc>This function is an alias of mysqli_stmt_execute(). 
Notes
Note: 
mysqli_execute() is deprecated and will be removed. 
See Also
mysqli_stmt_execute() - Executes a prepared Query 
</Desc>
    <FName>mysqli_fetch</FName>
    <Desc>This function is an alias of mysqli_stmt_fetch(). 
Warning
This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.
See Also
mysqli_stmt_fetch() - Fetch results from a prepared statement into the bound variables 
</Desc>
    <FName>mysqli_get_cache_stats</FName>
    <Desc>array mysqli_get_cache_stats ( void )
Returns an empty array. Available only with mysqlnd.
</Desc>
    <FName>mysqli_get_client_stats</FName>
    <Desc>array mysqli_get_client_stats ( void )
Returns client per-process statistics. Available only with mysqlnd.
</Desc>
    <FName>mysqli_get_links_stats</FName>
    <Desc>array mysqli_get_links_stats ( void )
mysqli_get_links_stats() returns information about open and cached MySQL links.
</Desc>
    <FName>mysqli_get_metadata</FName>
    <Desc>This function is an alias of mysqli_stmt_result_metadata(). 
Warning
This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.
See Also
mysqli_stmt_result_metadata() - Returns result set metadata from a prepared statement 
</Desc>
    <FName>mysqli_master_query</FName>
    <Desc>bool mysqli_master_query ( mysqli $link , string $query )
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli_param_count</FName>
    <Desc>This function is an alias of mysqli_stmt_param_count(). 
Warning
This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.
See Also
mysqli_stmt_param_count() - Returns the number of parameter for the given statement 
</Desc>
    <FName>mysqli_report</FName>
    <Desc>This function is an alias of: mysqli_driver->report_mode 
</Desc>
    <FName>mysqli_rpl_parse_enabled</FName>
    <Desc>int mysqli_rpl_parse_enabled ( mysqli $link )
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli_rpl_probe</FName>
    <Desc>bool mysqli_rpl_probe ( mysqli $link )
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli_send_long_data</FName>
    <Desc>This function is an alias of mysqli_stmt_send_long_data(). 
Warning
This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.
See Also
mysqli_stmt_send_long_data() - Send data in blocks 
</Desc>
    <FName>mysqli::set_opt</FName>
    <Desc>This function is an alias of mysqli_options(). 
</Desc>
    <FName>mysqli_set_opt</FName>
    <Desc>This function is an alias of mysqli_options(). 
</Desc>
    <FName>mysqli_slave_query</FName>
    <Desc>bool mysqli_slave_query ( mysqli $link , string $query )
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqlnd_memcache_get_config</FName>
    <Desc>array mysqlnd_memcache_get_config ( mixed $connection )
This function returns an array of all mysqlnd_memcache related configuration information that is attached to the MySQL connection. This includes MySQL, the Memcache object provided via mysqlnd_memcache_set(), and the table mapping configuration that was automatically collected from the MySQL Server.
</Desc>
    <FName>mysqlnd_memcache_set</FName>
    <Desc>bool mysqlnd_memcache_set ( mixed $mysql_connection [, Memcached $memcache_connection [, string $pattern [, callback $callback ]]] )
Associate mysql_connection with memcache_connection using pattern as a PCRE regular expression, and callback as a notification callback or to unset the association of mysql_connection. 
While associating a MySQL connection with a Memcache connection, this function will query the MySQL Server for its configuration. It will automatically detect whether the server is configured to use the InnoDB Memcache Daemon Plugin or MySQL Cluster NDB Memcache support. It will also query the server to automatically identify exported tables and other configuration options. The results of this automatic configuration can be retrieved using mysqlnd_memcache_get_config().
</Desc>
    <FName>mysqlnd_ms_dump_servers</FName>
    <Desc>array mysqlnd_ms_dump_servers ( mixed $connection )
Returns a list of currently configured servers.
</Desc>
    <FName>mysqlnd_ms_fabric_select_global</FName>
    <Desc>array mysqlnd_ms_fabric_select_global ( mixed $connection , mixed $table_name )
Warning
This function is currently not documented; only its argument list is available. 
MySQL Fabric related. 
Switch the connection to the nodes handling global sharding queries for the given table name.
</Desc>
    <FName>mysqlnd_ms_fabric_select_shard</FName>
    <Desc>array mysqlnd_ms_fabric_select_shard ( mixed $connection , mixed $table_name , mixed $shard_key )
Warning
This function is currently not documented; only its argument list is available. 
MySQL Fabric related. 
Switch the connection to the shards responsible for the given table name and shard key.
</Desc>
    <FName>mysqlnd_ms_get_last_gtid</FName>
    <Desc>string mysqlnd_ms_get_last_gtid ( mixed $connection )
Returns a global transaction identifier which belongs to a write operation no older than the last write performed by the client. It is not guaranteed that the global transaction identifier is identical to that one created for the last write transaction performed by the client.
</Desc>
    <FName>mysqlnd_ms_get_last_used_connection</FName>
    <Desc>array mysqlnd_ms_get_last_used_connection ( mixed $connection )
Returns an array which describes the last used connection from the plugins connection pool currently pointed to by the user connection handle. If using the plugin, a user connection handle represents a pool of database connections. It is not possible to tell from the user connection handles properties to which database server from the pool the user connection handle points. 
The function can be used to debug or monitor PECL mysqlnd_ms.
</Desc>
    <FName>mysqlnd_ms_get_stats</FName>
    <Desc>array mysqlnd_ms_get_stats ( void )
Returns an array of statistics collected by the replication and load balancing plugin. 
The PHP configuration setting mysqlnd_ms.collect_statistics controls the collection of statistics. The collection of statistics is disabled by default for performance reasons. 
The scope of the statistics is the PHP process. Depending on your deployment model a PHP process may handle one or multiple requests. 
Statistics are aggregated for all connections and all storage handler. It is not possible to tell how much queries originating from mysqli, PDO_MySQL or mysql API calls have contributed to the aggregated data values.
</Desc>
    <FName>mysqlnd_ms_match_wild</FName>
    <Desc>bool mysqlnd_ms_match_wild ( string $table_name , string $wildcard )
Finds whether a table name matches a wildcard pattern or not. 
This function is not of much practical relevance with PECL mysqlnd_ms 1.1.0 because the plugin does not support MySQL replication table filtering yet.
</Desc>
    <FName>mysqlnd_ms_query_is_select</FName>
    <Desc>int mysqlnd_ms_query_is_select ( string $query )
Finds whether to send the query to the master, the slave or the last used MySQL server. 
The plugins built-in read/write split mechanism will be used to analyze the query string to make a recommendation where to send the query. The built-in read/write split mechanism is very basic and simple. The plugin will recommend sending all queries to the MySQL replication master server but those which begin with SELECT, or begin with a SQL hint which enforces sending the query to a slave server. Due to the basic but fast algorithm the plugin may propose to run some read-only statements such as SHOW TABLES on the replication master.
</Desc>
    <FName>mysqlnd_ms_set_qos</FName>
    <Desc>bool mysqlnd_ms_set_qos ( mixed $connection , int $service_level [, int $service_level_option [, mixed $option_value ]] )
Sets the quality of service needed from the cluster. A database cluster delivers a certain quality of service to the user depending on its architecture. A major aspect of the quality of service is the consistency level the cluster can offer. An asynchronous MySQL replication cluster defaults to eventual consistency for slave reads: a slave may serve stale data, current data, or it may have not the requested data at all, because it is not synchronous to the master. In a MySQL replication cluster, only master accesses can give strong consistency, which promises that all clients see each others changes. 
PECL/mysqlnd_ms hides the complexity of choosing appropriate nodes to achieve a certain level of service from the cluster. The "Quality of Service" filter implements the necessary logic. The filter can either be configured in the plugins configuration file, or at runtime using mysqlnd_ms_set_qos(). 
Similar results can be achieved with PECL mysqlnd_ms < 1.2.0, if using SQL hints to force the use of a certain type of node or using the master_on_write plugin configuration option. The first requires more code and causes more work on the application side. The latter is less refined than using the quality of service filter. Settings made through the function call can be reversed, as shown in the example below. The example temporarily switches to a higher service level (session consistency, read your writes) and returns back to the clusters default after it has performed all operations that require the better service. This way, read load on the master can be minimized compared to using master_on_write, which would continue using the master after the first write. 
Since 1.5.0 calls will fail when done in the middle of a transaction if transaction stickiness is enabled and transaction boundaries have been detected. properly.
</Desc>
    <FName>mysqlnd_ms_set_user_pick_server</FName>
    <Desc>bool mysqlnd_ms_set_user_pick_server ( string $function )
Sets a callback for user-defined read/write splitting. The plugin will call the callback only if pick[]=user is the default rule for server picking in the relevant section of the plugins configuration file. 
The plugins built-in read/write query split mechanism decisions can be overwritten in two ways. The easiest way is to prepend the query string with the SQL hints MYSQLND_MS_MASTER_SWITCH, MYSQLND_MS_SLAVE_SWITCH or MYSQLND_MS_LAST_USED_SWITCH. Using SQL hints one can control, for example, whether a query shall be send to the MySQL replication master server or one of the slave servers. By help of SQL hints it is not possible to pick a certain slave server for query execution. 
Full control on server selection can be gained using a callback function. Use of a callback is recommended to expert users only because the callback has to cover all cases otherwise handled by the plugin. 
The plugin will invoke the callback function for selecting a server from the lists of configured master and slave servers. The callback function inspects the query to run and picks a server for query execution by returning the hosts URI, as found in the master and slave list. 
If the lazy connections are enabled and the callback chooses a slave server for which no connection has been established so far and establishing the connection to the slave fails, the plugin will return an error upon the next action on the failed connection, for example, when running a query. It is the responsibility of the application developer to handle the error. For example, the application can re-run the query to trigger a new server selection and callback invocation. If so, the callback must make sure to select a different slave, or check slave availability, before returning to the plugin to prevent an endless loop.
</Desc>
    <FName>mysqlnd_ms_xa_begin</FName>
    <Desc>int mysqlnd_ms_xa_begin ( mixed $connection , string $gtrid [, int $timeout ] )
Starts a XA transaction among MySQL servers. PECL/mysqlnd_ms acts as a transaction coordinator the distributed transaction. 
Once a global transaction has been started, the plugin injects appropriate XA BEGIN SQL statements on all MySQL servers used in the following. The global transaction is either ended by calling mysqlnd_ms_xa_commit(), mysqlnd_ms_xa_rollback() or by an implicit rollback in case of an error. 
During a global transaction, the plugin tracks all server switches, for example, when switching from one MySQL shard to another MySQL shard. Immediately before a query is run on a server that has not been participating in the global transaction yet, XA BEGIN is executed on the server. From a users perspective the injection happens during a call to a query execution function such as mysqli_query(). Should the injection fail an error is reported to the caller of the query execution function. The failing server does not become a participant in the global transaction. The user may retry executing a query on the server and hereby retry injecting XA BEGIN, abort the global transaction because not all required servers can participate, or ignore and continue the global without the failed server. 
Reasons to fail executing XA BEGIN include but are not limited to a server being unreachable or the server having an open, concurrent XA transaction using the same xid. 
Please note, global and local transactions are mutually exclusive. You cannot start a XA transaction when you have a local transaction open. The local transaction must be ended first. The plugin tries to detect this conflict as early as possible. It monitors API calls for controlling local transactions to learn about the current state. However, if using SQL statements for local transactions such as BEGIN, the plugin may not know the current state and the conflict is not detected before XA BEGIN is injected and executed. 
The use of other XA resources but MySQL servers is not supported by the function. To carry out a global transaction among, for example, a MySQL server and another vendors database system, you should issue the systems SQL commands yourself. 
Note: Experimental

The feature is currently under development. There may be issues and/or feature limitations. Do not use in production environments.
</Desc>
    <FName>mysqlnd_ms_xa_commit</FName>
    <Desc>int mysqlnd_ms_xa_commit ( mixed $connection , string $gtrid )
Commits a global transaction among MySQL servers started by mysqlnd_ms_xa_begin(). 
If any of the global transaction participants fails to commit an implicit rollback is performed. It may happen that not all cases can be handled during the rollback. For example, no attempts will be made to reconnect to a participant after the connection to the participant has been lost. Solving cases that cannot easily be rolled back is left to the garbage collection. 
Note: Experimental

The feature is currently under development. There may be issues and/or feature limitations. Do not use in production environments.
</Desc>
    <FName>mysqlnd_ms_xa_gc</FName>
    <Desc>int mysqlnd_ms_xa_gc ( mixed $connection [, string $gtrid [, bool $ignore_max_retries ]] )
Garbage collects unfinished XA transactions. 
The XA protocol is a blocking protocol. There exist cases when servers participating in a global transaction cannot make progress when the transaction coordinator crashes or disconnects. In such a case, the MySQL servers keep waiting for instructions to finish the XA transaction in question. Because transactions occupy resources, transactions should always be terminated properly. 
Garbage collection requires configuring a state store to track global transactions. Should a PHP client crash in the middle of a transaction and a new PHP client be started, then the built-in garbage collection can learn about the aborted global transaction and terminate it. If you do not configure a state store, the garbage collection cannot perform any cleanup tasks. 
The state store should be crash-safe and be highly available to survive its own crash. Currently, only MySQL is supported as a state store. 
Garbage collection can also be performed automatically in the background. See the plugin configuration directive garbage_collection for details. 
Note: Experimental

The feature is currently under development. There may be issues and/or feature limitations. Do not use in production environments.
</Desc>
    <FName>mysqlnd_ms_xa_rollback</FName>
    <Desc>int mysqlnd_ms_xa_rollback ( mixed $connection , string $gtrid )
Rolls back a global transaction among MySQL servers started by mysqlnd_ms_xa_begin(). 
If any of the global transaction participants fails to rollback the situation is left to be solved by the garbage collection. 
Note: Experimental

The feature is currently under development. There may be issues and/or feature limitations. Do not use in production environments.
</Desc>
    <FName>mysqlnd_qc_clear_cache</FName>
    <Desc>bool mysqlnd_qc_clear_cache ( void )
Flush all cache contents. 
Flushing the cache is a storage handler responsibility. All built-in storage handler but the memcache storage handler support flushing the cache. The memcache storage handler cannot flush its cache contents. 
User-defined storage handler may or may not support the operation.
</Desc>
    <FName>mysqlnd_qc_get_available_handlers</FName>
    <Desc>array mysqlnd_qc_get_available_handlers ( void )
Which storage are available depends on the compile time configuration of the query cache plugin. The default storage handler is always available. All other storage handler must be enabled explicitly when building the extension.
</Desc>
    <FName>mysqlnd_qc_get_cache_info</FName>
    <Desc>array mysqlnd_qc_get_cache_info ( void )
</Desc>
    <FName>mysqlnd_qc_get_core_stats</FName>
    <Desc>array mysqlnd_qc_get_core_stats ( void )
Returns an array of statistics collected by the core of the cache plugin. The same data fields will be reported for any storage handler because the data is collected by the core. 
The PHP configuration setting mysqlnd_qc.collect_statistics controls the collection of statistics. The collection of statistics is disabled by default for performance reasons. Disabling the collection of statistics will also disable the collection of time related statistics. 
The PHP configuration setting mysqlnd_qc.collect_time_statistics controls the collection of time related statistics. 
The scope of the core statistics is the PHP process. Depending on your deployment model a PHP process may handle one or multiple requests. 
Statistics are aggregated for all cache entries and all storage handler. It is not possible to tell how much queries originating from mysqli, PDO_MySQL or mysql API calls have contributed to the aggregated data values.
</Desc>
    <FName>mysqlnd_qc_get_normalized_query_trace_log</FName>
    <Desc>array mysqlnd_qc_get_normalized_query_trace_log ( void )
Returns a normalized query trace log for each query inspected by the query cache. The collection of the trace log is disabled by default. To collect the trace log you have to set the PHP configuration directive mysqlnd_qc.collect_normalized_query_trace to 1 
Entries in the trace log are grouped by the normalized query statement. The normalized query statement is the query statement with all statement parameter values being replaced with a question mark. For example, the two statements SELECT id FROM test WHERE id = 1 and SELECT id FROM test WHERE id = 2 are normalized as SELECT id FROM test WHERE id = ?. Whenever a statement is inspected by the query cache which matches the normalized statement pattern, its statistics are grouped by the normalized statement string.
</Desc>
    <FName>mysqlnd_qc_get_query_trace_log</FName>
    <Desc>array mysqlnd_qc_get_query_trace_log ( void )
Returns a backtrace for each query inspected by the query cache. The collection of the backtrace is disabled by default. To collect the backtrace you have to set the PHP configuration directive mysqlnd_qc.collect_query_trace to 1 
The maximum depth of the backtrace is limited to the depth set with the PHP configuration directive mysqlnd_qc.query_trace_bt_depth.
</Desc>
    <FName>mysqlnd_qc_set_cache_condition</FName>
    <Desc>bool mysqlnd_qc_set_cache_condition ( int $condition_type , mixed $condition , mixed $condition_option )
Sets a condition for automatic caching of statements which do not contain the necessary SQL hints to enable caching of them.
</Desc>
    <FName>mysqlnd_qc_set_is_select</FName>
    <Desc>mixed mysqlnd_qc_set_is_select ( string $callback )
Installs a callback which decides whether a statement is cached. 
There are several ways of hinting PELC/mysqlnd_qc to cache a query. By default, PECL/mysqlnd_qc attempts to cache a if caching of all statements is enabled or the query string begins with a certain SQL hint. The plugin internally calls a function named is_select() to find out. This internal function can be replaced with a user-defined callback. Then, the user-defined callback is responsible to decide whether the plugin attempts to cache a statement. Because the internal function is replaced with the callback, the callback gains full control. The callback is free to ignore the configuration setting mysqlnd_qc.cache_by_default and SQL hints. 
The callback is invoked for every statement inspected by the plugin. It is given the statements string as a parameter. The callback returns FALSE if the statement shall not be cached. It returns TRUE to make the plugin attempt to cache the statements result set, if any. A so-created cache entry is given the default TTL set with the PHP configuration directive mysqlnd_qc.ttl. If a different TTL shall be used, the callback returns a numeric value to be used as the TTL. 
The internal is_select function is part of the internal cache storage handler interface. Thus, a user-defined storage handler offers the same capabilities.
</Desc>
    <FName>mysqlnd_qc_set_storage_handler</FName>
    <Desc>bool mysqlnd_qc_set_storage_handler ( string $handler )
Sets the storage handler used by the query cache. A list of available storage handler can be obtained from mysqlnd_qc_get_available_handlers(). Which storage are available depends on the compile time configuration of the query cache plugin. The default storage handler is always available. All other storage handler must be enabled explicitly when building the extension.
</Desc>
    <FName>mysqlnd_qc_set_user_handlers</FName>
    <Desc>bool mysqlnd_qc_set_user_handlers ( string $get_hash , string $find_query_in_cache , string $return_to_cache , string $add_query_to_cache_if_not_exists , string $query_is_select , string $update_query_run_time_stats , string $get_stats , string $clear_cache )
Sets the callback functions for a user-defined procedural storage handler.
</Desc>
    <FName>mysqlnd_uh_convert_to_mysqlnd</FName>
    <Desc>resource mysqlnd_uh_convert_to_mysqlnd ( mysqli &$mysql_connection )
Converts a MySQL connection handle into a mysqlnd connection handle. After conversion you can execute mysqlnd library calls on the connection handle. This can be used to access mysqlnd functionality not made available through user space API calls. 
The function can be disabled with mysqlnd_uh.enable. If mysqlnd_uh.enable is set to FALSE the function will not install the proxy and always return TRUE. Additionally, an error of the type E_WARNING may be emitted. The error message may read like PHP Warning: mysqlnd_uh_convert_to_mysqlnd(): (Mysqlnd User Handler) The plugin has been disabled by setting the configuration parameter mysqlnd_uh.enable = false. You are not allowed to call this function [...].
</Desc>
    <FName>mysqlnd_uh_set_connection_proxy</FName>
    <Desc>bool mysqlnd_uh_set_connection_proxy ( MysqlndUhConnection &$connection_proxy [, mysqli &$mysqli_connection ] )
Installs a proxy object to hook mysqlnd's connection objects methods. Once installed, the proxy will be used for all MySQL connections opened with mysqli, mysql or PDO_MYSQL, assuming that the listed extensions are compiled to use the mysqlnd library. 
The function can be disabled with mysqlnd_uh.enable. If mysqlnd_uh.enable is set to FALSE the function will not install the proxy and always return TRUE. Additionally, an error of the type E_WARNING may be emitted. The error message may read like PHP Warning: mysqlnd_uh_set_connection_proxy(): (Mysqlnd User Handler) The plugin has been disabled by setting the configuration parameter mysqlnd_uh.enable = false. The proxy has not been installed [...].
</Desc>
    <FName>mysqlnd_uh_set_statement_proxy</FName>
    <Desc>bool mysqlnd_uh_set_statement_proxy ( MysqlndUhStatement &$statement_proxy )
Installs a proxy for mysqlnd statements. The proxy object will be used for all mysqlnd prepared statement objects, regardless which PHP MySQL extension (mysqli, mysql, PDO_MYSQL) has created them as long as the extension is compiled to use the mysqlnd library. 
The function can be disabled with mysqlnd_uh.enable. If mysqlnd_uh.enable is set to FALSE the function will not install the proxy and always return TRUE. Additionally, an error of the type E_WARNING may be emitted. The error message may read like PHP Warning: mysqlnd_uh_set_statement_proxy(): (Mysqlnd User Handler) The plugin has been disabled by setting the configuration parameter mysqlnd_uh.enable = false. The proxy has not been installed [...].
</Desc>
    <FName>natcasesort</FName>
    <Desc>bool natcasesort ( array &$array )
natcasesort() is a case insensitive version of natsort(). 
This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a "natural ordering". 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined.
</Desc>
    <FName>natsort</FName>
    <Desc>bool natsort ( array &$array )
This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a "natural ordering". An example of the difference between this algorithm and the regular computer string sorting algorithms (used in sort()) can be seen in the example below. 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined.
</Desc>
    <FName>ncurses_addch</FName>
    <Desc>int ncurses_addch ( int $ch )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_addchnstr</FName>
    <Desc>int ncurses_addchnstr ( string $s , int $n )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_addchstr</FName>
    <Desc>int ncurses_addchstr ( string $s )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_addnstr</FName>
    <Desc>int ncurses_addnstr ( string $s , int $n )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_addstr</FName>
    <Desc>int ncurses_addstr ( string $text )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_assume_default_colors</FName>
    <Desc>int ncurses_assume_default_colors ( int $fg , int $bg )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_attroff</FName>
    <Desc>int ncurses_attroff ( int $attributes )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_attron</FName>
    <Desc>int ncurses_attron ( int $attributes )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_attrset</FName>
    <Desc>int ncurses_attrset ( int $attributes )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_baudrate</FName>
    <Desc>int ncurses_baudrate ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_beep</FName>
    <Desc>int ncurses_beep ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
ncurses_beep() sends an audible alert (bell) and if its not possible flashes the screen. 
See Also
ncurses_flash() - Flash terminal screen (visual bell) 
</Desc>
    <FName>ncurses_bkgd</FName>
    <Desc>int ncurses_bkgd ( int $attrchar )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_bkgdset</FName>
    <Desc>void ncurses_bkgdset ( int $attrchar )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_border</FName>
    <Desc>int ncurses_border ( int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Draws the specified lines and corners around the main window. 
Use ncurses_wborder() for borders around subwindows!
</Desc>
    <FName>ncurses_bottom_panel</FName>
    <Desc>int ncurses_bottom_panel ( resource $panel )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_can_change_color</FName>
    <Desc>bool ncurses_can_change_color ( void )
Checks whether the terminal has color capabilities and whether the programmer can change color definitions using ncurses_init_color(). ncurses must be initialized using ncurses_init() before calling this function.
</Desc>
    <FName>ncurses_cbreak</FName>
    <Desc>bool ncurses_cbreak ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Disables line buffering and character processing (interrupt and flow control characters are unaffected), making characters typed by the user immediately available to the program.
</Desc>
    <FName>ncurses_clear</FName>
    <Desc>bool ncurses_clear ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Clears the screen completely without setting blanks. 
Note: ncurses_clear() clears the screen without setting blanks, which have the current background rendition. To clear screen with blanks, use ncurses_erase().
</Desc>
    <FName>ncurses_clrtobot</FName>
    <Desc>bool ncurses_clrtobot ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Erases all lines from cursor to end of screen and creates blanks. Blanks created by ncurses_clrtobot() have the current background rendition.
</Desc>
    <FName>ncurses_clrtoeol</FName>
    <Desc>bool ncurses_clrtoeol ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Erases the current line from cursor position to the end. Blanks created by ncurses_clrtoeol() have the current background rendition.
</Desc>
    <FName>ncurses_color_content</FName>
    <Desc>int ncurses_color_content ( int $color , int &$r , int &$g , int &$b )
Retrieves the red, green, and blue components for the given color definition. Terminal color capabilities must be initialized with ncurses_start_color() prior to calling this function.
</Desc>
    <FName>ncurses_color_set</FName>
    <Desc>int ncurses_color_set ( int $pair )
Sets the active foreground and background colors. Any characters written after this function is invoked will have these colors. This function requires terminal colors to be supported and initialized using ncurses_start_color() beforehand. 
ncurses uses color pairs to specify both foreground and background colors. Use ncurses_init_pair() to define a color pair.
</Desc>
    <FName>ncurses_curs_set</FName>
    <Desc>int ncurses_curs_set ( int $visibility )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_def_prog_mode</FName>
    <Desc>bool ncurses_def_prog_mode ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Saves the current terminal modes for program (in curses) for use by ncurses_reset_prog_mode().
</Desc>
    <FName>ncurses_def_shell_mode</FName>
    <Desc>bool ncurses_def_shell_mode ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Saves the current terminal modes for shell (not in curses) for use by ncurses_reset_shell_mode().
</Desc>
    <FName>ncurses_define_key</FName>
    <Desc>int ncurses_define_key ( string $definition , int $keycode )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_del_panel</FName>
    <Desc>bool ncurses_del_panel ( resource $panel )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_delay_output</FName>
    <Desc>int ncurses_delay_output ( int $milliseconds )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_delch</FName>
    <Desc>bool ncurses_delch ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Deletes the character under the cursor. All characters to the right of the cursor on the same line are moved to the left one position and the last character on the line is filled with a blank. The cursor position does not change.
</Desc>
    <FName>ncurses_deleteln</FName>
    <Desc>bool ncurses_deleteln ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Deletes the current line under cursor position. All lines below the current line are moved up one line. The bottom line of window is cleared. Cursor position does not change.
</Desc>
    <FName>ncurses_delwin</FName>
    <Desc>bool ncurses_delwin ( resource $window )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_doupdate</FName>
    <Desc>bool ncurses_doupdate ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Compares the virtual screen to the physical screen and updates the physical screen. This way is more effective than using multiple refresh calls.
</Desc>
    <FName>ncurses_echo</FName>
    <Desc>bool ncurses_echo ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Enables echo mode. All characters typed by user are echoed by ncurses_getch().
</Desc>
    <FName>ncurses_echochar</FName>
    <Desc>int ncurses_echochar ( int $character )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_end</FName>
    <Desc>int ncurses_end ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_erase</FName>
    <Desc>bool ncurses_erase ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Fills the terminal screen with blanks. 
Created blanks have the current background rendition, set by ncurses_bkgd().
</Desc>
    <FName>ncurses_erasechar</FName>
    <Desc>string ncurses_erasechar ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the current erase character.
</Desc>
    <FName>ncurses_filter</FName>
    <Desc>void ncurses_filter ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_flash</FName>
    <Desc>bool ncurses_flash ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Flashes the screen, and if its not possible, sends an audible alert (bell).
</Desc>
    <FName>ncurses_flushinp</FName>
    <Desc>bool ncurses_flushinp ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Throws away any typeahead that has been typed and has not yet been read by your program.
</Desc>
    <FName>ncurses_getch</FName>
    <Desc>int ncurses_getch ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_getmaxyx</FName>
    <Desc>void ncurses_getmaxyx ( resource $window , int &$y , int &$x )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Gets the horizontal and vertical size of the given window into the given variables. 
Variables must be passed as reference, so they are updated when the user changes the terminal size.
</Desc>
    <FName>ncurses_getmouse</FName>
    <Desc>bool ncurses_getmouse ( array &$mevent )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
ncurses_getmouse() reads mouse event out of queue.
</Desc>
    <FName>ncurses_getyx</FName>
    <Desc>void ncurses_getyx ( resource $window , int &$y , int &$x )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_halfdelay</FName>
    <Desc>int ncurses_halfdelay ( int $tenth )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_has_colors</FName>
    <Desc>bool ncurses_has_colors ( void )
Checks whether the terminal has color capabilities. This function can be used to write terminal-independent programs. ncurses must be initialized using ncurses_init() before calling this function.
</Desc>
    <FName>ncurses_has_ic</FName>
    <Desc>bool ncurses_has_ic ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Checks whether the terminal has insert and delete capabilities.
</Desc>
    <FName>ncurses_has_il</FName>
    <Desc>bool ncurses_has_il ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Checks whether the terminal has insert- and delete-line-capabilities.
</Desc>
    <FName>ncurses_has_key</FName>
    <Desc>int ncurses_has_key ( int $keycode )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_hide_panel</FName>
    <Desc>int ncurses_hide_panel ( resource $panel )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_hline</FName>
    <Desc>int ncurses_hline ( int $charattr , int $n )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_inch</FName>
    <Desc>string ncurses_inch ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the character from the current position.
</Desc>
    <FName>ncurses_init_color</FName>
    <Desc>int ncurses_init_color ( int $color , int $r , int $g , int $b )
Defines or redefines the given color. When this function is called, all occurrences of the given color on the screen, if any, immediately change to the new definition. 
Color capabilities must be supported by the terminal and initialized using ncurses_start_color() prior to calling this function. In addition, the terminal must have color changing capabilities; use ncurses_can_change_color() to check for this.
</Desc>
    <FName>ncurses_init_pair</FName>
    <Desc>int ncurses_init_pair ( int $pair , int $fg , int $bg )
Defines or redefines the given color pair to have the given foreground and background colors. If the color pair was previously initialized, the screen is refreshed and all occurrences of it are changed to reflect the new definition. 
Color capabilities must be initialized using ncurses_start_color() before calling this function. The first color pair (color pair 0) is assumed to be white on black by default, but can be changed using ncurses_assume_default_colors().
</Desc>
    <FName>ncurses_init</FName>
    <Desc>void ncurses_init ( void )
Initializes the ncurses interface. This function must be used before any other ncurses function call. 
Note that ncurses_end() must be called before exiting from the program, or the terminal will not be restored to its proper non-visual mode.
</Desc>
    <FName>ncurses_insch</FName>
    <Desc>int ncurses_insch ( int $character )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_insdelln</FName>
    <Desc>int ncurses_insdelln ( int $count )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_insertln</FName>
    <Desc>int ncurses_insertln ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Inserts a new line above the current line. The bottom line will be lost. 
</Desc>
    <FName>ncurses_insstr</FName>
    <Desc>int ncurses_insstr ( string $text )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_instr</FName>
    <Desc>int ncurses_instr ( string &$buffer )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Reads a string from the terminal screen and returns the number of characters read from the current character position until end of line.
</Desc>
    <FName>ncurses_isendwin</FName>
    <Desc>bool ncurses_isendwin ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Checks if ncurses is in endwin mode.
</Desc>
    <FName>ncurses_keyok</FName>
    <Desc>int ncurses_keyok ( int $keycode , bool $enable )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_keypad</FName>
    <Desc>int ncurses_keypad ( resource $window , bool $bf )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_killchar</FName>
    <Desc>string ncurses_killchar ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the current line kill character.
</Desc>
    <FName>ncurses_longname</FName>
    <Desc>string ncurses_longname ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns a verbose description of the terminal.
</Desc>
    <FName>ncurses_meta</FName>
    <Desc>int ncurses_meta ( resource $window , bool $8bit )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mouse_trafo</FName>
    <Desc>bool ncurses_mouse_trafo ( int &$y , int &$x , bool $toscreen )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mouseinterval</FName>
    <Desc>int ncurses_mouseinterval ( int $milliseconds )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mousemask</FName>
    <Desc>int ncurses_mousemask ( int $newmask , int &$oldmask )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Sets mouse events to be reported. By default no mouse events will be reported. 
Mouse events are represented by NCURSES_KEY_MOUSE in the ncurses_wgetch() input stream. To read the event data and pop the event of queue, call ncurses_getmouse().
</Desc>
    <FName>ncurses_move_panel</FName>
    <Desc>int ncurses_move_panel ( resource $panel , int $startx , int $starty )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_move</FName>
    <Desc>int ncurses_move ( int $y , int $x )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvaddch</FName>
    <Desc>int ncurses_mvaddch ( int $y , int $x , int $c )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvaddchnstr</FName>
    <Desc>int ncurses_mvaddchnstr ( int $y , int $x , string $s , int $n )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvaddchstr</FName>
    <Desc>int ncurses_mvaddchstr ( int $y , int $x , string $s )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvaddnstr</FName>
    <Desc>int ncurses_mvaddnstr ( int $y , int $x , string $s , int $n )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvaddstr</FName>
    <Desc>int ncurses_mvaddstr ( int $y , int $x , string $s )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvcur</FName>
    <Desc>int ncurses_mvcur ( int $old_y , int $old_x , int $new_y , int $new_x )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvdelch</FName>
    <Desc>int ncurses_mvdelch ( int $y , int $x )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvgetch</FName>
    <Desc>int ncurses_mvgetch ( int $y , int $x )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvhline</FName>
    <Desc>int ncurses_mvhline ( int $y , int $x , int $attrchar , int $n )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvinch</FName>
    <Desc>int ncurses_mvinch ( int $y , int $x )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvvline</FName>
    <Desc>int ncurses_mvvline ( int $y , int $x , int $attrchar , int $n )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_mvwaddstr</FName>
    <Desc>int ncurses_mvwaddstr ( resource $window , int $y , int $x , string $text )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_napms</FName>
    <Desc>int ncurses_napms ( int $milliseconds )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_new_panel</FName>
    <Desc>resource ncurses_new_panel ( resource $window )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_newpad</FName>
    <Desc>resource ncurses_newpad ( int $rows , int $cols )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_newwin</FName>
    <Desc>resource ncurses_newwin ( int $rows , int $cols , int $y , int $x )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Creates a new window to draw elements in. 
When creating additional windows, remember to use ncurses_getmaxyx() to check for available space, as terminal size is individual and may vary.
</Desc>
    <FName>ncurses_nl</FName>
    <Desc>bool ncurses_nl ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_nocbreak</FName>
    <Desc>bool ncurses_nocbreak ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns terminal to normal (cooked) mode. Initially the terminal may or may not be in cbreak mode as the mode is inherited. Therefore a program should call ncurses_cbreak() and ncurses_nocbreak() explicitly.
</Desc>
    <FName>ncurses_noecho</FName>
    <Desc>bool ncurses_noecho ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Prevents echoing of user typed characters.
</Desc>
    <FName>ncurses_nonl</FName>
    <Desc>bool ncurses_nonl ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_noqiflush</FName>
    <Desc>void ncurses_noqiflush ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_noraw</FName>
    <Desc>bool ncurses_noraw ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Switches the terminal out of raw mode. Raw mode is similar to cbreak mode, in that characters typed are immediately passed through to the user program. The difference is that in raw mode, the interrupt, quit, suspend and flow control characters are all passed through uninterpreted, instead of generating a signal.
</Desc>
    <FName>ncurses_pair_content</FName>
    <Desc>int ncurses_pair_content ( int $pair , int &$f , int &$b )
Retrieves the foreground and background colors that constitute the given color pair. Terminal color capabilities must be initialized with ncurses_start_color() prior to calling this function.
</Desc>
    <FName>ncurses_panel_above</FName>
    <Desc>resource ncurses_panel_above ( resource $panel )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_panel_below</FName>
    <Desc>resource ncurses_panel_below ( resource $panel )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_panel_window</FName>
    <Desc>resource ncurses_panel_window ( resource $panel )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_pnoutrefresh</FName>
    <Desc>int ncurses_pnoutrefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_prefresh</FName>
    <Desc>int ncurses_prefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_putp</FName>
    <Desc>int ncurses_putp ( string $text )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_qiflush</FName>
    <Desc>void ncurses_qiflush ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_raw</FName>
    <Desc>bool ncurses_raw ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Places the terminal in raw mode. Raw mode is similar to cbreak mode, in that characters typed are immediately passed through to the user program. The difference is that in raw mode, the interrupt, quit, suspend and flow control characters are all passed through uninterpreted, instead of generating a signal.
</Desc>
    <FName>ncurses_refresh</FName>
    <Desc>int ncurses_refresh ( int $ch )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_replace_panel</FName>
    <Desc>int ncurses_replace_panel ( resource $panel , resource $window )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_reset_prog_mode</FName>
    <Desc>int ncurses_reset_prog_mode ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_reset_shell_mode</FName>
    <Desc>int ncurses_reset_shell_mode ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_resetty</FName>
    <Desc>bool ncurses_resetty ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Restores the terminal state, which was previously saved by calling ncurses_savetty().
</Desc>
    <FName>ncurses_savetty</FName>
    <Desc>bool ncurses_savetty ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Saves the current terminal state. The saved terminal state can be restored with ncurses_resetty().
</Desc>
    <FName>ncurses_scr_dump</FName>
    <Desc>int ncurses_scr_dump ( string $filename )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_scr_init</FName>
    <Desc>int ncurses_scr_init ( string $filename )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_scr_restore</FName>
    <Desc>int ncurses_scr_restore ( string $filename )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_scr_set</FName>
    <Desc>int ncurses_scr_set ( string $filename )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_scrl</FName>
    <Desc>int ncurses_scrl ( int $count )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_show_panel</FName>
    <Desc>int ncurses_show_panel ( resource $panel )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_slk_attr</FName>
    <Desc>int ncurses_slk_attr ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the current soft label key attribute.
</Desc>
    <FName>ncurses_slk_attroff</FName>
    <Desc>int ncurses_slk_attroff ( int $intarg )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_slk_attron</FName>
    <Desc>int ncurses_slk_attron ( int $intarg )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_slk_attrset</FName>
    <Desc>int ncurses_slk_attrset ( int $intarg )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_slk_clear</FName>
    <Desc>bool ncurses_slk_clear ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
The function ncurses_slk_clear() clears soft label keys from screen.
</Desc>
    <FName>ncurses_slk_color</FName>
    <Desc>int ncurses_slk_color ( int $intarg )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_slk_init</FName>
    <Desc>bool ncurses_slk_init ( int $format )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Initializes soft label key functions 
This function must be called before ncurses_init() or ncurses_newwin() is called.
</Desc>
    <FName>ncurses_slk_noutrefresh</FName>
    <Desc>bool ncurses_slk_noutrefresh ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_slk_refresh</FName>
    <Desc>int ncurses_slk_refresh ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Copies soft label keys from virtual screen to physical screen. 
</Desc>
    <FName>ncurses_slk_restore</FName>
    <Desc>int ncurses_slk_restore ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Restores the soft label keys after ncurses_slk_clear() has been performed. 
</Desc>
    <FName>ncurses_slk_set</FName>
    <Desc>bool ncurses_slk_set ( int $labelnr , string $label , int $format )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_slk_touch</FName>
    <Desc>int ncurses_slk_touch ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Forces all the soft labels to be output the next time a ncurses_slk_noutrefresh() is performed. 
</Desc>
    <FName>ncurses_standend</FName>
    <Desc>int ncurses_standend ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_standout</FName>
    <Desc>int ncurses_standout ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_start_color</FName>
    <Desc>int ncurses_start_color ( void )
Initializes color functionality in ncurses. This function must be called before any color manipulation functions are called and after ncurses_init() is called. It is good practice to call this function right after ncurses_init().
</Desc>
    <FName>ncurses_termattrs</FName>
    <Desc>bool ncurses_termattrs ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_termname</FName>
    <Desc>string ncurses_termname ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns terminals shortname.
</Desc>
    <FName>ncurses_timeout</FName>
    <Desc>void ncurses_timeout ( int $millisec )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_top_panel</FName>
    <Desc>int ncurses_top_panel ( resource $panel )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_typeahead</FName>
    <Desc>int ncurses_typeahead ( int $fd )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_ungetch</FName>
    <Desc>int ncurses_ungetch ( int $keycode )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_ungetmouse</FName>
    <Desc>bool ncurses_ungetmouse ( array $mevent )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Pushes a KEY_MOUSE event onto the input queue and associates with this event the given state data and screen-relative character cell coordinates, specified in mevent.
</Desc>
    <FName>ncurses_update_panels</FName>
    <Desc>void ncurses_update_panels ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_use_default_colors</FName>
    <Desc>bool ncurses_use_default_colors ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>ncurses_use_env</FName>
    <Desc>void ncurses_use_env ( bool $flag )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_use_extended_names</FName>
    <Desc>int ncurses_use_extended_names ( bool $flag )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_vidattr</FName>
    <Desc>int ncurses_vidattr ( int $intarg )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_vline</FName>
    <Desc>int ncurses_vline ( int $charattr , int $n )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_waddch</FName>
    <Desc>int ncurses_waddch ( resource $window , int $ch )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_waddstr</FName>
    <Desc>int ncurses_waddstr ( resource $window , string $str [, int $n ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wattroff</FName>
    <Desc>int ncurses_wattroff ( resource $window , int $attrs )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wattron</FName>
    <Desc>int ncurses_wattron ( resource $window , int $attrs )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wattrset</FName>
    <Desc>int ncurses_wattrset ( resource $window , int $attrs )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wborder</FName>
    <Desc>int ncurses_wborder ( resource $window , int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Draws the specified lines and corners around the passed window. 
Use ncurses_border() for borders around the main window.
</Desc>
    <FName>ncurses_wclear</FName>
    <Desc>int ncurses_wclear ( resource $window )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wcolor_set</FName>
    <Desc>int ncurses_wcolor_set ( resource $window , int $color_pair )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_werase</FName>
    <Desc>int ncurses_werase ( resource $window )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wgetch</FName>
    <Desc>int ncurses_wgetch ( resource $window )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_whline</FName>
    <Desc>int ncurses_whline ( resource $window , int $charattr , int $n )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wmouse_trafo</FName>
    <Desc>bool ncurses_wmouse_trafo ( resource $window , int &$y , int &$x , bool $toscreen )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wmove</FName>
    <Desc>int ncurses_wmove ( resource $window , int $y , int $x )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wnoutrefresh</FName>
    <Desc>int ncurses_wnoutrefresh ( resource $window )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wrefresh</FName>
    <Desc>int ncurses_wrefresh ( resource $window )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wstandend</FName>
    <Desc>int ncurses_wstandend ( resource $window )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wstandout</FName>
    <Desc>int ncurses_wstandout ( resource $window )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ncurses_wvline</FName>
    <Desc>int ncurses_wvline ( resource $window , int $charattr , int $n )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_bell</FName>
    <Desc>void newt_bell ( void )
This function sends a beep to the terminal. 
Note: 
Depending on the terminal's settings, this beep may or may not be audible.
</Desc>
    <FName>newt_button_bar</FName>
    <Desc>resource newt_button_bar ( array &$buttons )
This function returns a grid containing the buttons created.
</Desc>
    <FName>newt_button</FName>
    <Desc>resource newt_button ( int $left , int $top , string $text )
Creates a new button.
</Desc>
    <FName>newt_centered_window</FName>
    <Desc>int newt_centered_window ( int $width , int $height [, string $title ] )
Open a centered window of the specified size.
</Desc>
    <FName>newt_checkbox_get_value</FName>
    <Desc>string newt_checkbox_get_value ( resource $checkbox )
This function returns the character in the sequence which indicates the current value of the checkbox.
</Desc>
    <FName>newt_checkbox_set_flags</FName>
    <Desc>void newt_checkbox_set_flags ( resource $checkbox , int $flags , int $sense )
This function allows to set various flags on checkbox resource.
</Desc>
    <FName>newt_checkbox_set_value</FName>
    <Desc>void newt_checkbox_set_value ( resource $checkbox , string $value )
This function allows to set the current value of the checkbox resource.
</Desc>
    <FName>newt_checkbox_tree_add_item</FName>
    <Desc>void newt_checkbox_tree_add_item ( resource $checkboxtree , string $text , mixed $data , int $flags , int $index [, int $... ] )
This function allows to add new item to the checkbox tree.
</Desc>
    <FName>newt_checkbox_tree_find_item</FName>
    <Desc>array newt_checkbox_tree_find_item ( resource $checkboxtree , mixed $data )
Finds an item in the checkbox tree by item's data.
</Desc>
    <FName>newt_checkbox_tree_get_current</FName>
    <Desc>mixed newt_checkbox_tree_get_current ( resource $checkboxtree )
This method returns checkbox tree selected tem.
</Desc>
    <FName>newt_checkbox_tree_get_entry_value</FName>
    <Desc>string newt_checkbox_tree_get_entry_value ( resource $checkboxtree , mixed $data )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_checkbox_tree_get_multi_selection</FName>
    <Desc>array newt_checkbox_tree_get_multi_selection ( resource $checkboxtree , string $seqnum )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_checkbox_tree_get_selection</FName>
    <Desc>array newt_checkbox_tree_get_selection ( resource $checkboxtree )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_checkbox_tree_multi</FName>
    <Desc>resource newt_checkbox_tree_multi ( int $left , int $top , int $height , string $seq [, int $flags ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_checkbox_tree_set_current</FName>
    <Desc>void newt_checkbox_tree_set_current ( resource $checkboxtree , mixed $data )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_checkbox_tree_set_entry_value</FName>
    <Desc>void newt_checkbox_tree_set_entry_value ( resource $checkboxtree , mixed $data , string $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_checkbox_tree_set_entry</FName>
    <Desc>void newt_checkbox_tree_set_entry ( resource $checkboxtree , mixed $data , string $text )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_checkbox_tree_set_width</FName>
    <Desc>void newt_checkbox_tree_set_width ( resource $checkbox_tree , int $width )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_checkbox_tree</FName>
    <Desc>resource newt_checkbox_tree ( int $left , int $top , int $height [, int $flags ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_checkbox</FName>
    <Desc>resource newt_checkbox ( int $left , int $top , string $text , string $def_value [, string $seq ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_clear_key_buffer</FName>
    <Desc>void newt_clear_key_buffer ( void )
Discards the contents of the terminal's input buffer without waiting for additional input.
</Desc>
    <FName>newt_cls</FName>
    <Desc>void newt_cls ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_compact_button</FName>
    <Desc>resource newt_compact_button ( int $left , int $top , string $text )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_component_add_callback</FName>
    <Desc>void newt_component_add_callback ( resource $component , mixed $func_name , mixed $data )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_component_takes_focus</FName>
    <Desc>void newt_component_takes_focus ( resource $component , bool $takes_focus )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_create_grid</FName>
    <Desc>resource newt_create_grid ( int $cols , int $rows )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_cursor_off</FName>
    <Desc>void newt_cursor_off ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_cursor_on</FName>
    <Desc>void newt_cursor_on ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_delay</FName>
    <Desc>void newt_delay ( int $microseconds )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_draw_form</FName>
    <Desc>void newt_draw_form ( resource $form )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_draw_root_text</FName>
    <Desc>void newt_draw_root_text ( int $left , int $top , string $text )
Displays the string text at the position indicated.
</Desc>
    <FName>newt_entry_get_value</FName>
    <Desc>string newt_entry_get_value ( resource $entry )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_entry_set_filter</FName>
    <Desc>void newt_entry_set_filter ( resource $entry , callable $filter , mixed $data )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_entry_set_flags</FName>
    <Desc>void newt_entry_set_flags ( resource $entry , int $flags , int $sense )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_entry_set</FName>
    <Desc>void newt_entry_set ( resource $entry , string $value [, bool $cursor_at_end ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_entry</FName>
    <Desc>resource newt_entry ( int $left , int $top , int $width [, string $init_value [, int $flags ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_finished</FName>
    <Desc>int newt_finished ( void )
Uninitializes newt interface. This function be called, when program is ready to exit.
</Desc>
    <FName>newt_form_add_component</FName>
    <Desc>void newt_form_add_component ( resource $form , resource $component )
Adds a single component to the form.
</Desc>
    <FName>newt_form_add_components</FName>
    <Desc>void newt_form_add_components ( resource $form , array $components )
Adds several components to the form.
</Desc>
    <FName>newt_form_add_hot_key</FName>
    <Desc>void newt_form_add_hot_key ( resource $form , int $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_form_destroy</FName>
    <Desc>void newt_form_destroy ( resource $form )
This function frees the memory resources used by the form and all of the components which have been added to the form (including those components which are on subforms). Once a form has been destroyed, none of the form's components can be used.
</Desc>
    <FName>newt_form_get_current</FName>
    <Desc>resource newt_form_get_current ( resource $form )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_form_run</FName>
    <Desc>void newt_form_run ( resource $form , array &$exit_struct )
This function runs the form passed to it.
</Desc>
    <FName>newt_form_set_background</FName>
    <Desc>void newt_form_set_background ( resource $from , int $background )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_form_set_height</FName>
    <Desc>void newt_form_set_height ( resource $form , int $height )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_form_set_size</FName>
    <Desc>void newt_form_set_size ( resource $form )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_form_set_timer</FName>
    <Desc>void newt_form_set_timer ( resource $form , int $milliseconds )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_form_set_width</FName>
    <Desc>void newt_form_set_width ( resource $form , int $width )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_form_watch_fd</FName>
    <Desc>void newt_form_watch_fd ( resource $form , resource $stream [, int $flags ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_form</FName>
    <Desc>resource newt_form ([ resource $vert_bar [, string $help [, int $flags ]]] )
Create a new form.
</Desc>
    <FName>newt_get_screen_size</FName>
    <Desc>void newt_get_screen_size ( int &$cols , int &$rows )
Fills in the passed references with the current size of the terminal.
</Desc>
    <FName>newt_grid_add_components_to_form</FName>
    <Desc>void newt_grid_add_components_to_form ( resource $grid , resource $form , bool $recurse )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_basic_window</FName>
    <Desc>resource newt_grid_basic_window ( resource $text , resource $middle , resource $buttons )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_free</FName>
    <Desc>void newt_grid_free ( resource $grid , bool $recurse )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_get_size</FName>
    <Desc>void newt_grid_get_size ( resouce $grid , int &$width , int &$height )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_h_close_stacked</FName>
    <Desc>resource newt_grid_h_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_h_stacked</FName>
    <Desc>resource newt_grid_h_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_place</FName>
    <Desc>void newt_grid_place ( resource $grid , int $left , int $top )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_set_field</FName>
    <Desc>void newt_grid_set_field ( resource $grid , int $col , int $row , int $type , resource $val , int $pad_left , int $pad_top , int $pad_right , int $pad_bottom , int $anchor [, int $flags ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_simple_window</FName>
    <Desc>resource newt_grid_simple_window ( resource $text , resource $middle , resource $buttons )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_v_close_stacked</FName>
    <Desc>resource newt_grid_v_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_v_stacked</FName>
    <Desc>resource newt_grid_v_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_wrapped_window_at</FName>
    <Desc>void newt_grid_wrapped_window_at ( resource $grid , string $title , int $left , int $top )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_grid_wrapped_window</FName>
    <Desc>void newt_grid_wrapped_window ( resource $grid , string $title )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_init</FName>
    <Desc>int newt_init ( void )
Initializes the newt interface. This function must be called before any other newt function.
</Desc>
    <FName>newt_label_set_text</FName>
    <Desc>void newt_label_set_text ( resource $label , string $text )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_label</FName>
    <Desc>resource newt_label ( int $left , int $top , string $text )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_append_entry</FName>
    <Desc>void newt_listbox_append_entry ( resource $listbox , string $text , mixed $data )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_clear_selection</FName>
    <Desc>void newt_listbox_clear_selection ( resource $listbox )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_clear</FName>
    <Desc>void newt_listbox_clear ( resource $listobx )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_delete_entry</FName>
    <Desc>void newt_listbox_delete_entry ( resource $listbox , mixed $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_get_current</FName>
    <Desc>string newt_listbox_get_current ( resource $listbox )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_get_selection</FName>
    <Desc>array newt_listbox_get_selection ( resource $listbox )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_insert_entry</FName>
    <Desc>void newt_listbox_insert_entry ( resource $listbox , string $text , mixed $data , mixed $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_item_count</FName>
    <Desc>int newt_listbox_item_count ( resource $listbox )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_select_item</FName>
    <Desc>void newt_listbox_select_item ( resource $listbox , mixed $key , int $sense )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_set_current_by_key</FName>
    <Desc>void newt_listbox_set_current_by_key ( resource $listbox , mixed $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_set_current</FName>
    <Desc>void newt_listbox_set_current ( resource $listbox , int $num )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_set_data</FName>
    <Desc>void newt_listbox_set_data ( resource $listbox , int $num , mixed $data )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_set_entry</FName>
    <Desc>void newt_listbox_set_entry ( resource $listbox , int $num , string $text )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox_set_width</FName>
    <Desc>void newt_listbox_set_width ( resource $listbox , int $width )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listbox</FName>
    <Desc>resource newt_listbox ( int $left , int $top , int $height [, int $flags ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listitem_get_data</FName>
    <Desc>mixed newt_listitem_get_data ( resource $item )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listitem_set</FName>
    <Desc>void newt_listitem_set ( resource $item , string $text )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_listitem</FName>
    <Desc>resource newt_listitem ( int $left , int $top , string $text , bool $is_default , resouce $prev_item , mixed $data [, int $flags ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_open_window</FName>
    <Desc>int newt_open_window ( int $left , int $top , int $width , int $height [, string $title ] )
Open a window of the specified size and position.
</Desc>
    <FName>newt_pop_help_line</FName>
    <Desc>void newt_pop_help_line ( void )
Replaces the current help line with the one from the stack. 
Note: 
It's important not to call to newt_pop_help_line() more than newt_push_help_line().
</Desc>
    <FName>newt_pop_window</FName>
    <Desc>void newt_pop_window ( void )
Removes the top window from the display, and redraws the display areas which the window overwrote.
</Desc>
    <FName>newt_push_help_line</FName>
    <Desc>void newt_push_help_line ([ string $text ] )
Saves the current help line on a stack, and displays the new line.
</Desc>
    <FName>newt_radio_get_current</FName>
    <Desc>resource newt_radio_get_current ( resource $set_member )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_radiobutton</FName>
    <Desc>resource newt_radiobutton ( int $left , int $top , string $text , bool $is_default [, resource $prev_button ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_redraw_help_line</FName>
    <Desc>void newt_redraw_help_line ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_reflow_text</FName>
    <Desc>string newt_reflow_text ( string $text , int $width , int $flex_down , int $flex_up , int &$actual_width , int &$actual_height )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_refresh</FName>
    <Desc>void newt_refresh ( void )
To increase performance, newt only updates the display when it needs to, not when the program tells it to write to the terminal. Applications can force newt to immediately update modified portions of the screen by calling this function.
</Desc>
    <FName>newt_resize_screen</FName>
    <Desc>void newt_resize_screen ([ bool $redraw ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_resume</FName>
    <Desc>void newt_resume ( void )
Resume using the newt interface after calling newt_suspend().
</Desc>
    <FName>newt_run_form</FName>
    <Desc>resource newt_run_form ( resource $form )
This function runs the form passed to it.
</Desc>
    <FName>newt_scale_set</FName>
    <Desc>void newt_scale_set ( resource $scale , int $amount )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_scale</FName>
    <Desc>resource newt_scale ( int $left , int $top , int $width , int $full_value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_scrollbar_set</FName>
    <Desc>void newt_scrollbar_set ( resource $scrollbar , int $where , int $total )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_set_help_callback</FName>
    <Desc>void newt_set_help_callback ( mixed $function )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_set_suspend_callback</FName>
    <Desc>void newt_set_suspend_callback ( callable $function , mixed $data )
Set a callback function which gets invoked when user presses the suspend key (normally ^Z). If no suspend callback is registered, the suspend keystroke is ignored.
</Desc>
    <FName>newt_suspend</FName>
    <Desc>void newt_suspend ( void )
Tells newt to return the terminal to its initial state. Once this is done, the application can suspend itself (by sending itself a SIGTSTP, fork a child program, or do whatever else it likes).
</Desc>
    <FName>newt_textbox_get_num_lines</FName>
    <Desc>int newt_textbox_get_num_lines ( resource $textbox )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_textbox_reflowed</FName>
    <Desc>resource newt_textbox_reflowed ( int $left , int $top , char $*text , int $width , int $flex_down , int $flex_up [, int $flags ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_textbox_set_height</FName>
    <Desc>void newt_textbox_set_height ( resource $textbox , int $height )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_textbox_set_text</FName>
    <Desc>void newt_textbox_set_text ( resource $textbox , string $text )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_textbox</FName>
    <Desc>resource newt_textbox ( int $left , int $top , int $width , int $height [, int $flags ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_vertical_scrollbar</FName>
    <Desc>resource newt_vertical_scrollbar ( int $left , int $top , int $height [, int $normal_colorset [, int $thumb_colorset ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_wait_for_key</FName>
    <Desc>void newt_wait_for_key ( void )
This function doesn't return until a key has been pressed. The keystroke is then ignored. If a key is already in the terminal's buffer, this function discards a keystroke and returns immediately.
</Desc>
    <FName>newt_win_choice</FName>
    <Desc>int newt_win_choice ( string $title , string $button1_text , string $button2_text , string $format [, mixed $args [, mixed $... ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_win_entries</FName>
    <Desc>int newt_win_entries ( string $title , string $text , int $suggested_width , int $flex_down , int $flex_up , int $data_width , array &$items , string $button1 [, string $... ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_win_menu</FName>
    <Desc>int newt_win_menu ( string $title , string $text , int $suggestedWidth , int $flexDown , int $flexUp , int $maxListHeight , array $items , int &$listItem [, string $button1 [, string $... ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_win_message</FName>
    <Desc>void newt_win_message ( string $title , string $button_text , string $format [, mixed $args [, mixed $... ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_win_messagev</FName>
    <Desc>void newt_win_messagev ( string $title , string $button_text , string $format , array $args )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>newt_win_ternary</FName>
    <Desc>int newt_win_ternary ( string $title , string $button1_text , string $button2_text , string $button3_text , string $format [, mixed $args [, mixed $... ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>next</FName>
    <Desc>mixed next ( array &$array )
next() behaves like current(), with one difference. It advances the internal array pointer one place forward before returning the element value. That means it returns the next array value and advances the internal array pointer by one.
</Desc>
    <FName>ngettext</FName>
    <Desc>string ngettext ( string $msgid1 , string $msgid2 , int $n )
The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.
</Desc>
    <FName>nl_langinfo</FName>
    <Desc>string nl_langinfo ( int $item )
nl_langinfo() is used to access individual elements of the locale categories. Unlike localeconv(), which returns all of the elements, nl_langinfo() allows you to select any specific element.
</Desc>
    <FName>nl2br</FName>
    <Desc>string nl2br ( string $string [, bool $is_xhtml = TRUE ] )
Returns string with <br /> or <br> inserted before all newlines (\r\n, \n\r, \n and \r).
</Desc>
    <FName>nsapi_request_headers</FName>
    <Desc>array nsapi_request_headers ( void )
nsapi_request_headers() gets all the HTTP headers in the current request. This is only supported when PHP runs as a NSAPI module. 
Note: 
Prior to PHP 4.3.3, getallheaders() was only available for the Apache servers. After PHP 4.3.3, getallheaders() is an alias for nsapi_request_headers() if you use the NSAPI module. 
Note: 
You can also get at the value of the common CGI variables by reading them from the $_SERVER superglobal, which works whether or not you are using PHP as a NSAPI module.
</Desc>
    <FName>nsapi_response_headers</FName>
    <Desc>array nsapi_response_headers ( void )
Gets all the NSAPI response headers.
</Desc>
    <FName>nsapi_virtual</FName>
    <Desc>bool nsapi_virtual ( string $uri )
nsapi_virtual() is an NSAPI-specific function which is equivalent to <!--#include virtual...--> in SSI (.shtml files). It does an NSAPI sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you'd parse through webserver. 
To run the sub-request, all buffers are terminated and flushed to the browser, pending headers are sent too. 
You cannot make recursive requests with this function to other PHP scripts. If you want to include PHP scripts, use include or require. 
Note: 
This function depends on a undocumented feature of the Netscape/iPlanet/Sun webservers. Use phpinfo() to determine if it is available. In the Unix environment it should always work, in Windows it depends on the name of a ns-httpdXX.dll file. 
Read the note about subrequests in the NSAPI section (UNIX, Windows) if you experience this problem.
</Desc>
    <FName>number_format</FName>
    <Desc>string number_format ( float $number [, int $decimals = 0 ] )
string number_format ( float $number , int $decimals = 0 , string $dec_point = "." , string $thousands_sep = "," )
This function accepts either one, two, or four parameters (not three): 
If only one parameter is given, number will be formatted without decimals, but with a comma (",") between every group of thousands. 
If two parameters are given, number will be formatted with decimals decimals with a dot (".") in front, and a comma (",") between every group of thousands. 
If all four parameters are given, number will be formatted with decimals decimals, dec_point instead of a dot (".") before the decimals and thousands_sep instead of a comma (",") between every group of thousands.
</Desc>
    <FName>oauth_get_sbs</FName>
    <Desc>string oauth_get_sbs ( string $http_method , string $uri [, array $request_parameters ] )
Generates a Signature Base String according to pecl/oauth.
</Desc>
    <FName>oauth_urlencode</FName>
    <Desc>string oauth_urlencode ( string $uri )
Encodes a URI to » RFC 3986.
</Desc>
    <FName>ob_clean</FName>
    <Desc>void ob_clean ( void )
This function discards the contents of the output buffer. 
This function does not destroy the output buffer like ob_end_clean() does. 
The output buffer must be started by ob_start() with PHP_OUTPUT_HANDLER_CLEANABLE flag. Otherwise ob_clean() will not work.
</Desc>
    <FName>ob_end_clean</FName>
    <Desc>bool ob_end_clean ( void )
This function discards the contents of the topmost output buffer and turns off this output buffering. If you want to further process the buffer's contents you have to call ob_get_contents() before ob_end_clean() as the buffer contents are discarded when ob_end_clean() is called. 
The output buffer must be started by ob_start() with PHP_OUTPUT_HANDLER_CLEANABLE and PHP_OUTPUT_HANDLER_REMOVABLE flags. Otherwise ob_end_clean() will not work.
</Desc>
    <FName>ob_end_flush</FName>
    <Desc>bool ob_end_flush ( void )
This function will send the contents of the topmost output buffer (if any) and turn this output buffer off. If you want to further process the buffer's contents you have to call ob_get_contents() before ob_end_flush() as the buffer contents are discarded after ob_end_flush() is called. 
The output buffer must be started by ob_start() with PHP_OUTPUT_HANDLER_FLUSHABLE and PHP_OUTPUT_HANDLER_REMOVABLE flags. Otherwise ob_end_flush() will not work. 
Note: This function is similar to ob_get_flush(), except that ob_get_flush() returns the buffer as a string.
</Desc>
    <FName>ob_flush</FName>
    <Desc>void ob_flush ( void )
This function will send the contents of the output buffer (if any). If you want to further process the buffer's contents you have to call ob_get_contents() before ob_flush() as the buffer contents are discarded after ob_flush() is called. 
This function does not destroy the output buffer like ob_end_flush() does.
</Desc>
    <FName>ob_get_clean</FName>
    <Desc>string ob_get_clean ( void )
Gets the current buffer contents and delete current output buffer. 
ob_get_clean() essentially executes both ob_get_contents() and ob_end_clean(). 
The output buffer must be started by ob_start() with PHP_OUTPUT_HANDLER_CLEANABLE flag. Otherwise ob_get_clean() will not work.
</Desc>
    <FName>ob_get_contents</FName>
    <Desc>string ob_get_contents ( void )
Gets the contents of the output buffer without clearing it.
</Desc>
    <FName>ob_get_flush</FName>
    <Desc>string ob_get_flush ( void )
ob_get_flush() flushes the output buffer, return it as a string and turns off output buffering. 
The output buffer must be started by ob_start() with PHP_OUTPUT_HANDLER_FLUSHABLE flag. Otherwise ob_get_flush() will not work. 
Note: This function is similar to ob_end_flush(), except that this function also returns the buffer as a string.
</Desc>
    <FName>ob_get_length</FName>
    <Desc>int ob_get_length ( void )
This will return the length of the contents in the output buffer, in bytes.
</Desc>
    <FName>ob_get_level</FName>
    <Desc>int ob_get_level ( void )
Returns the nesting level of the output buffering mechanism.
</Desc>
    <FName>ob_get_status</FName>
    <Desc>array ob_get_status ([ bool $full_status = FALSE ] )
ob_get_status() returns status information on either the top level output buffer or all active output buffer levels if full_status is set to TRUE.
</Desc>
    <FName>ob_gzhandler</FName>
    <Desc>string ob_gzhandler ( string $buffer , int $mode )
ob_gzhandler() is intended to be used as a callback function for ob_start() to help facilitate sending gz-encoded data to web browsers that support compressed web pages. Before ob_gzhandler() actually sends compressed data, it determines what type of content encoding the browser will accept ("gzip", "deflate" or none at all) and will return its output accordingly. All browsers are supported since it's up to the browser to send the correct header saying that it accepts compressed web pages. If a browser doesn't support compressed pages this function returns FALSE.
</Desc>
    <FName>ob_iconv_handler</FName>
    <Desc>string ob_iconv_handler ( string $contents , int $status )
Converts the string encoded in internal_encoding to output_encoding. 
internal_encoding and output_encoding should be defined in the php.ini file or in iconv_set_encoding().
</Desc>
    <FName>ob_implicit_flush</FName>
    <Desc>void ob_implicit_flush ([ int $flag = 1 ] )
ob_implicit_flush() will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush() will no longer be needed.
</Desc>
    <FName>ob_list_handlers</FName>
    <Desc>array ob_list_handlers ( void )
Lists all output handlers in use.
</Desc>
    <FName>ob_start</FName>
    <Desc>bool ob_start ([ callable $output_callback = NULL [, int $chunk_size = 0 [, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS ]]] )
This function will turn output buffering on. While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer. 
The contents of this internal buffer may be copied into a string variable using ob_get_contents(). To output what is stored in the internal buffer, use ob_end_flush(). Alternatively, ob_end_clean() will silently discard the buffer contents. 
Warning 
Some web servers (e.g. Apache) change the working directory of a script when calling the callback function. You can change it back by e.g. chdir(dirname($_SERVER['SCRIPT_FILENAME'])) in the callback function. 
Output buffers are stackable, that is, you may call ob_start() while another ob_start() is active. Just make sure that you call ob_end_flush() the appropriate number of times. If multiple output callback functions are active, output is being filtered sequentially through each of them in nesting order.
</Desc>
    <FName>ob_tidyhandler</FName>
    <Desc>string ob_tidyhandler ( string $input [, int $mode ] )
Callback function for ob_start() to repair the buffer.
</Desc>
    <FName>oci_bind_array_by_name</FName>
    <Desc>bool oci_bind_array_by_name ( resource $statement , string $name , array &$var_array , int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC ]] )
Binds the PHP array var_array to the Oracle placeholder name, which points to an Oracle PL/SQL array. Whether it will be used for input or output will be determined at run-time.
</Desc>
    <FName>oci_bind_by_name</FName>
    <Desc>bool oci_bind_by_name ( resource $statement , string $bv_name , mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR ]] )
Binds a PHP variable variable to the Oracle bind variable placeholder bv_name. Binding is important for Oracle database performance and also as a way to avoid SQL Injection security issues. 
Binding allows the database to reuse the statement context and caches from previous executions of the statement, even if another user or process originally executed it. Binding reduces SQL Injection concerns because the data associated with a bind variable is never treated as part of the SQL statement. It does not need quoting or escaping. 
PHP variables that have been bound can be changed and the statement re-executed without needing to re-parse the statement or re-bind. 
In Oracle, bind variables are commonly divided into IN binds for values that are passed into the database, and OUT binds for values that are returned to PHP. A bind variable may be both IN and OUT. Whether a bind variable will be used for input or output is determined at run-time. 
You must specify maxlength when using an OUT bind so that PHP allocates enough memory to hold the returned value. 
For IN binds it is recommended to set the maxlength length if the statement is re-executed multiple times with different values for the PHP variable. Otherwise Oracle may truncate data to the length of the initial PHP variable value. If you don't know what the maximum length will be, then re-call oci_bind_by_name() with the current data size prior to each oci_execute() call. Binding an unnecessarily large length will have an impact on process memory in the database. 
A bind call tells Oracle which memory address to read data from. For IN binds that address needs to contain valid data when oci_execute() is called. This means that the variable bound must remain in scope until execution. If it doesn't, unexpected results or errors such as "ORA-01460: unimplemented or unreasonable conversion requested" may occur. For OUT binds one symptom is no value being set in the PHP variable. 
For a statement that is repeatedly executed, binding values that never change may reduce the ability of the Oracle optimizer to choose the best statement execution plan. Long running statements that are rarely re-executed may not benefit from binding. However in both cases, binding might be safer than joining strings into a SQL statement, as this can be a security risk if unfiltered user text is concatenated.
</Desc>
    <FName>oci_cancel</FName>
    <Desc>bool oci_cancel ( resource $statement )
Invalidates a cursor, freeing all associated resources and cancels the ability to read from it.
</Desc>
    <FName>oci_client_version</FName>
    <Desc>string oci_client_version ( void )
Returns a string containing the version number of the Oracle C client library that PHP is linked with.
</Desc>
    <FName>oci_close</FName>
    <Desc>bool oci_close ( resource $connection )
Unsets connection. The underlying database connection is closed if no other resources are using it and if it was created with oci_connect() or oci_new_connect(). 
It is recommended to close connections that are no longer needed because this makes database resources available for other users.
</Desc>
    <FName>oci_commit</FName>
    <Desc>bool oci_commit ( resource $connection )
Commits the outstanding transaction for the Oracle connection. A commit ends the current transaction and makes permanent all changes. It releases all locks held. 
A transaction begins when the first SQL statement that changes data is executed with oci_execute() using the OCI_NO_AUTO_COMMIT flag. Further data changes made by other statements become part of the same transaction. Data changes made in a transaction are temporary until the transaction is committed or rolled back. Other users of the database will not see the changes until they are committed. 
When inserting or updating data, using transactions is recommended for relational data consistency and for performance reasons.
</Desc>
    <FName>oci_connect</FName>
    <Desc>resource oci_connect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] )
Returns a connection identifier needed for most other OCI8 operations. 
See Connection Handling for general information on connection management and connection pooling. 
From PHP 5.1.2 (PECL OCI8 1.1) oci_close() can be used to close the connection. 
The second and subsequent calls to oci_connect() with the same parameters will return the connection handle returned from the first call. This means that transactions in one handle are also in the other handles, because they use the same underlying database connection. If two handles need to be transactionally isolated from each other, use oci_new_connect() instead.
</Desc>
    <FName>oci_define_by_name</FName>
    <Desc>bool oci_define_by_name ( resource $statement , string $column_name , mixed &$variable [, int $type = SQLT_CHR ] )
Associates a PHP variable with a column for query fetches using oci_fetch(). 
The oci_define_by_name() call must occur before executing oci_execute().
</Desc>
    <FName>oci_error</FName>
    <Desc>array oci_error ([ resource $resource ] )
Returns the last error found. 
The function should be called immediately after an error occurs. Errors are cleared by a successful statement.
</Desc>
    <FName>oci_execute</FName>
    <Desc>bool oci_execute ( resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS ] )
Executes a statement previously returned from oci_parse(). 
After execution, statements like INSERT will have data committed to the database by default. For statements like SELECT, execution performs the logic of the query. Query results can subsequently be fetched in PHP with functions like oci_fetch_array(). 
Each parsed statement may be executed multiple times, saving the cost of re-parsing. This is commonly used for INSERT statements when data is bound with oci_bind_by_name().
</Desc>
    <FName>oci_fetch_all</FName>
    <Desc>int oci_fetch_all ( resource $statement , array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC ]]] )
Fetches multiple rows from a query into a two-dimensional array. By default, all rows are returned. 
This function can be called only once for each query executed with oci_execute().
</Desc>
    <FName>oci_fetch_array</FName>
    <Desc>array oci_fetch_array ( resource $statement [, int $mode ] )
Returns an array containing the next result-set row of a query. Each array entry corresponds to a column of the row. This function is typically called in a loop until it returns FALSE, indicating no more rows exist. 
If statement corresponds to a PL/SQL block returning Oracle Database 12c Implicit Result Sets, then rows from all sets are consecutively fetched. If statement is returned by oci_get_implicit_resultset(), then only the subset of rows for one child query are returned. 
For details on the data type mapping performed by the OCI8 extension, see the datatypes supported by the driver
</Desc>
    <FName>oci_fetch_assoc</FName>
    <Desc>array oci_fetch_assoc ( resource $statement )
Returns an associative array containing the next result-set row of a query. Each array entry corresponds to a column of the row. This function is typically called in a loop until it returns FALSE, indicating no more rows exist. 
Calling oci_fetch_assoc() is identical to calling oci_fetch_array() with OCI_ASSOC + OCI_RETURN_NULLS.
</Desc>
    <FName>oci_fetch_object</FName>
    <Desc>object oci_fetch_object ( resource $statement )
Returns an object containing the next result-set row of a query. Each attribute of the object corresponds to a column of the row. This function is typically called in a loop until it returns FALSE, indicating no more rows exist. 
For details on the data type mapping performed by the OCI8 extension, see the datatypes supported by the driver
</Desc>
    <FName>oci_fetch_row</FName>
    <Desc>array oci_fetch_row ( resource $statement )
Returns a numerically indexed array containing the next result-set row of a query. Each array entry corresponds to a column of the row. This function is typically called in a loop until it returns FALSE, indicating no more rows exist. 
Calling oci_fetch_row() is identical to calling oci_fetch_array() with OCI_NUM + OCI_RETURN_NULLS.
</Desc>
    <FName>oci_fetch</FName>
    <Desc>bool oci_fetch ( resource $statement )
Fetches the next row from a query into internal buffers accessible either with oci_result(), or by using variables previously defined with oci_define_by_name(). 
See oci_fetch_array() for general information about fetching data.
</Desc>
    <FName>oci_field_is_null</FName>
    <Desc>bool oci_field_is_null ( resource $statement , mixed $field )
Checks if the given field from the current row of statement is NULL.
</Desc>
    <FName>oci_field_name</FName>
    <Desc>string oci_field_name ( resource $statement , mixed $field )
Returns the name of the field.
</Desc>
    <FName>oci_field_precision</FName>
    <Desc>int oci_field_precision ( resource $statement , mixed $field )
Returns precision of the field. 
For FLOAT columns, precision is nonzero and scale is -127. If precision is 0, then column is NUMBER. Else it's NUMBER(precision, scale).
</Desc>
    <FName>oci_field_scale</FName>
    <Desc>int oci_field_scale ( resource $statement , mixed $field )
Returns the scale of the column with field index. 
For FLOAT columns, precision is nonzero and scale is -127. If precision is 0, then column is NUMBER. Else it's NUMBER(precision, scale).
</Desc>
    <FName>oci_field_size</FName>
    <Desc>int oci_field_size ( resource $statement , mixed $field )
Returns the size of a field.
</Desc>
    <FName>oci_field_type_raw</FName>
    <Desc>int oci_field_type_raw ( resource $statement , mixed $field )
Returns Oracle's raw "SQLT" data type of the field. 
If you want a field's type name, then use oci_field_type() instead.
</Desc>
    <FName>oci_field_type</FName>
    <Desc>mixed oci_field_type ( resource $statement , mixed $field )
Returns a field's data type name.
</Desc>
    <FName>oci_free_descriptor</FName>
    <Desc>bool oci_free_descriptor ( resource $descriptor )
Frees a descriptor allocated by oci_new_descriptor().
</Desc>
    <FName>oci_free_statement</FName>
    <Desc>bool oci_free_statement ( resource $statement )
Frees resources associated with Oracle's cursor or statement, which was received from as a result of oci_parse() or obtained from Oracle.
</Desc>
    <FName>oci_get_implicit_resultset</FName>
    <Desc>resource oci_get_implicit_resultset ( resource $statement )
Used to fetch consectutive sets of query results after the execution of a stored or anonymous Oracle PL/SQL block where that block returns query results with Oracle's DBMS_SQL.RETURN_RESULT PL/SQL function. This allows PL/SQL blocks to easily return query results. 
The child statement can be used with any of the OCI8 fetching functions: oci_fetch(), oci_fetch_all(), oci_fetch_array(), oci_fetch_object(), oci_fetch_assoc() or oci_fetch_row() 
Child statements inherit their parent statement's prefetch value, or it can be explicitly set with oci_set_prefetch().
</Desc>
    <FName>oci_internal_debug</FName>
    <Desc>void oci_internal_debug ( bool $onoff )
Enables or disables internal debug output.
</Desc>
    <FName>oci_lob_copy</FName>
    <Desc>bool oci_lob_copy ( OCI-Lob $lob_to , OCI-Lob $lob_from [, int $length = 0 ] )
Copies a large object or a part of a large object to another large object. Old LOB-recipient data will be overwritten. 
If you need to copy a particular part of a LOB to a particular position of a LOB, use OCI-Lob::seek() to move LOB internal pointers.
</Desc>
    <FName>oci_lob_is_equal</FName>
    <Desc>bool oci_lob_is_equal ( OCI-Lob $lob1 , OCI-Lob $lob2 )
Compares two LOB/FILE locators.
</Desc>
    <FName>oci_new_collection</FName>
    <Desc>OCI-Collection oci_new_collection ( resource $connection , string $tdo [, string $schema = NULL ] )
Allocates a new collection object.
</Desc>
    <FName>oci_new_connect</FName>
    <Desc>resource oci_new_connect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] )
Establishes a new connection to an Oracle server and logs on. 
Unlike oci_connect() and oci_pconnect(), oci_new_connect() does not cache connections and will always return a brand-new freshly opened connection handle. This is useful if your application needs transactional isolation between two sets of queries.
</Desc>
    <FName>oci_new_cursor</FName>
    <Desc>resource oci_new_cursor ( resource $connection )
Allocates a new statement handle on the specified connection.
</Desc>
    <FName>oci_new_descriptor</FName>
    <Desc>OCI-Lob oci_new_descriptor ( resource $connection [, int $type = OCI_DTYPE_LOB ] )
Allocates resources to hold descriptor or LOB locator.
</Desc>
    <FName>oci_num_fields</FName>
    <Desc>int oci_num_fields ( resource $statement )
Gets the number of columns in the given statement.
</Desc>
    <FName>oci_num_rows</FName>
    <Desc>int oci_num_rows ( resource $statement )
Gets the number of rows affected during statement execution.
</Desc>
    <FName>oci_parse</FName>
    <Desc>resource oci_parse ( resource $connection , string $sql_text )
Prepares sql_text using connection and returns the statement identifier, which can be used with oci_bind_by_name(), oci_execute() and other functions. 
Statement identifiers can be freed with oci_free_statement() or by setting the variable to NULL.
</Desc>
    <FName>oci_password_change</FName>
    <Desc>bool oci_password_change ( resource $connection , string $username , string $old_password , string $new_password )
resource oci_password_change ( string $dbname , string $username , string $old_password , string $new_password )
Changes password for user with username. 
The oci_password_change() function is most useful for PHP command-line scripts, or when non-persistent connections are used throughout the PHP application.
</Desc>
    <FName>oci_pconnect</FName>
    <Desc>resource oci_pconnect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] )
Creates a persistent connection to an Oracle server and logs on. 
Persistent connections are cached and re-used between requests, resulting in reduced overhead on each page load; a typical PHP application will have a single persistent connection open against an Oracle server per Apache child process (or PHP FastCGI/CGI process). See the Persistent Database Connections section for more information.
</Desc>
    <FName>oci_register_taf_callback</FName>
    <Desc>bool oci_register_taf_callback ( resource $connection [, mixed $callbackFn ] )
Registers a user-defined callback function to connection. If connection fails due to instance or network failure, the registered callback function will be invoked for several times during failover. See OCI8 Transparent Application Failover (TAF) Support for information. 
When oci_register_taf_callback() is called multiple times, each registration overwrites the previous one. 
Use oci_unregister_taf_callback() to explicitly unregister a user-defined callback. 
TAF callback registration will NOT be saved across persistent connections, therefore the callback needs to be re-registered for a new persistent connection.
</Desc>
    <FName>oci_result</FName>
    <Desc>mixed oci_result ( resource $statement , mixed $field )
Returns the data from field in the current row, fetched by oci_fetch(). 
For details on the data type mapping performed by the OCI8 extension, see the datatypes supported by the driver
</Desc>
    <FName>oci_rollback</FName>
    <Desc>bool oci_rollback ( resource $connection )
Reverts all uncommitted changes for the Oracle connection and ends the transaction. It releases all locks held. All Oracle SAVEPOINTS are erased. 
A transaction begins when the first SQL statement that changes data is executed with oci_execute() using the OCI_NO_AUTO_COMMIT flag. Further data changes made by other statements become part of the same transaction. Data changes made in a transaction are temporary until the transaction is committed or rolled back. Other users of the database will not see the changes until they are committed. 
When inserting or updating data, using transactions is recommended for relational data consistency and for performance reasons.
</Desc>
    <FName>oci_server_version</FName>
    <Desc>string oci_server_version ( resource $connection )
Returns a string with the Oracle Database version and available options
</Desc>
    <FName>oci_set_action</FName>
    <Desc>bool oci_set_action ( resource $connection , string $action_name )
Sets the action name for Oracle tracing. 
The action name is registered with the database when the next 'roundtrip' from PHP to the database occurs, typically when an SQL statement is executed. 
The action name can subsequently be queried from database administration views such as V$SESSION. It can be used for tracing and monitoring such as with V$SQLAREA and DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE. 
The value may be retained across persistent connections.
</Desc>
    <FName>oci_set_client_identifier</FName>
    <Desc>bool oci_set_client_identifier ( resource $connection , string $client_identifier )
Sets the client identifier used by various database components to identify lightweight application users who authenticate as the same database user. 
The client identifier is registered with the database when the next 'roundtrip' from PHP to the database occurs, typically when an SQL statement is executed. 
The identifier can subsequently be queried, for example with SELECT SYS_CONTEXT('USERENV','CLIENT_IDENTIFIER') FROM DUAL. Database administration views such as V$SESSION will also contain the value. It can be used with DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE for tracing and can also be used for auditing. 
The value may be retained across page requests that use the same persistent connection.
</Desc>
    <FName>oci_set_client_info</FName>
    <Desc>bool oci_set_client_info ( resource $connection , string $client_info )
Sets the client information for Oracle tracing. 
The client information is registered with the database when the next 'roundtrip' from PHP to the database occurs, typically when an SQL statement is executed. 
The client information can subsequently be queried from database administration views such as V$SESSION. 
The value may be retained across persistent connections.
</Desc>
    <FName>oci_set_edition</FName>
    <Desc>bool oci_set_edition ( string $edition )
Sets the database "edition" of objects to be used by a subsequent connections. 
Oracle Editions allow concurrent versions of applications to run using the same schema and object names. This is useful for upgrading live systems. 
Call oci_set_edition() before calling oci_connect(), oci_pconnect() or oci_new_connect(). 
If an edition is set that is not valid in the database, connection will fail even if oci_set_edition() returns success. 
When using persistent connections, if a connection with the requested edition setting already exists, it is reused. Otherwise, a different persistent connection is created
</Desc>
    <FName>oci_set_module_name</FName>
    <Desc>bool oci_set_module_name ( resource $connection , string $module_name )
Sets the module name for Oracle tracing. 
The module name is registered with the database when the next 'roundtrip' from PHP to the database occurs, typically when an SQL statement is executed. 
The name can subsequently be queried from database administration views such as V$SESSION. It can be used for tracing and monitoring such as with V$SQLAREA and DBMS_MONITOR.SERV_MOD_ACT_STAT_ENABLE. 
The value may be retained across persistent connections.
</Desc>
    <FName>oci_set_prefetch</FName>
    <Desc>bool oci_set_prefetch ( resource $statement , int $rows )
Sets the number of rows to be buffered by the Oracle Client libraries after a successful query call to oci_execute() and for each subsequent internal fetch request to the database. For queries returning a large number of rows, performance can be significantly improved by increasing the prefetch count above the default oci8.default_prefetch value. 
Prefetching is Oracle's efficient way of returning more than one data row from the database in each network request. This can result in better network and CPU utilization. The buffering of rows is internal to OCI8 and the behavior of OCI8 fetching functions is unchanged regardless of the prefetch count. For example, oci_fetch_row() will always return one row. The prefetch buffer is per-statement and is not used by re-executed statements or by other connections. 
Call oci_set_prefetch() before calling oci_execute(). 
A tuning goal is to set the prefetch value to a reasonable size for the network and database to handle. For queries returning a very large number of rows, overall system efficiency might be better if rows are retrieved from the database in several chunks (i.e set the prefetch value smaller than the number of rows). This allows the database to handle other users' statements while the PHP script is processing the current set of rows. 
Query prefetching was introduced in Oracle 8i. REF CURSOR prefetching was introduced in Oracle 11gR2 and occurs when PHP is linked with Oracle 11gR2 (or later) Client libraries. Nested cursor prefetching was introduced in Oracle 11gR2 and requires both the Oracle Client libraries and the database to be version 11gR2 or greater. 
Prefetching is not supported when queries contain LONG or LOB columns. The prefetch value is ignored and single-row fetches will be used in all the situations when prefetching is not supported. 
When using Oracle Database 12c, the prefetch value set by PHP can be overridden by Oracle's client oraaccess.xml configuration file. Refer to Oracle documentation for more detail.
</Desc>
    <FName>oci_statement_type</FName>
    <Desc>string oci_statement_type ( resource $statement )
Returns a keyword identifying the type of the OCI8 statement.
</Desc>
    <FName>oci_unregister_taf_callback</FName>
    <Desc>bool oci_unregister_taf_callback ( resource $connection )
Unregister the user-defined callback function registered to connection by oci_register_taf_callback(). See OCI8 Transparent Application Failover (TAF) Support for information.
</Desc>
    <FName>ocibindbyname</FName>
    <Desc>Alias of oci_bind_by_name()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicancel</FName>
    <Desc>Alias of oci_cancel()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicloselob</FName>
    <Desc>Alias of OCI-Lob::close()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicollappend</FName>
    <Desc>Alias of OCI-Collection::append()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicollassign</FName>
    <Desc>Alias of OCI-Collection::assign()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicollassignelem</FName>
    <Desc>Alias of OCI-Collection::assignElem()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicollgetelem</FName>
    <Desc>Alias of OCI-Collection::getElem()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicollmax</FName>
    <Desc>Alias of OCI-Collection::max()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicollsize</FName>
    <Desc>Alias of OCI-Collection::size()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicolltrim</FName>
    <Desc>Alias of OCI-Collection::trim()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicolumnisnull</FName>
    <Desc>Alias of oci_field_is_null()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicolumnname</FName>
    <Desc>Alias of oci_field_name()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicolumnprecision</FName>
    <Desc>Alias of oci_field_precision()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicolumnscale</FName>
    <Desc>Alias of oci_field_scale()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicolumnsize</FName>
    <Desc>Alias of oci_field_size()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicolumntype</FName>
    <Desc>Alias of oci_field_type()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicolumntyperaw</FName>
    <Desc>Alias of oci_field_type_raw()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocicommit</FName>
    <Desc>Alias of oci_commit()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocidefinebyname</FName>
    <Desc>Alias of oci_define_by_name()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocierror</FName>
    <Desc>Alias of oci_error()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ociexecute</FName>
    <Desc>Alias of oci_execute()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocifetch</FName>
    <Desc>Alias of oci_fetch()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocifetchinto</FName>
    <Desc>Obsolete variant of oci_fetch_array(), oci_fetch_object(), oci_fetch_assoc() and oci_fetch_row()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocifetchstatement</FName>
    <Desc>Alias of oci_fetch_all()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocifreecollection</FName>
    <Desc>Alias of OCI-Collection::free()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocifreecursor</FName>
    <Desc>Alias of oci_free_statement()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocifreedesc</FName>
    <Desc>Alias of OCI-Lob::free()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocifreestatement</FName>
    <Desc>Alias of oci_free_statement()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ociinternaldebug</FName>
    <Desc>Alias of oci_internal_debug()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ociloadlob</FName>
    <Desc>Alias of OCI-Lob::load()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocilogoff</FName>
    <Desc>Alias of oci_close()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocilogon</FName>
    <Desc>Alias of oci_connect()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocinewcollection</FName>
    <Desc>Alias of oci_new_collection()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocinewcursor</FName>
    <Desc>Alias of oci_new_cursor()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocinewdescriptor</FName>
    <Desc>Alias of oci_new_descriptor()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocinlogon</FName>
    <Desc>Alias of oci_new_connect()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocinumcols</FName>
    <Desc>Alias of oci_num_fields()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ociparse</FName>
    <Desc>Alias of oci_parse()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ociplogon</FName>
    <Desc>Alias of oci_pconnect()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ociresult</FName>
    <Desc>Alias of oci_result()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocirollback</FName>
    <Desc>Alias of oci_rollback()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocirowcount</FName>
    <Desc>Alias of oci_num_rows()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocisavelob</FName>
    <Desc>Alias of OCI-Lob::save()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocisavelobfile</FName>
    <Desc>Alias of OCI-Lob::import()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ociserverversion</FName>
    <Desc>Alias of oci_server_version()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocisetprefetch</FName>
    <Desc>Alias of oci_set_prefetch()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ocistatementtype</FName>
    <Desc>Alias of oci_statement_type()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ociwritelobtofile</FName>
    <Desc>Alias of OCI-Lob::export()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>ociwritetemporarylob</FName>
    <Desc>Alias of OCI-Lob::writeTemporary()
Warning 
This alias has been DEPRECATED as of PHP 5.4.0. Relying on this alias is highly discouraged.
</Desc>
    <FName>octdec</FName>
    <Desc>number octdec ( string $octal_string )
Returns the decimal equivalent of the octal number represented by the octal_string argument.
</Desc>
    <FName>odbc_autocommit</FName>
    <Desc>mixed odbc_autocommit ( resource $connection_id [, bool $OnOff = FALSE ] )
Toggles autocommit behaviour. 
By default, auto-commit is on for a connection. Disabling auto-commit is equivalent with starting a transaction.
</Desc>
    <FName>odbc_binmode</FName>
    <Desc>bool odbc_binmode ( resource $result_id , int $mode )
Enables handling of binary column data. ODBC SQL types affected are BINARY, VARBINARY, and LONGVARBINARY. 
When binary SQL data is converted to character C data, each byte (8 bits) of source data is represented as two ASCII characters. These characters are the ASCII character representation of the number in its hexadecimal form. For example, a binary 00000001 is converted to "01" and a binary 11111111 is converted to "FF". LONGVARBINARY handlingbinmodelongreadlenresult
ODBC_BINMODE_PASSTHRU0passthru
ODBC_BINMODE_RETURN0passthru
ODBC_BINMODE_CONVERT0passthru
ODBC_BINMODE_PASSTHRU0passthru
ODBC_BINMODE_PASSTHRU>0passthru
ODBC_BINMODE_RETURN>0return as is
ODBC_BINMODE_CONVERT>0return as char

If odbc_fetch_into() is used, passthru means that an empty string is returned for these columns.
</Desc>
    <FName>odbc_close_all</FName>
    <Desc>void odbc_close_all ( void )
odbc_close_all() will close down all connections to database server(s).
</Desc>
    <FName>odbc_close</FName>
    <Desc>void odbc_close ( resource $connection_id )
Closes down the connection to the database server.
</Desc>
    <FName>odbc_columnprivileges</FName>
    <Desc>resource odbc_columnprivileges ( resource $connection_id , string $qualifier , string $owner , string $table_name , string $column_name )
Lists columns and associated privileges for the given table.
</Desc>
    <FName>odbc_columns</FName>
    <Desc>resource odbc_columns ( resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]] )
Lists all columns in the requested range.
</Desc>
    <FName>odbc_commit</FName>
    <Desc>bool odbc_commit ( resource $connection_id )
Commits all pending transactions on the connection.
</Desc>
    <FName>odbc_connect</FName>
    <Desc>resource odbc_connect ( string $dsn , string $user , string $password [, int $cursor_type ] )
The connection id returned by this functions is needed by other ODBC functions. You can have multiple connections open at once as long as they either use different db or different credentials. 
With some ODBC drivers, executing a complex stored procedure may fail with an error similar to: "Cannot open a cursor on a stored procedure that has anything other than a single select statement in it". Using SQL_CUR_USE_ODBC may avoid that error. Also, some drivers don't support the optional row_number parameter in odbc_fetch_row(). SQL_CUR_USE_ODBC might help in that case, too.
</Desc>
    <FName>odbc_cursor</FName>
    <Desc>string odbc_cursor ( resource $result_id )
Gets the cursorname for the given result_id.
</Desc>
    <FName>odbc_data_source</FName>
    <Desc>array odbc_data_source ( resource $connection_id , int $fetch_type )
This function will return the list of available DSN (after calling it several times).
</Desc>
    <FName>odbc_do</FName>
    <Desc>This function is an alias of: odbc_exec(). 
</Desc>
    <FName>odbc_error</FName>
    <Desc>string odbc_error ([ resource $connection_id ] )
Returns a six-digit ODBC state, or an empty string if there has been no errors.
</Desc>
    <FName>odbc_errormsg</FName>
    <Desc>string odbc_errormsg ([ resource $connection_id ] )
Returns a string containing the last ODBC error message, or an empty string if there has been no errors.
</Desc>
    <FName>odbc_exec</FName>
    <Desc>resource odbc_exec ( resource $connection_id , string $query_string [, int $flags ] )
Sends an SQL statement to the database server.
</Desc>
    <FName>odbc_execute</FName>
    <Desc>bool odbc_execute ( resource $result_id [, array $parameters_array ] )
Executes a statement prepared with odbc_prepare().
</Desc>
    <FName>odbc_fetch_array</FName>
    <Desc>array odbc_fetch_array ( resource $result [, int $rownumber ] )
Fetch an associative array from an ODBC query.
</Desc>
    <FName>odbc_fetch_into</FName>
    <Desc>int odbc_fetch_into ( resource $result_id , array &$result_array [, int $rownumber ] )
Fetch one result row into array.
</Desc>
    <FName>odbc_fetch_object</FName>
    <Desc>object odbc_fetch_object ( resource $result [, int $rownumber ] )
Fetch an object from an ODBC query.
</Desc>
    <FName>odbc_fetch_row</FName>
    <Desc>bool odbc_fetch_row ( resource $result_id [, int $row_number = 1 ] )
Fetches a row of the data that was returned by odbc_do() or odbc_exec(). After odbc_fetch_row() is called, the fields of that row can be accessed with odbc_result().
</Desc>
    <FName>odbc_field_len</FName>
    <Desc>int odbc_field_len ( resource $result_id , int $field_number )
Gets the length of the field referenced by number in the given result identifier.
</Desc>
    <FName>odbc_field_name</FName>
    <Desc>string odbc_field_name ( resource $result_id , int $field_number )
Gets the name of the field occupying the given column number in the given result identifier.
</Desc>
    <FName>odbc_field_num</FName>
    <Desc>int odbc_field_num ( resource $result_id , string $field_name )
Gets the number of the column slot that corresponds to the named field in the given result identifier.
</Desc>
    <FName>odbc_field_precision</FName>
    <Desc>This function is an alias of: odbc_field_len(). 
See Also
odbc_field_scale() - Get the scale of a field to get the scale of a floating point number. 
</Desc>
    <FName>odbc_field_scale</FName>
    <Desc>int odbc_field_scale ( resource $result_id , int $field_number )
Gets the scale of the field referenced by number in the given result identifier.
</Desc>
    <FName>odbc_field_type</FName>
    <Desc>string odbc_field_type ( resource $result_id , int $field_number )
Gets the SQL type of the field referenced by number in the given result identifier.
</Desc>
    <FName>odbc_foreignkeys</FName>
    <Desc>resource odbc_foreignkeys ( resource $connection_id , string $pk_qualifier , string $pk_owner , string $pk_table , string $fk_qualifier , string $fk_owner , string $fk_table )
Retrieves a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table
</Desc>
    <FName>odbc_free_result</FName>
    <Desc>bool odbc_free_result ( resource $result_id )
Free resources associated with a result. 
odbc_free_result() only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script is finished.
</Desc>
    <FName>odbc_gettypeinfo</FName>
    <Desc>resource odbc_gettypeinfo ( resource $connection_id [, int $data_type ] )
Retrieves information about data types supported by the data source.
</Desc>
    <FName>odbc_longreadlen</FName>
    <Desc>bool odbc_longreadlen ( resource $result_id , int $length )
Enables handling of LONG and LONGVARBINARY columns.
</Desc>
    <FName>odbc_next_result</FName>
    <Desc>bool odbc_next_result ( resource $result_id )
Checks if there are more result sets available as well as allowing access to the next result set via odbc_fetch_array(), odbc_fetch_row(), odbc_result(), etc.
</Desc>
    <FName>odbc_num_fields</FName>
    <Desc>int odbc_num_fields ( resource $result_id )
Gets the number of fields (columns) in an ODBC result.
</Desc>
    <FName>odbc_num_rows</FName>
    <Desc>int odbc_num_rows ( resource $result_id )
Gets the number of rows in a result. For INSERT, UPDATE and DELETE statements odbc_num_rows() returns the number of rows affected. For a SELECT clause this can be the number of rows available.
</Desc>
    <FName>odbc_pconnect</FName>
    <Desc>resource odbc_pconnect ( string $dsn , string $user , string $password [, int $cursor_type ] )
Opens a persistent database connection. 
This function is much like odbc_connect(), except that the connection is not really closed when the script has finished. Future requests for a connection with the same dsn, user, password combination (via odbc_connect() and odbc_pconnect()) can reuse the persistent connection.
</Desc>
    <FName>odbc_prepare</FName>
    <Desc>resource odbc_prepare ( resource $connection_id , string $query_string )
Prepares a statement for execution. The result identifier can be used later to execute the statement with odbc_execute(). 
Some databases (such as IBM DB2, MS SQL Server, and Oracle) support stored procedures that accept parameters of type IN, INOUT, and OUT as defined by the ODBC specification. However, the Unified ODBC driver currently only supports parameters of type IN to stored procedures.
</Desc>
    <FName>odbc_primarykeys</FName>
    <Desc>resource odbc_primarykeys ( resource $connection_id , string $qualifier , string $owner , string $table )
Returns a result identifier that can be used to fetch the column names that comprise the primary key for a table.
</Desc>
    <FName>odbc_procedurecolumns</FName>
    <Desc>resource odbc_procedurecolumns ( resource $connection_id )
resource odbc_procedurecolumns ( resource $connection_id , string $qualifier , string $owner , string $proc , string $column )
Retrieve information about parameters to procedures.
</Desc>
    <FName>odbc_procedures</FName>
    <Desc>resource odbc_procedures ( resource $connection_id )
resource odbc_procedures ( resource $connection_id , string $qualifier , string $owner , string $name )
Lists all procedures in the requested range.
</Desc>
    <FName>odbc_result_all</FName>
    <Desc>int odbc_result_all ( resource $result_id [, string $format ] )
Prints all rows from a result identifier produced by odbc_exec(). The result is printed in HTML table format.
</Desc>
    <FName>odbc_result</FName>
    <Desc>mixed odbc_result ( resource $result_id , mixed $field )
Get result data
</Desc>
    <FName>odbc_rollback</FName>
    <Desc>bool odbc_rollback ( resource $connection_id )
Rolls back all pending statements on the connection.
</Desc>
    <FName>odbc_setoption</FName>
    <Desc>bool odbc_setoption ( resource $id , int $function , int $option , int $param )
This function allows fiddling with the ODBC options for a particular connection or query result. It was written to help find work around to problems in quirky ODBC drivers. You should probably only use this function if you are an ODBC programmer and understand the effects the various options will have. You will certainly need a good ODBC reference to explain all the different options and values that can be used. Different driver versions support different options. 
Because the effects may vary depending on the ODBC driver, use of this function in scripts to be made publicly available is strongly discouraged. Also, some ODBC options are not available to this function because they must be set before the connection is established or the query is prepared. However, if on a particular job it can make PHP work so your boss doesn't tell you to use a commercial product, that's all that really matters.
</Desc>
    <FName>odbc_specialcolumns</FName>
    <Desc>resource odbc_specialcolumns ( resource $connection_id , int $type , string $qualifier , string $table , int $scope , int $nullable )
Retrieves either the optimal set of columns that uniquely identifies a row in the table, or columns that are automatically updated when any value in the row is updated by a transaction.
</Desc>
    <FName>odbc_statistics</FName>
    <Desc>resource odbc_statistics ( resource $connection_id , string $qualifier , string $owner , string $table_name , int $unique , int $accuracy )
Get statistics about a table and its indexes.
</Desc>
    <FName>odbc_tableprivileges</FName>
    <Desc>resource odbc_tableprivileges ( resource $connection_id , string $qualifier , string $owner , string $name )
Lists tables in the requested range and the privileges associated with each table.
</Desc>
    <FName>odbc_tables</FName>
    <Desc>resource odbc_tables ( resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]] )
Lists all tables in the requested range. 
To support enumeration of qualifiers, owners, and table types, the following special semantics for the qualifier, owner, name, and table_type are available: 
If qualifier is a single percent character (%) and owner and name are empty strings, then the result set contains a list of valid qualifiers for the data source. (All columns except the TABLE_QUALIFIER column contain NULLs.) 
If owner is a single percent character (%) and qualifier and name are empty strings, then the result set contains a list of valid owners for the data source. (All columns except the TABLE_OWNER column contain NULLs.) 
If table_type is a single percent character (%) and qualifier, owner and name are empty strings, then the result set contains a list of valid table types for the data source. (All columns except the TABLE_TYPE column contain NULLs.)
</Desc>
    <FName>opcache_compile_file</FName>
    <Desc>bool opcache_compile_file ( string $file )
This function compiles a PHP script and adds it to the opcode cache without executing it. This can be used to prime the cache after a Web server restart by pre-caching files that will be included in later requests.
</Desc>
    <FName>opcache_get_configuration</FName>
    <Desc>array opcache_get_configuration ( void )
This function returns configuration information about the cache instance
</Desc>
    <FName>opcache_get_status</FName>
    <Desc>array opcache_get_status ([ bool $get_scripts = TRUE ] )
This function returns state information about the cache instance
</Desc>
    <FName>opcache_invalidate</FName>
    <Desc>bool opcache_invalidate ( string $script [, bool $force = FALSE ] )
This function invalidates a particular script from the opcode cache. If force is unset or FALSE, the script will only be invalidated if the modification time of the script is newer than the cached opcodes.
</Desc>
    <FName>opcache_is_script_cached</FName>
    <Desc>bool opcache_is_script_cached ( string $file )
This function checks if a PHP script has been cached in OPCache. This can be used to more easily detect the "warming" of the cache for a particular script.
</Desc>
    <FName>opcache_reset</FName>
    <Desc>bool opcache_reset ( void )
This function resets the entire opcode cache. After calling opcache_reset(), all scripts will be reloaded and reparsed the next time they are hit.
</Desc>
    <FName>openal_buffer_create</FName>
    <Desc>resource openal_buffer_create ( void )
</Desc>
    <FName>openal_buffer_data</FName>
    <Desc>bool openal_buffer_data ( resource $buffer , int $format , string $data , int $freq )
</Desc>
    <FName>openal_buffer_destroy</FName>
    <Desc>bool openal_buffer_destroy ( resource $buffer )
</Desc>
    <FName>openal_buffer_get</FName>
    <Desc>int openal_buffer_get ( resource $buffer , int $property )
</Desc>
    <FName>openal_buffer_loadwav</FName>
    <Desc>bool openal_buffer_loadwav ( resource $buffer , string $wavfile )
</Desc>
    <FName>openal_context_create</FName>
    <Desc>resource openal_context_create ( resource $device )
</Desc>
    <FName>openal_context_current</FName>
    <Desc>bool openal_context_current ( resource $context )
</Desc>
    <FName>openal_context_destroy</FName>
    <Desc>bool openal_context_destroy ( resource $context )
</Desc>
    <FName>openal_context_process</FName>
    <Desc>bool openal_context_process ( resource $context )
</Desc>
    <FName>openal_context_suspend</FName>
    <Desc>bool openal_context_suspend ( resource $context )
</Desc>
    <FName>openal_device_close</FName>
    <Desc>bool openal_device_close ( resource $device )
</Desc>
    <FName>openal_device_open</FName>
    <Desc>resource openal_device_open ([ string $device_desc ] )
</Desc>
    <FName>openal_listener_get</FName>
    <Desc>mixed openal_listener_get ( int $property )
</Desc>
    <FName>openal_listener_set</FName>
    <Desc>bool openal_listener_set ( int $property , mixed $setting )
</Desc>
    <FName>openal_source_create</FName>
    <Desc>resource openal_source_create ( void )
</Desc>
    <FName>openal_source_destroy</FName>
    <Desc>bool openal_source_destroy ( resource $source )
</Desc>
    <FName>openal_source_get</FName>
    <Desc>mixed openal_source_get ( resource $source , int $property )
</Desc>
    <FName>openal_source_pause</FName>
    <Desc>bool openal_source_pause ( resource $source )
</Desc>
    <FName>openal_source_play</FName>
    <Desc>bool openal_source_play ( resource $source )
</Desc>
    <FName>openal_source_rewind</FName>
    <Desc>bool openal_source_rewind ( resource $source )
</Desc>
    <FName>openal_source_set</FName>
    <Desc>bool openal_source_set ( resource $source , int $property , mixed $setting )
</Desc>
    <FName>openal_source_stop</FName>
    <Desc>bool openal_source_stop ( resource $source )
</Desc>
    <FName>openal_stream</FName>
    <Desc>resource openal_stream ( resource $source , int $format , int $rate )
</Desc>
    <FName>opendir</FName>
    <Desc>resource opendir ( string $path [, resource $context ] )
Opens up a directory handle to be used in subsequent closedir(), readdir(), and rewinddir() calls.
</Desc>
    <FName>openlog</FName>
    <Desc>bool openlog ( string $ident , int $option , int $facility )
openlog() opens a connection to the system logger for a program. 
The use of openlog() is optional. It will automatically be called by syslog() if necessary, in which case ident will default to FALSE.
</Desc>
    <FName>openssl_cipher_iv_length</FName>
    <Desc>int openssl_cipher_iv_length ( string $method )
Gets the cipher initialization vector (iv) length.
</Desc>
    <FName>openssl_csr_export_to_file</FName>
    <Desc>bool openssl_csr_export_to_file ( mixed $csr , string $outfilename [, bool $notext = TRUE ] )
openssl_csr_export_to_file() takes the Certificate Signing Request represented by csr and saves it in PEM format into the file named by outfilename.
</Desc>
    <FName>openssl_csr_export</FName>
    <Desc>bool openssl_csr_export ( mixed $csr , string &$out [, bool $notext = TRUE ] )
openssl_csr_export() takes the Certificate Signing Request represented by csr and stores it in PEM format in out, which is passed by reference.
</Desc>
    <FName>openssl_csr_get_public_key</FName>
    <Desc>resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = TRUE ] )
openssl_csr_get_public_key() extracts the public key from csr and prepares it for use by other functions.
</Desc>
    <FName>openssl_csr_get_subject</FName>
    <Desc>array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = TRUE ] )
openssl_csr_get_subject() returns subject distinguished name information encoded in the csr including fields commonName (CN), organizationName (O), countryName (C) etc.
</Desc>
    <FName>openssl_csr_new</FName>
    <Desc>mixed openssl_csr_new ( array $dn , resource &$privkey [, array $configargs [, array $extraattribs ]] )
openssl_csr_new() generates a new CSR (Certificate Signing Request) based on the information provided by dn. 
Note: You need to have a valid openssl.cnf installed for this function to operate correctly. See the notes under the installation section for more information.
</Desc>
    <FName>openssl_csr_sign</FName>
    <Desc>resource openssl_csr_sign ( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial = 0 ]] )
openssl_csr_sign() generates an x509 certificate resource from the given CSR. 
Note: You need to have a valid openssl.cnf installed for this function to operate correctly. See the notes under the installation section for more information.
</Desc>
    <FName>openssl_decrypt</FName>
    <Desc>string openssl_decrypt ( string $data , string $method , string $key [, int $options = 0 [, string $iv = "" [, string $tag = "" [, string $aad = "" ]]]] )
Takes a raw or base64 encoded string and decrypts it using a given method and key.
</Desc>
    <FName>openssl_dh_compute_key</FName>
    <Desc>string openssl_dh_compute_key ( string $pub_key , resource $dh_key )
The shared secret returned by openssl_dh_compute_key() is often used as an encryption key to secretly communicate with a remote party. This is known as the Diffie-Hellman key exchange.
</Desc>
    <FName>openssl_digest</FName>
    <Desc>string openssl_digest ( string $data , string $method [, bool $raw_output = FALSE ] )
Computes a digest hash value for the given data using a given method, and returns a raw or binhex encoded string. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>openssl_encrypt</FName>
    <Desc>string openssl_encrypt ( string $data , string $method , string $key [, int $options = 0 [, string $iv = "" [, string &$tag = NULL [, string $aad = "" [, int $tag_length = 16 ]]]]] )
Encrypts given data with given method and key, returns a raw or base64 encoded string
</Desc>
    <FName>openssl_error_string</FName>
    <Desc>string openssl_error_string ( void )
openssl_error_string() returns the last error from the openSSL library. Error messages are queued, so this function should be called multiple times to collect all of the information. The last error will be the most recent one.
</Desc>
    <FName>openssl_free_key</FName>
    <Desc>void openssl_free_key ( resource $key_identifier )
openssl_free_key() frees the key associated with the specified key_identifier from memory.
</Desc>
    <FName>openssl_get_cert_locations</FName>
    <Desc>array openssl_get_cert_locations ( void )
openssl_get_cert_locations() returns an array with information about the available certificate locations that will be searched for SSL certificates.
</Desc>
    <FName>openssl_get_cipher_methods</FName>
    <Desc>array openssl_get_cipher_methods ([ bool $aliases = FALSE ] )
Gets a list of available cipher methods.
</Desc>
    <FName>openssl_get_curve_names</FName>
    <Desc>array openssl_get_curve_names ( void )
Gets the list of available curve names for use in Elliptic curve cryptography (ECC) for public/private key operations. The two most widely standardized/supported curves are prime256v1 (NIST P-256) and secp384r1 (NIST P-384). Approximate Equivalancies of AES, RSA, DSA and ECC KeysizesAES Symmetric Keysize (Bits)RSA and DSA Keysize (Bits)ECC Keysize (Bits)
801024160
1122048224
1283072256
1927680384
25615360512
» NIST recommends using ECC curves with at least 256 bits.
</Desc>
    <FName>openssl_get_md_methods</FName>
    <Desc>array openssl_get_md_methods ([ bool $aliases = FALSE ] )
Gets a list of available digest methods.
</Desc>
    <FName>openssl_get_privatekey</FName>
    <Desc>This function is an alias of: openssl_pkey_get_private(). 
</Desc>
    <FName>openssl_get_publickey</FName>
    <Desc>This function is an alias of: openssl_pkey_get_public(). 
</Desc>
    <FName>openssl_open</FName>
    <Desc>bool openssl_open ( string $sealed_data , string &$open_data , string $env_key , mixed $priv_key_id [, string $method = "RC4" [, string $iv ]] )
openssl_open() opens (decrypts) sealed_data using the private key associated with the key identifier priv_key_id and the envelope key env_key, and fills open_data with the decrypted data. The envelope key is generated when the data are sealed and can only be used by one specific private key. See openssl_seal() for more information.
</Desc>
    <FName>openssl_pbkdf2</FName>
    <Desc>string openssl_pbkdf2 ( string $password , string $salt , int $key_length , int $iterations [, string $digest_algorithm = "sha1" ] )
openssl_pbkdf2() computes PBKDF2 (Password-Based Key Derivation Function 2), a key derivation function defined in PKCS5 v2.
</Desc>
    <FName>openssl_pkcs12_export_to_file</FName>
    <Desc>bool openssl_pkcs12_export_to_file ( mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ] )
openssl_pkcs12_export_to_file() stores x509 into a file named by filename in a PKCS#12 file format.
</Desc>
    <FName>openssl_pkcs12_export</FName>
    <Desc>bool openssl_pkcs12_export ( mixed $x509 , string &$out , mixed $priv_key , string $pass [, array $args ] )
openssl_pkcs12_export() stores x509 into a string named by out in a PKCS#12 file format.
</Desc>
    <FName>openssl_pkcs12_read</FName>
    <Desc>bool openssl_pkcs12_read ( string $pkcs12 , array &$certs , string $pass )
openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by pkcs12 into a array named certs.
</Desc>
    <FName>openssl_pkcs7_decrypt</FName>
    <Desc>bool openssl_pkcs7_decrypt ( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ] )
Decrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate and its associated private key specified by recipcert and recipkey.
</Desc>
    <FName>openssl_pkcs7_encrypt</FName>
    <Desc>bool openssl_pkcs7_encrypt ( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]] )
openssl_pkcs7_encrypt() takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts.
</Desc>
    <FName>openssl_pkcs7_read</FName>
    <Desc>bool openssl_pkcs7_read ( string $infilename , array &$certs )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>openssl_pkcs7_sign</FName>
    <Desc>bool openssl_pkcs7_sign ( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]] )
openssl_pkcs7_sign() takes the contents of the file named infilename and signs them using the certificate and its matching private key specified by signcert and privkey parameters.
</Desc>
    <FName>openssl_pkcs7_verify</FName>
    <Desc>mixed openssl_pkcs7_verify ( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content [, string $p7bfilename ]]]]] )
openssl_pkcs7_verify() reads the S/MIME message contained in the given file and examines the digital signature.
</Desc>
    <FName>openssl_pkey_export_to_file</FName>
    <Desc>bool openssl_pkey_export_to_file ( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]] )
openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded) rendition of key into the file named by outfilename. 
Note: You need to have a valid openssl.cnf installed for this function to operate correctly. See the notes under the installation section for more information.
</Desc>
    <FName>openssl_pkey_export</FName>
    <Desc>bool openssl_pkey_export ( mixed $key , string &$out [, string $passphrase [, array $configargs ]] )
openssl_pkey_export() exports key as a PEM encoded string and stores it into out (which is passed by reference). 
Note: You need to have a valid openssl.cnf installed for this function to operate correctly. See the notes under the installation section for more information.
</Desc>
    <FName>openssl_pkey_free</FName>
    <Desc>void openssl_pkey_free ( resource $key )
This function frees a private key created by openssl_pkey_new().
</Desc>
    <FName>openssl_pkey_get_details</FName>
    <Desc>array openssl_pkey_get_details ( resource $key )
This function returns the key details (bits, key, type).
</Desc>
    <FName>openssl_pkey_get_private</FName>
    <Desc>resource openssl_pkey_get_private ( mixed $key [, string $passphrase = "" ] )
openssl_get_privatekey() parses key and prepares it for use by other functions.
</Desc>
    <FName>openssl_pkey_get_public</FName>
    <Desc>resource openssl_pkey_get_public ( mixed $certificate )
openssl_get_publickey() extracts the public key from certificate and prepares it for use by other functions.
</Desc>
    <FName>openssl_pkey_new</FName>
    <Desc>resource openssl_pkey_new ([ array $configargs ] )
openssl_pkey_new() generates a new private and public key pair. The public component of the key can be obtained using openssl_pkey_get_public(). 
Note: You need to have a valid openssl.cnf installed for this function to operate correctly. See the notes under the installation section for more information.
</Desc>
    <FName>openssl_private_decrypt</FName>
    <Desc>bool openssl_private_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )
openssl_private_decrypt() decrypts data that was previously encrypted via openssl_public_encrypt() and stores the result into decrypted. 
You can use this function e.g. to decrypt data which is supposed to only be available to you.
</Desc>
    <FName>openssl_private_encrypt</FName>
    <Desc>bool openssl_private_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )
openssl_private_encrypt() encrypts data with private key and stores the result into crypted. Encrypted data can be decrypted via openssl_public_decrypt(). 
This function can be used e.g. to sign data (or its hash) to prove that it is not written by someone else.
</Desc>
    <FName>openssl_public_decrypt</FName>
    <Desc>bool openssl_public_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )
openssl_public_decrypt() decrypts data that was previous encrypted via openssl_private_encrypt() and stores the result into decrypted. 
You can use this function e.g. to check if the message was written by the owner of the private key.
</Desc>
    <FName>openssl_public_encrypt</FName>
    <Desc>bool openssl_public_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )
openssl_public_encrypt() encrypts data with public key and stores the result into crypted. Encrypted data can be decrypted via openssl_private_decrypt(). 
This function can be used e.g. to encrypt message which can be then read only by owner of the private key. It can be also used to store secure data in database.
</Desc>
    <FName>openssl_random_pseudo_bytes</FName>
    <Desc>string openssl_random_pseudo_bytes ( int $length [, bool &$crypto_strong ] )
Generates a string of pseudo-random bytes, with the number of bytes determined by the length parameter. 
It also indicates if a cryptographically strong algorithm was used to produce the pseudo-random bytes, and does this via the optional crypto_strong parameter. It's rare for this to be FALSE, but some systems may be broken or old.
</Desc>
    <FName>openssl_seal</FName>
    <Desc>int openssl_seal ( string $data , string &$sealed_data , array &$env_keys , array $pub_key_ids [, string $method = "RC4" [, string &$iv ]] )
openssl_seal() seals (encrypts) data by using the given method with a randomly generated secret key. The key is encrypted with each of the public keys associated with the identifiers in pub_key_ids and each encrypted key is returned in env_keys. This means that one can send sealed data to multiple recipients (provided one has obtained their public keys). Each recipient must receive both the sealed data and the envelope key that was encrypted with the recipient's public key.
</Desc>
    <FName>openssl_sign</FName>
    <Desc>bool openssl_sign ( string $data , string &$signature , mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] )
openssl_sign() computes a signature for the specified data by generating a cryptographic digital signature using the private key associated with priv_key_id. Note that the data itself is not encrypted.
</Desc>
    <FName>openssl_spki_export_challenge</FName>
    <Desc>string openssl_spki_export_challenge ( string &$spkac )
Exports challenge from encoded signed public key and challenge
</Desc>
    <FName>openssl_spki_export</FName>
    <Desc>string openssl_spki_export ( string &$spkac )
Exports PEM formatted public key from encoded signed public key and challenge
</Desc>
    <FName>openssl_spki_new</FName>
    <Desc>string openssl_spki_new ( resource &$privkey , string &$challenge [, int $algorithm = 0 ] )
Generates a signed public key and challenge using specified hashing algorithm
</Desc>
    <FName>openssl_spki_verify</FName>
    <Desc>string openssl_spki_verify ( string &$spkac )
Validates the supplied signed public key and challenge
</Desc>
    <FName>openssl_verify</FName>
    <Desc>int openssl_verify ( string $data , string $signature , mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] )
openssl_verify() verifies that the signature is correct for the specified data using the public key associated with pub_key_id. This must be the public key corresponding to the private key used for signing.
</Desc>
    <FName>openssl_x509_check_private_key</FName>
    <Desc>bool openssl_x509_check_private_key ( mixed $cert , mixed $key )
Checks whether the given key is the private key that corresponds to cert. 
Warning 
The function does not check if key is indeed a private key or not. It merely compares the public materials (e.g. exponent and modulus of an RSA key) and/or key parameters (e.g. EC params of an EC key) of a key pair. 
This means, for example, that a public key could be given for key and the function may return TRUE.
</Desc>
    <FName>openssl_x509_checkpurpose</FName>
    <Desc>int openssl_x509_checkpurpose ( mixed $x509cert , int $purpose [, array $cainfo = array() [, string $untrustedfile ]] )
openssl_x509_checkpurpose() examines a certificate to see if it can be used for the specified purpose.
</Desc>
    <FName>openssl_x509_export_to_file</FName>
    <Desc>bool openssl_x509_export_to_file ( mixed $x509 , string $outfilename [, bool $notext = TRUE ] )
openssl_x509_export_to_file() stores x509 into a file named by outfilename in a PEM encoded format.
</Desc>
    <FName>openssl_x509_export</FName>
    <Desc>bool openssl_x509_export ( mixed $x509 , string &$output [, bool $notext = TRUE ] )
openssl_x509_export() stores x509 into a string named by output in a PEM encoded format.
</Desc>
    <FName>openssl_x509_fingerprint</FName>
    <Desc>string openssl_x509_fingerprint ( mixed $x509 [, string $hash_algorithm = "sha1" [, bool $raw_output = FALSE ]] )
openssl_x509_fingerprint() returns the digest of x509 as a string.
</Desc>
    <FName>openssl_x509_free</FName>
    <Desc>void openssl_x509_free ( resource $x509cert )
openssl_x509_free() frees the certificate associated with the specified x509cert resource from memory.
</Desc>
    <FName>openssl_x509_parse</FName>
    <Desc>array openssl_x509_parse ( mixed $x509cert [, bool $shortnames = TRUE ] )
openssl_x509_parse() returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc.
</Desc>
    <FName>openssl_x509_read</FName>
    <Desc>resource openssl_x509_read ( mixed $x509certdata )
openssl_x509_read() parses the certificate supplied by x509certdata and returns a resource identifier for it.
</Desc>
    <FName>ord</FName>
    <Desc>int ord ( string $string )
Interprets the binary value of the first byte of string as an unsigned integer between 0 and 255. 
If the string is in a single-byte encoding, such as ASCII, ISO-8859, or Windows 1252, this is equivalent to returning the position of a character in the character set's mapping table. However, note that this function is not aware of any string encoding, and in particular will never identify a Unicode code point in a multi-byte encoding such as UTF-8 or UTF-16. 
This function complements chr().
</Desc>
    <FName>output_add_rewrite_var</FName>
    <Desc>bool output_add_rewrite_var ( string $name , string $value )
This function adds another name/value pair to the URL rewrite mechanism. The name and value will be added to URLs (as GET parameter) and forms (as hidden input fields) the same way as the session ID when transparent URL rewriting is enabled with session.use_trans_sid. 
This function's behaviour is controlled by the url_rewriter.tags and url_rewriter.hosts php.ini parameters. 
Note: Calling this function will implicitly start output buffering if it is not active already.
</Desc>
    <FName>output_reset_rewrite_vars</FName>
    <Desc>bool output_reset_rewrite_vars ( void )
This function resets the URL rewriter and removes all rewrite variables previously set by the output_add_rewrite_var() function.
</Desc>
    <FName>override_function</FName>
    <Desc>bool override_function ( string $function_name , string $function_args , string $function_code )
Overrides built-in functions by replacing them in the symbol table.
</Desc>
    <FName>pack</FName>
    <Desc>string pack ( string $format [, mixed $args [, mixed $... ]] )
Pack given arguments into a binary string according to format. 
The idea for this function was taken from Perl and all formatting codes work the same as in Perl. However, there are some formatting codes that are missing such as Perl's "u" format code. 
Note that the distinction between signed and unsigned values only affects the function unpack(), where as function pack() gives the same result for signed and unsigned format codes.
</Desc>
    <FName>parse_ini_file</FName>
    <Desc>array parse_ini_file ( string $filename [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL ]] )
parse_ini_file() loads in the ini file specified in filename, and returns the settings in it in an associative array. 
The structure of the ini file is the same as the php.ini's.
</Desc>
    <FName>parse_ini_string</FName>
    <Desc>array parse_ini_string ( string $ini [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL ]] )
parse_ini_string() returns the settings in string ini in an associative array. 
The structure of the ini string is the same as the php.ini's.
</Desc>
    <FName>parse_str</FName>
    <Desc>void parse_str ( string $encoded_string [, array &$result ] )
Parses encoded_string as if it were the query string passed via a URL and sets variables in the current scope (or in the array if result is provided).
</Desc>
    <FName>parse_url</FName>
    <Desc>mixed parse_url ( string $url [, int $component = -1 ] )
This function parses a URL and returns an associative array containing any of the various components of the URL that are present. The values of the array elements are not URL decoded. 
This function is not meant to validate the given URL, it only breaks it up into the above listed parts. Partial URLs are also accepted, parse_url() tries its best to parse them correctly.
</Desc>
    <FName>parsekit_compile_file</FName>
    <Desc>array parsekit_compile_file ( string $filename [, array &$errors [, int $options = PARSEKIT_QUIET ]] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>parsekit_compile_string</FName>
    <Desc>array parsekit_compile_string ( string $phpcode [, array &$errors [, int $options = PARSEKIT_QUIET ]] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>parsekit_func_arginfo</FName>
    <Desc>array parsekit_func_arginfo ( mixed $function )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>passthru</FName>
    <Desc>void passthru ( string $command [, int &$return_var ] )
The passthru() function is similar to the exec() function in that it executes a command. This function should be used in place of exec() or system() when the output from the Unix command is binary data which needs to be passed directly back to the browser. A common use for this is to execute something like the pbmplus utilities that can output an image stream directly. By setting the Content-type to image/gif and then calling a pbmplus program to output a gif, you can create PHP scripts that output images directly.
</Desc>
    <FName>password_get_info</FName>
    <Desc>array password_get_info ( string $hash )
When passed in a valid hash created by an algorithm supported by password_hash(), this function will return an array of information about that hash.
</Desc>
    <FName>password_hash</FName>
    <Desc>string password_hash ( string $password , int $algo [, array $options ] )
password_hash() creates a new password hash using a strong one-way hashing algorithm. password_hash() is compatible with crypt(). Therefore, password hashes created by crypt() can be used with password_hash(). 
The following algorithms are currently supported: 
PASSWORD_DEFAULT - Use the bcrypt algorithm (default as of PHP 5.5.0). Note that this constant is designed to change over time as new and stronger algorithms are added to PHP. For that reason, the length of the result from using this identifier can change over time. Therefore, it is recommended to store the result in a database column that can expand beyond 60 characters (255 characters would be a good choice). 
PASSWORD_BCRYPT - Use the CRYPT_BLOWFISH algorithm to create the hash. This will produce a standard crypt() compatible hash using the "$2y$" identifier. The result will always be a 60 character string, or FALSE on failure. 
PASSWORD_ARGON2I - Use the Argon2 hashing algorithm to create the hash. 
Supported options for PASSWORD_BCRYPT: 
salt (string) - to manually provide a salt to use when hashing the password. Note that this will override and prevent a salt from being automatically generated. 
If omitted, a random salt will be generated by password_hash() for each password hashed. This is the intended mode of operation. 
Warning 
The salt option has been deprecated as of PHP 7.0.0. It is now preferred to simply use the salt that is generated by default. 
cost (integer) - which denotes the algorithmic cost that should be used.
</Desc>
    <FName>password_needs_rehash</FName>
    <Desc>bool password_needs_rehash ( string $hash , int $algo [, array $options ] )
This function checks to see if the supplied hash implements the algorithm and options provided. If not, it is assumed that the hash needs to be rehashed.
</Desc>
    <FName>password_verify</FName>
    <Desc>bool password_verify ( string $password , string $hash )
Verifies that the given hash matches the given password. 
Note that password_hash() returns the algorithm, cost and salt as part of the returned hash. Therefore, all information that's needed to verify the hash is included in it. This allows the verify function to verify the hash without needing separate storage for the salt or algorithm information. 
This function is safe against timing attacks.
</Desc>
    <FName>pathinfo</FName>
    <Desc>mixed pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] )
pathinfo() returns information about path: either an associative array or a string, depending on options. 
Note: 
For information on retrieving the current path info, read the section on predefined reserved variables. 
Caution 
pathinfo() is locale aware, so for it to parse a path containing multibyte characters correctly, the matching locale must be set using the setlocale() function.
</Desc>
    <FName>pclose</FName>
    <Desc>int pclose ( resource $handle )
Closes a file pointer to a pipe opened by popen().
</Desc>
    <FName>pcntl_alarm</FName>
    <Desc>int pcntl_alarm ( int $seconds )
Creates a timer that will send a SIGALRM signal to the process after the given number of seconds. Any call to pcntl_alarm() will cancel any previously set alarm.
</Desc>
    <FName>pcntl_async_signals</FName>
    <Desc>bool pcntl_async_signals ([ bool $on = NULL ] )
If the on parameter is omitted, pcntl_async_signals() returns whether asynchronous signal handling is enabled. Otherwise, asynchronous signal handling is enabled or disabled.
</Desc>
    <FName>pcntl_errno</FName>
    <Desc>This function is an alias of: pcntl_get_last_error() 
</Desc>
    <FName>pcntl_exec</FName>
    <Desc>void pcntl_exec ( string $path [, array $args [, array $envs ]] )
Executes the program with the given arguments.
</Desc>
    <FName>pcntl_fork</FName>
    <Desc>int pcntl_fork ( void )
The pcntl_fork() function creates a child process that differs from the parent process only in its PID and PPID. Please see your system's fork(2) man page for specific details as to how fork works on your system.
</Desc>
    <FName>pcntl_get_last_error</FName>
    <Desc>int pcntl_get_last_error ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>pcntl_getpriority</FName>
    <Desc>int pcntl_getpriority ([ int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]] )
pcntl_getpriority() gets the priority of pid. Because priority levels can differ between system types and kernel versions, please see your system's getpriority(2) man page for specific details.
</Desc>
    <FName>pcntl_setpriority</FName>
    <Desc>bool pcntl_setpriority ( int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]] )
pcntl_setpriority() sets the priority of pid.
</Desc>
    <FName>pcntl_signal_dispatch</FName>
    <Desc>bool pcntl_signal_dispatch ( void )
The pcntl_signal_dispatch() function calls the signal handlers installed by pcntl_signal() for each pending signal.
</Desc>
    <FName>pcntl_signal_get_handler</FName>
    <Desc>mixed pcntl_signal_get_handler ( int $signo )
The pcntl_signal_get_handler() function will get the current handler for the specified signo.
</Desc>
    <FName>pcntl_signal</FName>
    <Desc>bool pcntl_signal ( int $signo , callable|int $handler [, bool $restart_syscalls = TRUE ] )
The pcntl_signal() function installs a new signal handler or replaces the current signal handler for the signal indicated by signo.
</Desc>
    <FName>pcntl_sigprocmask</FName>
    <Desc>bool pcntl_sigprocmask ( int $how , array $set [, array &$oldset ] )
The pcntl_sigprocmask() function adds, removes or sets blocked signals, depending on the how parameter.
</Desc>
    <FName>pcntl_sigtimedwait</FName>
    <Desc>int pcntl_sigtimedwait ( array $set [, array &$siginfo [, int $seconds = 0 [, int $nanoseconds = 0 ]]] )
The pcntl_sigtimedwait() function operates in exactly the same way as pcntl_sigwaitinfo() except that it takes two additional parameters, seconds and nanoseconds, which enable an upper bound to be placed on the time for which the script is suspended.
</Desc>
    <FName>pcntl_sigwaitinfo</FName>
    <Desc>int pcntl_sigwaitinfo ( array $set [, array &$siginfo ] )
The pcntl_sigwaitinfo() function suspends execution of the calling script until one of the signals given in set are delivered. If one of the signal is already pending (e.g. blocked by pcntl_sigprocmask()), pcntl_sigwaitinfo() will return immediately.
</Desc>
    <FName>pcntl_strerror</FName>
    <Desc>string pcntl_strerror ( int $errno )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>pcntl_wait</FName>
    <Desc>int pcntl_wait ( int &$status [, int $options = 0 [, array &$rusage ]] )
The wait function suspends execution of the current process until a child has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function. If a child has already exited by the time of the call (a so-called "zombie" process), the function returns immediately. Any system resources used by the child are freed. Please see your system's wait(2) man page for specific details as to how wait works on your system. 
Note: 
This function is equivalent to calling pcntl_waitpid() with a -1 pid and no options.
</Desc>
    <FName>pcntl_waitpid</FName>
    <Desc>int pcntl_waitpid ( int $pid , int &$status [, int $options = 0 [, array &$rusage ]] )
Suspends execution of the current process until a child as specified by the pid argument has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function. 
If a child as requested by pid has already exited by the time of the call (a so-called "zombie" process), the function returns immediately. Any system resources used by the child are freed. Please see your system's waitpid(2) man page for specific details as to how waitpid works on your system.
</Desc>
    <FName>pcntl_wexitstatus</FName>
    <Desc>int pcntl_wexitstatus ( int $status )
Returns the return code of a terminated child. This function is only useful if pcntl_wifexited() returned TRUE.
</Desc>
    <FName>pcntl_wifexited</FName>
    <Desc>bool pcntl_wifexited ( int $status )
Checks whether the child status code represents a normal exit.
</Desc>
    <FName>pcntl_wifsignaled</FName>
    <Desc>bool pcntl_wifsignaled ( int $status )
Checks whether the child process exited because of a signal which was not caught.
</Desc>
    <FName>pcntl_wifstopped</FName>
    <Desc>bool pcntl_wifstopped ( int $status )
Checks whether the child process which caused the return is currently stopped; this is only possible if the call to pcntl_waitpid() was done using the option WUNTRACED.
</Desc>
    <FName>pcntl_wstopsig</FName>
    <Desc>int pcntl_wstopsig ( int $status )
Returns the number of the signal which caused the child to stop. This function is only useful if pcntl_wifstopped() returned TRUE.
</Desc>
    <FName>pcntl_wtermsig</FName>
    <Desc>int pcntl_wtermsig ( int $status )
Returns the number of the signal that caused the child process to terminate. This function is only useful if pcntl_wifsignaled() returned TRUE.
</Desc>
    <FName>PDF_activate_item</FName>
    <Desc>bool PDF_activate_item ( resource $pdfdoc , int $id )
Activates a previously created structure element or other content item. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_add_annotation</FName>
    <Desc>This function is deprecated, use PDF_create_annotation() with type=Text instead. 
</Desc>
    <FName>PDF_add_bookmark</FName>
    <Desc>This function is deprecated since PDFlib version 6, use PDF_create_bookmark() instead. 
</Desc>
    <FName>PDF_add_launchlink</FName>
    <Desc>bool PDF_add_launchlink ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename )
Adds a link to a web resource. 
This function is deprecated since PDFlib version 6, use PDF_create_action() with type=Launch and PDF_create_annotation() with type=Link instead. 
</Desc>
    <FName>PDF_add_locallink</FName>
    <Desc>bool PDF_add_locallink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , int $page , string $dest )
Add a link annotation to a target within the current PDF file. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 6, use PDF_create_action() with type=GoTo and PDF_create_annotation() with type=Link instead. 
</Desc>
    <FName>PDF_add_nameddest</FName>
    <Desc>bool PDF_add_nameddest ( resource $pdfdoc , string $name , string $optlist )
Creates a named destination on an arbitrary page in the current document. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_add_note</FName>
    <Desc>bool PDF_add_note ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open )
Sets an annotation for the current page. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 6, use PDF_create_annotation() with type=Text instead. 
</Desc>
    <FName>PDF_add_outline</FName>
    <Desc>This function is deprecated, use PDF_create_bookmark() instead. 
</Desc>
    <FName>PDF_add_pdflink</FName>
    <Desc>bool PDF_add_pdflink ( resource $pdfdoc , float $bottom_left_x , float $bottom_left_y , float $up_right_x , float $up_right_y , string $filename , int $page , string $dest )
Add a file link annotation to a PDF target. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 6, use PDF_create_action() with type=GoToR and PDF_create_annotation() with type=Link instead. 
</Desc>
    <FName>PDF_add_table_cell</FName>
    <Desc>int PDF_add_table_cell ( resource $pdfdoc , int $table , int $column , int $row , string $text , string $optlist )
Adds a cell to a new or existing table. 
</Desc>
    <FName>PDF_add_textflow</FName>
    <Desc>int PDF_add_textflow ( resource $pdfdoc , int $textflow , string $text , string $optlist )
Creates a Textflow object, or adds text and explicit options to an existing Textflow. 
</Desc>
    <FName>PDF_add_thumbnail</FName>
    <Desc>bool PDF_add_thumbnail ( resource $pdfdoc , int $image )
Adds an existing image as thumbnail for the current page. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_add_weblink</FName>
    <Desc>bool PDF_add_weblink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , string $url )
Adds a weblink annotation to a target url on the Web. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 6, use PDF_create_action() with type=URI and PDF_create_annotation() with type=Link instead. 
</Desc>
    <FName>PDF_arc</FName>
    <Desc>bool PDF_arc ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )
Adds a counterclockwise circular arc. 
</Desc>
    <FName>PDF_arcn</FName>
    <Desc>bool PDF_arcn ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )
Except for the drawing direction, this function behaves exactly like PDF_arc(). 
</Desc>
    <FName>PDF_attach_file</FName>
    <Desc>bool PDF_attach_file ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename , string $description , string $author , string $mimetype , string $icon )
Adds a file attachment annotation. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 6, use PDF_create_annotation() with type=FileAttachment instead. 
</Desc>
    <FName>PDF_begin_document</FName>
    <Desc>int PDF_begin_document ( resource $pdfdoc , string $filename , string $optlist )
Creates a new PDF file subject to various options. 
</Desc>
    <FName>PDF_begin_font</FName>
    <Desc>bool PDF_begin_font ( resource $pdfdoc , string $filename , float $a , float $b , float $c , float $d , float $e , float $f , string $optlist )
Starts a Type 3 font definition. 
</Desc>
    <FName>PDF_begin_glyph</FName>
    <Desc>bool PDF_begin_glyph ( resource $pdfdoc , string $glyphname , float $wx , float $llx , float $lly , float $urx , float $ury )
Starts a glyph definition for a Type 3 font. 
</Desc>
    <FName>PDF_begin_item</FName>
    <Desc>int PDF_begin_item ( resource $pdfdoc , string $tag , string $optlist )
Opens a structure element or other content item with attributes supplied as options. 
</Desc>
    <FName>PDF_begin_layer</FName>
    <Desc>bool PDF_begin_layer ( resource $pdfdoc , int $layer )
Starts a layer for subsequent output on the page. Returns TRUE on success or FALSE on failure. 
This function requires PDF 1.5. 
</Desc>
    <FName>PDF_begin_page_ext</FName>
    <Desc>bool PDF_begin_page_ext ( resource $pdfdoc , float $width , float $height , string $optlist )
Adds a new page to the document, and specifies various options. The parameters width and height are the dimensions of the new page in points. Returns TRUE on success or FALSE on failure. 
Common Page Sizes in Pointsnamesize
A02380 x 3368
A11684 x 2380
A21190 x 1684
A3842 x 1190
A4595 x 842
A5421 x 595
A6297 x 421
B5501 x 709
letter (8.5" x 11")612 x 792
legal (8.5" x 14")612 x 1008
ledger (17" x 11")1224 x 792
11" x 17"792 x 1224
</Desc>
    <FName>PDF_begin_page</FName>
    <Desc>bool PDF_begin_page ( resource $pdfdoc , float $width , float $height )
Adds a new page to the document. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 6, use PDF_begin_page_ext() instead. 
</Desc>
    <FName>PDF_begin_pattern</FName>
    <Desc>int PDF_begin_pattern ( resource $pdfdoc , float $width , float $height , float $xstep , float $ystep , int $painttype )
Starts a new pattern definition. 
</Desc>
    <FName>PDF_begin_template_ext</FName>
    <Desc>int PDF_begin_template_ext ( resource $pdfdoc , float $width , float $height , string $optlist )
Starts a new template definition. 
</Desc>
    <FName>PDF_begin_template</FName>
    <Desc>int PDF_begin_template ( resource $pdfdoc , float $width , float $height )
Starts a new template definition. 
This function is deprecated since PDFlib version 7, use PDF_begin_template_ext() instead. 
</Desc>
    <FName>PDF_circle</FName>
    <Desc>bool PDF_circle ( resource $pdfdoc , float $x , float $y , float $r )
Adds a circle. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_clip</FName>
    <Desc>bool PDF_clip ( resource $p )
Uses the current path as clipping path, and terminate the path. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_close_image</FName>
    <Desc>bool PDF_close_image ( resource $p , int $image )
Closes an image retrieved with the PDF_open_image() function. 
</Desc>
    <FName>PDF_close_pdi_page</FName>
    <Desc>bool PDF_close_pdi_page ( resource $p , int $page )
Closes the page handle, and frees all page-related resources. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_close_pdi</FName>
    <Desc>bool PDF_close_pdi ( resource $p , int $doc )
Closes all open page handles, and closes the input PDF document. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 7, use PDF_close_pdi_document() instead. 
</Desc>
    <FName>PDF_close</FName>
    <Desc>bool PDF_close ( resource $p )
Closes the generated PDF file, and frees all document-related resources. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 6, use PDF_end_document() instead. 
</Desc>
    <FName>PDF_closepath_fill_stroke</FName>
    <Desc>bool PDF_closepath_fill_stroke ( resource $p )
Closes the path, fills, and strokes it. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_closepath_stroke</FName>
    <Desc>bool PDF_closepath_stroke ( resource $p )
Closes the path, and strokes it. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_closepath</FName>
    <Desc>bool PDF_closepath ( resource $p )
Closes the current path. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_concat</FName>
    <Desc>bool PDF_concat ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )
Concatenates a matrix to the current transformation matrix (CTM). Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_continue_text</FName>
    <Desc>bool PDF_continue_text ( resource $p , string $text )
Prints text at the next line. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_create_3dview</FName>
    <Desc>int PDF_create_3dview ( resource $pdfdoc , string $username , string $optlist )
Creates a 3D view. 
This function requires PDF 1.6. 
</Desc>
    <FName>PDF_create_action</FName>
    <Desc>int PDF_create_action ( resource $pdfdoc , string $type , string $optlist )
Creates an action which can be applied to various objects and events. 
</Desc>
    <FName>PDF_create_annotation</FName>
    <Desc>bool PDF_create_annotation ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $type , string $optlist )
Creates a rectangular annotation on the current page. 
</Desc>
    <FName>PDF_create_bookmark</FName>
    <Desc>int PDF_create_bookmark ( resource $pdfdoc , string $text , string $optlist )
Creates a bookmark subject to various options. 
</Desc>
    <FName>PDF_create_field</FName>
    <Desc>bool PDF_create_field ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $name , string $type , string $optlist )
Creates a form field on the current page subject to various options. 
</Desc>
    <FName>PDF_create_fieldgroup</FName>
    <Desc>bool PDF_create_fieldgroup ( resource $pdfdoc , string $name , string $optlist )
Creates a form field group subject to various options. 
</Desc>
    <FName>PDF_create_gstate</FName>
    <Desc>int PDF_create_gstate ( resource $pdfdoc , string $optlist )
Creates a graphics state object subject to various options. 
</Desc>
    <FName>PDF_create_pvf</FName>
    <Desc>bool PDF_create_pvf ( resource $pdfdoc , string $filename , string $data , string $optlist )
Creates a named virtual read-only file from data provided in memory. 
</Desc>
    <FName>PDF_create_textflow</FName>
    <Desc>int PDF_create_textflow ( resource $pdfdoc , string $text , string $optlist )
Preprocesses text for later formatting and creates a textflow object. 
</Desc>
    <FName>PDF_curveto</FName>
    <Desc>bool PDF_curveto ( resource $p , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
Draws a Bezier curve from the current point, using 3 more control points. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_define_layer</FName>
    <Desc>int PDF_define_layer ( resource $pdfdoc , string $name , string $optlist )
Creates a new layer definition. 
This function requires PDF 1.5. 
</Desc>
    <FName>PDF_delete_pvf</FName>
    <Desc>int PDF_delete_pvf ( resource $pdfdoc , string $filename )
Deletes a named virtual file and frees its data structures (but not the contents). 
</Desc>
    <FName>PDF_delete_table</FName>
    <Desc>bool PDF_delete_table ( resource $pdfdoc , int $table , string $optlist )
Deletes a table and all associated data structures. 
</Desc>
    <FName>PDF_delete_textflow</FName>
    <Desc>bool PDF_delete_textflow ( resource $pdfdoc , int $textflow )
Deletes a textflow and the associated data structures. 
</Desc>
    <FName>PDF_delete</FName>
    <Desc>bool PDF_delete ( resource $pdfdoc )
Deletes a PDFlib object, and frees all internal resources. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_encoding_set_char</FName>
    <Desc>bool PDF_encoding_set_char ( resource $pdfdoc , string $encoding , int $slot , string $glyphname , int $uv )
Adds a glyph name and/or Unicode value to a custom encoding. 
</Desc>
    <FName>PDF_end_document</FName>
    <Desc>bool PDF_end_document ( resource $pdfdoc , string $optlist )
Closes the generated PDF file and applies various options. 
</Desc>
    <FName>PDF_end_font</FName>
    <Desc>bool PDF_end_font ( resource $pdfdoc )
Terminates a Type 3 font definition. 
</Desc>
    <FName>PDF_end_glyph</FName>
    <Desc>bool PDF_end_glyph ( resource $pdfdoc )
Terminates a glyph definition for a Type 3 font. 
</Desc>
    <FName>PDF_end_item</FName>
    <Desc>bool PDF_end_item ( resource $pdfdoc , int $id )
Closes a structure element or other content item. 
</Desc>
    <FName>PDF_end_layer</FName>
    <Desc>bool PDF_end_layer ( resource $pdfdoc )
Deactivates all active layers. Returns TRUE on success or FALSE on failure. 
This function requires PDF 1.5. 
</Desc>
    <FName>PDF_end_page_ext</FName>
    <Desc>bool PDF_end_page_ext ( resource $pdfdoc , string $optlist )
Finishes a page, and applies various options. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_end_page</FName>
    <Desc>bool PDF_end_page ( resource $p )
Finishes the page. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_end_pattern</FName>
    <Desc>bool PDF_end_pattern ( resource $p )
Finishes the pattern definition. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_end_template</FName>
    <Desc>bool PDF_end_template ( resource $p )
Finishes a template definition. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_endpath</FName>
    <Desc>bool PDF_endpath ( resource $p )
Ends the current path without filling or stroking it. 
</Desc>
    <FName>PDF_fill_imageblock</FName>
    <Desc>int PDF_fill_imageblock ( resource $pdfdoc , int $page , string $blockname , int $image , string $optlist )
Fills an image block with variable data according to its properties. 
This function is only available in the PDFlib Personalization Server (PPS). 
</Desc>
    <FName>PDF_fill_pdfblock</FName>
    <Desc>int PDF_fill_pdfblock ( resource $pdfdoc , int $page , string $blockname , int $contents , string $optlist )
Fills a PDF block with variable data according to its properties. 
This function is only available in the PDFlib Personalization Server (PPS). 
</Desc>
    <FName>PDF_fill_stroke</FName>
    <Desc>bool PDF_fill_stroke ( resource $p )
Fills and strokes the current path with the current fill and stroke color. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_fill_textblock</FName>
    <Desc>int PDF_fill_textblock ( resource $pdfdoc , int $page , string $blockname , string $text , string $optlist )
Fills a text block with variable data according to its properties. 
This function is only available in the PDFlib Personalization Server (PPS). 
</Desc>
    <FName>PDF_fill</FName>
    <Desc>bool PDF_fill ( resource $p )
Fills the interior of the current path with the current fill color. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_findfont</FName>
    <Desc>int PDF_findfont ( resource $p , string $fontname , string $encoding , int $embed )
Search for a font and prepare it for later use with PDF_setfont(). The metrics will be loaded, and if embed is nonzero, the font file will be checked, but not yet used. encoding is one of builtin, macroman, winansi, host, a user-defined encoding name or the name of a CMap. Parameter embed is optional before PHP 4.3.5 or with PDFlib less than 5. 
This function is deprecated since PDFlib version 5, use PDF_load_font() instead. 
</Desc>
    <FName>PDF_fit_image</FName>
    <Desc>bool PDF_fit_image ( resource $pdfdoc , int $image , float $x , float $y , string $optlist )
Places an image or template on the page, subject to various options. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_fit_pdi_page</FName>
    <Desc>bool PDF_fit_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , string $optlist )
Places an imported PDF page on the page, subject to various options. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_fit_table</FName>
    <Desc>string PDF_fit_table ( resource $pdfdoc , int $table , float $llx , float $lly , float $urx , float $ury , string $optlist )
Places a table on the page fully or partially. 
</Desc>
    <FName>PDF_fit_textflow</FName>
    <Desc>string PDF_fit_textflow ( resource $pdfdoc , int $textflow , float $llx , float $lly , float $urx , float $ury , string $optlist )
Formats the next portion of a textflow into a rectangular area. 
</Desc>
    <FName>PDF_fit_textline</FName>
    <Desc>bool PDF_fit_textline ( resource $pdfdoc , string $text , float $x , float $y , string $optlist )
Places a single line of text on the page, subject to various options. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_get_apiname</FName>
    <Desc>string PDF_get_apiname ( resource $pdfdoc )
Gets the name of the API function which threw the last exception or failed. 
</Desc>
    <FName>PDF_get_buffer</FName>
    <Desc>string PDF_get_buffer ( resource $p )
Fetches the buffer containing the generated PDF data. 
</Desc>
    <FName>PDF_get_errmsg</FName>
    <Desc>string PDF_get_errmsg ( resource $pdfdoc )
Gets the text of the last thrown exception or the reason for a failed function call. 
</Desc>
    <FName>PDF_get_errnum</FName>
    <Desc>int PDF_get_errnum ( resource $pdfdoc )
Gets the number of the last thrown exception or the reason for a failed function call. 
</Desc>
    <FName>PDF_get_font</FName>
    <Desc>This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter font instead. 
</Desc>
    <FName>PDF_get_fontname</FName>
    <Desc>This function is deprecated since PDFlib version 3, use PDF_get_parameter() with the parameter fontname instead. 
</Desc>
    <FName>PDF_get_fontsize</FName>
    <Desc>This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter fontsizeinstead. 
</Desc>
    <FName>PDF_get_image_height</FName>
    <Desc>This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter imageheight instead. 
</Desc>
    <FName>PDF_get_image_width</FName>
    <Desc>This function is deprecated since PDFlib version 3, use PDF_get_value() with the parameter imagewidth instead. 
</Desc>
    <FName>PDF_get_majorversion</FName>
    <Desc>int PDF_get_majorversion ( void )
This function is deprecated since PDFlib version 5, use PDF_get_value() with the parameter major instead. 
</Desc>
    <FName>PDF_get_minorversion</FName>
    <Desc>int PDF_get_minorversion ( void )
Returns the minor version number of the PDFlib version. 
This function is deprecated since PDFlib version 5, use PDF_get_value() with the parameter minor instead. 
</Desc>
    <FName>PDF_get_parameter</FName>
    <Desc>string PDF_get_parameter ( resource $p , string $key , float $modifier )
Gets the contents of some PDFlib parameter with string type. 
</Desc>
    <FName>PDF_get_pdi_parameter</FName>
    <Desc>string PDF_get_pdi_parameter ( resource $p , string $key , int $doc , int $page , int $reserved )
Gets the contents of a PDI document parameter with string type. 
This function is deprecated since PDFlib version 7, use PDF_pcos_get_string() instead. 
</Desc>
    <FName>PDF_get_pdi_value</FName>
    <Desc>float PDF_get_pdi_value ( resource $p , string $key , int $doc , int $page , int $reserved )
Gets the contents of a PDI document parameter with numerical type. 
This function is deprecated since PDFlib version 7, use PDF_pcos_get_number() instead. 
</Desc>
    <FName>PDF_get_value</FName>
    <Desc>float PDF_get_value ( resource $p , string $key , float $modifier )
Gets the value of some PDFlib parameter with numerical type. 
</Desc>
    <FName>PDF_info_font</FName>
    <Desc>float PDF_info_font ( resource $pdfdoc , int $font , string $keyword , string $optlist )
Queries detailed information about a loaded font. 
</Desc>
    <FName>PDF_info_matchbox</FName>
    <Desc>float PDF_info_matchbox ( resource $pdfdoc , string $boxname , int $num , string $keyword )
Queries information about a matchbox on the current page. 
</Desc>
    <FName>PDF_info_table</FName>
    <Desc>float PDF_info_table ( resource $pdfdoc , int $table , string $keyword )
Retrieves table information related to the most recently placed table instance. 
</Desc>
    <FName>PDF_info_textflow</FName>
    <Desc>float PDF_info_textflow ( resource $pdfdoc , int $textflow , string $keyword )
Queries the current state of a textflow. 
</Desc>
    <FName>PDF_info_textline</FName>
    <Desc>float PDF_info_textline ( resource $pdfdoc , string $text , string $keyword , string $optlist )
Performs textline formatting and queries the resulting metrics. 
</Desc>
    <FName>PDF_initgraphics</FName>
    <Desc>bool PDF_initgraphics ( resource $p )
Reset all color and graphics state parameters to their defaults. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_lineto</FName>
    <Desc>bool PDF_lineto ( resource $p , float $x , float $y )
Draws a line from the current point to another point. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_load_3ddata</FName>
    <Desc>int PDF_load_3ddata ( resource $pdfdoc , string $filename , string $optlist )
Loads a 3D model from a disk-based or virtual file. 
This function requires PDF 1.6. 
</Desc>
    <FName>PDF_load_font</FName>
    <Desc>int PDF_load_font ( resource $pdfdoc , string $fontname , string $encoding , string $optlist )
Searches for a font and prepares it for later use. 
</Desc>
    <FName>PDF_load_iccprofile</FName>
    <Desc>int PDF_load_iccprofile ( resource $pdfdoc , string $profilename , string $optlist )
Searches for an ICC profile, and prepares it for later use. 
</Desc>
    <FName>PDF_load_image</FName>
    <Desc>int PDF_load_image ( resource $pdfdoc , string $imagetype , string $filename , string $optlist )
Opens a disk-based or virtual image file subject to various options. 
</Desc>
    <FName>PDF_makespotcolor</FName>
    <Desc>int PDF_makespotcolor ( resource $p , string $spotname )
Finds a built-in spot color name, or makes a named spot color from the current fill color. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_moveto</FName>
    <Desc>bool PDF_moveto ( resource $p , float $x , float $y )
Sets the current point for graphics output. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_new</FName>
    <Desc>resource PDF_new ( void )
Creates a new PDFlib object with default settings. 
</Desc>
    <FName>PDF_open_ccitt</FName>
    <Desc>int PDF_open_ccitt ( resource $pdfdoc , string $filename , int $width , int $height , int $BitReverse , int $k , int $Blackls1 )
Opens a raw CCITT image. 
This function is deprecated since PDFlib version 5, use PDF_load_image() instead. 
</Desc>
    <FName>PDF_open_file</FName>
    <Desc>bool PDF_open_file ( resource $p , string $filename )
Creates a new PDF file using the supplied file name. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 6, use PDF_begin_document() instead. 
</Desc>
    <FName>PDF_open_gif</FName>
    <Desc>This function is deprecated since PDFlib version 3, use PDF_load_image() instead. 
</Desc>
    <FName>PDF_open_image_file</FName>
    <Desc>int PDF_open_image_file ( resource $p , string $imagetype , string $filename , string $stringparam , int $intparam )
Opens an image file. 
This function is deprecated since PDFlib version 5, use PDF_load_image() with the colorize, ignoremask, invert, mask, masked, and page options instead. 
</Desc>
    <FName>PDF_open_image</FName>
    <Desc>int PDF_open_image ( resource $p , string $imagetype , string $source , string $data , int $length , int $width , int $height , int $components , int $bpc , string $params )
Uses image data from a variety of data sources. 
This function is deprecated since PDFlib version 5, use virtual files and PDF_load_image() instead. 
</Desc>
    <FName>PDF_open_jpeg</FName>
    <Desc>This function is deprecated since PDFlib version 3, use PDF_load_image() instead. 
</Desc>
    <FName>PDF_open_memory_image</FName>
    <Desc>int PDF_open_memory_image ( resource $p , resource $image )
This function is not supported by PDFlib GmbH. 
</Desc>
    <FName>PDF_open_pdi_document</FName>
    <Desc>int PDF_open_pdi_document ( resource $p , string $filename , string $optlist )
Open a disk-based or virtual PDF document and prepare it for later use. 
</Desc>
    <FName>PDF_open_pdi_page</FName>
    <Desc>int PDF_open_pdi_page ( resource $p , int $doc , int $pagenumber , string $optlist )
Prepares a page for later use with PDF_fit_pdi_page(). 
</Desc>
    <FName>PDF_open_pdi</FName>
    <Desc>int PDF_open_pdi ( resource $pdfdoc , string $filename , string $optlist , int $len )
Opens a disk-based or virtual PDF document and prepares it for later use. 
This function is deprecated since PDFlib version 7, use PDF_open_pdi_document() instead. 
</Desc>
    <FName>PDF_open_tiff</FName>
    <Desc>This function is deprecated since PDFlib version 3, use PDF_load_image() instead. 
</Desc>
    <FName>PDF_pcos_get_number</FName>
    <Desc>float PDF_pcos_get_number ( resource $p , int $doc , string $path )
Gets the value of a pCOS path with type number or boolean. 
</Desc>
    <FName>PDF_pcos_get_stream</FName>
    <Desc>string PDF_pcos_get_stream ( resource $p , int $doc , string $optlist , string $path )
Gets the contents of a pCOS path with type stream, fstream, or string. 
</Desc>
    <FName>PDF_pcos_get_string</FName>
    <Desc>string PDF_pcos_get_string ( resource $p , int $doc , string $path )
Gets the value of a pCOS path with type name, string, or boolean. 
</Desc>
    <FName>PDF_place_image</FName>
    <Desc>bool PDF_place_image ( resource $pdfdoc , int $image , float $x , float $y , float $scale )
Places an image and scales it. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 5, use PDF_fit_image() instead. 
</Desc>
    <FName>PDF_place_pdi_page</FName>
    <Desc>bool PDF_place_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , float $sx , float $sy )
Places a PDF page and scales it. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 5, use PDF_fit_pdi_page() instead. 
</Desc>
    <FName>PDF_process_pdi</FName>
    <Desc>int PDF_process_pdi ( resource $pdfdoc , int $doc , int $page , string $optlist )
Processes certain elements of an imported PDF document. 
</Desc>
    <FName>PDF_rect</FName>
    <Desc>bool PDF_rect ( resource $p , float $x , float $y , float $width , float $height )
Draws a rectangle. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_restore</FName>
    <Desc>bool PDF_restore ( resource $p )
Restores the most recently saved graphics state. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_resume_page</FName>
    <Desc>bool PDF_resume_page ( resource $pdfdoc , string $optlist )
Resumes a page to add more content to it. 
</Desc>
    <FName>PDF_rotate</FName>
    <Desc>bool PDF_rotate ( resource $p , float $phi )
Rotates the coordinate system. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_save</FName>
    <Desc>bool PDF_save ( resource $p )
Saves the current graphics state. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_scale</FName>
    <Desc>bool PDF_scale ( resource $p , float $sx , float $sy )
Scales the coordinate system. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_set_border_color</FName>
    <Desc>bool PDF_set_border_color ( resource $p , float $red , float $green , float $blue )
Sets the border color for all kinds of annotations. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 6, use the option annotcolor in PDF_create_annotation() instead. 
</Desc>
    <FName>PDF_set_border_dash</FName>
    <Desc>bool PDF_set_border_dash ( resource $pdfdoc , float $black , float $white )
Sets the border dash style for all kinds of annotations. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 6, use the option dasharray in PDF_create_annotation() instead. 
</Desc>
    <FName>PDF_set_border_style</FName>
    <Desc>bool PDF_set_border_style ( resource $pdfdoc , string $style , float $width )
Sets the border style for all kinds of annotations. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 6, use the options borderstyle and linewidth in PDF_create_annotation() instead. 
</Desc>
    <FName>PDF_set_char_spacing</FName>
    <Desc>This function is deprecated since PDFlib version 3, use PDF_set_value() with parameter charspacing instead. 
</Desc>
    <FName>PDF_set_duration</FName>
    <Desc>This function is deprecated since PDFlib version 3, use the duration option in PDF_begin_page_ext() or PDF_end_page_ext() instead. 
</Desc>
    <FName>PDF_set_gstate</FName>
    <Desc>bool PDF_set_gstate ( resource $pdfdoc , int $gstate )
Activates a graphics state object. 
</Desc>
    <FName>PDF_set_info</FName>
    <Desc>bool PDF_set_info ( resource $p , string $key , string $value )
Fill document information field key with value. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_set_layer_dependency</FName>
    <Desc>bool PDF_set_layer_dependency ( resource $pdfdoc , string $type , string $optlist )
Defines hierarchical and group relationships among layers. Returns TRUE on success or FALSE on failure. 
This function requires PDF 1.5. 
</Desc>
    <FName>PDF_set_parameter</FName>
    <Desc>bool PDF_set_parameter ( resource $p , string $key , string $value )
Sets some PDFlib parameter with string type. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_set_text_pos</FName>
    <Desc>bool PDF_set_text_pos ( resource $p , float $x , float $y )
Sets the position for text output on the page. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_set_value</FName>
    <Desc>bool PDF_set_value ( resource $p , string $key , float $value )
Sets the value of some PDFlib parameter with numerical type. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_setcolor</FName>
    <Desc>bool PDF_setcolor ( resource $p , string $fstype , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 )
Sets the current color space and color. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_setdash</FName>
    <Desc>bool PDF_setdash ( resource $pdfdoc , float $b , float $w )
Sets the current dash pattern to b black and w white units. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_setdashpattern</FName>
    <Desc>bool PDF_setdashpattern ( resource $pdfdoc , string $optlist )
Sets a dash pattern defined by an option list. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_setflat</FName>
    <Desc>bool PDF_setflat ( resource $pdfdoc , float $flatness )
Sets the flatness parameter. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_setfont</FName>
    <Desc>bool PDF_setfont ( resource $pdfdoc , int $font , float $fontsize )
Sets the current font in the specified fontsize, using a font handle returned by PDF_load_font(). Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_setgray_fill</FName>
    <Desc>bool PDF_setgray_fill ( resource $p , float $g )
Sets the current fill color to a gray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 4, use PDF_setcolor() instead. 
</Desc>
    <FName>PDF_setgray_stroke</FName>
    <Desc>bool PDF_setgray_stroke ( resource $p , float $g )
Sets the current stroke color to a gray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 4, use PDF_setcolor() instead. 
</Desc>
    <FName>PDF_setgray</FName>
    <Desc>bool PDF_setgray ( resource $p , float $g )
Sets the current fill and stroke color to a gray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 4, use PDF_setcolor() instead. 
</Desc>
    <FName>PDF_setlinecap</FName>
    <Desc>bool PDF_setlinecap ( resource $p , int $linecap )
Sets the linecap parameter to control the shape at the end of a path with respect to stroking. 
</Desc>
    <FName>PDF_setlinejoin</FName>
    <Desc>bool PDF_setlinejoin ( resource $p , int $value )
Sets the linejoin parameter to specify the shape at the corners of paths that are stroked. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_setlinewidth</FName>
    <Desc>bool PDF_setlinewidth ( resource $p , float $width )
Sets the current line width. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_setmatrix</FName>
    <Desc>bool PDF_setmatrix ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )
Explicitly sets the current transformation matrix. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_setmiterlimit</FName>
    <Desc>bool PDF_setmiterlimit ( resource $pdfdoc , float $miter )
Sets the miter limit.Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_setrgbcolor_fill</FName>
    <Desc>bool PDF_setrgbcolor_fill ( resource $p , float $red , float $green , float $blue )
Sets the current fill color to the supplied RGB values. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 4, use PDF_setcolor() instead. 
</Desc>
    <FName>PDF_setrgbcolor_stroke</FName>
    <Desc>bool PDF_setrgbcolor_stroke ( resource $p , float $red , float $green , float $blue )
Sets the current stroke color to the supplied RGB values. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 4, use PDF_setcolor() instead. 
</Desc>
    <FName>PDF_setrgbcolor</FName>
    <Desc>bool PDF_setrgbcolor ( resource $p , float $red , float $green , float $blue )
Sets the current fill and stroke color to the supplied RGB values. Returns TRUE on success or FALSE on failure. 
This function is deprecated since PDFlib version 4, use PDF_setcolor() instead. 
</Desc>
    <FName>PDF_shading_pattern</FName>
    <Desc>int PDF_shading_pattern ( resource $pdfdoc , int $shading , string $optlist )
Defines a shading pattern using a shading object. 
This function requires PDF 1.4 or above. 
</Desc>
    <FName>PDF_shading</FName>
    <Desc>int PDF_shading ( resource $pdfdoc , string $shtype , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist )
Defines a blend from the current fill color to another color. 
This function requires PDF 1.4 or above. 
</Desc>
    <FName>PDF_shfill</FName>
    <Desc>bool PDF_shfill ( resource $pdfdoc , int $shading )
Fills an area with a shading, based on a shading object. 
This function requires PDF 1.4 or above. 
</Desc>
    <FName>PDF_show_boxed</FName>
    <Desc>int PDF_show_boxed ( resource $p , string $text , float $left , float $top , float $width , float $height , string $mode , string $feature )
This function is deprecated since PDFlib version 6, use PDF_fit_textline() for single lines, or the PDF_*_textflow() functions for multi-line formatting instead. 
</Desc>
    <FName>PDF_show_xy</FName>
    <Desc>bool PDF_show_xy ( resource $p , string $text , float $x , float $y )
Prints text in the current font. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_show</FName>
    <Desc>bool PDF_show ( resource $pdfdoc , string $text )
Prints text in the current font and size at the current position. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_skew</FName>
    <Desc>bool PDF_skew ( resource $p , float $alpha , float $beta )
Skews the coordinate system in x and y direction by alpha and beta degrees, respectively. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_stringwidth</FName>
    <Desc>float PDF_stringwidth ( resource $p , string $text , int $font , float $fontsize )
Returns the width of text in an arbitrary font. 
</Desc>
    <FName>PDF_stroke</FName>
    <Desc>bool PDF_stroke ( resource $p )
Strokes the path with the current color and line width, and clear it. Returns TRUE on success or FALSE on failure. 
</Desc>
    <FName>PDF_suspend_page</FName>
    <Desc>bool PDF_suspend_page ( resource $pdfdoc , string $optlist )
Suspends the current page so that it can later be resumed with PDF_resume_page(). 
</Desc>
    <FName>PDF_translate</FName>
    <Desc>bool PDF_translate ( resource $p , float $tx , float $ty )
Translates the origin of the coordinate system. 
</Desc>
    <FName>PDF_utf16_to_utf8</FName>
    <Desc>string PDF_utf16_to_utf8 ( resource $pdfdoc , string $utf16string )
Converts a string from UTF-16 format to UTF-8. 
</Desc>
    <FName>PDF_utf32_to_utf16</FName>
    <Desc>string PDF_utf32_to_utf16 ( resource $pdfdoc , string $utf32string , string $ordering )
Converts a string from UTF-32 format to UTF-16. 
</Desc>
    <FName>PDF_utf8_to_utf16</FName>
    <Desc>string PDF_utf8_to_utf16 ( resource $pdfdoc , string $utf8string , string $ordering )
Converts a string from UTF-8 format to UTF-16. 
</Desc>
    <FName>pfsockopen</FName>
    <Desc>resource pfsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] )
This function behaves exactly as fsockopen() with the difference that the connection is not closed after the script finishes. It is the persistent version of fsockopen().
</Desc>
    <FName>pg_affected_rows</FName>
    <Desc>int pg_affected_rows ( resource $result )
pg_affected_rows() returns the number of tuples (instances/records/rows) affected by INSERT, UPDATE, and DELETE queries. 
Since PostgreSQL 9.0 and above, the server returns the number of SELECTed rows. Older PostgreSQL return 0 for SELECT. 
Note: 
This function used to be called pg_cmdtuples().
</Desc>
    <FName>pg_cancel_query</FName>
    <Desc>bool pg_cancel_query ( resource $connection )
pg_cancel_query() cancels an asynchronous query sent with pg_send_query(), pg_send_query_params() or pg_send_execute(). You cannot cancel a query executed using pg_query().
</Desc>
    <FName>pg_client_encoding</FName>
    <Desc>string pg_client_encoding ([ resource $connection ] )
PostgreSQL supports automatic character set conversion between server and client for certain character sets. pg_client_encoding() returns the client encoding as a string. The returned string will be one of the standard PostgreSQL encoding identifiers. 
Note: 
This function requires PHP 4.0.3 or higher and PostgreSQL 7.0 or higher. If libpq is compiled without multibyte encoding support, pg_client_encoding() always returns SQL_ASCII. Supported encoding depends on PostgreSQL version. Refer to the PostgreSQL Documentation supported encodings. 
The function used to be called pg_clientencoding().
</Desc>
    <FName>pg_close</FName>
    <Desc>bool pg_close ([ resource $connection ] )
pg_close() closes the non-persistent connection to a PostgreSQL database associated with the given connection resource. 
Note: 
Using pg_close() is not usually necessary, as non-persistent open connections are automatically closed at the end of the script. 
If there is open large object resource on the connection, do not close the connection before closing all large object resources.
</Desc>
    <FName>pg_connect_poll</FName>
    <Desc>int pg_connect_poll ( resource $connection )
pg_connect_poll() polls the status of a PostgreSQL connection created by calling pg_connect() with the PGSQL_CONNECT_ASYNC option.
</Desc>
    <FName>pg_connect</FName>
    <Desc>resource pg_connect ( string $connection_string [, int $connect_type ] )
pg_connect() opens a connection to a PostgreSQL database specified by the connection_string. 
If a second call is made to pg_connect() with the same connection_string as an existing connection, the existing connection will be returned unless you pass PGSQL_CONNECT_FORCE_NEW as connect_type. 
The old syntax with multiple parameters $conn = pg_connect("host", "port", "options", "tty", "dbname") has been deprecated.
</Desc>
    <FName>pg_connection_busy</FName>
    <Desc>bool pg_connection_busy ( resource $connection )
pg_connection_busy() determines whether or not a connection is busy. If it is busy, a previous query is still executing. If pg_get_result() is used on the connection, it will be blocked.
</Desc>
    <FName>pg_connection_reset</FName>
    <Desc>bool pg_connection_reset ( resource $connection )
pg_connection_reset() resets the connection. It is useful for error recovery.
</Desc>
    <FName>pg_connection_status</FName>
    <Desc>int pg_connection_status ( resource $connection )
pg_connection_status() returns the status of the specified connection.
</Desc>
    <FName>pg_consume_input</FName>
    <Desc>bool pg_consume_input ( resource $connection )
pg_consume_input() consumes any input waiting to be read from the database server.
</Desc>
    <FName>pg_convert</FName>
    <Desc>array pg_convert ( resource $connection , string $table_name , array $assoc_array [, int $options = 0 ] )
pg_convert() checks and converts the values in assoc_array into suitable values for use in an SQL statement. Precondition for pg_convert() is the existence of a table table_name which has at least as many columns as assoc_array has elements. The fieldnames in table_name must match the indices in assoc_array and the corresponding datatypes must be compatible. Returns an array with the converted values on success, FALSE otherwise. 
Note: 
Since PHP 5.6.0, it accepts boolean values, converting them to PostgreSQL booleans. String representations of boolean values are also supported. NULL is converted to PostgreSQL NULL. 
Prior to PHP 5.6.0, if there are boolean fields in table_name don't use the constant TRUE in assoc_array. It will be converted to the string 'TRUE' which is not a valid entry for boolean fields in PostgreSQL. Use one of "t", "true", 1, "y", "yes" instead.
</Desc>
    <FName>pg_copy_from</FName>
    <Desc>bool pg_copy_from ( resource $connection , string $table_name , array $rows [, string $delimiter [, string $null_as ]] )
pg_copy_from() inserts records into a table from rows. It issues a COPY FROM SQL command internally to insert records.
</Desc>
    <FName>pg_copy_to</FName>
    <Desc>array pg_copy_to ( resource $connection , string $table_name [, string $delimiter [, string $null_as ]] )
pg_copy_to() copies a table to an array. It issues COPY TO SQL command internally to retrieve records.
</Desc>
    <FName>pg_dbname</FName>
    <Desc>string pg_dbname ([ resource $connection ] )
pg_dbname() returns the name of the database that the given PostgreSQL connection resource.
</Desc>
    <FName>pg_delete</FName>
    <Desc>mixed pg_delete ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )
pg_delete() deletes records from a table specified by the keys and values in assoc_array. If options is specified, pg_convert() is applied to assoc_array with the specified options. 
If options is specified, pg_convert() is applied to assoc_array with the specified flags. 
By default pg_delete() passes raw values. Values must be escaped or PGSQL_DML_ESCAPE option must be specified. PGSQL_DML_ESCAPE quotes and escapes paramters/identifiers. Therefore, table/column names became case sensitive. 
Note that neither escape nor prepared query can protect LIKE query, JSON, Array, Regex, etc. These parameters should be handled according to their contexts. i.e. Escape/validate values.
</Desc>
    <FName>pg_end_copy</FName>
    <Desc>bool pg_end_copy ([ resource $connection ] )
pg_end_copy() syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line(). pg_end_copy() must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error.
</Desc>
    <FName>pg_escape_bytea</FName>
    <Desc>string pg_escape_bytea ([ resource $connection ], string $data )
pg_escape_bytea() escapes string for bytea datatype. It returns escaped string. 
Note: 
When you SELECT a bytea type, PostgreSQL returns octal byte values prefixed with '\' (e.g. \032). Users are supposed to convert back to binary format manually. 
This function requires PostgreSQL 7.2 or later. With PostgreSQL 7.2.0 and 7.2.1, bytea values must be cast when you enable multi-byte support. i.e. INSERT INTO test_table (image) VALUES ('$image_escaped'::bytea); PostgreSQL 7.2.2 or later does not need a cast. The exception is when the client and backend character encoding does not match, and there may be multi-byte stream error. User must then cast to bytea to avoid this error.
</Desc>
    <FName>pg_escape_identifier</FName>
    <Desc>string pg_escape_identifier ([ resource $connection ], string $data )
pg_escape_identifier() escapes a identifier (e.g. table, field names) for quering the database. It returns an escaped identifier string for PostgreSQL server. pg_escape_identifier() adds double quotes before and after data. Users should not add double quotes. Use of this function is recommended for identifier parameters in query. For SQL literals (i.e. parameters except bytea), pg_escape_literal() or pg_escape_string() must be used. For bytea type fields, pg_escape_bytea() must be used instead. 
Note: 
This function has internal escape code and can also be used with PostgreSQL 8.4 or less.
</Desc>
    <FName>pg_escape_literal</FName>
    <Desc>string pg_escape_literal ([ resource $connection ], string $data )
pg_escape_literal() escapes a literal for querying the PostgreSQL database. It returns an escaped literal in the PostgreSQL format. pg_escape_literal() adds quotes before and after data. Users should not add quotes. Use of this function is recommended instead of pg_escape_string(). If the type of the column is bytea, pg_escape_bytea() must be used instead. For escaping identifiers (e.g. table, field names), pg_escape_identifier() must be used. 
Note: 
This function has internal escape code and can also be used with PostgreSQL 8.4 or less.
</Desc>
    <FName>pg_escape_string</FName>
    <Desc>string pg_escape_string ([ resource $connection ], string $data )
pg_escape_string() escapes a string for querying the database. It returns an escaped string in the PostgreSQL format without quotes. pg_escape_literal() is more preferred way to escape SQL parameters for PostgreSQL. addslashes() must not be used with PostgreSQL. If the type of the column is bytea, pg_escape_bytea() must be used instead. pg_escape_identifier() must be used to escape identifiers (e.g. table names, field names) 
Note: 
This function requires PostgreSQL 7.2 or later.
</Desc>
    <FName>pg_execute</FName>
    <Desc>resource pg_execute ([ resource $connection ], string $stmtname , array $params )
Sends a request to execute a prepared statement with given parameters, and waits for the result. 
pg_execute() is like pg_query_params(), but the command to be executed is specified by naming a previously-prepared statement, instead of giving a query string. This feature allows commands that will be used repeatedly to be parsed and planned just once, rather than each time they are executed. The statement must have been prepared previously in the current session. pg_execute() is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions. 
The parameters are identical to pg_query_params(), except that the name of a prepared statement is given instead of a query string.
</Desc>
    <FName>pg_fetch_all_columns</FName>
    <Desc>array pg_fetch_all_columns ( resource $result [, int $column = 0 ] )
pg_fetch_all_columns() returns an array that contains all rows (records) in a particular column of the result resource. 
Note: This function sets NULL fields to the PHP NULL value.
</Desc>
    <FName>pg_fetch_all</FName>
    <Desc>array pg_fetch_all ( resource $result [, int $result_type = PGSQL_ASSOC ] )
pg_fetch_all() returns an array that contains all rows (records) in the result resource. 
Note: This function sets NULL fields to the PHP NULL value.
</Desc>
    <FName>pg_fetch_array</FName>
    <Desc>array pg_fetch_array ( resource $result [, int $row [, int $result_type = PGSQL_BOTH ]] )
pg_fetch_array() returns an array that corresponds to the fetched row (record). 
pg_fetch_array() is an extended version of pg_fetch_row(). In addition to storing the data in the numeric indices (field number) to the result array, it can also store the data using associative indices (field name). It stores both indicies by default. 
Note: This function sets NULL fields to the PHP NULL value.
pg_fetch_array() is NOT significantly slower than using pg_fetch_row(), and is significantly easier to use.
</Desc>
    <FName>pg_fetch_assoc</FName>
    <Desc>array pg_fetch_assoc ( resource $result [, int $row ] )
pg_fetch_assoc() returns an associative array that corresponds to the fetched row (records). 
pg_fetch_assoc() is equivalent to calling pg_fetch_array() with PGSQL_ASSOC as the optional third parameter. It only returns an associative array. If you need the numeric indices, use pg_fetch_row(). 
Note: This function sets NULL fields to the PHP NULL value.
pg_fetch_assoc() is NOT significantly slower than using pg_fetch_row(), and is significantly easier to use.
</Desc>
    <FName>pg_fetch_object</FName>
    <Desc>object pg_fetch_object ( resource $result [, int $row [, int $result_type = PGSQL_ASSOC ]] )
object pg_fetch_object ( resource $result [, int $row [, string $class_name [, array $params ]]] )
pg_fetch_object() returns an object with properties that correspond to the fetched row's field names. It can optionally instantiate an object of a specific class, and pass parameters to that class's constructor. 
Note: This function sets NULL fields to the PHP NULL value.
Speed-wise, the function is identical to pg_fetch_array(), and almost as fast as pg_fetch_row() (the difference is insignificant).
</Desc>
    <FName>pg_fetch_result</FName>
    <Desc>string pg_fetch_result ( resource $result , int $row , mixed $field )
string pg_fetch_result ( resource $result , mixed $field )
pg_fetch_result() returns the value of a particular row and field (column) in a PostgreSQL result resource. 
Note: 
This function used to be called pg_result().
</Desc>
    <FName>pg_fetch_row</FName>
    <Desc>array pg_fetch_row ( resource $result [, int $row ] )
pg_fetch_row() fetches one row of data from the result associated with the specified result resource. 
Note: This function sets NULL fields to the PHP NULL value.
</Desc>
    <FName>pg_field_is_null</FName>
    <Desc>int pg_field_is_null ( resource $result , int $row , mixed $field )
int pg_field_is_null ( resource $result , mixed $field )
pg_field_is_null() tests if a field in a PostgreSQL result resource is SQL NULL or not. 
Note: 
This function used to be called pg_fieldisnull().
</Desc>
    <FName>pg_field_name</FName>
    <Desc>string pg_field_name ( resource $result , int $field_number )
pg_field_name() returns the name of the field occupying the given field_number in the given PostgreSQL result resource. Field numbering starts from 0. 
Note: 
This function used to be called pg_fieldname().
</Desc>
    <FName>pg_field_num</FName>
    <Desc>int pg_field_num ( resource $result , string $field_name )
pg_field_num() will return the number of the field number that corresponds to the field_name in the given PostgreSQL result resource. 
Note: 
This function used to be called pg_fieldnum().
</Desc>
    <FName>pg_field_prtlen</FName>
    <Desc>int pg_field_prtlen ( resource $result , int $row_number , mixed $field_name_or_number )
int pg_field_prtlen ( resource $result , mixed $field_name_or_number )
pg_field_prtlen() returns the actual printed length (number of characters) of a specific value in a PostgreSQL result. Row numbering starts at 0. This function will return FALSE on an error. 
field_name_or_number can be passed either as an integer or as a string. If it is passed as an integer, PHP recognises it as the field number, otherwise as field name. 
See the example given at the pg_field_name() page. 
Note: 
This function used to be called pg_fieldprtlen().
</Desc>
    <FName>pg_field_size</FName>
    <Desc>int pg_field_size ( resource $result , int $field_number )
pg_field_size() returns the internal storage size (in bytes) of the field number in the given PostgreSQL result. 
Note: 
This function used to be called pg_fieldsize().
</Desc>
    <FName>pg_field_table</FName>
    <Desc>mixed pg_field_table ( resource $result , int $field_number [, bool $oid_only = FALSE ] )
pg_field_table() returns the name of the table that field belongs to, or the table's oid if oid_only is TRUE.
</Desc>
    <FName>pg_field_type_oid</FName>
    <Desc>int pg_field_type_oid ( resource $result , int $field_number )
pg_field_type_oid() returns an integer containing the OID of the base type of the given field_number in the given PostgreSQL result resource. 
You can get more information about the field type by querying PostgreSQL's pg_type system table using the OID obtained with this function. The PostgreSQL format_type() function will convert a type OID into an SQL standard type name. 
Note: 
If the field uses a PostgreSQL domain (rather than a basic type), it is the OID of the domain's underlying type that is returned, rather than the OID of the domain itself.
</Desc>
    <FName>pg_field_type</FName>
    <Desc>string pg_field_type ( resource $result , int $field_number )
pg_field_type() returns a string containing the base type name of the given field_number in the given PostgreSQL result resource. 
Note: 
If the field uses a PostgreSQL domain (rather than a basic type), it is the name of the domain's underlying type that is returned, rather than the name of the domain itself. 
Note: 
This function used to be called pg_fieldtype().
</Desc>
    <FName>pg_flush</FName>
    <Desc>mixed pg_flush ( resource $connection )
pg_flush() flushes any outbound query data waiting to be sent on the connection.
</Desc>
    <FName>pg_free_result</FName>
    <Desc>bool pg_free_result ( resource $result )
pg_free_result() frees the memory and data associated with the specified PostgreSQL query result resource. 
This function need only be called if memory consumption during script execution is a problem. Otherwise, all result memory will be automatically freed when the script ends. 
Note: 
This function used to be called pg_freeresult().
</Desc>
    <FName>pg_get_notify</FName>
    <Desc>array pg_get_notify ( resource $connection [, int $result_type ] )
pg_get_notify() gets notifications generated by a NOTIFY SQL command. To receive notifications, the LISTEN SQL command must be issued.
</Desc>
    <FName>pg_get_pid</FName>
    <Desc>int pg_get_pid ( resource $connection )
pg_get_pid() gets the backend's (database server process) PID. The PID is useful to determine whether or not a NOTIFY message received via pg_get_notify() is sent from another process or not.
</Desc>
    <FName>pg_get_result</FName>
    <Desc>resource pg_get_result ([ resource $connection ] )
pg_get_result() gets the result resource from an asynchronous query executed by pg_send_query(), pg_send_query_params() or pg_send_execute(). 
pg_send_query() and the other asynchronous query functions can send multiple queries to a PostgreSQL server and pg_get_result() is used to get each query's results, one by one.
</Desc>
    <FName>pg_host</FName>
    <Desc>string pg_host ([ resource $connection ] )
pg_host() returns the host name of the given PostgreSQL connection resource is connected to.
</Desc>
    <FName>pg_insert</FName>
    <Desc>mixed pg_insert ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )
pg_insert() inserts the values of assoc_array into the table specified by table_name. If options is specified, pg_convert() is applied to assoc_array with the specified options. 
If options is specified, pg_convert() is applied to assoc_array with the specified flags. 
By default pg_insert() passes raw values. Values must be escaped or PGSQL_DML_ESCAPE option must be specified. PGSQL_DML_ESCAPE quotes and escapes paramters/identifiers. Therefore, table/column names became case sensitive. 
Note that neither escape nor prepared query can protect LIKE query, JSON, Array, Regex, etc. These parameters should be handled according to their contexts. i.e. Escape/validate values.
</Desc>
    <FName>pg_last_error</FName>
    <Desc>string pg_last_error ([ resource $connection ] )
pg_last_error() returns the last error message for a given connection. 
Error messages may be overwritten by internal PostgreSQL (libpq) function calls. It may not return an appropriate error message if multiple errors occur inside a PostgreSQL module function. 
Use pg_result_error(), pg_result_error_field(), pg_result_status() and pg_connection_status() for better error handling. 
Note: 
This function used to be called pg_errormessage().
</Desc>
    <FName>pg_last_notice</FName>
    <Desc>mixed pg_last_notice ( resource $connection [, int $option = PGSQL_NOTICE_LAST ] )
pg_last_notice() returns the last notice message from the PostgreSQL server on the specified connection. The PostgreSQL server sends notice messages in several cases, for instance when creating a SERIAL column in a table. 
With pg_last_notice(), you can avoid issuing useless queries by checking whether or not the notice is related to your transaction. 
Notice message tracking can be set to optional by setting 1 for pgsql.ignore_notice in php.ini. 
Notice message logging can be set to optional by setting 0 for pgsql.log_notice in php.ini. Unless pgsql.ignore_notice is set to 0, notice message cannot be logged.
</Desc>
    <FName>pg_last_oid</FName>
    <Desc>string pg_last_oid ( resource $result )
pg_last_oid() is used to retrieve the OID assigned to an inserted row. 
OID field became an optional field from PostgreSQL 7.2 and will not be present by default in PostgreSQL 8.1. When the OID field is not present in a table, the programmer must use pg_result_status() to check for successful insertion. 
To get the value of a SERIAL field in an inserted row, it is necessary to use the PostgreSQL CURRVAL function, naming the sequence whose last value is required. If the name of the sequence is unknown, the pg_get_serial_sequence PostgreSQL 8.0 function is necessary. 
PostgreSQL 8.1 has a function LASTVAL that returns the value of the most recently used sequence in the session. This avoids the need for naming the sequence, table or column altogether. 
Note: 
This function used to be called pg_getlastoid().
</Desc>
    <FName>pg_lo_close</FName>
    <Desc>bool pg_lo_close ( resource $large_object )
pg_lo_close() closes a large object. large_object is a resource for the large object from pg_lo_open(). 
To use the large object interface, it is necessary to enclose it within a transaction block. 
Note: 
This function used to be called pg_loclose().
</Desc>
    <FName>pg_lo_create</FName>
    <Desc>int pg_lo_create ([ resource $connection [, mixed $object_id ]] )
int pg_lo_create ( mixed $object_id )
pg_lo_create() creates a large object and returns the OID of the large object. PostgreSQL access modes INV_READ, INV_WRITE, and INV_ARCHIVE are not supported, the object is created always with both read and write access. INV_ARCHIVE has been removed from PostgreSQL itself (version 6.3 and above). 
To use the large object interface, it is necessary to enclose it within a transaction block. 
Instead of using the large object interface (which has no access controls and is cumbersome to use), try PostgreSQL's bytea column type and pg_escape_bytea(). 
Note: 
This function used to be called pg_locreate().
</Desc>
    <FName>pg_lo_export</FName>
    <Desc>bool pg_lo_export ([ resource $connection ], int $oid , string $pathname )
pg_lo_export() takes a large object in a PostgreSQL database and saves its contents to a file on the local filesystem. 
To use the large object interface, it is necessary to enclose it within a transaction block. 
Note: 
This function used to be called pg_loexport().
</Desc>
    <FName>pg_lo_import</FName>
    <Desc>int pg_lo_import ([ resource $connection ], string $pathname [, mixed $object_id ] )
pg_lo_import() creates a new large object in the database using a file on the filesystem as its data source. 
To use the large object interface, it is necessary to enclose it within a transaction block. 
Note: When safe mode is enabled, PHP checks whether the files or directories being operated upon have the same UID (owner) as the script that is being executed.
Note: 
This function used to be called pg_loimport().
</Desc>
    <FName>pg_lo_open</FName>
    <Desc>resource pg_lo_open ( resource $connection , int $oid , string $mode )
pg_lo_open() opens a large object in the database and returns large object resource so that it can be manipulated. 
Warning 
Do not close the database connection before closing the large object resource. 
To use the large object interface, it is necessary to enclose it within a transaction block. 
Note: 
This function used to be called pg_loopen().
</Desc>
    <FName>pg_lo_read_all</FName>
    <Desc>int pg_lo_read_all ( resource $large_object )
pg_lo_read_all() reads a large object and passes it straight through to the browser after sending all pending headers. Mainly intended for sending binary data like images or sound. 
To use the large object interface, it is necessary to enclose it within a transaction block. 
Note: 
This function used to be called pg_loreadall().
</Desc>
    <FName>pg_lo_read</FName>
    <Desc>string pg_lo_read ( resource $large_object [, int $len = 8192 ] )
pg_lo_read() reads at most len bytes from a large object and returns it as a string. 
To use the large object interface, it is necessary to enclose it within a transaction block. 
Note: 
This function used to be called pg_loread().
</Desc>
    <FName>pg_lo_seek</FName>
    <Desc>bool pg_lo_seek ( resource $large_object , int $offset [, int $whence = PGSQL_SEEK_CUR ] )
pg_lo_seek() seeks a position within a large object resource. 
To use the large object interface, it is necessary to enclose it within a transaction block.
</Desc>
    <FName>pg_lo_tell</FName>
    <Desc>int pg_lo_tell ( resource $large_object )
pg_lo_tell() returns the current position (offset from the beginning) of a large object. 
To use the large object interface, it is necessary to enclose it within a transaction block.
</Desc>
    <FName>pg_lo_truncate</FName>
    <Desc>bool pg_lo_truncate ( resource $large_object , int $size )
pg_lo_truncate() truncates a large object resource. 
To use the large object interface, it is necessary to enclose it within a transaction block.
</Desc>
    <FName>pg_lo_unlink</FName>
    <Desc>bool pg_lo_unlink ( resource $connection , int $oid )
pg_lo_unlink() deletes a large object with the oid. Returns TRUE on success or FALSE on failure. 
To use the large object interface, it is necessary to enclose it within a transaction block. 
Note: 
This function used to be called pg_lounlink().
</Desc>
    <FName>pg_lo_write</FName>
    <Desc>int pg_lo_write ( resource $large_object , string $data [, int $len ] )
pg_lo_write() writes data into a large object at the current seek position. 
To use the large object interface, it is necessary to enclose it within a transaction block. 
Note: 
This function used to be called pg_lowrite().
</Desc>
    <FName>pg_meta_data</FName>
    <Desc>array pg_meta_data ( resource $connection , string $table_name [, bool $extended = FALSE ] )
pg_meta_data() returns table definition for table_name as an array.
</Desc>
    <FName>pg_num_fields</FName>
    <Desc>int pg_num_fields ( resource $result )
pg_num_fields() returns the number of fields (columns) in a PostgreSQL result resource. 
Note: 
This function used to be called pg_numfields().
</Desc>
    <FName>pg_num_rows</FName>
    <Desc>int pg_num_rows ( resource $result )
pg_num_rows() will return the number of rows in a PostgreSQL result resource. 
Note: 
This function used to be called pg_numrows().
</Desc>
    <FName>pg_options</FName>
    <Desc>string pg_options ([ resource $connection ] )
pg_options() will return a string containing the options specified on the given PostgreSQL connection resource.
</Desc>
    <FName>pg_parameter_status</FName>
    <Desc>string pg_parameter_status ([ resource $connection ], string $param_name )
Looks up a current parameter setting of the server. 
Certain parameter values are reported by the server automatically at connection startup or whenever their values change. pg_parameter_status() can be used to interrogate these settings. It returns the current value of a parameter if known, or FALSE if the parameter is not known.
</Desc>
    <FName>pg_pconnect</FName>
    <Desc>resource pg_pconnect ( string $connection_string [, int $connect_type ] )
pg_pconnect() opens a connection to a PostgreSQL database. It returns a connection resource that is needed by other PostgreSQL functions. 
If a second call is made to pg_pconnect() with the same connection_string as an existing connection, the existing connection will be returned unless you pass PGSQL_CONNECT_FORCE_NEW as connect_type. 
To enable persistent connection, the pgsql.allow_persistent php.ini directive must be set to "On" (which is the default). The maximum number of persistent connection can be defined with the pgsql.max_persistent php.ini directive (defaults to -1 for no limit). The total number of connections can be set with the pgsql.max_links php.ini directive. 
pg_close() will not close persistent links generated by pg_pconnect().
</Desc>
    <FName>pg_ping</FName>
    <Desc>bool pg_ping ([ resource $connection ] )
pg_ping() pings a database connection and tries to reconnect it if it is broken.
</Desc>
    <FName>pg_port</FName>
    <Desc>int pg_port ([ resource $connection ] )
pg_port() returns the port number that the given PostgreSQL connection resource is connected to.
</Desc>
    <FName>pg_prepare</FName>
    <Desc>resource pg_prepare ([ resource $connection ], string $stmtname , string $query )
pg_prepare() creates a prepared statement for later execution with pg_execute() or pg_send_execute(). This feature allows commands that will be used repeatedly to be parsed and planned just once, rather than each time they are executed. pg_prepare() is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions. 
The function creates a prepared statement named stmtname from the query string, which must contain a single SQL command. stmtname may be "" to create an unnamed statement, in which case any pre-existing unnamed statement is automatically replaced; otherwise it is an error if the statement name is already defined in the current session. If any parameters are used, they are referred to in the query as $1, $2, etc. 
Prepared statements for use with pg_prepare() can also be created by executing SQL PREPARE statements. (But pg_prepare() is more flexible since it does not require parameter types to be pre-specified.) Also, although there is no PHP function for deleting a prepared statement, the SQL DEALLOCATE statement can be used for that purpose.
</Desc>
    <FName>pg_put_line</FName>
    <Desc>bool pg_put_line ([ resource $connection ], string $data )
pg_put_line() sends a NULL-terminated string to the PostgreSQL backend server. This is needed in conjunction with PostgreSQL's COPY FROM command. 
COPY is a high-speed data loading interface supported by PostgreSQL. Data is passed in without being parsed, and in a single transaction. 
An alternative to using raw pg_put_line() commands is to use pg_copy_from(). This is a far simpler interface. 
Note: 
The application must explicitly send the two characters "\." on the last line to indicate to the backend that it has finished sending its data, before issuing pg_end_copy(). 
Warning 
Use of the pg_put_line() causes most large object operations, including pg_lo_read() and pg_lo_tell(), to subsequently fail. You can use pg_copy_from() and pg_copy_to() instead.
</Desc>
    <FName>pg_query_params</FName>
    <Desc>resource pg_query_params ([ resource $connection ], string $query , array $params )
Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text. 
pg_query_params() is like pg_query(), but offers additional functionality: parameter values can be specified separately from the command string proper. pg_query_params() is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions. 
If parameters are used, they are referred to in the query string as $1, $2, etc. The same parameter may appear more than once in the query; the same value will be used in that case. params specifies the actual values of the parameters. A NULL value in this array means the corresponding parameter is SQL NULL. 
The primary advantage of pg_query_params() over pg_query() is that parameter values may be separated from the query string, thus avoiding the need for tedious and error-prone quoting and escaping. Unlike pg_query(), pg_query_params() allows at most one SQL command in the given string. (There can be semicolons in it, but not more than one nonempty command.)
</Desc>
    <FName>pg_query</FName>
    <Desc>resource pg_query ([ resource $connection ], string $query )
pg_query() executes the query on the specified database connection. pg_query_params() should be preferred in most cases. 
If an error occurs, and FALSE is returned, details of the error can be retrieved using the pg_last_error() function if the connection is valid. 
Note: Although connection can be omitted, it is not recommended, since it can be the cause of hard to find bugs in scripts. 
Note: 
This function used to be called pg_exec(). pg_exec() is still available for compatibility reasons, but users are encouraged to use the newer name.
</Desc>
    <FName>pg_result_error_field</FName>
    <Desc>string pg_result_error_field ( resource $result , int $fieldcode )
pg_result_error_field() returns one of the detailed error message fields associated with result resource. It is only available against a PostgreSQL 7.4 or above server. The error field is specified by the fieldcode. 
Because pg_query() and pg_query_params() return FALSE if the query fails, you must use pg_send_query() and pg_get_result() to get the result handle. 
If you need to get additional error information from failed pg_query() queries, use pg_set_error_verbosity() and pg_last_error() and then parse the result.
</Desc>
    <FName>pg_result_error</FName>
    <Desc>string pg_result_error ( resource $result )
pg_result_error() returns any error message associated with the result resource. Therefore, the user has a better chance of getting the correct error message than with pg_last_error(). 
The function pg_result_error_field() can give much greater detail on result errors than pg_result_error(). 
Because pg_query() returns FALSE if the query fails, you must use pg_send_query() and pg_get_result() to get the result handle.
</Desc>
    <FName>pg_result_seek</FName>
    <Desc>bool pg_result_seek ( resource $result , int $offset )
pg_result_seek() sets the internal row offset in a result resource.
</Desc>
    <FName>pg_result_status</FName>
    <Desc>mixed pg_result_status ( resource $result [, int $type = PGSQL_STATUS_LONG ] )
pg_result_status() returns the status of a result resource, or the PostgreSQL command completion tag associated with the result
</Desc>
    <FName>pg_select</FName>
    <Desc>mixed pg_select ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC [, int $result_type = PGSQL_ASSOC ]] )
pg_select() selects records specified by assoc_array which has field=>value. For a successful query, it returns an array containing all records and fields that match the condition specified by assoc_array. 
If options is specified, pg_convert() is applied to assoc_array with the specified flags. 
By default pg_select() passes raw values. Values must be escaped or PGSQL_DML_ESCAPE option must be specified. PGSQL_DML_ESCAPE quotes and escapes paramters/identifiers. Therefore, table/column names became case sensitive. 
Note that neither escape nor prepared query can protect LIKE query, JSON, Array, Regex, etc. These parameters should be handled according to their contexts. i.e. Escape/validate values.
</Desc>
    <FName>pg_send_execute</FName>
    <Desc>bool pg_send_execute ( resource $connection , string $stmtname , array $params )
Sends a request to execute a prepared statement with given parameters, without waiting for the result(s). 
This is similar to pg_send_query_params(), but the command to be executed is specified by naming a previously-prepared statement, instead of giving a query string. The function's parameters are handled identically to pg_execute(). Like pg_execute(), it will not work on pre-7.4 versions of PostgreSQL.
</Desc>
    <FName>pg_send_prepare</FName>
    <Desc>bool pg_send_prepare ( resource $connection , string $stmtname , string $query )
Sends a request to create a prepared statement with the given parameters, without waiting for completion. 
This is an asynchronous version of pg_prepare(): it returns TRUE if it was able to dispatch the request, and FALSE if not. After a successful call, call pg_get_result() to determine whether the server successfully created the prepared statement. The function's parameters are handled identically to pg_prepare(). Like pg_prepare(), it will not work on pre-7.4 versions of PostgreSQL.
</Desc>
    <FName>pg_send_query_params</FName>
    <Desc>bool pg_send_query_params ( resource $connection , string $query , array $params )
Submits a command and separate parameters to the server without waiting for the result(s). 
This is equivalent to pg_send_query() except that query parameters can be specified separately from the query string. The function's parameters are handled identically to pg_query_params(). Like pg_query_params(), it will not work on pre-7.4 PostgreSQL connections, and it allows only one command in the query string.
</Desc>
    <FName>pg_send_query</FName>
    <Desc>bool pg_send_query ( resource $connection , string $query )
pg_send_query() sends a query or queries asynchronously to the connection. Unlike pg_query(), it can send multiple queries at once to PostgreSQL and get the results one by one using pg_get_result(). 
Script execution is not blocked while the queries are executing. Use pg_connection_busy() to check if the connection is busy (i.e. the query is executing). Queries may be cancelled using pg_cancel_query(). 
Although the user can send multiple queries at once, multiple queries cannot be sent over a busy connection. If a query is sent while the connection is busy, it waits until the last query is finished and discards all its results.
</Desc>
    <FName>pg_set_client_encoding</FName>
    <Desc>int pg_set_client_encoding ([ resource $connection ], string $encoding )
pg_set_client_encoding() sets the client encoding and returns 0 if success or -1 if error. 
PostgreSQL will automatically convert data in the backend database encoding into the frontend encoding. 
Note: 
The function used to be called pg_setclientencoding().
</Desc>
    <FName>pg_set_error_verbosity</FName>
    <Desc>int pg_set_error_verbosity ([ resource $connection ], int $verbosity )
Determines the verbosity of messages returned by pg_last_error() and pg_result_error(). 
pg_set_error_verbosity() sets the verbosity mode, returning the connection's previous setting. In PGSQL_ERRORS_TERSE mode, returned messages include severity, primary text, and position only; this will normally fit on a single line. The default mode (PGSQL_ERRORS_DEFAULT) produces messages that include the above plus any detail, hint, or context fields (these may span multiple lines). The PGSQL_ERRORS_VERBOSE mode includes all available fields. Changing the verbosity does not affect the messages available from already-existing result objects, only subsequently-created ones.
</Desc>
    <FName>pg_socket</FName>
    <Desc>resource pg_socket ( resource $connection )
pg_socket() returns a read only resource corresponding to the socket underlying the given PostgreSQL connection. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>pg_trace</FName>
    <Desc>bool pg_trace ( string $pathname [, string $mode = "w" [, resource $connection ]] )
pg_trace() enables tracing of the PostgreSQL frontend/backend communication to a file. To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol. 
For those who are not, it can still be useful for tracing errors in queries sent to the server, you could do for example grep '^To backend' trace.log and see what queries actually were sent to the PostgreSQL server. For more information, refer to the » PostgreSQL Documentation.
</Desc>
    <FName>pg_transaction_status</FName>
    <Desc>int pg_transaction_status ( resource $connection )
Returns the current in-transaction status of the server. 
Caution 
pg_transaction_status() will give incorrect results when using a PostgreSQL 7.3 server that has the parameter autocommit set to off. The server-side autocommit feature has been deprecated and does not exist in later server versions.
</Desc>
    <FName>pg_tty</FName>
    <Desc>string pg_tty ([ resource $connection ] )
pg_tty() returns the TTY name that server side debugging output is sent to on the given PostgreSQL connection resource. 
Note: 
pg_tty() is obsolete, since the server no longer pays attention to the TTY setting, but the function remains for backwards compatibility.
</Desc>
    <FName>pg_unescape_bytea</FName>
    <Desc>string pg_unescape_bytea ( string $data )
pg_unescape_bytea() unescapes PostgreSQL bytea data values. It returns the unescaped string, possibly containing binary data. 
Note: 
When you SELECT a bytea type, PostgreSQL returns octal byte values prefixed with '\' (e.g. \032). Users are supposed to convert back to binary format manually. 
This function requires PostgreSQL 7.2 or later. With PostgreSQL 7.2.0 and 7.2.1, bytea values must be cast when you enable multi-byte support. i.e. INSERT INTO test_table (image) VALUES ('$image_escaped'::bytea); PostgreSQL 7.2.2 or later does not need a cast. The exception is when the client and backend character encoding does not match, and there may be multi-byte stream error. User must then cast to bytea to avoid this error.
</Desc>
    <FName>pg_untrace</FName>
    <Desc>bool pg_untrace ([ resource $connection ] )
Stop tracing started by pg_trace().
</Desc>
    <FName>pg_update</FName>
    <Desc>mixed pg_update ( resource $connection , string $table_name , array $data , array $condition [, int $options = PGSQL_DML_EXEC ] )
pg_update() updates records that matches condition with data. If options is specified, pg_convert() is applied to data with specified options. 
pg_update() updates records specified by assoc_array which has field=>value. 
If options is specified, pg_convert() is applied to assoc_array with the specified flags. 
By default pg_update() passes raw values. Values must be escaped or PGSQL_DML_ESCAPE option must be specified. PGSQL_DML_ESCAPE quotes and escapes paramters/identifiers. Therefore, table/column names became case sensitive. 
Note that neither escape nor prepared query can protect LIKE query, JSON, Array, Regex, etc. These parameters should be handled according to their contexts. i.e. Escape/validate values.
</Desc>
    <FName>pg_version</FName>
    <Desc>array pg_version ([ resource $connection ] )
pg_version() returns an array with the client, protocol and server version. Protocol and server versions are only available if PHP was compiled with PostgreSQL 7.4 or later. 
For more detailed server information, use pg_parameter_status().
</Desc>
    <FName>php_check_syntax</FName>
    <Desc>bool php_check_syntax ( string $filename [, string &$error_message ] )
Performs a syntax (lint) check on the specified filename testing for scripting errors. 
This is similar to using php -l from the commandline except that this function will execute (but not output) the checked filename. 
For example, if a function is defined in filename, this defined function will be available to the file that executed php_check_syntax(), but output from filename will be suppressed. 
Note: 
For technical reasons, this function is deprecated and removed from PHP. Instead, use php -l somefile.php from the commandline.
</Desc>
    <FName>php_ini_loaded_file</FName>
    <Desc>string php_ini_loaded_file ( void )
Check if a php.ini file is loaded, and retrieve its path.
</Desc>
    <FName>php_ini_scanned_files</FName>
    <Desc>string php_ini_scanned_files ( void )
php_ini_scanned_files() returns a comma-separated list of configuration files parsed after php.ini. The directories searched are set by a compile time option and, optionally, by an environment variable at run time: more information can be found in the installation guide. 
The returned configuration files include the full path.
</Desc>
    <FName>php_logo_guid</FName>
    <Desc>string php_logo_guid ( void )
This function returns the ID which can be used to display the PHP logo using the built-in image. Logo is displayed only if expose_php is On. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.5.0.
</Desc>
    <FName>php_sapi_name</FName>
    <Desc>string php_sapi_name ( void )
Returns a lowercase string that describes the type of interface (the Server API, SAPI) that PHP is using. For example, in CLI PHP this string will be "cli" whereas with Apache it may have several different values depending on the exact SAPI used. Possible values are listed below.
</Desc>
    <FName>php_strip_whitespace</FName>
    <Desc>string php_strip_whitespace ( string $filename )
Returns the PHP source code in filename with PHP comments and whitespace removed. This may be useful for determining the amount of actual code in your scripts compared with the amount of comments. This is similar to using php -w from the commandline.
</Desc>
    <FName>php_uname</FName>
    <Desc>string php_uname ([ string $mode = "a" ] )
php_uname() returns a description of the operating system PHP is running on. This is the same string you see at the very top of the phpinfo() output. For the name of just the operating system, consider using the PHP_OS constant, but keep in mind this constant will contain the operating system PHP was built on. 
On some older UNIX platforms, it may not be able to determine the current OS information in which case it will revert to displaying the OS PHP was built on. This will only happen if your uname() library call either doesn't exist or doesn't work.
</Desc>
    <FName>phpcredits</FName>
    <Desc>bool phpcredits ([ int $flag = CREDITS_ALL ] )
This function prints out the credits listing the PHP developers, modules, etc. It generates the appropriate HTML codes to insert the information in a page.
</Desc>
    <FName>phpdbg_break_file</FName>
    <Desc>void phpdbg_break_file ( string $file , int $line )
Insert a breakpoint at the given line in the given file.
</Desc>
    <FName>phpdbg_break_function</FName>
    <Desc>void phpdbg_break_function ( string $function )
Insert a breakpoint at the entry to the given function.
</Desc>
    <FName>phpdbg_break_method</FName>
    <Desc>void phpdbg_break_method ( string $class , string $method )
Insert a breakpoint at the entry to the given method of the given class.
</Desc>
    <FName>phpdbg_break_next</FName>
    <Desc>void phpdbg_break_next ( void )
Insert a breakpoint at the next opcode.
</Desc>
    <FName>phpdbg_clear</FName>
    <Desc>void phpdbg_clear ( void )
Clear all breakpoints that have been set, either via one of the phpdbg_break_*() functions or interactively in the console. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phpdbg_color</FName>
    <Desc>void phpdbg_color ( int $element , string $color )
Set the color of the given element.
</Desc>
    <FName>phpdbg_end_oplog</FName>
    <Desc>array phpdbg_end_oplog ([ array $options ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phpdbg_exec</FName>
    <Desc>mixed phpdbg_exec ([ string $context ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phpdbg_get_executable</FName>
    <Desc>array phpdbg_get_executable ([ array $options ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phpdbg_prompt</FName>
    <Desc>void phpdbg_prompt ( string $string )
Set the command prompt to the given string.
</Desc>
    <FName>phpdbg_start_oplog</FName>
    <Desc>void phpdbg_start_oplog ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phpinfo</FName>
    <Desc>bool phpinfo ([ int $what = INFO_ALL ] )
Outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License. 
Because every system is setup differently, phpinfo() is commonly used to check configuration settings and for available predefined variables on a given system. 
phpinfo() is also a valuable debugging tool as it contains all EGPCS (Environment, GET, POST, Cookie, Server) data.
</Desc>
    <FName>phpversion</FName>
    <Desc>string phpversion ([ string $extension ] )
Returns a string containing the version of the currently running PHP parser or extension.
</Desc>
    <FName>pi</FName>
    <Desc>float pi ( void )
Returns an approximation of pi. The returned float has a precision based on the precision directive in php.ini, which defaults to 14. Also, you can use the M_PI constant which yields identical results to pi().
</Desc>
    <FName>png2wbmp</FName>
    <Desc>bool png2wbmp ( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )
Converts a PNG file into a WBMP file.
</Desc>
    <FName>popen</FName>
    <Desc>resource popen ( string $command , string $mode )
Opens a pipe to a process executed by forking the command given by command.
</Desc>
    <FName>pos</FName>
    <Desc>This function is an alias of: current() 
</Desc>
    <FName>posix_access</FName>
    <Desc>bool posix_access ( string $file [, int $mode = POSIX_F_OK ] )
posix_access() checks the user's permission of a file.
</Desc>
    <FName>posix_ctermid</FName>
    <Desc>string posix_ctermid ( void )
Generates a string which is the pathname for the current controlling terminal for the process. On error this will set errno, which can be checked using posix_get_last_error()
</Desc>
    <FName>posix_errno</FName>
    <Desc>This function is an alias of: posix_get_last_error(). 
</Desc>
    <FName>posix_get_last_error</FName>
    <Desc>int posix_get_last_error ( void )
Retrieve the error number set by the last posix function that failed. The system error message associated with the errno may be checked with posix_strerror().
</Desc>
    <FName>posix_getcwd</FName>
    <Desc>string posix_getcwd ( void )
Gets the absolute pathname of the script's current working directory. On error, it sets errno which can be checked using posix_get_last_error()
</Desc>
    <FName>posix_getegid</FName>
    <Desc>int posix_getegid ( void )
Return the numeric effective group ID of the current process.
</Desc>
    <FName>posix_geteuid</FName>
    <Desc>int posix_geteuid ( void )
Return the numeric effective user ID of the current process. See also posix_getpwuid() for information on how to convert this into a useable username.
</Desc>
    <FName>posix_getgid</FName>
    <Desc>int posix_getgid ( void )
Return the numeric real group ID of the current process.
</Desc>
    <FName>posix_getgrgid</FName>
    <Desc>array posix_getgrgid ( int $gid )
Gets information about a group provided its id.
</Desc>
    <FName>posix_getgrnam</FName>
    <Desc>array posix_getgrnam ( string $name )
Gets information about a group provided its name.
</Desc>
    <FName>posix_getgroups</FName>
    <Desc>array posix_getgroups ( void )
Gets the group set of the current process.
</Desc>
    <FName>posix_getlogin</FName>
    <Desc>string posix_getlogin ( void )
Returns the login name of the user owning the current process.
</Desc>
    <FName>posix_getpgid</FName>
    <Desc>int posix_getpgid ( int $pid )
Returns the process group identifier of the process pid or FALSE on failure.
</Desc>
    <FName>posix_getpgrp</FName>
    <Desc>int posix_getpgrp ( void )
Return the process group identifier of the current process.
</Desc>
    <FName>posix_getpid</FName>
    <Desc>int posix_getpid ( void )
Return the process identifier of the current process.
</Desc>
    <FName>posix_getppid</FName>
    <Desc>int posix_getppid ( void )
Return the process identifier of the parent process of the current process.
</Desc>
    <FName>posix_getpwnam</FName>
    <Desc>array posix_getpwnam ( string $username )
Returns an array of information about the given user.
</Desc>
    <FName>posix_getpwuid</FName>
    <Desc>array posix_getpwuid ( int $uid )
Returns an array of information about the user referenced by the given user ID.
</Desc>
    <FName>posix_getrlimit</FName>
    <Desc>array posix_getrlimit ( void )
posix_getrlimit() returns an array of information about the current resource's soft and hard limits. 
Each resource has an associated soft and hard limit. The soft limit is the value that the kernel enforces for the corresponding resource. The hard limit acts as a ceiling for the soft limit. An unprivileged process may only set its soft limit to a value from 0 to the hard limit, and irreversibly lower its hard limit.
</Desc>
    <FName>posix_getsid</FName>
    <Desc>int posix_getsid ( int $pid )
Return the session id of the process pid. The session id of a process is the process group id of the session leader.
</Desc>
    <FName>posix_getuid</FName>
    <Desc>int posix_getuid ( void )
Return the numeric real user ID of the current process.
</Desc>
    <FName>posix_initgroups</FName>
    <Desc>bool posix_initgroups ( string $name , int $base_group_id )
Calculates the group access list for the user specified in name.
</Desc>
    <FName>posix_isatty</FName>
    <Desc>bool posix_isatty ( mixed $fd )
Determines if the file descriptor fd refers to a valid terminal type device.
</Desc>
    <FName>posix_kill</FName>
    <Desc>bool posix_kill ( int $pid , int $sig )
Send the signal sig to the process with the process identifier pid.
</Desc>
    <FName>posix_mkfifo</FName>
    <Desc>bool posix_mkfifo ( string $pathname , int $mode )
posix_mkfifo() creates a special FIFO file which exists in the file system and acts as a bidirectional communication endpoint for processes.
</Desc>
    <FName>posix_mknod</FName>
    <Desc>bool posix_mknod ( string $pathname , int $mode [, int $major = 0 [, int $minor = 0 ]] )
Creates a special or ordinary file.
</Desc>
    <FName>posix_setegid</FName>
    <Desc>bool posix_setegid ( int $gid )
Set the effective group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.
</Desc>
    <FName>posix_seteuid</FName>
    <Desc>bool posix_seteuid ( int $uid )
Set the effective user ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.
</Desc>
    <FName>posix_setgid</FName>
    <Desc>bool posix_setgid ( int $gid )
Set the real group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function. The appropriate order of function calls is posix_setgid() first, posix_setuid() last. 
Note: 
If the caller is a super user, this will also set the effective group id.
</Desc>
    <FName>posix_setpgid</FName>
    <Desc>bool posix_setpgid ( int $pid , int $pgid )
Let the process pid join the process group pgid.
</Desc>
    <FName>posix_setrlimit</FName>
    <Desc>bool posix_setrlimit ( int $resource , int $softlimit , int $hardlimit )
posix_setrlimit() sets the soft and hard limits for a given system resource. 
Each resource has an associated soft and hard limit. The soft limit is the value that the kernel enforces for the corresponding resource. The hard limit acts as a ceiling for the soft limit. An unprivileged process may only set its soft limit to a value from 0 to the hard limit, and irreversibly lower its hard limit.
</Desc>
    <FName>posix_setsid</FName>
    <Desc>int posix_setsid ( void )
Make the current process a session leader.
</Desc>
    <FName>posix_setuid</FName>
    <Desc>bool posix_setuid ( int $uid )
Set the real user ID of the current process. This is a privileged function that needs appropriate privileges (usually root) on the system to be able to perform this function.
</Desc>
    <FName>posix_strerror</FName>
    <Desc>string posix_strerror ( int $errno )
Returns the POSIX system error message associated with the given errno. You may get the errno parameter by calling posix_get_last_error().
</Desc>
    <FName>posix_times</FName>
    <Desc>array posix_times ( void )
Gets information about the current CPU usage.
</Desc>
    <FName>posix_ttyname</FName>
    <Desc>string posix_ttyname ( mixed $fd )
Returns a string for the absolute path to the current terminal device that is open on the file descriptor fd.
</Desc>
    <FName>posix_uname</FName>
    <Desc>array posix_uname ( void )
Gets information about the system. 
Posix requires that assumptions must not be made about the format of the values, e.g. the assumption that a release may contain three digits or anything else returned by this function.
</Desc>
    <FName>pow</FName>
    <Desc>number pow ( number $base , number $exp )
Returns base raised to the power of exp. 
Note: 
In PHP 5.6 onwards, you may prefer to use the ** operator.
</Desc>
    <FName>preg_filter</FName>
    <Desc>mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )
preg_filter() is identical to preg_replace() except it only returns the (possibly transformed) subjects where there was a match. For details about how this function works, read the preg_replace() documentation.
</Desc>
    <FName>preg_grep</FName>
    <Desc>array preg_grep ( string $pattern , array $input [, int $flags = 0 ] )
Returns the array consisting of the elements of the input array that match the given pattern.
</Desc>
    <FName>preg_last_error</FName>
    <Desc>int preg_last_error ( void )
Returns the error code of the last PCRE regex execution. 
Example #1 preg_last_error() example
<?php

preg_match('/(?:\D+|<\d+>)*[!?]/', 'foobar foobar foobar');

if (preg_last_error() == PREG_BACKTRACK_LIMIT_ERROR) {
    print 'Backtrack limit was exhausted!';
}

?> 
The above example will output:
Backtrack limit was exhausted!
</Desc>
    <FName>preg_match_all</FName>
    <Desc>int preg_match_all ( string $pattern , string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )
Searches subject for all matches to the regular expression given in pattern and puts them in matches in the order specified by flags. 
After the first match is found, the subsequent searches are continued on from end of the last match.
</Desc>
    <FName>preg_match</FName>
    <Desc>int preg_match ( string $pattern , string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0 ]]] )
Searches subject for a match to the regular expression given in pattern.
</Desc>
    <FName>preg_quote</FName>
    <Desc>string preg_quote ( string $str [, string $delimiter = NULL ] )
preg_quote() takes str and puts a backslash in front of every character that is part of the regular expression syntax. This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters. 
The special regular expression characters are: . \ + * ? [ ^ ] $ ( ) { } = ! < > | : - 
Note that / is not a special regular expression character. 
Note: 
Note that preg_quote() is not meant to be applied to the $replacement string(s) of preg_replace() etc.
</Desc>
    <FName>preg_replace_callback_array</FName>
    <Desc>mixed preg_replace_callback_array ( array $patterns_and_callbacks , mixed $subject [, int $limit = -1 [, int &$count ]] )
The behavior of this function is similar to preg_replace_callback(), except that callbacks are executed on a per-pattern basis.
</Desc>
    <FName>preg_replace_callback</FName>
    <Desc>mixed preg_replace_callback ( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &$count ]] )
The behavior of this function is almost identical to preg_replace(), except for the fact that instead of replacement parameter, one should specify a callback.
</Desc>
    <FName>preg_replace</FName>
    <Desc>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )
Searches subject for matches to pattern and replaces them with replacement.
</Desc>
    <FName>preg_split</FName>
    <Desc>array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )
Split the given string by a regular expression.
</Desc>
    <FName>prev</FName>
    <Desc>mixed prev ( array &$array )
Rewind the internal array pointer. 
prev() behaves just like next(), except it rewinds the internal array pointer one place instead of advancing it.
</Desc>
    <FName>print_r</FName>
    <Desc>mixed print_r ( mixed $expression [, bool $return = FALSE ] )
print_r() displays information about a variable in a way that's readable by humans. 
print_r(), var_dump() and var_export() will also show protected and private properties of objects. Static class members will not be shown.
</Desc>
    <FName>print</FName>
    <Desc>int print ( string $arg )
Outputs arg. 
print is not actually a real function (it is a language construct) so you are not required to use parentheses with its argument list. 
The major differences to echo are that print only accepts a single argument and always returns 1.
</Desc>
    <FName>printf</FName>
    <Desc>int printf ( string $format [, mixed $args [, mixed $... ]] )
Produces output according to format.
</Desc>
    <FName>proc_close</FName>
    <Desc>int proc_close ( resource $process )
proc_close() is similar to pclose() except that it only works on processes opened by proc_open(). proc_close() waits for the process to terminate, and returns its exit code. If you have open pipes to that process, you should fclose() them prior to calling this function in order to avoid a deadlock - the child process may not be able to exit while the pipes are open.
</Desc>
    <FName>proc_get_status</FName>
    <Desc>array proc_get_status ( resource $process )
proc_get_status() fetches data about a process opened using proc_open().
</Desc>
    <FName>proc_nice</FName>
    <Desc>bool proc_nice ( int $increment )
proc_nice() changes the priority of the current process by the amount specified in increment. A positive increment will lower the priority of the current process, whereas a negative increment will raise the priority. 
proc_nice() is not related to proc_open() and its associated functions in any way.
</Desc>
    <FName>proc_open</FName>
    <Desc>resource proc_open ( string $cmd , array $descriptorspec , array &$pipes [, string $cwd [, array $env [, array $other_options ]]] )
proc_open() is similar to popen() but provides a much greater degree of control over the program execution.
</Desc>
    <FName>proc_terminate</FName>
    <Desc>bool proc_terminate ( resource $process [, int $signal = 15 ] )
Signals a process (created using proc_open()) that it should terminate. proc_terminate() returns immediately and does not wait for the process to terminate. 
proc_terminate() allows you terminate the process and continue with other tasks. You may poll the process (to see if it has stopped yet) by using the proc_get_status() function.
</Desc>
    <FName>property_exists</FName>
    <Desc>bool property_exists ( mixed $class , string $property )
This function checks if the given property exists in the specified class. 
Note: 
As opposed with isset(), property_exists() returns TRUE even if the property has the value NULL.
</Desc>
    <FName>ps_add_bookmark</FName>
    <Desc>int ps_add_bookmark ( resource $psdoc , string $text [, int $parent = 0 [, int $open = 0 ]] )
Adds a bookmark for the current page. Bookmarks usually appear in PDF-Viewers left of the page in a hierarchical tree. Clicking on a bookmark will jump to the given page. 
The note will not be visible if the document is printed or viewed but it will show up if the document is converted to pdf by either Acrobat Distiller™ or Ghostview.
</Desc>
    <FName>ps_add_launchlink</FName>
    <Desc>bool ps_add_launchlink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename )
Places a hyperlink at the given position pointing to a file program which is being started when clicked on. The hyperlink's source position is a rectangle with its lower left corner at (llx, lly) and its upper right corner at (urx, ury). The rectangle has by default a thin blue border. 
The note will not be visible if the document is printed or viewed but it will show up if the document is converted to pdf by either Acrobat Distiller™ or Ghostview.
</Desc>
    <FName>ps_add_locallink</FName>
    <Desc>bool ps_add_locallink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , int $page , string $dest )
Places a hyperlink at the given position pointing to a page in the same document. Clicking on the link will jump to the given page. The first page in a document has number 1. 
The hyperlink's source position is a rectangle with its lower left corner at (llx, lly) and its upper right corner at (urx, ury). The rectangle has by default a thin blue border. 
The note will not be visible if the document is printed or viewed but it will show up if the document is converted to pdf by either Acrobat Distiller™ or Ghostview.
</Desc>
    <FName>ps_add_note</FName>
    <Desc>bool ps_add_note ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open )
Adds a note at a certain position on the page. Notes are like little rectangular sheets with text on it, which can be placed anywhere on a page. They are shown either folded or unfolded. If folded, the specified icon is used as a placeholder. 
The note will not be visible if the document is printed or viewed but it will show up if the document is converted to pdf by either Acrobat Distiller™ or Ghostview.
</Desc>
    <FName>ps_add_pdflink</FName>
    <Desc>bool ps_add_pdflink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename , int $page , string $dest )
Places a hyperlink at the given position pointing to a second pdf document. Clicking on the link will branch to the document at the given page. The first page in a document has number 1. 
The hyperlink's source position is a rectangle with its lower left corner at (llx, lly) and its upper right corner at (urx, ury). The rectangle has by default a thin blue border. 
The note will not be visible if the document is printed or viewed but it will show up if the document is converted to pdf by either Acrobat Distiller™ or Ghostview.
</Desc>
    <FName>ps_add_weblink</FName>
    <Desc>bool ps_add_weblink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $url )
Places a hyperlink at the given position pointing to a web page. The hyperlink's source position is a rectangle with its lower left corner at (llx, lly) and its upper right corner at (urx, ury). The rectangle has by default a thin blue border. 
The note will not be visible if the document is printed or viewed but it will show up if the document is converted to pdf by either Acrobat Distiller™ or Ghostview.
</Desc>
    <FName>ps_arc</FName>
    <Desc>bool ps_arc ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta )
Draws a portion of a circle with at middle point at (x, y). The arc starts at an angle of alpha and ends at an angle of beta. It is drawn counterclockwise (use ps_arcn() to draw clockwise). The subpath added to the current path starts on the arc at angle alpha and ends on the arc at angle beta.
</Desc>
    <FName>ps_arcn</FName>
    <Desc>bool ps_arcn ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta )
Draws a portion of a circle with at middle point at (x, y). The arc starts at an angle of alpha and ends at an angle of beta. It is drawn clockwise (use ps_arc() to draw counterclockwise). The subpath added to the current path starts on the arc at angle beta and ends on the arc at angle alpha.
</Desc>
    <FName>ps_begin_page</FName>
    <Desc>bool ps_begin_page ( resource $psdoc , float $width , float $height )
Starts a new page. Although the parameters width and height imply a different page size for each page, this is not possible in PostScript. The first call of ps_begin_page() will set the page size for the whole document. Consecutive calls will have no effect, except for creating a new page. The situation is different if you intent to convert the PostScript document into PDF. This function places pdfmarks into the document which can set the size for each page indiviually. The resulting PDF document will have different page sizes. 
Though PostScript does not know different page sizes, pslib places a bounding box for each page into the document. This size is evaluated by some PostScript viewers and will have precedence over the BoundingBox in the Header of the document. This can lead to unexpected results when you set a BoundingBox whose lower left corner is not (0, 0), because the bounding box of the page will always have a lower left corner (0, 0) and overwrites the global setting. 
Each page is encapsulated into save/restore. This means, that most of the settings made on one page will not be retained on the next page. 
If there is up to the first call of ps_begin_page() no call of ps_findfont(), then the header of the PostScript document will be output and the bounding box will be set to the size of the first page. The lower left corner of the bounding box is set to (0, 0). If ps_findfont() was called before, then the header has been output already, and the document will not have a valid bounding box. In order to prevent this, one should call ps_set_info() to set the info field BoundingBox and possibly Orientation before any ps_findfont() or ps_begin_page() calls. 
Note: 
Up to version 0.2.6 of pslib, this function will always overwrite the BoundingBox and Orientation, if it has been set before with ps_set_info() and ps_findfont() has not been called before.
</Desc>
    <FName>ps_begin_pattern</FName>
    <Desc>int ps_begin_pattern ( resource $psdoc , float $width , float $height , float $xstep , float $ystep , int $painttype )
Starts a new pattern. A pattern is like a page containing e.g. a drawing which can be used for filling areas. It is used like a color by calling ps_setcolor() and setting the color space to pattern.
</Desc>
    <FName>ps_begin_template</FName>
    <Desc>int ps_begin_template ( resource $psdoc , float $width , float $height )
Starts a new template. A template is called a form in the postscript language. It is created similar to a pattern but used like an image. Templates are often used for drawings which are placed several times through out the document, e.g. like a company logo. All drawing functions may be used within a template. The template will not be drawn until it is placed by ps_place_image().
</Desc>
    <FName>ps_circle</FName>
    <Desc>bool ps_circle ( resource $psdoc , float $x , float $y , float $radius )
Draws a circle with its middle point at (x, y). The circle starts and ends at position (x+radius, y). If this function is called outside a path it will start a new path. If it is called within a path it will add the circle as a subpath. If the last drawing operation does not end in point (x+radius, y) then there will be a gap in the path.
</Desc>
    <FName>ps_clip</FName>
    <Desc>bool ps_clip ( resource $psdoc )
Takes the current path and uses it to define the border of a clipping area. Everything drawn outside of that area will not be visible.
</Desc>
    <FName>ps_close_image</FName>
    <Desc>void ps_close_image ( resource $psdoc , int $imageid )
Closes an image and frees its resources. Once an image is closed it cannot be used anymore.
</Desc>
    <FName>ps_close</FName>
    <Desc>bool ps_close ( resource $psdoc )
Closes the PostScript document. 
This function writes the trailer of the PostScript document. It also writes the bookmark tree. ps_close() does not free any resources, which is done by ps_delete(). 
This function is also called by ps_delete() if it has not been called before.
</Desc>
    <FName>ps_closepath_stroke</FName>
    <Desc>bool ps_closepath_stroke ( resource $psdoc )
Connects the last point with first point of a path and draws the resulting closed line.
</Desc>
    <FName>ps_closepath</FName>
    <Desc>bool ps_closepath ( resource $psdoc )
Connects the last point with the first point of a path. The resulting path can be used for stroking, filling, clipping, etc..
</Desc>
    <FName>ps_continue_text</FName>
    <Desc>bool ps_continue_text ( resource $psdoc , string $text )
Output a text one line below the last line. The line spacing is taken from the value "leading" which must be set with ps_set_value(). The actual position of the text is determined by the values "textx" and "texty" which can be requested with ps_get_value()
</Desc>
    <FName>ps_curveto</FName>
    <Desc>bool ps_curveto ( resource $psdoc , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
Add a section of a cubic Bezier curve described by the three given control points to the current path.
</Desc>
    <FName>ps_delete</FName>
    <Desc>bool ps_delete ( resource $psdoc )
Mainly frees memory used by the document. Also closes a file, if it was not closed before with ps_close(). You should in any case close the file with ps_close() before, because ps_close() not just closes the file but also outputs a trailor containing PostScript comments like the number of pages in the document and adding the bookmark hierarchy.
</Desc>
    <FName>ps_end_page</FName>
    <Desc>bool ps_end_page ( resource $psdoc )
Ends a page which was started with ps_begin_page(). Ending a page will leave the current drawing context, which e.g. requires to reload fonts if they were loading within the page, and to set many other drawing parameters like the line width, or color..
</Desc>
    <FName>ps_end_pattern</FName>
    <Desc>bool ps_end_pattern ( resource $psdoc )
Ends a pattern which was started with ps_begin_pattern(). Once a pattern has been ended, it can be used like a color to fill areas.
</Desc>
    <FName>ps_end_template</FName>
    <Desc>bool ps_end_template ( resource $psdoc )
Ends a template which was started with ps_begin_template(). Once a template has been ended, it can be used like an image.
</Desc>
    <FName>ps_fill_stroke</FName>
    <Desc>bool ps_fill_stroke ( resource $psdoc )
Fills and draws the path constructed with previously called drawing functions like ps_lineto().
</Desc>
    <FName>ps_fill</FName>
    <Desc>bool ps_fill ( resource $psdoc )
Fills the path constructed with previously called drawing functions like ps_lineto().
</Desc>
    <FName>ps_findfont</FName>
    <Desc>int ps_findfont ( resource $psdoc , string $fontname , string $encoding [, bool $embed = FALSE ] )
Loads a font for later use. Before text is output with a loaded font it must be set with ps_setfont(). This function needs the adobe font metric file in order to calculate the space used up by the characters. A font which is loaded within a page will only be available on that page. Fonts which are to be used in the complete document have to be loaded before the first call of ps_begin_page(). Calling ps_findfont() between pages will make that font available for all following pages. 
The name of the afm file must be fontname.afm. If the font shall be embedded the file fontname.pfb containing the font outline must be present as well. 
Calling ps_findfont() before the first page requires to output the postscript header which includes the BoundingBox for the whole document. Usually the BoundingBox is set with the first call of ps_begin_page() which now comes after ps_findfont(). Consequently the BoundingBox has not been set and a warning will be issued when ps_findfont() is called. In order to prevent this situation, one should call ps_set_parameter() to set the BoundingBox before ps_findfont() is called.
</Desc>
    <FName>ps_get_buffer</FName>
    <Desc>string ps_get_buffer ( resource $psdoc )
This function is not implemented yet. It will always return an empty string. The idea for a later implementation is to write the contents of the postscript file into an internal buffer if in memory creation is requested, and retrieve the buffer content with this function. Currently, documents created in memory are send to the browser without buffering. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ps_get_parameter</FName>
    <Desc>string ps_get_parameter ( resource $psdoc , string $name [, float $modifier ] )
Gets several parameters which were directly set by ps_set_parameter() or indirectly by one of the other functions.
</Desc>
    <FName>ps_get_value</FName>
    <Desc>float ps_get_value ( resource $psdoc , string $name [, float $modifier ] )
Gets several values which were set by ps_set_value(). Values are by definition float values. 
The parameter name can have the following values. 
fontsize 
The size of the currently active font or the font whose identifier is passed in parameter modifier. 
font 
The currently active font itself. 
imagewidth 
The width of the image whose id is passed in the parameter modifier. 
imageheight 
The height of the image whose id is passed in the parameter modifier. 
capheight 
The height of a capital M in the currently active font or the font whose identifier is passed in parameter modifier. 
ascender 
The ascender of the currently active font or the font whose identifier is passed in parameter modifier. 
descender 
The descender of the currently active font or the font whose identifier is passed in parameter modifier. 
italicangle 
The italicangle of the currently active font or the font whose identifier is passed in parameter modifier. 
underlineposition 
The underlineposition of the currently active font or the font whose identifier is passed in parameter modifier. 
underlinethickness 
The underlinethickness of the currently active font or the font whose identifier is passed in parameter modifier. 
textx 
The current x-position for text output. 
texty 
The current y-position for text output. 
textrendering 
The current mode for text rendering. 
textrise 
The space by which text is risen above the base line. 
leading 
The distance between text lines in points. 
wordspacing 
The space between words as a multiple of the width of a space char. 
charspacing 
The space between chars. If charspacing is != 0.0 ligatures will always be dissolved. 
hyphenminchars 
Minimum number of chars hyphenated at the end of a word. 
parindent 
Indention of the first n line in a paragraph. 
numindentlines 
Number of line in a paragraph to indent if parindent != 0.0. 
parskip 
Distance between paragraphs. 
linenumberspace 
Overall space in front of each line for the line number. 
linenumbersep 
Space between the line and the line number. 
major 
The major version number of pslib. 
minor 
The minor version number of pslib. 
subminor, revision 
The subminor version number of pslib.
</Desc>
    <FName>ps_hyphenate</FName>
    <Desc>array ps_hyphenate ( resource $psdoc , string $text )
Hyphenates the passed word. ps_hyphenate() evaluates the value hyphenminchars (set by ps_set_value()) and the parameter hyphendict (set by ps_set_parameter()). hyphendict must be set before calling this function. 
This function requires the locale category LC_CTYPE to be set properly. This is done when the extension is initialized by using the environment variables. On Unix systems read the man page of locale for more information.
</Desc>
    <FName>ps_include_file</FName>
    <Desc>bool ps_include_file ( resource $psdoc , string $file )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ps_lineto</FName>
    <Desc>bool ps_lineto ( resource $psdoc , float $x , float $y )
Adds a straight line from the current point to the given coordinates to the current path. Use ps_moveto() to set the starting point of the line.
</Desc>
    <FName>ps_makespotcolor</FName>
    <Desc>int ps_makespotcolor ( resource $psdoc , string $name [, int $reserved = 0 ] )
Creates a spot color from the current fill color. The fill color must be defined in rgb, cmyk or gray colorspace. The spot color name can be an arbitrary name. A spot color can be set as any color with ps_setcolor(). When the document is not printed but displayed by an postscript viewer the given color in the specified color space is use.
</Desc>
    <FName>ps_moveto</FName>
    <Desc>bool ps_moveto ( resource $psdoc , float $x , float $y )
Sets the current point to new coordinates. If this is the first call of ps_moveto() after a previous path has been ended then it will start a new path. If this function is called in the middle of a path it will just set the current point and start a subpath.
</Desc>
    <FName>ps_new</FName>
    <Desc>resource ps_new ( void )
Creates a new document instance. It does not create the file on disk or in memory, it just sets up everything. ps_new() is usually followed by a call of ps_open_file() to actually create the postscript document.
</Desc>
    <FName>ps_open_file</FName>
    <Desc>bool ps_open_file ( resource $psdoc [, string $filename ] )
Creates a new file on disk and writes the PostScript document into it. The file will be closed when ps_close() is called.
</Desc>
    <FName>ps_open_image_file</FName>
    <Desc>int ps_open_image_file ( resource $psdoc , string $type , string $filename [, string $stringparam [, int $intparam = 0 ]] )
Loads an image for later use.
</Desc>
    <FName>ps_open_image</FName>
    <Desc>int ps_open_image ( resource $psdoc , string $type , string $source , string $data , int $lenght , int $width , int $height , int $components , int $bpc , string $params )
Reads an image which is already available in memory. The parameter source is currently not evaluated and assumed to be memory. The image data is a sequence of pixels starting in th upper left corner and ending in the lower right corner. Each pixel consists of components color components, and each component has bpc bits.
</Desc>
    <FName>ps_open_memory_image</FName>
    <Desc>int ps_open_memory_image ( resource $psdoc , int $gd )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ps_place_image</FName>
    <Desc>bool ps_place_image ( resource $psdoc , int $imageid , float $x , float $y , float $scale )
Places a formerly loaded image on the page. The image can be scaled. If the image shall be rotated as well, you will have to rotate the coordinate system before with ps_rotate().
</Desc>
    <FName>ps_rect</FName>
    <Desc>bool ps_rect ( resource $psdoc , float $x , float $y , float $width , float $height )
Draws a rectangle with its lower left corner at (x, y). The rectangle starts and ends in its lower left corner. If this function is called outside a path it will start a new path. If it is called within a path it will add the rectangle as a subpath. If the last drawing operation does not end in the lower left corner then there will be a gap in the path.
</Desc>
    <FName>ps_restore</FName>
    <Desc>bool ps_restore ( resource $psdoc )
Restores a previously saved graphics context. Any call of ps_save() must be accompanied by a call to ps_restore(). All coordinate transformations, line style settings, color settings, etc. are being restored to the state before the call of ps_save().
</Desc>
    <FName>ps_rotate</FName>
    <Desc>bool ps_rotate ( resource $psdoc , float $rot )
Sets the rotation of the coordinate system.
</Desc>
    <FName>ps_save</FName>
    <Desc>bool ps_save ( resource $psdoc )
Saves the current graphics context, containing colors, translation and rotation settings and some more. A saved context can be restored with ps_restore().
</Desc>
    <FName>ps_scale</FName>
    <Desc>bool ps_scale ( resource $psdoc , float $x , float $y )
Sets horizontal and vertical scaling of the coordinate system.
</Desc>
    <FName>ps_set_border_color</FName>
    <Desc>bool ps_set_border_color ( resource $psdoc , float $red , float $green , float $blue )
Links added with one of the functions ps_add_weblink(), ps_add_pdflink(), etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the color of the rectangle's border line.
</Desc>
    <FName>ps_set_border_dash</FName>
    <Desc>bool ps_set_border_dash ( resource $psdoc , float $black , float $white )
Links added with one of the functions ps_add_weblink(), ps_add_pdflink(), etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the length of the black and white portion of a dashed border line.
</Desc>
    <FName>ps_set_border_style</FName>
    <Desc>bool ps_set_border_style ( resource $psdoc , string $style , float $width )
Links added with one of the functions ps_add_weblink(), ps_add_pdflink(), etc. will be displayed with a surounded rectangle when the postscript document is converted to pdf and viewed in a pdf viewer. This rectangle is not visible in the postscript document. This function sets the appearance and width of the border line.
</Desc>
    <FName>ps_set_info</FName>
    <Desc>bool ps_set_info ( resource $p , string $key , string $val )
Sets certain information fields of the document. This fields will be shown as a comment in the header of the PostScript file. If the document is converted to pdf this fields will also be used for the document information. 
The BoundingBox is usually set to the value given to the first page. This only works if ps_findfont() has not been called before. In such cases the BoundingBox would be left unset unless you set it explicitly with this function. 
This function will have no effect anymore when the header of the postscript file has been already written. It must be called before the first page or the first call of ps_findfont().
</Desc>
    <FName>ps_set_parameter</FName>
    <Desc>bool ps_set_parameter ( resource $psdoc , string $name , string $value )
Sets several parameters which are used by many functions.
</Desc>
    <FName>ps_set_text_pos</FName>
    <Desc>bool ps_set_text_pos ( resource $psdoc , float $x , float $y )
Set the position for the next text output. You may alternatively set the x and y value separately by calling ps_set_value() and choosing textx respectively texty as the value name. 
If you want to output text at a certain position it is more convenient to use ps_show_xy() instead of setting the text position and calling ps_show().
</Desc>
    <FName>ps_set_value</FName>
    <Desc>bool ps_set_value ( resource $psdoc , string $name , float $value )
Sets several values which are used by many functions.
</Desc>
    <FName>ps_setcolor</FName>
    <Desc>bool ps_setcolor ( resource $psdoc , string $type , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 )
Sets the color for drawing, filling, or both.
</Desc>
    <FName>ps_setdash</FName>
    <Desc>bool ps_setdash ( resource $psdoc , float $on , float $off )
Sets the length of the black and white portions of a dashed line.
</Desc>
    <FName>ps_setflat</FName>
    <Desc>bool ps_setflat ( resource $psdoc , float $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ps_setfont</FName>
    <Desc>bool ps_setfont ( resource $psdoc , int $fontid , float $size )
Sets a font, which has to be loaded before with ps_findfont(). Outputting text without setting a font results in an error.
</Desc>
    <FName>ps_setgray</FName>
    <Desc>bool ps_setgray ( resource $psdoc , float $gray )
Sets the gray value for all following drawing operations.
</Desc>
    <FName>ps_setlinecap</FName>
    <Desc>bool ps_setlinecap ( resource $psdoc , int $type )
Sets how line ends look like.
</Desc>
    <FName>ps_setlinejoin</FName>
    <Desc>bool ps_setlinejoin ( resource $psdoc , int $type )
Sets how lines are joined.
</Desc>
    <FName>ps_setlinewidth</FName>
    <Desc>bool ps_setlinewidth ( resource $psdoc , float $width )
Sets the line width for all following drawing operations.
</Desc>
    <FName>ps_setmiterlimit</FName>
    <Desc>bool ps_setmiterlimit ( resource $psdoc , float $value )
If two lines join in a small angle and the line join is set to PS_LINEJOIN_MITER, then the resulting spike will be very long. The miter limit is the maximum ratio of the miter length (the length of the spike) and the line width.
</Desc>
    <FName>ps_setoverprintmode</FName>
    <Desc>bool ps_setoverprintmode ( resource $psdoc , int $mode )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ps_setpolydash</FName>
    <Desc>bool ps_setpolydash ( resource $psdoc , float $arr )
Sets the length of the black and white portions of a dashed line. ps_setpolydash() is used to set more complicated dash patterns.
</Desc>
    <FName>ps_shading_pattern</FName>
    <Desc>int ps_shading_pattern ( resource $psdoc , int $shadingid , string $optlist )
Creates a pattern based on a shading, which has to be created before with ps_shading(). Shading patterns can be used like regular patterns.
</Desc>
    <FName>ps_shading</FName>
    <Desc>int ps_shading ( resource $psdoc , string $type , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist )
Creates a shading, which can be used by ps_shfill() or ps_shading_pattern(). 
The color of the shading can be in any color space except for pattern.
</Desc>
    <FName>ps_shfill</FName>
    <Desc>bool ps_shfill ( resource $psdoc , int $shadingid )
Fills an area with a shading, which has to be created before with ps_shading(). This is an alternative way to creating a pattern from a shading ps_shading_pattern() and using the pattern as the filling color.
</Desc>
    <FName>ps_show_boxed</FName>
    <Desc>int ps_show_boxed ( resource $psdoc , string $text , float $left , float $bottom , float $width , float $height , string $hmode [, string $feature ] )
Outputs a text in a given box. The lower left corner of the box is at (left, bottom). Line breaks will be inserted where needed. Multiple spaces are treated as one. Tabulators are treated as spaces. 
The text will be hyphenated if the parameter hyphenation is set to TRUE and the parameter hyphendict contains a valid filename for a hyphenation file. The line spacing is taken from the value leading. Paragraphs can be separated by an empty line just like in TeX. If the value parindent is set to value > 0.0 then the first n lines will be indented. The number n of lines is set by the parameter numindentlines. In order to prevent indenting of the first m paragraphs set the value parindentskip to a positive number.
</Desc>
    <FName>ps_show_xy</FName>
    <Desc>bool ps_show_xy ( resource $psdoc , string $text , float $x , float $y )
Output a text at the given text position.
</Desc>
    <FName>ps_show_xy2</FName>
    <Desc>bool ps_show_xy2 ( resource $psdoc , string $text , int $len , float $xcoor , float $ycoor )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ps_show</FName>
    <Desc>bool ps_show ( resource $psdoc , string $text )
Output a text at the current text position. The text position can be set by storing the x and y coordinates into the values textx and texty with the function ps_set_value(). The function will issue an error if a font was not set before with ps_setfont(). 
ps_show() evaluates the following parameters and values as set by ps_set_parameter() and ps_set_value(). 
charspacing (value) 
Distance between two consecutive glyphs. If this value is unequal to zero then all ligatures will be resolved. Values less than zero are allowed. 
kerning (parameter) 
Setting this parameter to "false" will turn off kerning. Kerning is turned on by default. 
ligatures (parameter) 
Setting this parameter to "false" will turn off the use of ligatures. Ligatures are turned on by default. 
underline (parameter) 
Setting this parameter to "true" will turn on underlining. Underlining is turned off by default. 
overline (parameter) 
Setting this parameter to "true" will turn on overlining. Overlining is turned off by default. 
strikeout (parameter) 
Setting this parameter to "true" will turn on striking out. Striking out is turned off by default.
</Desc>
    <FName>ps_show2</FName>
    <Desc>bool ps_show2 ( resource $psdoc , string $text , int $len )
Output text at the current position. Do not print more than len characters.
</Desc>
    <FName>ps_string_geometry</FName>
    <Desc>array ps_string_geometry ( resource $psdoc , string $text [, int $fontid = 0 [, float $size = 0.0 ]] )
This function is similar to ps_stringwidth() but returns an array of dimensions containing the width, ascender, and descender of the text.
</Desc>
    <FName>ps_stringwidth</FName>
    <Desc>float ps_stringwidth ( resource $psdoc , string $text [, int $fontid = 0 [, float $size = 0.0 ]] )
Calculates the width of a string in points if it was output in the given font and font size. This function needs an Adobe font metrics file to calculate the precise width. If kerning is turned on, it will be taken into account.
</Desc>
    <FName>ps_stroke</FName>
    <Desc>bool ps_stroke ( resource $psdoc )
Draws the path constructed with previously called drawing functions like ps_lineto().
</Desc>
    <FName>ps_symbol_name</FName>
    <Desc>string ps_symbol_name ( resource $psdoc , int $ord [, int $fontid = 0 ] )
This function needs an Adobe font metrics file to know which glyphs are available.
</Desc>
    <FName>ps_symbol_width</FName>
    <Desc>float ps_symbol_width ( resource $psdoc , int $ord [, int $fontid = 0 [, float $size = 0.0 ]] )
Calculates the width of a glyph in points if it was output in the given font and font size. This function needs an Adobe font metrics file to calculate the precise width.
</Desc>
    <FName>ps_symbol</FName>
    <Desc>bool ps_symbol ( resource $psdoc , int $ord )
Output the glyph at position ord in the font encoding vector of the current font. The font encoding for a font can be set when loading the font with ps_findfont().
</Desc>
    <FName>ps_translate</FName>
    <Desc>bool ps_translate ( resource $psdoc , float $x , float $y )
Sets a new initial point of the coordinate system.
</Desc>
    <FName>pspell_add_to_personal</FName>
    <Desc>bool pspell_add_to_personal ( int $dictionary_link , string $word )
pspell_add_to_personal() adds a word to the personal wordlist. If you used pspell_new_config() with pspell_config_personal() to open the dictionary, you can save the wordlist later with pspell_save_wordlist().
</Desc>
    <FName>pspell_add_to_session</FName>
    <Desc>bool pspell_add_to_session ( int $dictionary_link , string $word )
pspell_add_to_session() adds a word to the wordlist associated with the current session. It is very similar to pspell_add_to_personal()
</Desc>
    <FName>pspell_check</FName>
    <Desc>bool pspell_check ( int $dictionary_link , string $word )
pspell_check() checks the spelling of a word.
</Desc>
    <FName>pspell_clear_session</FName>
    <Desc>bool pspell_clear_session ( int $dictionary_link )
pspell_clear_session() clears the current session. The current wordlist becomes blank, and, for example, if you try to save it with pspell_save_wordlist(), nothing happens.
</Desc>
    <FName>pspell_config_create</FName>
    <Desc>int pspell_config_create ( string $language [, string $spelling [, string $jargon [, string $encoding ]]] )
Create a config used to open a dictionary. 
pspell_config_create() has a very similar syntax to pspell_new(). In fact, using pspell_config_create() immediately followed by pspell_new_config() will produce the exact same result. However, after creating a new config, you can also use pspell_config_*() functions before calling pspell_new_config() to take advantage of some advanced functionality. 
For more information and examples, check out inline manual pspell website:» http://aspell.net/.
</Desc>
    <FName>pspell_config_data_dir</FName>
    <Desc>bool pspell_config_data_dir ( int $conf , string $directory )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>pspell_config_dict_dir</FName>
    <Desc>bool pspell_config_dict_dir ( int $conf , string $directory )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>pspell_config_ignore</FName>
    <Desc>bool pspell_config_ignore ( int $dictionary_link , int $n )
pspell_config_ignore() should be used on a config before calling pspell_new_config(). This function allows short words to be skipped by the spell checker.
</Desc>
    <FName>pspell_config_mode</FName>
    <Desc>bool pspell_config_mode ( int $dictionary_link , int $mode )
pspell_config_mode() should be used on a config before calling pspell_new_config(). This function determines how many suggestions will be returned by pspell_suggest().
</Desc>
    <FName>pspell_config_personal</FName>
    <Desc>bool pspell_config_personal ( int $dictionary_link , string $file )
Set a file that contains personal wordlist. The personal wordlist will be loaded and used in addition to the standard one after you call pspell_new_config(). The file is also the file where pspell_save_wordlist() will save personal wordlist to. 
pspell_config_personal() should be used on a config before calling pspell_new_config().
</Desc>
    <FName>pspell_config_repl</FName>
    <Desc>bool pspell_config_repl ( int $dictionary_link , string $file )
Set a file that contains replacement pairs. 
The replacement pairs improve the quality of the spellchecker. When a word is misspelled, and a proper suggestion was not found in the list, pspell_store_replacement() can be used to store a replacement pair and then pspell_save_wordlist() to save the wordlist along with the replacement pairs. 
pspell_config_repl() should be used on a config before calling pspell_new_config().
</Desc>
    <FName>pspell_config_runtogether</FName>
    <Desc>bool pspell_config_runtogether ( int $dictionary_link , bool $flag )
This function determines whether run-together words will be treated as legal compounds. That is, "thecat" will be a legal compound, although there should be a space between the two words. Changing this setting only affects the results returned by pspell_check(); pspell_suggest() will still return suggestions. 
pspell_config_runtogether() should be used on a config before calling pspell_new_config().
</Desc>
    <FName>pspell_config_save_repl</FName>
    <Desc>bool pspell_config_save_repl ( int $dictionary_link , bool $flag )
pspell_config_save_repl() determines whether pspell_save_wordlist() will save the replacement pairs along with the wordlist. Usually there is no need to use this function because if pspell_config_repl() is used, the replacement pairs will be saved by pspell_save_wordlist() anyway, and if it is not, the replacement pairs will not be saved. 
pspell_config_save_repl() should be used on a config before calling pspell_new_config().
</Desc>
    <FName>pspell_new_config</FName>
    <Desc>int pspell_new_config ( int $config )
pspell_new_config() opens up a new dictionary with settings specified in a config, created with pspell_config_create() and modified with pspell_config_*() functions. This method provides you with the most flexibility and has all the functionality provided by pspell_new() and pspell_new_personal().
</Desc>
    <FName>pspell_new_personal</FName>
    <Desc>int pspell_new_personal ( string $personal , string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0 ]]]] )
pspell_new_personal() opens up a new dictionary with a personal wordlist. The wordlist can be modified and saved with pspell_save_wordlist(), if desired. However, the replacement pairs are not saved. In order to save replacement pairs, you should create a config using pspell_config_create(), set the personal wordlist file with pspell_config_personal(), set the file for replacement pairs with pspell_config_repl(), and open a new dictionary with pspell_new_config(). 
For more information and examples, check out inline manual pspell website:» http://aspell.net/.
</Desc>
    <FName>pspell_new</FName>
    <Desc>int pspell_new ( string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0 ]]]] )
pspell_new() opens up a new dictionary and returns the dictionary link identifier for use in other pspell functions. 
For more information and examples, check out inline manual pspell website:» http://aspell.net/.
</Desc>
    <FName>pspell_save_wordlist</FName>
    <Desc>bool pspell_save_wordlist ( int $dictionary_link )
pspell_save_wordlist() saves the personal wordlist from the current session. The location of files to be saved specified with pspell_config_personal() and (optionally) pspell_config_repl().
</Desc>
    <FName>pspell_store_replacement</FName>
    <Desc>bool pspell_store_replacement ( int $dictionary_link , string $misspelled , string $correct )
pspell_store_replacement() stores a replacement pair for a word, so that replacement can be returned by pspell_suggest() later. In order to be able to take advantage of this function, you have to use pspell_new_personal() to open the dictionary. In order to permanently save the replacement pair, you have to use pspell_config_personal() and pspell_config_repl() to set the path where to save your custom wordlists, and then use pspell_save_wordlist() for the changes to be written to disk.
</Desc>
    <FName>pspell_suggest</FName>
    <Desc>array pspell_suggest ( int $dictionary_link , string $word )
pspell_suggest() returns an array of possible spellings for the given word.
</Desc>
    <FName>putenv</FName>
    <Desc>bool putenv ( string $setting )
Adds setting to the server environment. The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state. 
Setting certain environment variables may be a potential security breach. The safe_mode_allowed_env_vars directive contains a comma-delimited list of prefixes. In Safe Mode, the user may only alter environment variables whose names begin with the prefixes supplied by this directive. By default, users will only be able to set environment variables that begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive is empty, PHP will let the user modify ANY environment variable! 
The safe_mode_protected_env_vars directive contains a comma-delimited list of environment variables, that the end user won't be able to change using putenv(). These variables will be protected even if safe_mode_allowed_env_vars is set to allow to change them.
</Desc>
    <FName>px_close</FName>
    <Desc>bool px_close ( resource $pxdoc )
Closes the paradox database. This function will not close the file. You will have to call fclose() afterwards.
</Desc>
    <FName>px_create_fp</FName>
    <Desc>bool px_create_fp ( resource $pxdoc , resource $file , array $fielddesc )
Create a new paradox database file. The actual file has to be opened before with fopen(). Make sure the file is writable. 
Note: 
Calling this functions issues a warning about an empty tablename which can be safely ignored. Just set the tablename afterwards with px_set_parameter().
Note: 
This function is highly experimental, due to insufficient documentation of the paradox file format. Database files created with this function can be opened by px_open_fp() and has been successfully opened by the Paradox software, but your milage may vary.
</Desc>
    <FName>px_date2string</FName>
    <Desc>string px_date2string ( resource $pxdoc , int $value , string $format )
Turns a date as it stored in the paradox file into human readable format. Paradox dates are the number of days since 1.1.0000. This function is just for convenience. It can be easily replaced by some math and the calendar functions as demonstrated in the example below.
</Desc>
    <FName>px_delete_record</FName>
    <Desc>bool px_delete_record ( resource $pxdoc , int $num )
This function deletes a record from the database. It does not free the space in the database file but just marks it as deleted. Inserting a new record afterwards will reuse the space. 
Note: 
This function is only available if pxlib >= 0.6.0 is used.
</Desc>
    <FName>px_delete</FName>
    <Desc>bool px_delete ( resource $pxdoc )
Deletes the resource of the paradox file and frees all memory.
</Desc>
    <FName>px_get_field</FName>
    <Desc>array px_get_field ( resource $pxdoc , int $fieldno )
</Desc>
    <FName>px_get_info</FName>
    <Desc>array px_get_info ( resource $pxdoc )
</Desc>
    <FName>px_get_parameter</FName>
    <Desc>string px_get_parameter ( resource $pxdoc , string $name )
Gets various parameters.
</Desc>
    <FName>px_get_record</FName>
    <Desc>array px_get_record ( resource $pxdoc , int $num [, int $mode = 0 ] )
</Desc>
    <FName>px_get_schema</FName>
    <Desc>array px_get_schema ( resource $pxdoc [, int $mode = 0 ] )
px_get_schema() returns the database schema.
</Desc>
    <FName>px_get_value</FName>
    <Desc>float px_get_value ( resource $pxdoc , string $name )
Gets various values.
</Desc>
    <FName>px_insert_record</FName>
    <Desc>int px_insert_record ( resource $pxdoc , array $data )
Inserts a new record into the database. The record is not necessarily inserted at the end of the database, but may be inserted at any position depending on where the first free slot is found. 
The record data is passed as an array of field values. The elements in the array must correspond to the fields in the database. If the array has less elements than fields in the database, the remaining fields will be set to null. 
Most field values can be passed as its equivalent php type e.g. a long value is used for fields of type PX_FIELD_LONG, PX_FIELD_SHORT and PX_FIELD_AUTOINC, a double values is used for fields of type PX_FIELD_CURRENCY and PX_FIELD_NUMBER. Field values for blob and alpha fields are passed as strings. 
Fields of type PX_FIELD_TIME and PX_FIELD_DATE both require a long value. In the first case this is the number of milliseconds since midnight. In the second case this is the number of days since 1.1.0000. Below there are two examples to convert the current date or timestamp into a value suitable for one of paradox's date/time fields. 
Note: 
This function is only available if pxlib >= 0.6.0 is used.
</Desc>
    <FName>px_new</FName>
    <Desc>resource px_new ( void )
Create a new paradox object. You will have to call this function before any further functions. px_new() does not create any file on the disk, it just creates an instance of a paradox object. This function must not be called if the object oriented interface is used. Use new paradox_db() instead.
</Desc>
    <FName>px_numfields</FName>
    <Desc>int px_numfields ( resource $pxdoc )
Get the number of fields in a database file.
</Desc>
    <FName>px_numrecords</FName>
    <Desc>int px_numrecords ( resource $pxdoc )
Get the number of records in a database file.
</Desc>
    <FName>px_open_fp</FName>
    <Desc>bool px_open_fp ( resource $pxdoc , resource $file )
Open an existing paradox database file. The actual file has to be opened before with fopen(). This function can also be used to open primary index files and tread them like a paradox database. This is supported for those who would like to investigate a primary index. It cannot be used to accelerate access to a database file.
</Desc>
    <FName>px_put_record</FName>
    <Desc>bool px_put_record ( resource $pxdoc , array $record [, int $recpos = -1 ] )
Stores a record into a paradox database. The record is always added at the end of the database, regardless of any free slots. Use px_insert_record() to add a new record into the first free slot found in the database.
</Desc>
    <FName>px_retrieve_record</FName>
    <Desc>array px_retrieve_record ( resource $pxdoc , int $num [, int $mode = 0 ] )
This function is very similar to px_get_record() but uses internally a different approach to retrieve the data. It relies on pxlib for reading each single field value, which usually results in support for more field types. 
Note: 
This function is only available if pxlib >= 0.6.0 is used.
</Desc>
    <FName>px_set_blob_file</FName>
    <Desc>bool px_set_blob_file ( resource $pxdoc , string $filename )
Sets the name of the file where blobs are going to be read from or written into. Without calling this function, px_get_record() or px_retrieve_record() will only return data in blob fields if the data is part of the record and not stored in the blob file. Blob data is stored in the record if it is small enough to fit in the size of the blob field.
Calling px_put_record(), px_insert_record(), or px_update_record() without calling px_set_blob_file() will result in truncated blob fields unless the data fits into the database file. 
Calling this function twice will close the first blob file and open the new one.
</Desc>
    <FName>px_set_parameter</FName>
    <Desc>bool px_set_parameter ( resource $pxdoc , string $name , string $value )
Sets various parameters.
</Desc>
    <FName>px_set_tablename</FName>
    <Desc>void px_set_tablename ( resource $pxdoc , string $name )
Sets the table name of a paradox database, which was created with px_create_fp(). This function is deprecated use px_set_parameter() instead.
</Desc>
    <FName>px_set_targetencoding</FName>
    <Desc>bool px_set_targetencoding ( resource $pxdoc , string $encoding )
Set the encoding for data retrieved from a character field. All character fields will be recoded to the encoding set by this function. If the encoding is not set, the character data will be returned in the DOS code page encoding as specified in the database file. The encoding can be any string identifier known to iconv or recode. On Unix systems run iconv -l for a list of available encodings. 
This function is deprecated and should be replaced by calling px_set_parameter(). 
See also px_get_info() to determine the DOS code page as stored in the database file.
</Desc>
    <FName>px_set_value</FName>
    <Desc>bool px_set_value ( resource $pxdoc , string $name , float $value )
Sets various values.
</Desc>
    <FName>px_timestamp2string</FName>
    <Desc>string px_timestamp2string ( resource $pxdoc , float $value , string $format )
Turns a timestamp as it stored in the paradox file into human readable format. Paradox timestamps are the number of miliseconds since 0001-01-02. This function is just for convenience. It can be easily replaced by some math and the calendar functions as demonstrated in the following example.
</Desc>
    <FName>px_update_record</FName>
    <Desc>bool px_update_record ( resource $pxdoc , array $data , int $num )
Updates an exiting record in the database. The record starts at 0. 
The record data is passed as an array of field values. The elements in the array must correspond to the fields in the database. If the array has less elements than fields in the database, the remaining fields will be set to null. 
Note: 
This function is only available if pxlib >= 0.6.0 is used.
</Desc>
    <FName>quoted_printable_decode</FName>
    <Desc>string quoted_printable_decode ( string $str )
This function returns an 8-bit binary string corresponding to the decoded quoted printable string (according to » RFC2045, section 6.7, not » RFC2821, section 4.5.2, so additional periods are not stripped from the beginning of line). 
This function is similar to imap_qprint(), except this one does not require the IMAP module to work.
</Desc>
    <FName>quoted_printable_encode</FName>
    <Desc>string quoted_printable_encode ( string $str )
Returns a quoted printable string created according to » RFC2045, section 6.7. 
This function is similar to imap_8bit(), except this one does not require the IMAP module to work.
</Desc>
    <FName>quotemeta</FName>
    <Desc>string quotemeta ( string $str )
Returns a version of str with a backslash character (\) before every character that is among these: 
. \ + * ? [ ^ ] ( $ )
</Desc>
    <FName>rad2deg</FName>
    <Desc>float rad2deg ( float $number )
This function converts number from radian to degrees.
</Desc>
    <FName>radius_acct_open</FName>
    <Desc>resource radius_acct_open ( void )
</Desc>
    <FName>radius_add_server</FName>
    <Desc>bool radius_add_server ( resource $radius_handle , string $hostname , int $port , string $secret , int $timeout , int $max_tries )
radius_add_server() may be called multiple times, and it may be used together with radius_config(). At most 10 servers may be specified. When multiple servers are given, they are tried in round-robin fashion until a valid response is received, or until each server's max_tries limit has been reached.
</Desc>
    <FName>radius_auth_open</FName>
    <Desc>resource radius_auth_open ( void )
</Desc>
    <FName>radius_close</FName>
    <Desc>bool radius_close ( resource $radius_handle )
It is not needed to call this function because php frees all resources at the end of each request.
</Desc>
    <FName>radius_config</FName>
    <Desc>bool radius_config ( resource $radius_handle , string $file )
Before issuing any Radius requests, the library must be made aware of the servers it can contact. The easiest way to configure the library is to call radius_config(). radius_config() causes the library to read a configuration file whose format is described in » radius.conf.
</Desc>
    <FName>radius_create_request</FName>
    <Desc>bool radius_create_request ( resource $radius_handle , int $type )
A Radius request consists of a code specifying the kind of request, and zero or more attributes which provide additional information. To begin constructing a new request, call radius_create_request(). 
Note: Attention: You must call this function, before you can put any attribute!
</Desc>
    <FName>radius_cvt_addr</FName>
    <Desc>string radius_cvt_addr ( string $data )
</Desc>
    <FName>radius_cvt_int</FName>
    <Desc>int radius_cvt_int ( string $data )
</Desc>
    <FName>radius_cvt_string</FName>
    <Desc>string radius_cvt_string ( string $data )
</Desc>
    <FName>radius_demangle_mppe_key</FName>
    <Desc>string radius_demangle_mppe_key ( resource $radius_handle , string $mangled )
When using MPPE with MS-CHAPv2, the send- and recv-keys are mangled (see » RFC 2548), however this function is useless, because I don't think that there is or will be a PPTP-MPPE implementation in PHP.
</Desc>
    <FName>radius_demangle</FName>
    <Desc>string radius_demangle ( resource $radius_handle , string $mangled )
Some data (Passwords, MS-CHAPv1 MPPE-Keys) is mangled for security reasons, and must be demangled before you can use them.
</Desc>
    <FName>radius_get_attr</FName>
    <Desc>mixed radius_get_attr ( resource $radius_handle )
Like Radius requests, each response may contain zero or more attributes. After a response has been received successfully by radius_send_request(), its attributes can be extracted one by one using radius_get_attr(). Each time radius_get_attr() is called, it gets the next attribute from the current response.
</Desc>
    <FName>radius_get_tagged_attr_data</FName>
    <Desc>string radius_get_tagged_attr_data ( string $data )
If a tagged attribute has been returned from radius_get_attr(), radius_get_tagged_attr_data() will return the data from the attribute.
</Desc>
    <FName>radius_get_tagged_attr_tag</FName>
    <Desc>int radius_get_tagged_attr_tag ( string $data )
If a tagged attribute has been returned from radius_get_attr(), radius_get_tagged_attr_data() will return the tag from the attribute.
</Desc>
    <FName>radius_get_vendor_attr</FName>
    <Desc>array radius_get_vendor_attr ( string $data )
If radius_get_attr() returns RADIUS_VENDOR_SPECIFIC, radius_get_vendor_attr() may be called to determine the vendor.
</Desc>
    <FName>radius_put_addr</FName>
    <Desc>bool radius_put_addr ( resource $radius_handle , int $type , string $addr [, int $options = 0 [, int $tag ]] )
Attaches an IP address attribute to the current RADIUS request. 
Note: 
A request must be created via radius_create_request() before this function can be called.
</Desc>
    <FName>radius_put_attr</FName>
    <Desc>bool radius_put_attr ( resource $radius_handle , int $type , string $value [, int $options = 0 [, int $tag ]] )
Attaches a binary attribute to the current RADIUS request. 
Note: 
A request must be created via radius_create_request() before this function can be called.
</Desc>
    <FName>radius_put_int</FName>
    <Desc>bool radius_put_int ( resource $radius_handle , int $type , int $value [, int $options = 0 [, int $tag ]] )
Attaches an integer attribute to the current RADIUS request. 
Note: 
A request must be created via radius_create_request() before this function can be called.
</Desc>
    <FName>radius_put_string</FName>
    <Desc>bool radius_put_string ( resource $radius_handle , int $type , string $value [, int $options = 0 [, int $tag ]] )
Attaches a string attribute to the current RADIUS request. In general, radius_put_attr() is a more useful function for attaching string attributes, as it is binary safe. 
Note: 
A request must be created via radius_create_request() before this function can be called.
</Desc>
    <FName>radius_put_vendor_addr</FName>
    <Desc>bool radius_put_vendor_addr ( resource $radius_handle , int $vendor , int $type , string $addr )
Attaches an IP address vendor specific attribute to the current RADIUS request. 
Note: 
A request must be created via radius_create_request() before this function can be called.
</Desc>
    <FName>radius_put_vendor_attr</FName>
    <Desc>bool radius_put_vendor_attr ( resource $radius_handle , int $vendor , int $type , string $value [, int $options = 0 [, int $tag ]] )
Attaches a vendor specific binary attribute to the current RADIUS request. 
Note: 
A request must be created via radius_create_request() before this function can be called.
</Desc>
    <FName>radius_put_vendor_int</FName>
    <Desc>bool radius_put_vendor_int ( resource $radius_handle , int $vendor , int $type , int $value [, int $options = 0 [, int $tag ]] )
Attaches a vendor specific integer attribute to the current RADIUS request. 
Note: 
A request must be created via radius_create_request() before this function can be called.
</Desc>
    <FName>radius_put_vendor_string</FName>
    <Desc>bool radius_put_vendor_string ( resource $radius_handle , int $vendor , int $type , string $value [, int $options = 0 [, int $tag ]] )
Attaches a vendor specific string attribute to the current RADIUS request. In general, radius_put_vendor_attr() is a more useful function for attaching string attributes, as it is binary safe. 
Note: 
A request must be created via radius_create_request() before this function can be called.
</Desc>
    <FName>radius_request_authenticator</FName>
    <Desc>string radius_request_authenticator ( resource $radius_handle )
The request authenticator is needed for demangling mangled data like passwords and encryption-keys.
</Desc>
    <FName>radius_salt_encrypt_attr</FName>
    <Desc>string radius_salt_encrypt_attr ( resource $radius_handle , string $data )
Applies the RADIUS salt-encryption algorithm to the given value. 
In general, this is achieved automatically by providing the RADIUS_OPTION_SALT option to an attribute setter function, but this function can be used if low-level request construction is required.
</Desc>
    <FName>radius_send_request</FName>
    <Desc>int radius_send_request ( resource $radius_handle )
After the Radius request has been constructed, it is sent by radius_send_request(). 
The radius_send_request() function sends the request and waits for a valid reply, retrying the defined servers in round-robin fashion as necessary.
</Desc>
    <FName>radius_server_secret</FName>
    <Desc>string radius_server_secret ( resource $radius_handle )
The shared secret is needed as salt for demangling mangled data like passwords and encryption-keys.
</Desc>
    <FName>radius_strerror</FName>
    <Desc>string radius_strerror ( resource $radius_handle )
If Radius-functions fail then they record an error message. This error message can be retrieved with this function.
</Desc>
    <FName>rand</FName>
    <Desc>int rand ( void )
int rand ( int $min , int $max )
If called without the optional min, max arguments rand() returns a pseudo-random integer between 0 and getrandmax(). If you want a random number between 5 and 15 (inclusive), for example, use rand(5, 15). 
Caution
This function does not generate cryptographically secure values, and should not be used for cryptographic purposes. If you need a cryptographically secure value, consider using random_int(), random_bytes(), or openssl_random_pseudo_bytes() instead.
Note: On some platforms (such as Windows), getrandmax() is only 32767. If you require a range larger than 32767, specifying min and max will allow you to create a range larger than this, or consider using mt_rand() instead. 
Note: As of PHP 7.1.0, rand() uses the same random number generator as mt_rand(). To preserve backwards compatibility rand() allows max to be smaller than min as opposed to returning FALSE as mt_rand().
</Desc>
    <FName>random_bytes</FName>
    <Desc>string random_bytes ( int $length )
Generates an arbitrary length string of cryptographic random bytes that are suitable for cryptographic use, such as when generating salts, keys or initialization vectors. 
The sources of randomness used for this function are as follows: 
On Windows, » CryptGenRandom() will always be used. 
On Linux, the » getrandom(2) syscall will be used if available. 
On other platforms, /dev/urandom will be used. 
If none of the aforementioned sources are available, then an Exception will be thrown. 
Note: Although this function was added to PHP in PHP 7.0, a » userland implementation is available for PHP 5.2 to 5.6, inclusive.
</Desc>
    <FName>random_int</FName>
    <Desc>int random_int ( int $min , int $max )
Generates cryptographic random integers that are suitable for use where unbiased results are critical, such as when shuffling a deck of cards for a poker game. 
The sources of randomness used for this function are as follows: 
On Windows, » CryptGenRandom() will always be used. 
On Linux, the » getrandom(2) syscall will be used if available. 
On other platforms, /dev/urandom will be used. 
If none of the aforementioned sources are available, then an Exception will be thrown. 
Note: Although this function was added to PHP in PHP 7.0, a » userland implementation is available for PHP 5.2 to 5.6, inclusive.
</Desc>
    <FName>range</FName>
    <Desc>array range ( mixed $start , mixed $end [, number $step = 1 ] )
Create an array containing a range of elements.
</Desc>
    <FName>rar_wrapper_cache_stats</FName>
    <Desc>string rar_wrapper_cache_stats ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>rawurldecode</FName>
    <Desc>string rawurldecode ( string $str )
Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters.
</Desc>
    <FName>rawurlencode</FName>
    <Desc>string rawurlencode ( string $str )
Encodes the given string according to » RFC 3986.
</Desc>
    <FName>read_exif_data</FName>
    <Desc>This function is an alias of: exif_read_data(). 
Changelog
VersionDescription
7.2.0This function alias was deprecated. 
</Desc>
    <FName>readdir</FName>
    <Desc>string readdir ([ resource $dir_handle ] )
Returns the name of the next entry in the directory. The entries are returned in the order in which they are stored by the filesystem.
</Desc>
    <FName>readfile</FName>
    <Desc>int readfile ( string $filename [, bool $use_include_path = FALSE [, resource $context ]] )
Reads a file and writes it to the output buffer.
</Desc>
    <FName>readgzfile</FName>
    <Desc>int readgzfile ( string $filename [, int $use_include_path = 0 ] )
Reads a file, decompresses it and writes it to standard output. 
readgzfile() can be used to read a file which is not in gzip format; in this case readgzfile() will directly read from the file without decompression.
</Desc>
    <FName>readline_add_history</FName>
    <Desc>bool readline_add_history ( string $line )
This function adds a line to the command line history.
</Desc>
    <FName>readline_callback_handler_install</FName>
    <Desc>bool readline_callback_handler_install ( string $prompt , callable $callback )
Sets up a readline callback interface then prints prompt and immediately returns. Calling this function twice without removing the previous callback interface will automatically and conveniently overwrite the old interface. 
The callback feature is useful when combined with stream_select() as it allows interleaving of IO and user input, unlike readline().
</Desc>
    <FName>readline_callback_handler_remove</FName>
    <Desc>bool readline_callback_handler_remove ( void )
Removes a previously installed callback handler and restores terminal settings.
</Desc>
    <FName>readline_callback_read_char</FName>
    <Desc>void readline_callback_read_char ( void )
Reads a character of user input. When a line is received, this function informs the readline callback interface installed using readline_callback_handler_install() that a line is ready for input.
</Desc>
    <FName>readline_clear_history</FName>
    <Desc>bool readline_clear_history ( void )
This function clears the entire command line history.
</Desc>
    <FName>readline_completion_function</FName>
    <Desc>bool readline_completion_function ( callable $function )
This function registers a completion function. This is the same kind of functionality you'd get if you hit your tab key while using Bash.
</Desc>
    <FName>readline_info</FName>
    <Desc>mixed readline_info ([ string $varname [, string $newvalue ]] )
Gets or sets various internal readline variables.
</Desc>
    <FName>readline_list_history</FName>
    <Desc>array readline_list_history ( void )
Gets the entire command line history.
</Desc>
    <FName>readline_on_new_line</FName>
    <Desc>void readline_on_new_line ( void )
Tells readline that the cursor has moved to a new line.
</Desc>
    <FName>readline_read_history</FName>
    <Desc>bool readline_read_history ([ string $filename ] )
This function reads a command history from a file.
</Desc>
    <FName>readline_redisplay</FName>
    <Desc>void readline_redisplay ( void )
Redraws readline to redraw the display.
</Desc>
    <FName>readline_write_history</FName>
    <Desc>bool readline_write_history ([ string $filename ] )
This function writes the command history to a file.
</Desc>
    <FName>readline</FName>
    <Desc>string readline ([ string $prompt ] )
Reads a single line from the user. You must add this line to the history yourself using readline_add_history().
</Desc>
    <FName>readlink</FName>
    <Desc>string readlink ( string $path )
readlink() does the same as the readlink C function.
</Desc>
    <FName>realpath_cache_get</FName>
    <Desc>array realpath_cache_get ( void )
Get the contents of the realpath cache.
</Desc>
    <FName>realpath_cache_size</FName>
    <Desc>int realpath_cache_size ( void )
Get the amount of memory used by the realpath cache.
</Desc>
    <FName>realpath</FName>
    <Desc>string realpath ( string $path )
realpath() expands all symbolic links and resolves references to /./, /../ and extra / characters in the input path and returns the canonicalized absolute pathname.
</Desc>
    <FName>recode_file</FName>
    <Desc>bool recode_file ( string $request , resource $input , resource $output )
Recode the file referenced by file handle input into the file referenced by file handle output according to the recode request.
</Desc>
    <FName>recode_string</FName>
    <Desc>string recode_string ( string $request , string $string )
Recode the string string according to the recode request request.
</Desc>
    <FName>recode</FName>
    <Desc>This function is an alias of: recode_string(). 
</Desc>
    <FName>register_shutdown_function</FName>
    <Desc>void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] )
Registers a callback to be executed after script execution finishes or exit() is called. 
Multiple calls to register_shutdown_function() can be made, and each will be called in the same order as they were registered. If you call exit() within one registered shutdown function, processing will stop completely and no other registered shutdown functions will be called.
</Desc>
    <FName>register_tick_function</FName>
    <Desc>bool register_tick_function ( callable $function [, mixed $arg [, mixed $... ]] )
Registers the given function to be executed when a tick is called.
</Desc>
    <FName>rename_function</FName>
    <Desc>bool rename_function ( string $original_name , string $new_name )
Renames a orig_name to new_name in the global function table. Useful for temporarily overriding built-in functions.
</Desc>
    <FName>rename</FName>
    <Desc>bool rename ( string $oldname , string $newname [, resource $context ] )
Attempts to rename oldname to newname, moving it between directories if necessary. If renaming a file and newname exists, it will be overwritten. If renaming a directory and newname exists, this function will emit a warning.
</Desc>
    <FName>reset</FName>
    <Desc>mixed reset ( array &$array )
reset() rewinds array's internal pointer to the first element and returns the value of the first array element.
</Desc>
    <FName>restore_error_handler</FName>
    <Desc>bool restore_error_handler ( void )
Used after changing the error handler function using set_error_handler(), to revert to the previous error handler (which could be the built-in or a user defined function).
</Desc>
    <FName>restore_exception_handler</FName>
    <Desc>bool restore_exception_handler ( void )
Used after changing the exception handler function using set_exception_handler(), to revert to the previous exception handler (which could be the built-in or a user defined function).
</Desc>
    <FName>restore_include_path</FName>
    <Desc>void restore_include_path ( void )
Restores the include_path configuration option back to its original master value as set in php.ini
</Desc>
    <FName>rewind</FName>
    <Desc>bool rewind ( resource $handle )
Sets the file position indicator for handle to the beginning of the file stream. 
Note: 
If you have opened the file in append ("a" or "a+") mode, any data you write to the file will always be appended, regardless of the file pointer position.
</Desc>
    <FName>rewinddir</FName>
    <Desc>void rewinddir ([ resource $dir_handle ] )
Resets the directory stream indicated by dir_handle to the beginning of the directory.
</Desc>
    <FName>rmdir</FName>
    <Desc>bool rmdir ( string $dirname [, resource $context ] )
Attempts to remove the directory named by dirname. The directory must be empty, and the relevant permissions must permit this. A E_WARNING level error will be generated on failure.
</Desc>
    <FName>round</FName>
    <Desc>float round ( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] )
Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default). 
Note: PHP doesn't handle strings like "12,300.2" correctly by default. See converting from strings.
</Desc>
    <FName>rpm_close</FName>
    <Desc>bool rpm_close ( resource $rpmr )
rpm_close() will close an RPM file pointer.
</Desc>
    <FName>rpm_get_tag</FName>
    <Desc>mixed rpm_get_tag ( resource $rpmr , int $tagnum )
rpm_get_tag() will retrieve a given tag from the RPM file's header and return it.
</Desc>
    <FName>rpm_is_valid</FName>
    <Desc>bool rpm_is_valid ( string $filename )
rpm_is_valid() will test an RPM file for validity as an RPM file. This is not the same as rpm_open() as it only checks the file for validity but does not return a file pointer to be used by further functions.
</Desc>
    <FName>rpm_open</FName>
    <Desc>resource rpm_open ( string $filename )
rpm_open() will open an RPM file and will determine if the file is a valid RPM file.
</Desc>
    <FName>rpm_version</FName>
    <Desc>string rpm_version ( void )
rpm_version() will return the current version of the rpmreader extension.
</Desc>
    <FName>rrd_create</FName>
    <Desc>bool rrd_create ( string $filename , array $options )
Creates the rdd database file.
</Desc>
    <FName>rrd_error</FName>
    <Desc>string rrd_error ( void )
Returns latest global rrd error message.
</Desc>
    <FName>rrd_fetch</FName>
    <Desc>array rrd_fetch ( string $filename , array $options )
Gets data for graph output from RRD database file as array. This function has same result as rrd_graph(), but fetched data are returned as array, no image file is created.
</Desc>
    <FName>rrd_first</FName>
    <Desc>int rrd_first ( string $file [, int $raaindex = 0 ] )
Returns the first data sample from the specified RRA of the RRD file.
</Desc>
    <FName>rrd_graph</FName>
    <Desc>array rrd_graph ( string $filename , array $options )
Creates image for a particular data from RRD file.
</Desc>
    <FName>rrd_info</FName>
    <Desc>array rrd_info ( string $filename )
Returns information about particular RRD database file.
</Desc>
    <FName>rrd_last</FName>
    <Desc>int rrd_last ( string $filename )
Returns the UNIX timestamp of the most recent update of the RRD database.
</Desc>
    <FName>rrd_lastupdate</FName>
    <Desc>array rrd_lastupdate ( string $filename )
Gets array of the UNIX timestamp and the values stored for each date in the most recent update of the RRD database file.
</Desc>
    <FName>rrd_restore</FName>
    <Desc>bool rrd_restore ( string $xml_file , string $rrd_file [, array $options ] )
Restores the RRD file from the XML dump.
</Desc>
    <FName>rrd_tune</FName>
    <Desc>bool rrd_tune ( string $filename , array $options )
Change some options in the RRD dabase header file. E.g. renames the source for the data etc.
</Desc>
    <FName>rrd_update</FName>
    <Desc>bool rrd_update ( string $filename , array $options )
Updates the RRD database file. The input data is time interpolated according to the properties of the RRD database file.
</Desc>
    <FName>rrd_version</FName>
    <Desc>string rrd_version ( void )
Returns information about underlying rrdtool library.
</Desc>
    <FName>rrd_xport</FName>
    <Desc>array rrd_xport ( array $options )
Exports the information about RRD database file. This data can be converted to XML file via user space PHP script and then restored back as RRD database file.
</Desc>
    <FName>rrdc_disconnect</FName>
    <Desc>void rrdc_disconnect ( void )
Close any outstanding connection to rrd caching daemon. 
This function is automatically called when the whole PHP process is terminated. It depends on used SAPI. For example, it's called automatically at the end of command line script. 
It's up user whether he wants to call this function at the end of every request or otherwise.
</Desc>
    <FName>rsort</FName>
    <Desc>bool rsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )
This function sorts an array in reverse order (highest to lowest). 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined.
</Desc>
    <FName>rtrim</FName>
    <Desc>string rtrim ( string $str [, string $character_mask ] )
This function returns a string with whitespace (or other characters) stripped from the end of str. 
Without the second parameter, rtrim() will strip these characters: 
" " (ASCII 32 (0x20)), an ordinary space. 
"\t" (ASCII 9 (0x09)), a tab. 
"\n" (ASCII 10 (0x0A)), a new line (line feed). 
"\r" (ASCII 13 (0x0D)), a carriage return. 
"\0" (ASCII 0 (0x00)), the NULL-byte. 
"\x0B" (ASCII 11 (0x0B)), a vertical tab.
</Desc>
    <FName>runkit_class_adopt</FName>
    <Desc>bool runkit_class_adopt ( string $classname , string $parentname )
</Desc>
    <FName>runkit_class_emancipate</FName>
    <Desc>bool runkit_class_emancipate ( string $classname )
</Desc>
    <FName>runkit_constant_add</FName>
    <Desc>bool runkit_constant_add ( string $constname , mixed $value )
</Desc>
    <FName>runkit_constant_redefine</FName>
    <Desc>bool runkit_constant_redefine ( string $constname , mixed $newvalue )
</Desc>
    <FName>runkit_constant_remove</FName>
    <Desc>bool runkit_constant_remove ( string $constname )
</Desc>
    <FName>runkit_function_add</FName>
    <Desc>bool runkit_function_add ( string $funcname , string $arglist , string $code [, bool $return_by_reference = NULL [, string $doc_comment = NULL ]] )
bool runkit_function_add ( string $funcname , Closure $closure [, string $doc_comment = NULL ] )
</Desc>
    <FName>runkit_function_copy</FName>
    <Desc>bool runkit_function_copy ( string $funcname , string $targetname )
</Desc>
    <FName>runkit_function_redefine</FName>
    <Desc>bool runkit_function_redefine ( string $funcname , string $arglist , string $code [, bool $return_by_reference = NULL [, string $doc_comment = NULL ]] )
bool runkit_function_redefine ( string $funcname , Closure $closure [, string $doc_comment = NULL ] )
Note: By default, only userspace functions may be removed, renamed, or modified. In order to override internal functions, you must enable the runkit.internal_override setting in php.ini.
</Desc>
    <FName>runkit_function_remove</FName>
    <Desc>bool runkit_function_remove ( string $funcname )
Note: By default, only userspace functions may be removed, renamed, or modified. In order to override internal functions, you must enable the runkit.internal_override setting in php.ini.
</Desc>
    <FName>runkit_function_rename</FName>
    <Desc>bool runkit_function_rename ( string $funcname , string $newname )
Note: By default, only userspace functions may be removed, renamed, or modified. In order to override internal functions, you must enable the runkit.internal_override setting in php.ini.
</Desc>
    <FName>runkit_import</FName>
    <Desc>bool runkit_import ( string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS ] )
Similar to include however any code residing outside of a function or class is simply ignored. Additionally, depending on the value of flags, any functions or classes which already exist in the currently running environment may be automatically overwritten by their new definitions.
</Desc>
    <FName>runkit_lint_file</FName>
    <Desc>bool runkit_lint_file ( string $filename )
The runkit_lint_file() function performs a syntax (lint) check on the specified filename testing for scripting errors. This is similar to using php -l from the commandline. 
Note: Sandbox support (required for runkit_lint(), runkit_lint_file(), and the Runkit_Sandbox class) is only available as of PHP 5.1.0 or specially patched versions of PHP 5.0, and requires that thread safety be enabled. See the README file included in the runkit package for more information.
</Desc>
    <FName>runkit_lint</FName>
    <Desc>bool runkit_lint ( string $code )
The runkit_lint() function performs a syntax (lint) check on the specified php code testing for scripting errors. This is similar to using php -l from the command line except runkit_lint() accepts actual code rather than a filename. 
Note: Sandbox support (required for runkit_lint(), runkit_lint_file(), and the Runkit_Sandbox class) is only available as of PHP 5.1.0 or specially patched versions of PHP 5.0, and requires that thread safety be enabled. See the README file included in the runkit package for more information.
</Desc>
    <FName>runkit_method_add</FName>
    <Desc>bool runkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL ]] )
bool runkit_method_add ( string $classname , string $methodname , Closure $closure [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL ]] )
</Desc>
    <FName>runkit_method_copy</FName>
    <Desc>bool runkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )
</Desc>
    <FName>runkit_method_redefine</FName>
    <Desc>bool runkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL ]] )
bool runkit_method_redefine ( string $classname , string $methodname , Closure $closure [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL ]] )
Note: This function cannot be used to manipulate the currently running (or chained) method.
</Desc>
    <FName>runkit_method_remove</FName>
    <Desc>bool runkit_method_remove ( string $classname , string $methodname )
Note: This function cannot be used to manipulate the currently running (or chained) method.
</Desc>
    <FName>runkit_method_rename</FName>
    <Desc>bool runkit_method_rename ( string $classname , string $methodname , string $newname )
Note: This function cannot be used to manipulate the currently running (or chained) method.
</Desc>
    <FName>runkit_return_value_used</FName>
    <Desc>bool runkit_return_value_used ( void )
</Desc>
    <FName>runkit_sandbox_output_handler</FName>
    <Desc>mixed runkit_sandbox_output_handler ( object $sandbox [, mixed $callback ] )
Ordinarily, anything output (such as with echo or print) will be output as though it were printed from the parent's scope. Using runkit_sandbox_output_handler() however, output generated by the sandbox (including errors), can be captured by a function outside of the sandbox. 
Note: Sandbox support (required for runkit_lint(), runkit_lint_file(), and the Runkit_Sandbox class) is only available as of PHP 5.1.0 or specially patched versions of PHP 5.0, and requires that thread safety be enabled. See the README file included in the runkit package for more information.
Note: Deprecated

As of runkit version 0.5, this function is deprecated and is scheduled to be removed from the package prior to a 1.0 release. The output handler for a given Runkit_Sandbox instance may be read/set using the array offset syntax shown on the Runkit_Sandbox class definition page.
</Desc>
    <FName>runkit_superglobals</FName>
    <Desc>array runkit_superglobals ( void )
</Desc>
    <FName>sapi_windows_cp_conv</FName>
    <Desc>string sapi_windows_cp_conv ( int|string $in_codepage , int|string $out_codepage , string $subject )
Convert string from one codepage to another.
</Desc>
    <FName>sapi_windows_cp_get</FName>
    <Desc>int sapi_windows_cp_get ( string $kind )
Get the identifier of the codepage of the current process.
</Desc>
    <FName>sapi_windows_cp_is_utf8</FName>
    <Desc>bool sapi_windows_cp_is_utf8 ( void )
Indicates whether the codepage of the current process is UTF-8 compatible.
</Desc>
    <FName>sapi_windows_cp_set</FName>
    <Desc>bool sapi_windows_cp_set ( int $cp )
Set the codepage of the current process.
</Desc>
    <FName>sapi_windows_vt100_support</FName>
    <Desc>bool sapi_windows_vt100_support ( resource $stream [, bool $enable ] )
If enable is omitted, the function return TRUE if the stream stream has has VT100 control codes enabled, FALSE otherwise. 
If enable is specified, the function will try to enable or disable the VT100 features of the stream stream. If the feature has been successfully enabled (or disabled), the function will return TRUE, or FALSE otherwise. 
At startup, PHP tries to enable the VT100 feature of the STDOUT/STDERR streams. By the way, if those streams are redirected to a file, the VT100 features may not be enabled. 
Warning 
The function uses the ENABLE_VIRTUAL_TERMINAL_PROCESSING flag implemented in the Windows 10 API, so the VT100 feature may not be available on older Windows versions.
</Desc>
    <FName>scandir</FName>
    <Desc>array scandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] )
Returns an array of files and directories from the directory.
</Desc>
    <FName>seaslog_get_author</FName>
    <Desc>string seaslog_get_author ( void )
</Desc>
    <FName>seaslog_get_version</FName>
    <Desc>string seaslog_get_version ( void )
</Desc>
    <FName>sem_acquire</FName>
    <Desc>bool sem_acquire ( resource $sem_identifier [, bool $nowait = FALSE ] )
sem_acquire() by default blocks (if necessary) until the semaphore can be acquired. A process attempting to acquire a semaphore which it has already acquired will block forever if acquiring the semaphore would cause its maximum number of semaphore to be exceeded. 
After processing a request, any semaphores acquired by the process but not explicitly released will be released automatically and a warning will be generated.
</Desc>
    <FName>sem_get</FName>
    <Desc>resource sem_get ( int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1 ]]] )
sem_get() returns an id that can be used to access the System V semaphore with the given key. 
A second call to sem_get() for the same key will return a different semaphore identifier, but both identifiers access the same underlying semaphore.
</Desc>
    <FName>sem_release</FName>
    <Desc>bool sem_release ( resource $sem_identifier )
sem_release() releases the semaphore if it is currently acquired by the calling process, otherwise a warning is generated. 
After releasing the semaphore, sem_acquire() may be called to re-acquire it.
</Desc>
    <FName>sem_remove</FName>
    <Desc>bool sem_remove ( resource $sem_identifier )
sem_remove() removes the given semaphore. 
After removing the semaphore, it is no longer accessible.
</Desc>
    <FName>serialize</FName>
    <Desc>string serialize ( mixed $value )
Generates a storable representation of a value. 
This is useful for storing or passing PHP values around without losing their type and structure. 
To make the serialized string into a PHP value again, use unserialize().
</Desc>
    <FName>session_abort</FName>
    <Desc>bool session_abort ( void )
session_abort() finishes session without saving data. Thus the original values in session data are kept.
</Desc>
    <FName>session_cache_expire</FName>
    <Desc>int session_cache_expire ([ string $new_cache_expire ] )
session_cache_expire() returns the current setting of session.cache_expire. 
The cache expire is reset to the default value of 180 stored in session.cache_expire at request startup time. Thus, you need to call session_cache_expire() for every request (and before session_start() is called).
</Desc>
    <FName>session_cache_limiter</FName>
    <Desc>string session_cache_limiter ([ string $cache_limiter ] )
session_cache_limiter() returns the name of the current cache limiter. 
The cache limiter defines which cache control HTTP headers are sent to the client. These headers determine the rules by which the page content may be cached by the client and intermediate proxies. Setting the cache limiter to nocache disallows any client/proxy caching. A value of public permits caching by proxies and the client, whereas private disallows caching by proxies and permits the client to cache the contents. 
In private mode, the Expire header sent to the client may cause confusion for some browsers, including Mozilla. You can avoid this problem by using private_no_expire mode. The Expire header is never sent to the client in this mode. 
Setting the cache limiter to '' will turn off automatic sending of cache headers entirely. 
The cache limiter is reset to the default value stored in session.cache_limiter at request startup time. Thus, you need to call session_cache_limiter() for every request (and before session_start() is called).
</Desc>
    <FName>session_commit</FName>
    <Desc>This function is an alias of: session_write_close(). 
</Desc>
    <FName>session_create_id</FName>
    <Desc>string session_create_id ([ string $prefix ] )
session_create_id() is used to create new session id for the current session. It returns collision free session id. 
If session is not active, collision check is omitted. 
Session ID is created according to php.ini settings. 
It is important to use the same user ID of your web server for GC task script. Otherwise, you may have permission problems especially with files save handler.
</Desc>
    <FName>session_decode</FName>
    <Desc>bool session_decode ( string $data )
session_decode() decodes the serialized session data provided in $data, and populates the $_SESSION superglobal with the result. 
By default, the unserialization method used is internal to PHP, and is not the same as unserialize(). The serialization method can be set using session.serialize_handler.
</Desc>
    <FName>session_destroy</FName>
    <Desc>bool session_destroy ( void )
session_destroy() destroys all of the data associated with the current session. It does not unset any of the global variables associated with the session, or unset the session cookie. To use the session variables again, session_start() has to be called. 
Note: You do not have to call session_destroy() from usual code. Cleanup $_SESSION array rather than destroying session data. 
In order to kill the session altogether, the session ID must also be unset. If a cookie is used to propagate the session ID (default behavior), then the session cookie must be deleted. setcookie() may be used for that. 
When session.use_strict_mode is enabled. You do not have to remove obsolete session ID cookie because session module will not accept session ID cookie when there is no data associated to the session ID and set new session ID cookie. Enabling session.use_strict_mode is recommended for all sites. 
Warning 
Immediate session deletion may cause unwanted results. When there is concurrent requests, other connections may see sudden session data loss. e.g. Requests from JavaScript and/or requests from URL links. 
Although current session module does not accept empty session ID cookie, but immediate session deletion may result in empty session ID cookie due to client(browser) side race condition. This will result that the client creates many session ID needlessly. 
To avoid these, you must set deletion time-stamp to $_SESSION and reject access while later. Or make sure your application does not have concurrent requests. This applies to session_regenerate_id() also.
</Desc>
    <FName>session_encode</FName>
    <Desc>string session_encode ( void )
session_encode() returns a serialized string of the contents of the current session data stored in the $_SESSION superglobal. 
By default, the serialization method used is internal to PHP, and is not the same as serialize(). The serialization method can be set using session.serialize_handler.
</Desc>
    <FName>session_gc</FName>
    <Desc>int session_gc ( void )
session_gc() is used to perform session data GC(garbage collection). PHP does probability based session GC by default. 
Probability based GC works somewhat but it has few problems. 1) Low traffic sites' session data may not be deleted within the preferred duration. 2) High traffic sites' GC may be too frequent GC. 3) GC is performed on the user's request and the user will experience a GC delay. 
Therefore, it is recommended to execute GC periodically for production systems using, e.g., "cron" for UNIX-like systems. Make sure to disable probability based GC by setting session.gc_probability to 0.
</Desc>
    <FName>session_get_cookie_params</FName>
    <Desc>array session_get_cookie_params ( void )
Gets the session cookie parameters.
</Desc>
    <FName>session_id</FName>
    <Desc>string session_id ([ string $id ] )
session_id() is used to get or set the session id for the current session. 
The constant SID can also be used to retrieve the current name and session id as a string suitable for adding to URLs. See also Session handling.
</Desc>
    <FName>session_is_registered</FName>
    <Desc>bool session_is_registered ( string $name )
Finds out whether a global variable is registered in a session. 
Warning
This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.
</Desc>
    <FName>session_module_name</FName>
    <Desc>string session_module_name ([ string $module ] )
session_module_name() gets the name of the current session module.
</Desc>
    <FName>session_name</FName>
    <Desc>string session_name ([ string $name ] )
session_name() returns the name of the current session. If name is given, session_name() will update the session name and return the old session name. 
If a new session name is supplied, session_name() modifies the HTTP cookie (and output content when session.transid is enabled). Once the HTTP cookie is sent, session_name() raises error. session_name() must be called before session_start() for the session to work properly. 
The session name is reset to the default value stored in session.name at request startup time. Thus, you need to call session_name() for every request (and before session_start() is called).
</Desc>
    <FName>session_pgsql_add_error</FName>
    <Desc>bool session_pgsql_add_error ( int $error_level [, string $error_message ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>session_pgsql_get_error</FName>
    <Desc>array session_pgsql_get_error ([ bool $with_error_message = FALSE ] )
Get the number of errors and optional the error messages.
</Desc>
    <FName>session_pgsql_get_field</FName>
    <Desc>string session_pgsql_get_field ( void )
Warning
This function is currently not documented; only its argument list is available. 
See Also
session_pgsql_set_field() - Set custom field value 
</Desc>
    <FName>session_pgsql_reset</FName>
    <Desc>bool session_pgsql_reset ( void )
Reset the connection to the session database servers.
</Desc>
    <FName>session_pgsql_set_field</FName>
    <Desc>bool session_pgsql_set_field ( string $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>session_pgsql_status</FName>
    <Desc>array session_pgsql_status ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>session_regenerate_id</FName>
    <Desc>bool session_regenerate_id ([ bool $delete_old_session = FALSE ] )
session_regenerate_id() will replace the current session id with a new one, and keep the current session information. 
When session.use_trans_sid is enabled, output must be started after session_regenerate_id() call. Otherwise, old session ID is used. 
Warning 
Current session_regenerate_id does not handle unstable network well. e.g. Mobile and WiFi network. Therefore, you may experience lost session by calling session_regenerate_id. 
You should not destroy old session data immediately, but should use destroy time-stamp and control access to old session ID. Otherwise, concurrent access to page may result in inconsistent state, or you may have lost session, or it may cause client(browser) side race condition and may create many session ID needlessly. Immediate session data deletion disables session hijack attack detection and prevention also.
</Desc>
    <FName>session_register_shutdown</FName>
    <Desc>void session_register_shutdown ( void )
Registers session_write_close() as a shutdown function.
</Desc>
    <FName>session_register</FName>
    <Desc>bool session_register ( mixed $name [, mixed $... ] )
session_register() accepts a variable number of arguments, any of which can be either a string holding the name of a variable or an array consisting of variable names or other arrays. For each name, session_register() registers the global variable with that name in the current session. 
You can also create a session variable by simply setting the appropriate member of the $_SESSION array. 
<?php
// Use of session_register() is deprecated
$barney = "A big purple dinosaur.";
session_register("barney");

// Use of $_SESSION is preferred
$_SESSION["zim"] = "An invader from another planet.";
?> 
If session_start() was not called before this function is called, an implicit call to session_start() with no parameters will be made. $_SESSION does not mimic this behavior and requires session_start() before use. 
Warning
This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.
</Desc>
    <FName>session_reset</FName>
    <Desc>bool session_reset ( void )
session_reset() reinitializes a session with original values stored in session storage. This function requires an active session and discards changes in $_SESSION.
</Desc>
    <FName>session_save_path</FName>
    <Desc>string session_save_path ([ string $path ] )
session_save_path() returns the path of the current directory used to save session data.
</Desc>
    <FName>session_set_cookie_params</FName>
    <Desc>bool session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure = FALSE [, bool $httponly = FALSE ]]]] )
Set cookie parameters defined in the php.ini file. The effect of this function only lasts for the duration of the script. Thus, you need to call session_set_cookie_params() for every request and before session_start() is called. 
This function updates the runtime ini values of the corresponding PHP ini configuration keys which can be retrieved with the ini_get().
</Desc>
    <FName>session_set_save_handler</FName>
    <Desc>bool session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc [, callable $create_sid [, callable $validate_sid [, callable $update_timestamp ]]] )
Since PHP 5.4 it is possible to register the following prototype: 
bool session_set_save_handler ( object $sessionhandler [, bool $register_shutdown = TRUE ] )
session_set_save_handler() sets the user-level session storage functions which are used for storing and retrieving data associated with a session. This is most useful when a storage method other than those supplied by PHP sessions is preferred, e.g. storing the session data in a local database.
</Desc>
    <FName>session_start</FName>
    <Desc>bool session_start ([ array $options = array() ] )
session_start() creates a session or resumes the current one based on a session identifier passed via a GET or POST request, or passed via a cookie. 
When session_start() is called or when a session auto starts, PHP will call the open and read session save handlers. These will either be a built-in save handler provided by default or by PHP extensions (such as SQLite or Memcached); or can be custom handler as defined by session_set_save_handler(). The read callback will retrieve any existing session data (stored in a special serialized format) and will be unserialized and used to automatically populate the $_SESSION superglobal when the read callback returns the saved session data back to PHP session handling. 
To use a named session, call session_name() before calling session_start(). 
When session.use_trans_sid is enabled, the session_start() function will register an internal output handler for URL rewriting. 
If a user uses ob_gzhandler or similar with ob_start(), the function order is important for proper output. For example, ob_gzhandler must be registered before starting the session.
</Desc>
    <FName>session_status</FName>
    <Desc>int session_status ( void )
session_status() is used to return the current session status.
</Desc>
    <FName>session_unregister</FName>
    <Desc>bool session_unregister ( string $name )
session_unregister() unregisters the global variable named name from the current session. 
Warning
This function has been DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0.
</Desc>
    <FName>session_unset</FName>
    <Desc>bool session_unset ( void )
The session_unset() function frees all session variables currently registered.
</Desc>
    <FName>session_write_close</FName>
    <Desc>bool session_write_close ( void )
End the current session and store session data. 
Session data is usually stored after your script terminated without the need to call session_write_close(), but as session data is locked to prevent concurrent writes only one script may operate on a session at any time. When using framesets together with sessions you will experience the frames loading one by one due to this locking. You can reduce the time needed to load all the frames by ending the session as soon as all changes to session variables are done.
</Desc>
    <FName>set_error_handler</FName>
    <Desc>mixed set_error_handler ( callable $error_handler [, int $error_types = E_ALL | E_STRICT ] )
Sets a user function (error_handler) to handle errors in a script. 
This function can be used for defining your own way of handling errors during runtime, for example in applications in which you need to do cleanup of data/files when a critical error happens, or when you need to trigger an error under certain conditions (using trigger_error()). 
It is important to remember that the standard PHP error handler is completely bypassed for the error types specified by error_types unless the callback function returns FALSE. error_reporting() settings will have no effect and your error handler will be called regardless - however you are still able to read the current value of error_reporting and act appropriately. Of particular note is that this value will be 0 if the statement that caused the error was prepended by the @ error-control operator. 
Also note that it is your responsibility to die() if necessary. If the error-handler function returns, script execution will continue with the next statement after the one that caused an error. 
The following error types cannot be handled with a user defined function: E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING, and most of E_STRICT raised in the file where set_error_handler() is called. 
If errors occur before the script is executed (e.g. on file uploads) the custom error handler cannot be called since it is not registered at that time.
</Desc>
    <FName>set_exception_handler</FName>
    <Desc>callable set_exception_handler ( callable $exception_handler )
Sets the default exception handler if an exception is not caught within a try/catch block. Execution will stop after the exception_handler is called.
</Desc>
    <FName>set_file_buffer</FName>
    <Desc>This function is an alias of: stream_set_write_buffer(). 
</Desc>
    <FName>set_include_path</FName>
    <Desc>string set_include_path ( string $new_include_path )
Sets the include_path configuration option for the duration of the script.
</Desc>
    <FName>set_magic_quotes_runtime</FName>
    <Desc>bool set_magic_quotes_runtime ( bool $new_setting )
Set the current active configuration setting of magic_quotes_runtime. 
Errors/Exceptions
Since PHP 5.3 this function has been deprecated and will raise an E_DEPRECATED warning upon execution. Since PHP 5.4 this function will also raise an E_CORE_ERROR on trying to enable magic quotes.
</Desc>
    <FName>set_socket_blocking</FName>
    <Desc>This function is an alias of: stream_set_blocking() 
</Desc>
    <FName>set_time_limit</FName>
    <Desc>bool set_time_limit ( int $seconds )
Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the max_execution_time value defined in the php.ini. 
When called, set_time_limit() restarts the timeout counter from zero. In other words, if the timeout is the default 30 seconds, and 25 seconds into script execution a call such as set_time_limit(20) is made, the script will run for a total of 45 seconds before timing out.
</Desc>
    <FName>setcookie</FName>
    <Desc>bool setcookie ( string $name [, string $value = "" [, int $expire = 0 [, string $path = "" [, string $domain = "" [, bool $secure = FALSE [, bool $httponly = FALSE ]]]]]] )
setcookie() defines a cookie to be sent along with the rest of the HTTP headers. Like other headers, cookies must be sent before any output from your script (this is a protocol restriction). This requires that you place calls to this function prior to any output, including <html> and <head> tags as well as any whitespace. 
Once the cookies have been set, they can be accessed on the next page load with the $_COOKIE array. Cookie values may also exist in $_REQUEST.
</Desc>
    <FName>setlocale</FName>
    <Desc>string setlocale ( int $category , string $locale [, string $... ] )
string setlocale ( int $category , array $locale )
Sets locale information.
</Desc>
    <FName>setproctitle</FName>
    <Desc>void setproctitle ( string $title )
Sets the process title of the current process.
</Desc>
    <FName>setrawcookie</FName>
    <Desc>bool setrawcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = FALSE [, bool $httponly = FALSE ]]]]]] )
setrawcookie() is exactly the same as setcookie() except that the cookie value will not be automatically urlencoded when sent to the browser.
</Desc>
    <FName>setthreadtitle</FName>
    <Desc>bool setthreadtitle ( string $title )
Sets the thread title.
</Desc>
    <FName>settype</FName>
    <Desc>bool settype ( mixed &$var , string $type )
Set the type of variable var to type.
</Desc>
    <FName>sha1_file</FName>
    <Desc>string sha1_file ( string $filename [, bool $raw_output = FALSE ] )
Calculates the sha1 hash of the file specified by filename using the » US Secure Hash Algorithm 1, and returns that hash. The hash is a 40-character hexadecimal number.
</Desc>
    <FName>sha1</FName>
    <Desc>string sha1 ( string $str [, bool $raw_output = FALSE ] )
Calculates the sha1 hash of str using the » US Secure Hash Algorithm 1.
</Desc>
    <FName>shell_exec</FName>
    <Desc>string shell_exec ( string $cmd )
This function is identical to the backtick operator.
</Desc>
    <FName>shm_attach</FName>
    <Desc>resource shm_attach ( int $key [, int $memsize [, int $perm = 0666 ]] )
shm_attach() returns an id that can be used to access the System V shared memory with the given key, the first call creates the shared memory segment with memsize and the optional perm-bits perm. 
A second call to shm_attach() for the same key will return a different shared memory identifier, but both identifiers access the same underlying shared memory. memsize and perm will be ignored.
</Desc>
    <FName>shm_detach</FName>
    <Desc>bool shm_detach ( resource $shm_identifier )
shm_detach() disconnects from the shared memory given by the shm_identifier created by shm_attach(). Remember, that shared memory still exist in the Unix system and the data is still present.
</Desc>
    <FName>shm_get_var</FName>
    <Desc>mixed shm_get_var ( resource $shm_identifier , int $variable_key )
shm_get_var() returns the variable with a given variable_key, in the given shared memory segment. The variable is still present in the shared memory.
</Desc>
    <FName>shm_has_var</FName>
    <Desc>bool shm_has_var ( resource $shm_identifier , int $variable_key )
Checks whether a specific key exists inside a shared memory segment.
</Desc>
    <FName>shm_put_var</FName>
    <Desc>bool shm_put_var ( resource $shm_identifier , int $variable_key , mixed $variable )
shm_put_var() inserts or updates the variable with the given variable_key. 
Warnings (E_WARNING level) will be issued if shm_identifier is not a valid SysV shared memory index or if there was not enough shared memory remaining to complete your request.
</Desc>
    <FName>shm_remove_var</FName>
    <Desc>bool shm_remove_var ( resource $shm_identifier , int $variable_key )
Removes a variable with a given variable_key and frees the occupied memory.
</Desc>
    <FName>shm_remove</FName>
    <Desc>bool shm_remove ( resource $shm_identifier )
shm_remove() removes the shared memory shm_identifier. All data will be destroyed.
</Desc>
    <FName>shmop_close</FName>
    <Desc>void shmop_close ( resource $shmid )
shmop_close() is used to close a shared memory block.
</Desc>
    <FName>shmop_delete</FName>
    <Desc>bool shmop_delete ( resource $shmid )
shmop_delete() is used to delete a shared memory block.
</Desc>
    <FName>shmop_open</FName>
    <Desc>resource shmop_open ( int $key , string $flags , int $mode , int $size )
shmop_open() can create or open a shared memory block.
</Desc>
    <FName>shmop_read</FName>
    <Desc>string shmop_read ( resource $shmid , int $start , int $count )
shmop_read() will read a string from shared memory block.
</Desc>
    <FName>shmop_size</FName>
    <Desc>int shmop_size ( resource $shmid )
shmop_size() is used to get the size, in bytes of the shared memory block.
</Desc>
    <FName>shmop_write</FName>
    <Desc>int shmop_write ( resource $shmid , string $data , int $offset )
shmop_write() will write a string into shared memory block.
</Desc>
    <FName>show_source</FName>
    <Desc>This function is an alias of: highlight_file(). 
</Desc>
    <FName>shuffle</FName>
    <Desc>bool shuffle ( array &$array )
This function shuffles (randomizes the order of the elements in) an array. It uses a pseudo random number generator that is not suitable for cryptographic purposes.
</Desc>
    <FName>similar_text</FName>
    <Desc>int similar_text ( string $first , string $second [, float &$percent ] )
This calculates the similarity between two strings as described in Programming Classics: Implementing the World's Best Algorithms by Oliver (ISBN 0-131-00413-1). Note that this implementation does not use a stack as in Oliver's pseudo code, but recursive calls which may or may not speed up the whole process. Note also that the complexity of this algorithm is O(N**3) where N is the length of the longest string.
</Desc>
    <FName>simplexml_import_dom</FName>
    <Desc>SimpleXMLElement simplexml_import_dom ( DOMNode $node [, string $class_name = "SimpleXMLElement" ] )
This function takes a node of a DOM document and makes it into a SimpleXML node. This new object can then be used as a native SimpleXML element.
</Desc>
    <FName>simplexml_load_file</FName>
    <Desc>SimpleXMLElement simplexml_load_file ( string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE ]]]] )
Convert the well-formed XML document in the given file to an object.
</Desc>
    <FName>simplexml_load_string</FName>
    <Desc>SimpleXMLElement simplexml_load_string ( string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE ]]]] )
Takes a well-formed XML string and returns it as an object.
</Desc>
    <FName>sin</FName>
    <Desc>float sin ( float $arg )
sin() returns the sine of the arg parameter. The arg parameter is in radians.
</Desc>
    <FName>sinh</FName>
    <Desc>float sinh ( float $arg )
Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))/2.
</Desc>
    <FName>sizeof</FName>
    <Desc>This function is an alias of: count(). 
</Desc>
    <FName>sleep</FName>
    <Desc>int sleep ( int $seconds )
Delays the program execution for the given number of seconds.
</Desc>
    <FName>snmp_get_quick_print</FName>
    <Desc>bool snmp_get_quick_print ( void )
Returns the current value stored in the UCD Library for quick_print. quick_print is off by default.
</Desc>
    <FName>snmp_get_valueretrieval</FName>
    <Desc>int snmp_get_valueretrieval ( void )
</Desc>
    <FName>snmp_read_mib</FName>
    <Desc>bool snmp_read_mib ( string $filename )
This function is used to load additional, e.g. vendor specific, MIBs so that human readable OIDs like VENDOR-MIB::foo.1 instead of error prone numeric OIDs can be used. 
The order in which the MIBs are loaded does matter as the underlying Net-SNMP libary will print warnings if referenced objects cannot be resolved.
</Desc>
    <FName>snmp_set_enum_print</FName>
    <Desc>bool snmp_set_enum_print ( int $enum_print )
This function toggles if snmpwalk/snmpget etc. should automatically lookup enum values in the MIB and return them together with their human readable string.
</Desc>
    <FName>snmp_set_oid_numeric_print</FName>
    <Desc>void snmp_set_oid_numeric_print ( int $oid_format )
This function is an alias of: snmp_set_oid_output_format(). 
Changelog
VersionDescription
5.2.0Since PHP 5.2.0. 

See Also
snmp_set_oid_output_format() - Set the OID output format 
</Desc>
    <FName>snmp_set_oid_output_format</FName>
    <Desc>bool snmp_set_oid_output_format ( int $oid_format = SNMP_OID_OUTPUT_MODULE )
snmp_set_oid_output_format() sets the output format to be full or numeric.
</Desc>
    <FName>snmp_set_quick_print</FName>
    <Desc>bool snmp_set_quick_print ( bool $quick_print )
Sets the value of quick_print within the UCD SNMP library. When this is set (1), the SNMP library will return 'quick printed' values. This means that just the value will be printed. When quick_print is not enabled (default) the UCD SNMP library prints extra information including the type of the value (i.e. IpAddress or OID). Additionally, if quick_print is not enabled, the library prints additional hex values for all strings of three characters or less. 
By default the UCD SNMP library returns verbose values, quick_print is used to return only the value. 
Currently strings are still returned with extra quotes, this will be corrected in a later release.
</Desc>
    <FName>snmp_set_valueretrieval</FName>
    <Desc>bool snmp_set_valueretrieval ( int $method = SNMP_VALUE_LIBRARY )
</Desc>
    <FName>snmp2_get</FName>
    <Desc>string snmp2_get ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
The snmp2_get() function is used to read the value of an SNMP object specified by the object_id.
</Desc>
    <FName>snmp2_getnext</FName>
    <Desc>string snmp2_getnext ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
The snmp2_get_next() function is used to read the value of the SNMP object that follows the specified object_id.
</Desc>
    <FName>snmp2_real_walk</FName>
    <Desc>array snmp2_real_walk ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
The snmp2_real_walk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids.
</Desc>
    <FName>snmp2_set</FName>
    <Desc>bool snmp2_set ( string $host , string $community , string $object_id , string $type , string $value [, int $timeout = 1000000 [, int $retries = 5 ]] )
snmp2_set() is used to set the value of an SNMP object specified by the object_id.
</Desc>
    <FName>snmp2_walk</FName>
    <Desc>array snmp2_walk ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
snmp2_walk() function is used to read all the values from an SNMP agent specified by the hostname.
</Desc>
    <FName>snmp3_get</FName>
    <Desc>string snmp3_get ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
The snmp3_get() function is used to read the value of an SNMP object specified by the object_id.
</Desc>
    <FName>snmp3_getnext</FName>
    <Desc>string snmp3_getnext ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
The snmp3_getnext() function is used to read the value of the SNMP object that follows the specified object_id.
</Desc>
    <FName>snmp3_real_walk</FName>
    <Desc>array snmp3_real_walk ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
The snmp3_real_walk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids.
</Desc>
    <FName>snmp3_set</FName>
    <Desc>bool snmp3_set ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id , string $type , string $value [, int $timeout = 1000000 [, int $retries = 5 ]] )
snmp3_set() is used to set the value of an SNMP object specified by the object_id. 
Even if the security level does not use an auth or priv protocol/password valid values have to be specified.
</Desc>
    <FName>snmp3_walk</FName>
    <Desc>array snmp3_walk ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
snmp3_walk() function is used to read all the values from an SNMP agent specified by the hostname. 
Even if the security level does not use an auth or priv protocol/password valid values have to be specified.
</Desc>
    <FName>snmpget</FName>
    <Desc>string snmpget ( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
The snmpget() function is used to read the value of an SNMP object specified by the object_id.
</Desc>
    <FName>snmpgetnext</FName>
    <Desc>string snmpgetnext ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
The snmpgetnext() function is used to read the value of the SNMP object that follows the specified object_id.
</Desc>
    <FName>snmprealwalk</FName>
    <Desc>array snmprealwalk ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
The snmprealwalk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids.
</Desc>
    <FName>snmpset</FName>
    <Desc>bool snmpset ( string $host , string $community , string $object_id , string $type , mixed $value [, int $timeout = 1000000 [, int $retries = 5 ]] )
snmpset() is used to set the value of an SNMP object specified by the object_id.
</Desc>
    <FName>snmpwalk</FName>
    <Desc>array snmpwalk ( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
snmpwalk() function is used to read all the values from an SNMP agent specified by the hostname.
</Desc>
    <FName>snmpwalkoid</FName>
    <Desc>array snmpwalkoid ( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )
snmpwalkoid() function is used to read all object ids and their respective values from an SNMP agent specified by hostname. 
The existence of snmpwalkoid() and snmpwalk() has historical reasons. Both functions are provided for backward compatibility. Use snmprealwalk() instead.
</Desc>
    <FName>socket_accept</FName>
    <Desc>resource socket_accept ( resource $socket )
After the socket socket has been created using socket_create(), bound to a name with socket_bind(), and told to listen for connections with socket_listen(), this function will accept incoming connections on that socket. Once a successful connection is made, a new socket resource is returned, which may be used for communication. If there are multiple connections queued on the socket, the first will be used. If there are no pending connections, socket_accept() will block until a connection becomes present. If socket has been made non-blocking using socket_set_blocking() or socket_set_nonblock(), FALSE will be returned. 
The socket resource returned by socket_accept() may not be used to accept new connections. The original listening socket socket, however, remains open and may be reused.
</Desc>
    <FName>socket_addrinfo_bind</FName>
    <Desc>resource socket_addrinfo_bind ( resource $addr )
Create a Socket resource, and bind it to the provided AddrInfo resource. The return value of this function may be used with socket_listen().
</Desc>
    <FName>socket_addrinfo_connect</FName>
    <Desc>resource socket_addrinfo_connect ( resource $addr )
Create a Socket resource, and connect it to the provided AddrInfo resource. The return value of this function may be used with the rest of the socket functions.
</Desc>
    <FName>socket_addrinfo_explain</FName>
    <Desc>array socket_addrinfo_explain ( resource $addr )
socket_addrinfo_explain()() exposed the underlying addrinfo structure.
</Desc>
    <FName>socket_addrinfo_lookup</FName>
    <Desc>array socket_addrinfo_lookup ( string $host [, string $service [, array $hints ]] )
Lookup different ways we can connect to host. The returned array contains a set of resources that we can bind to using socket_addrinfo_bind().
</Desc>
    <FName>socket_bind</FName>
    <Desc>bool socket_bind ( resource $socket , string $address [, int $port = 0 ] )
Binds the name given in address to the socket described by socket. This has to be done before a connection is be established using socket_connect() or socket_listen().
</Desc>
    <FName>socket_clear_error</FName>
    <Desc>void socket_clear_error ([ resource $socket ] )
This function clears the error code on the given socket or the global last socket error if no socket is specified. 
This function allows explicitly resetting the error code value either of a socket or of the extension global last error code. This may be useful to detect within a part of the application if an error occurred or not.
</Desc>
    <FName>socket_close</FName>
    <Desc>void socket_close ( resource $socket )
socket_close() closes the socket resource given by socket. This function is specific to sockets and cannot be used on any other type of resources.
</Desc>
    <FName>socket_cmsg_space</FName>
    <Desc>int socket_cmsg_space ( int $level , int $type [, int $n = 0 ] )
Calculates the size of the buffer that should be allocated for receiving the ancillary data. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>socket_connect</FName>
    <Desc>bool socket_connect ( resource $socket , string $address [, int $port = 0 ] )
Initiate a connection to address using the socket resource socket, which must be a valid socket resource created with socket_create().
</Desc>
    <FName>socket_create_listen</FName>
    <Desc>resource socket_create_listen ( int $port [, int $backlog = 128 ] )
socket_create_listen() creates a new socket resource of type AF_INET listening on all local interfaces on the given port waiting for new connections. 
This function is meant to ease the task of creating a new socket which only listens to accept new connections.
</Desc>
    <FName>socket_create_pair</FName>
    <Desc>bool socket_create_pair ( int $domain , int $type , int $protocol , array &$fd )
socket_create_pair() creates two connected and indistinguishable sockets, and stores them in fd. This function is commonly used in IPC (InterProcess Communication).
</Desc>
    <FName>socket_create</FName>
    <Desc>resource socket_create ( int $domain , int $type , int $protocol )
Creates and returns a socket resource, also referred to as an endpoint of communication. A typical network connection is made up of 2 sockets, one performing the role of the client, and another performing the role of the server.
</Desc>
    <FName>socket_export_stream</FName>
    <Desc>resource socket_export_stream ( resource $socket )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>socket_get_option</FName>
    <Desc>mixed socket_get_option ( resource $socket , int $level , int $optname )
The socket_get_option() function retrieves the value for the option specified by the optname parameter for the specified socket.
</Desc>
    <FName>socket_get_status</FName>
    <Desc>This function is an alias of: stream_get_meta_data(). 
</Desc>
    <FName>socket_getopt</FName>
    <Desc>This function is an alias of: socket_get_option(). 
</Desc>
    <FName>socket_getpeername</FName>
    <Desc>bool socket_getpeername ( resource $socket , string &$address [, int &$port ] )
Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type.
</Desc>
    <FName>socket_getsockname</FName>
    <Desc>bool socket_getsockname ( resource $socket , string &$addr [, int &$port ] )
Note: socket_getsockname() should not be used with AF_UNIX sockets created with socket_connect(). Only sockets created with socket_accept() or a primary server socket following a call to socket_bind() will return meaningful values.
</Desc>
    <FName>socket_import_stream</FName>
    <Desc>resource socket_import_stream ( resource $stream )
Imports a stream that encapsulates a socket into a socket extension resource.
</Desc>
    <FName>socket_last_error</FName>
    <Desc>int socket_last_error ([ resource $socket ] )
If a socket resource is passed to this function, the last error which occurred on this particular socket is returned. If the socket resource is omitted, the error code of the last failed socket function is returned. The latter is particularly helpful for functions like socket_create() which don't return a socket on failure and socket_select() which can fail for reasons not directly tied to a particular socket. The error code is suitable to be fed to socket_strerror() which returns a string describing the given error code. 
If no error had occurred, or the error had been cleared with socket_clear_error(), the function returns 0.
</Desc>
    <FName>socket_listen</FName>
    <Desc>bool socket_listen ( resource $socket [, int $backlog = 0 ] )
After the socket socket has been created using socket_create() and bound to a name with socket_bind(), it may be told to listen for incoming connections on socket. 
socket_listen() is applicable only to sockets of type SOCK_STREAM or SOCK_SEQPACKET.
</Desc>
    <FName>socket_read</FName>
    <Desc>string socket_read ( resource $socket , int $length [, int $type = PHP_BINARY_READ ] )
The function socket_read() reads from the socket resource socket created by the socket_create() or socket_accept() functions.
</Desc>
    <FName>socket_recv</FName>
    <Desc>int socket_recv ( resource $socket , string &$buf , int $len , int $flags )
The socket_recv() function receives len bytes of data in buf from socket. socket_recv() can be used to gather data from connected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function. 
buf is passed by reference, so it must be specified as a variable in the argument list. Data read from socket by socket_recv() will be returned in buf.
</Desc>
    <FName>socket_recvfrom</FName>
    <Desc>int socket_recvfrom ( resource $socket , string &$buf , int $len , int $flags , string &$name [, int &$port ] )
The socket_recvfrom() function receives len bytes of data in buf from name on port port (if the socket is not of type AF_UNIX) using socket. socket_recvfrom() can be used to gather data from both connected and unconnected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function. 
The name and port must be passed by reference. If the socket is not connection-oriented, name will be set to the internet protocol address of the remote host or the path to the UNIX socket. If the socket is connection-oriented, name is NULL. Additionally, the port will contain the port of the remote host in the case of an unconnected AF_INET or AF_INET6 socket.
</Desc>
    <FName>socket_recvmsg</FName>
    <Desc>int socket_recvmsg ( resource $socket , array &$message [, int $flags = 0 ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>socket_select</FName>
    <Desc>int socket_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )
socket_select() accepts arrays of sockets and waits for them to change status. Those coming with BSD sockets background will recognize that those socket resource arrays are in fact the so-called file descriptor sets. Three independent arrays of socket resources are watched.
</Desc>
    <FName>socket_send</FName>
    <Desc>int socket_send ( resource $socket , string $buf , int $len , int $flags )
The function socket_send() sends len bytes to the socket socket from buf.
</Desc>
    <FName>socket_sendmsg</FName>
    <Desc>int socket_sendmsg ( resource $socket , array $message [, int $flags = 0 ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>socket_sendto</FName>
    <Desc>int socket_sendto ( resource $socket , string $buf , int $len , int $flags , string $addr [, int $port = 0 ] )
The function socket_sendto() sends len bytes from buf through the socket socket to the port at the address addr.
</Desc>
    <FName>socket_set_block</FName>
    <Desc>bool socket_set_block ( resource $socket )
The socket_set_block() function removes the O_NONBLOCK flag on the socket specified by the socket parameter. 
When an operation (e.g. receive, send, connect, accept, ...) is performed on a blocking socket, the script will pause its execution until it receives a signal or it can perform the operation.
</Desc>
    <FName>socket_set_blocking</FName>
    <Desc>This function is an alias of: stream_set_blocking(). 
</Desc>
    <FName>socket_set_nonblock</FName>
    <Desc>bool socket_set_nonblock ( resource $socket )
The socket_set_nonblock() function sets the O_NONBLOCK flag on the socket specified by the socket parameter. 
When an operation (e.g. receive, send, connect, accept, ...) is performed on a non-blocking socket, the script will not pause its execution until it receives a signal or it can perform the operation. Rather, if the operation would result in a block, the called function will fail.
</Desc>
    <FName>socket_set_option</FName>
    <Desc>bool socket_set_option ( resource $socket , int $level , int $optname , mixed $optval )
The socket_set_option() function sets the option specified by the optname parameter, at the specified protocol level, to the value pointed to by the optval parameter for the socket.
</Desc>
    <FName>socket_set_timeout</FName>
    <Desc>This function is an alias of: stream_set_timeout(). 
</Desc>
    <FName>socket_setopt</FName>
    <Desc>This function is an alias of: socket_set_option(). 
</Desc>
    <FName>socket_shutdown</FName>
    <Desc>bool socket_shutdown ( resource $socket [, int $how = 2 ] )
The socket_shutdown() function allows you to stop incoming, outgoing or all data (the default) from being sent through the socket 
Note: 
The associated buffer, or buffers, may or may not be emptied.
</Desc>
    <FName>socket_strerror</FName>
    <Desc>string socket_strerror ( int $errno )
socket_strerror() takes as its errno parameter a socket error code as returned by socket_last_error() and returns the corresponding explanatory text. 
Note: 
Although the error messages generated by the socket extension are in English, the system messages retrieved with this function will appear depending on the current locale (LC_MESSAGES).
</Desc>
    <FName>socket_write</FName>
    <Desc>int socket_write ( resource $socket , string $buffer [, int $length = 0 ] )
The function socket_write() writes to the socket from the given buffer.
</Desc>
    <FName>sodium_add</FName>
    <Desc>void sodium_add ( string &$val , string $addv )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_base642bin</FName>
    <Desc>string sodium_base642bin ( string $b64 , int $id [, string $ignore ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_bin2base64</FName>
    <Desc>string sodium_bin2base64 ( string $bin , int $id )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_bin2hex</FName>
    <Desc>string sodium_bin2hex ( string $bin )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_compare</FName>
    <Desc>int sodium_compare ( string $buf1 , string $buf2 )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_aes256gcm_decrypt</FName>
    <Desc>string sodium_crypto_aead_aes256gcm_decrypt ( string $ciphertext , string $ad , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_aes256gcm_encrypt</FName>
    <Desc>string sodium_crypto_aead_aes256gcm_encrypt ( string $msg , string $ad , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_aes256gcm_is_available</FName>
    <Desc>bool sodium_crypto_aead_aes256gcm_is_available ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_aes256gcm_keygen</FName>
    <Desc>string sodium_crypto_aead_aes256gcm_keygen ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_chacha20poly1305_decrypt</FName>
    <Desc>string sodium_crypto_aead_chacha20poly1305_decrypt ( string $ciphertext , string $ad , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_chacha20poly1305_encrypt</FName>
    <Desc>string sodium_crypto_aead_chacha20poly1305_encrypt ( string $msg , string $ad , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_chacha20poly1305_ietf_decrypt</FName>
    <Desc>string sodium_crypto_aead_chacha20poly1305_ietf_decrypt ( string $ciphertext , string $ad , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_chacha20poly1305_ietf_encrypt</FName>
    <Desc>string sodium_crypto_aead_chacha20poly1305_ietf_encrypt ( string $msg , string $ad , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_chacha20poly1305_ietf_keygen</FName>
    <Desc>string sodium_crypto_aead_chacha20poly1305_ietf_keygen ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_chacha20poly1305_keygen</FName>
    <Desc>string sodium_crypto_aead_chacha20poly1305_keygen ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_xchacha20poly1305_ietf_decrypt</FName>
    <Desc>string sodium_crypto_aead_xchacha20poly1305_ietf_decrypt ( string $ciphertext , string $ad , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_xchacha20poly1305_ietf_encrypt</FName>
    <Desc>string sodium_crypto_aead_xchacha20poly1305_ietf_encrypt ( string $msg , string $ad , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_aead_xchacha20poly1305_ietf_keygen</FName>
    <Desc>string sodium_crypto_aead_xchacha20poly1305_ietf_keygen ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_auth_keygen</FName>
    <Desc>string sodium_crypto_auth_keygen ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_auth_verify</FName>
    <Desc>bool sodium_crypto_auth_verify ( string $signature , string $msg , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_auth</FName>
    <Desc>string sodium_crypto_auth ( string $msg , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_box_keypair_from_secretkey_and_publickey</FName>
    <Desc>string sodium_crypto_box_keypair_from_secretkey_and_publickey ( string $secret_key , string $public_key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_box_keypair</FName>
    <Desc>string sodium_crypto_box_keypair ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_box_open</FName>
    <Desc>string sodium_crypto_box_open ( string $ciphertext , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_box_publickey_from_secretkey</FName>
    <Desc>string sodium_crypto_box_publickey_from_secretkey ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_box_publickey</FName>
    <Desc>string sodium_crypto_box_publickey ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_box_seal_open</FName>
    <Desc>string sodium_crypto_box_seal_open ( string $ciphertext , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_box_seal</FName>
    <Desc>string sodium_crypto_box_seal ( string $msg , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_box_secretkey</FName>
    <Desc>string sodium_crypto_box_secretkey ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_box_seed_keypair</FName>
    <Desc>string sodium_crypto_box_seed_keypair ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_box</FName>
    <Desc>string sodium_crypto_box ( string $msg , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_generichash_final</FName>
    <Desc>string sodium_crypto_generichash_final ( string &$state [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_generichash_init</FName>
    <Desc>string sodium_crypto_generichash_init ([ string $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_generichash_keygen</FName>
    <Desc>string sodium_crypto_generichash_keygen ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_generichash_update</FName>
    <Desc>bool sodium_crypto_generichash_update ( string &$state , string $msg )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_generichash</FName>
    <Desc>string sodium_crypto_generichash ( string $msg [, string $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_kdf_derive_from_key</FName>
    <Desc>string sodium_crypto_kdf_derive_from_key ( int $subkey_len , int $subkey_id , string $context , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_kdf_keygen</FName>
    <Desc>string sodium_crypto_kdf_keygen ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_kx_client_session_keys</FName>
    <Desc>array sodium_crypto_kx_client_session_keys ( string $client_keypair , string $server_key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_kx_keypair</FName>
    <Desc>string sodium_crypto_kx_keypair ( void )
Create a new sodium keypair consisting of the the secret key (32 bytes) followed by the public key (32 bytes). The keys can be retrieved by calling sodium_crypto_kx_secretkey() and sodium_crypto_kx_publickey(), respectively.
</Desc>
    <FName>sodium_crypto_kx_publickey</FName>
    <Desc>string sodium_crypto_kx_publickey ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_kx_secretkey</FName>
    <Desc>string sodium_crypto_kx_secretkey ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_kx_seed_keypair</FName>
    <Desc>string sodium_crypto_kx_seed_keypair ( string $string )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_kx_server_session_keys</FName>
    <Desc>array sodium_crypto_kx_server_session_keys ( string $server_keypair , string $client_key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_pwhash_scryptsalsa208sha256_str_verify</FName>
    <Desc>bool sodium_crypto_pwhash_scryptsalsa208sha256_str_verify ( string $hash , string $password )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_pwhash_scryptsalsa208sha256_str</FName>
    <Desc>string sodium_crypto_pwhash_scryptsalsa208sha256_str ( string $password , int $opslimit , int $memlimit )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_pwhash_scryptsalsa208sha256</FName>
    <Desc>string sodium_crypto_pwhash_scryptsalsa208sha256 ( int $length , string $password , string $salt , int $opslimit , int $memlimit )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_pwhash_str_needs_rehash</FName>
    <Desc>bool sodium_crypto_pwhash_str_needs_rehash ( string $password , int $opslimit , int $memlimit )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_pwhash_str_verify</FName>
    <Desc>bool sodium_crypto_pwhash_str_verify ( string $hash , string $password )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_pwhash_str</FName>
    <Desc>string sodium_crypto_pwhash_str ( string $password , int $opslimit , int $memlimit )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_pwhash</FName>
    <Desc>string sodium_crypto_pwhash ( int $length , string $password , string $salt , int $opslimit , int $memlimit [, int $alg ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_scalarmult_base</FName>
    <Desc>This function is an alias of: sodium_crypto_box_publickey_from_secretkey(). 
</Desc>
    <FName>sodium_crypto_scalarmult</FName>
    <Desc>string sodium_crypto_scalarmult ( string $n , string $p )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_secretbox_keygen</FName>
    <Desc>string sodium_crypto_secretbox_keygen ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_secretbox_open</FName>
    <Desc>string sodium_crypto_secretbox_open ( string $ciphertext , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_secretbox</FName>
    <Desc>string sodium_crypto_secretbox ( string $string , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_secretstream_xchacha20poly1305_init_pull</FName>
    <Desc>string sodium_crypto_secretstream_xchacha20poly1305_init_pull ( string $header , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_secretstream_xchacha20poly1305_init_push</FName>
    <Desc>array sodium_crypto_secretstream_xchacha20poly1305_init_push ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_secretstream_xchacha20poly1305_keygen</FName>
    <Desc>string sodium_crypto_secretstream_xchacha20poly1305_keygen ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_secretstream_xchacha20poly1305_pull</FName>
    <Desc>array sodium_crypto_secretstream_xchacha20poly1305_pull ( string &$state , string $c [, string $ad ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_secretstream_xchacha20poly1305_push</FName>
    <Desc>string sodium_crypto_secretstream_xchacha20poly1305_push ( string &$state , string $msg [, string $ad [, int $tag ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_secretstream_xchacha20poly1305_rekey</FName>
    <Desc>void sodium_crypto_secretstream_xchacha20poly1305_rekey ( string &$state )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_shorthash_keygen</FName>
    <Desc>string sodium_crypto_shorthash_keygen ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_shorthash</FName>
    <Desc>string sodium_crypto_shorthash ( string $msg , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign_detached</FName>
    <Desc>string sodium_crypto_sign_detached ( string $msg , string $keypair )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign_ed25519_pk_to_curve25519</FName>
    <Desc>string sodium_crypto_sign_ed25519_pk_to_curve25519 ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign_ed25519_sk_to_curve25519</FName>
    <Desc>string sodium_crypto_sign_ed25519_sk_to_curve25519 ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign_keypair_from_secretkey_and_publickey</FName>
    <Desc>string sodium_crypto_sign_keypair_from_secretkey_and_publickey ( string $secret_key , string $public_key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign_keypair</FName>
    <Desc>string sodium_crypto_sign_keypair ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign_open</FName>
    <Desc>string sodium_crypto_sign_open ( string $string , string $keypair )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign_publickey_from_secretkey</FName>
    <Desc>string sodium_crypto_sign_publickey_from_secretkey ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign_publickey</FName>
    <Desc>string sodium_crypto_sign_publickey ( string $keypair )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign_secretkey</FName>
    <Desc>string sodium_crypto_sign_secretkey ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign_seed_keypair</FName>
    <Desc>string sodium_crypto_sign_seed_keypair ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign_verify_detached</FName>
    <Desc>bool sodium_crypto_sign_verify_detached ( string $signature , string $msg , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_sign</FName>
    <Desc>string sodium_crypto_sign ( string $msg , string $secret_key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_stream_keygen</FName>
    <Desc>string sodium_crypto_stream_keygen ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_stream_xor</FName>
    <Desc>string sodium_crypto_stream_xor ( string $msg , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_crypto_stream</FName>
    <Desc>string sodium_crypto_stream ( int $length , string $nonce , string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_hex2bin</FName>
    <Desc>string sodium_hex2bin ( string $hex [, string $ignore ] )
Decodes a hexadecimally encoded binary string. 
Like sodium_bin2hex(), sodium_hex2bin() is resistant to side-channel attacks while hex2bin() is not.
</Desc>
    <FName>sodium_increment</FName>
    <Desc>void sodium_increment ( string &$val )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_memcmp</FName>
    <Desc>int sodium_memcmp ( string $buf1 , string $buf2 )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_memzero</FName>
    <Desc>void sodium_memzero ( string &$buf )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_pad</FName>
    <Desc>string sodium_pad ( string $unpadded , int $length )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>sodium_unpad</FName>
    <Desc>string sodium_unpad ( string $padded , int $length )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>solr_get_version</FName>
    <Desc>string solr_get_version ( void )
This function returns the current version of the extension as a string.
</Desc>
    <FName>sort</FName>
    <Desc>bool sort ( array &$array [, int $sort_flags = SORT_REGULAR ] )
This function sorts an array. Elements will be arranged from lowest to highest when this function has completed. 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined.
</Desc>
    <FName>soundex</FName>
    <Desc>string soundex ( string $str )
Calculates the soundex key of str. 
Soundex keys have the property that words pronounced similarly produce the same soundex key, and can thus be used to simplify searches in databases where you know the pronunciation but not the spelling. This soundex function returns a string 4 characters long, starting with a letter. 
This particular soundex function is one described by Donald Knuth in "The Art Of Computer Programming, vol. 3: Sorting And Searching", Addison-Wesley (1973), pp. 391-392.
</Desc>
    <FName>spl_autoload_call</FName>
    <Desc>void spl_autoload_call ( string $class_name )
This function can be used to manually search for a class or interface using the registered __autoload functions.
</Desc>
    <FName>spl_autoload_extensions</FName>
    <Desc>string spl_autoload_extensions ([ string $file_extensions ] )
This function can modify and check the file extensions that the built in __autoload() fallback function spl_autoload() will be using.
</Desc>
    <FName>spl_autoload_functions</FName>
    <Desc>array spl_autoload_functions ( void )
Get all registered __autoload() functions.
</Desc>
    <FName>spl_autoload_register</FName>
    <Desc>bool spl_autoload_register ([ callable $autoload_function [, bool $throw = TRUE [, bool $prepend = FALSE ]]] )
Register a function with the spl provided __autoload queue. If the queue is not yet activated it will be activated. 
If your code has an existing __autoload() function then this function must be explicitly registered on the __autoload queue. This is because spl_autoload_register() will effectively replace the engine cache for the __autoload() function by either spl_autoload() or spl_autoload_call(). 
If there must be multiple autoload functions, spl_autoload_register() allows for this. It effectively creates a queue of autoload functions, and runs through each of them in the order they are defined. By contrast, __autoload() may only be defined once.
</Desc>
    <FName>spl_autoload_unregister</FName>
    <Desc>bool spl_autoload_unregister ( mixed $autoload_function )
Removes a function from the autoload queue. If the queue is activated and empty after removing the given function then it will be deactivated. 
When this function results in the queue being deactivated, any __autoload function that previously existed will not be reactivated.
</Desc>
    <FName>spl_autoload</FName>
    <Desc>void spl_autoload ( string $class_name [, string $file_extensions = spl_autoload_extensions() ] )
This function is intended to be used as a default implementation for __autoload(). If nothing else is specified and spl_autoload_register() is called without any parameters then this function will be used for any later call to __autoload().
</Desc>
    <FName>spl_classes</FName>
    <Desc>array spl_classes ( void )
This function returns an array with the current available SPL classes.
</Desc>
    <FName>spl_object_hash</FName>
    <Desc>string spl_object_hash ( object $obj )
This function returns a unique identifier for the object. This id can be used as a hash key for storing objects, or for identifying an object, as long as the object is not destroyed. Once the object is destroyed, its hash may be reused for other objects.
</Desc>
    <FName>spl_object_id</FName>
    <Desc>int spl_object_id ( object $obj )
This function returns a unique identifier for the object. The object id is unique for the lifetime of the object. Once the object is destroyed, its id may be reused for other objects. This behavior is similar to spl_object_hash().
</Desc>
    <FName>split</FName>
    <Desc>array split ( string $pattern , string $string [, int $limit = -1 ] )
Splits a string into array by regular expression.
</Desc>
    <FName>spliti</FName>
    <Desc>array spliti ( string $pattern , string $string [, int $limit = -1 ] )
Splits a string into array by regular expression. 
This function is identical to split() except that this ignores case distinction when matching alphabetic characters.
</Desc>
    <FName>sprintf</FName>
    <Desc>string sprintf ( string $format [, mixed $args [, mixed $... ]] )
Returns a string produced according to the formatting string format.
</Desc>
    <FName>sql_regcase</FName>
    <Desc>string sql_regcase ( string $string )
Creates a regular expression for a case insensitive match.
</Desc>
    <FName>sqlite_array_query</FName>
    <Desc>array sqlite_array_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
array sqlite_array_query ( string $query , resource $dbhandle [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
Object oriented style (method):
public array SQLiteDatabase::arrayQuery ( string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
sqlite_array_query() executes the given query and returns an array of the entire result set. It is similar to calling sqlite_query() and then sqlite_fetch_array() for each row in the result set. sqlite_array_query() is significantly faster than the aforementioned. 
Tip 
sqlite_array_query() is best suited to queries returning 45 rows or less. If you have more data than that, it is recommended that you write your scripts to use sqlite_unbuffered_query() instead for more optimal performance.
</Desc>
    <FName>SQLiteDatabase::arrayQuery</FName>
    <Desc>array sqlite_array_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
array sqlite_array_query ( string $query , resource $dbhandle [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
Object oriented style (method):
public array SQLiteDatabase::arrayQuery ( string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
sqlite_array_query() executes the given query and returns an array of the entire result set. It is similar to calling sqlite_query() and then sqlite_fetch_array() for each row in the result set. sqlite_array_query() is significantly faster than the aforementioned. 
Tip 
sqlite_array_query() is best suited to queries returning 45 rows or less. If you have more data than that, it is recommended that you write your scripts to use sqlite_unbuffered_query() instead for more optimal performance.
</Desc>
    <FName>sqlite_busy_timeout</FName>
    <Desc>void sqlite_busy_timeout ( resource $dbhandle , int $milliseconds )
Object oriented style (method):
public void SQLiteDatabase::busyTimeout ( int $milliseconds )
Set the maximum time, in milliseconds, that SQLite will wait for a dbhandle to become ready for use.
</Desc>
    <FName>SQLiteDatabase::busyTimeout</FName>
    <Desc>void sqlite_busy_timeout ( resource $dbhandle , int $milliseconds )
Object oriented style (method):
public void SQLiteDatabase::busyTimeout ( int $milliseconds )
Set the maximum time, in milliseconds, that SQLite will wait for a dbhandle to become ready for use.
</Desc>
    <FName>sqlite_changes</FName>
    <Desc>int sqlite_changes ( resource $dbhandle )
Object oriented style (method):
public int SQLiteDatabase::changes ( void )
Returns the numbers of rows that were changed by the most recent SQL statement executed against the dbhandle database handle.
</Desc>
    <FName>SQLiteDatabase::changes</FName>
    <Desc>int sqlite_changes ( resource $dbhandle )
Object oriented style (method):
public int SQLiteDatabase::changes ( void )
Returns the numbers of rows that were changed by the most recent SQL statement executed against the dbhandle database handle.
</Desc>
    <FName>sqlite_close</FName>
    <Desc>void sqlite_close ( resource $dbhandle )
Closes the given db_handle database handle. If the database was persistent, it will be closed and removed from the persistent list.
</Desc>
    <FName>sqlite_column</FName>
    <Desc>mixed sqlite_column ( resource $result , mixed $index_or_name [, bool $decode_binary = TRUE ] )
mixed SQLiteResult::column ( mixed $index_or_name [, bool $decode_binary = TRUE ] )
mixed SQLiteUnbuffered::column ( mixed $index_or_name [, bool $decode_binary = TRUE ] )
Fetches the value of a column named index_or_name (if it is a string), or of the ordinal column numbered index_or_name (if it is an integer) from the current row of the query result handle result.
</Desc>
    <FName>SQLiteResult::column</FName>
    <Desc>mixed sqlite_column ( resource $result , mixed $index_or_name [, bool $decode_binary = TRUE ] )
mixed SQLiteResult::column ( mixed $index_or_name [, bool $decode_binary = TRUE ] )
mixed SQLiteUnbuffered::column ( mixed $index_or_name [, bool $decode_binary = TRUE ] )
Fetches the value of a column named index_or_name (if it is a string), or of the ordinal column numbered index_or_name (if it is an integer) from the current row of the query result handle result.
</Desc>
    <FName>sqlite_create_aggregate</FName>
    <Desc>void sqlite_create_aggregate ( resource $dbhandle , string $function_name , callable $step_func , callable $finalize_func [, int $num_args = -1 ] )
Object oriented style (method):
public void SQLiteDatabase::createAggregate ( string $function_name , callable $step_func , callable $finalize_func [, int $num_args = -1 ] )
sqlite_create_aggregate() is similar to sqlite_create_function() except that it registers functions that can be used to calculate a result aggregated across all the rows of a query. 
The key difference between this function and sqlite_create_function() is that two functions are required to manage the aggregate; step_func is called for each row of the result set. Your PHP function should accumulate the result and store it into the aggregation context. Once all the rows have been processed, finalize_func will be called and it should then take the data from the aggregation context and return the result. Callback functions should return a type understood by SQLite (i.e. scalar type).
</Desc>
    <FName>SQLiteDatabase::createAggregate</FName>
    <Desc>void sqlite_create_aggregate ( resource $dbhandle , string $function_name , callable $step_func , callable $finalize_func [, int $num_args = -1 ] )
Object oriented style (method):
public void SQLiteDatabase::createAggregate ( string $function_name , callable $step_func , callable $finalize_func [, int $num_args = -1 ] )
sqlite_create_aggregate() is similar to sqlite_create_function() except that it registers functions that can be used to calculate a result aggregated across all the rows of a query. 
The key difference between this function and sqlite_create_function() is that two functions are required to manage the aggregate; step_func is called for each row of the result set. Your PHP function should accumulate the result and store it into the aggregation context. Once all the rows have been processed, finalize_func will be called and it should then take the data from the aggregation context and return the result. Callback functions should return a type understood by SQLite (i.e. scalar type).
</Desc>
    <FName>sqlite_create_function</FName>
    <Desc>void sqlite_create_function ( resource $dbhandle , string $function_name , callable $callback [, int $num_args = -1 ] )
Object oriented style (method):
public void SQLiteDatabase::createFunction ( string $function_name , callable $callback [, int $num_args = -1 ] )
sqlite_create_function() allows you to register a PHP function with SQLite as an UDF (User Defined Function), so that it can be called from within your SQL statements. 
The UDF can be used in any SQL statement that can call functions, such as SELECT and UPDATE statements and also in triggers.
</Desc>
    <FName>SQLiteDatabase::createFunction</FName>
    <Desc>void sqlite_create_function ( resource $dbhandle , string $function_name , callable $callback [, int $num_args = -1 ] )
Object oriented style (method):
public void SQLiteDatabase::createFunction ( string $function_name , callable $callback [, int $num_args = -1 ] )
sqlite_create_function() allows you to register a PHP function with SQLite as an UDF (User Defined Function), so that it can be called from within your SQL statements. 
The UDF can be used in any SQL statement that can call functions, such as SELECT and UPDATE statements and also in triggers.
</Desc>
    <FName>sqlite_current</FName>
    <Desc>array sqlite_current ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
Object oriented style (method):
array SQLiteResult::current ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
array SQLiteUnbuffered::current ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
sqlite_current() is identical to sqlite_fetch_array() except that it does not advance to the next row prior to returning the data; it returns the data from the current position only.
</Desc>
    <FName>SQLiteResult::current</FName>
    <Desc>array sqlite_current ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
Object oriented style (method):
array SQLiteResult::current ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
array SQLiteUnbuffered::current ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
sqlite_current() is identical to sqlite_fetch_array() except that it does not advance to the next row prior to returning the data; it returns the data from the current position only.
</Desc>
    <FName>sqlite_error_string</FName>
    <Desc>string sqlite_error_string ( int $error_code )
Returns a human readable description of the error_code returned from sqlite_last_error().
</Desc>
    <FName>sqlite_escape_string</FName>
    <Desc>string sqlite_escape_string ( string $item )
sqlite_escape_string() will correctly quote the string specified by item for use in an SQLite SQL statement. This includes doubling up single-quote characters (') and checking for binary-unsafe characters in the query string. 
Although the encoding makes it safe to insert the data, it will render simple text comparisons and LIKE clauses in your queries unusable for the columns that contain the binary data. In practice, this shouldn't be a problem, as your schema should be such that you don't use such things on binary columns (in fact, it might be better to store binary data using other means, such as in files).
</Desc>
    <FName>sqlite_exec</FName>
    <Desc>bool sqlite_exec ( resource $dbhandle , string $query [, string &$error_msg ] )
bool sqlite_exec ( string $query , resource $dbhandle )
Object oriented style (method):
public bool SQLiteDatabase::queryExec ( string $query [, string &$error_msg ] )
Executes an SQL statement given by the query against a given database handle (specified by the dbhandle parameter). 
Warning 
SQLite will execute multiple queries separated by semicolons, so you can use it to execute a batch of SQL that you have loaded from a file or have embedded in a script.
</Desc>
    <FName>SQLiteDatabase::exec</FName>
    <Desc>bool sqlite_exec ( resource $dbhandle , string $query [, string &$error_msg ] )
bool sqlite_exec ( string $query , resource $dbhandle )
Object oriented style (method):
public bool SQLiteDatabase::queryExec ( string $query [, string &$error_msg ] )
Executes an SQL statement given by the query against a given database handle (specified by the dbhandle parameter). 
Warning 
SQLite will execute multiple queries separated by semicolons, so you can use it to execute a batch of SQL that you have loaded from a file or have embedded in a script.
</Desc>
    <FName>sqlite_factory</FName>
    <Desc>SQLiteDatabase sqlite_factory ( string $filename [, int $mode = 0666 [, string &$error_message ]] )
sqlite_factory() behaves similarly to sqlite_open() in that it opens an SQLite database or attempts to create it if it does not exist. However, a SQLiteDatabase object is returned rather than a resource. Please see the sqlite_open() reference page for further usage and caveats.
</Desc>
    <FName>sqlite_fetch_all</FName>
    <Desc>array sqlite_fetch_all ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
Object oriented style (method):
array SQLiteResult::fetchAll ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
array SQLiteUnbuffered::fetchAll ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
sqlite_fetch_all() returns an array of the entire result set from the result resource. It is similar to calling sqlite_query() (or sqlite_unbuffered_query()) and then sqlite_fetch_array() for each row in the result set.
</Desc>
    <FName>SQLiteResult::fetchAll</FName>
    <Desc>array sqlite_fetch_all ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
Object oriented style (method):
array SQLiteResult::fetchAll ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
array SQLiteUnbuffered::fetchAll ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
sqlite_fetch_all() returns an array of the entire result set from the result resource. It is similar to calling sqlite_query() (or sqlite_unbuffered_query()) and then sqlite_fetch_array() for each row in the result set.
</Desc>
    <FName>sqlite_fetch_array</FName>
    <Desc>array sqlite_fetch_array ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
Object oriented style (method):
array SQLiteResult::fetch ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
array SQLiteUnbuffered::fetch ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
Fetches the next row from the given result handle. If there are no more rows, returns FALSE, otherwise returns an associative array representing the row data.
</Desc>
    <FName>SQLiteResult::fetch</FName>
    <Desc>array sqlite_fetch_array ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
Object oriented style (method):
array SQLiteResult::fetch ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
array SQLiteUnbuffered::fetch ([ int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE ]] )
Fetches the next row from the given result handle. If there are no more rows, returns FALSE, otherwise returns an associative array representing the row data.
</Desc>
    <FName>sqlite_fetch_column_types</FName>
    <Desc>array sqlite_fetch_column_types ( string $table_name , resource $dbhandle [, int $result_type = SQLITE_ASSOC ] )
Object oriented style (method):
public array SQLiteDatabase::fetchColumnTypes ( string $table_name [, int $result_type = SQLITE_ASSOC ] )
sqlite_fetch_column_types() returns an array of column data types from the specified table_name table.
</Desc>
    <FName>SQLiteDatabase::fetchColumnTypes</FName>
    <Desc>array sqlite_fetch_column_types ( string $table_name , resource $dbhandle [, int $result_type = SQLITE_ASSOC ] )
Object oriented style (method):
public array SQLiteDatabase::fetchColumnTypes ( string $table_name [, int $result_type = SQLITE_ASSOC ] )
sqlite_fetch_column_types() returns an array of column data types from the specified table_name table.
</Desc>
    <FName>sqlite_fetch_object</FName>
    <Desc>object sqlite_fetch_object ( resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = TRUE ]]] )
Object oriented style (method):
object SQLiteResult::fetchObject ([ string $class_name [, array $ctor_params [, bool $decode_binary = TRUE ]]] )
object SQLiteUnbuffered::fetchObject ([ string $class_name [, array $ctor_params [, bool $decode_binary = TRUE ]]] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>SQLiteResult::fetchObject</FName>
    <Desc>object sqlite_fetch_object ( resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = TRUE ]]] )
Object oriented style (method):
object SQLiteResult::fetchObject ([ string $class_name [, array $ctor_params [, bool $decode_binary = TRUE ]]] )
object SQLiteUnbuffered::fetchObject ([ string $class_name [, array $ctor_params [, bool $decode_binary = TRUE ]]] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>sqlite_fetch_single</FName>
    <Desc>string sqlite_fetch_single ( resource $result [, bool $decode_binary = TRUE ] )
Object oriented style (method):
string SQLiteResult::fetchSingle ([ bool $decode_binary = TRUE ] )
string SQLiteUnbuffered::fetchSingle ([ bool $decode_binary = TRUE ] )
sqlite_fetch_single() is identical to sqlite_fetch_array() except that it returns the value of the first column of the rowset. 
This is the most optimal way to retrieve data when you are only interested in the values from a single column of data.
</Desc>
    <FName>SQLiteResult::fetchSingle</FName>
    <Desc>string sqlite_fetch_single ( resource $result [, bool $decode_binary = TRUE ] )
Object oriented style (method):
string SQLiteResult::fetchSingle ([ bool $decode_binary = TRUE ] )
string SQLiteUnbuffered::fetchSingle ([ bool $decode_binary = TRUE ] )
sqlite_fetch_single() is identical to sqlite_fetch_array() except that it returns the value of the first column of the rowset. 
This is the most optimal way to retrieve data when you are only interested in the values from a single column of data.
</Desc>
    <FName>sqlite_fetch_string</FName>
    <Desc>This function is an alias of: sqlite_fetch_single(). 
</Desc>
    <FName>sqlite_field_name</FName>
    <Desc>string sqlite_field_name ( resource $result , int $field_index )
Object oriented style (method):
string SQLiteResult::fieldName ( int $field_index )
string SQLiteUnbuffered::fieldName ( int $field_index )
Given the ordinal column number, field_index, sqlite_field_name() returns the name of that field in the result set result.
</Desc>
    <FName>SQLiteResult::fieldName</FName>
    <Desc>string sqlite_field_name ( resource $result , int $field_index )
Object oriented style (method):
string SQLiteResult::fieldName ( int $field_index )
string SQLiteUnbuffered::fieldName ( int $field_index )
Given the ordinal column number, field_index, sqlite_field_name() returns the name of that field in the result set result.
</Desc>
    <FName>sqlite_has_more</FName>
    <Desc>bool sqlite_has_more ( resource $result )
Finds whether more rows are available from the given result set.
</Desc>
    <FName>sqlite_has_prev</FName>
    <Desc>bool sqlite_has_prev ( resource $result )
Object oriented style (method):
bool SQLiteResult::hasPrev ( void )
Find whether there are more previous rows from the given result handle.
</Desc>
    <FName>SQLiteResult::hasPrev</FName>
    <Desc>bool sqlite_has_prev ( resource $result )
Object oriented style (method):
bool SQLiteResult::hasPrev ( void )
Find whether there are more previous rows from the given result handle.
</Desc>
    <FName>sqlite_key</FName>
    <Desc>Object oriented style (method):
int SQLiteResult::key ( void )
SQLiteResult::key() returns the current row index of the buffered result set result. 
Unlike all other SQLite functions, this function does not have a procedural version, and can only be called as a method on a SQLiteResult object.
</Desc>
    <FName>SQLiteResult::key</FName>
    <Desc>Object oriented style (method):
int SQLiteResult::key ( void )
SQLiteResult::key() returns the current row index of the buffered result set result. 
Unlike all other SQLite functions, this function does not have a procedural version, and can only be called as a method on a SQLiteResult object.
</Desc>
    <FName>sqlite_last_error</FName>
    <Desc>int sqlite_last_error ( resource $dbhandle )
Object oriented style (method):
public int SQLiteDatabase::lastError ( void )
Returns the error code from the last operation performed on dbhandle (the database handle), or 0 when no error occurred. A human readable description of the error code can be retrieved using sqlite_error_string().
</Desc>
    <FName>SQLiteDatabase::lastError</FName>
    <Desc>int sqlite_last_error ( resource $dbhandle )
Object oriented style (method):
public int SQLiteDatabase::lastError ( void )
Returns the error code from the last operation performed on dbhandle (the database handle), or 0 when no error occurred. A human readable description of the error code can be retrieved using sqlite_error_string().
</Desc>
    <FName>sqlite_last_insert_rowid</FName>
    <Desc>int sqlite_last_insert_rowid ( resource $dbhandle )
Object oriented style (method):
public int SQLiteDatabase::lastInsertRowid ( void )
Returns the rowid of the row that was most recently inserted into the database dbhandle, if it was created as an auto-increment field. 
Tip 
You can create auto-increment fields in SQLite by declaring them as INTEGER PRIMARY KEY in your table schema.
</Desc>
    <FName>SQLiteDatabase::lastInsertRowid</FName>
    <Desc>int sqlite_last_insert_rowid ( resource $dbhandle )
Object oriented style (method):
public int SQLiteDatabase::lastInsertRowid ( void )
Returns the rowid of the row that was most recently inserted into the database dbhandle, if it was created as an auto-increment field. 
Tip 
You can create auto-increment fields in SQLite by declaring them as INTEGER PRIMARY KEY in your table schema.
</Desc>
    <FName>sqlite_libencoding</FName>
    <Desc>string sqlite_libencoding ( void )
The SQLite library may be compiled in either ISO-8859-1 or UTF-8 compatible modes. This function allows you to determine which encoding scheme is used by your version of the library. 
Warning 
The default PHP distribution builds libsqlite in ISO-8859-1 encoding mode. However, this is a misnomer; rather than handling ISO-8859-1, it operates according to your current locale settings for string comparisons and sort ordering. So, rather than ISO-8859-1, you should think of it as being '8-bit' instead. 
When compiled with UTF-8 support, sqlite handles encoding and decoding of UTF-8 multi-byte character sequences, but does not yet do a complete job when working with the data (no normalization is performed for example), and some comparison operations may still not be carried out correctly. 
Warning 
It is not recommended that you use PHP in a web-server configuration with a version of the SQLite library compiled with UTF-8 support, since libsqlite will abort the process if it detects a problem with the UTF-8 encoding.
</Desc>
    <FName>sqlite_libversion</FName>
    <Desc>string sqlite_libversion ( void )
Returns the version of the linked SQLite library.
</Desc>
    <FName>sqlite_next</FName>
    <Desc>bool sqlite_next ( resource $result )
Object oriented style (method):
bool SQLiteResult::next ( void )
bool SQLiteUnbuffered::next ( void )
sqlite_next() advances the result handle result to the next row.
</Desc>
    <FName>SQLiteResult::next</FName>
    <Desc>bool sqlite_next ( resource $result )
Object oriented style (method):
bool SQLiteResult::next ( void )
bool SQLiteUnbuffered::next ( void )
sqlite_next() advances the result handle result to the next row.
</Desc>
    <FName>sqlite_num_fields</FName>
    <Desc>int sqlite_num_fields ( resource $result )
Object oriented style (method):
int SQLiteResult::numFields ( void )
int SQLiteUnbuffered::numFields ( void )
Returns the number of fields in the result set.
</Desc>
    <FName>SQLiteResult::numFields</FName>
    <Desc>int sqlite_num_fields ( resource $result )
Object oriented style (method):
int SQLiteResult::numFields ( void )
int SQLiteUnbuffered::numFields ( void )
Returns the number of fields in the result set.
</Desc>
    <FName>sqlite_num_rows</FName>
    <Desc>int sqlite_num_rows ( resource $result )
Object oriented style (method):
int SQLiteResult::numRows ( void )
Returns the number of rows in the buffered result set.
</Desc>
    <FName>SQLiteResult::numRows</FName>
    <Desc>int sqlite_num_rows ( resource $result )
Object oriented style (method):
int SQLiteResult::numRows ( void )
Returns the number of rows in the buffered result set.
</Desc>
    <FName>sqlite_open</FName>
    <Desc>resource sqlite_open ( string $filename [, int $mode = 0666 [, string &$error_message ]] )
Object oriented style (constructor):
final public SQLiteDatabase::__construct ( string $filename [, int $mode = 0666 [, string &$error_message ]] )
Opens an SQLite database or creates the database if it does not exist.
</Desc>
    <FName>sqlite_popen</FName>
    <Desc>resource sqlite_popen ( string $filename [, int $mode = 0666 [, string &$error_message ]] )
This function behaves identically to sqlite_open() except that is uses the persistent resource mechanism of PHP. For information about the meaning of the parameters, read the sqlite_open() manual page. 
sqlite_popen() will first check to see if a persistent handle has already been opened for the given filename. If it finds one, it returns that handle to your script, otherwise it opens a fresh handle to the database. 
The benefit of this approach is that you don't incur the performance cost of re-reading the database and index schema on each page hit served by persistent web server SAPI's (any SAPI except for regular CGI or CLI). 
Note: If you use persistent handles and have the database updated by a background process (perhaps via a crontab), and that process re-creates the database by overwriting it (either by unlinking and rebuilding, or moving the updated version to replace the current version), you may experience undefined behaviour when a persistent handle on the old version of the database is recycled. To avoid this situation, have your background processes open the same database file and perform their updates in a transaction.
</Desc>
    <FName>sqlite_prev</FName>
    <Desc>bool sqlite_prev ( resource $result )
Object oriented style (method):
bool SQLiteResult::prev ( void )
sqlite_prev() seeks back the result handle to the previous row.
</Desc>
    <FName>SQLiteResult::prev</FName>
    <Desc>bool sqlite_prev ( resource $result )
Object oriented style (method):
bool SQLiteResult::prev ( void )
sqlite_prev() seeks back the result handle to the previous row.
</Desc>
    <FName>sqlite_query</FName>
    <Desc>resource sqlite_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
resource sqlite_query ( string $query , resource $dbhandle [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
Object oriented style (method):
public SQLiteResult SQLiteDatabase::query ( string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
Executes an SQL statement given by the query against a given database handle.
</Desc>
    <FName>SQLiteDatabase::query</FName>
    <Desc>resource sqlite_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
resource sqlite_query ( string $query , resource $dbhandle [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
Object oriented style (method):
public SQLiteResult SQLiteDatabase::query ( string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
Executes an SQL statement given by the query against a given database handle.
</Desc>
    <FName>sqlite_rewind</FName>
    <Desc>bool sqlite_rewind ( resource $result )
Object oriented style (method):
bool SQLiteResult::rewind ( void )
sqlite_rewind() seeks back to the first row in the given result set.
</Desc>
    <FName>SQLiteResult::rewind</FName>
    <Desc>bool sqlite_rewind ( resource $result )
Object oriented style (method):
bool SQLiteResult::rewind ( void )
sqlite_rewind() seeks back to the first row in the given result set.
</Desc>
    <FName>sqlite_seek</FName>
    <Desc>bool sqlite_seek ( resource $result , int $rownum )
Object oriented style (method):
bool SQLiteResult::seek ( int $rownum )
sqlite_seek() seeks to the row given by the parameter rownum.
</Desc>
    <FName>SQLiteResult::seek</FName>
    <Desc>bool sqlite_seek ( resource $result , int $rownum )
Object oriented style (method):
bool SQLiteResult::seek ( int $rownum )
sqlite_seek() seeks to the row given by the parameter rownum.
</Desc>
    <FName>sqlite_single_query</FName>
    <Desc>array sqlite_single_query ( resource $db , string $query [, bool $first_row_only [, bool $decode_binary ]] )
Object oriented style (method):
public array SQLiteDatabase::singleQuery ( string $query [, bool $first_row_only [, bool $decode_binary ]] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>SQLiteDatabase::singleQuery</FName>
    <Desc>array sqlite_single_query ( resource $db , string $query [, bool $first_row_only [, bool $decode_binary ]] )
Object oriented style (method):
public array SQLiteDatabase::singleQuery ( string $query [, bool $first_row_only [, bool $decode_binary ]] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>sqlite_udf_decode_binary</FName>
    <Desc>string sqlite_udf_decode_binary ( string $data )
Decodes binary data passed as parameters to a UDF. 
You must call this function on parameters passed to your UDF if you need them to handle binary data, as the binary encoding employed by PHP will obscure the content and of the parameter in its natural, non-coded form. 
PHP does not perform this encode/decode operation automatically as it would severely impact performance if it did.
</Desc>
    <FName>sqlite_udf_encode_binary</FName>
    <Desc>string sqlite_udf_encode_binary ( string $data )
sqlite_udf_encode_binary() applies a binary encoding to the data so that it can be safely returned from queries (since the underlying libsqlite API is not binary safe). 
If there is a chance that your data might be binary unsafe (e.g.: it contains a NUL byte in the middle rather than at the end, or if it has and 0x01 byte as the first character) then you must call this function to encode the return value from your UDF. 
PHP does not perform this encode/decode operation automatically as it would severely impact performance if it did. 
Note: 
Do not use sqlite_escape_string() to quote strings returned from UDF's as it will lead to double-quoting of the data. Use sqlite_udf_encode_binary() instead!
</Desc>
    <FName>sqlite_unbuffered_query</FName>
    <Desc>resource sqlite_unbuffered_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
resource sqlite_unbuffered_query ( string $query , resource $dbhandle [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
Object oriented style (method):
public SQLiteUnbuffered SQLiteDatabase::unbufferedQuery ( string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
sqlite_unbuffered_query() is identical to sqlite_query() except that the result that is returned is a sequential forward-only result set that can only be used to read each row, one after the other. 
This function is ideal for generating things such as HTML tables where you only need to process one row at a time and don't need to randomly access the row data. 
Note: 
Functions such as sqlite_seek(), sqlite_rewind(), sqlite_next(), sqlite_current(), and sqlite_num_rows() do not work on result handles returned from sqlite_unbuffered_query().
</Desc>
    <FName>SQLiteDatabase::unbufferedQuery</FName>
    <Desc>resource sqlite_unbuffered_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
resource sqlite_unbuffered_query ( string $query , resource $dbhandle [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
Object oriented style (method):
public SQLiteUnbuffered SQLiteDatabase::unbufferedQuery ( string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )
sqlite_unbuffered_query() is identical to sqlite_query() except that the result that is returned is a sequential forward-only result set that can only be used to read each row, one after the other. 
This function is ideal for generating things such as HTML tables where you only need to process one row at a time and don't need to randomly access the row data. 
Note: 
Functions such as sqlite_seek(), sqlite_rewind(), sqlite_next(), sqlite_current(), and sqlite_num_rows() do not work on result handles returned from sqlite_unbuffered_query().
</Desc>
    <FName>sqlite_valid</FName>
    <Desc>bool sqlite_valid ( resource $result )
Object oriented style (method):
bool SQLiteResult::valid ( void )
bool SQLiteUnbuffered::valid ( void )
Finds whether more rows are available from the given result handle.
</Desc>
    <FName>SQLiteResult::valid</FName>
    <Desc>bool sqlite_valid ( resource $result )
Object oriented style (method):
bool SQLiteResult::valid ( void )
bool SQLiteUnbuffered::valid ( void )
Finds whether more rows are available from the given result handle.
</Desc>
    <FName>sqlsrv_begin_transaction</FName>
    <Desc>bool sqlsrv_begin_transaction ( resource $conn )
The transaction begun by sqlsrv_begin_transaction() includes all statements that were executed after the call to sqlsrv_begin_transaction() and before calls to sqlsrv_rollback() or sqlsrv_commit(). Explicit transactions should be started and committed or rolled back using these functions instead of executing SQL statements that begin and committ/roll back transactions. For more information, see » SQLSRV Transactions.
</Desc>
    <FName>sqlsrv_cancel</FName>
    <Desc>bool sqlsrv_cancel ( resource $stmt )
Cancels a statement. Any results associated with the statement that have not been consumed are deleted. After sqlsrv_cancel() has been called, the specified statement can be re-executed if it was created with sqlsrv_prepare(). Calling sqlsrv_cancel() is not necessary if all the results associated with the statement have been consumed.
</Desc>
    <FName>sqlsrv_client_info</FName>
    <Desc>array sqlsrv_client_info ( resource $conn )
Returns information about the client and specified connection
</Desc>
    <FName>sqlsrv_close</FName>
    <Desc>bool sqlsrv_close ( resource $conn )
Closes an open connection and releases resourses associated with the connection.
</Desc>
    <FName>sqlsrv_commit</FName>
    <Desc>bool sqlsrv_commit ( resource $conn )
Commits a transaction that was begun with sqlsrv_begin_transaction(). The connection is returned to auto-commit mode after sqlsrv_commit() is called. The transaction that is committed includes all statements that were executed after the call to sqlsrv_begin_transaction(). Explicit transactions should be started and committed or rolled back using these functions instead of executing SQL statements that begin and committ/roll back transactions. For more information, see » SQLSRV Transactions.
</Desc>
    <FName>sqlsrv_configure</FName>
    <Desc>bool sqlsrv_configure ( string $setting , mixed $value )
Changes the driver error handling and logging configurations.
</Desc>
    <FName>sqlsrv_connect</FName>
    <Desc>resource sqlsrv_connect ( string $serverName [, array $connectionInfo ] )
Opens a connection to a Microsoft SQL Server database. By default, the connection is attempted using Windows Authentication. To connect using SQL Server Authentication, include "UID" and "PWD" in the connection options array.
</Desc>
    <FName>sqlsrv_errors</FName>
    <Desc>mixed sqlsrv_errors ([ int $errorsOrWarnings ] )
Returns error and warning information about the last SQLSRV operation performed.
</Desc>
    <FName>sqlsrv_execute</FName>
    <Desc>bool sqlsrv_execute ( resource $stmt )
Executes a statement prepared with sqlsrv_prepare(). This function is ideal for executing a prepared statement multiple times with different parameter values.
</Desc>
    <FName>sqlsrv_fetch_array</FName>
    <Desc>array sqlsrv_fetch_array ( resource $stmt [, int $fetchType [, int $row [, int $offset ]]] )
Returns the next available row of data as an associative array, a numeric array, or both (the default).
</Desc>
    <FName>sqlsrv_fetch_object</FName>
    <Desc>mixed sqlsrv_fetch_object ( resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset ]]]] )
Retrieves the next row of data in a result set as an instance of the specified class with properties that match the row field names and values that correspond to the row field values.
</Desc>
    <FName>sqlsrv_fetch</FName>
    <Desc>mixed sqlsrv_fetch ( resource $stmt [, int $row [, int $offset ]] )
Makes the next row in a result set available for reading. Use sqlsrv_get_field() to read the fields of the row.
</Desc>
    <FName>sqlsrv_field_metadata</FName>
    <Desc>mixed sqlsrv_field_metadata ( resource $stmt )
Retrieves metadata for the fields of a statement prepared by sqlsrv_prepare() or sqlsrv_query(). sqlsrv_field_metadata() can be called on a statement before or after statement execution.
</Desc>
    <FName>sqlsrv_free_stmt</FName>
    <Desc>bool sqlsrv_free_stmt ( resource $stmt )
Frees all resources for the specified statement. The statement cannot be used after sqlsrv_free_stmt() has been called on it. If sqlsrv_free_stmt() is called on an in-progress statement that alters server state, statement execution is terminated and the statement is rolled back.
</Desc>
    <FName>sqlsrv_get_config</FName>
    <Desc>mixed sqlsrv_get_config ( string $setting )
Returns the value of the specified configuration setting.
</Desc>
    <FName>sqlsrv_get_field</FName>
    <Desc>mixed sqlsrv_get_field ( resource $stmt , int $fieldIndex [, int $getAsType ] )
Gets field data from the currently selected row. Fields must be accessed in order. Field indices start at 0.
</Desc>
    <FName>sqlsrv_has_rows</FName>
    <Desc>bool sqlsrv_has_rows ( resource $stmt )
Indicates whether the specified statement has rows.
</Desc>
    <FName>sqlsrv_next_result</FName>
    <Desc>mixed sqlsrv_next_result ( resource $stmt )
Makes the next result of the specified statement active. Results include result sets, row counts, and output parameters.
</Desc>
    <FName>sqlsrv_num_fields</FName>
    <Desc>mixed sqlsrv_num_fields ( resource $stmt )
Retrieves the number of fields (columns) on a statement.
</Desc>
    <FName>sqlsrv_num_rows</FName>
    <Desc>mixed sqlsrv_num_rows ( resource $stmt )
Retrieves the number of rows in a result set. This function requires that the statment resource be created with a static or keyset cursor. For more information, see sqlsrv_query(), sqlsrv_prepare(), or » Specifying a Cursor Type and Selecting Rows in the Microsoft SQLSRV documentation.
</Desc>
    <FName>sqlsrv_prepare</FName>
    <Desc>mixed sqlsrv_prepare ( resource $conn , string $sql [, array $params [, array $options ]] )
Prepares a query for execution. This function is ideal for preparing a query that will be executed multiple times with different parameter values.
</Desc>
    <FName>sqlsrv_query</FName>
    <Desc>mixed sqlsrv_query ( resource $conn , string $sql [, array $params [, array $options ]] )
Prepares and executes a query.
</Desc>
    <FName>sqlsrv_rollback</FName>
    <Desc>bool sqlsrv_rollback ( resource $conn )
Rolls back a transaction that was begun with sqlsrv_begin_transaction() and returns the connection to auto-commit mode.
</Desc>
    <FName>sqlsrv_rows_affected</FName>
    <Desc>int sqlsrv_rows_affected ( resource $stmt )
Returns the number of rows modified by the last INSERT, UPDATE, or DELETE query executed. For information about the number of rows returned by a SELECT query, see sqlsrv_num_rows().
</Desc>
    <FName>sqlsrv_send_stream_data</FName>
    <Desc>bool sqlsrv_send_stream_data ( resource $stmt )
Send data from parameter streams to the server. Up to 8 KB of data is sent with each call.
</Desc>
    <FName>sqlsrv_server_info</FName>
    <Desc>array sqlsrv_server_info ( resource $conn )
Returns information about the server.
</Desc>
    <FName>sqrt</FName>
    <Desc>float sqrt ( float $arg )
Returns the square root of arg.
</Desc>
    <FName>srand</FName>
    <Desc>void srand ([ int $seed ] )
Seeds the random number generator with seed or with a random value if no seed is given. 
Note: There is no need to seed the random number generator with srand() or mt_srand() as this is done automatically. 
Note: As of PHP 7.1.0, srand() has been made an alias of mt_srand().
</Desc>
    <FName>sscanf</FName>
    <Desc>mixed sscanf ( string $str , string $format [, mixed &$... ] )
The function sscanf() is the input analog of printf(). sscanf() reads from the string str and interprets it according to the specified format, which is described in the documentation for sprintf(). 
Any whitespace in the format string matches any whitespace in the input string. This means that even a tab \t in the format string can match a single space character in the input string.
</Desc>
    <FName>ssdeep_fuzzy_compare</FName>
    <Desc>int ssdeep_fuzzy_compare ( string $signature1 , string $signature2 )
Calculates the match score between signature1 and signature2 using »  context-triggered piecewise hashing, and returns the match score.
</Desc>
    <FName>ssdeep_fuzzy_hash_filename</FName>
    <Desc>string ssdeep_fuzzy_hash_filename ( string $file_name )
ssdeep_fuzzy_hash_filename() calculates the hash of the file specified by file_name using » context-triggered piecewise hashing, and returns that hash.
</Desc>
    <FName>ssdeep_fuzzy_hash</FName>
    <Desc>string ssdeep_fuzzy_hash ( string $to_hash )
ssdeep_fuzzy_hash() calculates the hash of to_hash using »  context-triggered piecewise hashing, and returns that hash.
</Desc>
    <FName>ssh2_auth_agent</FName>
    <Desc>bool ssh2_auth_agent ( resource $session , string $username )
Authenticate over SSH using the ssh agent 
Note: The ssh2_auth_agent() function will only be available when the ssh2 extension is compiled with libssh >= 1.2.3.
</Desc>
    <FName>ssh2_auth_hostbased_file</FName>
    <Desc>bool ssh2_auth_hostbased_file ( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile [, string $passphrase [, string $local_username ]] )
Authenticate using a public hostkey read from a file.
</Desc>
    <FName>ssh2_auth_none</FName>
    <Desc>mixed ssh2_auth_none ( resource $session , string $username )
Attempt "none" authentication which usually will (and should) fail. As part of the failure, this function will return an array of accepted authentication methods.
</Desc>
    <FName>ssh2_auth_password</FName>
    <Desc>bool ssh2_auth_password ( resource $session , string $username , string $password )
Authenticate over SSH using a plain password. Since version 0.12 this function also supports keyboard_interactive method.
</Desc>
    <FName>ssh2_auth_pubkey_file</FName>
    <Desc>bool ssh2_auth_pubkey_file ( resource $session , string $username , string $pubkeyfile , string $privkeyfile [, string $passphrase ] )
Authenticate using a public key read from a file.
</Desc>
    <FName>ssh2_connect</FName>
    <Desc>resource ssh2_connect ( string $host [, int $port = 22 [, array $methods [, array $callbacks ]]] )
Establish a connection to a remote SSH server. 
Once connected, the client should verify the server's hostkey using ssh2_fingerprint(), then authenticate using either password or public key.
</Desc>
    <FName>ssh2_disconnect</FName>
    <Desc>bool ssh2_disconnect ( resource $session )
Close a connection to a remote SSH server.
</Desc>
    <FName>ssh2_exec</FName>
    <Desc>resource ssh2_exec ( resource $session , string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )
Execute a command at the remote end and allocate a channel for it.
</Desc>
    <FName>ssh2_fetch_stream</FName>
    <Desc>resource ssh2_fetch_stream ( resource $channel , int $streamid )
Fetches an alternate substream associated with an SSH2 channel stream. The SSH2 protocol currently defines only one substream, STDERR, which has a substream ID of SSH2_STREAM_STDERR (defined as 1).
</Desc>
    <FName>ssh2_fingerprint</FName>
    <Desc>string ssh2_fingerprint ( resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ] )
Returns a server hostkey hash from an active session.
</Desc>
    <FName>ssh2_methods_negotiated</FName>
    <Desc>array ssh2_methods_negotiated ( resource $session )
Returns list of negotiated methods.
</Desc>
    <FName>ssh2_publickey_add</FName>
    <Desc>bool ssh2_publickey_add ( resource $pkey , string $algoname , string $blob [, bool $overwrite = FALSE [, array $attributes ]] )
Note: The public key subsystem is used for managing public keys on a server to which the client is already authenticated. To authenticate to a remote system using public key authentication, use the ssh2_auth_pubkey_file() function instead.
</Desc>
    <FName>ssh2_publickey_init</FName>
    <Desc>resource ssh2_publickey_init ( resource $session )
Request the Publickey subsystem from an already connected SSH2 server. 
The publickey subsystem allows an already connected and authenticated client to manage the list of authorized public keys stored on the target server in an implementation agnostic manner. If the remote server does not support the publickey subsystem, the ssh2_publickey_init() function will return FALSE.
</Desc>
    <FName>ssh2_publickey_list</FName>
    <Desc>array ssh2_publickey_list ( resource $pkey )
List currently authorized publickeys.
</Desc>
    <FName>ssh2_publickey_remove</FName>
    <Desc>bool ssh2_publickey_remove ( resource $pkey , string $algoname , string $blob )
Removes an authorized publickey.
</Desc>
    <FName>ssh2_scp_recv</FName>
    <Desc>bool ssh2_scp_recv ( resource $session , string $remote_file , string $local_file )
Copy a file from the remote server to the local filesystem using the SCP protocol.
</Desc>
    <FName>ssh2_scp_send</FName>
    <Desc>bool ssh2_scp_send ( resource $session , string $local_file , string $remote_file [, int $create_mode = 0644 ] )
Copy a file from the local filesystem to the remote server using the SCP protocol.
</Desc>
    <FName>ssh2_sftp_chmod</FName>
    <Desc>bool ssh2_sftp_chmod ( resource $sftp , string $filename , int $mode )
Attempts to change the mode of the specified file to that given in mode.
</Desc>
    <FName>ssh2_sftp_lstat</FName>
    <Desc>array ssh2_sftp_lstat ( resource $sftp , string $path )
Stats a symbolic link on the remote filesystem without following the link. 
This function is similar to using the lstat() function with the ssh2.sftp:// wrapper in PHP 5 and returns the same values.
</Desc>
    <FName>ssh2_sftp_mkdir</FName>
    <Desc>bool ssh2_sftp_mkdir ( resource $sftp , string $dirname [, int $mode = 0777 [, bool $recursive = FALSE ]] )
Creates a directory on the remote file server with permissions set to mode. 
This function is similar to using mkdir() with the ssh2.sftp:// wrapper.
</Desc>
    <FName>ssh2_sftp_readlink</FName>
    <Desc>string ssh2_sftp_readlink ( resource $sftp , string $link )
Returns the target of a symbolic link.
</Desc>
    <FName>ssh2_sftp_realpath</FName>
    <Desc>string ssh2_sftp_realpath ( resource $sftp , string $filename )
Translates filename into the effective real path on the remote filesystem.
</Desc>
    <FName>ssh2_sftp_rename</FName>
    <Desc>bool ssh2_sftp_rename ( resource $sftp , string $from , string $to )
Renames a file on the remote filesystem.
</Desc>
    <FName>ssh2_sftp_rmdir</FName>
    <Desc>bool ssh2_sftp_rmdir ( resource $sftp , string $dirname )
Removes a directory from the remote file server. 
This function is similar to using rmdir() with the ssh2.sftp:// wrapper.
</Desc>
    <FName>ssh2_sftp_stat</FName>
    <Desc>array ssh2_sftp_stat ( resource $sftp , string $path )
Stats a file on the remote filesystem following any symbolic links. 
This function is similar to using the stat() function with the ssh2.sftp:// wrapper in PHP 5 and returns the same values.
</Desc>
    <FName>ssh2_sftp_symlink</FName>
    <Desc>bool ssh2_sftp_symlink ( resource $sftp , string $target , string $link )
Creates a symbolic link named link on the remote filesystem pointing to target.
</Desc>
    <FName>ssh2_sftp_unlink</FName>
    <Desc>bool ssh2_sftp_unlink ( resource $sftp , string $filename )
Deletes a file on the remote filesystem.
</Desc>
    <FName>ssh2_sftp</FName>
    <Desc>resource ssh2_sftp ( resource $session )
Request the SFTP subsystem from an already connected SSH2 server.
</Desc>
    <FName>ssh2_shell</FName>
    <Desc>resource ssh2_shell ( resource $session [, string $term_type = "vanilla" [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )
Open a shell at the remote end and allocate a stream for it.
</Desc>
    <FName>ssh2_tunnel</FName>
    <Desc>resource ssh2_tunnel ( resource $session , string $host , int $port )
Open a socket stream to an arbitrary host/port by way of the currently connected SSH server.
</Desc>
    <FName>stat</FName>
    <Desc>array stat ( string $filename )
Gathers the statistics of the file named by filename. If filename is a symbolic link, statistics are from the file itself, not the symlink. 
lstat() is identical to stat() except it would instead be based off the symlinks status.
</Desc>
    <FName>stats_absolute_deviation</FName>
    <Desc>float stats_absolute_deviation ( array $a )
Returns the absolute deviation of the values in a.
</Desc>
    <FName>stats_cdf_beta</FName>
    <Desc>float stats_cdf_beta ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the beta distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, alpha, and beta denotes cumurative distribution function, the value of the random variable, and shape parameters of the beta distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxalphabeta
2xCDFalphabeta
3alphaxCDFbeta
4betaxCDFalpha
</Desc>
    <FName>stats_cdf_binomial</FName>
    <Desc>float stats_cdf_binomial ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the binomial distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, n, and p denotes cumurative distribution function, the number of successes, the number of trials, and the success rate for each trial, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxnp
2xCDFnp
3nxCDFp
4pxCDFn
</Desc>
    <FName>stats_cdf_cauchy</FName>
    <Desc>float stats_cdf_cauchy ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the Cauchy distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, x0, and gamma denotes cumurative distribution function, the value of the random variable, the location and the scale parameter of the Cauchy distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxx0gamma
2xCDFx0gamma
3x0xCDFgamma
4gammaxCDFx0
</Desc>
    <FName>stats_cdf_chisquare</FName>
    <Desc>float stats_cdf_chisquare ( float $par1 , float $par2 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the chi-square distribution. The kind of the return value and parameters (par1 and par2) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, and k denotes cumurative distribution function, the value of the random variable, and the degree of freedom of the chi-square distribution, respectively. Return value and parameterswhichReturn valuepar1par2
1CDFxk
2xCDFk
3kxCDF
</Desc>
    <FName>stats_cdf_exponential</FName>
    <Desc>float stats_cdf_exponential ( float $par1 , float $par2 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the exponential distribution. The kind of the return value and parameters (par1 and par2) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, and lambda denotes cumurative distribution function, the value of the random variable, and the rate parameter of the exponential distribution, respectively. Return value and parameterswhichReturn valuepar1par2
1CDFxlambda
2xCDFlambda
3lambdaxCDF
</Desc>
    <FName>stats_cdf_f</FName>
    <Desc>float stats_cdf_f ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the F distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, d1, and d2 denotes cumurative distribution function, the value of the random variable, and the degree of freedoms of the F distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxd1d2
2xCDFd1d2
3d1xCDFd2
4d2xCDFd1
</Desc>
    <FName>stats_cdf_gamma</FName>
    <Desc>float stats_cdf_gamma ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the gamma distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, k, and theta denotes cumurative distribution function, the value of the random variable, and the shape and the scale parameter of the gamma distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxktheta
2xCDFktheta
3kxCDFtheta
4thetaxCDFk
</Desc>
    <FName>stats_cdf_laplace</FName>
    <Desc>float stats_cdf_laplace ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the Laplace distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, mu, and b denotes cumurative distribution function, the value of the random variable, and the location and the scale parameter of the Laplace distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxmub
2xCDFmub
3muxCDFb
4bxCDFmu
</Desc>
    <FName>stats_cdf_logistic</FName>
    <Desc>float stats_cdf_logistic ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the logistic distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, mu, and s denotes cumurative distribution function, the value of the random variable, and the location and the scale parameter of the logistic distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxmus
2xCDFmus
3muxCDFs
4sxCDFmu
</Desc>
    <FName>stats_cdf_negative_binomial</FName>
    <Desc>float stats_cdf_negative_binomial ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the negative binomial distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, r, and p denotes cumurative distribution function, the number of failure, the number of success, and the success rate for each trial, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxrp
2xCDFrp
3rxCDFp
4pxCDFr
</Desc>
    <FName>stats_cdf_noncentral_chisquare</FName>
    <Desc>float stats_cdf_noncentral_chisquare ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the non-central chi-square distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, k, and lambda denotes cumurative distribution function, the value of the random variable, the degree of freedom and the non-centrality parameter of the distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxklambda
2xCDFklambda
3kxCDFlambda
4lambdaxCDFk
</Desc>
    <FName>stats_cdf_noncentral_f</FName>
    <Desc>float stats_cdf_noncentral_f ( float $par1 , float $par2 , float $par3 , float $par4 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the non-central F distribution. The kind of the return value and parameters (par1, par2, par3, and par4) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, nu1, nu2, and lambda denotes cumurative distribution function, the value of the random variable, the degree of freedoms and the non-centrality parameter of the distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3par4
1CDFxnu1nu2lambda
2xCDFnu1nu2lambda
3nu1xCDFnu2lambda
4nu2xCDFnu1lambda
5lambdaxCDFnu1nu2
</Desc>
    <FName>stats_cdf_noncentral_t</FName>
    <Desc>float stats_cdf_noncentral_t ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the non-central t-distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, nu, and mu denotes cumurative distribution function, the value of the random variable, the degrees of freedom and the non-centrality parameter of the distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxnumu
2xCDFnumu
3nuxCDFmu
4muxCDFnu
</Desc>
    <FName>stats_cdf_normal</FName>
    <Desc>float stats_cdf_normal ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the normal distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, mu, and sigma denotes cumulative distribution function, the value of the random variable, the mean and the standard deviation of the normal distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxmusigma
2xCDFmusigma
3muxCDFsigma
4sigmaxCDFmu
</Desc>
    <FName>stats_cdf_poisson</FName>
    <Desc>float stats_cdf_poisson ( float $par1 , float $par2 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the Poisson distribution. The kind of the return value and parameters (par1 and par2) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, and lambda denotes cumurative distribution function, the value of the random variable, and the parameter of the Poisson distribution, respectively. Return value and parameterswhichReturn valuepar1par2
1CDFxlambda
2xCDFlambda
3lambdaxCDF
</Desc>
    <FName>stats_cdf_t</FName>
    <Desc>float stats_cdf_t ( float $par1 , float $par2 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the t-distribution. The kind of the return value and parameters (par1 and par2) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, and nu denotes cumurative distribution function, the value of the random variable, and the degrees of freedom of the t-distribution, respectively. Return value and parameterswhichReturn valuepar1par2
1CDFxnu
2xCDFnu
3nuxCDF
</Desc>
    <FName>stats_cdf_uniform</FName>
    <Desc>float stats_cdf_uniform ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the uniform distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, a, and b denotes cumurative distribution function, the value of the random variable, the lower bound and the higher bound of the uniform distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxab
2xCDFab
3axCDFb
4bxCDFa
</Desc>
    <FName>stats_cdf_weibull</FName>
    <Desc>float stats_cdf_weibull ( float $par1 , float $par2 , float $par3 , int $which )
Returns the cumulative distribution function, its inverse, or one of its parameters, of the binomial distribution. The kind of the return value and parameters (par1, par2, and par3) are determined by which. 
The following table lists the return value and parameters by which. CDF, x, k, and lambda denotes cumurative distribution function, the value of the random variable, the shape and the scale parameter of the Weibull distribution, respectively. Return value and parameterswhichReturn valuepar1par2par3
1CDFxklambda
2xCDFklambda
3kxCDFlambda
4lambdaxCDFk
</Desc>
    <FName>stats_covariance</FName>
    <Desc>float stats_covariance ( array $a , array $b )
Returns the covariance of a and b.
</Desc>
    <FName>stats_dens_beta</FName>
    <Desc>float stats_dens_beta ( float $x , float $a , float $b )
Returns the probability density at x, where the random variable follows the beta distribution of which the shape parameters are a and b.
</Desc>
    <FName>stats_dens_cauchy</FName>
    <Desc>float stats_dens_cauchy ( float $x , float $ave , float $stdev )
Returns the probability density at x, where the random variable follows the Cauchy distribution whose location and scale are ave and stdev, respectively.
</Desc>
    <FName>stats_dens_chisquare</FName>
    <Desc>float stats_dens_chisquare ( float $x , float $dfr )
Returns the probability density at x, where the random variable follows the chi-square distribution of which the degree of freedom is dfr.
</Desc>
    <FName>stats_dens_exponential</FName>
    <Desc>float stats_dens_exponential ( float $x , float $scale )
Returns the probability density at x, where the random variable follows the exponential distribution of which the scale is scale.
</Desc>
    <FName>stats_dens_f</FName>
    <Desc>float stats_dens_f ( float $x , float $dfr1 , float $dfr2 )
Returns the probability density at x, where the random variable follows the F distribution of which the degree of freedoms are dfr1 and dfr2.
</Desc>
    <FName>stats_dens_gamma</FName>
    <Desc>float stats_dens_gamma ( float $x , float $shape , float $scale )
Returns the probability density at x, where the random variable follows the gamma distribution of which the shape parameter is shape and the scale parameter is scale.
</Desc>
    <FName>stats_dens_laplace</FName>
    <Desc>float stats_dens_laplace ( float $x , float $ave , float $stdev )
Returns the probability density at x, where the random variable follows the Laplace distribution of which the location parameter is ave and the scale parameter is stdev.
</Desc>
    <FName>stats_dens_logistic</FName>
    <Desc>float stats_dens_logistic ( float $x , float $ave , float $stdev )
Returns the probability density at x, where the random variable follows the logistic distribution of which the location parameter is ave and the scale parameter is stdev.
</Desc>
    <FName>stats_dens_normal</FName>
    <Desc>float stats_dens_normal ( float $x , float $ave , float $stdev )
Returns the probability density at x, where the random variable follows the normal distribution of which the mean is ave and the standard deviation is stdev.
</Desc>
    <FName>stats_dens_pmf_binomial</FName>
    <Desc>float stats_dens_pmf_binomial ( float $x , float $n , float $pi )
Returns the probability mass at x, where the random variable follows the binomial distribution of which the number of trials is n and the success rate is pi.
</Desc>
    <FName>stats_dens_pmf_hypergeometric</FName>
    <Desc>float stats_dens_pmf_hypergeometric ( float $n1 , float $n2 , float $N1 , float $N2 )
Returns the probability mass at n1, where the random variable follows the hypergeometric distribution of which the number of failure is n2, the number of success samples is N1, and the number of failure samples is N2.
</Desc>
    <FName>stats_dens_pmf_negative_binomial</FName>
    <Desc>float stats_dens_pmf_negative_binomial ( float $x , float $n , float $pi )
Returns the probability density at x, where the random variable follows the negative binomial distribution of which the number of the success is n and the success rate is pi.
</Desc>
    <FName>stats_dens_pmf_poisson</FName>
    <Desc>float stats_dens_pmf_poisson ( float $x , float $lb )
Returns the probability mass at x, where the random variable follows the Poisson distribution whose parameter is lb.
</Desc>
    <FName>stats_dens_t</FName>
    <Desc>float stats_dens_t ( float $x , float $dfr )
Returns the probability density at x, where the random variable follows the t-distribution of which the degree of freedom is dfr.
</Desc>
    <FName>stats_dens_uniform</FName>
    <Desc>float stats_dens_uniform ( float $x , float $a , float $b )
Returns the probability density at x, where the random variable follows the uniform distribution of which the lower bound is a and the upper bound is b.
</Desc>
    <FName>stats_dens_weibull</FName>
    <Desc>float stats_dens_weibull ( float $x , float $a , float $b )
Returns the probability density at x, where the random variable follows the Weibull distribution of which the shape parameter is a and the scale parameter is b.
</Desc>
    <FName>stats_harmonic_mean</FName>
    <Desc>number stats_harmonic_mean ( array $a )
Returns the harmonic mean of the values in a.
</Desc>
    <FName>stats_kurtosis</FName>
    <Desc>float stats_kurtosis ( array $a )
Returns the kurtosis of the values in a.
</Desc>
    <FName>stats_rand_gen_beta</FName>
    <Desc>float stats_rand_gen_beta ( float $a , float $b )
Returns a random deviate from the beta distribution with parameters A and B. The density of the beta is x^(a-1) * (1-x)^(b-1) / B(a,b) for 0 < x <. Method R. C. H. Cheng.
</Desc>
    <FName>stats_rand_gen_chisquare</FName>
    <Desc>float stats_rand_gen_chisquare ( float $df )
Returns a random deviate from the chi-square distribution where the degrees of freedom is df.
</Desc>
    <FName>stats_rand_gen_exponential</FName>
    <Desc>float stats_rand_gen_exponential ( float $av )
Returns a random deviate from the exponential distribution of which the scale is av.
</Desc>
    <FName>stats_rand_gen_f</FName>
    <Desc>float stats_rand_gen_f ( float $dfn , float $dfd )
Generates a random deviate from the F (variance ratio) distribution with "dfn" degrees of freedom in the numerator and "dfd" degrees of freedom in the denominator. Method : directly generates ratio of chisquare variates.
</Desc>
    <FName>stats_rand_gen_funiform</FName>
    <Desc>float stats_rand_gen_funiform ( float $low , float $high )
Returns a random deviate from the uniform distribution from low to high.
</Desc>
    <FName>stats_rand_gen_gamma</FName>
    <Desc>float stats_rand_gen_gamma ( float $a , float $r )
Generates a random deviate from the gamma distribution whose density is (A**R)/Gamma(R) * X**(R-1) * Exp(-A*X).
</Desc>
    <FName>stats_rand_gen_ibinomial_negative</FName>
    <Desc>int stats_rand_gen_ibinomial_negative ( int $n , float $p )
Returns a random deviate from a negative binomial distribution where the number of success is n and the success rate is p.
</Desc>
    <FName>stats_rand_gen_ibinomial</FName>
    <Desc>int stats_rand_gen_ibinomial ( int $n , float $pp )
Returns a random deviate from the binomial distribution whose number of trials is n and whose probability of an event in each trial is pp.
</Desc>
    <FName>stats_rand_gen_int</FName>
    <Desc>int stats_rand_gen_int ( void )
Returns a random integer between 1 and 2147483562
</Desc>
    <FName>stats_rand_gen_ipoisson</FName>
    <Desc>int stats_rand_gen_ipoisson ( float $mu )
Returns a random deviate from the Poisson distribution with parameter mu.
</Desc>
    <FName>stats_rand_gen_iuniform</FName>
    <Desc>int stats_rand_gen_iuniform ( int $low , int $high )
Returns a random integer from the discrete uniform distribution between low (inclusive) and high (inclusive).
</Desc>
    <FName>stats_rand_gen_noncenral_chisquare</FName>
    <Desc>float stats_rand_gen_noncenral_chisquare ( float $df , float $xnonc )
Returns a random deviate from the non-central chi-square distribution with degrees of freedom, df, and non-centrality parameter, xnonc.
</Desc>
    <FName>stats_rand_gen_noncentral_chisquare</FName>
    <Desc>float stats_rand_gen_noncentral_chisquare ( float $df , float $xnonc )
Returns a random deviate from the non-central chi-square distribution with degrees of freedom, df, and non-centrality parameter, xnonc.
</Desc>
    <FName>stats_rand_gen_noncentral_f</FName>
    <Desc>float stats_rand_gen_noncentral_f ( float $dfn , float $dfd , float $xnonc )
Returns a random deviate from the non-central F distribution where the degrees of freedoms are dfn (numerator) and dfd (denominator), and the non-centrality parameter is xnonc.
</Desc>
    <FName>stats_rand_gen_noncentral_t</FName>
    <Desc>float stats_rand_gen_noncentral_t ( float $df , float $xnonc )
Returns a random deviate from the non-central t-distribution with the degrees of freedom, df, and the non-centrality parameter, xnonc.
</Desc>
    <FName>stats_rand_gen_normal</FName>
    <Desc>float stats_rand_gen_normal ( float $av , float $sd )
Returns a random deviate from the normal distribution with mean, av, and standard deviation, sd.
</Desc>
    <FName>stats_rand_gen_t</FName>
    <Desc>float stats_rand_gen_t ( float $df )
Returns a random deviate from the t-distribution with the degrees of freedom, df.
</Desc>
    <FName>stats_rand_get_seeds</FName>
    <Desc>array stats_rand_get_seeds ( void )
Returns the current seed values of the random number generator
</Desc>
    <FName>stats_rand_phrase_to_seeds</FName>
    <Desc>array stats_rand_phrase_to_seeds ( string $phrase )
Generate two seeds for the random number generator from a phrase.
</Desc>
    <FName>stats_rand_ranf</FName>
    <Desc>float stats_rand_ranf ( void )
Returns a random floating point number from a uniform distribution between 0 (exclusive) and 1 (exclusive).
</Desc>
    <FName>stats_rand_setall</FName>
    <Desc>void stats_rand_setall ( int $iseed1 , int $iseed2 )
Set iseed1 and iseed2 as seed values to the random generator used in statistic functions.
</Desc>
    <FName>stats_skew</FName>
    <Desc>float stats_skew ( array $a )
Returns the skewness of the values in a.
</Desc>
    <FName>stats_standard_deviation</FName>
    <Desc>float stats_standard_deviation ( array $a [, bool $sample = FALSE ] )
Returns the standard deviation of the values in a.
</Desc>
    <FName>stats_stat_binomial_coef</FName>
    <Desc>float stats_stat_binomial_coef ( int $x , int $n )
Returns the binomial coefficient of n choose x.
</Desc>
    <FName>stats_stat_correlation</FName>
    <Desc>float stats_stat_correlation ( array $arr1 , array $arr2 )
Returns the Pearson correlation coefficient between arr1 and arr2.
</Desc>
    <FName>stats_stat_factorial</FName>
    <Desc>float stats_stat_factorial ( int $n )
Returns the factorial of an integer, n.
</Desc>
    <FName>stats_stat_independent_t</FName>
    <Desc>float stats_stat_independent_t ( array $arr1 , array $arr2 )
Returns the t-value of the independent two-sample t-test between arr1 and arr2. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>stats_stat_innerproduct</FName>
    <Desc>float stats_stat_innerproduct ( array $arr1 , array $arr2 )
Returns the inner product of arr1 and arr2.
</Desc>
    <FName>stats_stat_paired_t</FName>
    <Desc>float stats_stat_paired_t ( array $arr1 , array $arr2 )
Returns the t-value of the dependent t-test for paired samples arr1 and arr2.
</Desc>
    <FName>stats_stat_percentile</FName>
    <Desc>float stats_stat_percentile ( array $arr , float $perc )
Returns the perc-th percentile value of the array arr.
</Desc>
    <FName>stats_stat_powersum</FName>
    <Desc>float stats_stat_powersum ( array $arr , float $power )
Returns the sum of the power-th power of a vector represented as an array arr.
</Desc>
    <FName>stats_variance</FName>
    <Desc>float stats_variance ( array $a [, bool $sample = FALSE ] )
Returns the variance of the values in a.
</Desc>
    <FName>stomp_connect_error</FName>
    <Desc>string stomp_connect_error ( void )
Returns a string description of the last connect error.
</Desc>
    <FName>stomp_version</FName>
    <Desc>string stomp_version ( void )
Returns a string containing the version of the current stomp extension.
</Desc>
    <FName>str_getcsv</FName>
    <Desc>array str_getcsv ( string $input [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\" ]]] )
Parses a string input for fields in CSV format and returns an array containing the fields read. 
Note: 
The locale settings are taken into account by this function. If LC_CTYPE is e.g. en_US.UTF-8, strings in one-byte encodings may be read wrongly by this function.
</Desc>
    <FName>str_ireplace</FName>
    <Desc>mixed str_ireplace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )
This function returns a string or an array with all occurrences of search in subject (ignoring case) replaced with the given replace value. If you don't need fancy replacing rules, you should generally use this function instead of preg_replace() with the i modifier.
</Desc>
    <FName>str_pad</FName>
    <Desc>string str_pad ( string $input , int $pad_length [, string $pad_string = " " [, int $pad_type = STR_PAD_RIGHT ]] )
This function returns the input string padded on the left, the right, or both sides to the specified padding length. If the optional argument pad_string is not supplied, the input is padded with spaces, otherwise it is padded with characters from pad_string up to the limit.
</Desc>
    <FName>str_repeat</FName>
    <Desc>string str_repeat ( string $input , int $multiplier )
Returns input repeated multiplier times.
</Desc>
    <FName>str_replace</FName>
    <Desc>mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )
This function returns a string or an array with all occurrences of search in subject replaced with the given replace value. 
If you don't need fancy replacing rules (like regular expressions), you should always use this function instead of preg_replace().
</Desc>
    <FName>str_rot13</FName>
    <Desc>string str_rot13 ( string $str )
Performs the ROT13 encoding on the str argument and returns the resulting string. 
The ROT13 encoding simply shifts every letter by 13 places in the alphabet while leaving non-alpha characters untouched. Encoding and decoding are done by the same function, passing an encoded string as argument will return the original version.
</Desc>
    <FName>str_shuffle</FName>
    <Desc>string str_shuffle ( string $str )
str_shuffle() shuffles a string. One permutation of all possible is created. 
Caution
This function does not generate cryptographically secure values, and should not be used for cryptographic purposes. If you need a cryptographically secure value, consider using random_int(), random_bytes(), or openssl_random_pseudo_bytes() instead.
</Desc>
    <FName>str_split</FName>
    <Desc>array str_split ( string $string [, int $split_length = 1 ] )
Converts a string to an array.
</Desc>
    <FName>str_word_count</FName>
    <Desc>mixed str_word_count ( string $string [, int $format = 0 [, string $charlist ]] )
Counts the number of words inside string. If the optional format is not specified, then the return value will be an integer representing the number of words found. In the event the format is specified, the return value will be an array, content of which is dependent on the format. The possible value for the format and the resultant outputs are listed below. 
For the purpose of this function, 'word' is defined as a locale dependent string containing alphabetic characters, which also may contain, but not start with "'" and "-" characters.
</Desc>
    <FName>strcasecmp</FName>
    <Desc>int strcasecmp ( string $str1 , string $str2 )
Binary safe case-insensitive string comparison.
</Desc>
    <FName>strchr</FName>
    <Desc>This function is an alias of: strstr(). 
</Desc>
    <FName>strcmp</FName>
    <Desc>int strcmp ( string $str1 , string $str2 )
Note that this comparison is case sensitive.
</Desc>
    <FName>strcoll</FName>
    <Desc>int strcoll ( string $str1 , string $str2 )
Note that this comparison is case sensitive, and unlike strcmp() this function is not binary safe. 
strcoll() uses the current locale for doing the comparisons. If the current locale is C or POSIX, this function is equivalent to strcmp().
</Desc>
    <FName>strcspn</FName>
    <Desc>int strcspn ( string $subject , string $mask [, int $start [, int $length ]] )
Returns the length of the initial segment of subject which does not contain any of the characters in mask. 
If start and length are omitted, then all of subject will be examined. If they are included, then the effect will be the same as calling strcspn(substr($subject, $start, $length), $mask) (see substr for more information).
</Desc>
    <FName>stream_bucket_append</FName>
    <Desc>void stream_bucket_append ( resource $brigade , object $bucket )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>stream_bucket_make_writeable</FName>
    <Desc>object stream_bucket_make_writeable ( resource $brigade )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>stream_bucket_new</FName>
    <Desc>object stream_bucket_new ( resource $stream , string $buffer )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>stream_bucket_prepend</FName>
    <Desc>void stream_bucket_prepend ( resource $brigade , object $bucket )
This function can be called to prepend a bucket to a bucket brigade. It is typically called from php_user_filter::filter().
</Desc>
    <FName>stream_context_create</FName>
    <Desc>resource stream_context_create ([ array $options [, array $params ]] )
Creates and returns a stream context with any options supplied in options preset.
</Desc>
    <FName>stream_context_get_default</FName>
    <Desc>resource stream_context_get_default ([ array $options ] )
Returns the default stream context which is used whenever file operations (fopen(), file_get_contents(), etc...) are called without a context parameter. Options for the default context can optionally be specified with this function using the same syntax as stream_context_create().
</Desc>
    <FName>stream_context_get_options</FName>
    <Desc>array stream_context_get_options ( resource $stream_or_context )
Returns an array of options on the specified stream or context.
</Desc>
    <FName>stream_context_get_params</FName>
    <Desc>array stream_context_get_params ( resource $stream_or_context )
Retrieves parameter and options information from the stream or context.
</Desc>
    <FName>stream_context_set_default</FName>
    <Desc>resource stream_context_set_default ( array $options )
Set the default stream context which will be used whenever file operations (fopen(), file_get_contents(), etc...) are called without a context parameter. Uses the same syntax as stream_context_create().
</Desc>
    <FName>stream_context_set_option</FName>
    <Desc>bool stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value )
bool stream_context_set_option ( resource $stream_or_context , array $options )
Sets an option on the specified context. value is set to option for wrapper
</Desc>
    <FName>stream_context_set_params</FName>
    <Desc>bool stream_context_set_params ( resource $stream_or_context , array $params )
Sets parameters on the specified context.
</Desc>
    <FName>stream_copy_to_stream</FName>
    <Desc>int stream_copy_to_stream ( resource $source , resource $dest [, int $maxlength = -1 [, int $offset = 0 ]] )
Makes a copy of up to maxlength bytes of data from the current position (or from the offset position, if specified) in source to dest. If maxlength is not specified, all remaining content in source will be copied.
</Desc>
    <FName>stream_filter_append</FName>
    <Desc>resource stream_filter_append ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )
Adds filtername to the list of filters attached to stream.
</Desc>
    <FName>stream_filter_prepend</FName>
    <Desc>resource stream_filter_prepend ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )
Adds filtername to the list of filters attached to stream.
</Desc>
    <FName>stream_filter_register</FName>
    <Desc>bool stream_filter_register ( string $filtername , string $classname )
stream_filter_register() allows you to implement your own filter on any registered stream used with all the other filesystem functions (such as fopen(), fread() etc.).
</Desc>
    <FName>stream_filter_remove</FName>
    <Desc>bool stream_filter_remove ( resource $stream_filter )
Removes a stream filter previously added to a stream with stream_filter_prepend() or stream_filter_append(). Any data remaining in the filter's internal buffer will be flushed through to the next filter before removing it.
</Desc>
    <FName>stream_get_contents</FName>
    <Desc>string stream_get_contents ( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]] )
Identical to file_get_contents(), except that stream_get_contents() operates on an already open stream resource and returns the remaining contents in a string, up to maxlength bytes and starting at the specified offset.
</Desc>
    <FName>stream_get_filters</FName>
    <Desc>array stream_get_filters ( void )
Retrieve the list of registered filters on the running system.
</Desc>
    <FName>stream_get_line</FName>
    <Desc>string stream_get_line ( resource $handle , int $length [, string $ending ] )
Gets a line from the given handle. 
Reading ends when length bytes have been read, when the string specified by ending is found (which is not included in the return value), or on EOF (whichever comes first). 
This function is nearly identical to fgets() except in that it allows end of line delimiters other than the standard \n, \r, and \r\n, and does not return the delimiter itself.
</Desc>
    <FName>stream_get_meta_data</FName>
    <Desc>array stream_get_meta_data ( resource $stream )
Returns information about an existing stream.
</Desc>
    <FName>stream_get_transports</FName>
    <Desc>array stream_get_transports ( void )
Returns an indexed array containing the name of all socket transports available on the running system.
</Desc>
    <FName>stream_get_wrappers</FName>
    <Desc>array stream_get_wrappers ( void )
Retrieve list of registered streams available on the running system.
</Desc>
    <FName>stream_is_local</FName>
    <Desc>bool stream_is_local ( mixed $stream_or_url )
Checks if a stream, or a URL, is a local one or not.
</Desc>
    <FName>stream_isatty</FName>
    <Desc>bool stream_isatty ( resource $stream )
Determines if stream stream refers to a valid terminal type device. This is a more portable version of posix_isatty(), since it works on Windows systems too.
</Desc>
    <FName>stream_notification_callback</FName>
    <Desc>void stream_notification_callback ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max )
A callable function, used by the notification context parameter, called during an event. 
Note: 
This is not a real function, only a prototype of how the function should be.
</Desc>
    <FName>stream_register_wrapper</FName>
    <Desc>This function is an alias of: stream_wrapper_register(). 
</Desc>
    <FName>stream_resolve_include_path</FName>
    <Desc>string stream_resolve_include_path ( string $filename )
Resolve filename against the include path according to the same rules as fopen()/include.
</Desc>
    <FName>stream_select</FName>
    <Desc>int stream_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )
The stream_select() function accepts arrays of streams and waits for them to change status. Its operation is equivalent to that of the socket_select() function except in that it acts on streams.
</Desc>
    <FName>stream_set_blocking</FName>
    <Desc>bool stream_set_blocking ( resource $stream , bool $mode )
Sets blocking or non-blocking mode on a stream. 
This function works for any stream that supports non-blocking mode (currently, regular files and socket streams).
</Desc>
    <FName>stream_set_chunk_size</FName>
    <Desc>int stream_set_chunk_size ( resource $fp , int $chunk_size )
Set the stream chunk size.
</Desc>
    <FName>stream_set_read_buffer</FName>
    <Desc>int stream_set_read_buffer ( resource $stream , int $buffer )
Sets the read buffer. It's the equivalent of stream_set_write_buffer(), but for read operations.
</Desc>
    <FName>stream_set_timeout</FName>
    <Desc>bool stream_set_timeout ( resource $stream , int $seconds [, int $microseconds = 0 ] )
Sets the timeout value on stream, expressed in the sum of seconds and microseconds. 
When the stream times out, the 'timed_out' key of the array returned by stream_get_meta_data() is set to TRUE, although no error/warning is generated.
</Desc>
    <FName>stream_set_write_buffer</FName>
    <Desc>int stream_set_write_buffer ( resource $stream , int $buffer )
Sets the buffering for write operations on the given stream to buffer bytes.
</Desc>
    <FName>stream_socket_accept</FName>
    <Desc>resource stream_socket_accept ( resource $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername ]] )
Accept a connection on a socket previously created by stream_socket_server().
</Desc>
    <FName>stream_socket_client</FName>
    <Desc>resource stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]] )
Initiates a stream or datagram connection to the destination specified by remote_socket. The type of socket created is determined by the transport specified using standard URL formatting: transport://target. For Internet Domain sockets (AF_INET) such as TCP and UDP, the target portion of the remote_socket parameter should consist of a hostname or IP address followed by a colon and a port number. For Unix domain sockets, the target portion should point to the socket file on the filesystem. 
Note: 
The stream will by default be opened in blocking mode. You can switch it to non-blocking mode by using stream_set_blocking().
</Desc>
    <FName>stream_socket_enable_crypto</FName>
    <Desc>mixed stream_socket_enable_crypto ( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]] )
Enable or disable encryption on the stream. 
Once the crypto settings are established, cryptography can be turned on and off dynamically by passing TRUE or FALSE in the enable parameter.
</Desc>
    <FName>stream_socket_get_name</FName>
    <Desc>string stream_socket_get_name ( resource $handle , bool $want_peer )
Returns the local or remote name of a given socket connection.
</Desc>
    <FName>stream_socket_pair</FName>
    <Desc>array stream_socket_pair ( int $domain , int $type , int $protocol )
stream_socket_pair() creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication).
</Desc>
    <FName>stream_socket_recvfrom</FName>
    <Desc>string stream_socket_recvfrom ( resource $socket , int $length [, int $flags = 0 [, string &$address ]] )
stream_socket_recvfrom() accepts data from a remote socket up to length bytes.
</Desc>
    <FName>stream_socket_sendto</FName>
    <Desc>int stream_socket_sendto ( resource $socket , string $data [, int $flags = 0 [, string $address ]] )
Sends the specified data through the socket.
</Desc>
    <FName>stream_socket_server</FName>
    <Desc>resource stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )
Creates a stream or datagram socket on the specified local_socket. 
This function only creates a socket, to begin accepting connections use stream_socket_accept().
</Desc>
    <FName>stream_socket_shutdown</FName>
    <Desc>bool stream_socket_shutdown ( resource $stream , int $how )
Shutdowns (partially or not) a full-duplex connection. 
Note: 
The associated buffer, or buffers, may or may not be emptied.
</Desc>
    <FName>stream_supports_lock</FName>
    <Desc>bool stream_supports_lock ( resource $stream )
Tells whether the stream supports locking through flock().
</Desc>
    <FName>stream_wrapper_register</FName>
    <Desc>bool stream_wrapper_register ( string $protocol , string $classname [, int $flags = 0 ] )
Allows you to implement your own protocol handlers and streams for use with all the other filesystem functions (such as fopen(), fread() etc.).
</Desc>
    <FName>stream_wrapper_restore</FName>
    <Desc>bool stream_wrapper_restore ( string $protocol )
Restores a built-in wrapper previously unregistered with stream_wrapper_unregister().
</Desc>
    <FName>stream_wrapper_unregister</FName>
    <Desc>bool stream_wrapper_unregister ( string $protocol )
Allows you to disable an already defined stream wrapper. Once the wrapper has been disabled you may override it with a user-defined wrapper using stream_wrapper_register() or reenable it later on with stream_wrapper_restore().
</Desc>
    <FName>strftime</FName>
    <Desc>string strftime ( string $format [, int $timestamp = time() ] )
Format the time and/or date according to locale settings. Month and weekday names and other language-dependent strings respect the current locale set with setlocale(). 
Not all conversion specifiers may be supported by your C library, in which case they will not be supported by PHP's strftime(). Additionally, not all platforms support negative timestamps, so your date range may be limited to no earlier than the Unix epoch. This means that %e, %T, %R and, %D (and possibly others) - as well as dates prior to Jan 1, 1970 - will not work on Windows, some Linux distributions, and a few other operating systems. For Windows systems, a complete overview of supported conversion specifiers can be found at » MSDN.
</Desc>
    <FName>strip_tags</FName>
    <Desc>string strip_tags ( string $str [, string $allowable_tags ] )
This function tries to return a string with all NULL bytes, HTML and PHP tags stripped from a given str. It uses the same tag stripping state machine as the fgetss() function.
</Desc>
    <FName>stripcslashes</FName>
    <Desc>string stripcslashes ( string $str )
Returns a string with backslashes stripped off. Recognizes C-like \n, \r ..., octal and hexadecimal representation.
</Desc>
    <FName>stripos</FName>
    <Desc>int stripos ( string $haystack , mixed $needle [, int $offset = 0 ] )
Find the numeric position of the first occurrence of needle in the haystack string. 
Unlike the strpos(), stripos() is case-insensitive.
</Desc>
    <FName>stripslashes</FName>
    <Desc>string stripslashes ( string $str )
Un-quotes a quoted string. 
Note: 
If magic_quotes_sybase is on, no backslashes are stripped off but two apostrophes are replaced by one instead. 
An example use of stripslashes() is when the PHP directive magic_quotes_gpc is on (it was on by default before PHP 5.4), and you aren't inserting this data into a place (such as a database) that requires escaping. For example, if you're simply outputting data straight from an HTML form.
</Desc>
    <FName>stristr</FName>
    <Desc>string stristr ( string $haystack , mixed $needle [, bool $before_needle = FALSE ] )
Returns all of haystack starting from and including the first occurrence of needle to the end.
</Desc>
    <FName>strlen</FName>
    <Desc>int strlen ( string $string )
Returns the length of the given string.
</Desc>
    <FName>strnatcasecmp</FName>
    <Desc>int strnatcasecmp ( string $str1 , string $str2 )
This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would. The behaviour of this function is similar to strnatcmp(), except that the comparison is not case sensitive. For more information see: Martin Pool's » Natural Order String Comparison page.
</Desc>
    <FName>strnatcmp</FName>
    <Desc>int strnatcmp ( string $str1 , string $str2 )
This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a "natural ordering". Note that this comparison is case sensitive.
</Desc>
    <FName>strncasecmp</FName>
    <Desc>int strncasecmp ( string $str1 , string $str2 , int $len )
This function is similar to strcasecmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.
</Desc>
    <FName>strncmp</FName>
    <Desc>int strncmp ( string $str1 , string $str2 , int $len )
This function is similar to strcmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison. 
Note that this comparison is case sensitive.
</Desc>
    <FName>strpbrk</FName>
    <Desc>string strpbrk ( string $haystack , string $char_list )
strpbrk() searches the haystack string for a char_list.
</Desc>
    <FName>strpos</FName>
    <Desc>int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )
Find the numeric position of the first occurrence of needle in the haystack string.
</Desc>
    <FName>strptime</FName>
    <Desc>array strptime ( string $date , string $format )
strptime() returns an array with the date parsed, or FALSE on error. 
Month and weekday names and other language dependent strings respect the current locale set with setlocale() (LC_TIME).
</Desc>
    <FName>strrchr</FName>
    <Desc>string strrchr ( string $haystack , mixed $needle )
This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack.
</Desc>
    <FName>strrev</FName>
    <Desc>string strrev ( string $string )
Returns string, reversed.
</Desc>
    <FName>strripos</FName>
    <Desc>int strripos ( string $haystack , mixed $needle [, int $offset = 0 ] )
Find the numeric position of the last occurrence of needle in the haystack string. 
Unlike the strrpos(), strripos() is case-insensitive.
</Desc>
    <FName>strrpos</FName>
    <Desc>int strrpos ( string $haystack , mixed $needle [, int $offset = 0 ] )
Find the numeric position of the last occurrence of needle in the haystack string.
</Desc>
    <FName>strspn</FName>
    <Desc>int strspn ( string $subject , string $mask [, int $start [, int $length ]] )
Finds the length of the initial segment of subject that contains only characters from mask. 
If start and length are omitted, then all of subject will be examined. If they are included, then the effect will be the same as calling strspn(substr($subject, $start, $length), $mask) (see substr for more information). 
The line of code: 
<?php
$var = strspn("42 is the answer to the 128th question.", "1234567890");
?> 
will assign 2 to $var, because the string "42" is the initial segment of subject that consists only of characters contained within "1234567890".
</Desc>
    <FName>strstr</FName>
    <Desc>string strstr ( string $haystack , mixed $needle [, bool $before_needle = FALSE ] )
Returns part of haystack string starting from and including the first occurrence of needle to the end of haystack. 
Note: 
This function is case-sensitive. For case-insensitive searches, use stristr(). 
Note: 
If you only want to determine if a particular needle occurs within haystack, use the faster and less memory intensive function strpos() instead.
</Desc>
    <FName>strtok</FName>
    <Desc>string strtok ( string $str , string $token )
string strtok ( string $token )
strtok() splits a string (str) into smaller strings (tokens), with each token being delimited by any character from token. That is, if you have a string like "This is an example string" you could tokenize this string into its individual words by using the space character as the token. 
Note that only the first call to strtok uses the string argument. Every subsequent call to strtok only needs the token to use, as it keeps track of where it is in the current string. To start over, or to tokenize a new string you simply call strtok with the string argument again to initialize it. Note that you may put multiple tokens in the token parameter. The string will be tokenized when any one of the characters in the argument is found.
</Desc>
    <FName>strtolower</FName>
    <Desc>string strtolower ( string $string )
Returns string with all alphabetic characters converted to lowercase. 
Note that 'alphabetic' is determined by the current locale. This means that e.g. in the default "C" locale, characters such as umlaut-A (A) will not be converted.
</Desc>
    <FName>strtotime</FName>
    <Desc>int strtotime ( string $time [, int $now = time() ] )
The function expects to be given a string containing an English date format and will try to parse that format into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 UTC), relative to the timestamp given in now, or the current time if now is not supplied. 
Each parameter of this function uses the default time zone unless a time zone is specified in that parameter. Be careful not to use different time zones in each parameter unless that is intended. See date_default_timezone_get() on the various ways to define the default time zone.
</Desc>
    <FName>strtoupper</FName>
    <Desc>string strtoupper ( string $string )
Returns string with all alphabetic characters converted to uppercase. 
Note that 'alphabetic' is determined by the current locale. For instance, in the default "C" locale characters such as umlaut-a (a) will not be converted.
</Desc>
    <FName>strtr</FName>
    <Desc>string strtr ( string $str , string $from , string $to )
string strtr ( string $str , array $replace_pairs )
If given three arguments, this function returns a copy of str where all occurrences of each (single-byte) character in from have been translated to the corresponding character in to, i.e., every occurrence of $from[$n] has been replaced with $to[$n], where $n is a valid offset in both arguments. 
If from and to have different lengths, the extra characters in the longer of the two are ignored. The length of str will be the same as the return value's. 
If given two arguments, the second should be an array in the form array('from' => 'to', ...). The return value is a string where all the occurrences of the array keys have been replaced by the corresponding values. The longest keys will be tried first. Once a substring has been replaced, its new value will not be searched again. 
In this case, the keys and the values may have any length, provided that there is no empty key; additionally, the length of the return value may differ from that of str. However, this function will be the most efficient when all the keys have the same size.
</Desc>
    <FName>strval</FName>
    <Desc>string strval ( mixed $var )
Get the string value of a variable. See the documentation on string for more information on converting to string. 
This function performs no formatting on the returned value. If you are looking for a way to format a numeric value as a string, please see sprintf() or number_format().
</Desc>
    <FName>substr_compare</FName>
    <Desc>int substr_compare ( string $main_str , string $str , int $offset [, int $length [, bool $case_insensitivity = FALSE ]] )
substr_compare() compares main_str from position offset with str up to length characters.
</Desc>
    <FName>substr_count</FName>
    <Desc>int substr_count ( string $haystack , string $needle [, int $offset = 0 [, int $length ]] )
substr_count() returns the number of times the needle substring occurs in the haystack string. Please note that needle is case sensitive. 
Note: 
This function doesn't count overlapped substrings. See the example below!
</Desc>
    <FName>substr_replace</FName>
    <Desc>mixed substr_replace ( mixed $string , mixed $replacement , mixed $start [, mixed $length ] )
substr_replace() replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement.
</Desc>
    <FName>substr</FName>
    <Desc>string substr ( string $string , int $start [, int $length ] )
Returns the portion of string specified by the start and length parameters.
</Desc>
    <FName>svn_add</FName>
    <Desc>bool svn_add ( string $path [, bool $recursive = TRUE [, bool $force = FALSE ]] )
Adds the file, directory or symbolic link at path to the working directory. The item will be added to the repository the next time you call svn_commit() on the working copy.
</Desc>
    <FName>svn_auth_get_parameter</FName>
    <Desc>string svn_auth_get_parameter ( string $key )
Retrieves authentication parameter at key. For a list of valid keys and their meanings, consult the authentication constants list.
</Desc>
    <FName>svn_auth_set_parameter</FName>
    <Desc>void svn_auth_set_parameter ( string $key , string $value )
Sets authentication parameter at key to value. For a list of valid keys and their meanings, consult the authentication constants list.
</Desc>
    <FName>svn_blame</FName>
    <Desc>array svn_blame ( string $repository_url [, int $revision_no = SVN_REVISION_HEAD ] )
Get the SVN blame of a file from a repository URL.
</Desc>
    <FName>svn_cat</FName>
    <Desc>string svn_cat ( string $repos_url [, int $revision_no ] )
Returns the contents of the URL repos_url to a file in the repository, optionally at revision number revision_no.
</Desc>
    <FName>svn_checkout</FName>
    <Desc>bool svn_checkout ( string $repos , string $targetpath [, int $revision [, int $flags = 0 ]] )
Checks out a working copy from the repository at repos to targetpath at revision revision.
</Desc>
    <FName>svn_cleanup</FName>
    <Desc>bool svn_cleanup ( string $workingdir )
Recursively cleanup working copy directory workingdir, finishing any incomplete operations and removing working copy locks. Use when a working copy is in limbo and needs to be usable again.
</Desc>
    <FName>svn_client_version</FName>
    <Desc>string svn_client_version ( void )
Returns the version of the SVN client libraries
</Desc>
    <FName>svn_commit</FName>
    <Desc>array svn_commit ( string $log , array $targets [, bool $recursive = TRUE ] )
Commits changes made in the local working copy files enumerated in the targets array to the repository, with the log message log. Directories in the targets array will be recursively committed unless recursive is set to FALSE. 
Note: This function does not have any parameters for specifying authentication, so a username and password must be set using svn_auth_set_parameter()
</Desc>
    <FName>svn_delete</FName>
    <Desc>bool svn_delete ( string $path [, bool $force = FALSE ] )
Deletes the file, directory or symbolic link at path from the working directory. The item will be deleted from the repository the next time you call svn_commit() on the working copy.
</Desc>
    <FName>svn_diff</FName>
    <Desc>array svn_diff ( string $path1 , int $rev1 , string $path2 , int $rev2 )
Recursively diffs two paths, path1 and path2. 
Note: 
This is not a general-purpose diff utility. Only local files that are versioned may be diffed: other files will fail.
</Desc>
    <FName>svn_export</FName>
    <Desc>bool svn_export ( string $frompath , string $topath [, bool $working_copy = TRUE [, int $revision_no = -1 ]] )
Export the contents of either a working copy or repository into a 'clean' directory.
</Desc>
    <FName>svn_fs_abort_txn</FName>
    <Desc>bool svn_fs_abort_txn ( resource $txn )
Warning
This function is currently not documented; only its argument list is available. 
Abort a transaction, returns true if everything is okay, false otherwise 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_apply_text</FName>
    <Desc>resource svn_fs_apply_text ( resource $root , string $path )
Warning
This function is currently not documented; only its argument list is available. 
Creates and returns a stream that will be used to replace 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_begin_txn2</FName>
    <Desc>resource svn_fs_begin_txn2 ( resource $repos , int $rev )
Warning
This function is currently not documented; only its argument list is available. 
Create a new transaction 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_change_node_prop</FName>
    <Desc>bool svn_fs_change_node_prop ( resource $root , string $path , string $name , string $value )
Warning
This function is currently not documented; only its argument list is available. 
Return true if everything is ok, false otherwise 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_check_path</FName>
    <Desc>int svn_fs_check_path ( resource $fsroot , string $path )
Warning
This function is currently not documented; only its argument list is available. 
Determines what kind of item lives at path in a given repository fsroot 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_contents_changed</FName>
    <Desc>bool svn_fs_contents_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 )
Warning
This function is currently not documented; only its argument list is available. 
Return true if content is different, false otherwise 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_copy</FName>
    <Desc>bool svn_fs_copy ( resource $from_root , string $from_path , resource $to_root , string $to_path )
Warning
This function is currently not documented; only its argument list is available. 
Copies a file or a directory, returns true if all is ok, false otherwise 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_delete</FName>
    <Desc>bool svn_fs_delete ( resource $root , string $path )
Warning
This function is currently not documented; only its argument list is available. 
Deletes a file or a directory, return true if all is ok, false otherwise 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_dir_entries</FName>
    <Desc>array svn_fs_dir_entries ( resource $fsroot , string $path )
Warning
This function is currently not documented; only its argument list is available. 
Enumerates the directory entries under path; returns a hash of dir names to file type 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_file_contents</FName>
    <Desc>resource svn_fs_file_contents ( resource $fsroot , string $path )
Warning
This function is currently not documented; only its argument list is available. 
Returns a stream to access the contents of a file from a given version of the fs 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_file_length</FName>
    <Desc>int svn_fs_file_length ( resource $fsroot , string $path )
Warning
This function is currently not documented; only its argument list is available. 
Returns the length of a file from a given version of the fs 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_is_dir</FName>
    <Desc>bool svn_fs_is_dir ( resource $root , string $path )
Warning
This function is currently not documented; only its argument list is available. 
Return true if the path points to a directory, false otherwise 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_is_file</FName>
    <Desc>bool svn_fs_is_file ( resource $root , string $path )
Warning
This function is currently not documented; only its argument list is available. 
Return true if the path points to a file, false otherwise 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_make_dir</FName>
    <Desc>bool svn_fs_make_dir ( resource $root , string $path )
Warning
This function is currently not documented; only its argument list is available. 
Creates a new empty directory, returns true if all is ok, false otherwise 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_make_file</FName>
    <Desc>bool svn_fs_make_file ( resource $root , string $path )
Warning
This function is currently not documented; only its argument list is available. 
Creates a new empty file, returns true if all is ok, false otherwise 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_node_created_rev</FName>
    <Desc>int svn_fs_node_created_rev ( resource $fsroot , string $path )
Warning
This function is currently not documented; only its argument list is available. 
Returns the revision in which path under fsroot was created 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_node_prop</FName>
    <Desc>string svn_fs_node_prop ( resource $fsroot , string $path , string $propname )
Warning
This function is currently not documented; only its argument list is available. 
Returns the value of a property for a node 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_props_changed</FName>
    <Desc>bool svn_fs_props_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 )
Warning
This function is currently not documented; only its argument list is available. 
Return true if props are different, false otherwise 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_revision_prop</FName>
    <Desc>string svn_fs_revision_prop ( resource $fs , int $revnum , string $propname )
Warning
This function is currently not documented; only its argument list is available. 
Fetches the value of a named property 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_revision_root</FName>
    <Desc>resource svn_fs_revision_root ( resource $fs , int $revnum )
Warning
This function is currently not documented; only its argument list is available. 
Get a handle on a specific version of the repository root 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_txn_root</FName>
    <Desc>resource svn_fs_txn_root ( resource $txn )
Warning
This function is currently not documented; only its argument list is available. 
Creates and returns a transaction root 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_fs_youngest_rev</FName>
    <Desc>int svn_fs_youngest_rev ( resource $fs )
Warning
This function is currently not documented; only its argument list is available. 
Returns the number of the youngest revision in the filesystem 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_import</FName>
    <Desc>bool svn_import ( string $path , string $url , bool $nonrecursive )
Commits unversioned path into repository at url. If path is a directory and nonrecursive is FALSE, the directory will be imported recursively.
</Desc>
    <FName>svn_log</FName>
    <Desc>array svn_log ( string $repos_url [, int $start_revision [, int $end_revision [, int $limit = 0 [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY ]]]] )
svn_log() returns the complete history of the item at the repository URL repos_url, or the history of a specific revision if start_revision is set. This function is equivalent to svn log --verbose -r $start_revision $repos_url.
</Desc>
    <FName>svn_ls</FName>
    <Desc>array svn_ls ( string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = FALSE [, bool $peg = FALSE ]]] )
This function queries the repository URL and returns a list of files and directories, optionally from a specific revision. This is equivalent to svn list $repos_url[@$revision_no] 
Note: 
This function does not work with working copies. repos_url must be a repository URL.
</Desc>
    <FName>svn_mkdir</FName>
    <Desc>bool svn_mkdir ( string $path [, string $log_message ] )
Creates a directory in a working copy or repository.
</Desc>
    <FName>svn_repos_create</FName>
    <Desc>resource svn_repos_create ( string $path [, array $config [, array $fsconfig ]] )
Warning
This function is currently not documented; only its argument list is available. 
Create a new subversion repository at path 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_repos_fs_begin_txn_for_commit</FName>
    <Desc>resource svn_repos_fs_begin_txn_for_commit ( resource $repos , int $rev , string $author , string $log_msg )
Warning
This function is currently not documented; only its argument list is available. 
Create a new transaction 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_repos_fs_commit_txn</FName>
    <Desc>int svn_repos_fs_commit_txn ( resource $txn )
Warning
This function is currently not documented; only its argument list is available. 
Commits a transaction and returns the new revision 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_repos_fs</FName>
    <Desc>resource svn_repos_fs ( resource $repos )
Warning
This function is currently not documented; only its argument list is available. 
Gets a handle on the filesystem for a repository 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_repos_hotcopy</FName>
    <Desc>bool svn_repos_hotcopy ( string $repospath , string $destpath , bool $cleanlogs )
Warning
This function is currently not documented; only its argument list is available. 
Make a hot-copy of the repos at repospath; copy it to destpath 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_repos_open</FName>
    <Desc>resource svn_repos_open ( string $path )
Warning
This function is currently not documented; only its argument list is available. 
Open a shared lock on a repository. 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_repos_recover</FName>
    <Desc>bool svn_repos_recover ( string $path )
Warning
This function is currently not documented; only its argument list is available. 
Run recovery procedures on the repository located at path. 
Notes
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
</Desc>
    <FName>svn_revert</FName>
    <Desc>bool svn_revert ( string $path [, bool $recursive = FALSE ] )
Revert any local changes to the path in a working copy.
</Desc>
    <FName>svn_status</FName>
    <Desc>array svn_status ( string $path [, int $flags = 0 ] )
Returns the status of working copy files and directories, giving modifications, additions, deletions and other changes to items in the working copy.
</Desc>
    <FName>svn_update</FName>
    <Desc>int svn_update ( string $path [, int $revno = SVN_REVISION_HEAD [, bool $recurse = TRUE ]] )
Update working copy at path to revision revno. If recurse is true, directories will be recursively updated.
</Desc>
    <FName>swoole_async_dns_lookup</FName>
    <Desc>bool swoole_async_dns_lookup ( string $hostname , callable $callback )
</Desc>
    <FName>swoole_async_read</FName>
    <Desc>bool swoole_async_read ( string $filename , callable $callback [, int $chunk_size = 65536 [, int $offset = 0 ]] )
</Desc>
    <FName>swoole_async_readfile</FName>
    <Desc>bool swoole_async_readfile ( string $filename , callable $callback )
</Desc>
    <FName>swoole_async_set</FName>
    <Desc>void swoole_async_set ( array $settings )
</Desc>
    <FName>swoole_async_write</FName>
    <Desc>bool swoole_async_write ( string $filename , string $content [, integer $offset [, callable $callback ]] )
</Desc>
    <FName>swoole_async_writefile</FName>
    <Desc>bool swoole_async_writefile ( string $filename , string $content [, callable $callback [, int $flags = 0 ]] )
</Desc>
    <FName>swoole_client_select</FName>
    <Desc>int swoole_client_select ( array &$read_array , array &$write_array , array &$error_array [, float $timeout = 0.5 ] )
</Desc>
    <FName>swoole_cpu_num</FName>
    <Desc>int swoole_cpu_num ( void )
</Desc>
    <FName>swoole_errno</FName>
    <Desc>int swoole_errno ( void )
</Desc>
    <FName>swoole_event_add</FName>
    <Desc>int swoole_event_add ( int $fd [, callable $read_callback [, callable $write_callback [, int $events = 0 ]]] )
</Desc>
    <FName>swoole_event_defer</FName>
    <Desc>bool swoole_event_defer ( callable $callback )
</Desc>
    <FName>swoole_event_del</FName>
    <Desc>bool swoole_event_del ( int $fd )
</Desc>
    <FName>swoole_event_exit</FName>
    <Desc>void swoole_event_exit ( void )
</Desc>
    <FName>swoole_event_set</FName>
    <Desc>bool swoole_event_set ( int $fd [, callable $read_callback [, callable $write_callback [, int $events = 0 ]]] )
</Desc>
    <FName>swoole_event_wait</FName>
    <Desc>void swoole_event_wait ( void )
</Desc>
    <FName>swoole_event_write</FName>
    <Desc>bool swoole_event_write ( int $fd , string $data )
</Desc>
    <FName>swoole_get_local_ip</FName>
    <Desc>array swoole_get_local_ip ( void )
</Desc>
    <FName>swoole_last_error</FName>
    <Desc>int swoole_last_error ( void )
</Desc>
    <FName>swoole_load_module</FName>
    <Desc>mixed swoole_load_module ( string $filename )
</Desc>
    <FName>swoole_select</FName>
    <Desc>int swoole_select ( array &$read_array , array &$write_array , array &$error_array [, float $timeout ] )
</Desc>
    <FName>swoole_set_process_name</FName>
    <Desc>void swoole_set_process_name ( string $process_name [, int $size = 128 ] )
</Desc>
    <FName>swoole_strerror</FName>
    <Desc>string swoole_strerror ( int $errno [, int $error_type = 0 ] )
</Desc>
    <FName>swoole_timer_after</FName>
    <Desc>int swoole_timer_after ( int $ms , callable $callback [, mixed $param ] )
</Desc>
    <FName>swoole_timer_exists</FName>
    <Desc>bool swoole_timer_exists ( int $timer_id )
</Desc>
    <FName>swoole_timer_tick</FName>
    <Desc>int swoole_timer_tick ( int $ms , callable $callback [, mixed $param ] )
</Desc>
    <FName>swoole_version</FName>
    <Desc>string swoole_version ( void )
</Desc>
    <FName>sybase_affected_rows</FName>
    <Desc>int sybase_affected_rows ([ resource $link_identifier ] )
sybase_affected_rows() returns the number of rows affected by the last INSERT, UPDATE or DELETE query on the server associated with the specified link identifier. 
This command is not effective for SELECT statements, only on statements which modify records. To retrieve the number of rows returned from a SELECT, use sybase_num_rows().
</Desc>
    <FName>sybase_close</FName>
    <Desc>bool sybase_close ([ resource $link_identifier ] )
sybase_close() closes the link to a Sybase database that's associated with the specified link link_identifier. 
Note that this isn't usually necessary, as non-persistent open links are automatically closed at the end of the script's execution. 
sybase_close() will not close persistent links generated by sybase_pconnect().
</Desc>
    <FName>sybase_connect</FName>
    <Desc>resource sybase_connect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname [, bool $new = FALSE ]]]]]] )
sybase_connect() establishes a connection to a Sybase server. 
In case a second call is made to sybase_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned. 
The link to the server will be closed as soon as the execution of the script ends, unless it's closed earlier by explicitly calling sybase_close().
</Desc>
    <FName>sybase_data_seek</FName>
    <Desc>bool sybase_data_seek ( resource $result_identifier , int $row_number )
sybase_data_seek() moves the internal row pointer of the Sybase result associated with the specified result identifier to pointer to the specified row number. The next call to sybase_fetch_row() would return that row.
</Desc>
    <FName>sybase_deadlock_retry_count</FName>
    <Desc>void sybase_deadlock_retry_count ( int $retry_count )
Using sybase_deadlock_retry_count(), the number of retries can be defined in cases of deadlocks. By default, every deadlock is retried an infinite number of times or until the process is killed by Sybase, the executing script is killed (for instance, by set_time_limit()) or the query succeeds.
</Desc>
    <FName>sybase_fetch_array</FName>
    <Desc>array sybase_fetch_array ( resource $result )
sybase_fetch_array() is an extended version of sybase_fetch_row(). In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys. 
An important thing to note is that using sybase_fetch_array() is NOT significantly slower than using sybase_fetch_row(), while it provides a significant added value.
</Desc>
    <FName>sybase_fetch_assoc</FName>
    <Desc>array sybase_fetch_assoc ( resource $result )
sybase_fetch_assoc() is a version of sybase_fetch_row() that uses column names instead of integers for indices in the result array. Columns from different tables with the same names are returned as name, name1, name2, ..., nameN. 
An important thing to note is that using sybase_fetch_assoc() is NOT significantly slower than using sybase_fetch_row(), while it provides a significant added value.
</Desc>
    <FName>sybase_fetch_field</FName>
    <Desc>object sybase_fetch_field ( resource $result [, int $field_offset = -1 ] )
sybase_fetch_field() can be used in order to obtain information about fields in a certain query result.
</Desc>
    <FName>sybase_fetch_object</FName>
    <Desc>object sybase_fetch_object ( resource $result [, mixed $object ] )
sybase_fetch_object() is similar to sybase_fetch_assoc(), with one difference - an object is returned, instead of an array. 
Speed-wise, the function is identical to sybase_fetch_array(), and almost as quick as sybase_fetch_row() (the difference is insignificant).
</Desc>
    <FName>sybase_fetch_row</FName>
    <Desc>array sybase_fetch_row ( resource $result )
sybase_fetch_row() fetches one row of data from the result associated with the specified result identifier. 
Subsequent call to sybase_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.
</Desc>
    <FName>sybase_field_seek</FName>
    <Desc>bool sybase_field_seek ( resource $result , int $field_offset )
Seeks to the specified field offset. If the next call to sybase_fetch_field() won't include a field offset, this field would be returned.
</Desc>
    <FName>sybase_free_result</FName>
    <Desc>bool sybase_free_result ( resource $result )
sybase_free_result() only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call sybase_free_result() with the result identifier as an argument and the associated result memory will be freed.
</Desc>
    <FName>sybase_get_last_message</FName>
    <Desc>string sybase_get_last_message ( void )
sybase_get_last_message() returns the last message reported by the server.
</Desc>
    <FName>sybase_min_client_severity</FName>
    <Desc>void sybase_min_client_severity ( int $severity )
sybase_min_client_severity() sets the minimum client severity level.
</Desc>
    <FName>sybase_min_error_severity</FName>
    <Desc>void sybase_min_error_severity ( int $severity )
sybase_min_error_severity() sets the minimum error severity level.
</Desc>
    <FName>sybase_min_message_severity</FName>
    <Desc>void sybase_min_message_severity ( int $severity )
sybase_min_message_severity() sets the minimum message severity level.
</Desc>
    <FName>sybase_min_server_severity</FName>
    <Desc>void sybase_min_server_severity ( int $severity )
sybase_min_server_severity() sets the minimum server severity level.
</Desc>
    <FName>sybase_num_fields</FName>
    <Desc>int sybase_num_fields ( resource $result )
sybase_num_fields() returns the number of fields in a result set.
</Desc>
    <FName>sybase_num_rows</FName>
    <Desc>int sybase_num_rows ( resource $result )
sybase_num_rows() returns the number of rows in a result set.
</Desc>
    <FName>sybase_pconnect</FName>
    <Desc>resource sybase_pconnect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname ]]]]] )
sybase_pconnect() acts very much like sybase_connect() with two major differences. 
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password. If one is found, an identifier for it will be returned instead of opening a new connection. 
Second, the connection to the SQL server will not be closed when the execution of the script ends. Instead, the link will remain open for future use (sybase_close() will not close links established by sybase_pconnect()). 
This type of links is therefore called 'persistent'.
</Desc>
    <FName>sybase_query</FName>
    <Desc>mixed sybase_query ( string $query [, resource $link_identifier ] )
sybase_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
</Desc>
    <FName>sybase_result</FName>
    <Desc>string sybase_result ( resource $result , int $row , mixed $field )
Returns the contents of the cell at the row and offset in the specified Sybase result set. 
When working on large result sets, you should consider using one of the functions that fetch an entire row (specified below). As these functions return the contents of multiple cells in one function call, they're MUCH quicker than sybase_result(). Also, note that specifying a numeric offset for the field argument is much quicker than specifying a fieldname or tablename.fieldname argument. 
Recommended high-performance alternatives: sybase_fetch_row(), sybase_fetch_array() and sybase_fetch_object().
</Desc>
    <FName>sybase_select_db</FName>
    <Desc>bool sybase_select_db ( string $database_name [, resource $link_identifier ] )
sybase_select_db() sets the current active database on the server that's associated with the specified link identifier. 
Every subsequent call to sybase_query() will be made on the active database.
</Desc>
    <FName>sybase_set_message_handler</FName>
    <Desc>bool sybase_set_message_handler ( callable $handler [, resource $link_identifier ] )
sybase_set_message_handler() sets a user function to handle messages generated by the server. You may specify the name of a global function, or use an array to specify an object reference and a method name.
</Desc>
    <FName>sybase_unbuffered_query</FName>
    <Desc>resource sybase_unbuffered_query ( string $query , resource $link_identifier [, bool $store_result ] )
sybase_unbuffered_query() sends a query to the currently active database on the server that's associated with the specified link identifier. If the link identifier isn't specified, the last opened link is assumed. If no link is open, the function tries to establish a link as if sybase_connect() was called, and use it. 
Unlike sybase_query(), sybase_unbuffered_query() reads only the first row of the result set. sybase_fetch_array() and similar function read more rows as needed. sybase_data_seek() reads up to the target row. The behavior may produce better performance for large result sets. 
sybase_num_rows() will only return the correct number of rows if all result sets have been read. To Sybase, the number of rows is not known and is therefore computed by the client implementation. 
Note: 
If you don't read all of the resultsets prior to executing the next query, PHP will raise a warning and cancel all of the pending results. To get rid of this, use sybase_free_result() which will cancel pending results of an unbuffered query.
</Desc>
    <FName>symlink</FName>
    <Desc>bool symlink ( string $target , string $link )
symlink() creates a symbolic link to the existing target with the specified name link.
</Desc>
    <FName>sys_get_temp_dir</FName>
    <Desc>string sys_get_temp_dir ( void )
Returns the path of the directory PHP stores temporary files in by default.
</Desc>
    <FName>sys_getloadavg</FName>
    <Desc>array sys_getloadavg ( void )
Returns three samples representing the average system load (the number of processes in the system run queue) over the last 1, 5 and 15 minutes, respectively.
</Desc>
    <FName>syslog</FName>
    <Desc>bool syslog ( int $priority , string $message )
syslog() generates a log message that will be distributed by the system logger. 
For information on setting up a user defined log handler, see the syslog.conf (5) Unix manual page. More information on the syslog facilities and option can be found in the man pages for syslog (3) on Unix machines.
</Desc>
    <FName>system</FName>
    <Desc>string system ( string $command [, int &$return_var ] )
system() is just like the C version of the function in that it executes the given command and outputs the result. 
The system() call also tries to automatically flush the web server's output buffer after each line of output if PHP is running as a server module. 
If you need to execute a command and have all the data from the command passed directly back without any interference, use the passthru() function.
</Desc>
    <FName>taint</FName>
    <Desc>bool taint ( string &$string [, string $... ] )
Make a string tainted. This is used for testing purpose only.
</Desc>
    <FName>tan</FName>
    <Desc>float tan ( float $arg )
tan() returns the tangent of the arg parameter. The arg parameter is in radians.
</Desc>
    <FName>tanh</FName>
    <Desc>float tanh ( float $arg )
Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg).
</Desc>
    <FName>tcpwrap_check</FName>
    <Desc>bool tcpwrap_check ( string $daemon , string $address [, string $user [, bool $nodns = FALSE ]] )
This function consults the /etc/hosts.allow and /etc/hosts.deny files to check if access to service daemon should be granted or denied for a client.
</Desc>
    <FName>tempnam</FName>
    <Desc>string tempnam ( string $dir , string $prefix )
Creates a file with a unique filename, with access permission set to 0600, in the specified directory. If the directory does not exist or is not writable, tempnam() may generate a file in the system's temporary directory, and return the full path to that file, including its name.
</Desc>
    <FName>textdomain</FName>
    <Desc>string textdomain ( string $text_domain = NULL )
This function sets the domain to search within when calls are made to gettext(), usually the named after an application.
</Desc>
    <FName>tidy_access_count</FName>
    <Desc>int tidy_access_count ( tidy $object )
tidy_access_count() returns the number of accessibility warnings found for the specified document.
</Desc>
    <FName>tidy_config_count</FName>
    <Desc>int tidy_config_count ( tidy $object )
Returns the number of errors encountered in the configuration of the specified tidy object.
</Desc>
    <FName>tidy_error_count</FName>
    <Desc>int tidy_error_count ( tidy $object )
Returns the number of Tidy errors encountered for the specified document.
</Desc>
    <FName>tidy_get_output</FName>
    <Desc>string tidy_get_output ( tidy $object )
Gets a string with the repaired html.
</Desc>
    <FName>tidy_load_config</FName>
    <Desc>void tidy_load_config ( string $filename , string $encoding )
Loads a Tidy configuration file, with the specified encoding.
</Desc>
    <FName>tidy_reset_config</FName>
    <Desc>bool tidy_reset_config ( void )
This function restores the Tidy configuration to the default values.
</Desc>
    <FName>tidy_save_config</FName>
    <Desc>bool tidy_save_config ( string $filename )
Saves current settings to the specified file. Only non-default values are written.
</Desc>
    <FName>tidy_set_encoding</FName>
    <Desc>bool tidy_set_encoding ( string $encoding )
Sets the encoding for input/output documents.
</Desc>
    <FName>tidy_setopt</FName>
    <Desc>bool tidy_setopt ( string $option , mixed $value )
tidy_setopt() updates the specified option with a new value.
</Desc>
    <FName>tidy_warning_count</FName>
    <Desc>int tidy_warning_count ( tidy $object )
Returns the number of Tidy warnings encountered for the specified document.
</Desc>
    <FName>time_nanosleep</FName>
    <Desc>mixed time_nanosleep ( int $seconds , int $nanoseconds )
Delays program execution for the given number of seconds and nanoseconds.
</Desc>
    <FName>time_sleep_until</FName>
    <Desc>bool time_sleep_until ( float $timestamp )
Makes the script sleep until the specified timestamp.
</Desc>
    <FName>time</FName>
    <Desc>int time ( void )
Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).
</Desc>
    <FName>timezone_name_from_abbr</FName>
    <Desc>string timezone_name_from_abbr ( string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]] )
</Desc>
    <FName>timezone_version_get</FName>
    <Desc>string timezone_version_get ( void )
Returns the current version of the timezonedb.
</Desc>
    <FName>tmpfile</FName>
    <Desc>resource tmpfile ( void )
Creates a temporary file with a unique name in read-write (w+) mode and returns a file handle . 
The file is automatically removed when closed (for example, by calling fclose(), or when there are no remaining references to the file handle returned by tmpfile()), or when the script ends. 
For details, consult your system documentation on the tmpfile(3) function, as well as the stdio.h header file.
</Desc>
    <FName>token_get_all</FName>
    <Desc>array token_get_all ( string $source [, int $flags = 0 ] )
token_get_all() parses the given source string into PHP language tokens using the Zend engine's lexical scanner. 
For a list of parser tokens, see List of Parser Tokens, or use token_name() to translate a token value into its string representation.
</Desc>
    <FName>token_name</FName>
    <Desc>string token_name ( int $token )
token_name() gets the symbolic name for a PHP token value.
</Desc>
    <FName>touch</FName>
    <Desc>bool touch ( string $filename [, int $time = time() [, int $atime ]] )
Attempts to set the access and modification times of the file named in the filename parameter to the value given in time. Note that the access time is always modified, regardless of the number of parameters. 
If the file does not exist, it will be created.
</Desc>
    <FName>trader_acos</FName>
    <Desc>array trader_acos ( array $real )
Calculates the arc cosine for each value in real and returns the resulting array.
</Desc>
    <FName>trader_ad</FName>
    <Desc>array trader_ad ( array $high , array $low , array $close , array $volume )
</Desc>
    <FName>trader_add</FName>
    <Desc>array trader_add ( array $real0 , array $real1 )
Calculates the vector addition of real0 to real1 and returns the resulting vector.
</Desc>
    <FName>trader_adosc</FName>
    <Desc>array trader_adosc ( array $high , array $low , array $close , array $volume [, int $fastPeriod [, int $slowPeriod ]] )
</Desc>
    <FName>trader_adx</FName>
    <Desc>array trader_adx ( array $high , array $low , array $close [, int $timePeriod ] )
</Desc>
    <FName>trader_adxr</FName>
    <Desc>array trader_adxr ( array $high , array $low , array $close [, int $timePeriod ] )
</Desc>
    <FName>trader_apo</FName>
    <Desc>array trader_apo ( array $real [, int $fastPeriod [, int $slowPeriod [, int $mAType ]]] )
</Desc>
    <FName>trader_aroon</FName>
    <Desc>array trader_aroon ( array $high , array $low [, int $timePeriod ] )
</Desc>
    <FName>trader_aroonosc</FName>
    <Desc>array trader_aroonosc ( array $high , array $low [, int $timePeriod ] )
</Desc>
    <FName>trader_asin</FName>
    <Desc>array trader_asin ( array $real )
Calculates the arc sine for each value in real and returns the resulting array.
</Desc>
    <FName>trader_atan</FName>
    <Desc>array trader_atan ( array $real )
Calculates the arc tangent for each value in real and returns the resulting array.
</Desc>
    <FName>trader_atr</FName>
    <Desc>array trader_atr ( array $high , array $low , array $close [, int $timePeriod ] )
</Desc>
    <FName>trader_avgprice</FName>
    <Desc>array trader_avgprice ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_bbands</FName>
    <Desc>array trader_bbands ( array $real [, int $timePeriod [, float $nbDevUp [, float $nbDevDn [, int $mAType ]]]] )
</Desc>
    <FName>trader_beta</FName>
    <Desc>array trader_beta ( array $real0 , array $real1 [, int $timePeriod ] )
</Desc>
    <FName>trader_bop</FName>
    <Desc>array trader_bop ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cci</FName>
    <Desc>array trader_cci ( array $high , array $low , array $close [, int $timePeriod ] )
</Desc>
    <FName>trader_cdl2crows</FName>
    <Desc>array trader_cdl2crows ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdl3blackcrows</FName>
    <Desc>array trader_cdl3blackcrows ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdl3inside</FName>
    <Desc>array trader_cdl3inside ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdl3linestrike</FName>
    <Desc>array trader_cdl3linestrike ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdl3outside</FName>
    <Desc>array trader_cdl3outside ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdl3starsinsouth</FName>
    <Desc>array trader_cdl3starsinsouth ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdl3whitesoldiers</FName>
    <Desc>array trader_cdl3whitesoldiers ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlabandonedbaby</FName>
    <Desc>array trader_cdlabandonedbaby ( array $open , array $high , array $low , array $close [, float $penetration ] )
</Desc>
    <FName>trader_cdladvanceblock</FName>
    <Desc>array trader_cdladvanceblock ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlbelthold</FName>
    <Desc>array trader_cdlbelthold ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlbreakaway</FName>
    <Desc>array trader_cdlbreakaway ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlclosingmarubozu</FName>
    <Desc>array trader_cdlclosingmarubozu ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlconcealbabyswall</FName>
    <Desc>array trader_cdlconcealbabyswall ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlcounterattack</FName>
    <Desc>array trader_cdlcounterattack ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdldarkcloudcover</FName>
    <Desc>array trader_cdldarkcloudcover ( array $open , array $high , array $low , array $close [, float $penetration ] )
</Desc>
    <FName>trader_cdldoji</FName>
    <Desc>array trader_cdldoji ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdldojistar</FName>
    <Desc>array trader_cdldojistar ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdldragonflydoji</FName>
    <Desc>array trader_cdldragonflydoji ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlengulfing</FName>
    <Desc>array trader_cdlengulfing ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdleveningdojistar</FName>
    <Desc>array trader_cdleveningdojistar ( array $open , array $high , array $low , array $close [, float $penetration ] )
</Desc>
    <FName>trader_cdleveningstar</FName>
    <Desc>array trader_cdleveningstar ( array $open , array $high , array $low , array $close [, float $penetration ] )
</Desc>
    <FName>trader_cdlgapsidesidewhite</FName>
    <Desc>array trader_cdlgapsidesidewhite ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlgravestonedoji</FName>
    <Desc>array trader_cdlgravestonedoji ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlhammer</FName>
    <Desc>array trader_cdlhammer ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlhangingman</FName>
    <Desc>array trader_cdlhangingman ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlharami</FName>
    <Desc>array trader_cdlharami ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlharamicross</FName>
    <Desc>array trader_cdlharamicross ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlhighwave</FName>
    <Desc>array trader_cdlhighwave ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlhikkake</FName>
    <Desc>array trader_cdlhikkake ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlhikkakemod</FName>
    <Desc>array trader_cdlhikkakemod ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlhomingpigeon</FName>
    <Desc>array trader_cdlhomingpigeon ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlidentical3crows</FName>
    <Desc>array trader_cdlidentical3crows ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlinneck</FName>
    <Desc>array trader_cdlinneck ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlinvertedhammer</FName>
    <Desc>array trader_cdlinvertedhammer ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlkicking</FName>
    <Desc>array trader_cdlkicking ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlkickingbylength</FName>
    <Desc>array trader_cdlkickingbylength ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlladderbottom</FName>
    <Desc>array trader_cdlladderbottom ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdllongleggeddoji</FName>
    <Desc>array trader_cdllongleggeddoji ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdllongline</FName>
    <Desc>array trader_cdllongline ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlmarubozu</FName>
    <Desc>array trader_cdlmarubozu ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlmatchinglow</FName>
    <Desc>array trader_cdlmatchinglow ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlmathold</FName>
    <Desc>array trader_cdlmathold ( array $open , array $high , array $low , array $close [, float $penetration ] )
</Desc>
    <FName>trader_cdlmorningdojistar</FName>
    <Desc>array trader_cdlmorningdojistar ( array $open , array $high , array $low , array $close [, float $penetration ] )
</Desc>
    <FName>trader_cdlmorningstar</FName>
    <Desc>array trader_cdlmorningstar ( array $open , array $high , array $low , array $close [, float $penetration ] )
</Desc>
    <FName>trader_cdlonneck</FName>
    <Desc>array trader_cdlonneck ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlpiercing</FName>
    <Desc>array trader_cdlpiercing ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlrickshawman</FName>
    <Desc>array trader_cdlrickshawman ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlrisefall3methods</FName>
    <Desc>array trader_cdlrisefall3methods ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlseparatinglines</FName>
    <Desc>array trader_cdlseparatinglines ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlshootingstar</FName>
    <Desc>array trader_cdlshootingstar ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlshortline</FName>
    <Desc>array trader_cdlshortline ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlspinningtop</FName>
    <Desc>array trader_cdlspinningtop ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlstalledpattern</FName>
    <Desc>array trader_cdlstalledpattern ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlsticksandwich</FName>
    <Desc>array trader_cdlsticksandwich ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdltakuri</FName>
    <Desc>array trader_cdltakuri ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdltasukigap</FName>
    <Desc>array trader_cdltasukigap ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlthrusting</FName>
    <Desc>array trader_cdlthrusting ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdltristar</FName>
    <Desc>array trader_cdltristar ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlunique3river</FName>
    <Desc>array trader_cdlunique3river ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlupsidegap2crows</FName>
    <Desc>array trader_cdlupsidegap2crows ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_cdlxsidegap3methods</FName>
    <Desc>array trader_cdlxsidegap3methods ( array $open , array $high , array $low , array $close )
</Desc>
    <FName>trader_ceil</FName>
    <Desc>array trader_ceil ( array $real )
Calculates the next highest integer for each value in real and returns the resulting array.
</Desc>
    <FName>trader_cmo</FName>
    <Desc>array trader_cmo ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_correl</FName>
    <Desc>array trader_correl ( array $real0 , array $real1 [, int $timePeriod ] )
</Desc>
    <FName>trader_cos</FName>
    <Desc>array trader_cos ( array $real )
Calculates the cosine for each value in real and returns the resulting array.
</Desc>
    <FName>trader_cosh</FName>
    <Desc>array trader_cosh ( array $real )
Calculates the hyperbolic cosine for each value in real and returns the resulting array.
</Desc>
    <FName>trader_dema</FName>
    <Desc>array trader_dema ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_div</FName>
    <Desc>array trader_div ( array $real0 , array $real1 )
Divides each value from real0 by the corresponding value from real1 and returns the resulting array.
</Desc>
    <FName>trader_dx</FName>
    <Desc>array trader_dx ( array $high , array $low , array $close [, int $timePeriod ] )
</Desc>
    <FName>trader_ema</FName>
    <Desc>array trader_ema ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_errno</FName>
    <Desc>int trader_errno ( void )
Get error code of the last operation.
</Desc>
    <FName>trader_exp</FName>
    <Desc>array trader_exp ( array $real )
Calculates e raised to the power of each value in real. Returns an array with the calculated data.
</Desc>
    <FName>trader_floor</FName>
    <Desc>array trader_floor ( array $real )
Calculates the next lowest integer for each value in real and returns the resulting array.
</Desc>
    <FName>trader_get_compat</FName>
    <Desc>int trader_get_compat ( void )
Get compatibility mode which affects the way calculations are done by all the extension functions.
</Desc>
    <FName>trader_get_unstable_period</FName>
    <Desc>int trader_get_unstable_period ( int $functionId )
Get unstable period factor for a particular function.
</Desc>
    <FName>trader_ht_dcperiod</FName>
    <Desc>array trader_ht_dcperiod ( array $real )
</Desc>
    <FName>trader_ht_dcphase</FName>
    <Desc>array trader_ht_dcphase ( array $real )
</Desc>
    <FName>trader_ht_phasor</FName>
    <Desc>array trader_ht_phasor ( array $real )
</Desc>
    <FName>trader_ht_sine</FName>
    <Desc>array trader_ht_sine ( array $real )
</Desc>
    <FName>trader_ht_trendline</FName>
    <Desc>array trader_ht_trendline ( array $real )
</Desc>
    <FName>trader_ht_trendmode</FName>
    <Desc>array trader_ht_trendmode ( array $real )
</Desc>
    <FName>trader_kama</FName>
    <Desc>array trader_kama ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_linearreg_angle</FName>
    <Desc>array trader_linearreg_angle ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_linearreg_intercept</FName>
    <Desc>array trader_linearreg_intercept ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_linearreg_slope</FName>
    <Desc>array trader_linearreg_slope ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_linearreg</FName>
    <Desc>array trader_linearreg ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_ln</FName>
    <Desc>array trader_ln ( array $real )
Calculates the natural logarithm for each value in real and returns the resulting array.
</Desc>
    <FName>trader_log10</FName>
    <Desc>array trader_log10 ( array $real )
Calculates the base-10 logarithm for each value in real and returns the resulting array.
</Desc>
    <FName>trader_ma</FName>
    <Desc>array trader_ma ( array $real [, int $timePeriod [, int $mAType ]] )
</Desc>
    <FName>trader_macd</FName>
    <Desc>array trader_macd ( array $real [, int $fastPeriod [, int $slowPeriod [, int $signalPeriod ]]] )
</Desc>
    <FName>trader_macdext</FName>
    <Desc>array trader_macdext ( array $real [, int $fastPeriod [, int $fastMAType [, int $slowPeriod [, int $slowMAType [, int $signalPeriod [, int $signalMAType ]]]]]] )
</Desc>
    <FName>trader_macdfix</FName>
    <Desc>array trader_macdfix ( array $real [, int $signalPeriod ] )
</Desc>
    <FName>trader_mama</FName>
    <Desc>array trader_mama ( array $real [, float $fastLimit [, float $slowLimit ]] )
</Desc>
    <FName>trader_mavp</FName>
    <Desc>array trader_mavp ( array $real , array $periods [, int $minPeriod [, int $maxPeriod [, int $mAType ]]] )
</Desc>
    <FName>trader_max</FName>
    <Desc>array trader_max ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_maxindex</FName>
    <Desc>array trader_maxindex ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_medprice</FName>
    <Desc>array trader_medprice ( array $high , array $low )
</Desc>
    <FName>trader_mfi</FName>
    <Desc>array trader_mfi ( array $high , array $low , array $close , array $volume [, int $timePeriod ] )
</Desc>
    <FName>trader_midpoint</FName>
    <Desc>array trader_midpoint ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_midprice</FName>
    <Desc>array trader_midprice ( array $high , array $low [, int $timePeriod ] )
</Desc>
    <FName>trader_min</FName>
    <Desc>array trader_min ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_minindex</FName>
    <Desc>array trader_minindex ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_minmax</FName>
    <Desc>array trader_minmax ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_minmaxindex</FName>
    <Desc>array trader_minmaxindex ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_minus_di</FName>
    <Desc>array trader_minus_di ( array $high , array $low , array $close [, int $timePeriod ] )
</Desc>
    <FName>trader_minus_dm</FName>
    <Desc>array trader_minus_dm ( array $high , array $low [, int $timePeriod ] )
</Desc>
    <FName>trader_mom</FName>
    <Desc>array trader_mom ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_mult</FName>
    <Desc>array trader_mult ( array $real0 , array $real1 )
Calculates the vector dot product of real0 with real1 and returns the resulting vector.
</Desc>
    <FName>trader_natr</FName>
    <Desc>array trader_natr ( array $high , array $low , array $close [, int $timePeriod ] )
</Desc>
    <FName>trader_obv</FName>
    <Desc>array trader_obv ( array $real , array $volume )
</Desc>
    <FName>trader_plus_di</FName>
    <Desc>array trader_plus_di ( array $high , array $low , array $close [, int $timePeriod ] )
</Desc>
    <FName>trader_plus_dm</FName>
    <Desc>array trader_plus_dm ( array $high , array $low [, int $timePeriod ] )
</Desc>
    <FName>trader_ppo</FName>
    <Desc>array trader_ppo ( array $real [, int $fastPeriod [, int $slowPeriod [, int $mAType ]]] )
</Desc>
    <FName>trader_roc</FName>
    <Desc>array trader_roc ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_rocp</FName>
    <Desc>array trader_rocp ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_rocr</FName>
    <Desc>array trader_rocr ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_rocr100</FName>
    <Desc>array trader_rocr100 ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_rsi</FName>
    <Desc>array trader_rsi ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_sar</FName>
    <Desc>array trader_sar ( array $high , array $low [, float $acceleration [, float $maximum ]] )
</Desc>
    <FName>trader_sarext</FName>
    <Desc>array trader_sarext ( array $high , array $low [, float $startValue [, float $offsetOnReverse [, float $accelerationInitLong [, float $accelerationLong [, float $accelerationMaxLong [, float $accelerationInitShort [, float $accelerationShort [, float $accelerationMaxShort ]]]]]]]] )
</Desc>
    <FName>trader_set_compat</FName>
    <Desc>void trader_set_compat ( int $compatId )
Set compatibility mode which will affect the way calculations are done by all the extension functions.
</Desc>
    <FName>trader_set_unstable_period</FName>
    <Desc>void trader_set_unstable_period ( int $functionId , int $timePeriod )
Influences unstable period factor for functions, which are sensible to it. More information about unstable periods can be found on the » TA-Lib API documentation page.
</Desc>
    <FName>trader_sin</FName>
    <Desc>array trader_sin ( array $real )
Calculates the sine for each value in real and returns the resulting array.
</Desc>
    <FName>trader_sinh</FName>
    <Desc>array trader_sinh ( array $real )
Calculates the hyperbolic sine for each value in real and returns the resulting array.
</Desc>
    <FName>trader_sma</FName>
    <Desc>array trader_sma ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_sqrt</FName>
    <Desc>array trader_sqrt ( array $real )
Calculates the square root of each value in real and returns the resulting array.
</Desc>
    <FName>trader_stddev</FName>
    <Desc>array trader_stddev ( array $real [, int $timePeriod [, float $nbDev ]] )
</Desc>
    <FName>trader_stoch</FName>
    <Desc>array trader_stoch ( array $high , array $low , array $close [, int $fastK_Period [, int $slowK_Period [, int $slowK_MAType [, int $slowD_Period [, int $slowD_MAType ]]]]] )
</Desc>
    <FName>trader_stochf</FName>
    <Desc>array trader_stochf ( array $high , array $low , array $close [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType ]]] )
</Desc>
    <FName>trader_stochrsi</FName>
    <Desc>array trader_stochrsi ( array $real [, int $timePeriod [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType ]]]] )
</Desc>
    <FName>trader_sub</FName>
    <Desc>array trader_sub ( array $real0 , array $real1 )
Calculates the vector subtraction of real1 from real0 and returns the resulting vector.
</Desc>
    <FName>trader_sum</FName>
    <Desc>array trader_sum ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_t3</FName>
    <Desc>array trader_t3 ( array $real [, int $timePeriod [, float $vFactor ]] )
</Desc>
    <FName>trader_tan</FName>
    <Desc>array trader_tan ( array $real )
Calculates the tangent for each value in real and returns the resulting array.
</Desc>
    <FName>trader_tanh</FName>
    <Desc>array trader_tanh ( array $real )
Calculates the hyperbolic tangent for each value in real and returns the resulting array.
</Desc>
    <FName>trader_tema</FName>
    <Desc>array trader_tema ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_trange</FName>
    <Desc>array trader_trange ( array $high , array $low , array $close )
</Desc>
    <FName>trader_trima</FName>
    <Desc>array trader_trima ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_trix</FName>
    <Desc>array trader_trix ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_tsf</FName>
    <Desc>array trader_tsf ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trader_typprice</FName>
    <Desc>array trader_typprice ( array $high , array $low , array $close )
</Desc>
    <FName>trader_ultosc</FName>
    <Desc>array trader_ultosc ( array $high , array $low , array $close [, int $timePeriod1 [, int $timePeriod2 [, int $timePeriod3 ]]] )
</Desc>
    <FName>trader_var</FName>
    <Desc>array trader_var ( array $real [, int $timePeriod [, float $nbDev ]] )
</Desc>
    <FName>trader_wclprice</FName>
    <Desc>array trader_wclprice ( array $high , array $low , array $close )
</Desc>
    <FName>trader_willr</FName>
    <Desc>array trader_willr ( array $high , array $low , array $close [, int $timePeriod ] )
</Desc>
    <FName>trader_wma</FName>
    <Desc>array trader_wma ( array $real [, int $timePeriod ] )
</Desc>
    <FName>trait_exists</FName>
    <Desc>bool trait_exists ( string $traitname [, bool $autoload ] )
</Desc>
    <FName>trigger_error</FName>
    <Desc>bool trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] )
Used to trigger a user error condition, it can be used in conjunction with the built-in error handler, or with a user defined function that has been set as the new error handler (set_error_handler()). 
This function is useful when you need to generate a particular response to an exception at runtime.
</Desc>
    <FName>trim</FName>
    <Desc>string trim ( string $str [, string $character_mask = " \t\n\r\0\x0B" ] )
This function returns a string with whitespace stripped from the beginning and end of str. Without the second parameter, trim() will strip these characters: 
" " (ASCII 32 (0x20)), an ordinary space. 
"\t" (ASCII 9 (0x09)), a tab. 
"\n" (ASCII 10 (0x0A)), a new line (line feed). 
"\r" (ASCII 13 (0x0D)), a carriage return. 
"\0" (ASCII 0 (0x00)), the NUL-byte. 
"\x0B" (ASCII 11 (0x0B)), a vertical tab.
</Desc>
    <FName>uasort</FName>
    <Desc>bool uasort ( array &$array , callable $value_compare_func )
This function sorts an array such that array indices maintain their correlation with the array elements they are associated with, using a user-defined comparison function. 
This is used mainly when sorting associative arrays where the actual element order is significant. 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined.
</Desc>
    <FName>ucfirst</FName>
    <Desc>string ucfirst ( string $str )
Returns a string with the first character of str capitalized, if that character is alphabetic. 
Note that 'alphabetic' is determined by the current locale. For instance, in the default "C" locale characters such as umlaut-a (a) will not be converted.
</Desc>
    <FName>ucwords</FName>
    <Desc>string ucwords ( string $str [, string $delimiters = " \t\r\n\f\v" ] )
Returns a string with the first character of each word in str capitalized, if that character is alphabetic. 
The definition of a word is any string of characters that is immediately after any character listed in the delimiters parameter (By default these are: space, form-feed, newline, carriage return, horizontal tab, and vertical tab).
</Desc>
    <FName>udm_add_search_limit</FName>
    <Desc>bool udm_add_search_limit ( resource $agent , int $var , string $val )
udm_add_search_limit() adds search restrictions.
</Desc>
    <FName>udm_alloc_agent_array</FName>
    <Desc>resource udm_alloc_agent_array ( array $databases )
udm_alloc_agent_array() will create an agent with multiple database connections.
</Desc>
    <FName>udm_alloc_agent</FName>
    <Desc>resource udm_alloc_agent ( string $dbaddr [, string $dbmode ] )
Allocate a mnoGoSearch session.
</Desc>
    <FName>udm_api_version</FName>
    <Desc>int udm_api_version ( void )
Gets the mnoGoSearch API version. 
This function allows the user to identify which API functions are available, e.g. udm_get_doc_count() function is only available in mnoGoSearch 3.1.11 or later.
</Desc>
    <FName>udm_cat_list</FName>
    <Desc>array udm_cat_list ( resource $agent , string $category )
Gets all the categories on the same level with the current one. 
The function can be useful for developing categories tree browser.
</Desc>
    <FName>udm_cat_path</FName>
    <Desc>array udm_cat_path ( resource $agent , string $category )
Returns an array describing the path in the categories tree from the tree root to the current one, specified by category.
</Desc>
    <FName>udm_check_charset</FName>
    <Desc>bool udm_check_charset ( resource $agent , string $charset )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>udm_clear_search_limits</FName>
    <Desc>bool udm_clear_search_limits ( resource $agent )
udm_clear_search_limits() resets defined search limitations.
</Desc>
    <FName>udm_crc32</FName>
    <Desc>int udm_crc32 ( resource $agent , string $str )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>udm_errno</FName>
    <Desc>int udm_errno ( resource $agent )
Receiving numeric agent error code.
</Desc>
    <FName>udm_error</FName>
    <Desc>string udm_error ( resource $agent )
Gets the agent error message.
</Desc>
    <FName>udm_find</FName>
    <Desc>resource udm_find ( resource $agent , string $query )
Performs a search. 
The search itself. The first argument - session, the next one - query itself. To find something just type words you want to find and press SUBMIT button. For example, "mysql odbc". You should not use quotes " in query, they are written here only to divide a query from other text. mnoGoSearch will find all documents that contain word "mysql" and/or word "odbc". Best documents having bigger weights will be displayed first. If you use search mode ALL, search will return documents that contain both (or more) words you entered. In case you use mode ANY, the search will return list of documents that contain any of the words you entered. If you want more advanced results you may use query language. You should select "bool" match mode in the search from.
</Desc>
    <FName>udm_free_agent</FName>
    <Desc>int udm_free_agent ( resource $agent )
Freeing up memory allocated for agent session.
</Desc>
    <FName>udm_free_ispell_data</FName>
    <Desc>bool udm_free_ispell_data ( int $agent )
Frees the memory allocated for ispell data.
</Desc>
    <FName>udm_free_res</FName>
    <Desc>bool udm_free_res ( resource $res )
Freeing up memory allocated for results.
</Desc>
    <FName>udm_get_doc_count</FName>
    <Desc>int udm_get_doc_count ( resource $agent )
udm_get_doc_count() returns the number of documents in the database.
</Desc>
    <FName>udm_get_res_field</FName>
    <Desc>string udm_get_res_field ( resource $res , int $row , int $field )
Fetch a mnoGoSearch result field.
</Desc>
    <FName>udm_get_res_param</FName>
    <Desc>string udm_get_res_param ( resource $res , int $param )
Gets the mnoGoSearch result parameters.
</Desc>
    <FName>udm_hash32</FName>
    <Desc>int udm_hash32 ( resource $agent , string $str )
udm_hash32() will take a string str and return a quite unique 32-bit hash number from it.
</Desc>
    <FName>udm_load_ispell_data</FName>
    <Desc>bool udm_load_ispell_data ( resource $agent , int $var , string $val1 , string $val2 , int $flag )
udm_load_ispell_data() loads ispell data. 
After using this function to free memory allocated for ispell data, please use udm_free_ispell_data(), even if you use UDM_ISPELL_TYPE_SERVER mode.
</Desc>
    <FName>udm_set_agent_param</FName>
    <Desc>bool udm_set_agent_param ( resource $agent , int $var , string $val )
Defines mnoGoSearch session parameters.
</Desc>
    <FName>UI\Draw\Text\Font\fontFamilies</FName>
    <Desc>array UI\Draw\Text\Font\fontFamilies ( void )
Returns an array of valid font families for the current system
</Desc>
    <FName>UI\quit</FName>
    <Desc>void UI\quit ( void )
Shall cause the main loop to be exited
</Desc>
    <FName>UI\run</FName>
    <Desc>void UI\run ([ int $flags ] )
Shall cause PHP to enter into the main loop, by default control will not be returned to the caller
</Desc>
    <FName>uksort</FName>
    <Desc>bool uksort ( array &$array , callable $key_compare_func )
uksort() will sort the keys of an array using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function. 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined.
</Desc>
    <FName>umask</FName>
    <Desc>int umask ([ int $mask ] )
umask() sets PHP's umask to mask & 0777 and returns the old umask. When PHP is being used as a server module, the umask is restored when each request is finished.
</Desc>
    <FName>uniqid</FName>
    <Desc>string uniqid ([ string $prefix = "" [, bool $more_entropy = FALSE ]] )
Gets a prefixed unique identifier based on the current time in microseconds. 
Caution
This function does not generate cryptographically secure values, and should not be used for cryptographic purposes. If you need a cryptographically secure value, consider using random_int(), random_bytes(), or openssl_random_pseudo_bytes() instead.
Warning 
This function does not guarantee uniqueness of return value. Since most systems adjust system clock by NTP or like, system time is changed constantly. Therefore, it is possible that this function does not return unique ID for the process/thread. Use more_entropy to increase likelihood of uniqueness.
</Desc>
    <FName>unixtojd</FName>
    <Desc>int unixtojd ([ int $timestamp = time() ] )
Return the Julian Day for a Unix timestamp (seconds since 1.1.1970), or for the current day if no timestamp is given. Either way, the time is regarded as local time (not UTC).
</Desc>
    <FName>unlink</FName>
    <Desc>bool unlink ( string $filename [, resource $context ] )
Deletes filename. Similar to the Unix C unlink() function. An E_WARNING level error will be generated on failure.
</Desc>
    <FName>unpack</FName>
    <Desc>array unpack ( string $format , string $data [, int $offset = 0 ] )
Unpacks from a binary string into an array according to the given format. 
The unpacked data is stored in an associative array. To accomplish this you have to name the different format codes and separate them by a slash /. If a repeater argument is present, then each of the array keys will have a sequence number behind the given name.
</Desc>
    <FName>unregister_tick_function</FName>
    <Desc>void unregister_tick_function ( string $function_name )
De-registers the function named by function_name so it is no longer executed when a tick is called.
</Desc>
    <FName>unserialize</FName>
    <Desc>mixed unserialize ( string $str [, array $options ] )
unserialize() takes a single serialized variable and converts it back into a PHP value. 
Warning 
Do not pass untrusted user input to unserialize() regardless of the options value of allowed_classes. Unserialization can result in code being loaded and executed due to object instantiation and autoloading, and a malicious user may be able to exploit this. Use a safe, standard data interchange format such as JSON (via json_decode() and json_encode()) if you need to pass serialized data to the user. 
If you need to unserialize externally-stored serialized data, consider using hash_hmac() for data validation. Make sure data is not modified by anyone but you.
</Desc>
    <FName>unset</FName>
    <Desc>void unset ( mixed $var [, mixed $... ] )
unset() destroys the specified variables. 
The behavior of unset() inside of a function can vary depending on what type of variable you are attempting to destroy. 
If a globalized variable is unset() inside of a function, only the local variable is destroyed. The variable in the calling environment will retain the same value as before unset() was called. 
<?php
function destroy_foo() 
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?> 
The above example will output:
bar
To unset() a global variable inside of a function, then use the $GLOBALS array to do so: 
<?php
function foo() 
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?> 
If a variable that is PASSED BY REFERENCE is unset() inside of a function, only the local variable is destroyed. The variable in the calling environment will retain the same value as before unset() was called. 
<?php
function foo(&$bar) 
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?> 
The above example will output:
something
something
If a static variable is unset() inside of a function, unset() destroys the variable only in the context of the rest of a function. Following calls will restore the previous value of a variable. 
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Before unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "after unset: $bar\n";
}

foo();
foo();
foo();
?> 
The above example will output:
Before unset: 1, after unset: 23
Before unset: 2, after unset: 23
Before unset: 3, after unset: 23
</Desc>
    <FName>untaint</FName>
    <Desc>bool untaint ( string &$string [, string $... ] )
Untaint strings
</Desc>
    <FName>uopz_add_function</FName>
    <Desc>bool uopz_add_function ( string $function , Closure $handler [, int &$flags = ZEND_ACC_PUBLIC ] )
bool uopz_add_function ( string $class , string $function , Closure $handler [, int &$flags = ZEND_ACC_PUBLIC [, int &$all = TRUE ]] )
Adds a non-existent function or method.
</Desc>
    <FName>uopz_allow_exit</FName>
    <Desc>void uopz_allow_exit ( bool $allow )
By default uopz disables the exit opcode, so exit() calls are practically ignored. uopz_allow_exit() allows to control this behavior.
</Desc>
    <FName>uopz_backup</FName>
    <Desc>void uopz_backup ( string $function )
void uopz_backup ( string $class , string $function )
Backup a function at runtime, to be restored on shutdown
</Desc>
    <FName>uopz_compose</FName>
    <Desc>void uopz_compose ( string $name , array $classes [, array $methods [, array $properties [, int $flags ]]] )
Creates a new class of the given name that implements, extends, or uses all of the provided classes
</Desc>
    <FName>uopz_copy</FName>
    <Desc>Closure uopz_copy ( string $function )
Closure uopz_copy ( string $class , string $function )
Copy a function by name
</Desc>
    <FName>uopz_del_function</FName>
    <Desc>bool uopz_del_function ( string $function )
bool uopz_del_function ( string $class , string $function [, int &$all = TRUE ] )
Deletes a previously added function or method.
</Desc>
    <FName>uopz_delete</FName>
    <Desc>void uopz_delete ( string $function )
void uopz_delete ( string $class , string $function )
Deletes a function or method
</Desc>
    <FName>uopz_extend</FName>
    <Desc>bool uopz_extend ( string $class , string $parent )
Makes class extend parent
</Desc>
    <FName>uopz_flags</FName>
    <Desc>int uopz_flags ( string $function , int $flags )
int uopz_flags ( string $class , string $function , int $flags )
Get or set the flags on a class or function entry at runtime
</Desc>
    <FName>uopz_function</FName>
    <Desc>void uopz_function ( string $function , Closure $handler [, int $modifiers ] )
void uopz_function ( string $class , string $function , Closure $handler [, int $modifiers ] )
Creates a function at runtime
</Desc>
    <FName>uopz_get_exit_status</FName>
    <Desc>mixed uopz_get_exit_status ( void )
Retrieves the last set exit status, i.e. the value passed to exit().
</Desc>
    <FName>uopz_get_hook</FName>
    <Desc>Closure uopz_get_hook ( string $function )
Closure uopz_get_hook ( string $class , string $function )
Gets the previously set hook on a function or method.
</Desc>
    <FName>uopz_get_mock</FName>
    <Desc>mixed uopz_get_mock ( string $class )
Returns the current mock for class.
</Desc>
    <FName>uopz_get_property</FName>
    <Desc>mixed uopz_get_property ( string $class , string $property )
mixed uopz_get_property ( object $instance , string $property )
Gets the value of a static class property, if class is given, or the value of an instance property, if instance is given.
</Desc>
    <FName>uopz_get_return</FName>
    <Desc>mixed uopz_get_return ( string $function )
mixed uopz_get_return ( string $class , string $function )
Gets the return value of the function previously set by uopz_set_return().
</Desc>
    <FName>uopz_get_static</FName>
    <Desc>array uopz_get_static ( string $class , string $function )
array uopz_get_static ( string $function )
Gets the static variables from function or method scope.
</Desc>
    <FName>uopz_implement</FName>
    <Desc>bool uopz_implement ( string $class , string $interface )
Makes class implement interface
</Desc>
    <FName>uopz_overload</FName>
    <Desc>void uopz_overload ( int $opcode , Callable $callable )
Overloads the specified opcode with the user defined function
</Desc>
    <FName>uopz_redefine</FName>
    <Desc>bool uopz_redefine ( string $constant , mixed $value )
bool uopz_redefine ( string $class , string $constant , mixed $value )
Redefines the given constant as value
</Desc>
    <FName>uopz_rename</FName>
    <Desc>void uopz_rename ( string $function , string $rename )
void uopz_rename ( string $class , string $function , string $rename )
Renames function to rename 
Note: 
If both functions exist, this effectively swaps their names
</Desc>
    <FName>uopz_restore</FName>
    <Desc>void uopz_restore ( string $function )
void uopz_restore ( string $class , string $function )
Restore a previously backed up function
</Desc>
    <FName>uopz_set_hook</FName>
    <Desc>bool uopz_set_hook ( string $function , Closure $hook )
bool uopz_set_hook ( string $class , string $function , Closure $hook )
Sets a hook to execute when entering a function or method.
</Desc>
    <FName>uopz_set_mock</FName>
    <Desc>void uopz_set_mock ( string $class , mixed $mock )
If mock is a string containing the name of a class then it will be instantiated instead of class. mock can also be an object.
</Desc>
    <FName>uopz_set_property</FName>
    <Desc>void uopz_set_property ( string $class , string $property , mixed $value )
void uopz_set_property ( object $instance , string $property , mixed $value )
Sets the value of an existing static class property, if class is given, or the value of an existing instance property, if instance is given.
</Desc>
    <FName>uopz_set_return</FName>
    <Desc>bool uopz_set_return ( string $function , mixed $value [, bool $execute = FALSE ] )
bool uopz_set_return ( string $class , string $function , mixed $value [, bool $execute = FALSE ] )
Sets the return value of the function to value. If value is a Closure and execute is set, the Closure will be executed in place of the original function. 
Note: 
This function replaces uopz_rename().
</Desc>
    <FName>uopz_set_static</FName>
    <Desc>void uopz_set_static ( string $function , array $static )
void uopz_set_static ( string $class , string $function , array $static )
Sets the static variables in function or method scope.
</Desc>
    <FName>uopz_undefine</FName>
    <Desc>bool uopz_undefine ( string $constant )
bool uopz_undefine ( string $class , string $constant )
Removes the constant at runtime
</Desc>
    <FName>uopz_unset_hook</FName>
    <Desc>bool uopz_unset_hook ( string $function )
bool uopz_unset_hook ( string $class , string $function )
Removes the previously set hook on a function or method.
</Desc>
    <FName>uopz_unset_mock</FName>
    <Desc>void uopz_unset_mock ( string $class )
Unsets the previously set mock for class.
</Desc>
    <FName>uopz_unset_return</FName>
    <Desc>bool uopz_unset_return ( string $function )
bool uopz_unset_return ( string $class , string $function )
Unsets the return value of the function previously set by uopz_set_return().
</Desc>
    <FName>urldecode</FName>
    <Desc>string urldecode ( string $str )
Decodes any %## encoding in the given string. Plus symbols ('+') are decoded to a space character.
</Desc>
    <FName>urlencode</FName>
    <Desc>string urlencode ( string $str )
This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page.
</Desc>
    <FName>use_soap_error_handler</FName>
    <Desc>bool use_soap_error_handler ([ bool $handler = TRUE ] )
This function sets whether or not to use the SOAP error handler in the SOAP server. It will return the previous value. If set to TRUE, details of errors in a SoapServer application will be sent to the client as a SOAP fault message. If FALSE, the standard PHP error handler is used. The default is to send error to the client as SOAP fault message.
</Desc>
    <FName>user_error</FName>
    <Desc>This function is an alias of: trigger_error(). 
</Desc>
    <FName>usleep</FName>
    <Desc>void usleep ( int $micro_seconds )
Delays program execution for the given number of microseconds.
</Desc>
    <FName>usort</FName>
    <Desc>bool usort ( array &$array , callable $value_compare_func )
This function will sort an array by its values using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function. 
Note: 
If two members compare as equal, their relative order in the sorted array is undefined. 
Note: This function assigns new keys to the elements in array. It will remove any existing keys that may have been assigned, rather than just reordering the keys.
</Desc>
    <FName>utf8_decode</FName>
    <Desc>string utf8_decode ( string $data )
This function converts the string data from the UTF-8 encoding to ISO-8859-1. Bytes in the string which are not valid UTF-8, and UTF-8 characters which do not exist in ISO-8859-1 (that is, characters above U+00FF) are replaced with ?. 
Note: 
Many web pages marked as using the ISO-8859-1 character encoding actually use the similar Windows-1252 encoding, and web browsers will interpret ISO-8859-1 web pages as Windows-1252. Windows-1252 features additional printable characters, such as the Euro sign (€) and curly quotes (“ ”), instead of certain ISO-8859-1 control characters. This function will not convert such Windows-1252 characters correctly. Use a different function if Windows-1252 conversion is required.
</Desc>
    <FName>utf8_encode</FName>
    <Desc>string utf8_encode ( string $data )
This function converts the string data from the ISO-8859-1 encoding to UTF-8. 
Note: 
Many web pages marked as using the ISO-8859-1 character encoding actually use the similar Windows-1252 encoding, and web browsers will interpret ISO-8859-1 web pages as Windows-1252. Windows-1252 features additional printable characters, such as the Euro sign (€) and curly quotes (“ ”), instead of certain ISO-8859-1 control characters. This function will not convert such Windows-1252 characters correctly. Use a different function if Windows-1252 conversion is required.
</Desc>
    <FName>var_dump</FName>
    <Desc>void var_dump ( mixed $expression [, mixed $... ] )
This function displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure. 
All public, private and protected properties of objects will be returned in the output unless the object implements a __debugInfo() method (implemented in PHP 5.6.0). 
Tip
As with anything that outputs its result directly to the browser, the output-control functions can be used to capture the output of this function, and save it in a string (for example).
</Desc>
    <FName>var_export</FName>
    <Desc>mixed var_export ( mixed $expression [, bool $return = FALSE ] )
var_export() gets structured information about the given variable. It is similar to var_dump() with one exception: the returned representation is valid PHP code.
</Desc>
    <FName>variant_abs</FName>
    <Desc>mixed variant_abs ( mixed $val )
Returns the absolute value of a variant.
</Desc>
    <FName>variant_add</FName>
    <Desc>mixed variant_add ( mixed $left , mixed $right )
Adds left to right using the following rules (taken from the MSDN library), which correspond to those of Visual Basic: Variant Addition RulesIfThen
Both expressions are of the string typeConcatenation
One expression is a string type and the other a characterAddition
One expression is numeric and the other is a stringAddition
Both expressions are numericAddition
Either expression is NULLNULL is returned
Both expressions are emptyInteger subtype is returned
</Desc>
    <FName>variant_and</FName>
    <Desc>mixed variant_and ( mixed $left , mixed $right )
Performs a bitwise AND operation. Note that this is slightly different from a regular AND operation.
</Desc>
    <FName>variant_cast</FName>
    <Desc>variant variant_cast ( variant $variant , int $type )
This function makes a copy of variant and then performs a variant cast operation to force the copy to have the type given by type. 
This function wraps VariantChangeType() in the COM library; consult MSDN for more information.
</Desc>
    <FName>variant_cat</FName>
    <Desc>mixed variant_cat ( mixed $left , mixed $right )
Concatenates left with right and returns the result. 
This function is notionally equivalent to $left . $right.
</Desc>
    <FName>variant_cmp</FName>
    <Desc>int variant_cmp ( mixed $left , mixed $right [, int $lcid [, int $flags ]] )
Compares left with right. 
This function will only compare scalar values, not arrays or variant records.
</Desc>
    <FName>variant_date_from_timestamp</FName>
    <Desc>variant variant_date_from_timestamp ( int $timestamp )
Converts timestamp from a unix timestamp value into a variant of type VT_DATE. This allows easier interopability between the unix-ish parts of PHP and COM.
</Desc>
    <FName>variant_date_to_timestamp</FName>
    <Desc>int variant_date_to_timestamp ( variant $variant )
Converts variant from a VT_DATE (or similar) value into a Unix timestamp. This allows easier interopability between the Unix-ish parts of PHP and COM.
</Desc>
    <FName>variant_div</FName>
    <Desc>mixed variant_div ( mixed $left , mixed $right )
Divides left by right and returns the result.
</Desc>
    <FName>variant_eqv</FName>
    <Desc>mixed variant_eqv ( mixed $left , mixed $right )
Performs a bitwise equivalence on two variants.
</Desc>
    <FName>variant_fix</FName>
    <Desc>mixed variant_fix ( mixed $variant )
Gets the integer portion of a variant.
</Desc>
    <FName>variant_get_type</FName>
    <Desc>int variant_get_type ( variant $variant )
Returns the type of a variant object.
</Desc>
    <FName>variant_idiv</FName>
    <Desc>mixed variant_idiv ( mixed $left , mixed $right )
Converts left and right to integer values, and then performs integer division.
</Desc>
    <FName>variant_imp</FName>
    <Desc>mixed variant_imp ( mixed $left , mixed $right )
Performs a bitwise implication operation.
</Desc>
    <FName>variant_int</FName>
    <Desc>mixed variant_int ( mixed $variant )
Gets the integer portion of a variant.
</Desc>
    <FName>variant_mod</FName>
    <Desc>mixed variant_mod ( mixed $left , mixed $right )
Divides left by right and returns the remainder.
</Desc>
    <FName>variant_mul</FName>
    <Desc>mixed variant_mul ( mixed $left , mixed $right )
Multiplies left by right.
</Desc>
    <FName>variant_neg</FName>
    <Desc>mixed variant_neg ( mixed $variant )
Performs logical negation of variant.
</Desc>
    <FName>variant_not</FName>
    <Desc>mixed variant_not ( mixed $variant )
Performs bitwise not negation on variant and returns the result.
</Desc>
    <FName>variant_or</FName>
    <Desc>mixed variant_or ( mixed $left , mixed $right )
Performs a bitwise OR operation. Note that this is slightly different from a regular OR operation.
</Desc>
    <FName>variant_pow</FName>
    <Desc>mixed variant_pow ( mixed $left , mixed $right )
Returns the result of left to the power of right.
</Desc>
    <FName>variant_round</FName>
    <Desc>mixed variant_round ( mixed $variant , int $decimals )
Returns the value of variant rounded to decimals decimal places.
</Desc>
    <FName>variant_set_type</FName>
    <Desc>void variant_set_type ( variant $variant , int $type )
This function is similar to variant_cast() except that the variant is modified "in-place"; no new variant is created. The parameters for this function have identical meaning to those of variant_cast().
</Desc>
    <FName>variant_set</FName>
    <Desc>void variant_set ( variant $variant , mixed $value )
Converts value to a variant and assigns it to the variant object; no new variant object is created, and the old value of variant is freed/released.
</Desc>
    <FName>variant_sub</FName>
    <Desc>mixed variant_sub ( mixed $left , mixed $right )
Subtracts right from left.
</Desc>
    <FName>variant_xor</FName>
    <Desc>mixed variant_xor ( mixed $left , mixed $right )
Performs a logical exclusion.
</Desc>
    <FName>version_compare</FName>
    <Desc>int version_compare ( string $version1 , string $version2 )
bool version_compare ( string $version1 , string $version2 , string $operator )
version_compare() compares two "PHP-standardized" version number strings. 
The function first replaces _, - and + with a dot . in the version strings and also inserts dots . before and after any non number so that for example '4.3.2RC1' becomes '4.3.2.RC.1'. Then it compares the parts starting from left to right. If a part contains special version strings these are handled in the following order: any string not found in this list < dev < alpha = a < beta = b < RC = rc < # < pl = p. This way not only versions with different levels like '4.1' and '4.1.2' can be compared but also any PHP specific version containing development state.
</Desc>
    <FName>vfprintf</FName>
    <Desc>int vfprintf ( resource $handle , string $format , array $args )
Write a string produced according to format to the stream resource specified by handle. 
Operates as fprintf() but accepts an array of arguments, rather than a variable number of arguments.
</Desc>
    <FName>virtual</FName>
    <Desc>bool virtual ( string $filename )
virtual() is an Apache-specific function which is similar to <!--#include virtual...--> in mod_include. It performs an Apache sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you would parse through Apache. Note that for a CGI script, the script must generate valid CGI headers. At the minimum that means it must generate a Content-Type header. 
To run the sub-request, all buffers are terminated and flushed to the browser, pending headers are sent too. 
This function is supported when PHP is installed as an Apache module or by the NSAPI server module in Netscape/iPlanet/SunONE webservers.
</Desc>
    <FName>vpopmail_add_alias_domain_ex</FName>
    <Desc>bool vpopmail_add_alias_domain_ex ( string $olddomain , string $newdomain )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_add_alias_domain</FName>
    <Desc>bool vpopmail_add_alias_domain ( string $domain , string $aliasdomain )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_add_domain_ex</FName>
    <Desc>bool vpopmail_add_domain_ex ( string $domain , string $passwd [, string $quota [, string $bounce [, bool $apop ]]] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_add_domain</FName>
    <Desc>bool vpopmail_add_domain ( string $domain , string $dir , int $uid , int $gid )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_add_user</FName>
    <Desc>bool vpopmail_add_user ( string $user , string $domain , string $password [, string $gecos [, bool $apop ]] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_alias_add</FName>
    <Desc>bool vpopmail_alias_add ( string $user , string $domain , string $alias )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_alias_del_domain</FName>
    <Desc>bool vpopmail_alias_del_domain ( string $domain )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_alias_del</FName>
    <Desc>bool vpopmail_alias_del ( string $user , string $domain )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_alias_get_all</FName>
    <Desc>array vpopmail_alias_get_all ( string $domain )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_alias_get</FName>
    <Desc>array vpopmail_alias_get ( string $alias , string $domain )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_auth_user</FName>
    <Desc>bool vpopmail_auth_user ( string $user , string $domain , string $password [, string $apop ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_del_domain_ex</FName>
    <Desc>bool vpopmail_del_domain_ex ( string $domain )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_del_domain</FName>
    <Desc>bool vpopmail_del_domain ( string $domain )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_del_user</FName>
    <Desc>bool vpopmail_del_user ( string $user , string $domain )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_error</FName>
    <Desc>string vpopmail_error ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_passwd</FName>
    <Desc>bool vpopmail_passwd ( string $user , string $domain , string $password [, bool $apop ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vpopmail_set_user_quota</FName>
    <Desc>bool vpopmail_set_user_quota ( string $user , string $domain , string $quota )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>vprintf</FName>
    <Desc>int vprintf ( string $format , array $args )
Display array values as a formatted string according to format (which is described in the documentation for sprintf()). 
Operates as printf() but accepts an array of arguments, rather than a variable number of arguments.
</Desc>
    <FName>vsprintf</FName>
    <Desc>string vsprintf ( string $format , array $args )
Operates as sprintf() but accepts an array of arguments, rather than a variable number of arguments.
</Desc>
    <FName>wddx_add_vars</FName>
    <Desc>bool wddx_add_vars ( resource $packet_id , mixed $var_name [, mixed $... ] )
Serializes the passed variables and add the result to the given packet.
</Desc>
    <FName>wddx_deserialize</FName>
    <Desc>mixed wddx_deserialize ( string $packet )
Unserializes a WDDX packet. 
Warning 
Do not pass untrusted user input to wddx_deserialize(). Unserialization can result in code being loaded and executed due to object instantiation and autoloading, and a malicious user may be able to exploit this. Use a safe, standard data interchange format such as JSON (via json_decode() and json_encode()) if you need to pass serialized data to the user.
</Desc>
    <FName>wddx_packet_end</FName>
    <Desc>string wddx_packet_end ( resource $packet_id )
Ends and returns the given WDDX packet.
</Desc>
    <FName>wddx_packet_start</FName>
    <Desc>resource wddx_packet_start ([ string $comment ] )
Start a new WDDX packet for incremental addition of variables. It automatically creates a structure definition inside the packet to contain the variables.
</Desc>
    <FName>wddx_serialize_value</FName>
    <Desc>string wddx_serialize_value ( mixed $var [, string $comment ] )
Creates a WDDX packet from a single given value.
</Desc>
    <FName>wddx_serialize_vars</FName>
    <Desc>string wddx_serialize_vars ( mixed $var_name [, mixed $... ] )
Creates a WDDX packet with a structure that contains the serialized representation of the passed variables.
</Desc>
    <FName>win32_continue_service</FName>
    <Desc>int win32_continue_service ( string $servicename [, string $machine ] )
Resumes a paused, named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL.
</Desc>
    <FName>win32_create_service</FName>
    <Desc>mixed win32_create_service ( array $details [, string $machine ] )
Attempts to add a service into the SCM database. Administrative privileges are required for this to succeed.
</Desc>
    <FName>win32_delete_service</FName>
    <Desc>mixed win32_delete_service ( string $servicename [, string $machine ] )
Attempts to delete a service from the SCM database. Administrative privileges are required for this to succeed. 
This function really just marks the service for deletion. If other processes (such as the Services Applet) are open, then the deletion will be deferred until those applications are closed. If a service is marked for deletion, further attempts to delete it will fail, and attempts to create a new service with that name will also fail.
</Desc>
    <FName>win32_get_last_control_message</FName>
    <Desc>int win32_get_last_control_message ( void )
Returns the control code that was last sent to this service process. When running as a service you should periodically check this to determine if your service needs to stop running. 
Caution 
Since version 0.2.0, this function work only in "cli" SAPI. On other SAPI this function is disabled.
</Desc>
    <FName>win32_pause_service</FName>
    <Desc>int win32_pause_service ( string $servicename [, string $machine ] )
Pauses a named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL.
</Desc>
    <FName>win32_ps_list_procs</FName>
    <Desc>array win32_ps_list_procs ( void )
Retrieves statistics about all running processes.
</Desc>
    <FName>win32_ps_stat_mem</FName>
    <Desc>array win32_ps_stat_mem ( void )
Retrieves statistics about the global memory utilization.
</Desc>
    <FName>win32_ps_stat_proc</FName>
    <Desc>array win32_ps_stat_proc ([ int $pid = 0 ] )
Retrieves statistics about the process with the process id pid.
</Desc>
    <FName>win32_query_service_status</FName>
    <Desc>mixed win32_query_service_status ( string $servicename [, string $machine ] )
Queries the current status for a service, returning an array of information.
</Desc>
    <FName>win32_set_service_status</FName>
    <Desc>bool win32_set_service_status ( int $status [, int $checkpoint = 0 ] )
Informs the SCM of the current status of a running service. This call is only valid for a running service process. 
Caution 
Since version 0.2.0, this function work only in "cli" SAPI. On other SAPI this function is disabled.
</Desc>
    <FName>win32_start_service_ctrl_dispatcher</FName>
    <Desc>mixed win32_start_service_ctrl_dispatcher ( string $name )
When launched via the Service Control Manager, a service process is required to "check-in" with it to establish service monitoring and communication facilities. This function performs the check-in by spawning a thread to handle the lower-level communication with the service control manager. 
Once started, the service process should do 2 things. The first is to tell the Service Control Manager that the service is running. This is achieved by calling win32_set_service_status() with the WIN32_SERVICE_RUNNING constant. If you need to perform some lengthy process before the service is actually running, then you can use the WIN32_SERVICE_START_PENDING constant. The second is to continue to check-in with the service control manager so that it can determine if it should terminate. This is achieved by periodically calling win32_get_last_control_message() and handling the return code appropriately. 
Caution 
Since version 0.2.0, this function work only in "cli" SAPI. On other SAPI this function is disabled.
</Desc>
    <FName>win32_start_service</FName>
    <Desc>int win32_start_service ( string $servicename [, string $machine ] )
Attempts to start the named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL.
</Desc>
    <FName>win32_stop_service</FName>
    <Desc>int win32_stop_service ( string $servicename [, string $machine ] )
Stops a named service. Requires administrative privileges or an account with appropriate rights set in the service's ACL.
</Desc>
    <FName>wincache_fcache_fileinfo</FName>
    <Desc>array wincache_fcache_fileinfo ([ bool $summaryonly = FALSE ] )
Retrieves information about file cache content and its usage.
</Desc>
    <FName>wincache_fcache_meminfo</FName>
    <Desc>array wincache_fcache_meminfo ( void )
Retrieves information about memory usage by file cache.
</Desc>
    <FName>wincache_lock</FName>
    <Desc>bool wincache_lock ( string $key [, bool $isglobal = FALSE ] )
Obtains an exclusive lock on a given key. The execution of the current script will be blocked until the lock can be obtained. Once the lock is obtained, the other scripts that try to request the lock by using the same key will be blocked, until the current script releases the lock by using wincache_unlock(). 
Warning 
Using of the wincache_lock() and wincache_unlock() can cause deadlocks when executing PHP scripts in a multi-process environment like FastCGI. Do not use these functions unless you are absolutely sure you need to use them. For the majority of the operations on the user cache it is not necessary to use these functions.
</Desc>
    <FName>wincache_ocache_fileinfo</FName>
    <Desc>array wincache_ocache_fileinfo ([ bool $summaryonly = FALSE ] )
Retrieves information about opcode cache content and its usage. 
Warning
This function was REMOVED in PHP 7.0.0.
</Desc>
    <FName>wincache_ocache_meminfo</FName>
    <Desc>array wincache_ocache_meminfo ( void )
Retrieves information about memory usage by opcode cache.
</Desc>
    <FName>wincache_refresh_if_changed</FName>
    <Desc>bool wincache_refresh_if_changed ([ array $files = NULL ] )
Refreshes the cache entries for the files, whose names were passed in the input argument. If no argument is specified then refreshes all the entries in the cache.
</Desc>
    <FName>wincache_rplist_fileinfo</FName>
    <Desc>array wincache_rplist_fileinfo ([ bool $summaryonly = FALSE ] )
Retrieves information about cached mappings between relative file paths and corresponding absolute file paths.
</Desc>
    <FName>wincache_rplist_meminfo</FName>
    <Desc>array wincache_rplist_meminfo ( void )
Retrieves information about memory usage by resolve file path cache.
</Desc>
    <FName>wincache_scache_info</FName>
    <Desc>array wincache_scache_info ([ bool $summaryonly = FALSE ] )
Retrieves information about session cache content and its usage.
</Desc>
    <FName>wincache_scache_meminfo</FName>
    <Desc>array wincache_scache_meminfo ( void )
Retrieves information about memory usage by session cache.
</Desc>
    <FName>wincache_ucache_add</FName>
    <Desc>bool wincache_ucache_add ( string $key , mixed $value [, int $ttl = 0 ] )
bool wincache_ucache_add ( array $values [, mixed $unused = NULL [, int $ttl = 0 ]] )
Adds a variable in user cache, only if this variable doesn't already exist in the cache. The added variable remains in the user cache unless its time to live expires or it is deleted by using wincache_ucache_delete() or wincache_ucache_clear() functions.
</Desc>
    <FName>wincache_ucache_cas</FName>
    <Desc>bool wincache_ucache_cas ( string $key , int $old_value , int $new_value )
Compares the variable associated with the key with old_value and if it matches then assigns the new_value to it.
</Desc>
    <FName>wincache_ucache_clear</FName>
    <Desc>bool wincache_ucache_clear ( void )
Clears/deletes all the values stored in the user cache.
</Desc>
    <FName>wincache_ucache_dec</FName>
    <Desc>mixed wincache_ucache_dec ( string $key [, int $dec_by = 1 [, bool &$success ]] )
Decrements the value associated with the key by 1 or as specified by dec_by.
</Desc>
    <FName>wincache_ucache_delete</FName>
    <Desc>bool wincache_ucache_delete ( mixed $key )
Deletes the elements in the user cache pointed by key.
</Desc>
    <FName>wincache_ucache_exists</FName>
    <Desc>bool wincache_ucache_exists ( string $key )
Checks if a variable with the key exists in the user cache or not.
</Desc>
    <FName>wincache_ucache_get</FName>
    <Desc>mixed wincache_ucache_get ( mixed $key [, bool &$success ] )
Gets a variable stored in the user cache.
</Desc>
    <FName>wincache_ucache_inc</FName>
    <Desc>mixed wincache_ucache_inc ( string $key [, int $inc_by = 1 [, bool &$success ]] )
Increments the value associated with the key by 1 or as specified by inc_by.
</Desc>
    <FName>wincache_ucache_info</FName>
    <Desc>array wincache_ucache_info ([ bool $summaryonly = FALSE [, string $key = NULL ]] )
Retrieves information about data stored in the user cache.
</Desc>
    <FName>wincache_ucache_meminfo</FName>
    <Desc>array wincache_ucache_meminfo ( void )
Retrieves information about memory usage by user cache.
</Desc>
    <FName>wincache_ucache_set</FName>
    <Desc>bool wincache_ucache_set ( mixed $key , mixed $value [, int $ttl = 0 ] )
bool wincache_ucache_set ( array $values [, mixed $unused = NULL [, int $ttl = 0 ]] )
Adds a variable in user cache. Overwrites a variable if it already exists in the cache. The added or updated variable remains in the user cache unless its time to live expires or it is deleted by using wincache_ucache_delete() or wincache_ucache_clear() functions.
</Desc>
    <FName>wincache_unlock</FName>
    <Desc>bool wincache_unlock ( string $key )
Releases an exclusive lock that was obtained on a given key by using wincache_lock(). If any other process was blocked waiting for the lock on this key, that process will be able to obtain the lock. 
Warning 
Using of the wincache_lock() and wincache_unlock() can cause deadlocks when executing PHP scripts in a multi-process environment like FastCGI. Do not use these functions unless you are absolutely sure you need to use them. For the majority of the operations on the user cache it is not necessary to use these functions.
</Desc>
    <FName>wordwrap</FName>
    <Desc>string wordwrap ( string $str [, int $width = 75 [, string $break = "\n" [, bool $cut = FALSE ]]] )
Wraps a string to a given number of characters using a string break character.
</Desc>
    <FName>xattr_get</FName>
    <Desc>string xattr_get ( string $filename , string $name [, int $flags = 0 ] )
This function gets the value of an extended attribute of a file. 
Extended attributes have two different namespaces: user and root. The user namespace is available to all users, while the root namespace is available only to users with root privileges. xattr operates on the user namespace by default, but this can be changed with the flags parameter.
</Desc>
    <FName>xattr_list</FName>
    <Desc>array xattr_list ( string $filename [, int $flags = 0 ] )
This functions gets a list of names of extended attributes of a file. 
Extended attributes have two different namespaces: user and root. The user namespace is available to all users, while the root namespace is available only to users with root privileges. xattr operates on the user namespace by default, but this can be changed with the flags parameter.
</Desc>
    <FName>xattr_remove</FName>
    <Desc>bool xattr_remove ( string $filename , string $name [, int $flags = 0 ] )
This function removes an extended attribute of a file. 
Extended attributes have two different namespaces: user and root. The user namespace is available to all users, while the root namespace is available only to users with root privileges. xattr operates on the user namespace by default, but this can be changed with the flags parameter.
</Desc>
    <FName>xattr_set</FName>
    <Desc>bool xattr_set ( string $filename , string $name , string $value [, int $flags = 0 ] )
This function sets the value of an extended attribute of a file. 
Extended attributes have two different namespaces: user and root. The user namespace is available to all users, while the root namespace is available only to users with root privileges. xattr operates on the user namespace by default, but this can be changed with the flags parameter.
</Desc>
    <FName>xattr_supported</FName>
    <Desc>bool xattr_supported ( string $filename [, int $flags = 0 ] )
This functions checks if the filesystem holding the given file supports extended attributes. Read access to the file is required.
</Desc>
    <FName>xdiff_file_bdiff_size</FName>
    <Desc>int xdiff_file_bdiff_size ( string $file )
Returns a size of a result file that would be created after applying binary patch from file file to the original file.
</Desc>
    <FName>xdiff_file_bdiff</FName>
    <Desc>bool xdiff_file_bdiff ( string $old_file , string $new_file , string $dest )
Makes a binary diff of two files and stores the result in a patch file. This function works with both text and binary files. Resulting patch file can be later applied using xdiff_file_bpatch()/xdiff_string_bpatch().
</Desc>
    <FName>xdiff_file_bpatch</FName>
    <Desc>bool xdiff_file_bpatch ( string $file , string $patch , string $dest )
Patches a file with a binary patch and stores the result in a file dest. This function accepts patches created both via xdiff_file_bdiff() and xdiff_file_rabdiff() functions or their string counterparts.
</Desc>
    <FName>xdiff_file_diff_binary</FName>
    <Desc>bool xdiff_file_diff_binary ( string $old_file , string $new_file , string $dest )
Makes a binary diff of two files and stores the result in a patch file. This function works with both text and binary files. Resulting patch file can be later applied using xdiff_file_bpatch(). 
Starting with version 1.5.0 this function is an alias of xdiff_file_bdiff().
</Desc>
    <FName>xdiff_file_diff</FName>
    <Desc>bool xdiff_file_diff ( string $old_file , string $new_file , string $dest [, int $context = 3 [, bool $minimal = FALSE ]] )
Makes an unified diff containing differences between old_file and new_file and stores it in dest file. The resulting file is human-readable. An optional context parameter specifies how many lines of context should be added around each change. Setting minimal parameter to true will result in outputting the shortest patch file possible (can take a long time).
</Desc>
    <FName>xdiff_file_merge3</FName>
    <Desc>mixed xdiff_file_merge3 ( string $old_file , string $new_file1 , string $new_file2 , string $dest )
Merges three files into one and stores the result in a file dest. The old_file is an original version while new_file1 and new_file2 are modified versions of an original.
</Desc>
    <FName>xdiff_file_patch_binary</FName>
    <Desc>bool xdiff_file_patch_binary ( string $file , string $patch , string $dest )
Patches a file with a binary patch and stores the result in a file dest. This function accepts patches created both via xdiff_file_bdiff() or xdiff_file_rabdiff() functions or their string counterparts. 
Starting with version 1.5.0 this function is an alias of xdiff_file_bpatch().
</Desc>
    <FName>xdiff_file_patch</FName>
    <Desc>mixed xdiff_file_patch ( string $file , string $patch , string $dest [, int $flags = DIFF_PATCH_NORMAL ] )
Patches a file with a patch and stores the result in a file. patch has to be an unified diff created by xdiff_file_diff()/xdiff_string_diff() function. An optional flags parameter specifies mode of operation.
</Desc>
    <FName>xdiff_file_rabdiff</FName>
    <Desc>bool xdiff_file_rabdiff ( string $old_file , string $new_file , string $dest )
Makes a binary diff of two files and stores the result in a patch file. The difference between this function and xdiff_file_bdiff() is different algorithm used which should result in faster execution and smaller diff produced. This function works with both text and binary files. Resulting patch file can be later applied using xdiff_file_bpatch()/xdiff_string_bpatch(). 
For more details about differences between algorithm used please check » libxdiff website.
</Desc>
    <FName>xdiff_string_bdiff_size</FName>
    <Desc>int xdiff_string_bdiff_size ( string $patch )
Returns a size of a result file that would be created after applying binary patch to the original file.
</Desc>
    <FName>xdiff_string_bdiff</FName>
    <Desc>string xdiff_string_bdiff ( string $old_data , string $new_data )
Makes a binary diff of two strings and returns the result. This function works with both text and binary data. Resulting patch can be later applied using xdiff_string_bpatch()/xdiff_file_bpatch().
</Desc>
    <FName>xdiff_string_bpatch</FName>
    <Desc>string xdiff_string_bpatch ( string $str , string $patch )
Patches a string str with a binary patch. This function accepts patches created both via xdiff_string_bdiff() and xdiff_string_rabdiff() functions or their file counterparts.
</Desc>
    <FName>xdiff_string_diff_binary</FName>
    <Desc>string xdiff_string_bdiff ( string $old_data , string $new_data )
Makes a binary diff of two strings and returns the result. This function works with both text and binary data. Resulting patch can be later applied using xdiff_string_bpatch()/xdiff_file_bpatch(). 
Starting with version 1.5.0 this function is an alias of xdiff_string_bdiff().
</Desc>
    <FName>xdiff_string_diff</FName>
    <Desc>string xdiff_string_diff ( string $old_data , string $new_data [, int $context = 3 [, bool $minimal = FALSE ]] )
Makes an unified diff containing differences between old_data string and new_data string and returns it. The resulting diff is human-readable. An optional context parameter specifies how many lines of context should be added around each change. Setting minimal parameter to true will result in outputting the shortest patch file possible (can take a long time).
</Desc>
    <FName>xdiff_string_merge3</FName>
    <Desc>mixed xdiff_string_merge3 ( string $old_data , string $new_data1 , string $new_data2 [, string &$error ] )
Merges three strings into one and returns the result. The old_data is an original version of data while new_data1 and new_data2 are modified versions of an original. An optional error is used to pass any rejected parts during merging process.
</Desc>
    <FName>xdiff_string_patch_binary</FName>
    <Desc>string xdiff_string_patch_binary ( string $str , string $patch )
Patches a string str with a binary patch. This function accepts patches created both via xdiff_string_bdiff() and xdiff_string_rabdiff() functions or their file counterparts. 
Starting with version 1.5.0 this function is an alias of xdiff_string_bpatch().
</Desc>
    <FName>xdiff_string_patch</FName>
    <Desc>string xdiff_string_patch ( string $str , string $patch [, int $flags [, string &$error ]] )
Patches a str string with an unified patch in patch parameter and returns the result. patch has to be an unified diff created by xdiff_file_diff()/xdiff_string_diff() function. An optional flags parameter specifies mode of operation. Any rejected parts of the patch will be stored inside error variable if it is provided.
</Desc>
    <FName>xdiff_string_rabdiff</FName>
    <Desc>string xdiff_string_bdiff ( string $old_data , string $new_data )
Makes a binary diff of two strings and returns the result. The difference between this function and xdiff_string_bdiff() is different algorithm used which should result in faster execution and smaller diff produced. This function works with both text and binary data. Resulting patch can be later applied using xdiff_string_bpatch()/xdiff_file_bpatch(). 
For more details about differences between algorithm used please check » libxdiff website.
</Desc>
    <FName>xhprof_disable</FName>
    <Desc>array xhprof_disable ( void )
Stops the profiler, and returns xhprof data from the run.
</Desc>
    <FName>xhprof_enable</FName>
    <Desc>void xhprof_enable ([ int $flags = 0 [, array $options ]] )
Start xhprof profiling.
</Desc>
    <FName>xhprof_sample_disable</FName>
    <Desc>array xhprof_sample_disable ( void )
Stops the sample mode xhprof profiler, and
</Desc>
    <FName>xhprof_sample_enable</FName>
    <Desc>void xhprof_sample_enable ( void )
Starts profiling in sample mode, which is a lighter weight version of xhprof_enable(). The sampling interval is 0.1 seconds, and samples record the full function call stack. The main use case is when lower overhead is required when doing performance monitoring and diagnostics.
</Desc>
    <FName>xml_error_string</FName>
    <Desc>string xml_error_string ( int $code )
Gets the XML parser error string associated with the given code.
</Desc>
    <FName>xml_get_current_byte_index</FName>
    <Desc>int xml_get_current_byte_index ( resource $parser )
Gets the current byte index of the given XML parser.
</Desc>
    <FName>xml_get_current_column_number</FName>
    <Desc>int xml_get_current_column_number ( resource $parser )
Gets the current column number of the given XML parser.
</Desc>
    <FName>xml_get_current_line_number</FName>
    <Desc>int xml_get_current_line_number ( resource $parser )
Gets the current line number for the given XML parser.
</Desc>
    <FName>xml_get_error_code</FName>
    <Desc>int xml_get_error_code ( resource $parser )
Gets the XML parser error code.
</Desc>
    <FName>xml_parse_into_struct</FName>
    <Desc>int xml_parse_into_struct ( resource $parser , string $data , array &$values [, array &$index ] )
This function parses an XML string into 2 parallel array structures, one (index) containing pointers to the location of the appropriate values in the values array. These last two parameters must be passed by reference.
</Desc>
    <FName>xml_parse</FName>
    <Desc>int xml_parse ( resource $parser , string $data [, bool $is_final = FALSE ] )
xml_parse() parses an XML document. The handlers for the configured events are called as many times as necessary.
</Desc>
    <FName>xml_parser_create_ns</FName>
    <Desc>resource xml_parser_create_ns ([ string $encoding [, string $separator = ":" ]] )
xml_parser_create_ns() creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions.
</Desc>
    <FName>xml_parser_create</FName>
    <Desc>resource xml_parser_create ([ string $encoding ] )
xml_parser_create() creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions.
</Desc>
    <FName>xml_parser_free</FName>
    <Desc>bool xml_parser_free ( resource $parser )
Frees the given XML parser. 
Caution 
In addition to calling xml_parser_free() when the parsing is finished, as of PHP 7.0.0 it is necessary to also explicitly unset the reference to parser to avoid memory leaks, if the parser resource is referenced from an object, and this object references that parser resource.
</Desc>
    <FName>xml_parser_get_option</FName>
    <Desc>mixed xml_parser_get_option ( resource $parser , int $option )
Gets an option value from an XML parser.
</Desc>
    <FName>xml_parser_set_option</FName>
    <Desc>bool xml_parser_set_option ( resource $parser , int $option , mixed $value )
Sets an option in an XML parser.
</Desc>
    <FName>xml_set_character_data_handler</FName>
    <Desc>bool xml_set_character_data_handler ( resource $parser , callable $handler )
Sets the character data handler function for the XML parser parser.
</Desc>
    <FName>xml_set_default_handler</FName>
    <Desc>bool xml_set_default_handler ( resource $parser , callable $handler )
Sets the default handler function for the XML parser parser.
</Desc>
    <FName>xml_set_element_handler</FName>
    <Desc>bool xml_set_element_handler ( resource $parser , callable $start_element_handler , callable $end_element_handler )
Sets the element handler functions for the XML parser. start_element_handler and end_element_handler are strings containing the names of functions that must exist when xml_parse() is called for parser.
</Desc>
    <FName>xml_set_end_namespace_decl_handler</FName>
    <Desc>bool xml_set_end_namespace_decl_handler ( resource $parser , callable $handler )
Set a handler to be called when leaving the scope of a namespace declaration. This will be called, for each namespace declaration, after the handler for the end tag of the element in which the namespace was declared. 
Caution 
This event is not supported under libXML, so a registered handler wouldn't be called.
</Desc>
    <FName>xml_set_external_entity_ref_handler</FName>
    <Desc>bool xml_set_external_entity_ref_handler ( resource $parser , callable $handler )
Sets the external entity reference handler function for the XML parser parser.
</Desc>
    <FName>xml_set_notation_decl_handler</FName>
    <Desc>bool xml_set_notation_decl_handler ( resource $parser , callable $handler )
Sets the notation declaration handler function for the XML parser parser. 
A notation declaration is part of the document's DTD and has the following format: 
<!NOTATION <parameter>name</parameter>
{ <parameter>systemId</parameter> | <parameter>publicId</parameter>?>See » section 4.7 of the XML 1.0 spec for the definition of notation declarations.
</Desc>
    <FName>xml_set_object</FName>
    <Desc>bool xml_set_object ( resource $parser , object &$object )
This function allows to use parser inside object. All callback functions could be set with xml_set_element_handler() etc and assumed to be methods of object.
</Desc>
    <FName>xml_set_processing_instruction_handler</FName>
    <Desc>bool xml_set_processing_instruction_handler ( resource $parser , callable $handler )
Sets the processing instruction (PI) handler function for the XML parser parser. 
A processing instruction has the following format: 
<?target data
?>
    You can put PHP code into such a tag, but be aware of one limitation: in an XML PI, the PI end tag (?>) can not be quoted, so this character sequence should not appear in the PHP code you embed with PIs in XML documents.If it does, the rest of the PHP code, as well as the "real" PI end tag, will be treated as character data.
</Desc>
    <FName>xml_set_start_namespace_decl_handler</FName>
    <Desc>bool xml_set_start_namespace_decl_handler ( resource $parser , callable $handler )
Set a handler to be called when a namespace is declared. Namespace declarations occur inside start tags. But the namespace declaration start handler is called before the start tag handler for each namespace declared in that start tag.
</Desc>
    <FName>xml_set_unparsed_entity_decl_handler</FName>
    <Desc>bool xml_set_unparsed_entity_decl_handler ( resource $parser , callable $handler )
Sets the unparsed entity declaration handler function for the XML parser parser. 
The handler will be called if the XML parser encounters an external entity declaration with an NDATA declaration, like the following: 
<!ENTITY <parameter>name</parameter> {<parameter>publicId</parameter> | <parameter>systemId</parameter>}
        NDATA <parameter>notationName</parameter>See » section 4.2.2 of the XML 1.0 spec for the definition of notation declared external entities.
</Desc>
    <FName>xmlrpc_decode_request</FName>
    <Desc>mixed xmlrpc_decode_request ( string $xml , string &$method [, string $encoding ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>xmlrpc_decode</FName>
    <Desc>mixed xmlrpc_decode ( string $xml [, string $encoding = "iso-8859-1" ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>xmlrpc_encode_request</FName>
    <Desc>string xmlrpc_encode_request ( string $method , mixed $params [, array $output_options ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>xmlrpc_encode</FName>
    <Desc>string xmlrpc_encode ( mixed $value )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>xmlrpc_get_type</FName>
    <Desc>string xmlrpc_get_type ( mixed $value )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
This function is especially useful for base64 and datetime strings.
</Desc>
    <FName>xmlrpc_is_fault</FName>
    <Desc>bool xmlrpc_is_fault ( array $arg )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>xmlrpc_parse_method_descriptions</FName>
    <Desc>array xmlrpc_parse_method_descriptions ( string $xml )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>xmlrpc_server_add_introspection_data</FName>
    <Desc>int xmlrpc_server_add_introspection_data ( resource $server , array $desc )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>xmlrpc_server_call_method</FName>
    <Desc>string xmlrpc_server_call_method ( resource $server , string $xml , mixed $user_data [, array $output_options ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>xmlrpc_server_create</FName>
    <Desc>resource xmlrpc_server_create ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>xmlrpc_server_destroy</FName>
    <Desc>bool xmlrpc_server_destroy ( resource $server )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>xmlrpc_server_register_introspection_callback</FName>
    <Desc>bool xmlrpc_server_register_introspection_callback ( resource $server , string $function )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>xmlrpc_server_register_method</FName>
    <Desc>bool xmlrpc_server_register_method ( resource $server , string $method_name , string $function )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>xmlrpc_set_type</FName>
    <Desc>bool xmlrpc_set_type ( string &$value , string $type )
Sets xmlrpc type, base64 or datetime, for a PHP string value. 
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>XMLWriter::endAttribute</FName>
    <Desc>Object oriented style
bool XMLWriter::endAttribute ( void )
Procedural style
bool xmlwriter_end_attribute ( resource $xmlwriter )
Ends the current attribute.
</Desc>
    <FName>xmlwriter_end_attribute</FName>
    <Desc>Object oriented style
bool XMLWriter::endAttribute ( void )
Procedural style
bool xmlwriter_end_attribute ( resource $xmlwriter )
Ends the current attribute.
</Desc>
    <FName>XMLWriter::endCdata</FName>
    <Desc>Object oriented style
bool XMLWriter::endCdata ( void )
Procedural style
bool xmlwriter_end_cdata ( resource $xmlwriter )
Ends the current CDATA section.
</Desc>
    <FName>xmlwriter_end_cdata</FName>
    <Desc>Object oriented style
bool XMLWriter::endCdata ( void )
Procedural style
bool xmlwriter_end_cdata ( resource $xmlwriter )
Ends the current CDATA section.
</Desc>
    <FName>XMLWriter::endComment</FName>
    <Desc>Object oriented style
bool XMLWriter::endComment ( void )
Procedural style
bool xmlwriter_end_comment ( resource $xmlwriter )
Ends the current comment.
</Desc>
    <FName>xmlwriter_end_comment</FName>
    <Desc>Object oriented style
bool XMLWriter::endComment ( void )
Procedural style
bool xmlwriter_end_comment ( resource $xmlwriter )
Ends the current comment.
</Desc>
    <FName>XMLWriter::endDocument</FName>
    <Desc>Object oriented style
bool XMLWriter::endDocument ( void )
Procedural style
bool xmlwriter_end_document ( resource $xmlwriter )
Ends the current document.
</Desc>
    <FName>xmlwriter_end_document</FName>
    <Desc>Object oriented style
bool XMLWriter::endDocument ( void )
Procedural style
bool xmlwriter_end_document ( resource $xmlwriter )
Ends the current document.
</Desc>
    <FName>XMLWriter::endDtdAttlist</FName>
    <Desc>Object oriented style
bool XMLWriter::endDtdAttlist ( void )
Procedural style
bool xmlwriter_end_dtd_attlist ( resource $xmlwriter )
Ends the current DTD attribute list.
</Desc>
    <FName>xmlwriter_end_dtd_attlist</FName>
    <Desc>Object oriented style
bool XMLWriter::endDtdAttlist ( void )
Procedural style
bool xmlwriter_end_dtd_attlist ( resource $xmlwriter )
Ends the current DTD attribute list.
</Desc>
    <FName>XMLWriter::endDtdElement</FName>
    <Desc>Object oriented style
bool XMLWriter::endDtdElement ( void )
Procedural style
bool xmlwriter_end_dtd_element ( resource $xmlwriter )
Ends the current DTD element.
</Desc>
    <FName>xmlwriter_end_dtd_element</FName>
    <Desc>Object oriented style
bool XMLWriter::endDtdElement ( void )
Procedural style
bool xmlwriter_end_dtd_element ( resource $xmlwriter )
Ends the current DTD element.
</Desc>
    <FName>XMLWriter::endDtdEntity</FName>
    <Desc>Object oriented style
bool XMLWriter::endDtdEntity ( void )
Procedural style
bool xmlwriter_end_dtd_entity ( resource $xmlwriter )
Ends the current DTD entity.
</Desc>
    <FName>xmlwriter_end_dtd_entity</FName>
    <Desc>Object oriented style
bool XMLWriter::endDtdEntity ( void )
Procedural style
bool xmlwriter_end_dtd_entity ( resource $xmlwriter )
Ends the current DTD entity.
</Desc>
    <FName>XMLWriter::endDtd</FName>
    <Desc>Object oriented style
bool XMLWriter::endDtd ( void )
Procedural style
bool xmlwriter_end_dtd ( resource $xmlwriter )
Ends the DTD of the document.
</Desc>
    <FName>xmlwriter_end_dtd</FName>
    <Desc>Object oriented style
bool XMLWriter::endDtd ( void )
Procedural style
bool xmlwriter_end_dtd ( resource $xmlwriter )
Ends the DTD of the document.
</Desc>
    <FName>XMLWriter::endElement</FName>
    <Desc>Object oriented style
bool XMLWriter::endElement ( void )
Procedural style
bool xmlwriter_end_element ( resource $xmlwriter )
Ends the current element.
</Desc>
    <FName>xmlwriter_end_element</FName>
    <Desc>Object oriented style
bool XMLWriter::endElement ( void )
Procedural style
bool xmlwriter_end_element ( resource $xmlwriter )
Ends the current element.
</Desc>
    <FName>XMLWriter::endPi</FName>
    <Desc>Object oriented style
bool XMLWriter::endPi ( void )
Procedural style
bool xmlwriter_end_pi ( resource $xmlwriter )
Ends the current processing instruction.
</Desc>
    <FName>xmlwriter_end_pi</FName>
    <Desc>Object oriented style
bool XMLWriter::endPi ( void )
Procedural style
bool xmlwriter_end_pi ( resource $xmlwriter )
Ends the current processing instruction.
</Desc>
    <FName>XMLWriter::flush</FName>
    <Desc>Object oriented style
mixed XMLWriter::flush ([ bool $empty = TRUE ] )
Procedural style
mixed xmlwriter_flush ( resource $xmlwriter [, bool $empty = TRUE ] )
Flushes the current buffer.
</Desc>
    <FName>xmlwriter_flush</FName>
    <Desc>Object oriented style
mixed XMLWriter::flush ([ bool $empty = TRUE ] )
Procedural style
mixed xmlwriter_flush ( resource $xmlwriter [, bool $empty = TRUE ] )
Flushes the current buffer.
</Desc>
    <FName>XMLWriter::fullEndElement</FName>
    <Desc>Object oriented style
bool XMLWriter::fullEndElement ( void )
Procedural style
bool xmlwriter_full_end_element ( resource $xmlwriter )
End the current xml element. Writes an end tag even if the element is empty.
</Desc>
    <FName>xmlwriter_full_end_element</FName>
    <Desc>Object oriented style
bool XMLWriter::fullEndElement ( void )
Procedural style
bool xmlwriter_full_end_element ( resource $xmlwriter )
End the current xml element. Writes an end tag even if the element is empty.
</Desc>
    <FName>XMLWriter::openMemory</FName>
    <Desc>Object oriented style
bool XMLWriter::openMemory ( void )
Procedural style
resource xmlwriter_open_memory ( void )
Creates a new XMLWriter using memory for string output.
</Desc>
    <FName>xmlwriter_open_memory</FName>
    <Desc>Object oriented style
bool XMLWriter::openMemory ( void )
Procedural style
resource xmlwriter_open_memory ( void )
Creates a new XMLWriter using memory for string output.
</Desc>
    <FName>XMLWriter::openUri</FName>
    <Desc>Object oriented style
bool XMLWriter::openUri ( string $uri )
Procedural style
resource xmlwriter_open_uri ( string $uri )
Creates a new XMLWriter using uri for the output.
</Desc>
    <FName>xmlwriter_open_uri</FName>
    <Desc>Object oriented style
bool XMLWriter::openUri ( string $uri )
Procedural style
resource xmlwriter_open_uri ( string $uri )
Creates a new XMLWriter using uri for the output.
</Desc>
    <FName>XMLWriter::outputMemory</FName>
    <Desc>Object oriented style
string XMLWriter::outputMemory ([ bool $flush = TRUE ] )
Procedural style
string xmlwriter_output_memory ( resource $xmlwriter [, bool $flush = TRUE ] )
Returns the current buffer.
</Desc>
    <FName>xmlwriter_output_memory</FName>
    <Desc>Object oriented style
string XMLWriter::outputMemory ([ bool $flush = TRUE ] )
Procedural style
string xmlwriter_output_memory ( resource $xmlwriter [, bool $flush = TRUE ] )
Returns the current buffer.
</Desc>
    <FName>XMLWriter::setIndentString</FName>
    <Desc>Object oriented style
bool XMLWriter::setIndentString ( string $indentString )
Procedural style
bool xmlwriter_set_indent_string ( resource $xmlwriter , string $indentString )
Sets the string which will be used to indent each element/attribute of the resulting xml.
</Desc>
    <FName>xmlwriter_set_indent_string</FName>
    <Desc>Object oriented style
bool XMLWriter::setIndentString ( string $indentString )
Procedural style
bool xmlwriter_set_indent_string ( resource $xmlwriter , string $indentString )
Sets the string which will be used to indent each element/attribute of the resulting xml.
</Desc>
    <FName>XMLWriter::setIndent</FName>
    <Desc>Object oriented style
bool XMLWriter::setIndent ( bool $indent )
Procedural style
bool xmlwriter_set_indent ( resource $xmlwriter , bool $indent )
Toggles indentation on or off.
</Desc>
    <FName>xmlwriter_set_indent</FName>
    <Desc>Object oriented style
bool XMLWriter::setIndent ( bool $indent )
Procedural style
bool xmlwriter_set_indent ( resource $xmlwriter , bool $indent )
Toggles indentation on or off.
</Desc>
    <FName>XMLWriter::startAttributeNs</FName>
    <Desc>Object oriented style
bool XMLWriter::startAttributeNs ( string $prefix , string $name , string $uri )
Procedural style
bool xmlwriter_start_attribute_ns ( resource $xmlwriter , string $prefix , string $name , string $uri )
Starts a namespaced attribute.
</Desc>
    <FName>xmlwriter_start_attribute_ns</FName>
    <Desc>Object oriented style
bool XMLWriter::startAttributeNs ( string $prefix , string $name , string $uri )
Procedural style
bool xmlwriter_start_attribute_ns ( resource $xmlwriter , string $prefix , string $name , string $uri )
Starts a namespaced attribute.
</Desc>
    <FName>XMLWriter::startAttribute</FName>
    <Desc>Object oriented style
bool XMLWriter::startAttribute ( string $name )
Procedural style
bool xmlwriter_start_attribute ( resource $xmlwriter , string $name )
Starts an attribute.
</Desc>
    <FName>xmlwriter_start_attribute</FName>
    <Desc>Object oriented style
bool XMLWriter::startAttribute ( string $name )
Procedural style
bool xmlwriter_start_attribute ( resource $xmlwriter , string $name )
Starts an attribute.
</Desc>
    <FName>XMLWriter::startCdata</FName>
    <Desc>Object oriented style
bool XMLWriter::startCdata ( void )
Procedural style
bool xmlwriter_start_cdata ( resource $xmlwriter )
Starts a CDATA.
</Desc>
    <FName>xmlwriter_start_cdata</FName>
    <Desc>Object oriented style
bool XMLWriter::startCdata ( void )
Procedural style
bool xmlwriter_start_cdata ( resource $xmlwriter )
Starts a CDATA.
</Desc>
    <FName>XMLWriter::startComment</FName>
    <Desc>Object oriented style
bool XMLWriter::startComment ( void )
Procedural style
bool xmlwriter_start_comment ( resource $xmlwriter )
Starts a comment.
</Desc>
    <FName>xmlwriter_start_comment</FName>
    <Desc>Object oriented style
bool XMLWriter::startComment ( void )
Procedural style
bool xmlwriter_start_comment ( resource $xmlwriter )
Starts a comment.
</Desc>
    <FName>XMLWriter::startDocument</FName>
    <Desc>Object oriented style
bool XMLWriter::startDocument ([ string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]] )
Procedural style
bool xmlwriter_start_document ( resource $xmlwriter [, string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]] )
Starts a document.
</Desc>
    <FName>xmlwriter_start_document</FName>
    <Desc>Object oriented style
bool XMLWriter::startDocument ([ string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]] )
Procedural style
bool xmlwriter_start_document ( resource $xmlwriter [, string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]] )
Starts a document.
</Desc>
    <FName>XMLWriter::startDtdAttlist</FName>
    <Desc>Object oriented style
bool XMLWriter::startDtdAttlist ( string $name )
Procedural style
bool xmlwriter_start_dtd_attlist ( resource $xmlwriter , string $name )
Starts a DTD attribute list.
</Desc>
    <FName>xmlwriter_start_dtd_attlist</FName>
    <Desc>Object oriented style
bool XMLWriter::startDtdAttlist ( string $name )
Procedural style
bool xmlwriter_start_dtd_attlist ( resource $xmlwriter , string $name )
Starts a DTD attribute list.
</Desc>
    <FName>XMLWriter::startDtdElement</FName>
    <Desc>Object oriented style
bool XMLWriter::startDtdElement ( string $qualifiedName )
Procedural style
bool xmlwriter_start_dtd_element ( resource $xmlwriter , string $qualifiedName )
Starts a DTD element.
</Desc>
    <FName>xmlwriter_start_dtd_element</FName>
    <Desc>Object oriented style
bool XMLWriter::startDtdElement ( string $qualifiedName )
Procedural style
bool xmlwriter_start_dtd_element ( resource $xmlwriter , string $qualifiedName )
Starts a DTD element.
</Desc>
    <FName>XMLWriter::startDtdEntity</FName>
    <Desc>Object oriented style
bool XMLWriter::startDtdEntity ( string $name , bool $isparam )
Procedural style
bool xmlwriter_start_dtd_entity ( resource $xmlwriter , string $name , bool $isparam )
Starts a DTD entity.
</Desc>
    <FName>xmlwriter_start_dtd_entity</FName>
    <Desc>Object oriented style
bool XMLWriter::startDtdEntity ( string $name , bool $isparam )
Procedural style
bool xmlwriter_start_dtd_entity ( resource $xmlwriter , string $name , bool $isparam )
Starts a DTD entity.
</Desc>
    <FName>XMLWriter::startDtd</FName>
    <Desc>Object oriented style
bool XMLWriter::startDtd ( string $qualifiedName [, string $publicId [, string $systemId ]] )
Procedural style
bool xmlwriter_start_dtd ( resource $xmlwriter , string $qualifiedName [, string $publicId [, string $systemId ]] )
Starts a DTD.
</Desc>
    <FName>xmlwriter_start_dtd</FName>
    <Desc>Object oriented style
bool XMLWriter::startDtd ( string $qualifiedName [, string $publicId [, string $systemId ]] )
Procedural style
bool xmlwriter_start_dtd ( resource $xmlwriter , string $qualifiedName [, string $publicId [, string $systemId ]] )
Starts a DTD.
</Desc>
    <FName>XMLWriter::startElementNs</FName>
    <Desc>Object oriented style
bool XMLWriter::startElementNs ( string $prefix , string $name , string $uri )
Procedural style
bool xmlwriter_start_element_ns ( resource $xmlwriter , string $prefix , string $name , string $uri )
Starts a namespaced element.
</Desc>
    <FName>xmlwriter_start_element_ns</FName>
    <Desc>Object oriented style
bool XMLWriter::startElementNs ( string $prefix , string $name , string $uri )
Procedural style
bool xmlwriter_start_element_ns ( resource $xmlwriter , string $prefix , string $name , string $uri )
Starts a namespaced element.
</Desc>
    <FName>XMLWriter::startElement</FName>
    <Desc>Object oriented style
bool XMLWriter::startElement ( string $name )
Procedural style
bool xmlwriter_start_element ( resource $xmlwriter , string $name )
Starts an element.
</Desc>
    <FName>xmlwriter_start_element</FName>
    <Desc>Object oriented style
bool XMLWriter::startElement ( string $name )
Procedural style
bool xmlwriter_start_element ( resource $xmlwriter , string $name )
Starts an element.
</Desc>
    <FName>XMLWriter::startPi</FName>
    <Desc>Object oriented style
bool XMLWriter::startPi ( string $target )
Procedural style
bool xmlwriter_start_pi ( resource $xmlwriter , string $target )
Starts a processing instruction tag.
</Desc>
    <FName>xmlwriter_start_pi</FName>
    <Desc>Object oriented style
bool XMLWriter::startPi ( string $target )
Procedural style
bool xmlwriter_start_pi ( resource $xmlwriter , string $target )
Starts a processing instruction tag.
</Desc>
    <FName>XMLWriter::text</FName>
    <Desc>Object oriented style
bool XMLWriter::text ( string $content )
Procedural style
bool xmlwriter_text ( resource $xmlwriter , string $content )
Writes a text.
</Desc>
    <FName>xmlwriter_text</FName>
    <Desc>Object oriented style
bool XMLWriter::text ( string $content )
Procedural style
bool xmlwriter_text ( resource $xmlwriter , string $content )
Writes a text.
</Desc>
    <FName>XMLWriter::writeAttributeNs</FName>
    <Desc>Object oriented style
bool XMLWriter::writeAttributeNs ( string $prefix , string $name , string $uri , string $content )
Procedural style
bool xmlwriter_write_attribute_ns ( resource $xmlwriter , string $prefix , string $name , string $uri , string $content )
Writes a full namespaced attribute.
</Desc>
    <FName>xmlwriter_write_attribute_ns</FName>
    <Desc>Object oriented style
bool XMLWriter::writeAttributeNs ( string $prefix , string $name , string $uri , string $content )
Procedural style
bool xmlwriter_write_attribute_ns ( resource $xmlwriter , string $prefix , string $name , string $uri , string $content )
Writes a full namespaced attribute.
</Desc>
    <FName>XMLWriter::writeAttribute</FName>
    <Desc>Object oriented style
bool XMLWriter::writeAttribute ( string $name , string $value )
Procedural style
bool xmlwriter_write_attribute ( resource $xmlwriter , string $name , string $value )
Writes a full attribute.
</Desc>
    <FName>xmlwriter_write_attribute</FName>
    <Desc>Object oriented style
bool XMLWriter::writeAttribute ( string $name , string $value )
Procedural style
bool xmlwriter_write_attribute ( resource $xmlwriter , string $name , string $value )
Writes a full attribute.
</Desc>
    <FName>XMLWriter::writeCdata</FName>
    <Desc>Object oriented style
bool XMLWriter::writeCdata ( string $content )
Procedural style
bool xmlwriter_write_cdata ( resource $xmlwriter , string $content )
Writes a full CDATA.
</Desc>
    <FName>xmlwriter_write_cdata</FName>
    <Desc>Object oriented style
bool XMLWriter::writeCdata ( string $content )
Procedural style
bool xmlwriter_write_cdata ( resource $xmlwriter , string $content )
Writes a full CDATA.
</Desc>
    <FName>XMLWriter::writeComment</FName>
    <Desc>Object oriented style
bool XMLWriter::writeComment ( string $content )
Procedural style
bool xmlwriter_write_comment ( resource $xmlwriter , string $content )
Writes a full comment.
</Desc>
    <FName>xmlwriter_write_comment</FName>
    <Desc>Object oriented style
bool XMLWriter::writeComment ( string $content )
Procedural style
bool xmlwriter_write_comment ( resource $xmlwriter , string $content )
Writes a full comment.
</Desc>
    <FName>XMLWriter::writeDtdAttlist</FName>
    <Desc>Object oriented style
bool XMLWriter::writeDtdAttlist ( string $name , string $content )
Procedural style
bool xmlwriter_write_dtd_attlist ( resource $xmlwriter , string $name , string $content )
Writes a DTD attribute list.
</Desc>
    <FName>xmlwriter_write_dtd_attlist</FName>
    <Desc>Object oriented style
bool XMLWriter::writeDtdAttlist ( string $name , string $content )
Procedural style
bool xmlwriter_write_dtd_attlist ( resource $xmlwriter , string $name , string $content )
Writes a DTD attribute list.
</Desc>
    <FName>XMLWriter::writeDtdElement</FName>
    <Desc>Object oriented style
bool XMLWriter::writeDtdElement ( string $name , string $content )
Procedural style
bool xmlwriter_write_dtd_element ( resource $xmlwriter , string $name , string $content )
Writes a full DTD element.
</Desc>
    <FName>xmlwriter_write_dtd_element</FName>
    <Desc>Object oriented style
bool XMLWriter::writeDtdElement ( string $name , string $content )
Procedural style
bool xmlwriter_write_dtd_element ( resource $xmlwriter , string $name , string $content )
Writes a full DTD element.
</Desc>
    <FName>XMLWriter::writeDtdEntity</FName>
    <Desc>Object oriented style
bool XMLWriter::writeDtdEntity ( string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid )
Procedural style
bool xmlwriter_write_dtd_entity ( resource $xmlwriter , string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid )
Writes a full DTD entity.
</Desc>
    <FName>xmlwriter_write_dtd_entity</FName>
    <Desc>Object oriented style
bool XMLWriter::writeDtdEntity ( string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid )
Procedural style
bool xmlwriter_write_dtd_entity ( resource $xmlwriter , string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid )
Writes a full DTD entity.
</Desc>
    <FName>XMLWriter::writeDtd</FName>
    <Desc>Object oriented style
bool XMLWriter::writeDtd ( string $name [, string $publicId [, string $systemId [, string $subset ]]] )
Procedural style
bool xmlwriter_write_dtd ( resource $xmlwriter , string $name [, string $publicId [, string $systemId [, string $subset ]]] )
Writes a full DTD.
</Desc>
    <FName>xmlwriter_write_dtd</FName>
    <Desc>Object oriented style
bool XMLWriter::writeDtd ( string $name [, string $publicId [, string $systemId [, string $subset ]]] )
Procedural style
bool xmlwriter_write_dtd ( resource $xmlwriter , string $name [, string $publicId [, string $systemId [, string $subset ]]] )
Writes a full DTD.
</Desc>
    <FName>XMLWriter::writeElementNs</FName>
    <Desc>Object oriented style
bool XMLWriter::writeElementNs ( string $prefix , string $name , string $uri [, string $content ] )
Procedural style
bool xmlwriter_write_element_ns ( resource $xmlwriter , string $prefix , string $name , string $uri [, string $content ] )
Writes a full namespaced element tag.
</Desc>
    <FName>xmlwriter_write_element_ns</FName>
    <Desc>Object oriented style
bool XMLWriter::writeElementNs ( string $prefix , string $name , string $uri [, string $content ] )
Procedural style
bool xmlwriter_write_element_ns ( resource $xmlwriter , string $prefix , string $name , string $uri [, string $content ] )
Writes a full namespaced element tag.
</Desc>
    <FName>XMLWriter::writeElement</FName>
    <Desc>Object oriented style
bool XMLWriter::writeElement ( string $name [, string $content ] )
Procedural style
bool xmlwriter_write_element ( resource $xmlwriter , string $name [, string $content ] )
Writes a full element tag.
</Desc>
    <FName>xmlwriter_write_element</FName>
    <Desc>Object oriented style
bool XMLWriter::writeElement ( string $name [, string $content ] )
Procedural style
bool xmlwriter_write_element ( resource $xmlwriter , string $name [, string $content ] )
Writes a full element tag.
</Desc>
    <FName>XMLWriter::writePi</FName>
    <Desc>Object oriented style
bool XMLWriter::writePi ( string $target , string $content )
Procedural style
bool xmlwriter_write_pi ( resource $xmlwriter , string $target , string $content )
Writes a processing instruction.
</Desc>
    <FName>xmlwriter_write_pi</FName>
    <Desc>Object oriented style
bool XMLWriter::writePi ( string $target , string $content )
Procedural style
bool xmlwriter_write_pi ( resource $xmlwriter , string $target , string $content )
Writes a processing instruction.
</Desc>
    <FName>XMLWriter::writeRaw</FName>
    <Desc>Object oriented style
bool XMLWriter::writeRaw ( string $content )
Procedural style
bool xmlwriter_write_raw ( resource $xmlwriter , string $content )
Writes a raw xml text.
</Desc>
    <FName>xmlwriter_write_raw</FName>
    <Desc>Object oriented style
bool XMLWriter::writeRaw ( string $content )
Procedural style
bool xmlwriter_write_raw ( resource $xmlwriter , string $content )
Writes a raw xml text.
</Desc>
    <FName>yaml_emit_file</FName>
    <Desc>bool yaml_emit_file ( string $filename , mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL ]]] )
Generate a YAML representation of the provided data in the filename.
</Desc>
    <FName>yaml_emit</FName>
    <Desc>string yaml_emit ( mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL ]]] )
Generate a YAML representation of the provided data.
</Desc>
    <FName>yaml_parse_file</FName>
    <Desc>mixed yaml_parse_file ( string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL ]]] )
Convert all or part of a YAML document stream read from a file to a PHP variable.
</Desc>
    <FName>yaml_parse_url</FName>
    <Desc>mixed yaml_parse_url ( string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL ]]] )
Convert all or part of a YAML document stream read from a URL to a PHP variable.
</Desc>
    <FName>yaml_parse</FName>
    <Desc>mixed yaml_parse ( string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL ]]] )
Convert all or part of a YAML document stream to a PHP variable.
</Desc>
    <FName>yaz_addinfo</FName>
    <Desc>string yaz_addinfo ( resource $id )
Returns additional error information for the last request on the server. 
With some servers, this function may return the same string as yaz_error().
</Desc>
    <FName>yaz_ccl_conf</FName>
    <Desc>void yaz_ccl_conf ( resource $id , array $config )
This function configures the CCL query parser for a server with definitions of access points (CCL qualifiers) and their mapping to RPN. 
To map a specific CCL query to RPN afterwards call the yaz_ccl_parse() function.
</Desc>
    <FName>yaz_ccl_parse</FName>
    <Desc>bool yaz_ccl_parse ( resource $id , string $query , array &$result )
This function invokes a CCL parser. It converts a given CCL FIND query to an RPN query which may be passed to the yaz_search() function to perform a search. 
To define a set of valid CCL fields call yaz_ccl_conf() prior to this function.
</Desc>
    <FName>yaz_close</FName>
    <Desc>bool yaz_close ( resource $id )
Closes the connection given by parameter id. 
Note: 
This function will only close a non-persistent connection opened by setting the persistent option to FALSE with yaz_connect().
</Desc>
    <FName>yaz_connect</FName>
    <Desc>mixed yaz_connect ( string $zurl [, mixed $options ] )
This function returns a connection resource on success, zero on failure. 
yaz_connect() prepares for a connection to a Z39.50 server. This function is non-blocking and does not attempt to establish a connection - it merely prepares a connect to be performed later when yaz_wait() is called. 
Note: 
The » YAZ proxy is a freely available Z39.50 proxy.
</Desc>
    <FName>yaz_database</FName>
    <Desc>bool yaz_database ( resource $id , string $databases )
This function allows you to change databases within a session by specifying one or more databases to be used in search, retrieval, etc. - overriding databases specified in call to yaz_connect().
</Desc>
    <FName>yaz_element</FName>
    <Desc>bool yaz_element ( resource $id , string $elementset )
This function sets the element set name for retrieval. 
Call this function before yaz_search() or yaz_present() to specify the element set name for records to be retrieved. 
Note: 
If this function appears to have no effect, see the description of the piggybacking option in yaz_connect().
</Desc>
    <FName>yaz_errno</FName>
    <Desc>int yaz_errno ( resource $id )
Returns an error number for the server (last request) identified by id. 
yaz_errno() should be called after network activity for each server - (after yaz_wait() returns) to determine the success or failure of the last operation (e.g. search).
</Desc>
    <FName>yaz_error</FName>
    <Desc>string yaz_error ( resource $id )
yaz_error() returns an English text message corresponding to the last error number as returned by yaz_errno().
</Desc>
    <FName>yaz_es_result</FName>
    <Desc>array yaz_es_result ( resource $id )
This function inspects the last returned Extended Service result from a server. An Extended Service is initiated by either yaz_item_order() or yaz_es().
</Desc>
    <FName>yaz_es</FName>
    <Desc>void yaz_es ( resource $id , string $type , array $args )
This function prepares for an Extended Service Request. Extended Services is family of various Z39.50 facilities, such as Record Update, Item Order, Database administration etc. 
Note: 
Many Z39.50 Servers do not support Extended Services. 
The yaz_es() creates an Extended Service Request packages and puts it into a queue of operations. Use yaz_wait() to send the request(s) to the server. After completion of yaz_wait() the result of the Extended Service operation should be expected with a call to yaz_es_result().
</Desc>
    <FName>yaz_get_option</FName>
    <Desc>string yaz_get_option ( resource $id , string $name )
Returns the value of the option specified with name.
</Desc>
    <FName>yaz_hits</FName>
    <Desc>int yaz_hits ( resource $id [, array &$searchresult ] )
yaz_hits() returns the number of hits for the last search.
</Desc>
    <FName>yaz_itemorder</FName>
    <Desc>void yaz_itemorder ( resource $id , array $args )
This function prepares for an Extended Services request using the Profile for the Use of Z39.50 Item Order Extended Service to Transport ILL (Profile/1). See » this and the » specification.
</Desc>
    <FName>yaz_present</FName>
    <Desc>bool yaz_present ( resource $id )
This function prepares for retrieval of records after a successful search. 
The yaz_range() function should be called prior to this function to specify the range of records to be retrieved.
</Desc>
    <FName>yaz_range</FName>
    <Desc>void yaz_range ( resource $id , int $start , int $number )
Specifies a range of records to retrieve. 
This function should be called before yaz_search() or yaz_present().
</Desc>
    <FName>yaz_record</FName>
    <Desc>string yaz_record ( resource $id , int $pos , string $type )
The yaz_record() function inspects a record in the current result set at the position specified by parameter pos.
</Desc>
    <FName>yaz_scan_result</FName>
    <Desc>array yaz_scan_result ( resource $id [, array &$result ] )
yaz_scan_result() returns terms and associated information as received from the server in the last performed yaz_scan().
</Desc>
    <FName>yaz_scan</FName>
    <Desc>void yaz_scan ( resource $id , string $type , string $startterm [, array $flags ] )
This function prepares for a Z39.50 Scan Request on the specified connection. 
To actually transfer the Scan Request to the server and receive the Scan Response, yaz_wait() must be called. Upon completion of yaz_wait() call yaz_error() and yaz_scan_result() to handle the response.
</Desc>
    <FName>yaz_schema</FName>
    <Desc>void yaz_schema ( resource $id , string $schema )
yaz_schema() specifies the schema for retrieval. 
This function should be called before yaz_search() or yaz_present().
</Desc>
    <FName>yaz_search</FName>
    <Desc>bool yaz_search ( resource $id , string $type , string $query )
yaz_search() prepares for a search on the given connection. 
Like yaz_connect() this function is non-blocking and only prepares for a search to be executed later when yaz_wait() is called.
</Desc>
    <FName>yaz_set_option</FName>
    <Desc>void yaz_set_option ( resource $id , string $name , string $value )
void yaz_set_option ( resource $id , array $options )
Sets one or more options on the given connection.
</Desc>
    <FName>yaz_sort</FName>
    <Desc>void yaz_sort ( resource $id , string $criteria )
This function sets sorting criteria and enables Z39.50 Sort. 
Call this function before yaz_search(). Using this function alone does not have any effect. When used in conjunction with yaz_search(), a Z39.50 Sort will be sent after a search response has been received and before any records are retrieved with Z39.50 Present (yaz_present().
</Desc>
    <FName>yaz_syntax</FName>
    <Desc>void yaz_syntax ( resource $id , string $syntax )
yaz_syntax() specifies the preferred record syntax for retrieval 
This function should be called before yaz_search() or yaz_present().
</Desc>
    <FName>yaz_wait</FName>
    <Desc>mixed yaz_wait ([ array &$options ] )
This function carries out networked (blocked) activity for outstanding requests which have been prepared by the functions yaz_connect(), yaz_search(), yaz_present(), yaz_scan() and yaz_itemorder(). 
yaz_wait() returns when all servers have either completed all requests or aborted (in case of errors).
</Desc>
    <FName>yp_all</FName>
    <Desc>void yp_all ( string $domain , string $map , string $callback )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>yp_cat</FName>
    <Desc>array yp_cat ( string $domain , string $map )
Returns all map entries.
</Desc>
    <FName>yp_err_string</FName>
    <Desc>string yp_err_string ( int $errorcode )
Returns the error message associated with the given error code. Useful to indicate what exactly went wrong.
</Desc>
    <FName>yp_errno</FName>
    <Desc>int yp_errno ( void )
Returns the error code of the previous operation.
</Desc>
    <FName>yp_first</FName>
    <Desc>array yp_first ( string $domain , string $map )
Gets the first key-value pair from the named map in the named domain.
</Desc>
    <FName>yp_get_default_domain</FName>
    <Desc>string yp_get_default_domain ( void )
Returns the default domain of the node. Can be used as the domain parameter for successive NIS calls. 
A NIS domain can be described a group of NIS maps. Every host that needs to look up information binds itself to a certain domain. Refer to the documents mentioned at the beginning for more detailed information.
</Desc>
    <FName>yp_master</FName>
    <Desc>string yp_master ( string $domain , string $map )
Returns the machine name of the master NIS server for a map.
</Desc>
    <FName>yp_match</FName>
    <Desc>string yp_match ( string $domain , string $map , string $key )
Returns the value associated with the passed key out of the specified map.
</Desc>
    <FName>yp_next</FName>
    <Desc>array yp_next ( string $domain , string $map , string $key )
Returns the next key-value pair in the named map after the specified key.
</Desc>
    <FName>yp_order</FName>
    <Desc>int yp_order ( string $domain , string $map )
Gets the order number for a map.
</Desc>
    <FName>zend_logo_guid</FName>
    <Desc>string zend_logo_guid ( void )
This function returns the ID which can be used to display the Zend logo using the built-in image. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.5.0.
</Desc>
    <FName>zend_thread_id</FName>
    <Desc>int zend_thread_id ( void )
This function returns a unique identifier for the current thread.
</Desc>
    <FName>zend_version</FName>
    <Desc>string zend_version ( void )
Returns a string containing the version of the currently running Zend Engine.
</Desc>
    <FName>zip_close</FName>
    <Desc>void zip_close ( resource $zip )
Closes the given ZIP file archive.
</Desc>
    <FName>zip_entry_close</FName>
    <Desc>bool zip_entry_close ( resource $zip_entry )
Closes the specified directory entry.
</Desc>
    <FName>zip_entry_compressedsize</FName>
    <Desc>int zip_entry_compressedsize ( resource $zip_entry )
Returns the compressed size of the specified directory entry.
</Desc>
    <FName>zip_entry_compressionmethod</FName>
    <Desc>string zip_entry_compressionmethod ( resource $zip_entry )
Returns the compression method of the directory entry specified by zip_entry.
</Desc>
    <FName>zip_entry_filesize</FName>
    <Desc>int zip_entry_filesize ( resource $zip_entry )
Returns the actual size of the specified directory entry.
</Desc>
    <FName>zip_entry_name</FName>
    <Desc>string zip_entry_name ( resource $zip_entry )
Returns the name of the specified directory entry.
</Desc>
    <FName>zip_entry_open</FName>
    <Desc>bool zip_entry_open ( resource $zip , resource $zip_entry [, string $mode ] )
Opens a directory entry in a zip file for reading.
</Desc>
    <FName>zip_entry_read</FName>
    <Desc>string zip_entry_read ( resource $zip_entry [, int $length = 1024 ] )
Reads from an open directory entry.
</Desc>
    <FName>zip_open</FName>
    <Desc>resource zip_open ( string $filename )
Opens a new zip archive for reading.
</Desc>
    <FName>zip_read</FName>
    <Desc>resource zip_read ( resource $zip )
Reads the next entry in a zip file archive.
</Desc>
    <FName>zlib_decode</FName>
    <Desc>string zlib_decode ( string $data [, string $max_decoded_len ] )
Uncompress any raw/gzip/zlib encoded data. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>zlib_encode</FName>
    <Desc>string zlib_encode ( string $data , int $encoding [, int $level = -1 ] )
Compress data with the specified encoding. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>zlib_get_coding_type</FName>
    <Desc>string zlib_get_coding_type ( void )
Returns the coding type used for output compression.
</Desc>
    <FName>GearmanClient::addOptions</FName>
    <Desc>public bool GearmanClient::addOptions ( int $options )
Adds one or more options to those already set.
</Desc>
    <FName>GearmanClient::addServer</FName>
    <Desc>public bool GearmanClient::addServer ([ string $host = 127.0.0.1 [, int $port = 4730 ]] )
Adds a job server to a list of servers that can be used to run a task. No socket I/O happens here; the server is simply added to the list.
</Desc>
    <FName>GearmanClient::addServers</FName>
    <Desc>public bool GearmanClient::addServers ([ string $servers = 127.0.0.1:4730 ] )
Adds a list of job servers that can be used to run a task. No socket I/O happens here; the servers are simply added to the full list of servers.
</Desc>
    <FName>GearmanClient::addTask</FName>
    <Desc>public GearmanTask GearmanClient::addTask ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )
Adds a task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Note that enough workers need to be available for the tasks to all run in parallel.
</Desc>
    <FName>GearmanClient::addTaskBackground</FName>
    <Desc>public GearmanTask GearmanClient::addTaskBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )
Adds a background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work.
</Desc>
    <FName>GearmanClient::addTaskHigh</FName>
    <Desc>public GearmanTask GearmanClient::addTaskHigh ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )
Adds a high priority task to be run in parallel with other tasks. Call this method for all the high priority tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a high priority will be selected from the queue before those of normal or low priority.
</Desc>
    <FName>GearmanClient::addTaskHighBackground</FName>
    <Desc>public GearmanTask GearmanClient::addTaskHighBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )
Adds a high priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a high priority will be selected from the queue before those of normal or low priority.
</Desc>
    <FName>GearmanClient::addTaskLow</FName>
    <Desc>public GearmanTask GearmanClient::addTaskLow ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )
Adds a low priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a low priority will be selected from the queue after those of normal or low priority.
</Desc>
    <FName>GearmanClient::addTaskLowBackground</FName>
    <Desc>public GearmanTask GearmanClient::addTaskLowBackground ( string $function_name , string $workload [, mixed &$context [, string $unique ]] )
Adds a low priority background task to be run in parallel with other tasks. Call this method for all the tasks to be run in parallel, then call GearmanClient::runTasks() to perform the work. Tasks with a low priority will be selected from the queue after those of normal or high priority.
</Desc>
    <FName>GearmanClient::addTaskStatus</FName>
    <Desc>public GearmanTask GearmanClient::addTaskStatus ( string $job_handle [, string &$context ] )
Used to request status information from the Gearman server, which will call the specified status callback (set using GearmanClient::setStatusCallback()).
</Desc>
    <FName>GearmanClient::clearCallbacks</FName>
    <Desc>public bool GearmanClient::clearCallbacks ( void )
Clears all the task callback functions that have previously been set.
</Desc>
    <FName>GearmanClient::clone</FName>
    <Desc>public GearmanClient GearmanClient::clone ( void )
Creates a copy of a GearmanClient object.
</Desc>
    <FName>GearmanClient::__construct</FName>
    <Desc>public GearmanClient::__construct ( void )
Creates a GearmanClient instance representing a client that connects to the job server and submits tasks to complete.
</Desc>
    <FName>GearmanClient::context</FName>
    <Desc>public string GearmanClient::context ( void )
Get the application context previously set with GearmanClient::setContext().
</Desc>
    <FName>GearmanClient::data</FName>
    <Desc>public string GearmanClient::data ( void )
Get the application data previously set with GearmanClient::setData(). 
Note: 
This method was replaced by GearmanClient::setContext() in the 0.6.0 release of the Gearman extension.
</Desc>
    <FName>GearmanClient::do</FName>
    <Desc>public string GearmanClient::do ( string $function_name , string $workload [, string $unique ] )
The GearmanClient::do() method is deprecated as of pecl/gearman 1.0.0. Use GearmanClient::doNormal().
</Desc>
    <FName>GearmanClient::doBackground</FName>
    <Desc>public string GearmanClient::doBackground ( string $function_name , string $workload [, string $unique ] )
Runs a task in the background, returning a job handle which can be used to get the status of the running task.
</Desc>
    <FName>GearmanClient::doHigh</FName>
    <Desc>public string GearmanClient::doHigh ( string $function_name , string $workload [, string $unique ] )
Runs a single high priority task and returns a string representation of the result. It is up to the GearmanClient and GearmanWorker to agree on the format of the result. High priority tasks will get precedence over normal and low priority tasks in the job queue.
</Desc>
    <FName>GearmanClient::doHighBackground</FName>
    <Desc>public string GearmanClient::doHighBackground ( string $function_name , string $workload [, string $unique ] )
Runs a high priority task in the background, returning a job handle which can be used to get the status of the running task. High priority tasks take precedence over normal and low priority tasks in the job queue.
</Desc>
    <FName>GearmanClient::doJobHandle</FName>
    <Desc>public string GearmanClient::doJobHandle ( void )
Gets that job handle for a running task. This should be used between repeated GearmanClient::doNormal() calls. The job handle can then be used to get information on the task.
</Desc>
    <FName>GearmanClient::doLow</FName>
    <Desc>public string GearmanClient::doLow ( string $function_name , string $workload [, string $unique ] )
Runs a single low priority task and returns a string representation of the result. It is up to the GearmanClient and GearmanWorker to agree on the format of the result. Normal and high priority tasks will get precedence over low priority tasks in the job queue.
</Desc>
    <FName>GearmanClient::doLowBackground</FName>
    <Desc>public string GearmanClient::doLowBackground ( string $function_name , string $workload [, string $unique ] )
Runs a low priority task in the background, returning a job handle which can be used to get the status of the running task. Normal and high priority tasks take precedence over low priority tasks in the job queue.
</Desc>
    <FName>GearmanClient::doNormal</FName>
    <Desc>public string GearmanClient::doNormal ( string $function_name , string $workload [, string $unique ] )
Runs a single task and returns a string representation of the result. It is up to the GearmanClient and GearmanWorker to agree on the format of the result.
</Desc>
    <FName>GearmanClient::doStatus</FName>
    <Desc>public array GearmanClient::doStatus ( void )
Returns the status for the running task. This should be used between repeated GearmanClient::doNormal() calls.
</Desc>
    <FName>GearmanClient::echo</FName>
    <Desc>public bool GearmanClient::echo ( string $workload )
The GearmanClient::echo() method is deprecated as of pecl/gearman 1.0.0. Use GearmanClient::ping().
</Desc>
    <FName>GearmanClient::error</FName>
    <Desc>public string GearmanClient::error ( void )
Returns an error string for the last error encountered.
</Desc>
    <FName>GearmanClient::getErrno</FName>
    <Desc>public int GearmanClient::getErrno ( void )
Value of errno in the case of a GEARMAN_ERRNO return value.
</Desc>
    <FName>GearmanClient::jobStatus</FName>
    <Desc>Object oriented style (method):
public array GearmanClient::jobStatus ( string $job_handle )
Gets the status for a background job given a job handle. The status information will specify whether the job is known, whether the job is currently running, and the percentage completion.
</Desc>
    <FName>gearman_job_status</FName>
    <Desc>Object oriented style (method):
public array GearmanClient::jobStatus ( string $job_handle )
Gets the status for a background job given a job handle. The status information will specify whether the job is known, whether the job is currently running, and the percentage completion.
</Desc>
    <FName>GearmanClient::ping</FName>
    <Desc>public bool GearmanClient::ping ( string $workload )
Sends some arbitrary data to all job servers to see if they echo it back. The data sent is not used or processed in any other way. Primarily used for testing and debugging.
</Desc>
    <FName>GearmanClient::removeOptions</FName>
    <Desc>public bool GearmanClient::removeOptions ( int $options )
Removes (unsets) one or more options.
</Desc>
    <FName>GearmanClient::returnCode</FName>
    <Desc>public int GearmanClient::returnCode ( void )
Returns the last Gearman return code.
</Desc>
    <FName>GearmanClient::runTasks</FName>
    <Desc>public bool GearmanClient::runTasks ( void )
For a set of tasks previously added with GearmanClient::addTask(), GearmanClient::addTaskHigh(), GearmanClient::addTaskLow(), GearmanClient::addTaskBackground(), GearmanClient::addTaskHighBackground(), or GearmanClient::addTaskLowBackground(), this call starts running the tasks in parallel.
</Desc>
    <FName>GearmanClient::setClientCallback</FName>
    <Desc>public void GearmanClient::setClientCallback ( callable $callback )
Sets the callback function for accepting data packets for a task. The callback function should take a single argument, a GearmanTask object. 
Note: 
This method has been replaced by GearmanClient::setDataCallback() in the 0.6.0 release of the Gearman extension.
</Desc>
    <FName>GearmanClient::setCompleteCallback</FName>
    <Desc>public bool GearmanClient::setCompleteCallback ( callable $callback )
Use to set a function to be called when a GearmanTask is completed, or when GearmanJob::sendComplete() is invoked by a worker (whichever happens first). 
This callback executes only when executing a GearmanTask using GearmanClient::runTasks(). It is not used for individual jobs.
</Desc>
    <FName>GearmanClient::setContext</FName>
    <Desc>public bool GearmanClient::setContext ( string $context )
Sets an arbitrary string to provide application context that can later be retrieved by GearmanClient::context().
</Desc>
    <FName>GearmanClient::setCreatedCallback</FName>
    <Desc>public bool GearmanClient::setCreatedCallback ( string $callback )
Sets a function to be called when a task is received and queued by the Gearman job server. The callback should accept a single argument, a GearmanTask object.
</Desc>
    <FName>GearmanClient::setData</FName>
    <Desc>public bool GearmanClient::setData ( string $data )
Sets some arbitrary application data that can later be retrieved by GearmanClient::data(). 
Note: 
This method has been replaced by GearmanCient::setContext() in the 0.6.0 release of the Gearman extension.
</Desc>
    <FName>GearmanClient::setDataCallback</FName>
    <Desc>public bool GearmanClient::setDataCallback ( callable $callback )
Sets the callback function for accepting data packets for a task. The callback function should take a single argument, a GearmanTask object.
</Desc>
    <FName>GearmanClient::setExceptionCallback</FName>
    <Desc>public bool GearmanClient::setExceptionCallback ( callable $callback )
Specifies a function to call when a worker for a task sends an exception.
</Desc>
    <FName>GearmanClient::setFailCallback</FName>
    <Desc>public bool GearmanClient::setFailCallback ( callable $callback )
Sets the callback function to be used when a task does not complete successfully. The function should accept a single argument, a GearmanTask object.
</Desc>
    <FName>GearmanClient::setOptions</FName>
    <Desc>public bool GearmanClient::setOptions ( int $options )
Sets one or more client options.
</Desc>
    <FName>GearmanClient::setStatusCallback</FName>
    <Desc>public bool GearmanClient::setStatusCallback ( callable $callback )
Sets a callback function used for getting updated status information from a worker. The function should accept a single argument, a GearmanTask object.
</Desc>
    <FName>GearmanClient::setTimeout</FName>
    <Desc>public bool GearmanClient::setTimeout ( int $timeout )
Sets the timeout for socket I/O activity.
</Desc>
    <FName>GearmanClient::setWarningCallback</FName>
    <Desc>public bool GearmanClient::setWarningCallback ( callable $callback )
Sets a function to be called when a worker sends a warning. The callback should accept a single argument, a GearmanTask object.
</Desc>
    <FName>GearmanClient::setWorkloadCallback</FName>
    <Desc>public bool GearmanClient::setWorkloadCallback ( callable $callback )
Sets a function to be called when a worker needs to send back data prior to job completion. A worker can do this when it needs to send updates, send partial results, or flush data during long running jobs. The callback should accept a single argument, a GearmanTask object.
</Desc>
    <FName>GearmanClient::timeout</FName>
    <Desc>public int GearmanClient::timeout ( void )
Returns the timeout in milliseconds to wait for I/O activity.
</Desc>
    <FName>GearmanJob::complete</FName>
    <Desc>public bool GearmanJob::complete ( string $result )
Sends result data and the complete status update for this job. 
Note: 
This method has been replaced by GearmanJob::sendComplete() in the 0.6.0 release of the Gearman extension.
</Desc>
    <FName>GearmanJob::__construct</FName>
    <Desc>public GearmanJob::__construct ( void )
Creates a GearmanJob instance representing a job the worker is to complete.
</Desc>
    <FName>GearmanJob::data</FName>
    <Desc>public bool GearmanJob::data ( string $data )
Sends data to the job server (and any listening clients) for this job. 
Note: 
This method has been replaced by GearmanJob::sendData() in the 0.6.0 release of the Gearman extension.
</Desc>
    <FName>GearmanJob::exception</FName>
    <Desc>public bool GearmanJob::exception ( string $exception )
Sends the supplied exception when this job is running. 
Note: 
This method has been replaced by GearmanJob::sendException() in the 0.6.0 release of the Gearman extension.
</Desc>
    <FName>GearmanJob::fail</FName>
    <Desc>public bool GearmanJob::fail ( void )
Sends failure status for this job, indicating that the job failed in a known way (as opposed to failing due to a thrown exception). 
Note: 
This method has been replaced by GearmanJob::sendFail() in the 0.6.0 release of the Gearman extension.
</Desc>
    <FName>GearmanJob::functionName</FName>
    <Desc>public string GearmanJob::functionName ( void )
Returns the function name for this job. This is the function the work will execute to perform the job.
</Desc>
    <FName>GearmanJob::handle</FName>
    <Desc>public string GearmanJob::handle ( void )
Returns the opaque job handle assigned by the job server.
</Desc>
    <FName>GearmanJob::returnCode</FName>
    <Desc>public int GearmanJob::returnCode ( void )
Returns the last return code issued by the job server.
</Desc>
    <FName>GearmanJob::sendComplete</FName>
    <Desc>public bool GearmanJob::sendComplete ( string $result )
Sends result data and the complete status update for this job.
</Desc>
    <FName>GearmanJob::sendData</FName>
    <Desc>public bool GearmanJob::sendData ( string $data )
Sends data to the job server (and any listening clients) for this job.
</Desc>
    <FName>GearmanJob::sendException</FName>
    <Desc>public bool GearmanJob::sendException ( string $exception )
Sends the supplied exception when this job is running.
</Desc>
    <FName>GearmanJob::sendFail</FName>
    <Desc>public bool GearmanJob::sendFail ( void )
Sends failure status for this job, indicating that the job failed in a known way (as opposed to failing due to a thrown exception).
</Desc>
    <FName>GearmanJob::sendStatus</FName>
    <Desc>public bool GearmanJob::sendStatus ( int $numerator , int $denominator )
Sends status information to the job server and any listening clients. Use this to specify what percentage of the job has been completed.
</Desc>
    <FName>GearmanJob::sendWarning</FName>
    <Desc>public bool GearmanJob::sendWarning ( string $warning )
Sends a warning for this job while it is running.
</Desc>
    <FName>GearmanJob::setReturn</FName>
    <Desc>public bool GearmanJob::setReturn ( int $gearman_return_t )
Sets the return value for this job, indicates how the job completed.
</Desc>
    <FName>GearmanJob::status</FName>
    <Desc>public bool GearmanJob::status ( int $numerator , int $denominator )
Sends status information to the job server and any listening clients. Use this to specify what percentage of the job has been completed. 
Note: 
This method has been replaced by GearmanJob::sendStatus() in the 0.6.0 release of the Gearman extenstion.
</Desc>
    <FName>GearmanJob::unique</FName>
    <Desc>public string GearmanJob::unique ( void )
Returns the unique identifiter for this job. The identifier is assigned by the client.
</Desc>
    <FName>GearmanJob::warning</FName>
    <Desc>public bool GearmanJob::warning ( string $warning )
Sends a warning for this job while it is running. 
Note: 
This method has been replaced by GearmanJob::sendWarning() in the 0.6.0 release of the Gearman extension.
</Desc>
    <FName>GearmanJob::workload</FName>
    <Desc>public string GearmanJob::workload ( void )
Returns the workload for the job. This is serialized data that is to be processed by the worker.
</Desc>
    <FName>GearmanJob::workloadSize</FName>
    <Desc>public int GearmanJob::workloadSize ( void )
Returns the size of the job's work load (the data the worker is to process) in bytes.
</Desc>
    <FName>GearmanTask::__construct</FName>
    <Desc>public GearmanTask::__construct ( void )
Creates a GearmanTask instance representing a task to be submitted to a job server.
</Desc>
    <FName>GearmanTask::create</FName>
    <Desc>public GearmanTask GearmanTask::create ( void )
Returns a new GearmanTask object. 
Note: 
This method was removed in the 0.6.0 version of the Gearman extension.
</Desc>
    <FName>GearmanTask::data</FName>
    <Desc>public string GearmanTask::data ( void )
Returns data being returned for a task by a worker.
</Desc>
    <FName>GearmanTask::dataSize</FName>
    <Desc>public int GearmanTask::dataSize ( void )
Returns the size of the data being returned for a task.
</Desc>
    <FName>GearmanTask::function</FName>
    <Desc>public string GearmanTask::function ( void )
Returns the name of the function this task is associated with, i.e., the function the Gearman worker calls. 
Note: 
This method has been replaced by GearmanTask::functionName() in the 0.6.0 release of the Gearman extension.
</Desc>
    <FName>GearmanTask::functionName</FName>
    <Desc>public string GearmanTask::functionName ( void )
Returns the name of the function this task is associated with, i.e., the function the Gearman worker calls.
</Desc>
    <FName>GearmanTask::isKnown</FName>
    <Desc>public bool GearmanTask::isKnown ( void )
Gets the status information for whether or not this task is known to the job server.
</Desc>
    <FName>GearmanTask::isRunning</FName>
    <Desc>public bool GearmanTask::isRunning ( void )
Indicates whether or not this task is currently running.
</Desc>
    <FName>GearmanTask::jobHandle</FName>
    <Desc>public string GearmanTask::jobHandle ( void )
Returns the job handle for this task.
</Desc>
    <FName>gearman_job_handle</FName>
    <Desc>public string GearmanTask::jobHandle ( void )
Returns the job handle for this task.
</Desc>
    <FName>GearmanTask::recvData</FName>
    <Desc>public array GearmanTask::recvData ( int $data_len )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>GearmanTask::returnCode</FName>
    <Desc>public int GearmanTask::returnCode ( void )
Returns the last Gearman return code for this task.
</Desc>
    <FName>GearmanTask::sendData</FName>
    <Desc>public int GearmanTask::sendData ( string $data )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>GearmanTask::sendWorkload</FName>
    <Desc>public int GearmanTask::sendWorkload ( string $data )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>GearmanTask::taskDenominator</FName>
    <Desc>public int GearmanTask::taskDenominator ( void )
Returns the denominator of the percentage of the task that is complete expressed as a fraction.
</Desc>
    <FName>GearmanTask::taskNumerator</FName>
    <Desc>public int GearmanTask::taskNumerator ( void )
Returns the numerator of the percentage of the task that is complete expressed as a fraction.
</Desc>
    <FName>GearmanTask::unique</FName>
    <Desc>public string GearmanTask::unique ( void )
Returns the unique identifier for this task. This is assigned by the GearmanClient, as opposed to the job handle which is set by the Gearman job server.
</Desc>
    <FName>GearmanTask::uuid</FName>
    <Desc>public string GearmanTask::uuid ( void )
Returns the unique identifier for this task. This is assigned by the GearmanClient, as opposed to the job handle which is set by the Gearman job server. 
Note: 
This method has been replaced by GearmanTask::unique() in the 0.6.0 release of the Gearman extension.
</Desc>
    <FName>GearmanWorker::addFunction</FName>
    <Desc>public bool GearmanWorker::addFunction ( string $function_name , callable $function [, mixed &$context [, int $timeout ]] )
Registers a function name with the job server and specifies a callback corresponding to that function. Optionally specify extra application context data to be used when the callback is called and a timeout.
</Desc>
    <FName>GearmanWorker::addOptions</FName>
    <Desc>public bool GearmanWorker::addOptions ( int $option )
Adds one or more options to the options previously set.
</Desc>
    <FName>GearmanWorker::addServer</FName>
    <Desc>public bool GearmanWorker::addServer ([ string $host = 127.0.0.1 [, int $port = 4730 ]] )
Adds a job server to this worker. This goes into a list of servers than can be used to run jobs. No socket I/O happens here.
</Desc>
    <FName>GearmanWorker::addServers</FName>
    <Desc>public bool GearmanWorker::addServers ( string $servers = 127.0.0.1:4730 )
Adds one or more job servers to this worker. These go into a list of servers that can be used to run jobs. No socket I/O happens here.
</Desc>
    <FName>GearmanWorker::clone</FName>
    <Desc>public void GearmanWorker::clone ( void )
Creates a copy of the worker.
</Desc>
    <FName>GearmanWorker::__construct</FName>
    <Desc>public GearmanWorker::__construct ( void )
Creates a GearmanWorker instance representing a worker that connects to the job server and accepts tasks to run.
</Desc>
    <FName>GearmanWorker::echo</FName>
    <Desc>public bool GearmanWorker::echo ( string $workload )
Sends data to all job servers to see if they echo it back. This is a test function to see if job servers are responding properly.
</Desc>
    <FName>GearmanWorker::error</FName>
    <Desc>public string GearmanWorker::error ( void )
Returns an error string for the last error encountered.
</Desc>
    <FName>GearmanWorker::getErrno</FName>
    <Desc>public int GearmanWorker::getErrno ( void )
Returns the value of errno in the case of a GEARMAN_ERRNO return value.
</Desc>
    <FName>GearmanWorker::options</FName>
    <Desc>public int GearmanWorker::options ( void )
Gets the options previously set for the worker.
</Desc>
    <FName>GearmanWorker::register</FName>
    <Desc>public bool GearmanWorker::register ( string $function_name [, int $timeout ] )
Registers a function name with the job server with an optional timeout. The timeout specifies how many seconds the server will wait before marking a job as failed. If the timeout is set to zero, there is no timeout.
</Desc>
    <FName>GearmanWorker::removeOptions</FName>
    <Desc>public bool GearmanWorker::removeOptions ( int $option )
Removes (unsets) one or more worker options.
</Desc>
    <FName>GearmanWorker::returnCode</FName>
    <Desc>public int GearmanWorker::returnCode ( void )
Returns the last Gearman return code.
</Desc>
    <FName>GearmanWorker::setId</FName>
    <Desc>public bool GearmanWorker::setId ( string $id )
Assigns the worker an identifier.
</Desc>
    <FName>GearmanWorker::setOptions</FName>
    <Desc>public bool GearmanWorker::setOptions ( int $option )
Sets one or more options to the supplied value.
</Desc>
    <FName>GearmanWorker::setTimeout</FName>
    <Desc>public bool GearmanWorker::setTimeout ( int $timeout )
Sets the interval of time to wait for socket I/O activity.
</Desc>
    <FName>GearmanWorker::timeout</FName>
    <Desc>public int GearmanWorker::timeout ( void )
Returns the current time to wait, in milliseconds, for socket I/O activity.
</Desc>
    <FName>GearmanWorker::unregister</FName>
    <Desc>public bool GearmanWorker::unregister ( string $function_name )
Unregisters a function name with the job servers ensuring that no more jobs (for that function) are sent to this worker.
</Desc>
    <FName>GearmanWorker::unregisterAll</FName>
    <Desc>public bool GearmanWorker::unregisterAll ( void )
Unregisters all previously registered functions, ensuring that no more jobs are sent to this worker.
</Desc>
    <FName>GearmanWorker::wait</FName>
    <Desc>public bool GearmanWorker::wait ( void )
Causes the worker to wait for activity from one of the Gearman job servers when operating in non-blocking I/O mode. On failure, issues a E_WARNING with the last Gearman error encountered.
</Desc>
    <FName>GearmanWorker::work</FName>
    <Desc>public bool GearmanWorker::work ( void )
Waits for a job to be assigned and then calls the appropriate callback function. Issues an E_WARNING with the last Gearman error if the return code is not one of GEARMAN_SUCCESS, GEARMAN_IO_WAIT, or GEARMAN_WORK_FAIL.
</Desc>
    <FName>Gender\Gender::connect</FName>
    <Desc>public bool Gender\Gender::connect ( string $dsn )
Connect to an external name dictionary. Currently only streams are supported.
</Desc>
    <FName>Gender\Gender::__construct</FName>
    <Desc>public Gender\Gender::__construct ([ string $dsn ] )
Create a Gender object optionally connecting to an external name dictionary. When no external database was given, compiled in data will be used.
</Desc>
    <FName>Gender\Gender::country</FName>
    <Desc>public array Gender\Gender::country ( int $country )
Returns the textual representation of a country from a Gender class constant.
</Desc>
    <FName>Gender\Gender::get</FName>
    <Desc>public int Gender\Gender::get ( string $name [, int $country ] )
Get the gender of the name in a particular country.
</Desc>
    <FName>Gender\Gender::isNick</FName>
    <Desc>public array Gender\Gender::isNick ( string $name0 , string $name1 [, int $country ] )
Check whether the name0 is a nick of the name1.
</Desc>
    <FName>Gender\Gender::similarNames</FName>
    <Desc>public array Gender\Gender::similarNames ( string $name [, int $country ] )
Get similar names for the given name and country.
</Desc>
    <FName>Generator::current</FName>
    <Desc>public mixed Generator::current ( void )
</Desc>
    <FName>Generator::getReturn</FName>
    <Desc>public mixed Generator::getReturn ( void )
</Desc>
    <FName>Generator::key</FName>
    <Desc>public mixed Generator::key ( void )
Gets the key of the yielded value.
</Desc>
    <FName>Generator::next</FName>
    <Desc>public void Generator::next ( void )
Calling Generator::next() is equivalent to calling Generator::send() with NULL as argument.
</Desc>
    <FName>Generator::rewind</FName>
    <Desc>public void Generator::rewind ( void )
If iteration has already begun, this will throw an exception.
</Desc>
    <FName>Generator::send</FName>
    <Desc>public mixed Generator::send ( mixed $value )
Sends the given value to the generator as the result of the current yield expression and resumes execution of the generator. 
If the generator is not at a yield expression when this method is called, it will first be let to advance to the first yield expression before sending the value. As such it is not necessary to "prime" PHP generators with a Generator::next() call (like it is done in Python).
</Desc>
    <FName>Generator::throw</FName>
    <Desc>public mixed Generator::throw ( Throwable $exception )
Throws an exception into the generator and resumes execution of the generator. The behavior will be the same as if the current yield expression was replaced with a throw $exception statement. 
If the generator is already closed when this method is invoked, the exception will be thrown in the caller's context instead.
</Desc>
    <FName>Generator::valid</FName>
    <Desc>public bool Generator::valid ( void )
</Desc>
    <FName>Generator::__wakeup</FName>
    <Desc>public void Generator::__wakeup ( void )
Throws an exception as generators can't be serialized.
</Desc>
    <FName>GlobIterator::__construct</FName>
    <Desc>public GlobIterator::__construct ( string $pattern [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )
Constructs a new directory iterator from a glob expression.
</Desc>
    <FName>GlobIterator::count</FName>
    <Desc>public int GlobIterator::count ( void )
Gets the number of directories and files found by the glob expression.
</Desc>
    <FName>Gmagick::addimage</FName>
    <Desc>public Gmagick Gmagick::addimage ( Gmagick $source )
Adds new image to Gmagick object from the current position of the source object. After the operation iterator position is moved at the end of the list.
</Desc>
    <FName>Gmagick::addnoiseimage</FName>
    <Desc>public Gmagick Gmagick::addnoiseimage ( int $noise_type )
Adds random noise to the image.
</Desc>
    <FName>Gmagick::annotateimage</FName>
    <Desc>public Gmagick Gmagick::annotateimage ( GmagickDraw $GmagickDraw , float $x , float $y , float $angle , string $text )
Annotates an image with text.
</Desc>
    <FName>Gmagick::blurimage</FName>
    <Desc>public Gmagick Gmagick::blurimage ( float $radius , float $sigma [, int $channel ] )
Adds blur filter to image.
</Desc>
    <FName>Gmagick::borderimage</FName>
    <Desc>public Gmagick Gmagick::borderimage ( GmagickPixel $color , int $width , int $height )
Surrounds the image with a border of the color defined by the bordercolor GmagickPixel object or a color string.
</Desc>
    <FName>Gmagick::charcoalimage</FName>
    <Desc>public Gmagick Gmagick::charcoalimage ( float $radius , float $sigma )
Simulates a charcoal drawing.
</Desc>
    <FName>Gmagick::chopimage</FName>
    <Desc>public Gmagick Gmagick::chopimage ( int $width , int $height , int $x , int $y )
Removes a region of an image and collapses the image to occupy the removed portion.
</Desc>
    <FName>Gmagick::clear</FName>
    <Desc>public Gmagick Gmagick::clear ( void )
Clears all resources associated to Gmagick object
</Desc>
    <FName>Gmagick::commentimage</FName>
    <Desc>public Gmagick Gmagick::commentimage ( string $comment )
Adds a comment to your image.
</Desc>
    <FName>Gmagick::compositeimage</FName>
    <Desc>public Gmagick Gmagick::compositeimage ( Gmagick $source , int $COMPOSE , int $x , int $y )
Composite one image onto another at the specified offset.
</Desc>
    <FName>Gmagick::__construct</FName>
    <Desc>public Gmagick::__construct ([ string $filename ] )
The Gmagick constructor.
</Desc>
    <FName>Gmagick::cropimage</FName>
    <Desc>public Gmagick Gmagick::cropimage ( int $width , int $height , int $x , int $y )
Extracts a region of the image.
</Desc>
    <FName>Gmagick::cropthumbnailimage</FName>
    <Desc>public Gmagick Gmagick::cropthumbnailimage ( int $width , int $height )
Creates a fixed size thumbnail by first scaling the image down and cropping a specified area from the center.
</Desc>
    <FName>Gmagick::current</FName>
    <Desc>public Gmagick Gmagick::current ( void )
Returns reference to the current gmagick object with image pointer at the correct sequence.
</Desc>
    <FName>Gmagick::cyclecolormapimage</FName>
    <Desc>public Gmagick Gmagick::cyclecolormapimage ( int $displace )
Displaces an image's colormap by a given number of positions. If you cycle the colormap a number of times you can produce a psychedelic effect.
</Desc>
    <FName>Gmagick::deconstructimages</FName>
    <Desc>public Gmagick Gmagick::deconstructimages ( void )
Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers.
</Desc>
    <FName>Gmagick::despeckleimage</FName>
    <Desc>public Gmagick Gmagick::despeckleimage ( void )
Reduces the speckle noise in an image while preserving the edges of the original image.
</Desc>
    <FName>Gmagick::destroy</FName>
    <Desc>public bool Gmagick::destroy ( void )
Destroys the Gmagick object and frees all resources associated with it
</Desc>
    <FName>Gmagick::drawimage</FName>
    <Desc>public Gmagick Gmagick::drawimage ( GmagickDraw $GmagickDraw )
Renders the GmagickDraw object on the current image
</Desc>
    <FName>Gmagick::edgeimage</FName>
    <Desc>public Gmagick Gmagick::edgeimage ( float $radius )
Enhance edges within the image with a convolution filter of the given radius. Use radius 0 and it will be auto-selected.
</Desc>
    <FName>Gmagick::embossimage</FName>
    <Desc>public Gmagick Gmagick::embossimage ( float $radius , float $sigma )
Returns a grayscale image with a three-dimensional effect. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and it will choose a suitable radius for you.
</Desc>
    <FName>Gmagick::enhanceimage</FName>
    <Desc>public Gmagick Gmagick::enhanceimage ( void )
Applies a digital filter that improves the quality of a noisy image.
</Desc>
    <FName>Gmagick::equalizeimage</FName>
    <Desc>public Gmagick Gmagick::equalizeimage ( void )
Equalizes the image histogram.
</Desc>
    <FName>Gmagick::flipimage</FName>
    <Desc>public Gmagick Gmagick::flipimage ( void )
Creates a vertical mirror image by reflecting the pixels around the central x-axis.
</Desc>
    <FName>Gmagick::flopimage</FName>
    <Desc>public Gmagick Gmagick::flopimage ( void )
Creates a horizontal mirror image by reflecting the pixels around the central y-axis.
</Desc>
    <FName>Gmagick::frameimage</FName>
    <Desc>public Gmagick Gmagick::frameimage ( GmagickPixel $color , int $width , int $height , int $inner_bevel , int $outer_bevel )
Adds a simulated three-dimensional border around the image. The width and height specify the border width of the vertical and horizontal sides of the frame. The inner and outer bevels indicate the width of the inner and outer shadows of the frame.
</Desc>
    <FName>Gmagick::gammaimage</FName>
    <Desc>public Gmagick Gmagick::gammaimage ( float $gamma )
Gamma-corrects an image. The same image viewed on different devices will have perceptual differences in the way the image's intensities are represented on the screen. Specify individual gamma levels for the red, green, and blue channels, or adjust all three with the gamma parameter. Values typically range from 0.8 to 2.3.
</Desc>
    <FName>Gmagick::getcopyright</FName>
    <Desc>public string Gmagick::getcopyright ( void )
Returns the GraphicsMagick API copyright as a string.
</Desc>
    <FName>Gmagick::getfilename</FName>
    <Desc>public string Gmagick::getfilename ( void )
Returns the filename associated with an image sequence.
</Desc>
    <FName>Gmagick::getimagebackgroundcolor</FName>
    <Desc>public GmagickPixel Gmagick::getimagebackgroundcolor ( void )
Returns the image background color.
</Desc>
    <FName>Gmagick::getimageblueprimary</FName>
    <Desc>public array Gmagick::getimageblueprimary ( void )
Returns the chromaticity blue primary point for the image.
</Desc>
    <FName>Gmagick::getimagebordercolor</FName>
    <Desc>public GmagickPixel Gmagick::getimagebordercolor ( void )
Returns the image border color.
</Desc>
    <FName>Gmagick::getimagechanneldepth</FName>
    <Desc>public int Gmagick::getimagechanneldepth ( int $channel_type )
Gets the depth for a particular image channel.
</Desc>
    <FName>Gmagick::getimagecolors</FName>
    <Desc>public int Gmagick::getimagecolors ( void )
Returns the color of the specified colormap index.
</Desc>
    <FName>Gmagick::getimagecolorspace</FName>
    <Desc>public int Gmagick::getimagecolorspace ( void )
Gets the image colorspace.
</Desc>
    <FName>Gmagick::getimagecompose</FName>
    <Desc>public int Gmagick::getimagecompose ( void )
Returns the composite operator associated with the image.
</Desc>
    <FName>Gmagick::getimagedelay</FName>
    <Desc>public int Gmagick::getimagedelay ( void )
Gets the image delay
</Desc>
    <FName>Gmagick::getimagedepth</FName>
    <Desc>public int Gmagick::getimagedepth ( void )
Gets the depth of the image.
</Desc>
    <FName>Gmagick::getimagedispose</FName>
    <Desc>public int Gmagick::getimagedispose ( void )
Gets the image disposal method
</Desc>
    <FName>Gmagick::getimageextrema</FName>
    <Desc>public array Gmagick::getimageextrema ( void )
Returns an associative array with the keys "min" and "max". Throws an GmagickException on error.
</Desc>
    <FName>Gmagick::getimagefilename</FName>
    <Desc>public string Gmagick::getimagefilename ( void )
Returns the filename of a particular image in a sequence
</Desc>
    <FName>Gmagick::getimageformat</FName>
    <Desc>public string Gmagick::getimageformat ( void )
Returns the format of a particular image in a sequence.
</Desc>
    <FName>Gmagick::getimagegamma</FName>
    <Desc>public float Gmagick::getimagegamma ( void )
Gets the image gamma
</Desc>
    <FName>Gmagick::getimagegreenprimary</FName>
    <Desc>public array Gmagick::getimagegreenprimary ( void )
Returns the chromaticity green primary point. Returns an array with the keys "x" and "y".
</Desc>
    <FName>Gmagick::getimageheight</FName>
    <Desc>public int Gmagick::getimageheight ( void )
Returns the image height
</Desc>
    <FName>Gmagick::getimagehistogram</FName>
    <Desc>public array Gmagick::getimagehistogram ( void )
Returns the image histogram as an array of GmagickPixel objects. Throw an GmagickException on error.
</Desc>
    <FName>Gmagick::getimageindex</FName>
    <Desc>public int Gmagick::getimageindex ( void )
Returns the index of the current active image within the Gmagick object.
</Desc>
    <FName>Gmagick::getimageinterlacescheme</FName>
    <Desc>public int Gmagick::getimageinterlacescheme ( void )
Gets the image interlace scheme.
</Desc>
    <FName>Gmagick::getimageiterations</FName>
    <Desc>public int Gmagick::getimageiterations ( void )
Gets the image iterations.
</Desc>
    <FName>Gmagick::getimagematte</FName>
    <Desc>public int Gmagick::getimagematte ( void )
Returns TRUE if the image has a matte channel, otherwise FALSE.
</Desc>
    <FName>Gmagick::getimagemattecolor</FName>
    <Desc>public GmagickPixel Gmagick::getimagemattecolor ( void )
Returns GmagickPixel object on success. Throw an GmagickException on error.
</Desc>
    <FName>Gmagick::getimageprofile</FName>
    <Desc>public string Gmagick::getimageprofile ( string $name )
Returns the named image profile.
</Desc>
    <FName>Gmagick::getimageredprimary</FName>
    <Desc>public array Gmagick::getimageredprimary ( void )
Returns the chromaticity red primary point as an array with the keys "x" and "y".
</Desc>
    <FName>Gmagick::getimagerenderingintent</FName>
    <Desc>public int Gmagick::getimagerenderingintent ( void )
Gets the image rendering intent
</Desc>
    <FName>Gmagick::getimageresolution</FName>
    <Desc>public array Gmagick::getimageresolution ( void )
Returns the resolution as an array.
</Desc>
    <FName>Gmagick::getimagescene</FName>
    <Desc>public int Gmagick::getimagescene ( void )
Gets the image scene.
</Desc>
    <FName>Gmagick::getimagesignature</FName>
    <Desc>public string Gmagick::getimagesignature ( void )
Generates an SHA-256 message digest for the image pixel stream.
</Desc>
    <FName>Gmagick::getimagetype</FName>
    <Desc>public int Gmagick::getimagetype ( void )
Gets the potential image type.
</Desc>
    <FName>Gmagick::getimageunits</FName>
    <Desc>public int Gmagick::getimageunits ( void )
Gets the image units of resolution.
</Desc>
    <FName>Gmagick::getimagewhitepoint</FName>
    <Desc>public array Gmagick::getimagewhitepoint ( void )
Returns the chromaticity white point as an associative array with the keys "x" and "y".
</Desc>
    <FName>Gmagick::getimagewidth</FName>
    <Desc>public int Gmagick::getimagewidth ( void )
Returns the width of the image.
</Desc>
    <FName>Gmagick::getpackagename</FName>
    <Desc>public string Gmagick::getpackagename ( void )
Returns the GraphicsMagick package name.
</Desc>
    <FName>Gmagick::getquantumdepth</FName>
    <Desc>public array Gmagick::getquantumdepth ( void )
Returns the Gmagick quantum depth as a string.
</Desc>
    <FName>Gmagick::getreleasedate</FName>
    <Desc>public string Gmagick::getreleasedate ( void )
Returns the GraphicsMagick release date as a string.
</Desc>
    <FName>Gmagick::getsamplingfactors</FName>
    <Desc>public array Gmagick::getsamplingfactors ( void )
Gets the horizontal and vertical sampling factor.
</Desc>
    <FName>Gmagick::getsize</FName>
    <Desc>public array Gmagick::getsize ( void )
Returns the size associated with the Gmagick object as an array with the keys "columns" and "rows".
</Desc>
    <FName>Gmagick::getversion</FName>
    <Desc>public array Gmagick::getversion ( void )
Returns the GraphicsMagick API version as a string and as a number.
</Desc>
    <FName>Gmagick::hasnextimage</FName>
    <Desc>public mixed Gmagick::hasnextimage ( void )
Returns TRUE if the object has more images when traversing the list in the forward direction.
</Desc>
    <FName>Gmagick::haspreviousimage</FName>
    <Desc>public mixed Gmagick::haspreviousimage ( void )
Returns TRUE if the object has more images when traversing the list in the reverse direction
</Desc>
    <FName>Gmagick::implodeimage</FName>
    <Desc>public mixed Gmagick::implodeimage ( float $radius )
Creates a new image that is a copy of an existing one with the image pixels "imploded" by the specified percentage.
</Desc>
    <FName>Gmagick::labelimage</FName>
    <Desc>public mixed Gmagick::labelimage ( string $label )
Adds a label to an image.
</Desc>
    <FName>Gmagick::levelimage</FName>
    <Desc>public mixed Gmagick::levelimage ( float $blackPoint , float $gamma , float $whitePoint [, int $channel = Gmagick::CHANNEL_DEFAULT ] )
Adjusts the levels of an image by scaling the colors falling between specified white and black points to the full available quantum range. The parameters provided represent the black, mid, and white points. The black point specifies the darkest color in the image. Colors darker than the black point are set to zero. Mid point specifies a gamma correction to apply to the image. White point specifies the lightest color in the image. Colors brighter than the white point are set to the maximum quantum value.
</Desc>
    <FName>Gmagick::magnifyimage</FName>
    <Desc>public mixed Gmagick::magnifyimage ( void )
Conveniently scales an image proportionally to twice its original size.
</Desc>
    <FName>Gmagick::mapimage</FName>
    <Desc>public Gmagick Gmagick::mapimage ( gmagick $gmagick , bool $dither )
Replaces the colors of an image with the closest color from a reference image.
</Desc>
    <FName>Gmagick::medianfilterimage</FName>
    <Desc>public void Gmagick::medianfilterimage ( float $radius )
Applies a digital filter that improves the quality of a noisy image. Each pixel is replaced by the median in a set of neighboring pixels as defined by radius.
</Desc>
    <FName>Gmagick::minifyimage</FName>
    <Desc>public Gmagick Gmagick::minifyimage ( void )
A convenient method that scales an image proportionally to one-half its original size
</Desc>
    <FName>Gmagick::modulateimage</FName>
    <Desc>public Gmagick Gmagick::modulateimage ( float $brightness , float $saturation , float $hue )
Lets you control the brightness, saturation, and hue of an image. Hue is the percentage of absolute rotation from the current position. For example 50 results in a counter-clockwise rotation of 90 degrees, 150 results in a clockwise rotation of 90 degrees, with 0 and 200 both resulting in a rotation of 180 degrees.
</Desc>
    <FName>Gmagick::motionblurimage</FName>
    <Desc>public Gmagick Gmagick::motionblurimage ( float $radius , float $sigma , float $angle )
Simulates motion blur. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and MotionBlurImage() selects a suitable radius for you. Angle gives the angle of the blurring motion.
</Desc>
    <FName>Gmagick::newimage</FName>
    <Desc>public Gmagick Gmagick::newimage ( int $width , int $height , string $background [, string $format ] )
Creates a new image with the specified background color
</Desc>
    <FName>Gmagick::nextimage</FName>
    <Desc>public bool Gmagick::nextimage ( void )
Associates the next image in the image list with an Gmagick object.
</Desc>
    <FName>Gmagick::normalizeimage</FName>
    <Desc>public Gmagick Gmagick::normalizeimage ([ int $channel ] )
Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available.
</Desc>
    <FName>Gmagick::oilpaintimage</FName>
    <Desc>public Gmagick Gmagick::oilpaintimage ( float $radius )
Applies a special effect filter that simulates an oil painting. Each pixel is replaced by the most frequent color occurring in a circular region defined by radius.
</Desc>
    <FName>Gmagick::previousimage</FName>
    <Desc>public bool Gmagick::previousimage ( void )
Associates the previous image in an image list with the Gmagick object.
</Desc>
    <FName>Gmagick::profileimage</FName>
    <Desc>public Gmagick Gmagick::profileimage ( string $name , string $profile )
Adds or removes a ICC, IPTC, or generic profile from an image. If the profile is NULL, it is removed from the image otherwise added. Use a name of '*' and a profile of NULL to remove all profiles from the image.
</Desc>
    <FName>Gmagick::quantizeimage</FName>
    <Desc>public Gmagick Gmagick::quantizeimage ( int $numColors , int $colorspace , int $treeDepth , bool $dither , bool $measureError )
Analyzes the colors within a reference image and chooses a fixed number of colors to represent the image. The goal of the algorithm is to minimize the color difference between the input and output image while minimizing the processing time.
</Desc>
    <FName>Gmagick::quantizeimages</FName>
    <Desc>public Gmagick Gmagick::quantizeimages ( int $numColors , int $colorspace , int $treeDepth , bool $dither , bool $measureError )
Analyzes the colors within a sequence of images and chooses a fixed number of colors to represent the image. The goal of the algorithm is to minimize the color difference between the input and output image while minimizing the processing time.
</Desc>
    <FName>Gmagick::queryfontmetrics</FName>
    <Desc>public array Gmagick::queryfontmetrics ( GmagickDraw $draw , string $text )
MagickQueryFontMetrics() returns an array representing the font metrics.
</Desc>
    <FName>Gmagick::queryfonts</FName>
    <Desc>public array Gmagick::queryfonts ([ string $pattern = "*" ] )
Returns fonts supported by Gmagick.
</Desc>
    <FName>Gmagick::queryformats</FName>
    <Desc>public array Gmagick::queryformats ([ string $pattern = "*" ] )
Returns formats supported by Gmagick.
</Desc>
    <FName>Gmagick::radialblurimage</FName>
    <Desc>public Gmagick Gmagick::radialblurimage ( float $angle [, int $channel = Gmagick::CHANNEL_DEFAULT ] )
Radial blurs an image.
</Desc>
    <FName>Gmagick::raiseimage</FName>
    <Desc>public Gmagick Gmagick::raiseimage ( int $width , int $height , int $x , int $y , bool $raise )
Creates a simulated three-dimensional button-like effect by lightening and darkening the edges of the image. Members width and height of raise_info define the width of the vertical and horizontal edge of the effect.
</Desc>
    <FName>Gmagick::read</FName>
    <Desc>public Gmagick Gmagick::read ( string $filename )
Reads image from filename.
</Desc>
    <FName>Gmagick::readimage</FName>
    <Desc>public Gmagick Gmagick::readimage ( string $filename )
Reads image from filename.
</Desc>
    <FName>Gmagick::readimageblob</FName>
    <Desc>public Gmagick Gmagick::readimageblob ( string $imageContents [, string $filename ] )
Reads image from a binary string.
</Desc>
    <FName>Gmagick::readimagefile</FName>
    <Desc>public Gmagick Gmagick::readimagefile ( resource $fp [, string $filename ] )
Reads an image or image sequence from an open file descriptor.
</Desc>
    <FName>Gmagick::reducenoiseimage</FName>
    <Desc>public Gmagick Gmagick::reducenoiseimage ( float $radius )
Smooths the contours of an image while still preserving edge information. The algorithm works by replacing each pixel with its neighbor closest in value. A neighbor is defined by radius. Use a radius of 0 and Gmagick::reduceNoiseImage() selects a suitable radius for you.
</Desc>
    <FName>Gmagick::removeimage</FName>
    <Desc>public Gmagick Gmagick::removeimage ( void )
Removes an image from the image list.
</Desc>
    <FName>Gmagick::removeimageprofile</FName>
    <Desc>public string Gmagick::removeimageprofile ( string $name )
Removes the named image profile and returns it.
</Desc>
    <FName>Gmagick::resampleimage</FName>
    <Desc>public Gmagick Gmagick::resampleimage ( float $xResolution , float $yResolution , int $filter , float $blur )
Resample image to desired resolution.
</Desc>
    <FName>Gmagick::resizeimage</FName>
    <Desc>public Gmagick Gmagick::resizeimage ( int $width , int $height , int $filter , float $blur [, bool $fit = FALSE ] )
Scales an image to the desired dimensions with a filter.
</Desc>
    <FName>Gmagick::rollimage</FName>
    <Desc>public Gmagick Gmagick::rollimage ( int $x , int $y )
Offsets an image as defined by x and y.
</Desc>
    <FName>Gmagick::rotateimage</FName>
    <Desc>public Gmagick Gmagick::rotateimage ( mixed $color , float $degrees )
Rotates an image the specified number of degrees. Empty triangles left over from rotating the image are filled with the background color.
</Desc>
    <FName>Gmagick::scaleimage</FName>
    <Desc>public Gmagick Gmagick::scaleimage ( int $width , int $height [, bool $fit = FALSE ] )
Scales the size of an image to the given dimensions. The other parameter will be calculated if 0 is passed as either param.
</Desc>
    <FName>Gmagick::separateimagechannel</FName>
    <Desc>public Gmagick Gmagick::separateimagechannel ( int $channel )
Separates a channel from the image and returns a grayscale image. A channel is a particular color component of each pixel in the image.
</Desc>
    <FName>Gmagick::setCompressionQuality</FName>
    <Desc>Gmagick Gmagick::setCompressionQuality ( int $quality = 75 )
Sets the object's default compression quality.
</Desc>
    <FName>Gmagick::setfilename</FName>
    <Desc>public Gmagick Gmagick::setfilename ( string $filename )
Sets the filename before you read or write an image file.
</Desc>
    <FName>Gmagick::setimagebackgroundcolor</FName>
    <Desc>public Gmagick Gmagick::setimagebackgroundcolor ( GmagickPixel $color )
Sets the image background color.
</Desc>
    <FName>Gmagick::setimageblueprimary</FName>
    <Desc>public Gmagick Gmagick::setimageblueprimary ( float $x , float $y )
Sets the image chromaticity blue primary point.
</Desc>
    <FName>Gmagick::setimagebordercolor</FName>
    <Desc>public Gmagick Gmagick::setimagebordercolor ( GmagickPixel $color )
Sets the image border color.
</Desc>
    <FName>Gmagick::setimagechanneldepth</FName>
    <Desc>public Gmagick Gmagick::setimagechanneldepth ( int $channel , int $depth )
Sets the depth of a particular image channel.
</Desc>
    <FName>Gmagick::setimagecolorspace</FName>
    <Desc>public Gmagick Gmagick::setimagecolorspace ( int $colorspace )
Sets the image colorspace.
</Desc>
    <FName>Gmagick::setimagecompose</FName>
    <Desc>public Gmagick Gmagick::setimagecompose ( int $composite )
Sets the image composite operator.
</Desc>
    <FName>Gmagick::setimagedelay</FName>
    <Desc>public Gmagick Gmagick::setimagedelay ( int $delay )
Sets the image delay
</Desc>
    <FName>Gmagick::setimagedepth</FName>
    <Desc>public Gmagick Gmagick::setimagedepth ( int $depth )
Sets the image depth
</Desc>
    <FName>Gmagick::setimagedispose</FName>
    <Desc>public Gmagick Gmagick::setimagedispose ( int $disposeType )
Sets the image disposal method.
</Desc>
    <FName>Gmagick::setimagefilename</FName>
    <Desc>public Gmagick Gmagick::setimagefilename ( string $filename )
Sets the filename of a particular image in a sequence.
</Desc>
    <FName>Gmagick::setimageformat</FName>
    <Desc>public Gmagick Gmagick::setimageformat ( string $imageFormat )
Sets the format of a particular image in a sequence.
</Desc>
    <FName>Gmagick::setimagegamma</FName>
    <Desc>public Gmagick Gmagick::setimagegamma ( float $gamma )
Sets the image gamma.
</Desc>
    <FName>Gmagick::setimagegreenprimary</FName>
    <Desc>public Gmagick Gmagick::setimagegreenprimary ( float $x , float $y )
Sets the image chromaticity green primary point.
</Desc>
    <FName>Gmagick::setimageindex</FName>
    <Desc>public Gmagick Gmagick::setimageindex ( int $index )
Set the iterator to the position in the image list specified with the index parameter.
</Desc>
    <FName>Gmagick::setimageinterlacescheme</FName>
    <Desc>public Gmagick Gmagick::setimageinterlacescheme ( int $interlace )
Sets the interlace scheme of the image.
</Desc>
    <FName>Gmagick::setimageiterations</FName>
    <Desc>public Gmagick Gmagick::setimageiterations ( int $iterations )
Sets the image iterations.
</Desc>
    <FName>Gmagick::setimageprofile</FName>
    <Desc>public Gmagick Gmagick::setimageprofile ( string $name , string $profile )
Adds a named profile to the Gmagick object. If a profile with the same name already exists, it is replaced. This method differs from the Gmagick::profileimage() method in that it does not apply any CMS color profiles.
</Desc>
    <FName>Gmagick::setimageredprimary</FName>
    <Desc>public Gmagick Gmagick::setimageredprimary ( float $x , float $y )
Sets the image chromaticity red primary point.
</Desc>
    <FName>Gmagick::setimagerenderingintent</FName>
    <Desc>public Gmagick Gmagick::setimagerenderingintent ( int $rendering_intent )
Sets the image rendering intent.
</Desc>
    <FName>Gmagick::setimageresolution</FName>
    <Desc>public Gmagick Gmagick::setimageresolution ( float $xResolution , float $yResolution )
Sets the image resolution.
</Desc>
    <FName>Gmagick::setimagescene</FName>
    <Desc>public Gmagick Gmagick::setimagescene ( int $scene )
Sets the image scene.
</Desc>
    <FName>Gmagick::setimagetype</FName>
    <Desc>public Gmagick Gmagick::setimagetype ( int $imgType )
Sets the image type.
</Desc>
    <FName>Gmagick::setimageunits</FName>
    <Desc>public Gmagick Gmagick::setimageunits ( int $resolution )
Sets the image units of resolution.
</Desc>
    <FName>Gmagick::setimagewhitepoint</FName>
    <Desc>public Gmagick Gmagick::setimagewhitepoint ( float $x , float $y )
Sets the image chromaticity white point.
</Desc>
    <FName>Gmagick::setsamplingfactors</FName>
    <Desc>public Gmagick Gmagick::setsamplingfactors ( array $factors )
Sets the image sampling factors.
</Desc>
    <FName>Gmagick::setsize</FName>
    <Desc>public Gmagick Gmagick::setsize ( int $columns , int $rows )
Sets the size of the Gmagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK.
</Desc>
    <FName>Gmagick::shearimage</FName>
    <Desc>public Gmagick Gmagick::shearimage ( mixed $color , float $xShear , float $yShear )
Slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides an edge along the X axis, while a Y direction shear slides an edge along the Y axis. The amount of the shear is controlled by a shear angle. For X direction shears, x_shear is measured relative to the Y axis, and similarly, for Y direction shears y_shear is measured relative to the X axis. Empty triangles left over from shearing the image are filled with the background color.
</Desc>
    <FName>Gmagick::solarizeimage</FName>
    <Desc>public Gmagick Gmagick::solarizeimage ( int $threshold )
Applies a special effect to the image, similar to the effect achieved in a photo darkroom by selectively exposing areas of photo sensitive paper to light. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the solarization.
</Desc>
    <FName>Gmagick::spreadimage</FName>
    <Desc>public Gmagick Gmagick::spreadimage ( float $radius )
Special effects method that randomly displaces each pixel in a block defined by the radius parameter.
</Desc>
    <FName>Gmagick::stripimage</FName>
    <Desc>public Gmagick Gmagick::stripimage ( void )
Strips an image of all profiles and comments.
</Desc>
    <FName>Gmagick::swirlimage</FName>
    <Desc>public Gmagick Gmagick::swirlimage ( float $degrees )
Swirls the pixels about the center of the image, where degrees indicates the sweep of the arc through which each pixel is moved. You get a more dramatic effect as the degrees move from 1 to 360.
</Desc>
    <FName>Gmagick::thumbnailimage</FName>
    <Desc>public Gmagick Gmagick::thumbnailimage ( int $width , int $height [, bool $fit = FALSE ] )
Changes the size of an image to the given dimensions and removes any associated profiles. The goal is to produce small low cost thumbnail images suited for display on the Web. If TRUE is given as a third parameter then columns and rows parameters are used as maximums for each side. Both sides will be scaled down until the match or are smaller than the parameter given for the side.
</Desc>
    <FName>Gmagick::trimimage</FName>
    <Desc>public Gmagick Gmagick::trimimage ( float $fuzz )
Remove edges that are the background color from the image.
</Desc>
    <FName>Gmagick::write</FName>
    <Desc>This method is an alias of Gmagick::writeimage(). 
</Desc>
    <FName>Gmagick::writeimage</FName>
    <Desc>public Gmagick Gmagick::writeimage ( string $filename [, bool $all_frames = FALSE ] )
Writes an image to the specified filename. If the filename parameter is NULL, the image is written to the filename set by Gmagick::ReadImage() or Gmagick::SetImageFilename().
</Desc>
    <FName>GmagickDraw::annotate</FName>
    <Desc>public GmagickDraw GmagickDraw::annotate ( float $x , float $y , string $text )
Draws text on the image.
</Desc>
    <FName>GmagickDraw::arc</FName>
    <Desc>public GmagickDraw GmagickDraw::arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed )
Draws an arc falling within a specified bounding rectangle on the image.
</Desc>
    <FName>GmagickDraw::bezier</FName>
    <Desc>public GmagickDraw GmagickDraw::bezier ( array $coordinate_array )
Draws a bezier curve through a set of points on the image.
</Desc>
    <FName>GmagickDraw::ellipse</FName>
    <Desc>public GmagickDraw GmagickDraw::ellipse ( float $ox , float $oy , float $rx , float $ry , float $start , float $end )
Draws an ellipse on the image.
</Desc>
    <FName>GmagickDraw::getfillcolor</FName>
    <Desc>public GmagickPixel GmagickDraw::getfillcolor ( void )
Returns the fill color used for drawing filled objects.
</Desc>
    <FName>GmagickDraw::getfillopacity</FName>
    <Desc>public float GmagickDraw::getfillopacity ( void )
Returns the opacity used when drawing
</Desc>
    <FName>GmagickDraw::getfont</FName>
    <Desc>public mixed GmagickDraw::getfont ( void )
Returns a string specifying the font used when annotating with text.
</Desc>
    <FName>GmagickDraw::getfontsize</FName>
    <Desc>public float GmagickDraw::getfontsize ( void )
Returns the font pointsize used when annotating with text.
</Desc>
    <FName>GmagickDraw::getfontstyle</FName>
    <Desc>public int GmagickDraw::getfontstyle ( void )
Returns the font style used when annotating with text.
</Desc>
    <FName>GmagickDraw::getfontweight</FName>
    <Desc>public int GmagickDraw::getfontweight ( void )
Returns the font weight used when annotating with text.
</Desc>
    <FName>GmagickDraw::getstrokecolor</FName>
    <Desc>public GmagickPixel GmagickDraw::getstrokecolor ( void )
Returns the color used for stroking object outlines.
</Desc>
    <FName>GmagickDraw::getstrokeopacity</FName>
    <Desc>public float GmagickDraw::getstrokeopacity ( void )
Returns the opacity of stroked object outlines.
</Desc>
    <FName>GmagickDraw::getstrokewidth</FName>
    <Desc>public float GmagickDraw::getstrokewidth ( void )
Returns the width of the stroke used to draw object outlines.
</Desc>
    <FName>GmagickDraw::gettextdecoration</FName>
    <Desc>public int GmagickDraw::gettextdecoration ( void )
Returns the decoration applied when annotating with text.
</Desc>
    <FName>GmagickDraw::gettextencoding</FName>
    <Desc>public mixed GmagickDraw::gettextencoding ( void )
Returns a string which specifies the code set used for text annotations.
</Desc>
    <FName>GmagickDraw::line</FName>
    <Desc>public GmagickDraw GmagickDraw::line ( float $sx , float $sy , float $ex , float $ey )
Draws a line on the image using the current stroke color, stroke opacity, and stroke width.
</Desc>
    <FName>GmagickDraw::point</FName>
    <Desc>public GmagickDraw GmagickDraw::point ( float $x , float $y )
Draws a point using the current stroke color and stroke thickness at the specified coordinates.
</Desc>
    <FName>GmagickDraw::polygon</FName>
    <Desc>public GmagickDraw GmagickDraw::polygon ( array $coordinates )
Draws a polygon using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.
</Desc>
    <FName>GmagickDraw::polyline</FName>
    <Desc>public GmagickDraw GmagickDraw::polyline ( array $coordinate_array )
Draws a polyline using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.
</Desc>
    <FName>GmagickDraw::rectangle</FName>
    <Desc>public GmagickDraw GmagickDraw::rectangle ( float $x1 , float $y1 , float $x2 , float $y2 )
Draws a rectangle given two coordinates and using the current stroke, stroke width, and fill settings.
</Desc>
    <FName>GmagickDraw::rotate</FName>
    <Desc>public GmagickDraw GmagickDraw::rotate ( float $degrees )
Applies the specified rotation to the current coordinate space.
</Desc>
    <FName>GmagickDraw::roundrectangle</FName>
    <Desc>public GmagickDraw GmagickDraw::roundrectangle ( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry )
Draws a rounded rectangle given two coordinates, x and y corner radiuses and using the current stroke, stroke width, and fill settings.
</Desc>
    <FName>GmagickDraw::scale</FName>
    <Desc>public GmagickDraw GmagickDraw::scale ( float $x , float $y )
Adjusts the scaling factor to apply in the horizontal and vertical directions to the current coordinate space.
</Desc>
    <FName>GmagickDraw::setfillcolor</FName>
    <Desc>public GmagickDraw GmagickDraw::setfillcolor ( mixed $color )
Sets the fill color to be used for drawing filled objects.
</Desc>
    <FName>GmagickDraw::setfillopacity</FName>
    <Desc>public GmagickDraw GmagickDraw::setfillopacity ( float $fill_opacity )
Sets the opacity to use when drawing using the fill color or fill texture. Setting it to 1.0 will make fill full opaque.
</Desc>
    <FName>GmagickDraw::setfont</FName>
    <Desc>public GmagickDraw GmagickDraw::setfont ( string $font )
Sets the fully-specified font to use when annotating with text
</Desc>
    <FName>GmagickDraw::setfontsize</FName>
    <Desc>public GmagickDraw GmagickDraw::setfontsize ( float $pointsize )
Sets the font pointsize to use when annotating with text.
</Desc>
    <FName>GmagickDraw::setfontstyle</FName>
    <Desc>public GmagickDraw GmagickDraw::setfontstyle ( int $style )
Sets the font style to use when annotating with text. The AnyStyle enumeration acts as a wild-card "don't care" option.
</Desc>
    <FName>GmagickDraw::setfontweight</FName>
    <Desc>public GmagickDraw GmagickDraw::setfontweight ( int $weight )
Sets the font weight to use when annotating with text.
</Desc>
    <FName>GmagickDraw::setstrokecolor</FName>
    <Desc>public GmagickDraw GmagickDraw::setstrokecolor ( mixed $color )
Sets the color used for stroking object outlines.
</Desc>
    <FName>GmagickDraw::setstrokeopacity</FName>
    <Desc>public GmagickDraw GmagickDraw::setstrokeopacity ( float $stroke_opacity )
Specifies the opacity of stroked object outlines.
</Desc>
    <FName>GmagickDraw::setstrokewidth</FName>
    <Desc>public GmagickDraw GmagickDraw::setstrokewidth ( float $width )
Sets the width of the stroke used to draw object outlines
</Desc>
    <FName>GmagickDraw::settextdecoration</FName>
    <Desc>public GmagickDraw GmagickDraw::settextdecoration ( int $decoration )
Specifies a decoration to be applied when annotating with text.
</Desc>
    <FName>GmagickDraw::settextencoding</FName>
    <Desc>public GmagickDraw GmagickDraw::settextencoding ( string $encoding )
Specifies the code set to use for text annotations. The only character encoding which may be specified at this time is "UTF-8" for representing Unicode as a sequence of bytes. Specify an empty string to set text encoding to the system's default. Successful text annotation using Unicode may require fonts designed to support Unicode.
</Desc>
    <FName>GmagickPixel::__construct</FName>
    <Desc>public GmagickPixel::__construct ([ string $color ] )
Constructs an GmagickPixel object. If a color is specified, the object is constructed and then initialised with that color before being returned.
</Desc>
    <FName>GmagickPixel::getcolor</FName>
    <Desc>public mixed GmagickPixel::getcolor ([ bool $as_array = FALSE [, bool $normalize_array = FALSE ]] )
Returns the color described by the GmagickPixel object, as a string or an array. If the color has an opacity channel set, this is provided as a fourth value in the list.
</Desc>
    <FName>GmagickPixel::getcolorcount</FName>
    <Desc>public int GmagickPixel::getcolorcount ( void )
Returns the color count associated with this color
</Desc>
    <FName>GmagickPixel::getcolorvalue</FName>
    <Desc>public float GmagickPixel::getcolorvalue ( int $color )
Retrieves the value of the color channel specified, as a floating-point number between 0 and 1.
</Desc>
    <FName>GmagickPixel::setcolor</FName>
    <Desc>public GmagickPixel GmagickPixel::setcolor ( string $color )
Sets the color described by the GmagickPixel object, with a string (e.g. "blue", "#0000ff", "rgb(0,0,255)", "cmyk(100,100,100,10)", etc.).
</Desc>
    <FName>GmagickPixel::setcolorvalue</FName>
    <Desc>public GmagickPixel GmagickPixel::setcolorvalue ( int $color , float $value )
Sets the value of the specified channel of this object to the provided value, which should be between 0 and 1. This function can be used to provide an opacity channel to a GmagickPixel object.
</Desc>
    <FName>gupnp_service_proxy_send_action</FName>
    <Desc>array gupnp_service_proxy_send_action ( resource $proxy , string $action , array $in_params , array $out_params )
Send action with parameters in_params to the service exposed by proxy synchronously and return out_params with values or FALSE on error.
</Desc>
    <FName>HaruAnnotation::setBorderStyle</FName>
    <Desc>bool HaruAnnotation::setBorderStyle ( float $width , int $dash_on , int $dash_off )
Defines the style of the border of the annotation. This function may be used with link annotations only.
</Desc>
    <FName>HaruAnnotation::setHighlightMode</FName>
    <Desc>bool HaruAnnotation::setHighlightMode ( int $mode )
Defines the appearance of the annotation when clicked. This function may be used with link annotations only.
</Desc>
    <FName>HaruAnnotation::setIcon</FName>
    <Desc>bool HaruAnnotation::setIcon ( int $icon )
Defines the style of the annotation icon. This function may be used with text annotations only.
</Desc>
    <FName>HaruAnnotation::setOpened</FName>
    <Desc>bool HaruAnnotation::setOpened ( bool $opened )
Defines whether the annotation is initially displayed open. This function may be used with text annotations only.
</Desc>
    <FName>HaruDestination::setFit</FName>
    <Desc>bool HaruDestination::setFit ( void )
Defines the appearance of the page to fit the window.
</Desc>
    <FName>HaruDestination::setFitB</FName>
    <Desc>bool HaruDestination::setFitB ( void )
Defines the appearance of the page to fit the bounding box of the page within the window.
</Desc>
    <FName>HaruDestination::setFitBH</FName>
    <Desc>bool HaruDestination::setFitBH ( float $top )
Defines the appearance of the page to magnifying to fit the width of the bounding box and setting the top position of the page to the value of top.
</Desc>
    <FName>HaruDestination::setFitBV</FName>
    <Desc>bool HaruDestination::setFitBV ( float $left )
Defines the appearance of the page to magnifying to fit the height of the bounding box and setting the left position of the page to the value of left.
</Desc>
    <FName>HaruDestination::setFitH</FName>
    <Desc>bool HaruDestination::setFitH ( float $top )
Defines the appearance of the page to fit the window width and sets the top position of the page to the value of top.
</Desc>
    <FName>HaruDestination::setFitR</FName>
    <Desc>bool HaruDestination::setFitR ( float $left , float $bottom , float $right , float $top )
Defines the appearance of the page to fit the rectangle by the parameters.
</Desc>
    <FName>HaruDestination::setFitV</FName>
    <Desc>bool HaruDestination::setFitV ( float $left )
Defines the appearance of the page to fit the window height.
</Desc>
    <FName>HaruDestination::setXYZ</FName>
    <Desc>bool HaruDestination::setXYZ ( float $left , float $top , float $zoom )
Defines the appearance of the page using three parameters: left, top and zoom.
</Desc>
    <FName>HaruDoc::addPage</FName>
    <Desc>object HaruDoc::addPage ( void )
Adds a new page to the document.
</Desc>
    <FName>HaruDoc::addPageLabel</FName>
    <Desc>bool HaruDoc::addPageLabel ( int $first_page , int $style , int $first_num [, string $prefix = "" ] )
Set the numbering style for the specified range of pages.
</Desc>
    <FName>HaruDoc::__construct</FName>
    <Desc>HaruDoc::__construct ( void )
Constructs new HaruDoc instance.
</Desc>
    <FName>HaruDoc::createOutline</FName>
    <Desc>object HaruDoc::createOutline ( string $title [, object $parent_outline [, object $encoder ]] )
Create a HaruOutline instance.
</Desc>
    <FName>HaruDoc::getCurrentEncoder</FName>
    <Desc>object HaruDoc::getCurrentEncoder ( void )
Get the HaruEncoder currently used in the document.
</Desc>
    <FName>HaruDoc::getCurrentPage</FName>
    <Desc>object HaruDoc::getCurrentPage ( void )
Get current page of the document.
</Desc>
    <FName>HaruDoc::getEncoder</FName>
    <Desc>object HaruDoc::getEncoder ( string $encoding )
Get the HaruEncoder instance for the specified encoding.
</Desc>
    <FName>HaruDoc::getFont</FName>
    <Desc>object HaruDoc::getFont ( string $fontname [, string $encoding ] )
Get a HaruFont instance.
</Desc>
    <FName>HaruDoc::getInfoAttr</FName>
    <Desc>string HaruDoc::getInfoAttr ( int $type )
Get the current value of the specified document attribute.
</Desc>
    <FName>HaruDoc::getPageLayout</FName>
    <Desc>int HaruDoc::getPageLayout ( void )
Get the current page layout. See HaruDoc::setPageLayout() for the list of possible values.
</Desc>
    <FName>HaruDoc::getPageMode</FName>
    <Desc>int HaruDoc::getPageMode ( void )
Get the current page mode. See HaruDoc::setPageMode() for the list of possible values.
</Desc>
    <FName>HaruDoc::getStreamSize</FName>
    <Desc>int HaruDoc::getStreamSize ( void )
Get the size of the temporary stream.
</Desc>
    <FName>HaruDoc::insertPage</FName>
    <Desc>object HaruDoc::insertPage ( object $page )
Creates a new page and inserts just before the specified page.
</Desc>
    <FName>HaruDoc::loadJPEG</FName>
    <Desc>object HaruDoc::loadJPEG ( string $filename )
Loads the specified JPEG image.
</Desc>
    <FName>HaruDoc::loadPNG</FName>
    <Desc>object HaruDoc::loadPNG ( string $filename [, bool $deferred = FALSE ] )
Loads a PNG image. 
Libharu might be built without libpng support, in this case each call to this function would result in exception.
</Desc>
    <FName>HaruDoc::loadRaw</FName>
    <Desc>object HaruDoc::loadRaw ( string $filename , int $width , int $height , int $color_space )
Loads a RAW image.
</Desc>
    <FName>HaruDoc::loadTTC</FName>
    <Desc>string HaruDoc::loadTTC ( string $fontfile , int $index [, bool $embed = FALSE ] )
Loads the TrueType font with the specified index from a TrueType collection file.
</Desc>
    <FName>HaruDoc::loadTTF</FName>
    <Desc>string HaruDoc::loadTTF ( string $fontfile [, bool $embed = FALSE ] )
Loads the given TTF file and (optionally) embed its data into the document.
</Desc>
    <FName>HaruDoc::loadType1</FName>
    <Desc>string HaruDoc::loadType1 ( string $afmfile [, string $pfmfile ] )
Loads Type1 font from the given file and registers it in the PDF document.
</Desc>
    <FName>HaruDoc::output</FName>
    <Desc>bool HaruDoc::output ( void )
Writes the document data into standard output.
</Desc>
    <FName>HaruDoc::readFromStream</FName>
    <Desc>string HaruDoc::readFromStream ( int $bytes )
Read data from the temporary stream.
</Desc>
    <FName>HaruDoc::resetError</FName>
    <Desc>bool HaruDoc::resetError ( void )
Once an error code is set, most of the operations, including I/O processing functions cannot be performed. In case if you want to continue after the cause of the error has been fixed, you have to invoke this function in order to reset the document error state.
</Desc>
    <FName>HaruDoc::resetStream</FName>
    <Desc>bool HaruDoc::resetStream ( void )
Rewinds the temporary stream of the document.
</Desc>
    <FName>HaruDoc::save</FName>
    <Desc>bool HaruDoc::save ( string $file )
Saves the document into the specified file.
</Desc>
    <FName>HaruDoc::saveToStream</FName>
    <Desc>bool HaruDoc::saveToStream ( void )
Saves the document data into a temporary stream.
</Desc>
    <FName>HaruDoc::setCompressionMode</FName>
    <Desc>bool HaruDoc::setCompressionMode ( int $mode )
Defines compression mode for the document. In case when libharu was compiled without Zlib support this function will always throw HaruException.
</Desc>
    <FName>HaruDoc::setCurrentEncoder</FName>
    <Desc>bool HaruDoc::setCurrentEncoder ( string $encoding )
Defines the encoder currently used in the document.
</Desc>
    <FName>HaruDoc::setEncryptionMode</FName>
    <Desc>bool HaruDoc::setEncryptionMode ( int $mode [, int $key_len = 5 ] )
Defines encryption mode for the document. The encryption mode cannot be set before setting the password.
</Desc>
    <FName>HaruDoc::setInfoAttr</FName>
    <Desc>bool HaruDoc::setInfoAttr ( int $type , string $info )
Defines an info attribute. Uses the current encoding of the document.
</Desc>
    <FName>HaruDoc::setInfoDateAttr</FName>
    <Desc>bool HaruDoc::setInfoDateAttr ( int $type , int $year , int $month , int $day , int $hour , int $min , int $sec , string $ind , int $off_hour , int $off_min )
Sets the datetime info attributes of the document.
</Desc>
    <FName>HaruDoc::setOpenAction</FName>
    <Desc>bool HaruDoc::setOpenAction ( object $destination )
Defines which page should be shown when the document is opened.
</Desc>
    <FName>HaruDoc::setPageLayout</FName>
    <Desc>bool HaruDoc::setPageLayout ( int $layout )
Defines how pages should be displayed.
</Desc>
    <FName>HaruDoc::setPageMode</FName>
    <Desc>bool HaruDoc::setPageMode ( int $mode )
Defines how the document should be displayed.
</Desc>
    <FName>HaruDoc::setPagesConfiguration</FName>
    <Desc>bool HaruDoc::setPagesConfiguration ( int $page_per_pages )
By default the document has one pages object as a root for all pages. All page objects are create as branches of this object. One pages object can contain only 8191, therefore the maximum number of pages per document is 8191. But you can change that fact by setting page_per_pages parameter, so that the root pages object contains 8191 more pages (not page) objects, which in turn contain 8191 pages each. So the maximum number of pages in the document becomes 8191*page_per_pages.
</Desc>
    <FName>HaruDoc::setPassword</FName>
    <Desc>bool HaruDoc::setPassword ( string $owner_password , string $user_password )
Defines owner and user passwords for the document. Setting the passwords makes the document contents encrypted.
</Desc>
    <FName>HaruDoc::setPermission</FName>
    <Desc>bool HaruDoc::setPermission ( int $permission )
Defines permissions for the document.
</Desc>
    <FName>HaruDoc::useCNSEncodings</FName>
    <Desc>bool HaruDoc::useCNSEncodings ( void )
Enables Chinese simplified encodings.
</Desc>
    <FName>HaruDoc::useCNSFonts</FName>
    <Desc>bool HaruDoc::useCNSFonts ( void )
Enables builtin Chinese simplified fonts.
</Desc>
    <FName>HaruDoc::useCNTEncodings</FName>
    <Desc>bool HaruDoc::useCNTEncodings ( void )
Enables Chinese traditional encodings.
</Desc>
    <FName>HaruDoc::useCNTFonts</FName>
    <Desc>bool HaruDoc::useCNTFonts ( void )
Enables builtin Chinese traditional fonts.
</Desc>
    <FName>HaruDoc::useJPEncodings</FName>
    <Desc>bool HaruDoc::useJPEncodings ( void )
Enables Japanese encodings.
</Desc>
    <FName>HaruDoc::useJPFonts</FName>
    <Desc>bool HaruDoc::useJPFonts ( void )
Enables builtin Japanese fonts.
</Desc>
    <FName>HaruDoc::useKREncodings</FName>
    <Desc>bool HaruDoc::useKREncodings ( void )
Enables Korean encodings.
</Desc>
    <FName>HaruDoc::useKRFonts</FName>
    <Desc>bool HaruDoc::useKRFonts ( void )
Enables builtin Korean fonts.
</Desc>
    <FName>HaruEncoder::getByteType</FName>
    <Desc>int HaruEncoder::getByteType ( string $text , int $index )
Get the type of the byte in the text.
</Desc>
    <FName>HaruEncoder::getType</FName>
    <Desc>int HaruEncoder::getType ( void )
Get the type of the encoder.
</Desc>
    <FName>HaruEncoder::getUnicode</FName>
    <Desc>int HaruEncoder::getUnicode ( int $character )
Converts the specified character to unicode.
</Desc>
    <FName>HaruEncoder::getWritingMode</FName>
    <Desc>int HaruEncoder::getWritingMode ( void )
Get the writing mode of the encoder.
</Desc>
    <FName>HaruFont::getAscent</FName>
    <Desc>int HaruFont::getAscent ( void )
Get the vertical ascent of the font.
</Desc>
    <FName>HaruFont::getCapHeight</FName>
    <Desc>int HaruFont::getCapHeight ( void )
Get the distance from the baseline of uppercase letters.
</Desc>
    <FName>HaruFont::getDescent</FName>
    <Desc>int HaruFont::getDescent ( void )
Get the vertical descent of the font.
</Desc>
    <FName>HaruFont::getEncodingName</FName>
    <Desc>string HaruFont::getEncodingName ( void )
Get the name of the font encoding.
</Desc>
    <FName>HaruFont::getFontName</FName>
    <Desc>string HaruFont::getFontName ( void )
Get the name of the font.
</Desc>
    <FName>HaruFont::getTextWidth</FName>
    <Desc>array HaruFont::getTextWidth ( string $text )
Get the total width of the text, number of characters, number of words and number of spaces.
</Desc>
    <FName>HaruFont::getUnicodeWidth</FName>
    <Desc>int HaruFont::getUnicodeWidth ( int $character )
Get the width of the character in the font.
</Desc>
    <FName>HaruFont::getXHeight</FName>
    <Desc>int HaruFont::getXHeight ( void )
Gets the distance from the baseline of lowercase letters.
</Desc>
    <FName>HaruFont::measureText</FName>
    <Desc>int HaruFont::measureText ( string $text , float $width , float $font_size , float $char_space , float $word_space [, bool $word_wrap = FALSE ] )
Calculate the number of characters which can be included within the specified width.
</Desc>
    <FName>HaruImage::getBitsPerComponent</FName>
    <Desc>int HaruImage::getBitsPerComponent ( void )
Gets the number of bits used to describe each color component of the image.
</Desc>
    <FName>HaruImage::getColorSpace</FName>
    <Desc>string HaruImage::getColorSpace ( void )
Get the name of the color space.
</Desc>
    <FName>HaruImage::getHeight</FName>
    <Desc>int HaruImage::getHeight ( void )
Get the height of the image.
</Desc>
    <FName>HaruImage::getSize</FName>
    <Desc>array HaruImage::getSize ( void )
Get the size of the image.
</Desc>
    <FName>HaruImage::getWidth</FName>
    <Desc>int HaruImage::getWidth ( void )
Get the width of the image.
</Desc>
    <FName>HaruImage::setColorMask</FName>
    <Desc>bool HaruImage::setColorMask ( int $rmin , int $rmax , int $gmin , int $gmax , int $bmin , int $bmax )
Defines the transparent color of the image using the RGB range values. The color within the range is displayed as a transparent color. The color space of the image must be RGB.
</Desc>
    <FName>HaruImage::setMaskImage</FName>
    <Desc>bool HaruImage::setMaskImage ( object $mask_image )
Sets the image used as image-mask. It must be 1bit gray-scale color image.
</Desc>
    <FName>HaruOutline::setDestination</FName>
    <Desc>bool HaruOutline::setDestination ( object $destination )
Sets a destination object which becomes a target to jump to when the outline is clicked.
</Desc>
    <FName>HaruOutline::setOpened</FName>
    <Desc>bool HaruOutline::setOpened ( bool $opened )
Defines whether this node is opened or not when the outline is displayed for the first time.
</Desc>
    <FName>HaruPage::arc</FName>
    <Desc>bool HaruPage::arc ( float $x , float $y , float $ray , float $ang1 , float $ang2 )
Appends an arc to the current path.
</Desc>
    <FName>HaruPage::beginText</FName>
    <Desc>bool HaruPage::beginText ( void )
Begins new text object and sets the current text position to (0,0).
</Desc>
    <FName>HaruPage::circle</FName>
    <Desc>bool HaruPage::circle ( float $x , float $y , float $ray )
Appends a circle to the current path.
</Desc>
    <FName>HaruPage::closePath</FName>
    <Desc>bool HaruPage::closePath ( void )
Appends a straight line from the current point to the start point of the path.
</Desc>
    <FName>HaruPage::concat</FName>
    <Desc>bool HaruPage::concat ( float $a , float $b , float $c , float $d , float $x , float $y )
Concatenates current transformation matrix of the page and the specified matrix.
</Desc>
    <FName>HaruPage::createDestination</FName>
    <Desc>object HaruPage::createDestination ( void )
Create a new HaruDestination instance.
</Desc>
    <FName>HaruPage::createLinkAnnotation</FName>
    <Desc>object HaruPage::createLinkAnnotation ( array $rectangle , object $destination )
Creates a new HaruAnnotation instance.
</Desc>
    <FName>HaruPage::createTextAnnotation</FName>
    <Desc>object HaruPage::createTextAnnotation ( array $rectangle , string $text [, object $encoder ] )
Creates a new HaruAnnotation instance.
</Desc>
    <FName>HaruPage::createURLAnnotation</FName>
    <Desc>object HaruPage::createURLAnnotation ( array $rectangle , string $url )
Creates a new HaruAnnotation instance.
</Desc>
    <FName>HaruPage::curveTo</FName>
    <Desc>bool HaruPage::curveTo ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
Append a Bezier curve to the current path. The point (x1, y1) and the point (x2, y2) are used as the control points for a Bezier curve and current point is moved to the point (x3, y3).
</Desc>
    <FName>HaruPage::curveTo2</FName>
    <Desc>bool HaruPage::curveTo2 ( float $x2 , float $y2 , float $x3 , float $y3 )
Appends a Bezier curve to the current path. The current point and the point (x2, y2) are used as the control points for the Bezier curve and current point is moved to the point (x3, y3).
</Desc>
    <FName>HaruPage::curveTo3</FName>
    <Desc>bool HaruPage::curveTo3 ( float $x1 , float $y1 , float $x3 , float $y3 )
Appends a Bezier curve to the current path. The point (x1, y1) and the point (x3, y3) are used as the control points for a Bezier curve and current point is moved to the point (x3, y3).
</Desc>
    <FName>HaruPage::drawImage</FName>
    <Desc>bool HaruPage::drawImage ( object $image , float $x , float $y , float $width , float $height )
Show image at the page.
</Desc>
    <FName>HaruPage::ellipse</FName>
    <Desc>bool HaruPage::ellipse ( float $x , float $y , float $xray , float $yray )
Appends an ellipse to the current path.
</Desc>
    <FName>HaruPage::endPath</FName>
    <Desc>bool HaruPage::endPath ( void )
Ends current path object without performing filling and painting operations.
</Desc>
    <FName>HaruPage::endText</FName>
    <Desc>bool HaruPage::endText ( void )
Finalizes current text object.
</Desc>
    <FName>HaruPage::eofill</FName>
    <Desc>bool HaruPage::eofill ( void )
Fills current path using even-odd rule.
</Desc>
    <FName>HaruPage::eoFillStroke</FName>
    <Desc>bool HaruPage::eoFillStroke ([ bool $close_path = FALSE ] )
Fills current path using even-odd rule, then paints the path.
</Desc>
    <FName>HaruPage::fill</FName>
    <Desc>bool HaruPage::fill ( void )
Fills current path using nonzero winding number rule.
</Desc>
    <FName>HaruPage::fillStroke</FName>
    <Desc>bool HaruPage::fillStroke ([ bool $close_path = FALSE ] )
Fills current path using nonzero winding number rule, then paints the path.
</Desc>
    <FName>HaruPage::getCharSpace</FName>
    <Desc>float HaruPage::getCharSpace ( void )
Get the current value of character spacing.
</Desc>
    <FName>HaruPage::getCMYKFill</FName>
    <Desc>array HaruPage::getCMYKFill ( void )
Returns the current filling color.
</Desc>
    <FName>HaruPage::getCMYKStroke</FName>
    <Desc>array HaruPage::getCMYKStroke ( void )
Get the current stroking color.
</Desc>
    <FName>HaruPage::getCurrentFont</FName>
    <Desc>object HaruPage::getCurrentFont ( void )
Get the currently used font.
</Desc>
    <FName>HaruPage::getCurrentFontSize</FName>
    <Desc>float HaruPage::getCurrentFontSize ( void )
Get the current font size.
</Desc>
    <FName>HaruPage::getCurrentPos</FName>
    <Desc>array HaruPage::getCurrentPos ( void )
Get the current position for path painting.
</Desc>
    <FName>HaruPage::getCurrentTextPos</FName>
    <Desc>array HaruPage::getCurrentTextPos ( void )
Get the current position for text printing.
</Desc>
    <FName>HaruPage::getDash</FName>
    <Desc>array HaruPage::getDash ( void )
Get the current dash pattern. See HaruPage::setDash() for more information on dash patterns.
</Desc>
    <FName>HaruPage::getFillingColorSpace</FName>
    <Desc>int HaruPage::getFillingColorSpace ( void )
Get the current filling color space.
</Desc>
    <FName>HaruPage::getFlatness</FName>
    <Desc>float HaruPage::getFlatness ( void )
Get the flatness of the page.
</Desc>
    <FName>HaruPage::getGMode</FName>
    <Desc>int HaruPage::getGMode ( void )
Get the current graphics mode.
</Desc>
    <FName>HaruPage::getGrayFill</FName>
    <Desc>float HaruPage::getGrayFill ( void )
Get the current filling color.
</Desc>
    <FName>HaruPage::getGrayStroke</FName>
    <Desc>float HaruPage::getGrayStroke ( void )
Get the current stroking color.
</Desc>
    <FName>HaruPage::getHeight</FName>
    <Desc>float HaruPage::getHeight ( void )
Get the height of the page.
</Desc>
    <FName>HaruPage::getHorizontalScaling</FName>
    <Desc>float HaruPage::getHorizontalScaling ( void )
Get the current value of the horizontal scaling.
</Desc>
    <FName>HaruPage::getLineCap</FName>
    <Desc>int HaruPage::getLineCap ( void )
Get the current line cap style.
</Desc>
    <FName>HaruPage::getLineJoin</FName>
    <Desc>int HaruPage::getLineJoin ( void )
Get the current line join style.
</Desc>
    <FName>HaruPage::getLineWidth</FName>
    <Desc>float HaruPage::getLineWidth ( void )
Get the current line width.
</Desc>
    <FName>HaruPage::getMiterLimit</FName>
    <Desc>float HaruPage::getMiterLimit ( void )
Get the value of the miter limit.
</Desc>
    <FName>HaruPage::getRGBFill</FName>
    <Desc>array HaruPage::getRGBFill ( void )
Get the current filling color.
</Desc>
    <FName>HaruPage::getRGBStroke</FName>
    <Desc>array HaruPage::getRGBStroke ( void )
Get the current stroking color.
</Desc>
    <FName>HaruPage::getStrokingColorSpace</FName>
    <Desc>int HaruPage::getStrokingColorSpace ( void )
Get the current stroking color space.
</Desc>
    <FName>HaruPage::getTextLeading</FName>
    <Desc>float HaruPage::getTextLeading ( void )
Get the current value of line spacing.
</Desc>
    <FName>HaruPage::getTextMatrix</FName>
    <Desc>array HaruPage::getTextMatrix ( void )
Get the current text transformation matrix of the page.
</Desc>
    <FName>HaruPage::getTextRenderingMode</FName>
    <Desc>int HaruPage::getTextRenderingMode ( void )
Get the current text rendering mode.
</Desc>
    <FName>HaruPage::getTextRise</FName>
    <Desc>float HaruPage::getTextRise ( void )
Get the current value of text rising.
</Desc>
    <FName>HaruPage::getTextWidth</FName>
    <Desc>float HaruPage::getTextWidth ( string $text )
Get the width of the text using current fontsize, character spacing and word spacing
</Desc>
    <FName>HaruPage::getTransMatrix</FName>
    <Desc>array HaruPage::getTransMatrix ( void )
Get the current transformation matrix of the page.
</Desc>
    <FName>HaruPage::getWidth</FName>
    <Desc>float HaruPage::getWidth ( void )
Get the width of the page.
</Desc>
    <FName>HaruPage::getWordSpace</FName>
    <Desc>float HaruPage::getWordSpace ( void )
Get the current value of word spacing.
</Desc>
    <FName>HaruPage::lineTo</FName>
    <Desc>bool HaruPage::lineTo ( float $x , float $y )
Draws a line from the current point to the specified point.
</Desc>
    <FName>HaruPage::measureText</FName>
    <Desc>int HaruPage::measureText ( string $text , float $width [, bool $wordwrap = FALSE ] )
Get the byte length of characters which can be included on one line of the specified width.
</Desc>
    <FName>HaruPage::moveTextPos</FName>
    <Desc>bool HaruPage::moveTextPos ( float $x , float $y [, bool $set_leading = FALSE ] )
Moves text position to the specified offset. If the start position of the current line is (x1, y1), the start of the next line is (x1 + x, y1 + y).
</Desc>
    <FName>HaruPage::moveTo</FName>
    <Desc>bool HaruPage::moveTo ( float $x , float $y )
Defines starting point for new drawing path.
</Desc>
    <FName>HaruPage::moveToNextLine</FName>
    <Desc>bool HaruPage::moveToNextLine ( void )
Moves text position to the start of the next line.
</Desc>
    <FName>HaruPage::rectangle</FName>
    <Desc>bool HaruPage::rectangle ( float $x , float $y , float $width , float $height )
Appends a rectangle to the current drawing path.
</Desc>
    <FName>HaruPage::setCharSpace</FName>
    <Desc>bool HaruPage::setCharSpace ( float $char_space )
Defines character spacing for the page.
</Desc>
    <FName>HaruPage::setCMYKFill</FName>
    <Desc>bool HaruPage::setCMYKFill ( float $c , float $m , float $y , float $k )
Defines filling color for the page.
</Desc>
    <FName>HaruPage::setCMYKStroke</FName>
    <Desc>bool HaruPage::setCMYKStroke ( float $c , float $m , float $y , float $k )
Defines stroking color for the page.
</Desc>
    <FName>HaruPage::setDash</FName>
    <Desc>bool HaruPage::setDash ( array $pattern , int $phase )
Defines the dash pattern for the page.
</Desc>
    <FName>HaruPage::setFlatness</FName>
    <Desc>bool HaruPage::setFlatness ( float $flatness )
Defines flatness for the page.
</Desc>
    <FName>HaruPage::setFontAndSize</FName>
    <Desc>bool HaruPage::setFontAndSize ( object $font , float $size )
Defines current font and its size for the page.
</Desc>
    <FName>HaruPage::setGrayFill</FName>
    <Desc>bool HaruPage::setGrayFill ( float $value )
Defines filling color for the page.
</Desc>
    <FName>HaruPage::setGrayStroke</FName>
    <Desc>bool HaruPage::setGrayStroke ( float $value )
Defines stroking color for the page.
</Desc>
    <FName>HaruPage::setHeight</FName>
    <Desc>bool HaruPage::setHeight ( float $height )
Defines height of the page.
</Desc>
    <FName>HaruPage::setHorizontalScaling</FName>
    <Desc>bool HaruPage::setHorizontalScaling ( float $scaling )
Set the horizontal scaling for the page.
</Desc>
    <FName>HaruPage::setLineCap</FName>
    <Desc>bool HaruPage::setLineCap ( int $cap )
Defines the shape to be used at the ends of lines.
</Desc>
    <FName>HaruPage::setLineJoin</FName>
    <Desc>bool HaruPage::setLineJoin ( int $join )
Defines line join style for the page.
</Desc>
    <FName>HaruPage::setLineWidth</FName>
    <Desc>bool HaruPage::setLineWidth ( float $width )
Defines line width for the page.
</Desc>
    <FName>HaruPage::setMiterLimit</FName>
    <Desc>bool HaruPage::setMiterLimit ( float $limit )
Set the current value of the miter limit of the page.
</Desc>
    <FName>HaruPage::setRGBFill</FName>
    <Desc>bool HaruPage::setRGBFill ( float $r , float $g , float $b )
Defines filling color for the page. All values must be between 0 and 1.
</Desc>
    <FName>HaruPage::setRGBStroke</FName>
    <Desc>bool HaruPage::setRGBStroke ( float $r , float $g , float $b )
Defines stroking color for the page. All values must be between 0 and 1.
</Desc>
    <FName>HaruPage::setRotate</FName>
    <Desc>bool HaruPage::setRotate ( int $angle )
Defines rotation angle of the page.
</Desc>
    <FName>HaruPage::setSize</FName>
    <Desc>bool HaruPage::setSize ( int $size , int $direction )
Changes size and direction of the page to a predefined format.
</Desc>
    <FName>HaruPage::setSlideShow</FName>
    <Desc>bool HaruPage::setSlideShow ( int $type , float $disp_time , float $trans_time )
Defines transition style for the page.
</Desc>
    <FName>HaruPage::setTextLeading</FName>
    <Desc>bool HaruPage::setTextLeading ( float $text_leading )
Set the text leading (line spacing) for the page.
</Desc>
    <FName>HaruPage::setTextMatrix</FName>
    <Desc>bool HaruPage::setTextMatrix ( float $a , float $b , float $c , float $d , float $x , float $y )
Defines the text transformation matrix of the page.
</Desc>
    <FName>HaruPage::setTextRenderingMode</FName>
    <Desc>bool HaruPage::setTextRenderingMode ( int $mode )
Defines text rendering mode for the page.
</Desc>
    <FName>HaruPage::setTextRise</FName>
    <Desc>bool HaruPage::setTextRise ( float $rise )
Set the current value of text rising.
</Desc>
    <FName>HaruPage::setWidth</FName>
    <Desc>bool HaruPage::setWidth ( float $width )
Set the width of the page.
</Desc>
    <FName>HaruPage::setWordSpace</FName>
    <Desc>bool HaruPage::setWordSpace ( float $word_space )
Set the word spacing for the page.
</Desc>
    <FName>HaruPage::showText</FName>
    <Desc>bool HaruPage::showText ( string $text )
Prints out the text at the current position of the page.
</Desc>
    <FName>HaruPage::showTextNextLine</FName>
    <Desc>bool HaruPage::showTextNextLine ( string $text [, float $word_space = 0 [, float $char_space = 0 ]] )
Moves the current position to the start of the next line and print out the text.
</Desc>
    <FName>HaruPage::stroke</FName>
    <Desc>bool HaruPage::stroke ([ bool $close_path = FALSE ] )
Paints the current path.
</Desc>
    <FName>HaruPage::textOut</FName>
    <Desc>bool HaruPage::textOut ( float $x , float $y , string $text )
Prints the text on the specified position.
</Desc>
    <FName>HaruPage::textRect</FName>
    <Desc>bool HaruPage::textRect ( float $left , float $top , float $right , float $bottom , string $text [, int $align = HaruPage::TALIGN_LEFT ] )
Prints the text inside the specified region.
</Desc>
    <FName>HashContext::__construct</FName>
    <Desc>private HashContext::__construct ( void )
</Desc>
    <FName>HRTime\PerformanceCounter::getFrequency</FName>
    <Desc>public static int HRTime\PerformanceCounter::getFrequency ( void )
Returns the timer frequency in ticks per second. This value is constant after the system start on almost any operating system.
</Desc>
    <FName>HRTime\PerformanceCounter::getTicks</FName>
    <Desc>public static int HRTime\PerformanceCounter::getTicks ( void )
Returns the ticks count.
</Desc>
    <FName>HRTime\PerformanceCounter::getTicksSince</FName>
    <Desc>public static int HRTime\PerformanceCounter::getTicksSince ( int $start )
Returns the ticks count elapsed since the given start value.
</Desc>
    <FName>HRTime\StopWatch::getElapsedTicks</FName>
    <Desc>public int HRTime\StopWatch::getElapsedTicks ( void )
Get elapsed ticks for all the previously closed intervals.
</Desc>
    <FName>HRTime\StopWatch::getElapsedTime</FName>
    <Desc>public float HRTime\StopWatch::getElapsedTime ([ int $unit ] )
Get elapsed time for all the previously closed intervals.
</Desc>
    <FName>HRTime\StopWatch::getLastElapsedTicks</FName>
    <Desc>public int HRTime\StopWatch::getLastElapsedTicks ( void )
Get elapsed ticks for the previously closed interval.
</Desc>
    <FName>HRTime\StopWatch::getLastElapsedTime</FName>
    <Desc>public float HRTime\StopWatch::getLastElapsedTime ([ int $unit ] )
Get elapsed time for the previously closed interval.
</Desc>
    <FName>HRTime\StopWatch::isRunning</FName>
    <Desc>public bool HRTime\StopWatch::isRunning ( void )
Reveals whether the measurement was started.
</Desc>
    <FName>HRTime\StopWatch::start</FName>
    <Desc>public void HRTime\StopWatch::start ( void )
Starts the time measurement. It has no effect if the measurement was already started. The measurement will be continued if it was previously stopped.
</Desc>
    <FName>HRTime\StopWatch::stop</FName>
    <Desc>public void HRTime\StopWatch::stop ( void )
Stop the time measurement for the previously started interval.
</Desc>
    <FName>hw_api_attribute::key</FName>
    <Desc>string hw_api_attribute::key ( void )
Returns the name of the attribute.
</Desc>
    <FName>hw_api_attribute::langdepvalue</FName>
    <Desc>string hw_api_attribute::langdepvalue ( string $language )
Returns the value in the given language of the attribute.
</Desc>
    <FName>hw_api_attribute::value</FName>
    <Desc>string hw_api_attribute::value ( void )
Gets the value of the attribute.
</Desc>
    <FName>hw_api_attribute::values</FName>
    <Desc>array hw_api_attribute::values ( void )
Gets all values of the attribute.
</Desc>
    <FName>hw_api::checkin</FName>
    <Desc>bool hw_api::checkin ( array $parameter )
This function checks in an object or a whole hierarchy of objects. The parameters array contains the required element 'objectIdentifier' and the optional element 'version', 'comment', 'mode' and 'objectQuery'. 'version' sets the version of the object. It consists of the major and minor version separated by a period. If the version is not set, the minor version is incremented. 'mode' can be one of the following values: 
HW_API_CHECKIN_NORMAL 
Checks in and commits the object. The object must be a document. 
HW_API_CHECKIN_RECURSIVE 
If the object to check in is a collection, all children will be checked in recursively if they are documents. Trying to check in a collection would result in an error. 
HW_API_CHECKIN_FORCE_VERSION_CONTROL 
Checks in an object even if it is not under version control. 
HW_API_CHECKIN_REVERT_IF_NOT_CHANGED 
Check if the new version is different from the last version. Unless this is the case the object will be checked in. 
HW_API_CHECKIN_KEEP_TIME_MODIFIED 
Keeps the time modified from the most recent object. 
HW_API_CHECKIN_NO_AUTO_COMMIT 
The object is not automatically committed on check-in.
</Desc>
    <FName>hw_api::checkout</FName>
    <Desc>bool hw_api::checkout ( array $parameter )
This function checks out an object or a whole hierarchy of objects.
</Desc>
    <FName>hw_api::children</FName>
    <Desc>array hw_api::children ( array $parameter )
Retrieves the children of a collection or the attributes of a document. The children can be further filtered by specifying an object query.
</Desc>
    <FName>hw_api_content::mimetype</FName>
    <Desc>string hw_api_content::mimetype ( void )
Returns the mimetype of the content.
</Desc>
    <FName>hw_api_content::read</FName>
    <Desc>string hw_api_content::read ( string $buffer , int $len )
Reads len bytes from the content into the given buffer.
</Desc>
    <FName>hw_api::content</FName>
    <Desc>HW_API_Content hw_api::content ( array $parameter )
This function returns the content of a document as an object of type hw_api_content.
</Desc>
    <FName>hw_api::copy</FName>
    <Desc>hw_api_content hw_api::copy ( array $parameter )
This function will make a physical copy including the content if it exists and returns the new object or an error object.
</Desc>
    <FName>hw_api::dbstat</FName>
    <Desc>hw_api_object hw_api::dbstat ( array $parameter )
Returns statistics about database server.
</Desc>
    <FName>hw_api::dcstat</FName>
    <Desc>hw_api_object hw_api::dcstat ( array $parameter )
Returns statistics about document cache server.
</Desc>
    <FName>hw_api::dstanchors</FName>
    <Desc>array hw_api::dstanchors ( array $parameter )
Retrieves all destination anchors of an object.
</Desc>
    <FName>hw_api::dstofsrcanchor</FName>
    <Desc>hw_api_object hw_api::dstofsrcanchor ( array $parameter )
Retrieves the destination object pointed by the specified source anchors. The destination object can either be a destination anchor or a whole document.
</Desc>
    <FName>hw_api_error::count</FName>
    <Desc>int hw_api_error::count ( void )
Returns the number of error reasons.
</Desc>
    <FName>hw_api_error::reason</FName>
    <Desc>HW_API_Reason hw_api_error::reason ( void )
Returns the first error reason.
</Desc>
    <FName>hw_api::find</FName>
    <Desc>array hw_api::find ( array $parameter )
This functions searches for objects either by executing a key or/and full text query. The found objects can further be filtered by an optional object query. They are sorted by their importance. The second search operation is relatively slow and its result can be limited to a certain number of hits. This allows to perform an incremental search, each returning just a subset of all found documents, starting at a given index.
</Desc>
    <FName>hw_api::ftstat</FName>
    <Desc>hw_api_object hw_api::ftstat ( array $parameter )
Returns statistics about fulltext server.
</Desc>
    <FName>hw_api::hwstat</FName>
    <Desc>hw_api_object hw_api::hwstat ( array $parameter )
Returns statistics about Hyperwave server.
</Desc>
    <FName>hw_api::identify</FName>
    <Desc>bool hw_api::identify ( array $parameter )
Logs into the Hyperwave Server.
</Desc>
    <FName>hw_api::info</FName>
    <Desc>array hw_api::info ( array $parameter )
Returns information about server configuration.
</Desc>
    <FName>hw_api::insert</FName>
    <Desc>hw_api_object hw_api::insert ( array $parameter )
Insert a new object. The object type can be user, group, document or anchor. Depending on the type other object attributes has to be set.
</Desc>
    <FName>hw_api::insertanchor</FName>
    <Desc>hw_api_object hw_api::insertanchor ( array $parameter )
This function is a shortcut for hwapi_insert(). It inserts an object of type anchor and sets some of the attributes required for an anchor.
</Desc>
    <FName>hw_api::insertcollection</FName>
    <Desc>hw_api_object hw_api::insertcollection ( array $parameter )
This function is a shortcut for hwapi_insert(). It inserts an object of type collection and sets some of the attributes required for a collection.
</Desc>
    <FName>hw_api::insertdocument</FName>
    <Desc>hw_api_object hw_api::insertdocument ( array $parameter )
This function is a shortcut for hwapi_insert(). It inserts an object with content and sets some of the attributes required for a document.
</Desc>
    <FName>hw_api::link</FName>
    <Desc>bool hw_api::link ( array $parameter )
Creates a link to an object. Accessing this link is like accessing the object to links points to.
</Desc>
    <FName>hw_api::lock</FName>
    <Desc>bool hw_api::lock ( array $parameter )
Locks an object for exclusive editing by the user calling this function. The object can be only unlocked by this user or the system user.
</Desc>
    <FName>hw_api::move</FName>
    <Desc>bool hw_api::move ( array $parameter )
Moves object between collections.
</Desc>
    <FName>hw_api_object::assign</FName>
    <Desc>bool hw_api_object::assign ( array $parameter )
Clones the attributes of an object.
</Desc>
    <FName>hw_api_object::attreditable</FName>
    <Desc>bool hw_api_object::attreditable ( array $parameter )
Checks whether an attribute is editable.
</Desc>
    <FName>hw_api_object::count</FName>
    <Desc>int hw_api_object::count ( array $parameter )
Returns the number of attributes.
</Desc>
    <FName>hw_api_object::insert</FName>
    <Desc>bool hw_api_object::insert ( HW_API_Attribute $attribute )
Adds an attribute to the object.
</Desc>
    <FName>hw_api_object::remove</FName>
    <Desc>bool hw_api_object::remove ( string $name )
Removes the attribute with the given name.
</Desc>
    <FName>hw_api_object::title</FName>
    <Desc>string hw_api_object::title ( array $parameter )
Returns the title attribute.
</Desc>
    <FName>hw_api_object::value</FName>
    <Desc>string hw_api_object::value ( string $name )
Returns value of an attribute.
</Desc>
    <FName>hw_api::object</FName>
    <Desc>hw_api_object hw_api::object ( array $parameter )
This function retrieves the attribute information of an object of any version. It will not return the document content.
</Desc>
    <FName>hw_api::objectbyanchor</FName>
    <Desc>hw_api_object hw_api::objectbyanchor ( array $parameter )
This function retrieves an object the specified anchor belongs to.
</Desc>
    <FName>hw_api::parents</FName>
    <Desc>array hw_api::parents ( array $parameter )
Retrieves the parents of an object. The parents can be further filtered by specifying an object query.
</Desc>
    <FName>hw_api_reason::description</FName>
    <Desc>string hw_api_reason::description ( void )
Returns the description of a reason
</Desc>
    <FName>hw_api_reason::type</FName>
    <Desc>HW_API_Reason hw_api_reason::type ( void )
Returns the type of a reason.
</Desc>
    <FName>hw_api::remove</FName>
    <Desc>bool hw_api::remove ( array $parameter )
Removes an object from the specified parent. Collections will be removed recursively.
</Desc>
    <FName>hw_api::replace</FName>
    <Desc>hw_api_object hw_api::replace ( array $parameter )
Replaces the attributes and the content of an object.
</Desc>
    <FName>hw_api::setcommittedversion</FName>
    <Desc>hw_api_object hw_api::setcommittedversion ( array $parameter )
Commits a version of a document. The committed version is the one which is visible to users with read access. By default the last version is the committed version.
</Desc>
    <FName>hw_api::srcanchors</FName>
    <Desc>array hw_api::srcanchors ( array $parameter )
Retrieves all source anchors of an object.
</Desc>
    <FName>hw_api::srcsofdst</FName>
    <Desc>array hw_api::srcsofdst ( array $parameter )
Retrieves all the source anchors pointing to the specified destination. The destination object can either be a destination anchor or a whole document.
</Desc>
    <FName>hw_api::unlock</FName>
    <Desc>bool hw_api::unlock ( array $parameter )
Unlocks a locked object. Only the user who has locked the object and the system user may unlock an object.
</Desc>
    <FName>hw_api::user</FName>
    <Desc>hw_api_object hw_api::user ( array $parameter )
Returns the own user object.
</Desc>
    <FName>hw_api::userlist</FName>
    <Desc>array hw_api::userlist ( array $parameter )
Returns a list of all logged in users.
</Desc>
    <FName>KTaglib_ID3v2_AttachedPictureFrame::getDescription</FName>
    <Desc>public string KTaglib_ID3v2_AttachedPictureFrame::getDescription ( void )
Returns the attached description for a picture frame in an ID3v2.x frame.
</Desc>
    <FName>KTaglib_ID3v2_AttachedPictureFrame::getMimeType</FName>
    <Desc>public string KTaglib_ID3v2_AttachedPictureFrame::getMimeType ( void )
Returns the mime type of the image represented by the attached picture frame. 
Please notice that this method might return different types. While ID3v2.2 have a mime type that doesn't start with "image/", ID3v2.3 and v2.4 usually start with "image/". Therefore the method might return "image/png" for IDv2.3 frames and just "PNG" for ID3v2.2 frames. 
Notice that even the frame is an attached picture, the mime type might not be set and therefore an empty string might be returned.
</Desc>
    <FName>KTaglib_ID3v2_AttachedPictureFrame::getType</FName>
    <Desc>public int KTaglib_ID3v2_AttachedPictureFrame::getType ( void )
Returns the type of the image. 
The ID3v2 specification allows an AttachedPictureFrame to set the type of an image. This can be e.g. FrontCover or FileIcon. Please refer to the KTaglib_ID3v2_AttachedPictureFrame class description for a list of available types.
</Desc>
    <FName>KTaglib_ID3v2_AttachedPictureFrame::savePicture</FName>
    <Desc>public bool KTaglib_ID3v2_AttachedPictureFrame::savePicture ( string $filename )
Saves the attached picture to the given filename.
</Desc>
    <FName>KTaglib_ID3v2_AttachedPictureFrame::setMimeType</FName>
    <Desc>public string KTaglib_ID3v2_AttachedPictureFrame::getMimeType ( string $type )
Sets the mime type of the image. This should in most cases be "image/png" or "image/jpeg". 
</Desc>
    <FName>KTaglib_ID3v2_AttachedPictureFrame::setPicture</FName>
    <Desc>public void KTaglib_ID3v2_AttachedPictureFrame::setPicture ( string $filename )
Sets the picture to the give image. The image is loaded from the given filename. Please note that the picture is not saved unless you call the save method of the corresponding file object.
</Desc>
    <FName>KTaglib_ID3v2_AttachedPictureFrame::setType</FName>
    <Desc>public void KTaglib_ID3v2_AttachedPictureFrame::setType ( int $type )
Sets the type of the image. This can be e.g. FrontCover or FileIcon. Please refer to the KTaglib_ID3v2_AttachedPictureFrame class description for a list of available types and their constant mappings. 
</Desc>
    <FName>KTaglib_ID3v2_Frame::getSize</FName>
    <Desc>public int KTaglib_ID3v2_Frame::getSize ( void )
Returns the size of the frame in bytes. Please refer to id3.org to see what ID3v2 frames are and how they are defined.
</Desc>
    <FName>KTaglib_ID3v2_Frame::__toString</FName>
    <Desc>public string KTaglib_ID3v2_Frame::__toString ( void )
Returns a string representation of the frame. This might be just the frame id, but might contain more information. Please see the ktaglib documentation for more information
</Desc>
    <FName>KTaglib_ID3v2_Tag::addFrame</FName>
    <Desc>public bool KTaglib_ID3v2_Tag::addFrame ( KTaglib_ID3v2_Frame $frame )
Adds a frame to the ID3v2 tag. The frame must be a valid KTaglib_ID3v2_Frame object. To save the tag, the save function needs to be invoked.
</Desc>
    <FName>KTaglib_ID3v2_Tag::getFrameList</FName>
    <Desc>public array KTaglib_ID3v2_Tag::getFrameList ( void )
Returns an array of ID3v2 frames, associated with the ID3v2 tag.
</Desc>
    <FName>Imagick::adaptiveBlurImage</FName>
    <Desc>bool Imagick::adaptiveBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Adds an adaptive blur filter to image. The intensity of an adaptive blur depends is dramatically decreased at edge of the image, whereas a standard blur is uniform across the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::adaptiveResizeImage</FName>
    <Desc>bool Imagick::adaptiveResizeImage ( int $columns , int $rows [, bool $bestfit = FALSE [, bool $legacy = FALSE ]] )
Adaptively resize image with data-dependent triangulation. Avoids blurring across sharp color changes. Most useful when used to shrink images slightly to a slightly smaller "web size"; may not look good when a full-sized image is adaptively resized to a thumbnail. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer. 
Note: The behavior of the parameter bestfit changed in Imagick 3.0.0. Before this version given dimensions 400x400 an image of dimensions 200x150 would be left untouched. In Imagick 3.0.0 and later the image would be scaled up to size 400x300 as this is the "best fit" for the given dimensions. If bestfit parameter is used both width and height must be given.
</Desc>
    <FName>Imagick::adaptiveSharpenImage</FName>
    <Desc>bool Imagick::adaptiveSharpenImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Adaptively sharpen the image by sharpening more intensely near image edges and less intensely far from edges. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::adaptiveThresholdImage</FName>
    <Desc>bool Imagick::adaptiveThresholdImage ( int $width , int $height , int $offset )
Selects an individual threshold for each pixel based on the range of intensity values in its local neighborhood. This allows for thresholding of an image whose global intensity histogram doesn't contain distinctive peaks.
</Desc>
    <FName>Imagick::addImage</FName>
    <Desc>bool Imagick::addImage ( Imagick $source )
Adds new image to Imagick object from the current position of the source object. After the operation iterator position is moved at the end of the list.
</Desc>
    <FName>Imagick::addNoiseImage</FName>
    <Desc>bool Imagick::addNoiseImage ( int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Adds random noise to the image.
</Desc>
    <FName>Imagick::affineTransformImage</FName>
    <Desc>bool Imagick::affineTransformImage ( ImagickDraw $matrix )
Transforms an image as dictated by the affine matrix.
</Desc>
    <FName>Imagick::animateImages</FName>
    <Desc>bool Imagick::animateImages ( string $x_server )
This method animates the image onto a local or remote X server. This method is not available on Windows. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.
</Desc>
    <FName>Imagick::annotateImage</FName>
    <Desc>bool Imagick::annotateImage ( ImagickDraw $draw_settings , float $x , float $y , float $angle , string $text )
Annotates an image with text.
</Desc>
    <FName>Imagick::appendImages</FName>
    <Desc>Imagick Imagick::appendImages ( bool $stack = FALSE )
Append a set of images into one larger image.
</Desc>
    <FName>Imagick::autoLevelImage</FName>
    <Desc>public bool Imagick::autoLevelImage ([ int $channel = Imagick::CHANNEL_DEFAULT ] )
Adjusts the levels of a particular image channel by scaling the minimum and maximum values to the full quantum range.
</Desc>
    <FName>Imagick::averageImages</FName>
    <Desc>Imagick Imagick::averageImages ( void )
Average a set of images.
</Desc>
    <FName>Imagick::blackThresholdImage</FName>
    <Desc>bool Imagick::blackThresholdImage ( mixed $threshold )
Is like Imagick::thresholdImage() but forces all pixels below the threshold into black while leaving all pixels above the threshold unchanged.
</Desc>
    <FName>Imagick::blueShiftImage</FName>
    <Desc>public bool Imagick::blueShiftImage ([ float $factor = 1.5 ] )
Mutes the colors of the image to simulate a scene at nighttime in the moonlight.
</Desc>
    <FName>Imagick::blurImage</FName>
    <Desc>bool Imagick::blurImage ( float $radius , float $sigma [, int $channel ] )
Adds blur filter to image. Optional third parameter to blur a specific channel.
</Desc>
    <FName>Imagick::borderImage</FName>
    <Desc>bool Imagick::borderImage ( mixed $bordercolor , int $width , int $height )
Surrounds the image with a border of the color defined by the bordercolor ImagickPixel object.
</Desc>
    <FName>Imagick::brightnessContrastImage</FName>
    <Desc>public bool Imagick::brightnessContrastImage ( float $brightness , float $contrast [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Change the brightness and/or contrast of an image. It converts the brightness and contrast parameters into slope and intercept and calls a polynomical function to apply to the image.
</Desc>
    <FName>Imagick::charcoalImage</FName>
    <Desc>bool Imagick::charcoalImage ( float $radius , float $sigma )
Simulates a charcoal drawing.
</Desc>
    <FName>Imagick::chopImage</FName>
    <Desc>bool Imagick::chopImage ( int $width , int $height , int $x , int $y )
Removes a region of an image and collapses the image to occupy the removed portion.
</Desc>
    <FName>Imagick::clampImage</FName>
    <Desc>public bool Imagick::clampImage ([ int $channel = Imagick::CHANNEL_DEFAULT ] )
Restricts the color range from 0 to the quantum depth.
</Desc>
    <FName>Imagick::clear</FName>
    <Desc>bool Imagick::clear ( void )
Clears all resources associated to Imagick object
</Desc>
    <FName>Imagick::clipImage</FName>
    <Desc>bool Imagick::clipImage ( void )
Clips along the first path from the 8BIM profile, if present.
</Desc>
    <FName>Imagick::clipImagePath</FName>
    <Desc>public void Imagick::clipImagePath ( string $pathname , string $inside )
Clips along the named paths from the 8BIM profile, if present. Later operations take effect inside the path. Id may be a number if preceded with #, to work on a numbered path, e.g., "#1" to use the first path. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Imagick::clipPathImage</FName>
    <Desc>bool Imagick::clipPathImage ( string $pathname , bool $inside )
Clips along the named paths from the 8BIM profile, if present. Later operations take effect inside the path. It may be a number if preceded with #, to work on a numbered path, e.g., "#1" to use the first path.
</Desc>
    <FName>Imagick::clone</FName>
    <Desc>Imagick Imagick::clone ( void )
Makes an exact copy of the Imagick object. 
Warning 
This function has been DEPRECATED as of imagick 3.1.0 in favour of using the clone keyword.
</Desc>
    <FName>Imagick::clutImage</FName>
    <Desc>bool Imagick::clutImage ( Imagick $lookup_table [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Replaces colors in the image from a color lookup table. Optional second parameter to replace colors in a specific channel. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.
</Desc>
    <FName>Imagick::coalesceImages</FName>
    <Desc>Imagick Imagick::coalesceImages ( void )
Composites a set of images while respecting any page offsets and disposal methods. GIF, MIFF, and MNG animation sequences typically start with an image background and each subsequent image varies in size and offset. Returns a new Imagick object where each image in the sequence is the same size as the first and composited with the next image in the sequence.
</Desc>
    <FName>Imagick::colorFloodfillImage</FName>
    <Desc>bool Imagick::colorFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y )
Changes the color value of any pixel that matches target and is an immediate neighbor.
</Desc>
    <FName>Imagick::colorizeImage</FName>
    <Desc>bool Imagick::colorizeImage ( mixed $colorize , mixed $opacity [, bool $legacy = FALSE ] )
Blends the fill color with each pixel in the image.
</Desc>
    <FName>Imagick::colorMatrixImage</FName>
    <Desc>public bool Imagick::colorMatrixImage ( array $color_matrix = Imagick::CHANNEL_DEFAULT )
Apply color transformation to an image. The method permits saturation changes, hue rotation, luminance to alpha, and various other effects. Although variable-sized transformation matrices can be used, typically one uses a 5x5 matrix for an RGBA image and a 6x6 for CMYKA (or RGBA with offsets). The matrix is similar to those used by Adobe Flash except offsets are in column 6 rather than 5 (in support of CMYKA images) and offsets are normalized (divide Flash offset by 255)
</Desc>
    <FName>Imagick::combineImages</FName>
    <Desc>Imagick Imagick::combineImages ( int $channelType )
Combines one or more images into a single image. The grayscale value of the pixels of each image in the sequence is assigned in order to the specified channels of the combined image. The typical ordering would be image 1 => Red, 2 => Green, 3 => Blue, etc.
</Desc>
    <FName>Imagick::commentImage</FName>
    <Desc>bool Imagick::commentImage ( string $comment )
Adds a comment to your image.
</Desc>
    <FName>Imagick::compareImageChannels</FName>
    <Desc>array Imagick::compareImageChannels ( Imagick $image , int $channelType , int $metricType )
Compares one or more images and returns the difference image.
</Desc>
    <FName>Imagick::compareImageLayers</FName>
    <Desc>Imagick Imagick::compareImageLayers ( int $method )
Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::compareImages</FName>
    <Desc>array Imagick::compareImages ( Imagick $compare , int $metric )
Returns an array containing a reconstructed image and the difference between images.
</Desc>
    <FName>Imagick::compositeImage</FName>
    <Desc>bool Imagick::compositeImage ( Imagick $composite_object , int $composite , int $x , int $y [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Composite one image onto another at the specified offset. Any extra arguments needed for the compose algorithm should passed to setImageArtifact with 'compose:args' as the first parameter and the data as the second parameter.
</Desc>
    <FName>Imagick::__construct</FName>
    <Desc>Imagick::__construct ([ mixed $files ] )
Creates an Imagick instance for a specified image or set of images.
</Desc>
    <FName>Imagick::contrastImage</FName>
    <Desc>bool Imagick::contrastImage ( bool $sharpen )
Enhances the intensity differences between the lighter and darker elements of the image. Set sharpen to a value other than 0 to increase the image contrast otherwise the contrast is reduced.
</Desc>
    <FName>Imagick::contrastStretchImage</FName>
    <Desc>bool Imagick::contrastStretchImage ( float $black_point , float $white_point [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::convolveImage</FName>
    <Desc>bool Imagick::convolveImage ( array $kernel [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Applies a custom convolution kernel to the image.
</Desc>
    <FName>Imagick::count</FName>
    <Desc>public int Imagick::count ([ int $mode = 0 ] )
Returns the number of images.
</Desc>
    <FName>Imagick::cropImage</FName>
    <Desc>bool Imagick::cropImage ( int $width , int $height , int $x , int $y )
Extracts a region of the image.
</Desc>
    <FName>Imagick::cropThumbnailImage</FName>
    <Desc>bool Imagick::cropThumbnailImage ( int $width , int $height [, bool $legacy = FALSE ] )
Creates a fixed size thumbnail by first scaling the image up or down and cropping a specified area from the center.
</Desc>
    <FName>Imagick::current</FName>
    <Desc>Imagick Imagick::current ( void )
Returns reference to the current imagick object with image pointer at the correct sequence.
</Desc>
    <FName>Imagick::cycleColormapImage</FName>
    <Desc>bool Imagick::cycleColormapImage ( int $displace )
Displaces an image's colormap by a given number of positions. If you cycle the colormap a number of times you can produce a psychedelic effect.
</Desc>
    <FName>Imagick::decipherImage</FName>
    <Desc>bool Imagick::decipherImage ( string $passphrase )
Deciphers image that has been enciphered before. The image must be enciphered using Imagick::encipherImage(). This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.
</Desc>
    <FName>Imagick::deconstructImages</FName>
    <Desc>Imagick Imagick::deconstructImages ( void )
Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences it discovers.
</Desc>
    <FName>Imagick::deleteImageArtifact</FName>
    <Desc>bool Imagick::deleteImageArtifact ( string $artifact )
Deletes an artifact associated with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.
</Desc>
    <FName>Imagick::deleteImageProperty</FName>
    <Desc>public bool Imagick::deleteImageProperty ( string $name )
Deletes an image property.
</Desc>
    <FName>Imagick::deskewImage</FName>
    <Desc>public bool Imagick::deskewImage ( float $threshold )
This method can be used to remove skew from for example scanned images where the paper was not properly placed on the scanning surface. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.
</Desc>
    <FName>Imagick::despeckleImage</FName>
    <Desc>bool Imagick::despeckleImage ( void )
Reduces the speckle noise in an image while preserving the edges of the original image.
</Desc>
    <FName>Imagick::destroy</FName>
    <Desc>bool Imagick::destroy ( void )
Destroys the Imagick object and frees all resources associated with it. This method is deprecated in favour of Imagick::clear.
</Desc>
    <FName>Imagick::displayImage</FName>
    <Desc>bool Imagick::displayImage ( string $servername )
This method displays an image on a X server.
</Desc>
    <FName>Imagick::displayImages</FName>
    <Desc>bool Imagick::displayImages ( string $servername )
Displays an image or image sequence on a X server.
</Desc>
    <FName>Imagick::distortImage</FName>
    <Desc>bool Imagick::distortImage ( int $method , array $arguments , bool $bestfit )
Distorts an image using various distortion methods, by mapping color lookups of the source image to a new destination image usually of the same size as the source image, unless 'bestfit' is set to TRUE. 
If 'bestfit' is enabled, and distortion allows it, the destination image is adjusted to ensure the whole source 'image' will just fit within the final destination image, which will be sized and offset accordingly. Also in many cases the virtual offset of the source image will be taken into account in the mapping. 
This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.
</Desc>
    <FName>Imagick::drawImage</FName>
    <Desc>bool Imagick::drawImage ( ImagickDraw $draw )
Renders the ImagickDraw object on the current image.
</Desc>
    <FName>Imagick::edgeImage</FName>
    <Desc>bool Imagick::edgeImage ( float $radius )
Enhance edges within the image with a convolution filter of the given radius. Use radius 0 and it will be auto-selected.
</Desc>
    <FName>Imagick::embossImage</FName>
    <Desc>bool Imagick::embossImage ( float $radius , float $sigma )
Returns a grayscale image with a three-dimensional effect. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and it will choose a suitable radius for you.
</Desc>
    <FName>Imagick::encipherImage</FName>
    <Desc>bool Imagick::encipherImage ( string $passphrase )
Converts plain pixels to enciphered pixels. The image is not readable until it has been deciphered using Imagick::decipherImage() This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.
</Desc>
    <FName>Imagick::enhanceImage</FName>
    <Desc>bool Imagick::enhanceImage ( void )
Applies a digital filter that improves the quality of a noisy image.
</Desc>
    <FName>Imagick::equalizeImage</FName>
    <Desc>bool Imagick::equalizeImage ( void )
Equalizes the image histogram.
</Desc>
    <FName>Imagick::evaluateImage</FName>
    <Desc>bool Imagick::evaluateImage ( int $op , float $constant [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Applys an arithmetic, relational, or logical expression to an image. Use these operators to lighten or darken an image, to increase or decrease contrast in an image, or to produce the "negative" of an image.
</Desc>
    <FName>Imagick::exportImagePixels</FName>
    <Desc>public array Imagick::exportImagePixels ( int $x , int $y , int $width , int $height , string $map , int $STORAGE )
Exports image pixels into an array. The map defines the ordering of the exported pixels. The size of the returned array is width * height * strlen(map). This method is available if Imagick has been compiled against ImageMagick version 6.4.7 or newer.
</Desc>
    <FName>Imagick::extentImage</FName>
    <Desc>bool Imagick::extentImage ( int $width , int $height , int $x , int $y )
Comfortability method for setting image size. The method sets the image size and allows setting x,y coordinates where the new area begins. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer. 
Caution 
Prior to ImageMagick 6.5.7-8 (1623), $x was positive when shifting to the left and negative when shifting to the right, and $y was positive when shifting an image up and negative when shifting an image down. Somewhere betwen ImageMagick 6.3.7 (1591) and ImageMagick 6.5.7-8 (1623), the axes of $x and $y were flipped, so that $x was negative when shifting to the left and positive when shifting to the right, and $y was negative when shifting an image up and positive when shifting an image down. Somewhere between ImageMagick 6.5.7-8 (1623) and ImageMagick 6.6.9-7 (1641), the axes of $x and $y were flipped back to pre-ImageMagick 6.5.7-8 (1623) functionality.
</Desc>
    <FName>Imagick::filter</FName>
    <Desc>public bool Imagick::filter ( ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_UNDEFINED ] )
Applies a custom convolution kernel to the image.
</Desc>
    <FName>Imagick::flattenImages</FName>
    <Desc>Imagick Imagick::flattenImages ( void )
Merges a sequence of images. This is useful for combining Photoshop layers into a single image.
</Desc>
    <FName>Imagick::flipImage</FName>
    <Desc>bool Imagick::flipImage ( void )
Creates a vertical mirror image by reflecting the pixels around the central x-axis.
</Desc>
    <FName>Imagick::floodFillPaintImage</FName>
    <Desc>bool Imagick::floodFillPaintImage ( mixed $fill , float $fuzz , mixed $target , int $x , int $y , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Changes the color value of any pixel that matches target and is an immediate neighbor. This method is a replacement for deprecated Imagick::paintFloodFillImage(). This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.
</Desc>
    <FName>Imagick::flopImage</FName>
    <Desc>bool Imagick::flopImage ( void )
Creates a horizontal mirror image by reflecting the pixels around the central y-axis.
</Desc>
    <FName>Imagick::forwardFourierTransformImage</FName>
    <Desc>public bool Imagick::forwardFourierTransformimage ( bool $magnitude )
Implements the discrete Fourier transform (DFT) of the image either as a magnitude / phase or real / imaginary image pair.
</Desc>
    <FName>Imagick::frameImage</FName>
    <Desc>bool Imagick::frameImage ( mixed $matte_color , int $width , int $height , int $inner_bevel , int $outer_bevel )
Adds a simulated three-dimensional border around the image. The width and height specify the border width of the vertical and horizontal sides of the frame. The inner and outer bevels indicate the width of the inner and outer shadows of the frame.
</Desc>
    <FName>Imagick::functionImage</FName>
    <Desc>public bool Imagick::functionImage ( int $function , array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Applies an arithmetic, relational, or logical expression to a pseudo image. 
See also » ImageMagick v6
</Desc>
    <FName>Imagick::fxImage</FName>
    <Desc>Imagick Imagick::fxImage ( string $expression [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Evaluate expression for each pixel in the image. Consult » The Fx Special Effects Image Operator for more information.
</Desc>
    <FName>Imagick::gammaImage</FName>
    <Desc>bool Imagick::gammaImage ( float $gamma [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Gamma-corrects an image. The same image viewed on different devices will have perceptual differences in the way the image's intensities are represented on the screen. Specify individual gamma levels for the red, green, and blue channels, or adjust all three with the gamma parameter. Values typically range from 0.8 to 2.3.
</Desc>
    <FName>Imagick::gaussianBlurImage</FName>
    <Desc>bool Imagick::gaussianBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Blurs an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, the radius should be larger than sigma. Use a radius of 0 and selects a suitable radius for you.
</Desc>
    <FName>Imagick::getColorspace</FName>
    <Desc>int Imagick::getColorspace ( void )
Gets the global colorspace value. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.
</Desc>
    <FName>Imagick::getCompression</FName>
    <Desc>int Imagick::getCompression ( void )
Gets the object compression type.
</Desc>
    <FName>Imagick::getCompressionQuality</FName>
    <Desc>int Imagick::getCompressionQuality ( void )
Gets the object compression quality.
</Desc>
    <FName>Imagick::getCopyright</FName>
    <Desc>string Imagick::getCopyright ( void )
Returns the ImageMagick API copyright as a string.
</Desc>
    <FName>Imagick::getFilename</FName>
    <Desc>string Imagick::getFilename ( void )
Returns the filename associated with an image sequence.
</Desc>
    <FName>Imagick::getFont</FName>
    <Desc>string Imagick::getFont ( void )
Returns the objects font property. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.
</Desc>
    <FName>Imagick::getFormat</FName>
    <Desc>string Imagick::getFormat ( void )
Returns the format of the Imagick object.
</Desc>
    <FName>Imagick::getGravity</FName>
    <Desc>int Imagick::getGravity ( void )
Gets the global gravity property for the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.
</Desc>
    <FName>Imagick::getHomeURL</FName>
    <Desc>string Imagick::getHomeURL ( void )
Returns the ImageMagick home URL.
</Desc>
    <FName>Imagick::getImage</FName>
    <Desc>Imagick Imagick::getImage ( void )
Returns a new Imagick object with the current image sequence.
</Desc>
    <FName>Imagick::getImageAlphaChannel</FName>
    <Desc>int Imagick::getImageAlphaChannel ( void )
Gets the image alpha channel value. The returned value is one of the alpha channel constants. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.
</Desc>
    <FName>Imagick::getImageArtifact</FName>
    <Desc>string Imagick::getImageArtifact ( string $artifact )
Gets an artifact associated with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.
</Desc>
    <FName>Imagick::getImageAttribute</FName>
    <Desc>public string Imagick::getImageAttribute ( string $key )
Returns a named attribute.
</Desc>
    <FName>Imagick::getImageBackgroundColor</FName>
    <Desc>ImagickPixel Imagick::getImageBackgroundColor ( void )
Returns the image background color.
</Desc>
    <FName>Imagick::getImageBlob</FName>
    <Desc>string Imagick::getImageBlob ( void )
Implements direct to memory image formats. It returns the image sequence as a string. The format of the image determines the format of the returned blob (GIF, JPEG, PNG, etc.). To return a different image format, use Imagick::setImageFormat().
</Desc>
    <FName>Imagick::getImageBluePrimary</FName>
    <Desc>array Imagick::getImageBluePrimary ( void )
Returns the chromaticity blue primary point for the image.
</Desc>
    <FName>Imagick::getImageBorderColor</FName>
    <Desc>ImagickPixel Imagick::getImageBorderColor ( void )
Returns the image border color.
</Desc>
    <FName>Imagick::getImageChannelDepth</FName>
    <Desc>int Imagick::getImageChannelDepth ( int $channel )
Gets the depth for a particular image channel.
</Desc>
    <FName>Imagick::getImageChannelDistortion</FName>
    <Desc>float Imagick::getImageChannelDistortion ( Imagick $reference , int $channel , int $metric )
Compares one or more image channels of an image to a reconstructed image and returns the specified distortion metric.
</Desc>
    <FName>Imagick::getImageChannelDistortions</FName>
    <Desc>float Imagick::getImageChannelDistortions ( Imagick $reference , int $metric [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Compares one or more image channels of an image to a reconstructed image and returns the specified distortion metrics This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.
</Desc>
    <FName>Imagick::getImageChannelExtrema</FName>
    <Desc>array Imagick::getImageChannelExtrema ( int $channel )
Gets the extrema for one or more image channels. Return value is an associative array with the keys "minima" and "maxima".
</Desc>
    <FName>Imagick::getImageChannelKurtosis</FName>
    <Desc>public array Imagick::getImageChannelKurtosis ([ int $channel = Imagick::CHANNEL_DEFAULT ] )
Get the kurtosis and skewness of a specific channel. This method is available if Imagick has been compiled against ImageMagick version 6.4.9 or newer.
</Desc>
    <FName>Imagick::getImageChannelMean</FName>
    <Desc>array Imagick::getImageChannelMean ( int $channel )
Gets the mean and standard deviation of one or more image channels. Return value is an associative array with the keys "mean" and "standardDeviation".
</Desc>
    <FName>Imagick::getImageChannelRange</FName>
    <Desc>array Imagick::getImageChannelRange ( int $channel )
Gets the range for one or more image channels. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.
</Desc>
    <FName>Imagick::getImageChannelStatistics</FName>
    <Desc>array Imagick::getImageChannelStatistics ( void )
Returns statistics for each channel in the image. The statistics include the channel depth, its minima and maxima, the mean, and the standard deviation. You can access the red channel mean, for example, like this:
</Desc>
    <FName>Imagick::getImageClipMask</FName>
    <Desc>Imagick Imagick::getImageClipMask ( void )
Returns the image clip mask. The clip mask is an Imagick object containing the clip mask. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.
</Desc>
    <FName>Imagick::getImageColormapColor</FName>
    <Desc>ImagickPixel Imagick::getImageColormapColor ( int $index )
Returns the color of the specified colormap index.
</Desc>
    <FName>Imagick::getImageColors</FName>
    <Desc>int Imagick::getImageColors ( void )
Gets the number of unique colors in the image.
</Desc>
    <FName>Imagick::getImageColorspace</FName>
    <Desc>int Imagick::getImageColorspace ( void )
Gets the image colorspace.
</Desc>
    <FName>Imagick::getImageCompose</FName>
    <Desc>int Imagick::getImageCompose ( void )
Returns the composite operator associated with the image.
</Desc>
    <FName>Imagick::getImageCompression</FName>
    <Desc>int Imagick::getImageCompression ( void )
Gets the current image's compression type.
</Desc>
    <FName>Imagick::getImageCompressionQuality</FName>
    <Desc>int Imagick::getImageCompressionQuality ( void )
Gets the current image's compression quality
</Desc>
    <FName>Imagick::getImageDelay</FName>
    <Desc>int Imagick::getImageDelay ( void )
Gets the image delay.
</Desc>
    <FName>Imagick::getImageDepth</FName>
    <Desc>int Imagick::getImageDepth ( void )
Gets the image depth.
</Desc>
    <FName>Imagick::getImageDispose</FName>
    <Desc>int Imagick::getImageDispose ( void )
Gets the image disposal method.
</Desc>
    <FName>Imagick::getImageDistortion</FName>
    <Desc>float Imagick::getImageDistortion ( MagickWand $reference , int $metric )
Compares an image to a reconstructed image and returns the specified distortion metric.
</Desc>
    <FName>Imagick::getImageExtrema</FName>
    <Desc>array Imagick::getImageExtrema ( void )
Gets the extrema for the image. Returns an associative array with the keys "min" and "max".
</Desc>
    <FName>Imagick::getImageFilename</FName>
    <Desc>string Imagick::getImageFilename ( void )
Returns the filename of a particular image in a sequence.
</Desc>
    <FName>Imagick::getImageFormat</FName>
    <Desc>string Imagick::getImageFormat ( void )
Returns the format of a particular image in a sequence.
</Desc>
    <FName>Imagick::getImageGamma</FName>
    <Desc>float Imagick::getImageGamma ( void )
Gets the image gamma.
</Desc>
    <FName>Imagick::getImageGeometry</FName>
    <Desc>array Imagick::getImageGeometry ( void )
Returns the width and height as an associative array.
</Desc>
    <FName>Imagick::getImageGravity</FName>
    <Desc>int Imagick::getImageGravity ( void )
Gets the current gravity value of the image. Unlike Imagick::getGravity(), this method returns the gravity defined for the current image sequence. This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.
</Desc>
    <FName>Imagick::getImageGreenPrimary</FName>
    <Desc>array Imagick::getImageGreenPrimary ( void )
Returns the chromaticity green primary point. Returns an array with the keys "x" and "y".
</Desc>
    <FName>Imagick::getImageHeight</FName>
    <Desc>int Imagick::getImageHeight ( void )
Returns the image height.
</Desc>
    <FName>Imagick::getImageHistogram</FName>
    <Desc>array Imagick::getImageHistogram ( void )
Returns the image histogram as an array of ImagickPixel objects.
</Desc>
    <FName>Imagick::getImageIndex</FName>
    <Desc>int Imagick::getImageIndex ( void )
Returns the index of the current active image within the Imagick object. This method has been deprecated. See Imagick::getIteratorIndex().
</Desc>
    <FName>Imagick::getImageInterlaceScheme</FName>
    <Desc>int Imagick::getImageInterlaceScheme ( void )
Gets the image interlace scheme.
</Desc>
    <FName>Imagick::getImageInterpolateMethod</FName>
    <Desc>int Imagick::getImageInterpolateMethod ( void )
Returns the interpolation method for the specified image. The method is one of the Imagick::INTERPOLATE_* constants.
</Desc>
    <FName>Imagick::getImageIterations</FName>
    <Desc>int Imagick::getImageIterations ( void )
Gets the image iterations.
</Desc>
    <FName>Imagick::getImageLength</FName>
    <Desc>int Imagick::getImageLength ( void )
Returns the image length in bytes
</Desc>
    <FName>Imagick::getImageMagickLicense</FName>
    <Desc>string Imagick::getImageMagickLicense ( void )
Returns a string containing the ImageMagick license
</Desc>
    <FName>Imagick::getImageMatte</FName>
    <Desc>bool Imagick::getImageMatte ( void )
Returns TRUE if the image has a matte channel otherwise false. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::getImageMatteColor</FName>
    <Desc>ImagickPixel Imagick::getImageMatteColor ( void )
Returns the image matte color.
</Desc>
    <FName>Imagick::getImageMimeType</FName>
    <Desc>public string Imagick::getImageMimeType ( void )
Returns the image mime-type.
</Desc>
    <FName>Imagick::getImageOrientation</FName>
    <Desc>int Imagick::getImageOrientation ( void )
Gets the image orientation. The return value is one of the orientation constants.
</Desc>
    <FName>Imagick::getImagePage</FName>
    <Desc>array Imagick::getImagePage ( void )
Returns the page geometry associated with the image in an array with the keys "width", "height", "x", and "y".
</Desc>
    <FName>Imagick::getImagePixelColor</FName>
    <Desc>ImagickPixel Imagick::getImagePixelColor ( int $x , int $y )
Returns the color of the specified pixel.
</Desc>
    <FName>Imagick::getImageProfile</FName>
    <Desc>string Imagick::getImageProfile ( string $name )
Returns the named image profile.
</Desc>
    <FName>Imagick::getImageProfiles</FName>
    <Desc>array Imagick::getImageProfiles ([ string $pattern = "*" [, bool $include_values = TRUE ]] )
Returns all associated profiles that match the pattern. If FALSE is passed as second parameter only the profile names are returned. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.
</Desc>
    <FName>Imagick::getImageProperties</FName>
    <Desc>array Imagick::getImageProperties ([ string $pattern = "*" [, bool $include_values = TRUE ]] )
Returns all associated properties that match the pattern. If FALSE is passed as second parameter only the property names are returned. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.
</Desc>
    <FName>Imagick::getImageProperty</FName>
    <Desc>string Imagick::getImageProperty ( string $name )
Returns the named image property. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.
</Desc>
    <FName>Imagick::getImageRedPrimary</FName>
    <Desc>array Imagick::getImageRedPrimary ( void )
Returns the chromaticity red primary point as an array with the keys "x" and "y".
</Desc>
    <FName>Imagick::getImageRegion</FName>
    <Desc>Imagick Imagick::getImageRegion ( int $width , int $height , int $x , int $y )
Extracts a region of the image and returns it as a new Imagick object.
</Desc>
    <FName>Imagick::getImageRenderingIntent</FName>
    <Desc>int Imagick::getImageRenderingIntent ( void )
Gets the image rendering intent.
</Desc>
    <FName>Imagick::getImageResolution</FName>
    <Desc>array Imagick::getImageResolution ( void )
Gets the image X and Y resolution.
</Desc>
    <FName>Imagick::getImagesBlob</FName>
    <Desc>string Imagick::getImagesBlob ( void )
Implements direct to memory image formats. It returns all image sequences as a string. The format of the image determines the format of the returned blob (GIF, JPEG, PNG, etc.). To return a different image format, use Imagick::setImageFormat().
</Desc>
    <FName>Imagick::getImageScene</FName>
    <Desc>int Imagick::getImageScene ( void )
Gets the image scene.
</Desc>
    <FName>Imagick::getImageSignature</FName>
    <Desc>string Imagick::getImageSignature ( void )
Generates an SHA-256 message digest for the image pixel stream.
</Desc>
    <FName>Imagick::getImageSize</FName>
    <Desc>int Imagick::getImageSize ( void )
Returns the image length in bytes. Deprecated in favour of Imagick::getImageLength()
</Desc>
    <FName>Imagick::getImageTicksPerSecond</FName>
    <Desc>int Imagick::getImageTicksPerSecond ( void )
Gets the image ticks-per-second.
</Desc>
    <FName>Imagick::getImageTotalInkDensity</FName>
    <Desc>float Imagick::getImageTotalInkDensity ( void )
Gets the image total ink density.
</Desc>
    <FName>Imagick::getImageType</FName>
    <Desc>int Imagick::getImageType ( void )
Gets the potential image type.
</Desc>
    <FName>Imagick::getImageUnits</FName>
    <Desc>int Imagick::getImageUnits ( void )
Gets the image units of resolution.
</Desc>
    <FName>Imagick::getImageVirtualPixelMethod</FName>
    <Desc>int Imagick::getImageVirtualPixelMethod ( void )
Returns the virtual pixel method for the specified image.
</Desc>
    <FName>Imagick::getImageWhitePoint</FName>
    <Desc>array Imagick::getImageWhitePoint ( void )
Returns the chromaticity white point as an associative array with the keys "x" and "y".
</Desc>
    <FName>Imagick::getImageWidth</FName>
    <Desc>int Imagick::getImageWidth ( void )
Returns the image width.
</Desc>
    <FName>Imagick::getInterlaceScheme</FName>
    <Desc>int Imagick::getInterlaceScheme ( void )
Gets the object interlace scheme.
</Desc>
    <FName>Imagick::getIteratorIndex</FName>
    <Desc>int Imagick::getIteratorIndex ( void )
Returns the index of the current active image within the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::getNumberImages</FName>
    <Desc>int Imagick::getNumberImages ( void )
Returns the number of images associated with Imagick object.
</Desc>
    <FName>Imagick::getOption</FName>
    <Desc>string Imagick::getOption ( string $key )
Returns a value associated within the object for the specified key.
</Desc>
    <FName>Imagick::getPackageName</FName>
    <Desc>string Imagick::getPackageName ( void )
Returns the ImageMagick package name.
</Desc>
    <FName>Imagick::getPage</FName>
    <Desc>array Imagick::getPage ( void )
Returns the page geometry associated with the Imagick object in an associative array with the keys "width", "height", "x", and "y".
</Desc>
    <FName>Imagick::getPixelIterator</FName>
    <Desc>ImagickPixelIterator Imagick::getPixelIterator ( void )
Returns a MagickPixelIterator.
</Desc>
    <FName>Imagick::getPixelRegionIterator</FName>
    <Desc>ImagickPixelIterator Imagick::getPixelRegionIterator ( int $x , int $y , int $columns , int $rows )
Get an ImagickPixelIterator for an image section.
</Desc>
    <FName>Imagick::getPointSize</FName>
    <Desc>float Imagick::getPointSize ( void )
Returns the objects point size property. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.
</Desc>
    <FName>Imagick::getQuantum</FName>
    <Desc>public static int Imagick::getQuantum ( void )
Returns the ImageMagick quantum range as an integer.
</Desc>
    <FName>Imagick::getQuantumDepth</FName>
    <Desc>array Imagick::getQuantumDepth ( void )
Returns the Imagick quantum depth as a string.
</Desc>
    <FName>Imagick::getQuantumRange</FName>
    <Desc>array Imagick::getQuantumRange ( void )
Returns the quantum range for the Imagick instance.
</Desc>
    <FName>Imagick::getRegistry</FName>
    <Desc>public static string Imagick::getRegistry ( string $key )
Get the StringRegistry entry for the named key or false if not set.
</Desc>
    <FName>Imagick::getReleaseDate</FName>
    <Desc>string Imagick::getReleaseDate ( void )
Returns the ImageMagick release date as a string.
</Desc>
    <FName>Imagick::getResource</FName>
    <Desc>int Imagick::getResource ( int $type )
Returns the specified resource's memory usage in megabytes.
</Desc>
    <FName>Imagick::getResourceLimit</FName>
    <Desc>int Imagick::getResourceLimit ( int $type )
Returns the specified resource limit.
</Desc>
    <FName>Imagick::getSamplingFactors</FName>
    <Desc>array Imagick::getSamplingFactors ( void )
Gets the horizontal and vertical sampling factor.
</Desc>
    <FName>Imagick::getSize</FName>
    <Desc>array Imagick::getSize ( void )
Get the size in pixels associated with the Imagick object, previously set by Imagick::setSize(). 
Note: 
This method just returns the size that was set using Imagick::setSize(). If you want to get the actual width / height of the image, use Imagick::getImageWidth() and Imagick::getImageHeight().
</Desc>
    <FName>Imagick::getSizeOffset</FName>
    <Desc>int Imagick::getSizeOffset ( void )
Returns the size offset associated with the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::getVersion</FName>
    <Desc>array Imagick::getVersion ( void )
Returns the ImageMagick API version as a string and as a number.
</Desc>
    <FName>Imagick::haldClutImage</FName>
    <Desc>public bool Imagick::haldClutImage ( Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Replaces colors in the image using a Hald lookup table. Hald images can be created using HALD color coder.
</Desc>
    <FName>Imagick::hasNextImage</FName>
    <Desc>bool Imagick::hasNextImage ( void )
Returns TRUE if the object has more images when traversing the list in the forward direction.
</Desc>
    <FName>Imagick::hasPreviousImage</FName>
    <Desc>bool Imagick::hasPreviousImage ( void )
Returns TRUE if the object has more images when traversing the list in the reverse direction
</Desc>
    <FName>Imagick::identifyFormat</FName>
    <Desc>public string Imagick::identifyFormat ( string $embedText )
Replaces any embedded formatting characters with the appropriate image property and returns the interpreted text. See http://www.imagemagick.org/script/escape.php for escape sequences.
</Desc>
    <FName>Imagick::identifyImage</FName>
    <Desc>array Imagick::identifyImage ([ bool $appendRawOutput = FALSE ] )
Identifies an image and returns the attributes. Attributes include the image width, height, size, and others.
</Desc>
    <FName>Imagick::implodeImage</FName>
    <Desc>bool Imagick::implodeImage ( float $radius )
Creates a new image that is a copy of an existing one with the image pixels "imploded" by the specified percentage.
</Desc>
    <FName>Imagick::importImagePixels</FName>
    <Desc>public bool Imagick::importImagePixels ( int $x , int $y , int $width , int $height , string $map , int $storage , array $pixels )
Imports pixels from an array into an image. The map is usually 'RGB'. This method imposes the following constraints for the parameters: amount of pixels in the array must match width x height x length of the map. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.
</Desc>
    <FName>Imagick::inverseFourierTransformImage</FName>
    <Desc>public bool Imagick::inverseFourierTransformImage ( Imagick $complement , bool $magnitude )
Implements the inverse discrete Fourier transform (DFT) of the image either as a magnitude / phase or real / imaginary image pair. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Imagick::labelImage</FName>
    <Desc>bool Imagick::labelImage ( string $label )
Adds a label to an image.
</Desc>
    <FName>Imagick::levelImage</FName>
    <Desc>bool Imagick::levelImage ( float $blackPoint , float $gamma , float $whitePoint [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Adjusts the levels of an image by scaling the colors falling between specified white and black points to the full available quantum range. The parameters provided represent the black, mid, and white points. The black point specifies the darkest color in the image. Colors darker than the black point are set to zero. Mid point specifies a gamma correction to apply to the image. White point specifies the lightest color in the image. Colors brighter than the white point are set to the maximum quantum value.
</Desc>
    <FName>Imagick::linearStretchImage</FName>
    <Desc>bool Imagick::linearStretchImage ( float $blackPoint , float $whitePoint )
Stretches with saturation the image intensity.
</Desc>
    <FName>Imagick::liquidRescaleImage</FName>
    <Desc>bool Imagick::liquidRescaleImage ( int $width , int $height , float $delta_x , float $rigidity )
This method scales the images using liquid rescaling method. This method is an implementation of a technique called seam carving. In order for this method to work as expected ImageMagick must be compiled with liblqr support. This method is available if Imagick has been compiled against ImageMagick version 6.3.9 or newer.
</Desc>
    <FName>Imagick::listRegistry</FName>
    <Desc>public static array Imagick::listRegistry ( void )
List all the registry settings. Returns an array of all the key/value pairs in the registry
</Desc>
    <FName>Imagick::magnifyImage</FName>
    <Desc>bool Imagick::magnifyImage ( void )
Is a convenience method that scales an image proportionally to twice its original size.
</Desc>
    <FName>Imagick::mapImage</FName>
    <Desc>bool Imagick::mapImage ( Imagick $map , bool $dither )
</Desc>
    <FName>Imagick::matteFloodfillImage</FName>
    <Desc>bool Imagick::matteFloodfillImage ( float $alpha , float $fuzz , mixed $bordercolor , int $x , int $y )
Changes the transparency value of any pixel that matches target and is an immediate neighbor. If the method FillToBorderMethod is specified, the transparency value is changed for any neighbor pixel that does not match the bordercolor member of image.
</Desc>
    <FName>Imagick::medianFilterImage</FName>
    <Desc>bool Imagick::medianFilterImage ( float $radius )
Applies a digital filter that improves the quality of a noisy image. Each pixel is replaced by the median in a set of neighboring pixels as defined by radius.
</Desc>
    <FName>Imagick::mergeImageLayers</FName>
    <Desc>Imagick Imagick::mergeImageLayers ( int $layer_method )
Merges image layers into one. This method is useful when working with image formats that use multiple layers such as PSD. The merging is controlled using the layer_method which defines how the layers are merged. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.
</Desc>
    <FName>Imagick::minifyImage</FName>
    <Desc>bool Imagick::minifyImage ( void )
Is a convenience method that scales an image proportionally to one-half its original size
</Desc>
    <FName>Imagick::modulateImage</FName>
    <Desc>bool Imagick::modulateImage ( float $brightness , float $saturation , float $hue )
Lets you control the brightness, saturation, and hue of an image. Hue is the percentage of absolute rotation from the current position. For example 50 results in a counter-clockwise rotation of 90 degrees, 150 results in a clockwise rotation of 90 degrees, with 0 and 200 both resulting in a rotation of 180 degrees.
</Desc>
    <FName>Imagick::montageImage</FName>
    <Desc>Imagick Imagick::montageImage ( ImagickDraw $draw , string $tile_geometry , string $thumbnail_geometry , int $mode , string $frame )
Creates a composite image by combining several separate images. The images are tiled on the composite image with the name of the image optionally appearing just below the individual tile.
</Desc>
    <FName>Imagick::morphImages</FName>
    <Desc>Imagick Imagick::morphImages ( int $number_frames )
Method morphs a set of images. Both the image pixels and size are linearly interpolated to give the appearance of a meta-morphosis from one image to the next.
</Desc>
    <FName>Imagick::morphology</FName>
    <Desc>public bool Imagick::morphology ( int $morphologyMethod , int $iterations , ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Applies a user supplied kernel to the image according to the given morphology method.
</Desc>
    <FName>Imagick::mosaicImages</FName>
    <Desc>Imagick Imagick::mosaicImages ( void )
Inlays an image sequence to form a single coherent picture. It returns a wand with each image in the sequence composited at the location defined by the page offset of the image.
</Desc>
    <FName>Imagick::motionBlurImage</FName>
    <Desc>bool Imagick::motionBlurImage ( float $radius , float $sigma , float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Simulates motion blur. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and MotionBlurImage() selects a suitable radius for you. Angle gives the angle of the blurring motion.
</Desc>
    <FName>Imagick::negateImage</FName>
    <Desc>bool Imagick::negateImage ( bool $gray [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Negates the colors in the reference image. The Grayscale option means that only grayscale values within the image are negated.
</Desc>
    <FName>Imagick::newImage</FName>
    <Desc>bool Imagick::newImage ( int $cols , int $rows , mixed $background [, string $format ] )
Creates a new image and associates ImagickPixel value as background color
</Desc>
    <FName>Imagick::newPseudoImage</FName>
    <Desc>bool Imagick::newPseudoImage ( int $columns , int $rows , string $pseudoString )
Creates a new image using ImageMagick pseudo-formats.
</Desc>
    <FName>Imagick::nextImage</FName>
    <Desc>bool Imagick::nextImage ( void )
Associates the next image in the image list with an Imagick object.
</Desc>
    <FName>Imagick::normalizeImage</FName>
    <Desc>bool Imagick::normalizeImage ([ int $channel = Imagick::CHANNEL_DEFAULT ] )
Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available.
</Desc>
    <FName>Imagick::oilPaintImage</FName>
    <Desc>bool Imagick::oilPaintImage ( float $radius )
Applies a special effect filter that simulates an oil painting. Each pixel is replaced by the most frequent color occurring in a circular region defined by radius.
</Desc>
    <FName>Imagick::opaquePaintImage</FName>
    <Desc>bool Imagick::opaquePaintImage ( mixed $target , mixed $fill , float $fuzz , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Changes any pixel that matches color with the color defined by fill. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.
</Desc>
    <FName>Imagick::optimizeImageLayers</FName>
    <Desc>bool Imagick::optimizeImageLayers ( void )
Compares each image the GIF disposed forms of the previous image in the sequence. From this it attempts to select the smallest cropped image to replace each frame, while preserving the results of the animation. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::orderedPosterizeImage</FName>
    <Desc>bool Imagick::orderedPosterizeImage ( string $threshold_map [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Performs an ordered dither based on a number of pre-defined dithering threshold maps, but over multiple intensity levels, which can be different for different channels, according to the input arguments. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer.
</Desc>
    <FName>Imagick::paintFloodfillImage</FName>
    <Desc>bool Imagick::paintFloodfillImage ( mixed $fill , float $fuzz , mixed $bordercolor , int $x , int $y [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Changes the color value of any pixel that matches target and is an immediate neighbor. As of ImageMagick 6.3.8 this method has been deprecated and Imagick::floodfillPaintImage() should be used instead.
</Desc>
    <FName>Imagick::paintOpaqueImage</FName>
    <Desc>bool Imagick::paintOpaqueImage ( mixed $target , mixed $fill , float $fuzz [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Changes any pixel that matches color with the color defined by fill.
</Desc>
    <FName>Imagick::paintTransparentImage</FName>
    <Desc>bool Imagick::paintTransparentImage ( mixed $target , float $alpha , float $fuzz )
Changes any pixel that matches color with the color defined by fill.
</Desc>
    <FName>Imagick::pingImage</FName>
    <Desc>bool Imagick::pingImage ( string $filename )
This method can be used to query image width, height, size, and format without reading the whole image in to memory.
</Desc>
    <FName>Imagick::pingImageBlob</FName>
    <Desc>bool Imagick::pingImageBlob ( string $image )
This method can be used to query image width, height, size, and format without reading the whole image to memory. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::pingImageFile</FName>
    <Desc>bool Imagick::pingImageFile ( resource $filehandle [, string $fileName ] )
This method can be used to query image width, height, size, and format without reading the whole image to memory. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::polaroidImage</FName>
    <Desc>bool Imagick::polaroidImage ( ImagickDraw $properties , float $angle )
Simulates a Polaroid picture. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.
</Desc>
    <FName>Imagick::posterizeImage</FName>
    <Desc>bool Imagick::posterizeImage ( int $levels , bool $dither )
Reduces the image to a limited number of color level.
</Desc>
    <FName>Imagick::previewImages</FName>
    <Desc>bool Imagick::previewImages ( int $preview )
Tiles 9 thumbnails of the specified image with an image processing operation applied at varying strengths. This is helpful to quickly pin-point an appropriate parameter for an image processing operation.
</Desc>
    <FName>Imagick::previousImage</FName>
    <Desc>bool Imagick::previousImage ( void )
Assocates the previous image in an image list with the Imagick object.
</Desc>
    <FName>Imagick::profileImage</FName>
    <Desc>bool Imagick::profileImage ( string $name , string $profile )
Adds or removes a ICC, IPTC, or generic profile from an image. If the profile is NULL, it is removed from the image otherwise added. Use a name of '*' and a profile of NULL to remove all profiles from the image.
</Desc>
    <FName>Imagick::quantizeImage</FName>
    <Desc>bool Imagick::quantizeImage ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError )
</Desc>
    <FName>Imagick::quantizeImages</FName>
    <Desc>bool Imagick::quantizeImages ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError )
</Desc>
    <FName>Imagick::queryFontMetrics</FName>
    <Desc>array Imagick::queryFontMetrics ( ImagickDraw $properties , string $text [, bool $multiline ] )
Returns a multi-dimensional array representing the font metrics.
</Desc>
    <FName>Imagick::queryFonts</FName>
    <Desc>array Imagick::queryFonts ([ string $pattern = "*" ] )
Returns the configured fonts.
</Desc>
    <FName>Imagick::queryFormats</FName>
    <Desc>array Imagick::queryFormats ([ string $pattern = "*" ] )
Returns formats supported by Imagick.
</Desc>
    <FName>Imagick::radialBlurImage</FName>
    <Desc>bool Imagick::radialBlurImage ( float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Radial blurs an image.
</Desc>
    <FName>Imagick::raiseImage</FName>
    <Desc>bool Imagick::raiseImage ( int $width , int $height , int $x , int $y , bool $raise )
Creates a simulated three-dimensional button-like effect by lightening and darkening the edges of the image. Members width and height of raise_info define the width of the vertical and horizontal edge of the effect.
</Desc>
    <FName>Imagick::randomThresholdImage</FName>
    <Desc>bool Imagick::randomThresholdImage ( float $low , float $high [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Changes the value of individual pixels based on the intensity of each pixel compared to threshold. The result is a high-contrast, two color image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::readImage</FName>
    <Desc>bool Imagick::readImage ( string $filename )
Reads image from filename
</Desc>
    <FName>Imagick::readImageBlob</FName>
    <Desc>bool Imagick::readImageBlob ( string $image [, string $filename ] )
Reads image from a binary string
</Desc>
    <FName>Imagick::readImageFile</FName>
    <Desc>bool Imagick::readImageFile ( resource $filehandle [, string $fileName = NULL ] )
Reads image from open filehandle
</Desc>
    <FName>Imagick::readimages</FName>
    <Desc>public bool Imagick::readImages ( array $filenames )
Reads image from an array of filenames. All the images are held in a single Imagick object.
</Desc>
    <FName>Imagick::recolorImage</FName>
    <Desc>bool Imagick::recolorImage ( array $matrix )
Translate, scale, shear, or rotate image colors. This method supports variable sized matrices but normally 5x5 matrix is used for RGBA and 6x6 is used for CMYK. The last row should contain the normalized values. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.
</Desc>
    <FName>Imagick::reduceNoiseImage</FName>
    <Desc>bool Imagick::reduceNoiseImage ( float $radius )
Smooths the contours of an image while still preserving edge information. The algorithm works by replacing each pixel with its neighbor closest in value. A neighbor is defined by radius. Use a radius of 0 and Imagick::reduceNoiseImage() selects a suitable radius for you.
</Desc>
    <FName>Imagick::remapImage</FName>
    <Desc>public bool Imagick::remapImage ( Imagick $replacement , int $DITHER )
Replaces colors an image with those defined by replacement. The colors are replaced with the closest possible color. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.
</Desc>
    <FName>Imagick::removeImage</FName>
    <Desc>bool Imagick::removeImage ( void )
Removes an image from the image list.
</Desc>
    <FName>Imagick::removeImageProfile</FName>
    <Desc>string Imagick::removeImageProfile ( string $name )
Removes the named image profile and returns it.
</Desc>
    <FName>Imagick::render</FName>
    <Desc>bool Imagick::render ( void )
Renders all preceding drawing commands.
</Desc>
    <FName>Imagick::resampleImage</FName>
    <Desc>bool Imagick::resampleImage ( float $x_resolution , float $y_resolution , int $filter , float $blur )
Resample image to desired resolution.
</Desc>
    <FName>Imagick::resetImagePage</FName>
    <Desc>bool Imagick::resetImagePage ( string $page )
The page definition as a string. The string is in format WxH+x+y. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.
</Desc>
    <FName>Imagick::resizeImage</FName>
    <Desc>bool Imagick::resizeImage ( int $columns , int $rows , int $filter , float $blur [, bool $bestfit = FALSE [, bool $legacy = FALSE ]] )
Scales an image to the desired dimensions with a filter. 
Note: The behavior of the parameter bestfit changed in Imagick 3.0.0. Before this version given dimensions 400x400 an image of dimensions 200x150 would be left untouched. In Imagick 3.0.0 and later the image would be scaled up to size 400x300 as this is the "best fit" for the given dimensions. If bestfit parameter is used both width and height must be given.
</Desc>
    <FName>Imagick::rollImage</FName>
    <Desc>bool Imagick::rollImage ( int $x , int $y )
Offsets an image as defined by x and y.
</Desc>
    <FName>Imagick::rotateImage</FName>
    <Desc>bool Imagick::rotateImage ( mixed $background , float $degrees )
Rotates an image the specified number of degrees. Empty triangles left over from rotating the image are filled with the background color.
</Desc>
    <FName>Imagick::rotationalBlurImage</FName>
    <Desc>public bool Imagick::rotationalBlurImage ( float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Rotational blurs an image.
</Desc>
    <FName>Imagick::roundCorners</FName>
    <Desc>bool Imagick::roundCorners ( float $x_rounding , float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6 ]]] )
Rounds image corners. The first two parameters control the amount of rounding and the three last parameters can be used to fine-tune the rounding process. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::sampleImage</FName>
    <Desc>bool Imagick::sampleImage ( int $columns , int $rows )
Scales an image to the desired dimensions with pixel sampling. Unlike other scaling methods, this method does not introduce any additional color into the scaled image.
</Desc>
    <FName>Imagick::scaleImage</FName>
    <Desc>bool Imagick::scaleImage ( int $cols , int $rows [, bool $bestfit = FALSE [, bool $legacy = FALSE ]] )
Scales the size of an image to the given dimensions. The other parameter will be calculated if 0 is passed as either param. 
Note: The behavior of the parameter bestfit changed in Imagick 3.0.0. Before this version given dimensions 400x400 an image of dimensions 200x150 would be left untouched. In Imagick 3.0.0 and later the image would be scaled up to size 400x300 as this is the "best fit" for the given dimensions. If bestfit parameter is used both width and height must be given.
</Desc>
    <FName>Imagick::segmentImage</FName>
    <Desc>public bool Imagick::segmentImage ( int $COLORSPACE , float $cluster_threshold , float $smooth_threshold [, bool $verbose = FALSE ] )
Analyses the image and identifies units that are similar. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.
</Desc>
    <FName>Imagick::selectiveBlurImage</FName>
    <Desc>public bool Imagick::selectiveBlurImage ( float $radius , float $sigma , float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Selectively blur an image within a contrast threshold. It is similar to the unsharpen mask that sharpens everything with contrast above a certain threshold.
</Desc>
    <FName>Imagick::separateImageChannel</FName>
    <Desc>bool Imagick::separateImageChannel ( int $channel )
Separates a channel from the image and returns a grayscale image. A channel is a particular color component of each pixel in the image.
</Desc>
    <FName>Imagick::sepiaToneImage</FName>
    <Desc>bool Imagick::sepiaToneImage ( float $threshold )
Applies a special effect to the image, similar to the effect achieved in a photo darkroom by sepia toning. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the sepia toning. A threshold of 80 is a good starting point for a reasonable tone.
</Desc>
    <FName>Imagick::setBackgroundColor</FName>
    <Desc>bool Imagick::setBackgroundColor ( mixed $background )
Sets the object's default background color.
</Desc>
    <FName>Imagick::setColorspace</FName>
    <Desc>bool Imagick::setColorspace ( int $COLORSPACE )
Sets the global colorspace value for the object. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.
</Desc>
    <FName>Imagick::setCompression</FName>
    <Desc>bool Imagick::setCompression ( int $compression )
Sets the object's default compression type
</Desc>
    <FName>Imagick::setCompressionQuality</FName>
    <Desc>bool Imagick::setCompressionQuality ( int $quality )
Sets the object's default compression quality. 
Caution 
This method only works for new images e.g. those created through Imagick::newPseudoImage. For existing images you should use Imagick::setImageCompressionQuality().
</Desc>
    <FName>Imagick::setFilename</FName>
    <Desc>bool Imagick::setFilename ( string $filename )
Sets the filename before you read or write an image file.
</Desc>
    <FName>Imagick::setFirstIterator</FName>
    <Desc>bool Imagick::setFirstIterator ( void )
Sets the Imagick iterator to the first image.
</Desc>
    <FName>Imagick::setFont</FName>
    <Desc>bool Imagick::setFont ( string $font )
Sets object's font property. This method can be used for example to set font for caption: pseudo-format. The font needs to be configured in ImageMagick configuration or a file by the name of font must exist. This method should not be confused with ImagickDraw::setFont() which sets the font for a specific ImagickDraw object. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.
</Desc>
    <FName>Imagick::setFormat</FName>
    <Desc>bool Imagick::setFormat ( string $format )
Sets the format of the Imagick object.
</Desc>
    <FName>Imagick::setGravity</FName>
    <Desc>bool Imagick::setGravity ( int $gravity )
Sets the global gravity property for the Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.4.0 or newer.
</Desc>
    <FName>Imagick::setImage</FName>
    <Desc>bool Imagick::setImage ( Imagick $replace )
Replaces the current image sequence with the image from replace object.
</Desc>
    <FName>Imagick::setImageAlphaChannel</FName>
    <Desc>bool Imagick::setImageAlphaChannel ( int $mode )
Activate or deactivate image alpha channel. The mode is one of the Imagick::ALPHACHANNEL_* constants. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.
</Desc>
    <FName>Imagick::setImageArtifact</FName>
    <Desc>bool Imagick::setImageArtifact ( string $artifact , string $value )
Associates an artifact with the image. The difference between image properties and image artifacts is that properties are public and artifacts are private. This method is available if Imagick has been compiled against ImageMagick version 6.5.7 or newer.
</Desc>
    <FName>Imagick::setImageAttribute</FName>
    <Desc>public bool Imagick::setImageAttribute ( string $key , string $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Imagick::setImageBackgroundColor</FName>
    <Desc>bool Imagick::setImageBackgroundColor ( mixed $background )
Sets the image background color.
</Desc>
    <FName>Imagick::setImageBias</FName>
    <Desc>bool Imagick::setImageBias ( float $bias )
Sets the image bias for any method that convolves an image (e.g. Imagick::ConvolveImage()).
</Desc>
    <FName>Imagick::setImageBiasQuantum</FName>
    <Desc>public void Imagick::setImageBiasQuantum ( string $bias )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Imagick::setImageBluePrimary</FName>
    <Desc>bool Imagick::setImageBluePrimary ( float $x , float $y )
Sets the image chromaticity blue primary point.
</Desc>
    <FName>Imagick::setImageBorderColor</FName>
    <Desc>bool Imagick::setImageBorderColor ( mixed $border )
Sets the image border color.
</Desc>
    <FName>Imagick::setImageChannelDepth</FName>
    <Desc>bool Imagick::setImageChannelDepth ( int $channel , int $depth )
Sets the depth of a particular image channel.
</Desc>
    <FName>Imagick::setImageClipMask</FName>
    <Desc>bool Imagick::setImageClipMask ( Imagick $clip_mask )
Sets image clip mask from another Imagick object. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.
</Desc>
    <FName>Imagick::setImageColormapColor</FName>
    <Desc>bool Imagick::setImageColormapColor ( int $index , ImagickPixel $color )
Sets the color of the specified colormap index.
</Desc>
    <FName>Imagick::setImageColorspace</FName>
    <Desc>bool Imagick::setImageColorspace ( int $colorspace )
Sets the image colorspace. This method should be used when creating new images. To change the colorspace of an existing image, you should use Imagick::transformImageColorspace().
</Desc>
    <FName>Imagick::setImageCompose</FName>
    <Desc>bool Imagick::setImageCompose ( int $compose )
Sets the image composite operator, useful for specifying how to composite the image thumbnail when using the Imagick::montageImage() method.
</Desc>
    <FName>Imagick::setImageCompression</FName>
    <Desc>bool Imagick::setImageCompression ( int $compression )
</Desc>
    <FName>Imagick::setImageCompressionQuality</FName>
    <Desc>bool Imagick::setImageCompressionQuality ( int $quality )
Sets the image compression quality.
</Desc>
    <FName>Imagick::setImageDelay</FName>
    <Desc>bool Imagick::setImageDelay ( int $delay )
Sets the image delay. For an animated image this is the amount of time that this frame of the image should be displayed for, before displaying the next frame. 
The delay can be set individually for each frame in an image.
</Desc>
    <FName>Imagick::setImageDepth</FName>
    <Desc>bool Imagick::setImageDepth ( int $depth )
Sets the image depth.
</Desc>
    <FName>Imagick::setImageDispose</FName>
    <Desc>bool Imagick::setImageDispose ( int $dispose )
Sets the image disposal method.
</Desc>
    <FName>Imagick::setImageExtent</FName>
    <Desc>bool Imagick::setImageExtent ( int $columns , int $rows )
Sets the image size (i.e. columns & rows).
</Desc>
    <FName>Imagick::setImageFilename</FName>
    <Desc>bool Imagick::setImageFilename ( string $filename )
Sets the filename of a particular image in a sequence.
</Desc>
    <FName>Imagick::setImageFormat</FName>
    <Desc>bool Imagick::setImageFormat ( string $format )
Sets the format of a particular image in a sequence.
</Desc>
    <FName>Imagick::setImageGamma</FName>
    <Desc>bool Imagick::setImageGamma ( float $gamma )
Sets the image gamma.
</Desc>
    <FName>Imagick::setImageGravity</FName>
    <Desc>bool Imagick::setImageGravity ( int $gravity )
Sets the gravity property for the current image. This method can be used to set the gravity property for a single image sequence. This method is available if Imagick has been compiled against ImageMagick version 6.4.4 or newer.
</Desc>
    <FName>Imagick::setImageGreenPrimary</FName>
    <Desc>bool Imagick::setImageGreenPrimary ( float $x , float $y )
Sets the image chromaticity green primary point.
</Desc>
    <FName>Imagick::setImageIndex</FName>
    <Desc>bool Imagick::setImageIndex ( int $index )
Set the iterator to the position in the image list specified with the index parameter. 
This method has been deprecated. See Imagick::setIteratorIndex().
</Desc>
    <FName>Imagick::setImageInterlaceScheme</FName>
    <Desc>bool Imagick::setImageInterlaceScheme ( int $interlace_scheme )
Sets the image compression.
</Desc>
    <FName>Imagick::setImageInterpolateMethod</FName>
    <Desc>bool Imagick::setImageInterpolateMethod ( int $method )
Sets the image interpolate pixel method.
</Desc>
    <FName>Imagick::setImageIterations</FName>
    <Desc>bool Imagick::setImageIterations ( int $iterations )
Sets the number of iterations an animated image is repeated.
</Desc>
    <FName>Imagick::setImageMatte</FName>
    <Desc>bool Imagick::setImageMatte ( bool $matte )
Sets the image matte channel. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::setImageMatteColor</FName>
    <Desc>bool Imagick::setImageMatteColor ( mixed $matte )
Sets the image matte color.
</Desc>
    <FName>Imagick::setImageOpacity</FName>
    <Desc>bool Imagick::setImageOpacity ( float $opacity )
Sets the image to the specified opacity level. This method is available if Imagick has been compiled against ImageMagick version 6.3.1 or newer. This method operates on all channels, which means that for example opacity value of 0.5 will set all transparent areas to partially opaque. To add transparency to areas that are not already transparent use Imagick::evaluateImage()
</Desc>
    <FName>Imagick::setImageOrientation</FName>
    <Desc>bool Imagick::setImageOrientation ( int $orientation )
Sets the image orientation.
</Desc>
    <FName>Imagick::setImagePage</FName>
    <Desc>bool Imagick::setImagePage ( int $width , int $height , int $x , int $y )
Sets the page geometry of the image.
</Desc>
    <FName>Imagick::setImageProfile</FName>
    <Desc>bool Imagick::setImageProfile ( string $name , string $profile )
Adds a named profile to the Imagick object. If a profile with the same name already exists, it is replaced. This method differs from the Imagick::ProfileImage() method in that it does not apply any CMS color profiles.
</Desc>
    <FName>Imagick::setImageProperty</FName>
    <Desc>bool Imagick::setImageProperty ( string $name , string $value )
Sets a named property to the image. This method is available if Imagick has been compiled against ImageMagick version 6.3.2 or newer.
</Desc>
    <FName>Imagick::setImageRedPrimary</FName>
    <Desc>bool Imagick::setImageRedPrimary ( float $x , float $y )
Sets the image chromaticity red primary point.
</Desc>
    <FName>Imagick::setImageRenderingIntent</FName>
    <Desc>bool Imagick::setImageRenderingIntent ( int $rendering_intent )
Sets the image rendering intent.
</Desc>
    <FName>Imagick::setImageResolution</FName>
    <Desc>bool Imagick::setImageResolution ( float $x_resolution , float $y_resolution )
Sets the image resolution.
</Desc>
    <FName>Imagick::setImageScene</FName>
    <Desc>bool Imagick::setImageScene ( int $scene )
Sets the image scene.
</Desc>
    <FName>Imagick::setImageTicksPerSecond</FName>
    <Desc>bool Imagick::setImageTicksPerSecond ( int $ticks_per_second )
Adjust the amount of time that a frame of an animated image is displayed for. 
Note: 
For animated GIFs, this function does not change the number of 'image ticks' per second, which is always defined as 100. Instead it adjusts the amount of time that the frame is displayed for to simulate the change in 'ticks per second'. 
For example, for an animated GIF where each frame is displayed for 20 ticks (1/5 of a second) when this method is called on each frame of that image with an argument of 50 the frames are adjusted to be displayed for 40 ticks (2/5 of a second) and the animation will play at half the original speed.
</Desc>
    <FName>Imagick::setImageType</FName>
    <Desc>bool Imagick::setImageType ( int $image_type )
Sets the image type.
</Desc>
    <FName>Imagick::setImageUnits</FName>
    <Desc>bool Imagick::setImageUnits ( int $units )
Sets the image units of resolution.
</Desc>
    <FName>Imagick::setImageVirtualPixelMethod</FName>
    <Desc>bool Imagick::setImageVirtualPixelMethod ( int $method )
Sets the image virtual pixel method.
</Desc>
    <FName>Imagick::setImageWhitePoint</FName>
    <Desc>bool Imagick::setImageWhitePoint ( float $x , float $y )
Sets the image chromaticity white point.
</Desc>
    <FName>Imagick::setInterlaceScheme</FName>
    <Desc>bool Imagick::setInterlaceScheme ( int $interlace_scheme )
Sets the image compression.
</Desc>
    <FName>Imagick::setIteratorIndex</FName>
    <Desc>bool Imagick::setIteratorIndex ( int $index )
Set the iterator to the position in the image list specified with the index parameter. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::setLastIterator</FName>
    <Desc>bool Imagick::setLastIterator ( void )
Sets the Imagick iterator to the last image.
</Desc>
    <FName>Imagick::setOption</FName>
    <Desc>bool Imagick::setOption ( string $key , string $value )
Associates one or more options with the wand.
</Desc>
    <FName>Imagick::setPage</FName>
    <Desc>bool Imagick::setPage ( int $width , int $height , int $x , int $y )
Sets the page geometry of the Imagick object.
</Desc>
    <FName>Imagick::setPointSize</FName>
    <Desc>bool Imagick::setPointSize ( float $point_size )
Sets object's point size property. This method can be used for example to set font size for caption: pseudo-format. This method is available if Imagick has been compiled against ImageMagick version 6.3.7 or newer.
</Desc>
    <FName>Imagick::setProgressMonitor</FName>
    <Desc>public bool Imagick::setProgressMonitor ( callable $callback )
Set a callback that will be called during the processing of the Imagick image.
</Desc>
    <FName>Imagick::setRegistry</FName>
    <Desc>public static bool Imagick::setRegistry ( string $key , string $value )
Sets the ImageMagick registry entry named key to value. This is most useful for setting "temporary-path" which controls where ImageMagick creates temporary images e.g. while processing PDFs.
</Desc>
    <FName>Imagick::setResolution</FName>
    <Desc>bool Imagick::setResolution ( float $x_resolution , float $y_resolution )
Sets the image resolution.
</Desc>
    <FName>Imagick::setResourceLimit</FName>
    <Desc>bool Imagick::setResourceLimit ( int $type , int $limit )
This method is used to modify the resource limits of the underlying ImageMagick library.
</Desc>
    <FName>Imagick::setSamplingFactors</FName>
    <Desc>bool Imagick::setSamplingFactors ( array $factors )
Sets the image sampling factors.
</Desc>
    <FName>Imagick::setSize</FName>
    <Desc>bool Imagick::setSize ( int $columns , int $rows )
Sets the size of the Imagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK.
</Desc>
    <FName>Imagick::setSizeOffset</FName>
    <Desc>bool Imagick::setSizeOffset ( int $columns , int $rows , int $offset )
Sets the size and offset of the Imagick object. Set it before you read a raw image format such as RGB, GRAY, or CMYK. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::setType</FName>
    <Desc>bool Imagick::setType ( int $image_type )
Sets the image type attribute.
</Desc>
    <FName>Imagick::shadeImage</FName>
    <Desc>bool Imagick::shadeImage ( bool $gray , float $azimuth , float $elevation )
Shines a distant light on an image to create a three-dimensional effect. You control the positioning of the light with azimuth and elevation; azimuth is measured in degrees off the x axis and elevation is measured in pixels above the Z axis. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::shadowImage</FName>
    <Desc>bool Imagick::shadowImage ( float $opacity , float $sigma , int $x , int $y )
Simulates an image shadow.
</Desc>
    <FName>Imagick::sharpenImage</FName>
    <Desc>bool Imagick::sharpenImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Sharpens an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, the radius should be larger than sigma. Use a radius of 0 and Imagick::sharpenImage() selects a suitable radius for you.
</Desc>
    <FName>Imagick::shaveImage</FName>
    <Desc>bool Imagick::shaveImage ( int $columns , int $rows )
Shaves pixels from the image edges. It allocates the memory necessary for the new Image structure and returns a pointer to the new image.
</Desc>
    <FName>Imagick::shearImage</FName>
    <Desc>bool Imagick::shearImage ( mixed $background , float $x_shear , float $y_shear )
Slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides an edge along the X axis, while a Y direction shear slides an edge along the Y axis. The amount of the shear is controlled by a shear angle. For X direction shears, x_shear is measured relative to the Y axis, and similarly, for Y direction shears y_shear is measured relative to the X axis. Empty triangles left over from shearing the image are filled with the background color.
</Desc>
    <FName>Imagick::sigmoidalContrastImage</FName>
    <Desc>bool Imagick::sigmoidalContrastImage ( bool $sharpen , float $alpha , float $beta [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Adjusts the contrast of an image with a non-linear sigmoidal contrast algorithm. Increase the contrast of the image using a sigmoidal transfer function without saturating highlights or shadows. Contrast indicates how much to increase the contrast (0 is none; 3 is typical; 20 is pushing it); mid-point indicates where midtones fall in the resultant image (0 is white; 50 is middle-gray; 100 is black). Set sharpen to TRUE to increase the image contrast otherwise the contrast is reduced. 
See also » ImageMagick v6
</Desc>
    <FName>Imagick::sketchImage</FName>
    <Desc>bool Imagick::sketchImage ( float $radius , float $sigma , float $angle )
Simulates a pencil sketch. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and Imagick::sketchImage() selects a suitable radius for you. Angle gives the angle of the blurring motion. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::smushImages</FName>
    <Desc>public Imagick Imagick::smushImages ( bool $stack , int $offset )
Takes all images from the current image pointer to the end of the image list and smushs them to each other top-to-bottom if the stack parameter is true, otherwise left-to-right.
</Desc>
    <FName>Imagick::solarizeImage</FName>
    <Desc>bool Imagick::solarizeImage ( int $threshold )
Applies a special effect to the image, similar to the effect achieved in a photo darkroom by selectively exposing areas of photo sensitive paper to light. Threshold ranges from 0 to QuantumRange and is a measure of the extent of the solarization.
</Desc>
    <FName>Imagick::sparseColorImage</FName>
    <Desc>public bool Imagick::sparseColorImage ( int $SPARSE_METHOD , array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Given the arguments array containing numeric values this method interpolates the colors found at those coordinates across the whole image using sparse_method. This method is available if Imagick has been compiled against ImageMagick version 6.4.5 or newer.
</Desc>
    <FName>Imagick::spliceImage</FName>
    <Desc>bool Imagick::spliceImage ( int $width , int $height , int $x , int $y )
Splices a solid color into the image.
</Desc>
    <FName>Imagick::spreadImage</FName>
    <Desc>bool Imagick::spreadImage ( float $radius )
Special effects method that randomly displaces each pixel in a block defined by the radius parameter.
</Desc>
    <FName>Imagick::statisticImage</FName>
    <Desc>public bool Imagick::statisticImage ( int $type , int $width , int $height [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Replace each pixel with corresponding statistic from the neighborhood of the specified width and height.
</Desc>
    <FName>Imagick::steganoImage</FName>
    <Desc>Imagick Imagick::steganoImage ( Imagick $watermark_wand , int $offset )
Hides a digital watermark within the image. Recover the hidden watermark later to prove that the authenticity of an image. Offset defines the start position within the image to hide the watermark.
</Desc>
    <FName>Imagick::stereoImage</FName>
    <Desc>bool Imagick::stereoImage ( Imagick $offset_wand )
Composites two images and produces a single image that is the composite of a left and right image of a stereo pair.
</Desc>
    <FName>Imagick::stripImage</FName>
    <Desc>bool Imagick::stripImage ( void )
Strips an image of all profiles and comments.
</Desc>
    <FName>Imagick::subImageMatch</FName>
    <Desc>public Imagick Imagick::subImageMatch ( Imagick $Imagick [, array &$offset [, float &$similarity ]] )
Searches for a subimage in the current image and returns a similarity image such that an exact match location is completely white and if none of the pixels match, black, otherwise some gray level in-between. You can also pass in the optional parameters bestMatch and similarity. After calling the function similarity will be set to the 'score' of the similarity between the subimage and the matching position in the larger image, bestMatch will contain an associative array with elements x, y, width, height that describe the matching region.
</Desc>
    <FName>Imagick::swirlImage</FName>
    <Desc>bool Imagick::swirlImage ( float $degrees )
Swirls the pixels about the center of the image, where degrees indicates the sweep of the arc through which each pixel is moved. You get a more dramatic effect as the degrees move from 1 to 360.
</Desc>
    <FName>Imagick::textureImage</FName>
    <Desc>Imagick Imagick::textureImage ( Imagick $texture_wand )
Repeatedly tiles the texture image across and down the image canvas.
</Desc>
    <FName>Imagick::thresholdImage</FName>
    <Desc>bool Imagick::thresholdImage ( float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Changes the value of individual pixels based on the intensity of each pixel compared to threshold. The result is a high-contrast, two color image.
</Desc>
    <FName>Imagick::thumbnailImage</FName>
    <Desc>bool Imagick::thumbnailImage ( int $columns , int $rows [, bool $bestfit = FALSE [, bool $fill = FALSE [, bool $legacy = FALSE ]]] )
Changes the size of an image to the given dimensions and removes any associated profiles. The goal is to produce small, low cost thumbnail images suited for display on the Web. If TRUE is given as a third parameter then columns and rows parameters are used as maximums for each side. Both sides will be scaled down until they match or are smaller than the parameter given for the side. 
Note: The behavior of the parameter bestfit changed in Imagick 3.0.0. Before this version given dimensions 400x400 an image of dimensions 200x150 would be left untouched. In Imagick 3.0.0 and later the image would be scaled up to size 400x300 as this is the "best fit" for the given dimensions. If bestfit parameter is used both width and height must be given.
</Desc>
    <FName>Imagick::tintImage</FName>
    <Desc>bool Imagick::tintImage ( mixed $tint , mixed $opacity [, bool $legacy = FALSE ] )
Applies a color vector to each pixel in the image. The length of the vector is 0 for black and white and at its maximum for the midtones. The vector weighing function is f(x)=(1-(4.0*((x-0.5)*(x-0.5)))).
</Desc>
    <FName>Imagick::__toString</FName>
    <Desc>string Imagick::__toString ( void )
Returns the current image as string. This will only return a single image; it should not be used for Imagick objects that contain multiple images e.g. an animated GIF or PDF with multiple pages.
</Desc>
    <FName>Imagick::transformImage</FName>
    <Desc>Imagick Imagick::transformImage ( string $crop , string $geometry )
A convenience method for setting crop size and the image geometry from strings. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::transformImageColorspace</FName>
    <Desc>bool Imagick::transformImageColorspace ( int $colorspace )
Transforms an image to a new colorspace.
</Desc>
    <FName>Imagick::transparentPaintImage</FName>
    <Desc>bool Imagick::transparentPaintImage ( mixed $target , float $alpha , float $fuzz , bool $invert )
Paints pixels matching the target color transparent. This method is available if Imagick has been compiled against ImageMagick version 6.3.8 or newer.
</Desc>
    <FName>Imagick::transposeImage</FName>
    <Desc>bool Imagick::transposeImage ( void )
Creates a vertical mirror image by reflecting the pixels around the central x-axis while rotating them 90-degrees. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::transverseImage</FName>
    <Desc>bool Imagick::transverseImage ( void )
Creates a horizontal mirror image by reflecting the pixels around the central y-axis while rotating them 270-degrees. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::trimImage</FName>
    <Desc>bool Imagick::trimImage ( float $fuzz )
Remove edges that are the background color from the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::uniqueImageColors</FName>
    <Desc>bool Imagick::uniqueImageColors ( void )
Discards all but one of any pixel color. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::unsharpMaskImage</FName>
    <Desc>bool Imagick::unsharpMaskImage ( float $radius , float $sigma , float $amount , float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT ] )
Sharpens an image. We convolve the image with a Gaussian operator of the given radius and standard deviation (sigma). For reasonable results, radius should be larger than sigma. Use a radius of 0 and Imagick::UnsharpMaskImage() selects a suitable radius for you.
</Desc>
    <FName>Imagick::valid</FName>
    <Desc>bool Imagick::valid ( void )
Checks if the current item is valid.
</Desc>
    <FName>Imagick::vignetteImage</FName>
    <Desc>bool Imagick::vignetteImage ( float $blackPoint , float $whitePoint , int $x , int $y )
Softens the edges of the image in vignette style. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::waveImage</FName>
    <Desc>bool Imagick::waveImage ( float $amplitude , float $length )
Applies a wave filter to the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
</Desc>
    <FName>Imagick::whiteThresholdImage</FName>
    <Desc>bool Imagick::whiteThresholdImage ( mixed $threshold )
Is like Imagick::ThresholdImage() but force all pixels above the threshold into white while leaving all pixels below the threshold unchanged.
</Desc>
    <FName>Imagick::writeImage</FName>
    <Desc>bool Imagick::writeImage ([ string $filename = NULL ] )
Writes an image to the specified filename. If the filename parameter is NULL, the image is written to the filename set by Imagick::readImage() or Imagick::setImageFilename().
</Desc>
    <FName>Imagick::writeImageFile</FName>
    <Desc>bool Imagick::writeImageFile ( resource $filehandle [, string $format ] )
Writes the image sequence to an open filehandle. The handle must be opened with for example fopen. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.
</Desc>
    <FName>Imagick::writeImages</FName>
    <Desc>bool Imagick::writeImages ( string $filename , bool $adjoin )
Writes an image or image sequence.
</Desc>
    <FName>Imagick::writeImagesFile</FName>
    <Desc>bool Imagick::writeImagesFile ( resource $filehandle [, string $format ] )
Writes all image frames into an open filehandle. This method can be used to write animated gifs or other multiframe images into open filehandle. This method is available if Imagick has been compiled against ImageMagick version 6.3.6 or newer.
</Desc>
    <FName>ImagickDraw::affine</FName>
    <Desc>bool ImagickDraw::affine ( array $affine )
Warning
This function is currently not documented; only its argument list is available. 
Adjusts the current affine transformation matrix with the specified affine transformation matrix.
</Desc>
    <FName>ImagickDraw::annotation</FName>
    <Desc>bool ImagickDraw::annotation ( float $x , float $y , string $text )
Warning
This function is currently not documented; only its argument list is available. 
Draws text on the image.
</Desc>
    <FName>ImagickDraw::arc</FName>
    <Desc>bool ImagickDraw::arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed )
Warning
This function is currently not documented; only its argument list is available. 
Draws an arc falling within a specified bounding rectangle on the image.
</Desc>
    <FName>ImagickDraw::bezier</FName>
    <Desc>bool ImagickDraw::bezier ( array $coordinates )
Warning
This function is currently not documented; only its argument list is available. 
Draws a bezier curve through a set of points on the image.
</Desc>
    <FName>ImagickDraw::circle</FName>
    <Desc>bool ImagickDraw::circle ( float $ox , float $oy , float $px , float $py )
Warning
This function is currently not documented; only its argument list is available. 
Draws a circle on the image.
</Desc>
    <FName>ImagickDraw::clear</FName>
    <Desc>bool ImagickDraw::clear ( void )
Warning
This function is currently not documented; only its argument list is available. 
Clears the ImagickDraw object of any accumulated commands, and resets the settings it contains to their defaults.
</Desc>
    <FName>ImagickDraw::clone</FName>
    <Desc>ImagickDraw ImagickDraw::clone ( void )
Warning
This function is currently not documented; only its argument list is available. 
Makes an exact copy of the specified ImagickDraw object.
</Desc>
    <FName>ImagickDraw::color</FName>
    <Desc>bool ImagickDraw::color ( float $x , float $y , int $paintMethod )
Warning
This function is currently not documented; only its argument list is available. 
Draws color on image using the current fill color, starting at specified position, and using specified paint method.
</Desc>
    <FName>ImagickDraw::comment</FName>
    <Desc>bool ImagickDraw::comment ( string $comment )
Warning
This function is currently not documented; only its argument list is available. 
Adds a comment to a vector output stream.
</Desc>
    <FName>ImagickDraw::composite</FName>
    <Desc>bool ImagickDraw::composite ( int $compose , float $x , float $y , float $width , float $height , Imagick $compositeWand )
Warning
This function is currently not documented; only its argument list is available. 
Composites an image onto the current image, using the specified composition operator, specified position, and at the specified size.
</Desc>
    <FName>ImagickDraw::__construct</FName>
    <Desc>ImagickDraw::__construct ( void )
Warning
This function is currently not documented; only its argument list is available. 
The ImagickDraw constructor
</Desc>
    <FName>ImagickDraw::destroy</FName>
    <Desc>bool ImagickDraw::destroy ( void )
Warning
This function is currently not documented; only its argument list is available. 
Frees all resources associated with the ImagickDraw object.
</Desc>
    <FName>ImagickDraw::ellipse</FName>
    <Desc>bool ImagickDraw::ellipse ( float $ox , float $oy , float $rx , float $ry , float $start , float $end )
Warning
This function is currently not documented; only its argument list is available. 
Draws an ellipse on the image.
</Desc>
    <FName>ImagickDraw::getClipPath</FName>
    <Desc>string ImagickDraw::getClipPath ( void )
Warning
This function is currently not documented; only its argument list is available. 
Obtains the current clipping path ID.
</Desc>
    <FName>ImagickDraw::getClipRule</FName>
    <Desc>int ImagickDraw::getClipRule ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the current polygon fill rule to be used by the clipping path.
</Desc>
    <FName>ImagickDraw::getClipUnits</FName>
    <Desc>int ImagickDraw::getClipUnits ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the interpretation of clip path units.
</Desc>
    <FName>ImagickDraw::getFillColor</FName>
    <Desc>ImagickPixel ImagickDraw::getFillColor ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the fill color used for drawing filled objects.
</Desc>
    <FName>ImagickDraw::getFillOpacity</FName>
    <Desc>float ImagickDraw::getFillOpacity ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the opacity used when drawing using the fill color or fill texture. Fully opaque is 1.0.
</Desc>
    <FName>ImagickDraw::getFillRule</FName>
    <Desc>int ImagickDraw::getFillRule ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the fill rule used while drawing polygons.
</Desc>
    <FName>ImagickDraw::getFont</FName>
    <Desc>string ImagickDraw::getFont ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns a string specifying the font used when annotating with text.
</Desc>
    <FName>ImagickDraw::getFontFamily</FName>
    <Desc>string ImagickDraw::getFontFamily ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the font family to use when annotating with text.
</Desc>
    <FName>ImagickDraw::getFontSize</FName>
    <Desc>float ImagickDraw::getFontSize ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the font pointsize used when annotating with text.
</Desc>
    <FName>ImagickDraw::getFontStretch</FName>
    <Desc>public int ImagickDraw::getFontStretch ( void )
Gets the font stretch to use when annotating with text. Returns a StretchType.
</Desc>
    <FName>ImagickDraw::getFontStyle</FName>
    <Desc>int ImagickDraw::getFontStyle ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the font style used when annotating with text.
</Desc>
    <FName>ImagickDraw::getFontWeight</FName>
    <Desc>int ImagickDraw::getFontWeight ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the font weight used when annotating with text.
</Desc>
    <FName>ImagickDraw::getGravity</FName>
    <Desc>int ImagickDraw::getGravity ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the text placement gravity used when annotating with text.
</Desc>
    <FName>ImagickDraw::getStrokeAntialias</FName>
    <Desc>bool ImagickDraw::getStrokeAntialias ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the current stroke antialias setting. Stroked outlines are antialiased by default. When antialiasing is disabled stroked pixels are thresholded to determine if the stroke color or underlying canvas color should be used.
</Desc>
    <FName>ImagickDraw::getStrokeColor</FName>
    <Desc>ImagickPixel ImagickDraw::getStrokeColor ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the color used for stroking object outlines.
</Desc>
    <FName>ImagickDraw::getStrokeDashArray</FName>
    <Desc>array ImagickDraw::getStrokeDashArray ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns an array representing the pattern of dashes and gaps used to stroke paths.
</Desc>
    <FName>ImagickDraw::getStrokeDashOffset</FName>
    <Desc>float ImagickDraw::getStrokeDashOffset ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the offset into the dash pattern to start the dash.
</Desc>
    <FName>ImagickDraw::getStrokeLineCap</FName>
    <Desc>int ImagickDraw::getStrokeLineCap ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the shape to be used at the end of open subpaths when they are stroked.
</Desc>
    <FName>ImagickDraw::getStrokeLineJoin</FName>
    <Desc>int ImagickDraw::getStrokeLineJoin ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the shape to be used at the corners of paths (or other vector shapes) when they are stroked.
</Desc>
    <FName>ImagickDraw::getStrokeMiterLimit</FName>
    <Desc>int ImagickDraw::getStrokeMiterLimit ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the miter limit. When two line segments meet at a sharp angle and miter joins have been specified for 'lineJoin', it is possible for the miter to extend far beyond the thickness of the line stroking the path. The 'miterLimit' imposes a limit on the ratio of the miter length to the 'lineWidth'.
</Desc>
    <FName>ImagickDraw::getStrokeOpacity</FName>
    <Desc>float ImagickDraw::getStrokeOpacity ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the opacity of stroked object outlines.
</Desc>
    <FName>ImagickDraw::getStrokeWidth</FName>
    <Desc>float ImagickDraw::getStrokeWidth ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the width of the stroke used to draw object outlines.
</Desc>
    <FName>ImagickDraw::getTextAlignment</FName>
    <Desc>int ImagickDraw::getTextAlignment ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the alignment applied when annotating with text.
</Desc>
    <FName>ImagickDraw::getTextAntialias</FName>
    <Desc>bool ImagickDraw::getTextAntialias ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the current text antialias setting, which determines whether text is antialiased. Text is antialiased by default.
</Desc>
    <FName>ImagickDraw::getTextDecoration</FName>
    <Desc>int ImagickDraw::getTextDecoration ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the decoration applied when annotating with text.
</Desc>
    <FName>ImagickDraw::getTextEncoding</FName>
    <Desc>string ImagickDraw::getTextEncoding ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns a string which specifies the code set used for text annotations.
</Desc>
    <FName>ImagickDraw::getTextInterlineSpacing</FName>
    <Desc>public float ImagickDraw::getTextInterlineSpacing ( void )
Gets the text interword spacing.
</Desc>
    <FName>ImagickDraw::getTextInterwordSpacing</FName>
    <Desc>public float ImagickDraw::getTextInterwordSpacing ( void )
Gets the text interword spacing.
</Desc>
    <FName>ImagickDraw::getTextKerning</FName>
    <Desc>public float ImagickDraw::getTextKerning ( void )
Gets the text kerning.
</Desc>
    <FName>ImagickDraw::getTextUnderColor</FName>
    <Desc>ImagickPixel ImagickDraw::getTextUnderColor ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the color of a background rectangle to place under text annotations.
</Desc>
    <FName>ImagickDraw::getVectorGraphics</FName>
    <Desc>string ImagickDraw::getVectorGraphics ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns a string which specifies the vector graphics generated by any graphics calls made since the ImagickDraw object was instantiated.
</Desc>
    <FName>ImagickDraw::line</FName>
    <Desc>bool ImagickDraw::line ( float $sx , float $sy , float $ex , float $ey )
Warning
This function is currently not documented; only its argument list is available. 
Draws a line on the image using the current stroke color, stroke opacity, and stroke width.
</Desc>
    <FName>ImagickDraw::matte</FName>
    <Desc>bool ImagickDraw::matte ( float $x , float $y , int $paintMethod )
Warning
This function is currently not documented; only its argument list is available. 
Paints on the image's opacity channel in order to set effected pixels to transparent, to influence the opacity of pixels.
</Desc>
    <FName>ImagickDraw::pathClose</FName>
    <Desc>bool ImagickDraw::pathClose ( void )
Warning
This function is currently not documented; only its argument list is available. 
Adds a path element to the current path which closes the current subpath by drawing a straight line from the current point to the current subpath's most recent starting point (usually, the most recent moveto point).
</Desc>
    <FName>ImagickDraw::pathCurveToAbsolute</FName>
    <Desc>bool ImagickDraw::pathCurveToAbsolute ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a cubic Bezier curve from the current point to (x,y) using (x1,y1) as the control point at the beginning of the curve and (x2,y2) as the control point at the end of the curve using absolute coordinates. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.
</Desc>
    <FName>ImagickDraw::pathCurveToQuadraticBezierAbsolute</FName>
    <Desc>bool ImagickDraw::pathCurveToQuadraticBezierAbsolute ( float $x1 , float $y1 , float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a quadratic Bezier curve from the current point to (x,y) using (x1,y1) as the control point using absolute coordinates. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.
</Desc>
    <FName>ImagickDraw::pathCurveToQuadraticBezierRelative</FName>
    <Desc>bool ImagickDraw::pathCurveToQuadraticBezierRelative ( float $x1 , float $y1 , float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a quadratic Bezier curve from the current point to (x,y) using (x1,y1) as the control point using relative coordinates. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.
</Desc>
    <FName>ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute</FName>
    <Desc>bool ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute ( float $x , float $y )
Draws a quadratic Bezier curve (using absolute coordinates) from the current point to (x,y). The control point is assumed to be the reflection of the control point on the previous command relative to the current point. (If there is no previous command or if the previous command was not a DrawPathCurveToQuadraticBezierAbsolute, DrawPathCurveToQuadraticBezierRelative, DrawPathCurveToQuadraticBezierSmoothAbsolut or DrawPathCurveToQuadraticBezierSmoothRelative, assume the control point is coincident with the current point.). At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier. 
This function cannot be used to continue a cubic Bezier curve smoothly. It can only continue from a quadratic curve smoothly.
</Desc>
    <FName>ImagickDraw::pathCurveToQuadraticBezierSmoothRelative</FName>
    <Desc>bool ImagickDraw::pathCurveToQuadraticBezierSmoothRelative ( float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a quadratic Bezier curve (using relative coordinates) from the current point to (x, y). The control point is assumed to be the reflection of the control point on the previous command relative to the current point. (If there is no previous command or if the previous command was not a DrawPathCurveToQuadraticBezierAbsolute, DrawPathCurveToQuadraticBezierRelative, DrawPathCurveToQuadraticBezierSmoothAbsolut or DrawPathCurveToQuadraticBezierSmoothRelative, assume the control point is coincident with the current point). At the end of the command, the new current point becomes the final (x, y) coordinate pair used in the polybezier. 
This function cannot be used to continue a cubic Bezier curve smoothly. It can only continue from a quadratic curve smoothly.
</Desc>
    <FName>ImagickDraw::pathCurveToRelative</FName>
    <Desc>bool ImagickDraw::pathCurveToRelative ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a cubic Bezier curve from the current point to (x,y) using (x1,y1) as the control point at the beginning of the curve and (x2,y2) as the control point at the end of the curve using relative coordinates. At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.
</Desc>
    <FName>ImagickDraw::pathCurveToSmoothAbsolute</FName>
    <Desc>bool ImagickDraw::pathCurveToSmoothAbsolute ( float $x2 , float $y2 , float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a cubic Bezier curve from the current point to (x,y) using absolute coordinates. The first control point is assumed to be the reflection of the second control point on the previous command relative to the current point. (If there is no previous command or if the previous command was not an DrawPathCurveToAbsolute, DrawPathCurveToRelative, DrawPathCurveToSmoothAbsolute or DrawPathCurveToSmoothRelative, assume the first control point is coincident with the current point.) (x2,y2) is the second control point (i.e., the control point at the end of the curve). At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.
</Desc>
    <FName>ImagickDraw::pathCurveToSmoothRelative</FName>
    <Desc>bool ImagickDraw::pathCurveToSmoothRelative ( float $x2 , float $y2 , float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a cubic Bezier curve from the current point to (x,y) using relative coordinates. The first control point is assumed to be the reflection of the second control point on the previous command relative to the current point. (If there is no previous command or if the previous command was not an DrawPathCurveToAbsolute, DrawPathCurveToRelative, DrawPathCurveToSmoothAbsolute or DrawPathCurveToSmoothRelative, assume the first control point is coincident with the current point.) (x2,y2) is the second control point (i.e., the control point at the end of the curve). At the end of the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.
</Desc>
    <FName>ImagickDraw::pathEllipticArcAbsolute</FName>
    <Desc>bool ImagickDraw::pathEllipticArcAbsolute ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws an elliptical arc from the current point to (x, y) using absolute coordinates. The size and orientation of the ellipse are defined by two radii (rx, ry) and an xAxisRotation, which indicates how the ellipse as a whole is rotated relative to the current coordinate system. The center (cx, cy) of the ellipse is calculated automatically to satisfy the constraints imposed by the other parameters. largeArcFlag and sweepFlag contribute to the automatic calculations and help determine how the arc is drawn. If largeArcFlag is TRUE then draw the larger of the available arcs. If sweepFlag is true, then draw the arc matching a clock-wise rotation.
</Desc>
    <FName>ImagickDraw::pathEllipticArcRelative</FName>
    <Desc>bool ImagickDraw::pathEllipticArcRelative ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws an elliptical arc from the current point to (x, y) using relative coordinates. The size and orientation of the ellipse are defined by two radii (rx, ry) and an xAxisRotation, which indicates how the ellipse as a whole is rotated relative to the current coordinate system. The center (cx, cy) of the ellipse is calculated automatically to satisfy the constraints imposed by the other parameters. largeArcFlag and sweepFlag contribute to the automatic calculations and help determine how the arc is drawn. If largeArcFlag is TRUE then draw the larger of the available arcs. If sweepFlag is true, then draw the arc matching a clock-wise rotation.
</Desc>
    <FName>ImagickDraw::pathFinish</FName>
    <Desc>bool ImagickDraw::pathFinish ( void )
Warning
This function is currently not documented; only its argument list is available. 
Terminates the current path.
</Desc>
    <FName>ImagickDraw::pathLineToAbsolute</FName>
    <Desc>bool ImagickDraw::pathLineToAbsolute ( float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a line path from the current point to the given coordinate using absolute coordinates. The coordinate then becomes the new current point.
</Desc>
    <FName>ImagickDraw::pathLineToHorizontalAbsolute</FName>
    <Desc>bool ImagickDraw::pathLineToHorizontalAbsolute ( float $x )
Warning
This function is currently not documented; only its argument list is available. 
Draws a horizontal line path from the current point to the target point using absolute coordinates. The target point then becomes the new current point.
</Desc>
    <FName>ImagickDraw::pathLineToHorizontalRelative</FName>
    <Desc>bool ImagickDraw::pathLineToHorizontalRelative ( float $x )
Warning
This function is currently not documented; only its argument list is available. 
Draws a horizontal line path from the current point to the target point using relative coordinates. The target point then becomes the new current point.
</Desc>
    <FName>ImagickDraw::pathLineToRelative</FName>
    <Desc>bool ImagickDraw::pathLineToRelative ( float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a line path from the current point to the given coordinate using relative coordinates. The coordinate then becomes the new current point.
</Desc>
    <FName>ImagickDraw::pathLineToVerticalAbsolute</FName>
    <Desc>bool ImagickDraw::pathLineToVerticalAbsolute ( float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a vertical line path from the current point to the target point using absolute coordinates. The target point then becomes the new current point.
</Desc>
    <FName>ImagickDraw::pathLineToVerticalRelative</FName>
    <Desc>bool ImagickDraw::pathLineToVerticalRelative ( float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a vertical line path from the current point to the target point using relative coordinates. The target point then becomes the new current point.
</Desc>
    <FName>ImagickDraw::pathMoveToAbsolute</FName>
    <Desc>bool ImagickDraw::pathMoveToAbsolute ( float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Starts a new sub-path at the given coordinate using absolute coordinates. The current point then becomes the specified coordinate.
</Desc>
    <FName>ImagickDraw::pathMoveToRelative</FName>
    <Desc>bool ImagickDraw::pathMoveToRelative ( float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Starts a new sub-path at the given coordinate using relative coordinates. The current point then becomes the specified coordinate.
</Desc>
    <FName>ImagickDraw::pathStart</FName>
    <Desc>bool ImagickDraw::pathStart ( void )
Warning
This function is currently not documented; only its argument list is available. 
Declares the start of a path drawing list which is terminated by a matching DrawPathFinish() command. All other DrawPath commands must be enclosed between a and a DrawPathFinish() command. This is because path drawing commands are subordinate commands and they do not function by themselves.
</Desc>
    <FName>ImagickDraw::point</FName>
    <Desc>bool ImagickDraw::point ( float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Draws a point using the current stroke color and stroke thickness at the specified coordinates.
</Desc>
    <FName>ImagickDraw::polygon</FName>
    <Desc>bool ImagickDraw::polygon ( array $coordinates )
Warning
This function is currently not documented; only its argument list is available. 
Draws a polygon using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.
</Desc>
    <FName>ImagickDraw::polyline</FName>
    <Desc>bool ImagickDraw::polyline ( array $coordinates )
Warning
This function is currently not documented; only its argument list is available. 
Draws a polyline using the current stroke, stroke width, and fill color or texture, using the specified array of coordinates.
</Desc>
    <FName>ImagickDraw::pop</FName>
    <Desc>bool ImagickDraw::pop ( void )
Warning
This function is currently not documented; only its argument list is available. 
Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw. Multiple ImagickDraws may exist. It is an error to attempt to pop more ImagickDraws than have been pushed, and it is proper form to pop all ImagickDraws which have been pushed.
</Desc>
    <FName>ImagickDraw::popClipPath</FName>
    <Desc>bool ImagickDraw::popClipPath ( void )
Warning
This function is currently not documented; only its argument list is available. 
Terminates a clip path definition.
</Desc>
    <FName>ImagickDraw::popDefs</FName>
    <Desc>bool ImagickDraw::popDefs ( void )
Warning
This function is currently not documented; only its argument list is available. 
Terminates a definition list.
</Desc>
    <FName>ImagickDraw::popPattern</FName>
    <Desc>bool ImagickDraw::popPattern ( void )
Warning
This function is currently not documented; only its argument list is available. 
Terminates a pattern definition.
</Desc>
    <FName>ImagickDraw::push</FName>
    <Desc>bool ImagickDraw::push ( void )
Warning
This function is currently not documented; only its argument list is available. 
Clones the current ImagickDraw to create a new ImagickDraw, which is then added to the ImagickDraw stack. The original drawing ImagickDraw(s) may be returned to by invoking pop(). The ImagickDraws are stored on a ImagickDraw stack. For every Pop there must have already been an equivalent Push.
</Desc>
    <FName>ImagickDraw::pushClipPath</FName>
    <Desc>bool ImagickDraw::pushClipPath ( string $clip_mask_id )
Warning
This function is currently not documented; only its argument list is available. 
Starts a clip path definition which is comprised of any number of drawing commands and terminated by a ImagickDraw::popClipPath() command.
</Desc>
    <FName>ImagickDraw::pushDefs</FName>
    <Desc>bool ImagickDraw::pushDefs ( void )
Warning
This function is currently not documented; only its argument list is available. 
Indicates that commands up to a terminating ImagickDraw::popDefs() command create named elements (e.g. clip-paths, textures, etc.) which may safely be processed earlier for the sake of efficiency.
</Desc>
    <FName>ImagickDraw::pushPattern</FName>
    <Desc>bool ImagickDraw::pushPattern ( string $pattern_id , float $x , float $y , float $width , float $height )
Warning
This function is currently not documented; only its argument list is available. 
Indicates that subsequent commands up to a DrawPopPattern() command comprise the definition of a named pattern. The pattern space is assigned top left corner coordinates, a width and height, and becomes its own drawing space. Anything which can be drawn may be used in a pattern definition. Named patterns may be used as stroke or brush definitions.
</Desc>
    <FName>ImagickDraw::rectangle</FName>
    <Desc>bool ImagickDraw::rectangle ( float $x1 , float $y1 , float $x2 , float $y2 )
Warning
This function is currently not documented; only its argument list is available. 
Draws a rectangle given two coordinates and using the current stroke, stroke width, and fill settings.
</Desc>
    <FName>ImagickDraw::render</FName>
    <Desc>bool ImagickDraw::render ( void )
Warning
This function is currently not documented; only its argument list is available. 
Renders all preceding drawing commands onto the image.
</Desc>
    <FName>ImagickDraw::resetVectorGraphics</FName>
    <Desc>public bool ImagickDraw::resetVectorGraphics ( void )
Resets the vector graphics.
</Desc>
    <FName>ImagickDraw::rotate</FName>
    <Desc>bool ImagickDraw::rotate ( float $degrees )
Warning
This function is currently not documented; only its argument list is available. 
Applies the specified rotation to the current coordinate space.
</Desc>
    <FName>ImagickDraw::roundRectangle</FName>
    <Desc>bool ImagickDraw::roundRectangle ( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry )
Warning
This function is currently not documented; only its argument list is available. 
Draws a rounded rectangle given two coordinates, x & y corner radiuses and using the current stroke, stroke width, and fill settings.
</Desc>
    <FName>ImagickDraw::scale</FName>
    <Desc>bool ImagickDraw::scale ( float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Adjusts the scaling factor to apply in the horizontal and vertical directions to the current coordinate space.
</Desc>
    <FName>ImagickDraw::setClipPath</FName>
    <Desc>bool ImagickDraw::setClipPath ( string $clip_mask )
Warning
This function is currently not documented; only its argument list is available. 
Associates a named clipping path with the image. Only the areas drawn on by the clipping path will be modified as long as it remains in effect.
</Desc>
    <FName>ImagickDraw::setClipRule</FName>
    <Desc>bool ImagickDraw::setClipRule ( int $fill_rule )
Warning
This function is currently not documented; only its argument list is available. 
Set the polygon fill rule to be used by the clipping path.
</Desc>
    <FName>ImagickDraw::setClipUnits</FName>
    <Desc>bool ImagickDraw::setClipUnits ( int $clip_units )
Warning
This function is currently not documented; only its argument list is available. 
Sets the interpretation of clip path units.
</Desc>
    <FName>ImagickDraw::setFillAlpha</FName>
    <Desc>bool ImagickDraw::setFillAlpha ( float $opacity )
Warning
This function is currently not documented; only its argument list is available. 
Sets the opacity to use when drawing using the fill color or fill texture. Fully opaque is 1.0.
</Desc>
    <FName>ImagickDraw::setFillColor</FName>
    <Desc>bool ImagickDraw::setFillColor ( ImagickPixel $fill_pixel )
Warning
This function is currently not documented; only its argument list is available. 
Sets the fill color to be used for drawing filled objects.
</Desc>
    <FName>ImagickDraw::setFillOpacity</FName>
    <Desc>bool ImagickDraw::setFillOpacity ( float $fillOpacity )
Warning
This function is currently not documented; only its argument list is available. 
Sets the opacity to use when drawing using the fill color or fill texture. Fully opaque is 1.0.
</Desc>
    <FName>ImagickDraw::setFillPatternURL</FName>
    <Desc>bool ImagickDraw::setFillPatternURL ( string $fill_url )
Warning
This function is currently not documented; only its argument list is available. 
Sets the URL to use as a fill pattern for filling objects. Only local URLs ("#identifier") are supported at this time. These local URLs are normally created by defining a named fill pattern with DrawPushPattern/DrawPopPattern.
</Desc>
    <FName>ImagickDraw::setFillRule</FName>
    <Desc>bool ImagickDraw::setFillRule ( int $fill_rule )
Warning
This function is currently not documented; only its argument list is available. 
Sets the fill rule to use while drawing polygons.
</Desc>
    <FName>ImagickDraw::setFont</FName>
    <Desc>bool ImagickDraw::setFont ( string $font_name )
Warning
This function is currently not documented; only its argument list is available. 
Sets the fully-specified font to use when annotating with text.
</Desc>
    <FName>ImagickDraw::setFontFamily</FName>
    <Desc>bool ImagickDraw::setFontFamily ( string $font_family )
Warning
This function is currently not documented; only its argument list is available. 
Sets the font family to use when annotating with text.
</Desc>
    <FName>ImagickDraw::setFontSize</FName>
    <Desc>bool ImagickDraw::setFontSize ( float $pointsize )
Warning
This function is currently not documented; only its argument list is available. 
Sets the font pointsize to use when annotating with text.
</Desc>
    <FName>ImagickDraw::setFontStretch</FName>
    <Desc>bool ImagickDraw::setFontStretch ( int $fontStretch )
Warning
This function is currently not documented; only its argument list is available. 
Sets the font stretch to use when annotating with text. The AnyStretch enumeration acts as a wild-card "don't care" option.
</Desc>
    <FName>ImagickDraw::setFontStyle</FName>
    <Desc>bool ImagickDraw::setFontStyle ( int $style )
Warning
This function is currently not documented; only its argument list is available. 
Sets the font style to use when annotating with text. The AnyStyle enumeration acts as a wild-card "don't care" option.
</Desc>
    <FName>ImagickDraw::setFontWeight</FName>
    <Desc>bool ImagickDraw::setFontWeight ( int $font_weight )
Warning
This function is currently not documented; only its argument list is available. 
Sets the font weight to use when annotating with text.
</Desc>
    <FName>ImagickDraw::setGravity</FName>
    <Desc>bool ImagickDraw::setGravity ( int $gravity )
Warning
This function is currently not documented; only its argument list is available. 
Sets the text placement gravity to use when annotating with text.
</Desc>
    <FName>ImagickDraw::setResolution</FName>
    <Desc>public bool ImagickDraw::setResolution ( float $x_resolution , float $y_resolution )
Sets the resolution.
</Desc>
    <FName>ImagickDraw::setStrokeAlpha</FName>
    <Desc>bool ImagickDraw::setStrokeAlpha ( float $opacity )
Warning
This function is currently not documented; only its argument list is available. 
Specifies the opacity of stroked object outlines.
</Desc>
    <FName>ImagickDraw::setStrokeAntialias</FName>
    <Desc>bool ImagickDraw::setStrokeAntialias ( bool $stroke_antialias )
Warning
This function is currently not documented; only its argument list is available. 
Controls whether stroked outlines are antialiased. Stroked outlines are antialiased by default. When antialiasing is disabled stroked pixels are thresholded to determine if the stroke color or underlying canvas color should be used.
</Desc>
    <FName>ImagickDraw::setStrokeColor</FName>
    <Desc>bool ImagickDraw::setStrokeColor ( ImagickPixel $stroke_pixel )
Warning
This function is currently not documented; only its argument list is available. 
Sets the color used for stroking object outlines.
</Desc>
    <FName>ImagickDraw::setStrokeDashArray</FName>
    <Desc>bool ImagickDraw::setStrokeDashArray ( array $dashArray )
Warning
This function is currently not documented; only its argument list is available. 
Specifies the pattern of dashes and gaps used to stroke paths. The strokeDashArray represents an array of numbers that specify the lengths of alternating dashes and gaps in pixels. If an odd number of values is provided, then the list of values is repeated to yield an even number of values. To remove an existing dash array, pass a zero number_elements argument and null dash_array. A typical strokeDashArray_ array might contain the members 5 3 2.
</Desc>
    <FName>ImagickDraw::setStrokeDashOffset</FName>
    <Desc>bool ImagickDraw::setStrokeDashOffset ( float $dash_offset )
Warning
This function is currently not documented; only its argument list is available. 
Specifies the offset into the dash pattern to start the dash.
</Desc>
    <FName>ImagickDraw::setStrokeLineCap</FName>
    <Desc>bool ImagickDraw::setStrokeLineCap ( int $linecap )
Warning
This function is currently not documented; only its argument list is available. 
Specifies the shape to be used at the end of open subpaths when they are stroked.
</Desc>
    <FName>ImagickDraw::setStrokeLineJoin</FName>
    <Desc>bool ImagickDraw::setStrokeLineJoin ( int $linejoin )
Warning
This function is currently not documented; only its argument list is available. 
Specifies the shape to be used at the corners of paths (or other vector shapes) when they are stroked.
</Desc>
    <FName>ImagickDraw::setStrokeMiterLimit</FName>
    <Desc>bool ImagickDraw::setStrokeMiterLimit ( int $miterlimit )
Warning
This function is currently not documented; only its argument list is available. 
Specifies the miter limit. When two line segments meet at a sharp angle and miter joins have been specified for 'lineJoin', it is possible for the miter to extend far beyond the thickness of the line stroking the path. The miterLimit' imposes a limit on the ratio of the miter length to the 'lineWidth'.
</Desc>
    <FName>ImagickDraw::setStrokeOpacity</FName>
    <Desc>bool ImagickDraw::setStrokeOpacity ( float $stroke_opacity )
Warning
This function is currently not documented; only its argument list is available. 
Specifies the opacity of stroked object outlines.
</Desc>
    <FName>ImagickDraw::setStrokePatternURL</FName>
    <Desc>bool ImagickDraw::setStrokePatternURL ( string $stroke_url )
Warning
This function is currently not documented; only its argument list is available. 
Sets the pattern used for stroking object outlines.
</Desc>
    <FName>ImagickDraw::setStrokeWidth</FName>
    <Desc>bool ImagickDraw::setStrokeWidth ( float $stroke_width )
Warning
This function is currently not documented; only its argument list is available. 
Sets the width of the stroke used to draw object outlines.
</Desc>
    <FName>ImagickDraw::setTextAlignment</FName>
    <Desc>bool ImagickDraw::setTextAlignment ( int $alignment )
Warning
This function is currently not documented; only its argument list is available. 
Specifies a text alignment to be applied when annotating with text.
</Desc>
    <FName>ImagickDraw::setTextAntialias</FName>
    <Desc>bool ImagickDraw::setTextAntialias ( bool $antiAlias )
Warning
This function is currently not documented; only its argument list is available. 
Controls whether text is antialiased. Text is antialiased by default.
</Desc>
    <FName>ImagickDraw::setTextDecoration</FName>
    <Desc>bool ImagickDraw::setTextDecoration ( int $decoration )
Warning
This function is currently not documented; only its argument list is available. 
Specifies a decoration to be applied when annotating with text.
</Desc>
    <FName>ImagickDraw::setTextEncoding</FName>
    <Desc>bool ImagickDraw::setTextEncoding ( string $encoding )
Warning
This function is currently not documented; only its argument list is available. 
Specifies the code set to use for text annotations. The only character encoding which may be specified at this time is "UTF-8" for representing Unicode as a sequence of bytes. Specify an empty string to set text encoding to the system's default. Successful text annotation using Unicode may require fonts designed to support Unicode.
</Desc>
    <FName>ImagickDraw::setTextInterlineSpacing</FName>
    <Desc>public bool ImagickDraw::setTextInterlineSpacing ( float $spacing )
Sets the text interline spacing. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ImagickDraw::setTextInterwordSpacing</FName>
    <Desc>public bool ImagickDraw::setTextInterwordSpacing ( float $spacing )
Sets the text interword spacing.
</Desc>
    <FName>ImagickDraw::setTextKerning</FName>
    <Desc>public bool ImagickDraw::setTextKerning ( float $kerning )
Sets the text kerning 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ImagickDraw::setTextUnderColor</FName>
    <Desc>bool ImagickDraw::setTextUnderColor ( ImagickPixel $under_color )
Warning
This function is currently not documented; only its argument list is available. 
Specifies the color of a background rectangle to place under text annotations.
</Desc>
    <FName>ImagickDraw::setVectorGraphics</FName>
    <Desc>bool ImagickDraw::setVectorGraphics ( string $xml )
Warning
This function is currently not documented; only its argument list is available. 
Sets the vector graphics associated with the specified ImagickDraw object. Use this method with ImagickDraw::getVectorGraphics() as a method to persist the vector graphics state.
</Desc>
    <FName>ImagickDraw::setViewbox</FName>
    <Desc>bool ImagickDraw::setViewbox ( int $x1 , int $y1 , int $x2 , int $y2 )
Warning
This function is currently not documented; only its argument list is available. 
Sets the overall canvas size to be recorded with the drawing vector data. Usually this will be specified using the same size as the canvas image. When the vector data is saved to SVG or MVG formats, the viewbox is use to specify the size of the canvas image that a viewer will render the vector data on.
</Desc>
    <FName>ImagickDraw::skewX</FName>
    <Desc>bool ImagickDraw::skewX ( float $degrees )
Warning
This function is currently not documented; only its argument list is available. 
Skews the current coordinate system in the horizontal direction.
</Desc>
    <FName>ImagickDraw::skewY</FName>
    <Desc>bool ImagickDraw::skewY ( float $degrees )
Warning
This function is currently not documented; only its argument list is available. 
Skews the current coordinate system in the vertical direction.
</Desc>
    <FName>ImagickDraw::translate</FName>
    <Desc>bool ImagickDraw::translate ( float $x , float $y )
Warning
This function is currently not documented; only its argument list is available. 
Applies a translation to the current coordinate system which moves the coordinate system origin to the specified coordinate.
</Desc>
    <FName>ImagickKernel::addKernel</FName>
    <Desc>public void ImagickKernel::addKernel ( ImagickKernel $ImagickKernel )
Attach another kernel to this kernel to allow them to both be applied in a single morphology or filter function. Returns the new combined kernel.
</Desc>
    <FName>ImagickKernel::addUnityKernel</FName>
    <Desc>public void ImagickKernel::addUnityKernel ( float $scale )
Adds a given amount of the 'Unity' Convolution Kernel to the given pre-scaled and normalized Kernel. This in effect adds that amount of the original image into the resulting convolution kernel. The resulting effect is to convert the defined kernels into blended soft-blurs, unsharp kernels or into sharpening kernels.
</Desc>
    <FName>ImagickKernel::fromBuiltIn</FName>
    <Desc>public static ImagickKernel ImagickKernel::fromBuiltin ( int $kernelType , string $kernelString )
Create a kernel from a builtin in kernel. See http://www.imagemagick.org/Usage/morphology/#kernel for examples. Currently the 'rotation' symbols are not supported. Example: $diamondKernel = ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DIAMOND, "2");
</Desc>
    <FName>ImagickKernel::fromMatrix</FName>
    <Desc>public static ImagickKernel ImagickKernel::fromMatrix ( array $matrix [, array $origin ] )
Create a kernel from an 2d matrix of values. Each value should either be a float (if the element should be used) or 'false' if the element should be skipped. For matrices that are odd sizes in both dimensions the the origin pixel will default to the centre of the kernel. For all other kernel sizes the origin pixel must be specified.
</Desc>
    <FName>ImagickKernel::getMatrix</FName>
    <Desc>public array ImagickKernel::getMatrix ( void )
Get the 2d matrix of values used in this kernel. The elements are either float for elements that are used or 'false' if the element should be skipped.
</Desc>
    <FName>ImagickKernel::scale</FName>
    <Desc>public void ImagickKernel::scale ( float $scale [, int $normalizeFlag ] )
ScaleKernelInfo() scales the given kernel list by the given amount, with or without normalization of the sum of the kernel values (as per given flags). The exact behaviour of this function depends on the normalization type being used please see http://www.imagemagick.org/api/morphology.php#ScaleKernelInfo for details. Flag should be one of Imagick::NORMALIZE_KERNEL_VALUE, Imagick::NORMALIZE_KERNEL_CORRELATE, Imagick::NORMALIZE_KERNEL_PERCENT or not set.
</Desc>
    <FName>ImagickKernel::separate</FName>
    <Desc>public array ImagickKernel::separate ( void )
Separates a linked set of kernels and returns an array of ImagickKernels.
</Desc>
    <FName>ImagickPixel::clear</FName>
    <Desc>bool ImagickPixel::clear ( void )
Warning
This function is currently not documented; only its argument list is available. 
Clears the ImagickPixel object, leaving it in a fresh state. This also unsets any color associated with the object.
</Desc>
    <FName>ImagickPixel::__construct</FName>
    <Desc>ImagickPixel::__construct ([ string $color ] )
Warning
This function is currently not documented; only its argument list is available. 
Constructs an ImagickPixel object. If a color is specified, the object is constructed and then initialised with that color before being returned.
</Desc>
    <FName>ImagickPixel::destroy</FName>
    <Desc>bool ImagickPixel::destroy ( void )
Warning
This function is currently not documented; only its argument list is available. 
Deallocates any resources used by the ImagickPixel object, and unsets any associated color. The object should not be used after the destroy function has been called.
</Desc>
    <FName>ImagickPixel::getColor</FName>
    <Desc>array ImagickPixel::getColor ([ int $normalized = 0 ] )
Returns the color described by the ImagickPixel object, as an array. If the color has an opacity channel set, this is provided as a fourth value in the list.
</Desc>
    <FName>ImagickPixel::getColorAsString</FName>
    <Desc>string ImagickPixel::getColorAsString ( void )
Returns the color of the ImagickPixel object as a string.
</Desc>
    <FName>ImagickPixel::getColorCount</FName>
    <Desc>int ImagickPixel::getColorCount ( void )
Returns the color count associated with this color. 
The color count is the number of pixels in the image that have the same color as this ImagickPixel. 
ImagickPixel::getColorCount appears to only work for ImagickPixel objects created through Imagick::getImageHistogram()
</Desc>
    <FName>ImagickPixel::getColorQuantum</FName>
    <Desc>public array ImagickPixel::getColorQuantum ( void )
Returns the color of the pixel in an array as Quantum values. If ImageMagick was compiled as HDRI these will be floats, otherwise they will be integers. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ImagickPixel::getColorValue</FName>
    <Desc>float ImagickPixel::getColorValue ( int $color )
Retrieves the value of the color channel specified, as a floating-point number between 0 and 1.
</Desc>
    <FName>ImagickPixel::getColorValueQuantum</FName>
    <Desc>public number ImagickPixel::getColorValueQuantum ( int $color )
Gets the quantum value of a color in the ImagickPixel. Return value is a float if ImageMagick was compiled with HDRI, otherwise an integer.
</Desc>
    <FName>ImagickPixel::getHSL</FName>
    <Desc>array ImagickPixel::getHSL ( void )
Returns the normalized HSL color described by the ImagickPixel object, with each of the three values as floating point numbers between 0.0 and 1.0.
</Desc>
    <FName>ImagickPixel::getIndex</FName>
    <Desc>public int ImagickPixel::getIndex ( void )
Gets the colormap index of the pixel wand.
</Desc>
    <FName>ImagickPixel::isPixelSimilar</FName>
    <Desc>bool ImagickPixel::isPixelSimilar ( ImagickPixel $color , float $fuzz )
Checks the distance between the color described by this ImagickPixel object and that of the provided object, by plotting their RGB values on the color cube. If the distance between the two points is less than the fuzz value given, the colors are similar. This method replaces ImagickPixel::isSimilar() and correctly normalises the fuzz value to ImageMagick QuantumRange.
</Desc>
    <FName>ImagickPixel::isPixelSimilarQuantum</FName>
    <Desc>public bool ImagickPixel::isPixelSimilarQuantum ( string $color [, string $fuzz ] )
Returns true if the distance between two colors is less than the specified distance. The fuzz value should be in the range 0-QuantumRange. The maximum value represents the longest possible distance in the colorspace. e.g. from RGB(0, 0, 0) to RGB(255, 255, 255) for the RGB colorspace
</Desc>
    <FName>ImagickPixel::isSimilar</FName>
    <Desc>bool ImagickPixel::isSimilar ( ImagickPixel $color , float $fuzz )
Warning
This function is currently not documented; only its argument list is available. 
Checks the distance between the color described by this ImagickPixel object and that of the provided object, by plotting their RGB values on the color cube. If the distance between the two points is less than the fuzz value given, the colors are similar. Deprecated in favour of ImagickPixel::isPixelSimilar().
</Desc>
    <FName>ImagickPixel::setColor</FName>
    <Desc>bool ImagickPixel::setColor ( string $color )
Warning
This function is currently not documented; only its argument list is available. 
Sets the color described by the ImagickPixel object, with a string (e.g. "blue", "#0000ff", "rgb(0,0,255)", "cmyk(100,100,100,10)", etc.).
</Desc>
    <FName>ImagickPixel::setColorCount</FName>
    <Desc>public bool ImagickPixel::setcolorcount ( int $colorCount )
Sets the color count associated with this color.
</Desc>
    <FName>ImagickPixel::setColorValue</FName>
    <Desc>bool ImagickPixel::setColorValue ( int $color , float $value )
Sets the value of the specified channel of this object to the provided value, which should be between 0 and 1. This function can be used to provide an opacity channel to an ImagickPixel object.
</Desc>
    <FName>ImagickPixel::setColorValueQuantum</FName>
    <Desc>public bool ImagickPixel::setColorValueQuantum ( int $color , number $value )
Sets the quantum value of a color element of the ImagickPixel. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ImagickPixel::setHSL</FName>
    <Desc>bool ImagickPixel::setHSL ( float $hue , float $saturation , float $luminosity )
Sets the color described by the ImagickPixel object using normalized values for hue, saturation and luminosity.
</Desc>
    <FName>ImagickPixel::setIndex</FName>
    <Desc>public bool ImagickPixel::setIndex ( int $index )
Sets the colormap index of the pixel wand.
</Desc>
    <FName>ImagickPixelIterator::clear</FName>
    <Desc>bool ImagickPixelIterator::clear ( void )
Warning
This function is currently not documented; only its argument list is available. 
Clear resources associated with a PixelIterator.
</Desc>
    <FName>ImagickPixelIterator::__construct</FName>
    <Desc>ImagickPixelIterator::__construct ( Imagick $wand )
Warning
This function is currently not documented; only its argument list is available. 
The ImagickPixelIterator constructor
</Desc>
    <FName>ImagickPixelIterator::destroy</FName>
    <Desc>bool ImagickPixelIterator::destroy ( void )
Warning
This function is currently not documented; only its argument list is available. 
Deallocates resources associated with a PixelIterator.
</Desc>
    <FName>ImagickPixelIterator::getCurrentIteratorRow</FName>
    <Desc>array ImagickPixelIterator::getCurrentIteratorRow ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the current row as an array of ImagickPixel objects from the pixel iterator.
</Desc>
    <FName>ImagickPixelIterator::getIteratorRow</FName>
    <Desc>int ImagickPixelIterator::getIteratorRow ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the current pixel iterator row.
</Desc>
    <FName>ImagickPixelIterator::getNextIteratorRow</FName>
    <Desc>array ImagickPixelIterator::getNextIteratorRow ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the next row as an array of pixel wands from the pixel iterator.
</Desc>
    <FName>ImagickPixelIterator::getPreviousIteratorRow</FName>
    <Desc>array ImagickPixelIterator::getPreviousIteratorRow ( void )
Warning
This function is currently not documented; only its argument list is available. 
Returns the previous row as an array of pixel wands from the pixel iterator.
</Desc>
    <FName>ImagickPixelIterator::newPixelIterator</FName>
    <Desc>bool ImagickPixelIterator::newPixelIterator ( Imagick $wand )
Warning
This function is currently not documented; only its argument list is available. 
Returns a new pixel iterator.
</Desc>
    <FName>ImagickPixelIterator::newPixelRegionIterator</FName>
    <Desc>bool ImagickPixelIterator::newPixelRegionIterator ( Imagick $wand , int $x , int $y , int $columns , int $rows )
Warning
This function is currently not documented; only its argument list is available. 
Returns a new pixel iterator.
</Desc>
    <FName>ImagickPixelIterator::resetIterator</FName>
    <Desc>bool ImagickPixelIterator::resetIterator ( void )
Warning
This function is currently not documented; only its argument list is available. 
Resets the pixel iterator. Use it in conjunction with ImagickPixelIterator::getNextIteratorRow() to iterate over all the pixels in a pixel container.
</Desc>
    <FName>ImagickPixelIterator::setIteratorFirstRow</FName>
    <Desc>bool ImagickPixelIterator::setIteratorFirstRow ( void )
Warning
This function is currently not documented; only its argument list is available. 
Sets the pixel iterator to the first pixel row.
</Desc>
    <FName>ImagickPixelIterator::setIteratorLastRow</FName>
    <Desc>bool ImagickPixelIterator::setIteratorLastRow ( void )
Warning
This function is currently not documented; only its argument list is available. 
Sets the pixel iterator to the last pixel row.
</Desc>
    <FName>ImagickPixelIterator::setIteratorRow</FName>
    <Desc>bool ImagickPixelIterator::setIteratorRow ( int $row )
Warning
This function is currently not documented; only its argument list is available. 
Set the pixel iterator row.
</Desc>
    <FName>ImagickPixelIterator::syncIterator</FName>
    <Desc>bool ImagickPixelIterator::syncIterator ( void )
Warning
This function is currently not documented; only its argument list is available. 
Syncs the pixel iterator.
</Desc>
    <FName>InfiniteIterator::__construct</FName>
    <Desc>public InfiniteIterator::__construct ( Iterator $iterator )
Constructs an InfiniteIterator from an Iterator.
</Desc>
    <FName>InfiniteIterator::next</FName>
    <Desc>public void InfiniteIterator::next ( void )
Moves the inner Iterator forward to its next element if there is one, otherwise rewinds the inner Iterator back to the beginning. 
Note: 
Even an InfiniteIterator stops if its inner Iterator is empty.
</Desc>
    <FName>Counter::bumpValue</FName>
    <Desc>Counter::bumpValue ( int $offset )
Counter::bumpValue() updates the current value of a counter.
</Desc>
    <FName>Counter::__construct</FName>
    <Desc>Counter::__construct ( string $name [, int $initial_value [, int $flags ]] )
Creates an instance of a Counter which maintains a single numeric value.
</Desc>
    <FName>Counter::getMeta</FName>
    <Desc>mixed Counter::getMeta ( int $attribute )
Counter::getMeta() returns metainformation about a counter.
</Desc>
    <FName>Counter::getNamed</FName>
    <Desc>static Counter Counter::getNamed ( string $name )
Counter::getNamed() returns an existing counter by name if that name exists, or NULL otherwise. This is a static function.
</Desc>
    <FName>Counter::getValue</FName>
    <Desc>int Counter::getValue ( void )
Counter::getValue() returns the current value of a counter.
</Desc>
    <FName>Counter::resetValue</FName>
    <Desc>void Counter::resetValue ( void )
Counter::resetValue() resets the current value of a counter to its original initial value. 
See Also
Counter::getValue() - Get the current value of a counter 
Counter::bumpValue() - Change the current value of a counter 
</Desc>
    <FName>Counter::setCounterClass</FName>
    <Desc>static void Counter::setCounterClass ( string $name )
Counter::setCounterClass() changes the class of objects returned by Counter::getNamed(). The class being set must not have a public constructor and must be a subclass of Counter. If these conditions are not met, a fatal error is raised. This is a static function.
</Desc>
    <FName>counter_bump_value</FName>
    <Desc>void counter_bump_value ( resource $counter , int $offset )
counter_bump_value() updates the current value of a counter resource.
</Desc>
    <FName>counter_bump</FName>
    <Desc>void counter_bump ( int $offset )
counter_bump() updates the current value of the basic interface's counter.
</Desc>
    <FName>counter_create</FName>
    <Desc>resource counter_create ( string $name [, int $initial_value [, int $flags ]] )
Creates a counter which maintains a single numeric value.
</Desc>
    <FName>counter_get_meta</FName>
    <Desc>mixed counter_get_meta ( resource $counter , int $attribute )
counter_get_meta() returns metainformation about a counter resource.
</Desc>
    <FName>counter_get_named</FName>
    <Desc>resource Counter::getNamed ( string $name )
counter_get_named() returns an existing counter by name if that name exists, or NULL otherwise.
</Desc>
    <FName>counter_get_value</FName>
    <Desc>int counter_get_value ( resource $counter )
counter_get_value() returns the current value of a counter resource.
</Desc>
    <FName>counter_get</FName>
    <Desc>int counter_get ( void )
counter_get() returns the current value of the basic interface's counter.
</Desc>
    <FName>counter_reset_value</FName>
    <Desc>void counter_reset_value ( resource $counter )
counter_reset_value() resets the current value of a counter resource to its original initial value.
</Desc>
    <FName>counter_reset</FName>
    <Desc>void counter_reset ( void )
counter_reset() resets the current value of the basic interface's counter to its original initial value. 
See Also
counter_get() - Get the current value of the basic counter 
counter_bump() - Update the current value of the basic counter 
</Desc>
    <FName>IntlBreakIterator::__construct</FName>
    <Desc>private IntlBreakIterator::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::createCharacterInstance</FName>
    <Desc>public static IntlBreakIterator IntlBreakIterator::createCharacterInstance ([ string $locale ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::createCodePointInstance</FName>
    <Desc>public static IntlBreakIterator IntlBreakIterator::createCodePointInstance ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::createLineInstance</FName>
    <Desc>public static IntlBreakIterator IntlBreakIterator::createLineInstance ([ string $locale ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::createSentenceInstance</FName>
    <Desc>public static IntlBreakIterator IntlBreakIterator::createSentenceInstance ([ string $locale ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::createTitleInstance</FName>
    <Desc>public static IntlBreakIterator IntlBreakIterator::createTitleInstance ([ string $locale ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::createWordInstance</FName>
    <Desc>public static IntlBreakIterator IntlBreakIterator::createWordInstance ([ string $locale ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::current</FName>
    <Desc>public int IntlBreakIterator::current ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::first</FName>
    <Desc>public int IntlBreakIterator::first ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::following</FName>
    <Desc>public int IntlBreakIterator::following ( int $offset )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::getErrorCode</FName>
    <Desc>Object oriented style (method):
public int IntlBreakIterator::getErrorCode ( void )
Procedural style:
int intl_get_error_code ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::getErrorMessage</FName>
    <Desc>Object oriented style (method):
public string IntlBreakIterator::getErrorMessage ( void )
Procedural style:
string intl_get_error_message ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::getLocale</FName>
    <Desc>public string IntlBreakIterator::getLocale ( string $locale_type )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::getPartsIterator</FName>
    <Desc>public IntlPartsIterator IntlBreakIterator::getPartsIterator ([ int $key_type = IntlPartsIterator::KEY_SEQUENTIAL ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::getText</FName>
    <Desc>public string IntlBreakIterator::getText ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::isBoundary</FName>
    <Desc>public bool IntlBreakIterator::isBoundary ( int $offset )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::last</FName>
    <Desc>public int IntlBreakIterator::last ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::next</FName>
    <Desc>public int IntlBreakIterator::next ([ int $offset ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::preceding</FName>
    <Desc>public int IntlBreakIterator::preceding ( int $offset )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::previous</FName>
    <Desc>public int IntlBreakIterator::previous ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlBreakIterator::setText</FName>
    <Desc>public bool IntlBreakIterator::setText ( string $text )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlCalendar::add</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::add ( int $field , int $amount )
Procedural style 
bool intlcal_add ( IntlCalendar $cal , int $field , int $amount )
Add a signed amount to a field. Adding a positive amount allows advances in time, even if the numeric value of the field decreases (e.g. when working with years in BC dates). 
Other fields may need to adjusted – for instance, adding a month to the 31st of January will result in the 28th (or 29th) of February. Contrary to IntlCalendar::roll(), when a value wraps around, more significant fields may change. For instance, adding a day to the 31st of January will result in the 1st of February, not the 1st of Janurary.
</Desc>
    <FName>IntlCalendar::after</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::after ( IntlCalendar $other )
Procedural style 
bool intlcal_after ( IntlCalendar $cal , IntlCalendar $other )
Returns whether this object?s time succeeds the argument?s time.
</Desc>
    <FName>IntlCalendar::before</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::before ( IntlCalendar $other )
Procedural style 
bool intlcal_before ( IntlCalendar $cal , IntlCalendar $other )
Returns whether this object?s time precedes the argument?s time.
</Desc>
    <FName>IntlCalendar::clear</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::clear ([ int $field = NULL ] )
Procedural style 
bool intlcal_clear ( IntlCalendar $cal [, int $field = NULL ] )
Clears either all of the fields or a specific field. A cleared field is marked as unset, giving it the lowest priority against overlapping fields or even default values when calculating the time. Additionally, its value is set to 0, though given the field?s low priority, its value may have been internally set to another value by the time the field has finished been queried.
</Desc>
    <FName>IntlCalendar::__construct</FName>
    <Desc>private IntlCalendar::__construct ( void )
A private constructor for disallowing instantiation with the new operator. 
Call IntlCalendar::createInstance() instead.
</Desc>
    <FName>IntlCalendar::createInstance</FName>
    <Desc>Object oriented style 
public static IntlCalendar IntlCalendar::createInstance ([ mixed $timeZone = NULL [, string $locale = "" ]] )
Procedural style 
IntlCalendar intlcal_create_instance ([ mixed $timeZone = NULL [, string $locale = "" ]] )
Given a timezone and locale, this method creates an IntlCalendar object. This factory method may return a subclass of IntlCalendar. 
The calendar created will represent the time instance at which it was created, based on the system time. The fields can all be cleared by calling IntCalendar::clear() with no arguments. See also IntlGregorianCalendar::__construct().
</Desc>
    <FName>IntlCalendar::equals</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::equals ( IntlCalendar $other )
Procedural style 
bool intlcal_equals ( IntlCalendar $cal , IntlCalendar $other )
Returns true if this calendar and the given calendar have the same time. The settings, calendar types and field states do not have to be the same.
</Desc>
    <FName>IntlCalendar::fieldDifference</FName>
    <Desc>Object oriented style 
public int IntlCalendar::fieldDifference ( float $when , int $field )
Procedural style 
int intlcal_field_difference ( IntlCalendar $cal , float $when , int $field )
Return the difference between the given time and the time this object is set to, with respect to the quantity specified the field parameter. 
This method is meant to be called successively, first with the most significant field of interest down to the least significant field. To this end, as a side effect, this calendar?s value for the field specified is advanced by the amount returned.
</Desc>
    <FName>IntlCalendar::fromDateTime</FName>
    <Desc>Object oriented style 
public static IntlCalendar IntlCalendar::fromDateTime ( mixed $dateTime )
Procedural style 
IntlCalendar intlcal_from_date_time ( mixed $dateTime )
Creates an IntlCalendar object either from a DateTime object or from a string from which a DateTime object can be built. 
The new calendar will represent not only the same instant as the given DateTime (subject to precision loss for dates very far into the past or future), but also the same timezone (subject to the caveat that different timezone databases will be used, and therefore the results may differ).
</Desc>
    <FName>IntlCalendar::get</FName>
    <Desc>Object oriented style 
public int IntlCalendar::get ( int $field )
Procedural style 
int intlcal_get ( IntlCalendar $cal , int $field )
Gets the value for a specific field.
</Desc>
    <FName>IntlCalendar::getActualMaximum</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getActualMaximum ( int $field )
Procedural style 
int intlcal_get_actual_maximum ( IntlCalendar $cal , int $field )
Returns a field?s relative maximum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the smallest relative maximum for the field and would increment it until reaching the global maximum or the field value wraps around, in which the value returned would be the global maximum or the value before the wrapping, respectively. 
For instance, in the gregorian calendar, the actual maximum value for the day of month would vary between 28 and 31, depending on the month and year of the current time.
</Desc>
    <FName>IntlCalendar::getActualMinimum</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getActualMinimum ( int $field )
Procedural style 
int intlcal_get_actual_minimum ( IntlCalendar $cal , int $field )
Returns a field?s relative minimum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the greatest relative minimum for the field and would decrement it until reaching the global minimum or the field value wraps around, in which the value returned would be the global minimum or the value before the wrapping, respectively. 
For the Gregorian calendar, this is always the same as IntlCalendar::getMinimum().
</Desc>
    <FName>IntlCalendar::getAvailableLocales</FName>
    <Desc>Object oriented style 
public static array IntlCalendar::getAvailableLocales ( void )
Procedural style 
array intlcal_get_available_locales ( void )
Gives the list of locales for which calendars are installed. As of ICU 51, this is the list of all installed ICU locales.
</Desc>
    <FName>IntlCalendar::getDayOfWeekType</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getDayOfWeekType ( int $dayOfWeek )
Procedural style 
int intlcal_get_day_of_week_type ( IntlCalendar $cal , int $dayOfWeek )
Returns whether the passed day is a weekday (IntlCalendar::DOW_TYPE_WEEKDAY), a weekend day (IntlCalendar::DOW_TYPE_WEEKEND), a day during which a transition occurs into the weekend (IntlCalendar::DOW_TYPE_WEEKEND_OFFSET) or a day during which the weekend ceases (IntlCalendar::DOW_TYPE_WEEKEND_CEASE). 
If the return is either IntlCalendar::DOW_TYPE_WEEKEND_OFFSET or IntlCalendar::DOW_TYPE_WEEKEND_CEASE, then IntlCalendar::getWeekendTransition() can be called to obtain the time of the transition. 
This function requires ICU 4.4 or later.
</Desc>
    <FName>IntlCalendar::getErrorCode</FName>
    <Desc>Object oriented style (method):
public int IntlCalendar::getErrorCode ( void )
Procedural style:
int intlcal_get_error_code ( IntlCalendar $calendar )
Returns the numeric ICU error code for the last call on this object (including cloning) or the IntlCalendar given for the calendar parameter (in the procedural?style version). This may indicate only a warning (negative error code) or no error at all (U_ZERO_ERROR). The actual presence of an error can be tested with intl_is_failure(). 
Invalid arguments detected on the PHP side (before invoking functions of the ICU library) are not recorded for the purposes of this function. 
The last error that occurred in any call to a function of the intl extension, including early argument errors, can be obtained with intl_get_error_code(). This function resets the global error code, but not the object?s error code.
</Desc>
    <FName>intlcal_get_error_code</FName>
    <Desc>Object oriented style (method):
public int IntlCalendar::getErrorCode ( void )
Procedural style:
int intlcal_get_error_code ( IntlCalendar $calendar )
Returns the numeric ICU error code for the last call on this object (including cloning) or the IntlCalendar given for the calendar parameter (in the procedural?style version). This may indicate only a warning (negative error code) or no error at all (U_ZERO_ERROR). The actual presence of an error can be tested with intl_is_failure(). 
Invalid arguments detected on the PHP side (before invoking functions of the ICU library) are not recorded for the purposes of this function. 
The last error that occurred in any call to a function of the intl extension, including early argument errors, can be obtained with intl_get_error_code(). This function resets the global error code, but not the object?s error code.
</Desc>
    <FName>IntlCalendar::getErrorMessage</FName>
    <Desc>Object oriented style (method):
public string IntlCalendar::getErrorMessage ( void )
Procedural style:
string intlcal_get_error_message ( IntlCalendar $calendar )
Returns the error message (if any) associated with the error reported by IntlCalendar::getErrorCode() or intlcal_get_error_code(). If there is no associated error message, only the string representation of the name of the error constant will be returned. Otherwise, the message also includes a message set on the side of the PHP binding.
</Desc>
    <FName>intlcal_get_error_message</FName>
    <Desc>Object oriented style (method):
public string IntlCalendar::getErrorMessage ( void )
Procedural style:
string intlcal_get_error_message ( IntlCalendar $calendar )
Returns the error message (if any) associated with the error reported by IntlCalendar::getErrorCode() or intlcal_get_error_code(). If there is no associated error message, only the string representation of the name of the error constant will be returned. Otherwise, the message also includes a message set on the side of the PHP binding.
</Desc>
    <FName>IntlCalendar::getFirstDayOfWeek</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getFirstDayOfWeek ( void )
Procedural style 
int intlcal_get_first_day_of_week ( IntlCalendar $cal )
The week day deemed to start a week, either the default value for this locale or the value set with IntlCalendar::setFirstDayOfWeek().
</Desc>
    <FName>IntlCalendar::getGreatestMinimum</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getGreatestMinimum ( int $field )
Procedural style 
int intlcal_get_greatest_minimum ( IntlCalendar $cal , int $field )
Returns the largest local minimum for a field. This should be a value larger or equal to that returned by IntlCalendar::getActualMinimum(), which is in its turn larger or equal to that returned by IntlCalendar::getMinimum(). All these three functions return the same value for the Gregorian calendar.
</Desc>
    <FName>IntlCalendar::getKeywordValuesForLocale</FName>
    <Desc>Object oriented style 
public static Iterator IntlCalendar::getKeywordValuesForLocale ( string $key , string $locale , bool $commonlyUsed )
Procedural style 
Iterator intlcal_get_keyword_values_for_locale ( string $key , string $locale , bool $commonlyUsed )
For a given locale key, get the set of values for that key that would result in a different behavior. For now, only the 'calendar' keyword is supported. 
This function requires ICU 4.2 or later.
</Desc>
    <FName>IntlCalendar::getLeastMaximum</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getLeastMaximum ( int $field )
Procedural style 
int intlcal_get_least_maximum ( IntlCalendar $cal , int $field )
Returns the smallest local maximumw for a field. This should be a value smaller or equal to that returned by IntlCalendar::getActualMaxmimum(), which is in its turn smaller or equal to that returned by IntlCalendar::getMaximum().
</Desc>
    <FName>IntlCalendar::getLocale</FName>
    <Desc>Object oriented style 
public string IntlCalendar::getLocale ( int $localeType )
Procedural style 
string intlcal_get_locale ( IntlCalendar $cal , int $localeType )
Returns the locale used by this calendar object.
</Desc>
    <FName>IntlCalendar::getMaximum</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getMaximum ( int $field )
Procedural style 
int intlcal_get_maximum ( IntlCalendar $cal , int $field )
Gets the global maximum for a field, in this specific calendar. This value is larger or equal to that returned by IntlCalendar::getActualMaximum(), which is in its turn larger or equal to that returned by IntlCalendar::getLeastMaximum().
</Desc>
    <FName>IntlCalendar::getMinimalDaysInFirstWeek</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getMinimalDaysInFirstWeek ( void )
Procedural style 
int intlcal_get_minimal_days_in_first_week ( IntlCalendar $cal )
Returns the smallest number of days the first week of a year or month must have in the new year or month. For instance, in the Gregorian calendar, if this value is 1, then the first week of the year will necessarily include January 1st, while if this value is 7, then the week with January 1st will be the first week of the year only if the day of the week for January 1st matches the day of the week returned by IntlCalendar::getFirstDayOfWeek(); otherwise it will be the previous year?s last week.
</Desc>
    <FName>IntlCalendar::getMinimum</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getMinimum ( int $field )
Procedural style 
int intlcal_get_minimum ( IntlCalendar $cal , int $field )
Gets the global minimum for a field, in this specific calendar. This value is smaller or equal to that returned by IntlCalendar::getActualMinimum(), which is in its turn smaller or equal to that returned by IntlCalendar::getGreatestMinimum(). For the Gregorian calendar, these three functions always return the same value (for each field).
</Desc>
    <FName>IntlCalendar::getNow</FName>
    <Desc>Object oriented style 
public static float IntlCalendar::getNow ( void )
Procedural style 
float intlcal_get_now ( void )
The number of milliseconds that have passed since the reference date. This number is derived from the system time.
</Desc>
    <FName>IntlCalendar::getRepeatedWallTimeOption</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getRepeatedWallTimeOption ( void )
Procedural style 
int intlcal_get_repeated_wall_time_option ( IntlCalendar $cal )
Gets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is IntlCalendar::WALLTIME_LAST. 
This function requires ICU 4.9 or later.
</Desc>
    <FName>IntlCalendar::getSkippedWallTimeOption</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getSkippedWallTimeOption ( void )
Procedural style 
int intlcal_get_skipped_wall_time_option ( IntlCalendar $cal )
Gets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is IntlCalendar::WALLTIME_LAST. 
The calendar must be lenient for this option to have any effect, otherwise attempting to set a non-existing time will cause an error. 
This function requires ICU 4.9 or later.
</Desc>
    <FName>IntlCalendar::getTime</FName>
    <Desc>Object oriented style 
public float IntlCalendar::getTime ( void )
Procedural style 
float intlcal_get_time ( IntlCalendar $cal )
Returns the time associated with this object, expressed as the number of milliseconds since the epoch.
</Desc>
    <FName>IntlCalendar::getTimeZone</FName>
    <Desc>Object oriented style 
public IntlTimeZone IntlCalendar::getTimeZone ( void )
Procedural style 
IntlTimeZone intlcal_get_time_zone ( IntlCalendar $cal )
Returns the IntlTimeZone object associated with this calendar.
</Desc>
    <FName>IntlCalendar::getType</FName>
    <Desc>Object oriented style 
public string IntlCalendar::getType ( void )
Procedural style 
string intlcal_get_type ( IntlCalendar $cal )
A string describing the type of this calendar. This is one of the valid values for the calendar keyword value 'calendar'.
</Desc>
    <FName>IntlCalendar::getWeekendTransition</FName>
    <Desc>Object oriented style 
public int IntlCalendar::getWeekendTransition ( string $dayOfWeek )
Procedural style 
int intlcal_get_weekend_transition ( IntlCalendar $cal , string $dayOfWeek )
Returns the number of milliseconds after midnight at which the weekend begins or ends. 
This is only applicable for days of the week for which IntlCalendar::getDayOfWeekType() returns either IntlCalendar::DOW_TYPE_WEEKEND_OFFSET or IntlCalendar::DOW_TYPE_WEEKEND_CEASE. Calling this function for other days of the week is an error condition. 
This function requires ICU 4.4 or later.
</Desc>
    <FName>IntlCalendar::inDaylightTime</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::inDaylightTime ( void )
Procedural style 
bool intlcal_in_daylight_time ( IntlCalendar $cal )
Whether, for the instant represented by this object and for this object?s timezone, daylight saving time is in place.
</Desc>
    <FName>IntlCalendar::isEquivalentTo</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::isEquivalentTo ( IntlCalendar $other )
Procedural style 
bool intlcal_is_equivalent_to ( IntlCalendar $cal , IntlCalendar $other )
Returns whether this and the given object are equivalent for all purposes except as to the time they have set. The locales do not have to match, as long as no change in behavior results from such mismatch. This includes the timezone, whether the lenient mode is set, the repeated and skipped wall time settings, the days of the week when the weekend starts and ceases and the times where such transitions occur. It may also include other calendar specific settings, such as the Gregorian/Julian transition instant.
</Desc>
    <FName>IntlCalendar::isLenient</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::isLenient ( void )
Procedural style 
bool intlcal_is_lenient ( IntlCalendar $cal )
Returns whether the current date/time interpretations is lenient (the default). If that is case, some out of range values for fields will be accepted instead of raising an error.
</Desc>
    <FName>IntlCalendar::isSet</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::isSet ( int $field )
Procedural style 
bool intlcal_is_set ( IntlCalendar $cal , int $field )
Returns whether a field is set (as opposed to clear). Set fields take priority over unset fields and their default values when the date/time is being calculated. Fields set later take priority over fields set earlier.
</Desc>
    <FName>IntlCalendar::isWeekend</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::isWeekend ([ float $date = NULL ] )
Procedural style 
bool intlcal_is_weekend ( IntlCalendar $cal [, float $date = NULL ] )
Returns whether either the obejct?s current time or the provided timestamp occur during a weekend in this object?s calendar system. 
This function requires ICU 4.4 or later.
</Desc>
    <FName>IntlCalendar::roll</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::roll ( int $field , mixed $amountOrUpOrDown )
Procedural style 
bool intlcal_roll ( IntlCalendar $cal , int $field , mixed $amountOrUpOrDown )
Adds a (signed) amount to a field. The difference with respect to IntlCalendar::add() is that when the field value overflows, it does not carry into more significant fields.
</Desc>
    <FName>IntlCalendar::set</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::set ( int $field , int $value )
public bool IntlCalendar::set ( int $year , int $month [, int $dayOfMonth = NULL [, int $hour = NULL [, int $minute = NULL [, int $second = NULL ]]]] )
Procedural style 
bool intlcal_set ( IntlCalendar $cal , int $field , int $value )
bool intlcal_set ( IntlCalendar $cal , int $year , int $month [, int $dayOfMonth = NULL [, int $hour = NULL [, int $minute = NULL [, int $second = NULL ]]]] )
Sets either a specific field to the given value, or sets at once several common fields. The range of values that are accepted depend on whether the calendar is using the lenient mode. 
For fields that conflict, the fields that are set later have priority. 
This method cannot be called with exactly four arguments.
</Desc>
    <FName>IntlCalendar::setFirstDayOfWeek</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::setFirstDayOfWeek ( int $dayOfWeek )
Procedural style 
bool intlcal_set_first_day_of_week ( IntlCalendar $cal , int $dayOfWeek )
Defines the day of week deemed to start the week. This affects the behavior of fields that depend on the concept of week start and end such as IntlCalendar::FIELD_WEEK_OF_YEAR and IntlCalendar::FIELD_YEAR_WOY.
</Desc>
    <FName>IntlCalendar::setLenient</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::setLenient ( bool $isLenient )
Procedural style 
bool intlcal_set_lenient ( IntlCalendar $cal , bool $isLenient )
Defines whether the calendar is ‘lenient mode’. In such a mode, some of out-of-bounds values for some fields are accepted, the behavior being similar to that of IntlCalendar::add() (i.e., the value wraps around, carrying into more significant fields each time). If the lenient mode is off, then such values will generate an error.
</Desc>
    <FName>IntlCalendar::setMinimalDaysInFirstWeek</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::setMinimalDaysInFirstWeek ( int $minimalDays )
Procedural style 
bool intlcal_get_minimal_days_in_first_week ( IntlCalendar $cal , int $minimalDays )
Sets the smallest number of days the first week of a year or month must have in the new year or month. For instance, in the Gregorian calendar, if this value is 1, then the first week of the year will necessarily include January 1st, while if this value is 7, then the week with January 1st will be the first week of the year only if the day of the week for January 1st matches the day of the week returned by IntlCalendar::getFirstDayOfWeek(); otherwise it will be the previous year?s last week.
</Desc>
    <FName>IntlCalendar::setRepeatedWallTimeOption</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::setRepeatedWallTimeOption ( int $wallTimeOption )
Procedural style 
bool intlcal_set_repeated_wall_time_option ( IntlCalendar $cal , int $wallTimeOption )
Sets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is IntlCalendar::WALLTIME_LAST (take the post-DST instant). The other possible value is IntlCalendar::WALLTIME_FIRST (take the instant that occurs during DST). 
This function requires ICU 4.9 or later.
</Desc>
    <FName>IntlCalendar::setSkippedWallTimeOption</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::setSkippedWallTimeOption ( int $wallTimeOption )
Procedural style 
bool intlcal_set_skipped_wall_time_option ( IntlCalendar $cal , int $wallTimeOption )
Sets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is IntlCalendar::WALLTIME_LAST (take it as being the same instant as the one when the wall time is one hour more). Alternative values are IntlCalendar::WALLTIME_FIRST (same instant as the one with a wall time of one hour less) and IntlCalendar::WALLTIME_NEXT_VALID (same instant as when DST begins). 
This affects only the instant represented by the calendar (as reported by IntlCalendar::getTime()), the field values will not be rewritten accordingly. 
The calendar must be lenient for this option to have any effect, otherwise attempting to set a non-existing time will cause an error. 
This function requires ICU 4.9 or later.
</Desc>
    <FName>IntlCalendar::setTime</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::setTime ( float $date )
Procedural style 
bool intlcal_set_time ( IntlCalendar $cal , float $date )
Sets the instant represented by this object. The instant is represented by a float whose value should be an integer number of milliseconds since the epoch (1 Jan 1970 00:00:00.000 UTC), ignoring leap seconds. All the field values will be recalculated accordingly.
</Desc>
    <FName>IntlCalendar::setTimeZone</FName>
    <Desc>Object oriented style 
public bool IntlCalendar::setTimeZone ( mixed $timeZone )
Procedural style 
bool intlcal_set_time_zone ( IntlCalendar $cal , mixed $timeZone )
Defines a new timezone for this calendar. The time represented by the object is preserved to the detriment of the field values.
</Desc>
    <FName>IntlCalendar::toDateTime</FName>
    <Desc>Object oriented style 
public DateTime IntlCalendar::toDateTime ( void )
Procedural style 
DateTime intlcal_to_date_time ( IntlCalendar $cal )
Create a DateTime object that represents the same instant (up to second precision, with a rounding error of less than 1 second) and has an analog timezone to this object (the difference being DateTime?s timezone will be backed by PHP?s timezone while IntlCalendar?s timezone is backed by ICU?s).
</Desc>
    <FName>IntlChar::charAge</FName>
    <Desc>public static array IntlChar::charAge ( mixed $codepoint )
Gets the "age" of the code point. 
The "age" is the Unicode version when the code point was first designated (as a non-character or for Private Use) or assigned a character. This can be useful to avoid emitting code points to receiving processes that do not accept newer characters.
</Desc>
    <FName>IntlChar::charDigitValue</FName>
    <Desc>public static int IntlChar::charDigitValue ( mixed $codepoint )
Returns the decimal digit value of a decimal digit character. 
Such characters have the general category "Nd" (decimal digit numbers) and a Numeric_Type of Decimal.
</Desc>
    <FName>IntlChar::charDirection</FName>
    <Desc>public static int IntlChar::charDirection ( mixed $codepoint )
Returns the bidirectional category value for the code point, which is used in the » Unicode bidirectional algorithm (UAX #9). 
Note: 
Some unassigned code points have bidi values of R or AL because they are in blocks that are reserved for Right-To-Left scripts.
</Desc>
    <FName>IntlChar::charFromName</FName>
    <Desc>public static int IntlChar::charFromName ( string $characterName [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME ] )
Finds a Unicode character by its name and returns its code point value. 
The name is matched exactly and completely. If the name does not correspond to a code point, FALSE is returned. 
A Unicode 1.0 name is matched only if it differs from the modern name. Unicode names are all uppercase. Extended names are lowercase followed by an uppercase hexadecimal number, and within angle brackets.
</Desc>
    <FName>IntlChar::charMirror</FName>
    <Desc>public static mixed IntlChar::charMirror ( mixed $codepoint )
Maps the specified character to a "mirror-image" character. 
For characters with the Bidi_Mirrored property, implementations sometimes need a "poor man's" mapping to another Unicode character (code point) such that the default glyph may serve as the mirror-image of the default glyph of the specified character. This is useful for text conversion to and from codepages with visual order, and for displays without glyph selection capabilities.
</Desc>
    <FName>IntlChar::charName</FName>
    <Desc>public static string IntlChar::charName ( mixed $codepoint [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME ] )
Retrieves the name of a Unicode character. 
Depending on nameChoice, the resulting character name is the "modern" name or the name that was defined in Unicode version 1.0. The name contains only "invariant" characters like A-Z, 0-9, space, and '-'. Unicode 1.0 names are only retrieved if they are different from the modern names and if ICU contains the data for them.
</Desc>
    <FName>IntlChar::charType</FName>
    <Desc>public static int IntlChar::charType ( mixed $codepoint )
Returns the general category value for the code point.
</Desc>
    <FName>IntlChar::chr</FName>
    <Desc>public static string IntlChar::chr ( mixed $codepoint )
Returns a string containing the character specified by the Unicode code point value. 
This function compliments IntlChar::ord().
</Desc>
    <FName>IntlChar::digit</FName>
    <Desc>public static int IntlChar::digit ( string $codepoint [, int $radix = 10 ] )
Returns the decimal digit value of the code point in the specified radix. 
If the radix is not in the range 2<=radix<=36 or if the value of codepoint is not a valid digit in the specified radix, FALSE is returned. A character is a valid digit if at least one of the following is true: 
The character has a decimal digit value. Such characters have the general category "Nd" (decimal digit numbers) and a Numeric_Type of Decimal. In this case the value is the character's decimal digit value. 
The character is one of the uppercase Latin letters 'A' through 'Z'. In this case the value is c-'A'+10. 
The character is one of the lowercase Latin letters 'a' through 'z'. In this case the value is ch-'a'+10. 
Latin letters from both the ASCII range (0061..007A, 0041..005A) as well as from the Fullwidth ASCII range (FF41..FF5A, FF21..FF3A) are recognized.
</Desc>
    <FName>IntlChar::enumCharNames</FName>
    <Desc>public static void IntlChar::enumCharNames ( mixed $start , mixed $limit , callable $callback [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME ] )
Enumerate all assigned Unicode characters between the start and limit code points (start inclusive, limit exclusive) and call a function for each, passing the code point value and the character name. 
For Unicode 1.0 names, only those are enumerated that differ from the modern names.
</Desc>
    <FName>IntlChar::enumCharTypes</FName>
    <Desc>public static void IntlChar::enumCharTypes ( callable $callback )
Enumerates efficiently all code points with their Unicode general categories. This is useful for building data structures, for enumerating all assigned code points, etc. 
For each contiguous range of code points with a given general category ("character type"), the callback function is called. Adjacent ranges have different types. The Unicode Standard guarantees that the numeric value of the type is 0..31.
</Desc>
    <FName>IntlChar::foldCase</FName>
    <Desc>public static mixed IntlChar::foldCase ( mixed $codepoint [, int $options = IntlChar::FOLD_CASE_DEFAULT ] )
The given character is mapped to its case folding equivalent; if the character has no case folding equivalent, the character itself is returned.
</Desc>
    <FName>IntlChar::forDigit</FName>
    <Desc>public static int IntlChar::forDigit ( int $digit [, int $radix = 10 ] )
Determines the character representation for a specific digit in the specified radix. 
If the value of radix is not a valid radix, or the value of digit is not a valid digit in the specified radix, the null character (U+0000) is returned. 
The radix argument is valid if it is greater than or equal to 2 and less than or equal to 36. The digit argument is valid if 0 <= digit < radix. 
If the digit is less than 10, then '0' + digit is returned. Otherwise, the value 'a' + digit - 10 is returned.
</Desc>
    <FName>IntlChar::getBidiPairedBracket</FName>
    <Desc>public static mixed IntlChar::getBidiPairedBracket ( mixed $codepoint )
Maps the specified character to its paired bracket character. 
For Bidi_Paired_Bracket_Type!=None, this is the same as IntlChar::charMirror(). Otherwise codepoint itself is returned.
</Desc>
    <FName>IntlChar::getBlockCode</FName>
    <Desc>public static int IntlChar::getBlockCode ( mixed $codepoint )
Returns the Unicode allocation block that contains the character.
</Desc>
    <FName>IntlChar::getCombiningClass</FName>
    <Desc>public static int IntlChar::getCombiningClass ( mixed $codepoint )
Returns the combining class of the code point.
</Desc>
    <FName>IntlChar::getFC_NFKC_Closure</FName>
    <Desc>public static string IntlChar::getFC_NFKC_Closure ( mixed $codepoint )
Gets the FC_NFKC_Closure property string for a character.
</Desc>
    <FName>IntlChar::getIntPropertyMaxValue</FName>
    <Desc>public static int IntlChar::getIntPropertyMaxValue ( int $property )
Gets the maximum value for an enumerated/integer/binary Unicode property.
</Desc>
    <FName>IntlChar::getIntPropertyMinValue</FName>
    <Desc>public static int IntlChar::getIntPropertyMinValue ( int $property )
Gets the minimum value for an enumerated/integer/binary Unicode property.
</Desc>
    <FName>IntlChar::getIntPropertyValue</FName>
    <Desc>public static int IntlChar::getIntPropertyValue ( mixed $codepoint , int $property )
Gets the property value for an enumerated or integer Unicode property for a code point. Also returns binary and mask property values.
</Desc>
    <FName>IntlChar::getNumericValue</FName>
    <Desc>public static float IntlChar::getNumericValue ( mixed $codepoint )
Gets the numeric value for a Unicode code point as defined in the Unicode Character Database. 
For characters without any numeric values in the Unicode Character Database, this function will return IntlChar::NO_NUMERIC_VALUE.
</Desc>
    <FName>IntlChar::getPropertyEnum</FName>
    <Desc>public static int IntlChar::getPropertyEnum ( string $alias )
Returns the property constant value for a given property name, as specified in the Unicode database file PropertyAliases.txt. Short, long, and any other variants are recognized. 
In addition, this function maps the synthetic names "gcm" / "General_Category_Mask" to the property IntlChar::PROPERTY_GENERAL_CATEGORY_MASK. These names are not in PropertyAliases.txt. 
This function compliments IntlChar::getPropertyName().
</Desc>
    <FName>IntlChar::getPropertyName</FName>
    <Desc>public static string IntlChar::getPropertyName ( int $property [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME ] )
Returns the Unicode name for a given property, as given in the Unicode database file PropertyAliases.txt. 
In addition, this function maps the property IntlChar::PROPERTY_GENERAL_CATEGORY_MASK to the synthetic names "gcm" / "General_Category_Mask". These names are not in PropertyAliases.txt. 
This function compliments IntlChar::getPropertyEnum().
</Desc>
    <FName>IntlChar::getPropertyValueEnum</FName>
    <Desc>public static int IntlChar::getPropertyValueEnum ( int $property , string $name )
Returns the property value integer for a given value name, as specified in the Unicode database file PropertyValueAliases.txt. Short, long, and any other variants are recognized. 
Note: 
Some of the names in PropertyValueAliases.txt will only be recognized with IntlChar::PROPERTY_GENERAL_CATEGORY_MASK, not IntlChar::PROPERTY_GENERAL_CATEGORY. These include: 
"C" / "Other" 
"L" / "Letter" 
"LC" / "Cased_Letter" 
"M" / "Mark" 
"N" / "Number" 
"P" / "Punctuation" 
"S" / "Symbol" 
"Z" / "Separator"
</Desc>
    <FName>IntlChar::getPropertyValueName</FName>
    <Desc>public static string IntlChar::getPropertyValueName ( int $property , int $value [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME ] )
Returns the Unicode name for a given property value, as given in the Unicode database file PropertyValueAliases.txt. 
Note: 
Some of the names in PropertyValueAliases.txt can only be retrieved using IntlChar::PROPERTY_GENERAL_CATEGORY_MASK, not IntlChar::PROPERTY_GENERAL_CATEGORY. These include: 
"C" / "Other" 
"L" / "Letter" 
"LC" / "Cased_Letter" 
"M" / "Mark" 
"N" / "Number" 
"P" / "Punctuation" 
"S" / "Symbol" 
"Z" / "Separator"
</Desc>
    <FName>IntlChar::getUnicodeVersion</FName>
    <Desc>public static array IntlChar::getUnicodeVersion ( void )
Gets the Unicode version information. 
The version array is filled in with the version information for the Unicode standard that is currently used by ICU. For example, Unicode version 3.1.1 is represented as an array with the values [3, 1, 1, 0].
</Desc>
    <FName>IntlChar::hasBinaryProperty</FName>
    <Desc>public static bool IntlChar::hasBinaryProperty ( mixed $codepoint , int $property )
Checks a binary Unicode property for a code point. 
Unicode, especially in version 3.2, defines many more properties than the original set in UnicodeData.txt. 
The properties APIs are intended to reflect Unicode properties as defined in the Unicode Character Database (UCD) and Unicode Technical Reports (UTR). For details about the properties see » http://www.unicode.org/ucd/. For names of Unicode properties see the UCD file PropertyAliases.txt.
</Desc>
    <FName>IntlChar::isalnum</FName>
    <Desc>public static bool IntlChar::isalnum ( mixed $codepoint )
Determines whether the specified code point is an alphanumeric character (letter or digit). TRUE for characters with general categories "L" (letters) and "Nd" (decimal digit numbers).
</Desc>
    <FName>IntlChar::isalpha</FName>
    <Desc>public static bool IntlChar::isalpha ( mixed $codepoint )
Determines whether the specified code point is a letter character. TRUE for general categories "L" (letters).
</Desc>
    <FName>IntlChar::isbase</FName>
    <Desc>public static bool IntlChar::isbase ( mixed $codepoint )
Determines whether the specified code point is a base character. TRUE for general categories "L" (letters), "N" (numbers), "Mc" (spacing combining marks), and "Me" (enclosing marks). 
Note: 
This is different from the Unicode definition in chapter 3.5, conformance clause D13, which defines base characters to be all characters (not Cn) that do not graphically combine with preceding characters (M) and that are neither control (Cc) or format (Cf) characters.
</Desc>
    <FName>IntlChar::isblank</FName>
    <Desc>public static bool IntlChar::isblank ( mixed $codepoint )
Determines whether the specified code point is a "blank" or "horizontal space", a character that visibly separates words on a line. 
The following are equivalent definitions: 
TRUE for Unicode White_Space characters except for "vertical space controls" where "vertical space controls" are the following characters: U+000A (LF) U+000B (VT) U+000C (FF) U+000D (CR) U+0085 (NEL) U+2028 (LS) U+2029 (PS) 
TRUE for U+0009 (TAB) and characters with general category "Zs" (space separators) except Zero Width Space (ZWSP, U+200B).
</Desc>
    <FName>IntlChar::iscntrl</FName>
    <Desc>public static bool IntlChar::iscntrl ( mixed $codepoint )
Determines whether the specified code point is a control character. 
A control character is one of the following: 
ISO 8-bit control character (U+0000..U+001f and U+007f..U+009f) 
IntlChar::CHAR_CATEGORY_CONTROL_CHAR (Cc) 
IntlChar::CHAR_CATEGORY_FORMAT_CHAR (Cf) 
IntlChar::CHAR_CATEGORY_LINE_SEPARATOR (Zl) 
IntlChar::CHAR_CATEGORY_PARAGRAPH_SEPARATOR (Zp)
</Desc>
    <FName>IntlChar::isdefined</FName>
    <Desc>public static bool IntlChar::isdefined ( mixed $codepoint )
Determines whether the specified code point is "defined", which usually means that it is assigned a character. 
TRUE for general categories other than "Cn" (other, not assigned). 
Note: 
Note that non-character code points (e.g., U+FDD0) are not "defined" (they are Cn), but surrogate code points are "defined" (Cs).
</Desc>
    <FName>IntlChar::isdigit</FName>
    <Desc>public static bool IntlChar::isdigit ( mixed $codepoint )
Determines whether the specified code point is a digit character. 
TRUE for characters with general category "Nd" (decimal digit numbers). Beginning with Unicode 4, this is the same as testing for the Numeric_Type of Decimal.
</Desc>
    <FName>IntlChar::isgraph</FName>
    <Desc>public static bool IntlChar::isgraph ( mixed $codepoint )
Determines whether the specified code point is a "graphic" character (printable, excluding spaces). 
TRUE for all characters except those with general categories "Cc" (control codes), "Cf" (format controls), "Cs" (surrogates), "Cn" (unassigned), and "Z" (separators).
</Desc>
    <FName>IntlChar::isIDIgnorable</FName>
    <Desc>public static bool IntlChar::isIDIgnorable ( mixed $codepoint )
Determines if the specified character should be regarded as an ignorable character in an identifier. 
TRUE for characters with general category "Cf" (format controls) as well as non-whitespace ISO controls (U+0000..U+0008, U+000E..U+001B, U+007F..U+009F). 
Note: 
Note that Unicode just recommends to ignore Cf (format controls).
</Desc>
    <FName>IntlChar::isIDPart</FName>
    <Desc>public static bool IntlChar::isIDPart ( mixed $codepoint )
Determines if the specified character is permissible in an identifier. 
TRUE for characters with general categories "L" (letters), "Nl" (letter numbers), "Nd" (decimal digits), "Mc" and "Mn" (combining marks), "Pc" (connecting punctuation), and u_isIDIgnorable(c). 
Note: 
This is almost the same as Unicode's ID_Continue (IntlChar::PROPERTY_ID_CONTINUE) except that Unicode recommends to ignore Cf which is less than IntlChar::isIDIgnorable().
</Desc>
    <FName>IntlChar::isIDStart</FName>
    <Desc>public static bool IntlChar::isIDStart ( mixed $codepoint )
Determines if the specified character is permissible as the first character in an identifier according to Unicode (The Unicode Standard, Version 3.0, chapter 5.16 Identifiers). 
TRUE for characters with general categories "L" (letters) and "Nl" (letter numbers).
</Desc>
    <FName>IntlChar::isISOControl</FName>
    <Desc>public static bool IntlChar::isISOControl ( mixed $codepoint )
Determines whether the specified code point is an ISO control code. 
TRUE for U+0000..U+001f and U+007f..U+009f (general category "Cc").
</Desc>
    <FName>IntlChar::isJavaIDPart</FName>
    <Desc>public static bool IntlChar::isJavaIDPart ( mixed $codepoint )
Determines if the specified character is permissible in a Java identifier. 
In addition to IntlChar::isIDPart(), TRUE for characters with general category "Sc" (currency symbols).
</Desc>
    <FName>IntlChar::isJavaIDStart</FName>
    <Desc>public static bool IntlChar::isJavaIDStart ( mixed $codepoint )
Determines if the specified character is permissible as the start of a Java identifier. 
In addition to IntlChar::isIDStart(), TRUE for characters with general categories "Sc" (currency symbols) and "Pc" (connecting punctuation).
</Desc>
    <FName>IntlChar::isJavaSpaceChar</FName>
    <Desc>public static bool IntlChar::isJavaSpaceChar ( mixed $codepoint )
Determine if the specified code point is a space character according to Java. 
TRUE for characters with general categories "Z" (separators), which does not include control codes (e.g., TAB or Line Feed).
</Desc>
    <FName>IntlChar::islower</FName>
    <Desc>public static bool IntlChar::islower ( mixed $codepoint )
Determines whether the specified code point has the general category "Ll" (lowercase letter). 
Note: 
This misses some characters that are also lowercase but have a different general category value. In order to include those, use IntlChar::isULowercase().
</Desc>
    <FName>IntlChar::isMirrored</FName>
    <Desc>public static bool IntlChar::isMirrored ( mixed $codepoint )
Determines whether the code point has the Bidi_Mirrored property. 
This property is set for characters that are commonly used in Right-To-Left contexts and need to be displayed with a "mirrored" glyph.
</Desc>
    <FName>IntlChar::isprint</FName>
    <Desc>public static bool IntlChar::isprint ( mixed $codepoint )
Determines whether the specified code point is a printable character. 
TRUE for general categories other than "C" (controls).
</Desc>
    <FName>IntlChar::ispunct</FName>
    <Desc>public static bool IntlChar::ispunct ( mixed $codepoint )
Determines whether the specified code point is a punctuation character. 
TRUE for characters with general categories "P" (punctuation).
</Desc>
    <FName>IntlChar::isspace</FName>
    <Desc>public static bool IntlChar::isspace ( mixed $codepoint )
Determines if the specified character is a space character or not.
</Desc>
    <FName>IntlChar::istitle</FName>
    <Desc>public static bool IntlChar::istitle ( mixed $codepoint )
Determines whether the specified code point is a titlecase letter. 
TRUE for general category "Lt" (titlecase letter).
</Desc>
    <FName>IntlChar::isUAlphabetic</FName>
    <Desc>public static bool IntlChar::isUAlphabetic ( mixed $codepoint )
Check if a code point has the Alphabetic Unicode property. 
This is the same as IntlChar::hasBinaryProperty($codepoint, IntlChar::PROPERTY_ALPHABETIC)
</Desc>
    <FName>IntlChar::isULowercase</FName>
    <Desc>public static bool IntlChar::isULowercase ( mixed $codepoint )
Check if a code point has the Lowercase Unicode property. 
This is the same as IntlChar::hasBinaryProperty($codepoint, IntlChar::PROPERTY_LOWERCASE) 
Note: 
This is different than IntlChar::islower() and will return TRUE for more characters.
</Desc>
    <FName>IntlChar::isupper</FName>
    <Desc>public static bool IntlChar::isupper ( mixed $codepoint )
Determines whether the specified code point has the general category "Lu" (uppercase letter). 
Note: 
This misses some characters that are also uppercase but have a different general category value. In order to include those, use IntlChar::isUUppercase().
</Desc>
    <FName>IntlChar::isUUppercase</FName>
    <Desc>public static bool IntlChar::isUUppercase ( mixed $codepoint )
Check if a code point has the Uppercase Unicode property. 
This is the same as IntlChar::hasBinaryProperty($codepoint, IntlChar::PROPERTY_UPPERCASE) 
Note: 
This is different than IntlChar::isupper() and will return TRUE for more characters.
</Desc>
    <FName>IntlChar::isUWhiteSpace</FName>
    <Desc>public static bool IntlChar::isUWhiteSpace ( mixed $codepoint )
Check if a code point has the White_Space Unicode property. 
This is the same as IntlChar::hasBinaryProperty($codepoint, IntlChar::PROPERTY_WHITE_SPACE) 
Note: 
This is different from both IntlChar::isspace() and IntlChar::isWhitespace().
</Desc>
    <FName>IntlChar::isWhitespace</FName>
    <Desc>public static bool IntlChar::isWhitespace ( mixed $codepoint )
Determines if the specified code point is a whitespace character according to ICU. 
A character is considered to be a ICU whitespace character if and only if it satisfies one of the following criteria: 
It is a Unicode Separator character (categories "Z" = "Zs" or "Zl" or "Zp"), but is not also a non-breaking space (U+00A0 NBSP or U+2007 Figure Space or U+202F Narrow NBSP). 
It is U+0009 HORIZONTAL TABULATION. 
It is U+000A LINE FEED. 
It is U+000B VERTICAL TABULATION. 
It is U+000C FORM FEED. 
It is U+000D CARRIAGE RETURN. 
It is U+001C FILE SEPARATOR. 
It is U+001D GROUP SEPARATOR. 
It is U+001E RECORD SEPARATOR. 
It is U+001F UNIT SEPARATOR.
</Desc>
    <FName>IntlChar::isxdigit</FName>
    <Desc>public static bool IntlChar::isxdigit ( mixed $codepoint )
Determines whether the specified code point is a hexadecimal digit. 
TRUE for characters with general category "Nd" (decimal digit numbers) as well as Latin letters a-f and A-F in both ASCII and Fullwidth ASCII. (That is, for letters with code points 0041..0046, 0061..0066, FF21..FF26, FF41..FF46.) 
This is equivalent to IntlChar::digit($codepoint, 16) >= 0.
</Desc>
    <FName>IntlChar::ord</FName>
    <Desc>public static int IntlChar::ord ( mixed $character )
Returns the Unicode code point value of the given character. 
This function compliments IntlChar::chr().
</Desc>
    <FName>IntlChar::tolower</FName>
    <Desc>public static mixed IntlChar::tolower ( mixed $codepoint )
The given character is mapped to its lowercase equivalent. If the character has no lowercase equivalent, the original character itself is returned.
</Desc>
    <FName>IntlChar::totitle</FName>
    <Desc>public static mixed IntlChar::totitle ( mixed $codepoint )
The given character is mapped to its titlecase equivalent. If the character has no titlecase equivalent, the original character itself is returned.
</Desc>
    <FName>IntlChar::toupper</FName>
    <Desc>public static mixed IntlChar::toupper ( mixed $codepoint )
The given character is mapped to its uppercase equivalent. If the character has no uppercase equivalent, the character itself is returned.
</Desc>
    <FName>IntlCodePointBreakIterator::getLastCodePoint</FName>
    <Desc>public int IntlCodePointBreakIterator::getLastCodePoint ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlDateFormatter::create</FName>
    <Desc>Object oriented style 
public static IntlDateFormatter IntlDateFormatter::create ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = "" ]]] )
Object oriented style (constructor) 
public IntlDateFormatter::__construct ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = "" ]]] )
Procedural style 
IntlDateFormatter datefmt_create ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = "" ]]] )
Create a date formatter.
</Desc>
    <FName>datefmt_create</FName>
    <Desc>Object oriented style 
public static IntlDateFormatter IntlDateFormatter::create ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = "" ]]] )
Object oriented style (constructor) 
public IntlDateFormatter::__construct ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = "" ]]] )
Procedural style 
IntlDateFormatter datefmt_create ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = "" ]]] )
Create a date formatter.
</Desc>
    <FName>IntlDateFormatter::format</FName>
    <Desc>Object oriented style 
public string IntlDateFormatter::format ( mixed $value )
Procedural style 
string datefmt_format ( IntlDateFormatter $fmt , mixed $value )
Formats the time value as a string.
</Desc>
    <FName>datefmt_format</FName>
    <Desc>Object oriented style 
public string IntlDateFormatter::format ( mixed $value )
Procedural style 
string datefmt_format ( IntlDateFormatter $fmt , mixed $value )
Formats the time value as a string.
</Desc>
    <FName>IntlDateFormatter::formatObject</FName>
    <Desc>Object oriented style 
public static string IntlDateFormatter::formatObject ( object $object [, mixed $format = NULL [, string $locale = NULL ]] )
Procedural style 
public static string datefmt_format_object ( object $object [, mixed $format = NULL [, string $locale = NULL ]] )
This function allows formatting an IntlCalendar or DateTime object without first explicitly creating a IntlDateFormatter object. 
The temporary IntlDateFormatter that will be created will take the timezone from the passed in object. The timezone database bundled with PHP will not be used – ICU's will be used instead. The timezone identifier used in DateTime objects must therefore also exist in ICU's database.
</Desc>
    <FName>datefmt_format_object</FName>
    <Desc>Object oriented style 
public static string IntlDateFormatter::formatObject ( object $object [, mixed $format = NULL [, string $locale = NULL ]] )
Procedural style 
public static string datefmt_format_object ( object $object [, mixed $format = NULL [, string $locale = NULL ]] )
This function allows formatting an IntlCalendar or DateTime object without first explicitly creating a IntlDateFormatter object. 
The temporary IntlDateFormatter that will be created will take the timezone from the passed in object. The timezone database bundled with PHP will not be used – ICU's will be used instead. The timezone identifier used in DateTime objects must therefore also exist in ICU's database.
</Desc>
    <FName>IntlDateFormatter::getCalendar</FName>
    <Desc>Object oriented style 
int IntlDateFormatter::getCalendar ( void )
Procedural style 
int datefmt_get_calendar ( IntlDateFormatter $fmt )
</Desc>
    <FName>datefmt_get_calendar</FName>
    <Desc>Object oriented style 
int IntlDateFormatter::getCalendar ( void )
Procedural style 
int datefmt_get_calendar ( IntlDateFormatter $fmt )
</Desc>
    <FName>IntlDateFormatter::getCalendarObject</FName>
    <Desc>Object oriented style 
public IntlCalendar IntlDateFormatter::getCalendarObject ( void )
Procedural style 
IntlCalendar datefmt_get_calendar_object ( void )
Obtain a copy of the calendar object used internally by this formatter. This calendar will have a type (as in gregorian, japanese, buddhist, roc, persian, islamic, etc.) and a timezone that match the type and timezone used by the formatter. The date/time of the object is unspecified.
</Desc>
    <FName>datefmt_get_calendar_object</FName>
    <Desc>Object oriented style 
public IntlCalendar IntlDateFormatter::getCalendarObject ( void )
Procedural style 
IntlCalendar datefmt_get_calendar_object ( void )
Obtain a copy of the calendar object used internally by this formatter. This calendar will have a type (as in gregorian, japanese, buddhist, roc, persian, islamic, etc.) and a timezone that match the type and timezone used by the formatter. The date/time of the object is unspecified.
</Desc>
    <FName>IntlDateFormatter::getDateType</FName>
    <Desc>Object oriented style 
public int IntlDateFormatter::getDateType ( void )
Procedural style 
int datefmt_get_datetype ( IntlDateFormatter $fmt )
Returns date type used by the formatter.
</Desc>
    <FName>datefmt_get_datetype</FName>
    <Desc>Object oriented style 
public int IntlDateFormatter::getDateType ( void )
Procedural style 
int datefmt_get_datetype ( IntlDateFormatter $fmt )
Returns date type used by the formatter.
</Desc>
    <FName>IntlDateFormatter::getErrorCode</FName>
    <Desc>Object oriented style 
public int IntlDateFormatter::getErrorCode ( void )
Procedural style 
int datefmt_get_error_code ( IntlDateFormatter $fmt )
Get the error code from last operation. Returns error code from the last number formatting operation.
</Desc>
    <FName>datefmt_get_error_code</FName>
    <Desc>Object oriented style 
public int IntlDateFormatter::getErrorCode ( void )
Procedural style 
int datefmt_get_error_code ( IntlDateFormatter $fmt )
Get the error code from last operation. Returns error code from the last number formatting operation.
</Desc>
    <FName>IntlDateFormatter::getErrorMessage</FName>
    <Desc>Object oriented style 
public string IntlDateFormatter::getErrorMessage ( void )
Procedural style 
string datefmt_get_error_message ( IntlDateFormatter $fmt )
Get the error text from the last operation.
</Desc>
    <FName>datefmt_get_error_message</FName>
    <Desc>Object oriented style 
public string IntlDateFormatter::getErrorMessage ( void )
Procedural style 
string datefmt_get_error_message ( IntlDateFormatter $fmt )
Get the error text from the last operation.
</Desc>
    <FName>IntlDateFormatter::getLocale</FName>
    <Desc>Object oriented style 
public string IntlDateFormatter::getLocale ([ int $which ] )
Procedural style 
string datefmt_get_locale ( IntlDateFormatter $fmt [, int $which ] )
Get locale used by the formatter.
</Desc>
    <FName>datefmt_get_locale</FName>
    <Desc>Object oriented style 
public string IntlDateFormatter::getLocale ([ int $which ] )
Procedural style 
string datefmt_get_locale ( IntlDateFormatter $fmt [, int $which ] )
Get locale used by the formatter.
</Desc>
    <FName>IntlDateFormatter::getPattern</FName>
    <Desc>Object oriented style 
public string IntlDateFormatter::getPattern ( void )
Procedural style 
string datefmt_get_pattern ( IntlDateFormatter $fmt )
Get pattern used by the formatter.
</Desc>
    <FName>datefmt_get_pattern</FName>
    <Desc>Object oriented style 
public string IntlDateFormatter::getPattern ( void )
Procedural style 
string datefmt_get_pattern ( IntlDateFormatter $fmt )
Get pattern used by the formatter.
</Desc>
    <FName>IntlDateFormatter::getTimeType</FName>
    <Desc>Object oriented style 
public int IntlDateFormatter::getTimeType ( void )
Procedural style 
int datefmt_get_timetype ( IntlDateFormatter $fmt )
Return time type used by the formatter.
</Desc>
    <FName>datefmt_get_timetype</FName>
    <Desc>Object oriented style 
public int IntlDateFormatter::getTimeType ( void )
Procedural style 
int datefmt_get_timetype ( IntlDateFormatter $fmt )
Return time type used by the formatter.
</Desc>
    <FName>IntlDateFormatter::getTimeZone</FName>
    <Desc>Object oriented style 
public IntlTimeZone IntlDateFormatter::getTimeZone ( void )
Procedural style 
IntlTimeZone datefmt_get_timezone ( void )
Returns an IntlTimeZone object representing the timezone that will be used by this object to format dates and times. When formatting IntlCalendar and DateTime objects with this IntlDateFormatter, the timezone used will be the one returned by this method, not the one associated with the objects being formatted.
</Desc>
    <FName>datefmt_get_timezone</FName>
    <Desc>Object oriented style 
public IntlTimeZone IntlDateFormatter::getTimeZone ( void )
Procedural style 
IntlTimeZone datefmt_get_timezone ( void )
Returns an IntlTimeZone object representing the timezone that will be used by this object to format dates and times. When formatting IntlCalendar and DateTime objects with this IntlDateFormatter, the timezone used will be the one returned by this method, not the one associated with the objects being formatted.
</Desc>
    <FName>IntlDateFormatter::getTimeZoneId</FName>
    <Desc>Object oriented style 
public string IntlDateFormatter::getTimeZoneId ( void )
Procedural style 
string datefmt_get_timezone_id ( IntlDateFormatter $fmt )
Get the timezone-id used for the IntlDateFormatter.
</Desc>
    <FName>datefmt_get_timezone_id</FName>
    <Desc>Object oriented style 
public string IntlDateFormatter::getTimeZoneId ( void )
Procedural style 
string datefmt_get_timezone_id ( IntlDateFormatter $fmt )
Get the timezone-id used for the IntlDateFormatter.
</Desc>
    <FName>IntlDateFormatter::isLenient</FName>
    <Desc>Object oriented style 
public bool IntlDateFormatter::isLenient ( void )
Procedural style 
bool datefmt_is_lenient ( IntlDateFormatter $fmt )
Check if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly.
</Desc>
    <FName>datefmt_is_lenient</FName>
    <Desc>Object oriented style 
public bool IntlDateFormatter::isLenient ( void )
Procedural style 
bool datefmt_is_lenient ( IntlDateFormatter $fmt )
Check if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly.
</Desc>
    <FName>IntlDateFormatter::localtime</FName>
    <Desc>Object oriented style 
public array IntlDateFormatter::localtime ( string $value [, int &$position ] )
Procedural style 
array datefmt_localtime ( IntlDateFormatter $fmt , string $value [, int &$position ] )
Converts string $value to a field-based time value ( an array of various fields), starting at $parse_pos and consuming as much of the input value as possible.
</Desc>
    <FName>datefmt_localtime</FName>
    <Desc>Object oriented style 
public array IntlDateFormatter::localtime ( string $value [, int &$position ] )
Procedural style 
array datefmt_localtime ( IntlDateFormatter $fmt , string $value [, int &$position ] )
Converts string $value to a field-based time value ( an array of various fields), starting at $parse_pos and consuming as much of the input value as possible.
</Desc>
    <FName>IntlDateFormatter::parse</FName>
    <Desc>Object oriented style 
public int IntlDateFormatter::parse ( string $value [, int &$position ] )
Procedural style 
int datefmt_parse ( IntlDateFormatter $fmt , string $value [, int &$position ] )
Converts string $value to an incremental time value, starting at $parse_pos and consuming as much of the input value as possible.
</Desc>
    <FName>datefmt_parse</FName>
    <Desc>Object oriented style 
public int IntlDateFormatter::parse ( string $value [, int &$position ] )
Procedural style 
int datefmt_parse ( IntlDateFormatter $fmt , string $value [, int &$position ] )
Converts string $value to an incremental time value, starting at $parse_pos and consuming as much of the input value as possible.
</Desc>
    <FName>IntlDateFormatter::setCalendar</FName>
    <Desc>Object oriented style 
bool IntlDateFormatter::setCalendar ( mixed $which )
Procedural style 
bool datefmt_set_calendar ( IntlDateFormatter $fmt , mixed $which )
Sets the calendar or calendar type used by the formatter.
</Desc>
    <FName>datefmt_set_calendar</FName>
    <Desc>Object oriented style 
bool IntlDateFormatter::setCalendar ( mixed $which )
Procedural style 
bool datefmt_set_calendar ( IntlDateFormatter $fmt , mixed $which )
Sets the calendar or calendar type used by the formatter.
</Desc>
    <FName>IntlDateFormatter::setLenient</FName>
    <Desc>Object oriented style 
public bool IntlDateFormatter::setLenient ( bool $lenient )
Procedural style 
bool datefmt_set_lenient ( IntlDateFormatter $fmt , bool $lenient )
Define if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly. Enabling lenient parsing allows the parser to accept otherwise flawed date or time patterns, parsing as much as possible to obtain a value. Extra space, unrecognized tokens, or invalid values ("February 30th") are not accepted.
</Desc>
    <FName>datefmt_set_lenient</FName>
    <Desc>Object oriented style 
public bool IntlDateFormatter::setLenient ( bool $lenient )
Procedural style 
bool datefmt_set_lenient ( IntlDateFormatter $fmt , bool $lenient )
Define if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly. Enabling lenient parsing allows the parser to accept otherwise flawed date or time patterns, parsing as much as possible to obtain a value. Extra space, unrecognized tokens, or invalid values ("February 30th") are not accepted.
</Desc>
    <FName>IntlDateFormatter::setPattern</FName>
    <Desc>Object oriented style 
public bool IntlDateFormatter::setPattern ( string $pattern )
Procedural style 
bool datefmt_set_pattern ( IntlDateFormatter $fmt , string $pattern )
Set the pattern used for the IntlDateFormatter.
</Desc>
    <FName>datefmt_set_pattern</FName>
    <Desc>Object oriented style 
public bool IntlDateFormatter::setPattern ( string $pattern )
Procedural style 
bool datefmt_set_pattern ( IntlDateFormatter $fmt , string $pattern )
Set the pattern used for the IntlDateFormatter.
</Desc>
    <FName>IntlDateFormatter::setTimeZone</FName>
    <Desc>Object oriented style 
public bool IntlDateFormatter::setTimeZone ( mixed $zone )
Procedural style 
bool datefmt_set_timezone ( IntlDateFormatter $fmt , mixed $zone )
Sets the timezone used for the IntlDateFormatter. object.
</Desc>
    <FName>datefmt_set_timezone</FName>
    <Desc>Object oriented style 
public bool IntlDateFormatter::setTimeZone ( mixed $zone )
Procedural style 
bool datefmt_set_timezone ( IntlDateFormatter $fmt , mixed $zone )
Sets the timezone used for the IntlDateFormatter. object.
</Desc>
    <FName>IntlDateFormatter::setTimeZoneId</FName>
    <Desc>Object oriented style 
public bool IntlDateFormatter::setTimeZoneId ( string $zone )
Procedural style 
bool datefmt_set_timezone_id ( IntlDateFormatter $fmt , string $zone )
Sets the time zone to use.
</Desc>
    <FName>datefmt_set_timezone_id</FName>
    <Desc>Object oriented style 
public bool IntlDateFormatter::setTimeZoneId ( string $zone )
Procedural style 
bool datefmt_set_timezone_id ( IntlDateFormatter $fmt , string $zone )
Sets the time zone to use.
</Desc>
    <FName>IntlGregorianCalendar::__construct</FName>
    <Desc>public IntlGregorianCalendar::__construct ([ IntlTimeZone $tz [, string $locale ]] )
public IntlGregorianCalendar::__construct ( int $timeZoneOrYear , int $localeOrMonth , int $dayOfMonth )
public IntlGregorianCalendar::__construct ( int $timeZoneOrYear , int $localeOrMonth , int $dayOfMonth , int $hour , int $minute [, int $second ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlGregorianCalendar::getGregorianChange</FName>
    <Desc>public float IntlGregorianCalendar::getGregorianChange ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlGregorianCalendar::isLeapYear</FName>
    <Desc>public bool IntlGregorianCalendar::isLeapYear ( int $year )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlGregorianCalendar::setGregorianChange</FName>
    <Desc>public bool IntlGregorianCalendar::setGregorianChange ( float $date )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlIterator::current</FName>
    <Desc>public mixed IntlIterator::current ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlIterator::key</FName>
    <Desc>public string IntlIterator::key ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlIterator::next</FName>
    <Desc>public void IntlIterator::next ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlIterator::rewind</FName>
    <Desc>public void IntlIterator::rewind ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlIterator::valid</FName>
    <Desc>public bool IntlIterator::valid ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlPartsIterator::getBreakIterator</FName>
    <Desc>public IntlBreakIterator IntlPartsIterator::getBreakIterator ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlRuleBasedBreakIterator::__construct</FName>
    <Desc>public IntlRuleBasedBreakIterator::__construct ( string $rules [, string $areCompiled ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlRuleBasedBreakIterator::getBinaryRules</FName>
    <Desc>public string IntlRuleBasedBreakIterator::getBinaryRules ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlRuleBasedBreakIterator::getRules</FName>
    <Desc>public string IntlRuleBasedBreakIterator::getRules ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlRuleBasedBreakIterator::getRuleStatus</FName>
    <Desc>public int IntlRuleBasedBreakIterator::getRuleStatus ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlRuleBasedBreakIterator::getRuleStatusVec</FName>
    <Desc>public array IntlRuleBasedBreakIterator::getRuleStatusVec ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::countEquivalentIDs</FName>
    <Desc>public static int IntlTimeZone::countEquivalentIDs ( string $zoneId )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::createDefault</FName>
    <Desc>public static IntlTimeZone IntlTimeZone::createDefault ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::createEnumeration</FName>
    <Desc>public static IntlIterator IntlTimeZone::createEnumeration ([ mixed $countryOrRawOffset ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::createTimeZone</FName>
    <Desc>public static IntlTimeZone IntlTimeZone::createTimeZone ( string $zoneId )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::createTimeZoneIDEnumeration</FName>
    <Desc>public static IntlIterator IntlTimeZone::createTimeZoneIDEnumeration ( int $zoneType [, string $region [, int $rawOffset ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::fromDateTimeZone</FName>
    <Desc>public static IntlTimeZone IntlTimeZone::fromDateTimeZone ( DateTimeZone $zoneId )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getCanonicalID</FName>
    <Desc>public static string IntlTimeZone::getCanonicalID ( string $zoneId [, bool &$isSystemID ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getDisplayName</FName>
    <Desc>public string IntlTimeZone::getDisplayName ([ bool $isDaylight [, int $style [, string $locale ]]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getDSTSavings</FName>
    <Desc>public int IntlTimeZone::getDSTSavings ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getEquivalentID</FName>
    <Desc>public static string IntlTimeZone::getEquivalentID ( string $zoneId , int $index )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getErrorCode</FName>
    <Desc>Object oriented style (method):
public int IntlTimeZone::getErrorCode ( void )
Procedural style:
int intltz_get_error_code ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>intltz_get_error_code</FName>
    <Desc>Object oriented style (method):
public int IntlTimeZone::getErrorCode ( void )
Procedural style:
int intltz_get_error_code ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getErrorMessage</FName>
    <Desc>Object oriented style (method):
public string IntlTimeZone::getErrorMessage ( void )
Procedural style:
string intltz_get_error_message ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>intltz_get_error_message</FName>
    <Desc>Object oriented style (method):
public string IntlTimeZone::getErrorMessage ( void )
Procedural style:
string intltz_get_error_message ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getGMT</FName>
    <Desc>public static IntlTimeZone IntlTimeZone::getGMT ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getID</FName>
    <Desc>public string IntlTimeZone::getID ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getIDForWindowsID</FName>
    <Desc>public static string IntlTimeZone::getIDForWindowsID ( string $timezone [, string $region ] )
Translates a Windows timezone (e.g. "Pacific Standard Time") into a system timezone (e.g. "America/Los_Angeles"). 
Note: This function requires ICU version ? 52. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getOffset</FName>
    <Desc>public int IntlTimeZone::getOffset ( float $date , bool $local , int &$rawOffset , int &$dstOffset )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getRawOffset</FName>
    <Desc>public int IntlTimeZone::getRawOffset ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getRegion</FName>
    <Desc>public static string IntlTimeZone::getRegion ( string $zoneId )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getTZDataVersion</FName>
    <Desc>public static string IntlTimeZone::getTZDataVersion ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getUnknown</FName>
    <Desc>public static IntlTimeZone IntlTimeZone::getUnknown ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::getWindowsID</FName>
    <Desc>public static string IntlTimeZone::getWindowsID ( string $timezone )
Translates a system timezone (e.g. "America/Los_Angeles") into a Windows timezone (e.g. "Pacific Standard Time"). 
Note: This function requires ICU version ? 52. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::hasSameRules</FName>
    <Desc>public bool IntlTimeZone::hasSameRules ( IntlTimeZone $otherTimeZone )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::toDateTimeZone</FName>
    <Desc>public DateTimeZone IntlTimeZone::toDateTimeZone ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>IntlTimeZone::useDaylightTime</FName>
    <Desc>public bool IntlTimeZone::useDaylightTime ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Iterator::current</FName>
    <Desc>abstract public mixed Iterator::current ( void )
Returns the current element.
</Desc>
    <FName>Iterator::key</FName>
    <Desc>abstract public scalar Iterator::key ( void )
Returns the key of the current element.
</Desc>
    <FName>Iterator::next</FName>
    <Desc>abstract public void Iterator::next ( void )
Moves the current position to the next element. 
Note: 
This method is called after each foreach loop.
</Desc>
    <FName>Iterator::rewind</FName>
    <Desc>abstract public void Iterator::rewind ( void )
Rewinds back to the first element of the Iterator. 
Note: 
This is the first method called when starting a foreach loop. It will not be executed after foreach loops.
</Desc>
    <FName>Iterator::valid</FName>
    <Desc>abstract public bool Iterator::valid ( void )
This method is called after Iterator::rewind() and Iterator::next() to check if the current position is valid.
</Desc>
    <FName>IteratorAggregate::getIterator</FName>
    <Desc>abstract public Traversable IteratorAggregate::getIterator ( void )
Returns an external iterator.
</Desc>
    <FName>IteratorIterator::__construct</FName>
    <Desc>public IteratorIterator::__construct ( Traversable $iterator )
Creates an iterator from anything that is traversable.
</Desc>
    <FName>IteratorIterator::current</FName>
    <Desc>public mixed IteratorIterator::current ( void )
Get the value of the current element.
</Desc>
    <FName>IteratorIterator::getInnerIterator</FName>
    <Desc>public Traversable IteratorIterator::getInnerIterator ( void )
Get the inner iterator.
</Desc>
    <FName>IteratorIterator::key</FName>
    <Desc>public scalar IteratorIterator::key ( void )
Get the key of the current element.
</Desc>
    <FName>IteratorIterator::next</FName>
    <Desc>public void IteratorIterator::next ( void )
Forward to the next element.
</Desc>
    <FName>IteratorIterator::rewind</FName>
    <Desc>public void IteratorIterator::rewind ( void )
Rewinds to the first element.
</Desc>
    <FName>IteratorIterator::valid</FName>
    <Desc>public bool IteratorIterator::valid ( void )
Checks if the iterator is valid.
</Desc>
    <FName>JsonSerializable::jsonSerialize</FName>
    <Desc>abstract public mixed JsonSerializable::jsonSerialize ( void )
Serializes the object to a value that can be serialized natively by json_encode().
</Desc>
    <FName>Judy::byCount</FName>
    <Desc>public int Judy::byCount ( int $nth_index )
Locate the Nth index present in the Judy array.
</Desc>
    <FName>Judy::__construct</FName>
    <Desc>public Judy::__construct ( int $judy_type )
Construct a new Judy object. A Judy object can be accessed like a PHP Array.
</Desc>
    <FName>Judy::count</FName>
    <Desc>public int Judy::count ([ int $index_start = 0 [, int $index_end = -1 ]] )
Count the number of elements in the Judy array.
</Desc>
    <FName>Judy::__destruct</FName>
    <Desc>public void Judy::__destruct ( void )
Destruct a Judy object.
</Desc>
    <FName>Judy::first</FName>
    <Desc>public mixed Judy::first ([ mixed $index ] )
Search (inclusive) for the first index present that is equal to or greater than the passed Index.
</Desc>
    <FName>Judy::firstEmpty</FName>
    <Desc>public int Judy::firstEmpty ([ mixed $index = 0 ] )
Search (inclusive) for the first absent index that is equal to or greater than the passed Index.
</Desc>
    <FName>Judy::free</FName>
    <Desc>public int Judy::free ( void )
Free the entire Judy array. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Judy::getType</FName>
    <Desc>public int Judy::getType ( void )
Return an integer corresponding to the Judy type of the current object.
</Desc>
    <FName>Judy::last</FName>
    <Desc>public void Judy::last ([ string $index ] )
Search (inclusive) for the last index present that is equal to or less than the passed Index.
</Desc>
    <FName>Judy::lastEmpty</FName>
    <Desc>public int Judy::lastEmpty ([ int $index = -1 ] )
Search (inclusive) for the last absent index that is equal to or less than the passed Index.
</Desc>
    <FName>Judy::memoryUsage</FName>
    <Desc>public int Judy::memoryUsage ( void )
Return the memory used by the Judy array.
</Desc>
    <FName>Judy::next</FName>
    <Desc>public mixed Judy::next ( mixed $index )
Search (exclusive) for the next index present that is greater than the passed Index.
</Desc>
    <FName>Judy::nextEmpty</FName>
    <Desc>public int Judy::nextEmpty ( int $index )
Search (exclusive) for the next absent index that is greater than the passed Index.
</Desc>
    <FName>Judy::offsetExists</FName>
    <Desc>public bool Judy::offsetExists ( mixed $offset )
Whether or not an offset exists.
</Desc>
    <FName>Judy::offsetGet</FName>
    <Desc>public mixed Judy::offsetGet ( mixed $offset )
Returns the value at specified offset.
</Desc>
    <FName>Judy::offsetSet</FName>
    <Desc>public bool Judy::offsetSet ( mixed $offset , mixed $value )
Assigns a value to the specified offset.
</Desc>
    <FName>Judy::offsetUnset</FName>
    <Desc>public bool Judy::offsetUnset ( mixed $offset )
Unsets an offset.
</Desc>
    <FName>Judy::prev</FName>
    <Desc>public mixed Judy::prev ( mixed $index )
Search (exclusive) for the previous index present that is less than the passed Index.
</Desc>
    <FName>Judy::prevEmpty</FName>
    <Desc>public int Judy::prevEmpty ( mixed $index )
Search (exclusive) for the previous index absent that is less than the passed Index.
</Desc>
    <FName>Judy::size</FName>
    <Desc>public void Judy::size ( void )
This method is an alias of Judy::count. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Superglobals</FName>
    <Desc>Several predefined variables in PHP are "superglobals", which means they are available in all scopes throughout a script. There is no need to do global $variable; to access them within functions or methods. 
These superglobal variables are: 
$GLOBALS 
$_SERVER 
$_GET 
$_POST 
$_FILES 
$_COOKIE 
$_SESSION 
$_REQUEST 
$_ENV 
Changelog
VersionDescription
4.1.0Superglobals were introduced to PHP. 

Notes
Note: Variable availability

By default, all of the superglobals are available but there are directives that affect this availability. For further information, refer to the documentation for variables_order. 
Note: Dealing with register_globals

If the deprecated register_globals directive is set to on then the variables within will also be made available in the global scope of the script. For example, $_POST['foo'] would also exist as $foo. 
For related information, see the FAQ titled "How does register_globals affect me?" 
Note: Variable variables

Superglobals cannot be used as variable variables inside functions or class methods. 
See Also
variable scope 
The variables_order directive 
The filter extension 
</Desc>
    <FName>Lapack::eigenValues</FName>
    <Desc>public static array Lapack::eigenValues ( array $a [, array $left [, array $right ]] )
Calculate the eigenvalues for a square matrix, and optionally calculate the left and right eigenvectors.
</Desc>
    <FName>Lapack::identity</FName>
    <Desc>public static array Lapack::identity ( int $n )
Return a size n identity matrix
</Desc>
    <FName>Lapack::leastSquaresByFactorisation</FName>
    <Desc>public static array Lapack::leastSquaresByFactorisation ( array $a , array $b )
Solve the linear least squares problem, find min x in || B - Ax || Returns an array representing x. Expects arrays of arrays, and will return an array of arrays in the dimension B num cols x A num cols. Uses QR or LQ factorisation on matrix A.
</Desc>
    <FName>Lapack::leastSquaresBySVD</FName>
    <Desc>public static array Lapack::leastSquaresBySVD ( array $a , array $b )
Solve the linear least squares problem, find min x in || B - Ax || Returns an array representing x. Expects arrays of arrays, and will return an array of arrays in the dimension B num cols x A num cols. Uses SVD with a divide and conquer algorithm.
</Desc>
    <FName>Lapack::pseudoInverse</FName>
    <Desc>public static array Lapack::pseudoInverse ( array $a )
Find the pseudoinverse of a matrix A.
</Desc>
    <FName>Lapack::singularValues</FName>
    <Desc>public static array Lapack::singularValues ( array $a )
Calculate the singular values of the matrix A.
</Desc>
    <FName>Lapack::solveLinearEquation</FName>
    <Desc>public static array Lapack::solveLinearEquation ( array $a , array $b )
This function computes the solution to the system of linear equations with a square matrix A and multiple right-hand sides B. Solves A * X = B for multiple B.
</Desc>
    <FName>LimitIterator::__construct</FName>
    <Desc>public LimitIterator::__construct ( Iterator $iterator [, int $offset = 0 [, int $count = -1 ]] )
Constructs a new LimitIterator from an iterator with a given starting offset and maximum count.
</Desc>
    <FName>LimitIterator::current</FName>
    <Desc>public mixed LimitIterator::current ( void )
Gets the current element of the inner Iterator.
</Desc>
    <FName>LimitIterator::getInnerIterator</FName>
    <Desc>public Iterator LimitIterator::getInnerIterator ( void )
Gets the inner Iterator.
</Desc>
    <FName>LimitIterator::getPosition</FName>
    <Desc>public int LimitIterator::getPosition ( void )
Gets the current zero-based position of the inner Iterator.
</Desc>
    <FName>LimitIterator::key</FName>
    <Desc>public mixed LimitIterator::key ( void )
Gets the key for the current item in the inner Iterator.
</Desc>
    <FName>LimitIterator::next</FName>
    <Desc>public void LimitIterator::next ( void )
Moves the iterator forward.
</Desc>
    <FName>LimitIterator::rewind</FName>
    <Desc>public void LimitIterator::rewind ( void )
Rewinds the iterator to the starting offset specified in LimitIterator::__construct().
</Desc>
    <FName>LimitIterator::seek</FName>
    <Desc>public int LimitIterator::seek ( int $position )
Moves the iterator to the offset specified by position.
</Desc>
    <FName>LimitIterator::valid</FName>
    <Desc>public bool LimitIterator::valid ( void )
Checks whether the current element is valid.
</Desc>
    <FName>Locale::acceptFromHttp</FName>
    <Desc>Object oriented style 
public static string Locale::acceptFromHttp ( string $header )
Procedural style 
string locale_accept_from_http ( string $header )
Tries to find locale that can satisfy the language list that is requested by the HTTP "Accept-Language" header.
</Desc>
    <FName>locale_accept_from_http</FName>
    <Desc>Object oriented style 
public static string Locale::acceptFromHttp ( string $header )
Procedural style 
string locale_accept_from_http ( string $header )
Tries to find locale that can satisfy the language list that is requested by the HTTP "Accept-Language" header.
</Desc>
    <FName>Locale::canonicalize</FName>
    <Desc>public static string Locale::canonicalize ( string $locale )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>locale_canonicalize</FName>
    <Desc>public static string Locale::canonicalize ( string $locale )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Locale::composeLocale</FName>
    <Desc>Object oriented style 
public static string Locale::composeLocale ( array $subtags )
Procedural style 
string locale_compose ( array $subtags )
Returns a correctly ordered and delimited locale ID the keys identify the particular locale ID subtags, and the values are the associated subtag values.
</Desc>
    <FName>locale_compose</FName>
    <Desc>Object oriented style 
public static string Locale::composeLocale ( array $subtags )
Procedural style 
string locale_compose ( array $subtags )
Returns a correctly ordered and delimited locale ID the keys identify the particular locale ID subtags, and the values are the associated subtag values.
</Desc>
    <FName>Locale::filterMatches</FName>
    <Desc>Object oriented style 
public static bool Locale::filterMatches ( string $langtag , string $locale [, bool $canonicalize = FALSE ] )
Procedural style 
bool locale_filter_matches ( string $langtag , string $locale [, bool $canonicalize = FALSE ] )
Checks if a $langtag filter matches with $locale according to RFC 4647's basic filtering algorithm
</Desc>
    <FName>locale_filter_matches</FName>
    <Desc>Object oriented style 
public static bool Locale::filterMatches ( string $langtag , string $locale [, bool $canonicalize = FALSE ] )
Procedural style 
bool locale_filter_matches ( string $langtag , string $locale [, bool $canonicalize = FALSE ] )
Checks if a $langtag filter matches with $locale according to RFC 4647's basic filtering algorithm
</Desc>
    <FName>Locale::getAllVariants</FName>
    <Desc>Object oriented style 
public static array Locale::getAllVariants ( string $locale )
Procedural style 
array locale_get_all_variants ( string $locale )
Gets the variants for the input locale
</Desc>
    <FName>locale_get_all_variants</FName>
    <Desc>Object oriented style 
public static array Locale::getAllVariants ( string $locale )
Procedural style 
array locale_get_all_variants ( string $locale )
Gets the variants for the input locale
</Desc>
    <FName>Locale::getDefault</FName>
    <Desc>Object oriented style 
public static string Locale::getDefault ( void )
Procedural style 
string locale_get_default ( void )
Gets the default locale value. At the PHP initialization this value is set to 'intl.default_locale' value from php.ini if that value exists or from ICU's function uloc_getDefault().
</Desc>
    <FName>locale_get_default</FName>
    <Desc>Object oriented style 
public static string Locale::getDefault ( void )
Procedural style 
string locale_get_default ( void )
Gets the default locale value. At the PHP initialization this value is set to 'intl.default_locale' value from php.ini if that value exists or from ICU's function uloc_getDefault().
</Desc>
    <FName>Locale::getDisplayLanguage</FName>
    <Desc>Object oriented style 
public static string Locale::getDisplayLanguage ( string $locale [, string $in_locale ] )
Procedural style 
string locale_get_display_language ( string $locale [, string $in_locale ] )
Returns an appropriately localized display name for language of the input locale. If is NULL then the default locale is used.
</Desc>
    <FName>locale_get_display_language</FName>
    <Desc>Object oriented style 
public static string Locale::getDisplayLanguage ( string $locale [, string $in_locale ] )
Procedural style 
string locale_get_display_language ( string $locale [, string $in_locale ] )
Returns an appropriately localized display name for language of the input locale. If is NULL then the default locale is used.
</Desc>
    <FName>Locale::getDisplayName</FName>
    <Desc>Object oriented style 
public static string Locale::getDisplayName ( string $locale [, string $in_locale ] )
Procedural style 
string locale_get_display_name ( string $locale [, string $in_locale ] )
Returns an appropriately localized display name for the input locale. If $locale is NULL then the default locale is used.
</Desc>
    <FName>locale_get_display_name</FName>
    <Desc>Object oriented style 
public static string Locale::getDisplayName ( string $locale [, string $in_locale ] )
Procedural style 
string locale_get_display_name ( string $locale [, string $in_locale ] )
Returns an appropriately localized display name for the input locale. If $locale is NULL then the default locale is used.
</Desc>
    <FName>Locale::getDisplayRegion</FName>
    <Desc>Object oriented style 
public static string Locale::getDisplayRegion ( string $locale [, string $in_locale ] )
Procedural style 
string locale_get_display_region ( string $locale [, string $in_locale ] )
Returns an appropriately localized display name for region of the input locale. If is NULL then the default locale is used.
</Desc>
    <FName>locale_get_display_region</FName>
    <Desc>Object oriented style 
public static string Locale::getDisplayRegion ( string $locale [, string $in_locale ] )
Procedural style 
string locale_get_display_region ( string $locale [, string $in_locale ] )
Returns an appropriately localized display name for region of the input locale. If is NULL then the default locale is used.
</Desc>
    <FName>Locale::getDisplayScript</FName>
    <Desc>Object oriented style 
public static string Locale::getDisplayScript ( string $locale [, string $in_locale ] )
Procedural style 
string locale_get_display_script ( string $locale [, string $in_locale ] )
Returns an appropriately localized display name for script of the input locale. If is NULL then the default locale is used.
</Desc>
    <FName>locale_get_display_script</FName>
    <Desc>Object oriented style 
public static string Locale::getDisplayScript ( string $locale [, string $in_locale ] )
Procedural style 
string locale_get_display_script ( string $locale [, string $in_locale ] )
Returns an appropriately localized display name for script of the input locale. If is NULL then the default locale is used.
</Desc>
    <FName>Locale::getDisplayVariant</FName>
    <Desc>Object oriented style 
public static string Locale::getDisplayVariant ( string $locale [, string $in_locale ] )
Procedural style 
string locale_get_display_variant ( string $locale [, string $in_locale ] )
Returns an appropriately localized display name for variants of the input locale. If is NULL then the default locale is used.
</Desc>
    <FName>locale_get_display_variant</FName>
    <Desc>Object oriented style 
public static string Locale::getDisplayVariant ( string $locale [, string $in_locale ] )
Procedural style 
string locale_get_display_variant ( string $locale [, string $in_locale ] )
Returns an appropriately localized display name for variants of the input locale. If is NULL then the default locale is used.
</Desc>
    <FName>Locale::getKeywords</FName>
    <Desc>Object oriented style 
public static array Locale::getKeywords ( string $locale )
Procedural style 
array locale_get_keywords ( string $locale )
Gets the keywords for the input locale.
</Desc>
    <FName>locale_get_keywords</FName>
    <Desc>Object oriented style 
public static array Locale::getKeywords ( string $locale )
Procedural style 
array locale_get_keywords ( string $locale )
Gets the keywords for the input locale.
</Desc>
    <FName>Locale::getPrimaryLanguage</FName>
    <Desc>Object oriented style 
public static string Locale::getPrimaryLanguage ( string $locale )
Procedural style 
string locale_get_primary_language ( string $locale )
Gets the primary language for the input locale
</Desc>
    <FName>locale_get_primary_language</FName>
    <Desc>Object oriented style 
public static string Locale::getPrimaryLanguage ( string $locale )
Procedural style 
string locale_get_primary_language ( string $locale )
Gets the primary language for the input locale
</Desc>
    <FName>Locale::getRegion</FName>
    <Desc>Object oriented style 
public static string Locale::getRegion ( string $locale )
Procedural style 
string locale_get_region ( string $locale )
Gets the region for the input locale.
</Desc>
    <FName>locale_get_region</FName>
    <Desc>Object oriented style 
public static string Locale::getRegion ( string $locale )
Procedural style 
string locale_get_region ( string $locale )
Gets the region for the input locale.
</Desc>
    <FName>Locale::getScript</FName>
    <Desc>Object oriented style 
public static string Locale::getScript ( string $locale )
Procedural style 
string locale_get_script ( string $locale )
Gets the script for the input locale.
</Desc>
    <FName>locale_get_script</FName>
    <Desc>Object oriented style 
public static string Locale::getScript ( string $locale )
Procedural style 
string locale_get_script ( string $locale )
Gets the script for the input locale.
</Desc>
    <FName>Locale::lookup</FName>
    <Desc>Object oriented style 
public static string Locale::lookup ( array $langtag , string $locale [, bool $canonicalize = FALSE [, string $default ]] )
Procedural style 
string locale_lookup ( array $langtag , string $locale [, bool $canonicalize = FALSE [, string $default ]] )
Searches the items in langtag for the best match to the language range specified in locale according to RFC 4647's lookup algorithm.
</Desc>
    <FName>locale_lookup</FName>
    <Desc>Object oriented style 
public static string Locale::lookup ( array $langtag , string $locale [, bool $canonicalize = FALSE [, string $default ]] )
Procedural style 
string locale_lookup ( array $langtag , string $locale [, bool $canonicalize = FALSE [, string $default ]] )
Searches the items in langtag for the best match to the language range specified in locale according to RFC 4647's lookup algorithm.
</Desc>
    <FName>Locale::parseLocale</FName>
    <Desc>Object oriented style 
public static array Locale::parseLocale ( string $locale )
Procedural style 
array locale_parse ( string $locale )
Returns a key-value array of locale ID subtag elements.
</Desc>
    <FName>locale_parse</FName>
    <Desc>Object oriented style 
public static array Locale::parseLocale ( string $locale )
Procedural style 
array locale_parse ( string $locale )
Returns a key-value array of locale ID subtag elements.
</Desc>
    <FName>Locale::setDefault</FName>
    <Desc>Object oriented style 
public static bool Locale::setDefault ( string $locale )
Procedural style 
bool locale_set_default ( string $locale )
Sets the default runtime locale to $locale. This changes the value of INTL global 'default_locale' locale identifier. UAX #35 extensions are accepted.
</Desc>
    <FName>locale_set_default</FName>
    <Desc>Object oriented style 
public static bool Locale::setDefault ( string $locale )
Procedural style 
bool locale_set_default ( string $locale )
Sets the default runtime locale to $locale. This changes the value of INTL global 'default_locale' locale identifier. UAX #35 extensions are accepted.
</Desc>
    <FName>Lua::assign</FName>
    <Desc>public mixed Lua::assign ( string $name , string $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Lua::call</FName>
    <Desc>public mixed Lua::call ( callable $lua_func [, array $args [, int $use_self = 0 ]] )
public mixed Lua::__call ( callable $lua_func [, array $args [, int $use_self = 0 ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Lua::__call</FName>
    <Desc>public mixed Lua::call ( callable $lua_func [, array $args [, int $use_self = 0 ]] )
public mixed Lua::__call ( callable $lua_func [, array $args [, int $use_self = 0 ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Lua::__construct</FName>
    <Desc>public Lua::__construct ( string $lua_script_file = NULL )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Lua::eval</FName>
    <Desc>public mixed Lua::eval ( string $statements )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Lua::getVersion</FName>
    <Desc>public string Lua::getVersion ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Lua::include</FName>
    <Desc>public mixed Lua::include ( string $file )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Lua::registerCallback</FName>
    <Desc>public mixed Lua::registerCallback ( string $name , callable $function )
Register a PHP function to Lua as a function named "$name"
</Desc>
    <FName>LuaClosure::__invoke</FName>
    <Desc>public void LuaClosure::__invoke ( mixed $arg [, mixed $... ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Memcache::add</FName>
    <Desc>bool Memcache::add ( string $key , mixed $var [, int $flag [, int $expire ]] )
Memcache::add() stores variable var with key only if such key doesn't exist at the server yet. Also you can use memcache_add() function.
</Desc>
    <FName>Memcache::addServer</FName>
    <Desc>bool Memcache::addServer ( string $host [, int $port = 11211 [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callable $failure_callback [, int $timeoutms ]]]]]]]] )
Memcache::addServer() adds a server to the connection pool. You can also use the memcache_add_server() function. 
When using this method (as opposed to Memcache::connect() and Memcache::pconnect()) the network connection is not established until actually needed. Thus there is no overhead in adding a large number of servers to the pool, even though they might not all be used. 
Failover may occur at any stage in any of the methods, as long as other servers are available the request the user won't notice. Any kind of socket or Memcached server level errors (except out-of-memory) may trigger the failover. Normal client errors such as adding an existing key will not trigger a failover. 
Note: 
This function has been added to Memcache version 2.0.0.
</Desc>
    <FName>Memcache::close</FName>
    <Desc>bool Memcache::close ( void )
Memcache::close() closes connection to memcached server. This function doesn't close persistent connections, which are closed only during web-server shutdown/restart. Also you can use memcache_close() function.
</Desc>
    <FName>Memcache::connect</FName>
    <Desc>bool Memcache::connect ( string $host [, int $port [, int $timeout ]] )
Memcache::connect() establishes a connection to the memcached server. The connection, which was opened using Memcache::connect() will be automatically closed at the end of script execution. Also you can close it with Memcache::close(). Also you can use memcache_connect() function.
</Desc>
    <FName>Memcache::decrement</FName>
    <Desc>int Memcache::decrement ( string $key [, int $value = 1 ] )
Memcache::decrement() decrements value of the item by value. Similarly to Memcache::increment(), current value of the item is being converted to numerical and after that value is subtracted. 
Note: 
New item's value will not be less than zero. 
Note: 
Do not use Memcache::decrement() with item, which was stored compressed, because consequent call to Memcache::get() will fail. 
Memcache::decrement() does not create an item if it didn't exist. Also you can use memcache_decrement() function.
</Desc>
    <FName>Memcache::delete</FName>
    <Desc>bool Memcache::delete ( string $key [, int $timeout = 0 ] )
Memcache::delete() deletes an item with the key.
</Desc>
    <FName>Memcache::flush</FName>
    <Desc>bool Memcache::flush ( void )
Memcache::flush() immediately invalidates all existing items. Memcache::flush() doesn't actually free any resources, it only marks all the items as expired, so occupied memory will be overwritten by new items. Also you can use memcache_flush() function.
</Desc>
    <FName>Memcache::get</FName>
    <Desc>string Memcache::get ( string $key [, int &$flags ] )
array Memcache::get ( array $keys [, array &$flags ] )
Memcache::get() returns previously stored data of an item, if such key exists on the server at this moment. 
You can pass array of keys to Memcache::get() to get array of values. The result array will contain only found key-value pairs.
</Desc>
    <FName>Memcache::getExtendedStats</FName>
    <Desc>array Memcache::getExtendedStats ([ string $type [, int $slabid [, int $limit = 100 ]]] )
Memcache::getExtendedStats() returns a two-dimensional associative array with server statistics. Array keys correspond to host:port of server and values contain the individual server statistics. A failed server will have its corresponding entry set to FALSE. You can also use the memcache_get_extended_stats() function. 
Note: 
This function has been added to Memcache version 2.0.0.
</Desc>
    <FName>Memcache::getServerStatus</FName>
    <Desc>int Memcache::getServerStatus ( string $host [, int $port = 11211 ] )
Memcache::getServerStatus() returns a the servers online/offline status. You can also use memcache_get_server_status() function. 
Note: 
This function has been added to Memcache version 2.1.0.
</Desc>
    <FName>Memcache::getStats</FName>
    <Desc>array Memcache::getStats ([ string $type [, int $slabid [, int $limit = 100 ]]] )
Memcache::getStats() returns an associative array with server's statistics. Array keys correspond to stats parameters and values to parameter's values. Also you can use memcache_get_stats() function.
</Desc>
    <FName>Memcache::getVersion</FName>
    <Desc>string Memcache::getVersion ( void )
Memcache::getVersion() returns a string with server's version number. Also you can use memcache_get_version() function.
</Desc>
    <FName>Memcache::increment</FName>
    <Desc>int Memcache::increment ( string $key [, int $value = 1 ] )
Memcache::increment() increments value of an item by the specified value. If item specified by key was not numeric and cannot be converted to a number, it will change its value to value. Memcache::increment() does not create an item if it doesn't already exist. 
Note: 
Do not use Memcache::increment() with items that have been stored compressed because subsequent calls to Memcache::get() will fail. 
Also you can use memcache_increment() function.
</Desc>
    <FName>Memcache::pconnect</FName>
    <Desc>mixed Memcache::pconnect ( string $host [, int $port [, int $timeout ]] )
Memcache::pconnect() is similar to Memcache::connect() with the difference, that the connection it establishes is persistent. This connection is not closed after the end of script execution and by Memcache::close() function. Also you can use memcache_pconnect() function.
</Desc>
    <FName>Memcache::replace</FName>
    <Desc>bool Memcache::replace ( string $key , mixed $var [, int $flag [, int $expire ]] )
Memcache::replace() should be used to replace value of existing item with key. In case if item with such key doesn't exists, Memcache::replace() returns FALSE. For the rest Memcache::replace() behaves similarly to Memcache::set(). Also you can use memcache_replace() function.
</Desc>
    <FName>Memcache::set</FName>
    <Desc>bool Memcache::set ( string $key , mixed $var [, int $flag [, int $expire ]] )
Memcache::set() stores an item var with key on the memcached server. Parameter expire is expiration time in seconds. If it's 0, the item never expires (but memcached server doesn't guarantee this item to be stored all the time, it could be deleted from the cache to make place for other items). You can use MEMCACHE_COMPRESSED constant as flag value if you want to use on-the-fly compression (uses zlib). 
Note: 
Remember that resource variables (i.e. file and connection descriptors) cannot be stored in the cache, because they cannot be adequately represented in serialized state. 
Also you can use memcache_set() function.
</Desc>
    <FName>Memcache::setCompressThreshold</FName>
    <Desc>bool Memcache::setCompressThreshold ( int $threshold [, float $min_savings ] )
Memcache::setCompressThreshold() enables automatic compression of large values. You can also use the memcache_set_compress_threshold() function. 
Note: 
This function has been added to Memcache version 2.0.0.
</Desc>
    <FName>Memcache::setServerParams</FName>
    <Desc>bool Memcache::setServerParams ( string $host [, int $port = 11211 [, int $timeout [, int $retry_interval = FALSE [, bool $status [, callable $failure_callback ]]]]] )
Memcache::setServerParams() changes server parameters at runtime. You can also use the memcache_set_server_params() function. 
Note: 
This function has been added to Memcache version 2.1.0.
</Desc>
    <FName>Memcached::add</FName>
    <Desc>public bool Memcached::add ( string $key , mixed $value [, int $expiration ] )
Memcached::add() is similar to Memcached::set(), but the operation fails if the key already exists on the server.
</Desc>
    <FName>Memcached::addByKey</FName>
    <Desc>public bool Memcached::addByKey ( string $server_key , string $key , mixed $value [, int $expiration ] )
Memcached::addByKey() is functionally equivalent to Memcached::add(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.
</Desc>
    <FName>Memcached::addServer</FName>
    <Desc>public bool Memcached::addServer ( string $host , int $port [, int $weight = 0 ] )
Memcached::addServer() adds the specified server to the server pool. No connection is established to the server at this time, but if you are using consistent key distribution option (via Memcached::DISTRIBUTION_CONSISTENT or Memcached::OPT_LIBKETAMA_COMPATIBLE), some of the internal data structures will have to be updated. Thus, if you need to add multiple servers, it is better to use Memcached::addServers() as the update then happens only once. 
The same server may appear multiple times in the server pool, because no duplication checks are made. This is not advisable; instead, use the weight option to increase the selection weighting of this server.
</Desc>
    <FName>Memcached::addServers</FName>
    <Desc>public bool Memcached::addServers ( array $servers )
Memcached::addServers() adds servers to the server pool. Each entry in servers is supposed to be an array containing hostname, port, and, optionally, weight of the server. No connection is established to the servers at this time. 
The same server may appear multiple times in the server pool, because no duplication checks are made. This is not advisable; instead, use the weight option to increase the selection weighting of this server.
</Desc>
    <FName>Memcached::append</FName>
    <Desc>public bool Memcached::append ( string $key , string $value )
Memcached::append() appends the given value string to the value of an existing item. The reason that value is forced to be a string is that appending mixed types is not well-defined. 
Note: 
If the Memcached::OPT_COMPRESSION is enabled, the operation will fail and a warning will be issued, because appending compressed data to a value that is potentially already compressed is not possible.
</Desc>
    <FName>Memcached::appendByKey</FName>
    <Desc>public bool Memcached::appendByKey ( string $server_key , string $key , string $value )
Memcached::appendByKey() is functionally equivalent to Memcached::append(), except that the free-form server_key can be used to map the key to a specific server.
</Desc>
    <FName>Memcached::cas</FName>
    <Desc>public bool Memcached::cas ( float $cas_token , string $key , mixed $value [, int $expiration ] )
Memcached::cas() performs a "check and set" operation, so that the item will be stored only if no other client has updated it since it was last fetched by this client. The check is done via the cas_token parameter which is a unique 64-bit value assigned to the existing item by memcache. See the documentation for Memcached::get*() methods for how to obtain this token. Note that the token is represented as a double due to the limitations of PHP's integer space.
</Desc>
    <FName>Memcached::casByKey</FName>
    <Desc>public bool Memcached::casByKey ( float $cas_token , string $server_key , string $key , mixed $value [, int $expiration ] )
Memcached::casByKey() is functionally equivalent to Memcached::cas(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.
</Desc>
    <FName>Memcached::__construct</FName>
    <Desc>public Memcached::__construct ([ string $persistent_id ] )
Creates a Memcached instance representing the connection to the memcache servers.
</Desc>
    <FName>Memcached::decrement</FName>
    <Desc>public int Memcached::decrement ( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )
Memcached::decrement() decrements a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. If the operation would decrease the value below 0, the new value will be 0. Memcached::decrement() will set the item to the initial_value parameter if the key doesn't exist.
</Desc>
    <FName>Memcached::decrementByKey</FName>
    <Desc>public int Memcached::decrementByKey ( string $server_key , string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )
Memcached::decrementByKey() decrements a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. If the operation would decrease the value below 0, the new value will be 0. Memcached::decrementByKey() will set the item to the initial_value parameter if the key doesn't exist.
</Desc>
    <FName>Memcached::delete</FName>
    <Desc>public bool Memcached::delete ( string $key [, int $time = 0 ] )
Memcached::delete() deletes the key from the server. The time parameter is the amount of time in seconds (or Unix time until which) the client wishes the server to refuse add and replace commands for this key. For this amount of time, the item is put into a delete queue, which means that it won't possible to retrieve it by the get command, but add and replace command with this key will also fail (the set command will succeed, however). After the time passes, the item is finally deleted from server memory. The parameter time defaults to 0 (which means that the item will be deleted immediately and further storage commands with this key will succeed).
</Desc>
    <FName>Memcached::deleteByKey</FName>
    <Desc>public bool Memcached::deleteByKey ( string $server_key , string $key [, int $time = 0 ] )
Memcached::deleteByKey() is functionally equivalent to Memcached::delete(), except that the free-form server_key can be used to map the key to a specific server.
</Desc>
    <FName>Memcached::deleteMulti</FName>
    <Desc>public array Memcached::deleteMulti ( array $keys [, int $time = 0 ] )
Memcached::deleteMulti() deletes the array of keys from the server. The time parameter is the amount of time in seconds (or Unix time until which) the client wishes the server to refuse add and replace commands for these keys. For this amount of time, the item is put into a delete queue, which means that it won't be possible to retrieve it by the get command, but add and replace command with these keys will also fail (the set command will succeed, however). After the time passes, the item is finally deleted from server memory. The parameter time defaults to 0 (which means that the item will be deleted immediately and further storage commands with these keys will succeed).
</Desc>
    <FName>Memcached::deleteMultiByKey</FName>
    <Desc>public bool Memcached::deleteMultiByKey ( string $server_key , array $keys [, int $time = 0 ] )
Memcached::deleteMultiByKey() is functionally equivalent to Memcached::deleteMulti(), except that the free-form server_key can be used to map the keys to a specific server.
</Desc>
    <FName>Memcached::fetch</FName>
    <Desc>public array Memcached::fetch ( void )
Memcached::fetch() retrieves the next result from the last request.
</Desc>
    <FName>Memcached::fetchAll</FName>
    <Desc>public array Memcached::fetchAll ( void )
Memcached::fetchAll() retrieves all the remaining results from the last request.
</Desc>
    <FName>Memcached::flush</FName>
    <Desc>public bool Memcached::flush ([ int $delay = 0 ] )
Memcached::flush() invalidates all existing cache items immediately (by default) or after the delay specified. After invalidation none of the items will be returned in response to a retrieval command (unless it's stored again under the same key after Memcached::flush() has invalidated the items). The flush does not actually free all the memory taken up by the existing items; that will happen gradually as new items are stored.
</Desc>
    <FName>Memcached::get</FName>
    <Desc>public mixed Memcached::get ( string $key [, callable $cache_cb [, int $$flags ]] )
Memcached::get() returns the item that was previously stored under the key. If the item is found and the flags is given Memcached::GET_EXTENDED, it will also return the CAS token value for the item. See Memcached::cas() for how to use CAS tokens. Read-through caching callback may be specified via cache_cb parameter.
</Desc>
    <FName>Memcached::getAllKeys</FName>
    <Desc>public array Memcached::getAllKeys ( void )
Memcached::getAllKeys() queries each memcache server and retrieves an array of all keys stored on them at that point in time. This is not an atomic operation, so it isn't a truly consistent snapshot of the keys at point in time. As memcache doesn't guarantee to return all keys you also cannot assume that all keys have been returned.
</Desc>
    <FName>Memcached::getByKey</FName>
    <Desc>public mixed Memcached::getByKey ( string $server_key , string $key [, callable $cache_cb [, int $flags ]] )
Memcached::getByKey() is functionally equivalent to Memcached::get(), except that the free-form server_key can be used to map the key to a specific server.
</Desc>
    <FName>Memcached::getDelayed</FName>
    <Desc>public bool Memcached::getDelayed ( array $keys [, bool $with_cas [, callable $value_cb ]] )
Memcached::getDelayed() issues a request to memcache for multiple items the keys of which are specified in the keys array. The method does not wait for response and returns right away. When you are ready to collect the items, call either Memcached::fetch() or Memcached::fetchAll(). If with_cas is true, the CAS token values will also be requested. 
Instead of fetching the results explicitly, you can specify a result callback via value_cb parameter.
</Desc>
    <FName>Memcached::getDelayedByKey</FName>
    <Desc>public bool Memcached::getDelayedByKey ( string $server_key , array $keys [, bool $with_cas [, callable $value_cb ]] )
Memcached::getDelayedByKey() is functionally equivalent to Memcached::getDelayed(), except that the free-form server_key can be used to map the keys to a specific server.
</Desc>
    <FName>Memcached::getMulti</FName>
    <Desc>public mixed Memcached::getMulti ( array $keys [, int $flags ] )
Memcached::getMulti() is similar to Memcached::get(), but instead of a single key item, it retrieves multiple items the keys of which are specified in the keys array. 
Note: 
Before v3.0 a second argument &cas_tokens was in use. It was filled with the CAS token values for the found items. The &cas_tokens parameter was removed in v3.0 of the extension. It was replaced with a new flag Memcached::GET_EXTENDED that needs is to be used as the value for flags. 
The flags parameter can be used to specify additional options for Memcached::getMulti(). Memcached::GET_PRESERVE_ORDER ensures that the keys are returned in the same order as they were requested in. Memcached::GET_EXTENDED ensures that the CAS tokens will be fetched too.
</Desc>
    <FName>Memcached::getMultiByKey</FName>
    <Desc>public array Memcached::getMultiByKey ( string $server_key , array $keys [, int $flags ] )
Memcached::getMultiByKey() is functionally equivalent to Memcached::getMulti(), except that the free-form server_key can be used to map the keys to a specific server.
</Desc>
    <FName>Memcached::getOption</FName>
    <Desc>public mixed Memcached::getOption ( int $option )
This method returns the value of a Memcached option. Some options correspond to the ones defined by libmemcached, and some are specific to the extension. See Memcached Constants for more information.
</Desc>
    <FName>Memcached::getResultCode</FName>
    <Desc>public int Memcached::getResultCode ( void )
Memcached::getResultCode() returns one of the Memcached::RES_* constants that is the result of the last executed Memcached method.
</Desc>
    <FName>Memcached::getResultMessage</FName>
    <Desc>public string Memcached::getResultMessage ( void )
Memcached::getResultMessage() returns a string that describes the result code of the last executed Memcached method.
</Desc>
    <FName>Memcached::getServerByKey</FName>
    <Desc>public array Memcached::getServerByKey ( string $server_key )
Memcached::getServerByKey() returns the server that would be selected by a particular server_key in all the Memcached::*ByKey() operations.
</Desc>
    <FName>Memcached::getServerList</FName>
    <Desc>public array Memcached::getServerList ( void )
Memcached::getServerList() returns the list of all servers that are in its server pool.
</Desc>
    <FName>Memcached::getStats</FName>
    <Desc>public array Memcached::getStats ( void )
Memcached::getStats() returns an array containing the state of all available memcache servers. See » memcache protocol specification for details on these statistics.
</Desc>
    <FName>Memcached::getVersion</FName>
    <Desc>public array Memcached::getVersion ( void )
Memcached::getVersion() returns an array containing the version info for all available memcache servers.
</Desc>
    <FName>Memcached::increment</FName>
    <Desc>public int Memcached::increment ( string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )
Memcached::increment() increments a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. Memcached::increment() will set the item to the initial_value parameter if the key doesn't exist.
</Desc>
    <FName>Memcached::incrementByKey</FName>
    <Desc>public int Memcached::incrementByKey ( string $server_key , string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0 ]]] )
Memcached::incrementByKey() increments a numeric item's value by the specified offset. If the item's value is not numeric, an error will result. Memcached::incrementByKey() will set the item to the initial_value parameter if the key doesn't exist.
</Desc>
    <FName>Memcached::isPersistent</FName>
    <Desc>public bool Memcached::isPersistent ( void )
Memcached::isPersistent() checks if the connections to the memcache servers are persistent connections.
</Desc>
    <FName>Memcached::isPristine</FName>
    <Desc>public bool Memcached::isPristine ( void )
Memcached::isPristine() checks if the Memcache instance was recently created.
</Desc>
    <FName>Memcached::prepend</FName>
    <Desc>public bool Memcached::prepend ( string $key , string $value )
Memcached::prepend() prepends the given value string to the value of an existing item. The reason that value is forced to be a string is that prepending mixed types is not well-defined. 
Note: 
If the Memcached::OPT_COMPRESSION is enabled, the operation will fail and a warning will be issued, because prepending compressed data to a value that is potentially already compressed is not possible.
</Desc>
    <FName>Memcached::prependByKey</FName>
    <Desc>public bool Memcached::prependByKey ( string $server_key , string $key , string $value )
Memcached::prependByKey() is functionally equivalent to Memcached::prepend(), except that the free-form server_key can be used to map the key to a specific server.
</Desc>
    <FName>Memcached::quit</FName>
    <Desc>public bool Memcached::quit ( void )
Memcached::quit() closes any open connections to the memcache servers.
</Desc>
    <FName>Memcached::replace</FName>
    <Desc>public bool Memcached::replace ( string $key , mixed $value [, int $expiration ] )
Memcached::replace() is similar to Memcached::set(), but the operation fails if the key does not exist on the server.
</Desc>
    <FName>Memcached::replaceByKey</FName>
    <Desc>public bool Memcached::replaceByKey ( string $server_key , string $key , mixed $value [, int $expiration ] )
Memcached::replaceByKey() is functionally equivalent to Memcached::replace(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.
</Desc>
    <FName>Memcached::resetServerList</FName>
    <Desc>public bool Memcached::resetServerList ( void )
Memcached::resetserverlist() removes all memcache servers from the known server list, reseting it back to empty.
</Desc>
    <FName>Memcached::set</FName>
    <Desc>public bool Memcached::set ( string $key , mixed $value [, int $expiration ] )
Memcached::set() stores the value on a memcache server under the specified key. The expiration parameter can be used to control when the value is considered expired. 
The value can be any valid PHP type except for resources, because those cannot be represented in a serialized form. If the Memcached::OPT_COMPRESSION option is turned on, the serialized value will also be compressed before storage.
</Desc>
    <FName>Memcached::setByKey</FName>
    <Desc>public bool Memcached::setByKey ( string $server_key , string $key , mixed $value [, int $expiration ] )
Memcached::setByKey() is functionally equivalent to Memcached::set(), except that the free-form server_key can be used to map the key to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.
</Desc>
    <FName>Memcached::setMulti</FName>
    <Desc>public bool Memcached::setMulti ( array $items [, int $expiration ] )
Memcached::setMulti() is similar to Memcached::set(), but instead of a single key/value item, it works on multiple items specified in items. The expiration time applies to all the items at once.
</Desc>
    <FName>Memcached::setMultiByKey</FName>
    <Desc>public bool Memcached::setMultiByKey ( string $server_key , array $items [, int $expiration ] )
Memcached::setMultiByKey() is functionally equivalent to Memcached::setMulti(), except that the free-form server_key can be used to map the keys from items to a specific server. This is useful if you need to keep a bunch of related keys on a certain server.
</Desc>
    <FName>Memcached::setOption</FName>
    <Desc>public bool Memcached::setOption ( int $option , mixed $value )
This method sets the value of a Memcached option. Some options correspond to the ones defined by libmemcached, and some are specific to the extension. See Memcached Constants for more information. 
The options listed below require values specified via constants. 
Memcached::OPT_HASH requires Memcached::HASH_* values. 
Memcached::OPT_DISTRIBUTION requires Memcached::DISTRIBUTION_* values.
</Desc>
    <FName>Memcached::setOptions</FName>
    <Desc>public bool Memcached::setOptions ( array $options )
Memcached::setOptions() is a variation of the Memcached::setOption() that takes an array of options to be set.
</Desc>
    <FName>Memcached::setSaslAuthData</FName>
    <Desc>public void Memcached::setSaslAuthData ( string $username , string $password )
Memcached::setSaslAuthData() sets the username and password that should be used for SASL authentication with the memcache servers. 
This method is only available when the memcached extension is built with SASL support. Please refer to Memcached setup for how to do this.
</Desc>
    <FName>Memcached::touch</FName>
    <Desc>public bool Memcached::touch ( string $key , int $expiration )
Memcached::touch() sets a new expiration value on the given key.
</Desc>
    <FName>Memcached::touchByKey</FName>
    <Desc>public bool Memcached::touchByKey ( string $server_key , string $key , int $expiration )
Memcached::touchByKey() is functionally equivalent to Memcached::touch(), except that the free-form server_key can be used to map the key to a specific server.
</Desc>
    <FName>MessageFormatter::create</FName>
    <Desc>Object oriented style (method) 
public static MessageFormatter MessageFormatter::create ( string $locale , string $pattern )
Object oriented style (constructor): 
public MessageFormatter::__construct ( string $locale , string $pattern )
Procedural style 
MessageFormatter msgfmt_create ( string $locale , string $pattern )
Constructs a new Message Formatter
</Desc>
    <FName>MessageFormatter::__construct</FName>
    <Desc>Object oriented style (method) 
public static MessageFormatter MessageFormatter::create ( string $locale , string $pattern )
Object oriented style (constructor): 
public MessageFormatter::__construct ( string $locale , string $pattern )
Procedural style 
MessageFormatter msgfmt_create ( string $locale , string $pattern )
Constructs a new Message Formatter
</Desc>
    <FName>MessageFormatter::format</FName>
    <Desc>Object oriented style 
public string MessageFormatter::format ( array $args )
Procedural style 
string msgfmt_format ( MessageFormatter $fmt , array $args )
Format the message by substituting the data into the format string according to the locale rules
</Desc>
    <FName>msgfmt_format</FName>
    <Desc>Object oriented style 
public string MessageFormatter::format ( array $args )
Procedural style 
string msgfmt_format ( MessageFormatter $fmt , array $args )
Format the message by substituting the data into the format string according to the locale rules
</Desc>
    <FName>MessageFormatter::formatMessage</FName>
    <Desc>Object oriented style 
public static string MessageFormatter::formatMessage ( string $locale , string $pattern , array $args )
Procedural style 
string msgfmt_format_message ( string $locale , string $pattern , array $args )
Quick formatting function that formats the string without having to explicitly create the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.
</Desc>
    <FName>msgfmt_format_message</FName>
    <Desc>Object oriented style 
public static string MessageFormatter::formatMessage ( string $locale , string $pattern , array $args )
Procedural style 
string msgfmt_format_message ( string $locale , string $pattern , array $args )
Quick formatting function that formats the string without having to explicitly create the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.
</Desc>
    <FName>MessageFormatter::getErrorCode</FName>
    <Desc>Object oriented style 
public int MessageFormatter::getErrorCode ( void )
Procedural style 
int msgfmt_get_error_code ( MessageFormatter $fmt )
Get the error code from last operation.
</Desc>
    <FName>msgfmt_get_error_code</FName>
    <Desc>Object oriented style 
public int MessageFormatter::getErrorCode ( void )
Procedural style 
int msgfmt_get_error_code ( MessageFormatter $fmt )
Get the error code from last operation.
</Desc>
    <FName>MessageFormatter::getErrorMessage</FName>
    <Desc>Object oriented style 
public string MessageFormatter::getErrorMessage ( void )
Procedural style 
string msgfmt_get_error_message ( MessageFormatter $fmt )
Get the error text from the last operation.
</Desc>
    <FName>msgfmt_get_error_message</FName>
    <Desc>Object oriented style 
public string MessageFormatter::getErrorMessage ( void )
Procedural style 
string msgfmt_get_error_message ( MessageFormatter $fmt )
Get the error text from the last operation.
</Desc>
    <FName>MessageFormatter::getLocale</FName>
    <Desc>Object oriented style 
public string MessageFormatter::getLocale ( void )
Procedural style 
string msgfmt_get_locale ( NumberFormatter $formatter )
Get the locale for which the formatter was created.
</Desc>
    <FName>msgfmt_get_locale</FName>
    <Desc>Object oriented style 
public string MessageFormatter::getLocale ( void )
Procedural style 
string msgfmt_get_locale ( NumberFormatter $formatter )
Get the locale for which the formatter was created.
</Desc>
    <FName>MessageFormatter::getPattern</FName>
    <Desc>Object oriented style 
public string MessageFormatter::getPattern ( void )
Procedural style 
string msgfmt_get_pattern ( MessageFormatter $fmt )
Get the pattern used by the formatter
</Desc>
    <FName>msgfmt_get_pattern</FName>
    <Desc>Object oriented style 
public string MessageFormatter::getPattern ( void )
Procedural style 
string msgfmt_get_pattern ( MessageFormatter $fmt )
Get the pattern used by the formatter
</Desc>
    <FName>MessageFormatter::parse</FName>
    <Desc>Object oriented style 
public array MessageFormatter::parse ( string $value )
Procedural style 
array msgfmt_parse ( MessageFormatter $fmt , string $value )
Parses input string and return any extracted items as an array.
</Desc>
    <FName>msgfmt_parse</FName>
    <Desc>Object oriented style 
public array MessageFormatter::parse ( string $value )
Procedural style 
array msgfmt_parse ( MessageFormatter $fmt , string $value )
Parses input string and return any extracted items as an array.
</Desc>
    <FName>MessageFormatter::parseMessage</FName>
    <Desc>Object oriented style 
public static array MessageFormatter::parseMessage ( string $locale , string $pattern , string $source )
Procedural style 
array msgfmt_parse_message ( string $locale , string $pattern , string $value )
Parses input string without explicitly creating the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.
</Desc>
    <FName>msgfmt_parse_message</FName>
    <Desc>Object oriented style 
public static array MessageFormatter::parseMessage ( string $locale , string $pattern , string $source )
Procedural style 
array msgfmt_parse_message ( string $locale , string $pattern , string $value )
Parses input string without explicitly creating the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.
</Desc>
    <FName>MessageFormatter::setPattern</FName>
    <Desc>Object oriented style 
public bool MessageFormatter::setPattern ( string $pattern )
Procedural style 
bool msgfmt_set_pattern ( MessageFormatter $fmt , string $pattern )
Set the pattern used by the formatter
</Desc>
    <FName>msgfmt_set_pattern</FName>
    <Desc>Object oriented style 
public bool MessageFormatter::setPattern ( string $pattern )
Procedural style 
bool msgfmt_set_pattern ( MessageFormatter $fmt , string $pattern )
Set the pattern used by the formatter
</Desc>
    <FName>Mongo::connectUtil</FName>
    <Desc>protected bool Mongo::connectUtil ( void )
Warning 
This is an internal function that you should never call yourself.
</Desc>
    <FName>Mongo::__construct</FName>
    <Desc>public Mongo::__construct ([ string $server [, array $options ]] )
This method overwrites the MongoClient constructor and turns off acknowledged writes. 
Please see MongoClient::__construct() for description of the parameters.
</Desc>
    <FName>Mongo::getPoolSize</FName>
    <Desc>public static int Mongo::getPoolSize ( void )
Warning 
This feature has been DEPRECATED as of version 1.2.3. Relying on this feature is highly discouraged. Please use MongoPool::getSize() instead.
</Desc>
    <FName>Mongo::getSlave</FName>
    <Desc>public string Mongo::getSlave ( void )
This finds the address of the secondary currently being used for reads. It is a read-only method: it does not change anything about the internal state of the object. 
When you create a connection to the database, the driver will not immediately decide on a secondary to use. Thus, after you connect, this function will return NULL even if there are secondaries available. When you first do a query with slaveOkay set, at that point the driver will choose a secondary for this connection. At that point, this function will return the chosen secondary. 
See the query section of this manual for information on distributing reads to secondaries.
</Desc>
    <FName>Mongo::getSlaveOkay</FName>
    <Desc>public bool Mongo::getSlaveOkay ( void )
See the query section of this manual for information on distributing reads to secondaries.
</Desc>
    <FName>Mongo::poolDebug</FName>
    <Desc>public array Mongo::poolDebug ( void )
Warning 
This feature has been DEPRECATED as of version 1.2.3. Relying on this feature is highly discouraged. Please use MongoPool::info() instead. 
Returns an array of information about all connection pools.
</Desc>
    <FName>Mongo::setPoolSize</FName>
    <Desc>public static bool Mongo::setPoolSize ( int $size )
Warning 
This method has been DEPRECATED as of version 1.2.3. Relying on this feature is highly discouraged. Please use MongoPool::setSize() instead. 
Sets the max number of connections new pools will be able to create.
</Desc>
    <FName>Mongo::setSlaveOkay</FName>
    <Desc>public bool Mongo::setSlaveOkay ([ bool $ok = TRUE ] )
See the query section of this manual for information on distributing reads to secondaries.
</Desc>
    <FName>Mongo::switchSlave</FName>
    <Desc>public string Mongo::switchSlave ( void )
This choses a random secondary for a connection to read from. It is called automatically by the driver and should not need to be used. It calls MongoClient::getHosts() (to refresh the status of hosts) and Mongo::getSlave() (to get the return value). 
See the query section of this manual for information on distributing reads to secondaries.
</Desc>
    <FName>MongoBinData::__construct</FName>
    <Desc>public MongoBinData::__construct ( string $data [, int $type = 0 ] )
Creates a new binary data object. 
There are seven types of binary data currently recognized by the BSON spec, which are defined as class constants. For backwards compatibility, the PHP driver uses MongoBinData::BYTE_ARRAY as the default; however, this may change to MongoBinData::GENERIC in the future. Users are encouraged to specify a type instead of relying on the default.
</Desc>
    <FName>MongoBinData::__toString</FName>
    <Desc>public string MongoBinData::__toString ( void )
</Desc>
    <FName>MongoClient::close</FName>
    <Desc>public bool MongoClient::close ([ boolean|string $connection ] )
The MongoClient::close() method forcefully closes a connection to the database, even if persistent connections are being used. You should never have to do this under normal circumstances.
</Desc>
    <FName>MongoClient::connect</FName>
    <Desc>public bool MongoClient::connect ( void )
</Desc>
    <FName>MongoClient::__construct</FName>
    <Desc>public MongoClient::__construct ([ string $server = "mongodb://localhost:27017" [, array $options = array("connect" => TRUE) [, array $driver_options ]]] )
If no parameters are passed, this connects to "localhost:27017" (or whatever was specified in php.ini for mongo.default_host and mongo.default_port). 
server should have the form: 
mongodb://[username:password@]host1[:port1][,host2[:port2:],...]/dbThe connection string always starts with mongodb://, to indicate it is a connection string in this form. 
If username and password are specified, the constructor will attempt to authenticate the connection with the database before returning. Username and password are optional and must be followed by an @, if specified. 
At least one host must be given (port optional, always defaulting to 27017) and as many hosts as desired may be connected to. Host names are comma-separated and the constructor will return successfully if it connected to at least one host. If it could not connect to any of the hosts, it will throw a MongoConnectionException. Please see the Replica Sets section for information on how to connect to Replica Sets. 
If you specified a username and password, you may specify a database to authenticate with. If db is not specified, "admin" will be used. 
An optional query string may be used to specify extra options. The same options are supported through the options array as well, and are therefore redescribed there. See the examples below on how to set those options. 
One part of the options governs how the driver reads from secondary nodes in a replica set environment. Extra information on how these read preferences work is available as well through the read preferences documentation page.
</Desc>
    <FName>MongoClient::dropDB</FName>
    <Desc>public array MongoClient::dropDB ( mixed $db )
Warning 
Deprecated
Use MongoDB::drop() instead.
</Desc>
    <FName>MongoClient::__get</FName>
    <Desc>public MongoDB MongoClient::__get ( string $dbname )
This is the cleanest way of getting a database. If the database name has any special characters, MongoClient::selectDB() will need to be used; however, this should be sufficient for most cases. 
<?php

$mongo = new MongoClient();

// the following two lines are equivalent
$db = $mongo->selectDB("foo");
$db = $mongo->foo;

?>
</Desc>
    <FName>MongoClient::getConnections</FName>
    <Desc>public static array MongoClient::getConnections ( void )
Returns an array of all open connections, and information about each of the servers
</Desc>
    <FName>MongoClient::getHosts</FName>
    <Desc>public array MongoClient::getHosts ( void )
This method is only useful with a connection to a replica set. It returns the status of all of the hosts in the set. Without a replica set, it will just return an array with one element containing the host that you are connected to. 
See the query section of this manual for information on distributing reads to secondaries.
</Desc>
    <FName>MongoClient::getReadPreference</FName>
    <Desc>public array MongoClient::getReadPreference ( void )
</Desc>
    <FName>MongoClient::getWriteConcern</FName>
    <Desc>public array MongoClient::getWriteConcern ( void )
</Desc>
    <FName>MongoClient::killCursor</FName>
    <Desc>public bool MongoClient::killCursor ( string $server_hash , int|MongoInt64 $id )
In certain situations it might be needed to kill a cursor on the server. Usually cursors time out after 10 minutes of inactivity, but it is possible to create an immortal cursor with MongoCursor::immortal() that never times out. In order to be able to kill such an immortal cursor, you can call this method with the information supplied by MongoCursor::info().
</Desc>
    <FName>MongoClient::listDBs</FName>
    <Desc>public array MongoClient::listDBs ( void )
</Desc>
    <FName>MongoClient::selectCollection</FName>
    <Desc>public MongoCollection MongoClient::selectCollection ( string $db , string $collection )
</Desc>
    <FName>MongoClient::selectDB</FName>
    <Desc>public MongoDB MongoClient::selectDB ( string $name )
</Desc>
    <FName>MongoClient::setReadPreference</FName>
    <Desc>public bool MongoClient::setReadPreference ( string $read_preference [, array $tags ] )
</Desc>
    <FName>MongoClient::setWriteConcern</FName>
    <Desc>public bool MongoClient::setWriteConcern ( mixed $w [, int $wtimeout ] )
</Desc>
    <FName>MongoClient::__toString</FName>
    <Desc>public string MongoClient::__toString ( void )
</Desc>
    <FName>MongoCode::__construct</FName>
    <Desc>public MongoCode::__construct ( string $code [, array $scope = array() ] )
</Desc>
    <FName>MongoCode::__toString</FName>
    <Desc>public string MongoCode::__toString ( void )
</Desc>
    <FName>MongoCollection::__toString</FName>
    <Desc>public string MongoCollection::__toString ( void )
</Desc>
    <FName>MongoCollection::aggregate</FName>
    <Desc>public array MongoCollection::aggregate ( array $pipeline [, array $options ] )
public array MongoCollection::aggregate ( array $op [, array $op [, array $... ]] )
The MongoDB » aggregation framework provides a means to calculate aggregated values without having to use MapReduce. While MapReduce is powerful, it is often more difficult than necessary for many simple aggregation tasks, such as totaling or averaging field values. 
This method accepts either a variable amount of pipeline operators, or a single array of operators constituting the pipeline.
</Desc>
    <FName>MongoCollection::aggregateCursor</FName>
    <Desc>public MongoCommandCursor MongoCollection::aggregateCursor ( array $command [, array $options ] )
With this method you can execute Aggregation Framework pipelines and retrieve the results through a cursor, instead of getting just one document back as you would with MongoCollection::aggregate(). This method returns a MongoCommandCursor object. This cursor object implements the Iterator interface just like the MongoCursor objects that are returned by the MongoCollection::find() method. 
Note: The resulting MongoCommandCursor will inherit this collection's read preference. MongoCommandCursor::setReadPreference() may be used to change the read preference before iterating on the cursor.
</Desc>
    <FName>MongoCollection::batchInsert</FName>
    <Desc>public mixed MongoCollection::batchInsert ( array $a [, array $options = array() ] )
</Desc>
    <FName>MongoCollection::__construct</FName>
    <Desc>public MongoCollection::__construct ( MongoDB $db , string $name )
</Desc>
    <FName>MongoCollection::count</FName>
    <Desc>public int MongoCollection::count ([ array $query = array() [, array $options = array() ]] )
</Desc>
    <FName>MongoCollection::createDBRef</FName>
    <Desc>public array MongoCollection::createDBRef ( mixed $document_or_id )
</Desc>
    <FName>MongoCollection::createIndex</FName>
    <Desc>public bool MongoCollection::createIndex ( array $keys [, array $options = array() ] )
Creates an index on the specified field(s) if it does not already exist. Fields may be indexed with a direction (e.g. ascending or descending) or a special type (e.g. text, geospatial, hashed). 
Note: 
This method will use the » createIndexes database command when communicating with MongoDB 2.6+. For previous database versions, the method will perform an insert operation on the special system.indexes collection.
</Desc>
    <FName>MongoCollection::deleteIndex</FName>
    <Desc>public array MongoCollection::deleteIndex ( string|array $keys )
This method is identical to: 
<?php

public function deleteIndexes($keys) {
  $indexName = $this->toIndexString($keys);

  return $this->db->command(array(
    "deleteIndexes" => $this->getName(),
    "index" => $indexName,
  ));
}

?> 
Each index is given a unique name when it is created. This is often generated by the driver based on the index key(s) and order/type, but custom names may also be specified with MongoCollection::createIndex()'s "name" option). 
Unfortunately, MongoCollection::deleteIndex() cannot delete custom-named indexes due to a backwards compatibility issue. When a string argument is provided, it is assumed to be the single field name in an ascending index (e.g. the name "x_1" would be used for the argument "x"). If an array or object is provided, an index name is generated just as if that argument was passed to MongoCollection::createIndex(). 
In order to delete a custom-named index with the PHP driver, the deleteIndexes database command must be used. For instance, an index named "myIndex" could be deleted with the PHP driver by running: 
<?php

$db->command(array(
  "deleteIndexes" => $collection->getName(),
  "index" => "myIndex",
));

?> 
To determine the name of an index with the PHP driver, you can query the system.indexes collection of a database and look for the "name" field of each result. The "ns" field will indicate the collection to which each index belongs.
</Desc>
    <FName>MongoCollection::deleteIndexes</FName>
    <Desc>public array MongoCollection::deleteIndexes ( void )
</Desc>
    <FName>MongoCollection::distinct</FName>
    <Desc>public array MongoCollection::distinct ( string $key [, array $query ] )
The distinct command returns a list of distinct values for the given key across a collection.
</Desc>
    <FName>MongoCollection::drop</FName>
    <Desc>public array MongoCollection::drop ( void )
Drops this collection and deletes its indices.
</Desc>
    <FName>MongoCollection::ensureIndex</FName>
    <Desc>public bool MongoCollection::ensureIndex ( string|array $key|keys [, array $options = array() ] )
Warning 
This method is deprecated since version 1.5.0. Please use MongoCollection::createIndex() instead. 
Creates an index on the specified field(s) if it does not already exist. Fields may be indexed with a direction (e.g. ascending or descending) or a special type (e.g. text, geospatial, hashed). 
Note: 
This method will use the » createIndexes database command when communicating with MongoDB 2.6+. For previous database versions, the method will perform an insert operation on the special system.indexes collection.
</Desc>
    <FName>MongoCollection::find</FName>
    <Desc>public MongoCursor MongoCollection::find ([ array $query = array() [, array $fields = array() ]] )
</Desc>
    <FName>MongoCollection::findAndModify</FName>
    <Desc>public array MongoCollection::findAndModify ( array $query [, array $update [, array $fields [, array $options ]]] )
The findAndModify command atomically modifies and returns a single document. By default, the returned document does not include the modifications made on the update. To return the document with the modifications made on the update, use the new option.
</Desc>
    <FName>MongoCollection::findOne</FName>
    <Desc>public array MongoCollection::findOne ([ array $query = array() [, array $fields = array() [, array $options = array() ]]] )
As opposed to MongoCollection::find(), this method will return only the first result from the result set, and not a MongoCursor that can be iterated over.
</Desc>
    <FName>MongoCollection::__get</FName>
    <Desc>public MongoCollection MongoCollection::__get ( string $name )
A concise syntax for getting a collection with a dot-separated name. If a collection name contains strange characters, you may have to use MongoDB::selectCollection() instead. 
<?php

$mongo = new MongoClient();

// the following two lines are equivalent
$collection = $mongo->selectDB("foo")->selectCollection("bar.baz");
$collection = $mongo->foo->bar->baz;

?>
</Desc>
    <FName>MongoCollection::getDBRef</FName>
    <Desc>public array MongoCollection::getDBRef ( array $ref )
</Desc>
    <FName>MongoCollection::getIndexInfo</FName>
    <Desc>public array MongoCollection::getIndexInfo ( void )
</Desc>
    <FName>MongoCollection::getName</FName>
    <Desc>public string MongoCollection::getName ( void )
</Desc>
    <FName>MongoCollection::getReadPreference</FName>
    <Desc>public array MongoCollection::getReadPreference ( void )
</Desc>
    <FName>MongoCollection::getSlaveOkay</FName>
    <Desc>public bool MongoCollection::getSlaveOkay ( void )
See the query section of this manual for information on distributing reads to secondaries.
</Desc>
    <FName>MongoCollection::getWriteConcern</FName>
    <Desc>public array MongoCollection::getWriteConcern ( void )
</Desc>
    <FName>MongoCollection::group</FName>
    <Desc>public array MongoCollection::group ( mixed $keys , array $initial , MongoCode $reduce [, array $options = array() ] )
</Desc>
    <FName>MongoCollection::insert</FName>
    <Desc>public bool|array MongoCollection::insert ( array|object $document [, array $options = array() ] )
All strings sent to the database must be UTF-8. If a string is not UTF-8, a MongoException will be thrown. To insert (or query for) a non-UTF-8 string, use MongoBinData.
</Desc>
    <FName>MongoCollection::parallelCollectionScan</FName>
    <Desc>public array[MongoCommandCursor] MongoCollection::parallelCollectionScan ( int $num_cursors )
This method returns an array of a maximum of num_cursors cursors. An iteration over one of the returned cursors results in a partial set of documents for a collection. Iteration over all the returned cursors results in getting every document back from the collection. 
This method is a wrapper for the parallelCollectionScan MongoDB command.
</Desc>
    <FName>MongoCollection::remove</FName>
    <Desc>public bool|array MongoCollection::remove ([ array $criteria = array() [, array $options = array() ]] )
</Desc>
    <FName>MongoCollection::save</FName>
    <Desc>public mixed MongoCollection::save ( array|object $document [, array $options = array() ] )
If the object is from the database, update the existing database object, otherwise insert this object.
</Desc>
    <FName>MongoCollection::setReadPreference</FName>
    <Desc>public bool MongoCollection::setReadPreference ( string $read_preference [, array $tags ] )
</Desc>
    <FName>MongoCollection::setSlaveOkay</FName>
    <Desc>public bool MongoCollection::setSlaveOkay ([ bool $ok = TRUE ] )
See the query section of this manual for information on distributing reads to secondaries.
</Desc>
    <FName>MongoCollection::setWriteConcern</FName>
    <Desc>public bool MongoCollection::setWriteConcern ( mixed $w [, int $wtimeout ] )
</Desc>
    <FName>MongoCollection::toIndexString</FName>
    <Desc>static protected string MongoCollection::toIndexString ( mixed $keys )
Warning 
This method is deprecated since version 1.5.0.
</Desc>
    <FName>MongoCollection::update</FName>
    <Desc>public bool|array MongoCollection::update ( array $criteria , array $new_object [, array $options = array() ] )
</Desc>
    <FName>MongoCollection::validate</FName>
    <Desc>public array MongoCollection::validate ([ bool $scan_data = FALSE ] )
</Desc>
    <FName>MongoCommandCursor::batchSize</FName>
    <Desc>public MongoCommandCursor MongoCommandCursor::batchSize ( int $batchSize )
A cursor typically fetches a batch of result objects and store them locally. This method sets the batchSize value to configure the amount of documents retrieved from the server in one round trip.
</Desc>
    <FName>MongoCommandCursor::__construct</FName>
    <Desc>public MongoCommandCursor::__construct ( MongoClient $connection , string $ns , array $command = array() )
Generally, you should not have to construct a MongoCommandCursor manually, as there are helper functions such as MongoCollection::aggregateCursor() and MongoCollection::parallelCollectionScan(); however, if the server introduces new commands that can return cursors, this constructor will be useful in the absence of specific helper methods. You may also consider using MongoCommandCursor::createFromDocument().
</Desc>
    <FName>MongoCommandCursor::createFromDocument</FName>
    <Desc>public static MongoCommandCursor MongoCommandCursor::createFromDocument ( MongoClient $connection , string $hash , array $document )
Use this method if you have a raw command result with cursor information in it. Note that cursors created with this method cannot be iterated multiple times, as they will lack the original command necessary for re-execution.
</Desc>
    <FName>MongoCommandCursor::current</FName>
    <Desc>public array MongoCommandCursor::current ( void )
This returns NULL until MongoCommandCursor::rewind() is called.
</Desc>
    <FName>MongoCommandCursor::dead</FName>
    <Desc>public bool MongoCommandCursor::dead ( void )
This method checks whether the MongoCommandCursor cursor has been exhausted and the database has no more results to send to the client. A cursor being "dead" does not necessarily mean that there are no more results available for iteration.
</Desc>
    <FName>MongoCommandCursor::getReadPreference</FName>
    <Desc>public array MongoCommandCursor::getReadPreference ( void )
</Desc>
    <FName>MongoCommandCursor::info</FName>
    <Desc>public array MongoCommandCursor::info ( void )
This can be called before or after the cursor has started iterating.
</Desc>
    <FName>MongoCommandCursor::key</FName>
    <Desc>public int MongoCommandCursor::key ( void )
</Desc>
    <FName>MongoCommandCursor::next</FName>
    <Desc>public void MongoCommandCursor::next ( void )
</Desc>
    <FName>MongoCommandCursor::rewind</FName>
    <Desc>public array MongoCommandCursor::rewind ( void )
If the cursor has already started iteration, the command will be re-executed.
</Desc>
    <FName>MongoCommandCursor::setReadPreference</FName>
    <Desc>public MongoCommandCursor MongoCommandCursor::setReadPreference ( string $read_preference [, array $tags ] )
</Desc>
    <FName>MongoCommandCursor::timeout</FName>
    <Desc>public MongoCommandCursor MongoCommandCursor::timeout ( int $ms )
A timeout can be set at any time and will affect subsequent data retrieval associated with this cursor, including fetching more results from the database.
</Desc>
    <FName>MongoCommandCursor::valid</FName>
    <Desc>public bool MongoCommandCursor::valid ( void )
</Desc>
    <FName>MongoCursor::addOption</FName>
    <Desc>public MongoCursor MongoCursor::addOption ( string $key , mixed $value )
This is an advanced function and should not be used unless you know what you're doing. 
A query can optionally be nested in a "query" field if other options, such as a sort or hint, are given. For instance, adding a sort causes the query to become a subfield of a bigger query object, like: 
<?php

$query = array("query" => $query, "orderby" => $sort);

?> 
This method is for adding a top-level field to a query. It makes the query a subobject (if it isn't already) and adds the key/value pair of your chosing to the top level. 
Warning 
It cannot be used to add extra criteria to a query on the fly. For instance, this will not work: 
<?php

// NOT CORRECT
$cursor = $users->find()->addOption("name", "joe")->addOption("age", 20);

?> 
This does not query for a user named "joe" with an age of 20.
</Desc>
    <FName>MongoCursor::awaitData</FName>
    <Desc>public MongoCursor MongoCursor::awaitData ([ bool $wait = TRUE ] )
This method is to be used with tailable cursors. If we are at the end of the data, block for a while rather than returning no data. After a timeout period, we do return as normal.
</Desc>
    <FName>MongoCursor::batchSize</FName>
    <Desc>public MongoCursor MongoCursor::batchSize ( int $batchSize )
A cursor typically fetches a batch of result objects and store them locally. This method sets the batchSize value to configure the amount of documents retrieved from the server in one round trip. However, it will never return more documents than fit in the max batch size limit (usually 4MB).
</Desc>
    <FName>MongoCursor::__construct</FName>
    <Desc>public MongoCursor::__construct ( MongoClient $connection , string $ns [, array $query = array() [, array $fields = array() ]] )
</Desc>
    <FName>MongoCursor::count</FName>
    <Desc>public int MongoCursor::count ([ bool $foundOnly = FALSE ] )
This method does not affect the state of the cursor: if you haven't queried yet, you can still apply limits, skips, etc. If you have started iterating through results, it will not move the current position of the cursor. If you have exhausted the cursor, it will not reset it.
</Desc>
    <FName>MongoCursor::current</FName>
    <Desc>public array MongoCursor::current ( void )
This returns NULL until MongoCursor::next() is called.
</Desc>
    <FName>MongoCursor::dead</FName>
    <Desc>public bool MongoCursor::dead ( void )
The database sends responses in batches of documents, up to 4MB of documents per response. This method checks if the database has more batches or if the result set has been exhausted. 
A cursor being "dead" does not mean that MongoCursor::hasNext() will return FALSE, it only means that the database is done sending results to the client. The client should continue iterating through results until MongoCursor::hasNext() is FALSE.
</Desc>
    <FName>MongoCursor::doQuery</FName>
    <Desc>protected void MongoCursor::doQuery ( void )
Warning 
Please do not use me. 
This function actually queries the database. All queries and commands go through this function. Thus, this function can be overridden to provide custom query handling. 
This handles serializing your query, sending it to the database, receiving a response, and deserializing it. Thus, if you are planning to override this, your code should probably call out to the original to use the existing functionality (see the example below).
</Desc>
    <FName>MongoCursor::explain</FName>
    <Desc>public array MongoCursor::explain ( void )
</Desc>
    <FName>MongoCursor::fields</FName>
    <Desc>public MongoCursor MongoCursor::fields ( array $f )
Fields are specified by "fieldname" : bool. TRUE indicates that a field should be returned, FALSE indicates that it should not be returned. You can also use 1 and 0 instead of TRUE and FALSE. 
Thus, to return only the "summary" field, one could say: 
<?php

$cursor->fields(array("summary" => true));

?> 
To return all fields except the "hidden" field: 
<?php

$cursor->fields(array("hidden" => false));

?>
</Desc>
    <FName>MongoCursor::getNext</FName>
    <Desc>public array MongoCursor::getNext ( void )
Note: 
MongoCursor::getNext() is an alias of MongoCursor::next(). 
</Desc>
    <FName>MongoCursor::getReadPreference</FName>
    <Desc>public array MongoCursor::getReadPreference ( void )
</Desc>
    <FName>MongoCursor::hasNext</FName>
    <Desc>public bool MongoCursor::hasNext ( void )
</Desc>
    <FName>MongoCursor::hint</FName>
    <Desc>public MongoCursor MongoCursor::hint ( mixed $index )
</Desc>
    <FName>MongoCursor::immortal</FName>
    <Desc>public MongoCursor MongoCursor::immortal ([ bool $liveForever = TRUE ] )
After remaining idle on the server for some amount of time, cursors, by default, "die." This is generally the behavior one wants. The database cleans up a cursor once all of its results have been sent to the client, but if the client doesn't request all of the results, the cursor will languish there, taking up resources. Thus, after a few minutes, the cursor "times out" and the database assumes the client has gotten everything it needs and cleans up its the cursor's resources. 
If, for some reason, you need a cursor to hang around for a long time, you can prevent the database from cleaning it up by using this method. However, if you make a cursor immortal, you need to iterate through all of its results (or at least until MongoCursor::dead() returns TRUE) or the cursor will hang around the database forever, taking up resources.
</Desc>
    <FName>MongoCursor::info</FName>
    <Desc>public array MongoCursor::info ( void )
This can be called before or after the cursor has started iterating.
</Desc>
    <FName>MongoCursor::key</FName>
    <Desc>public string|int MongoCursor::key ( void )
</Desc>
    <FName>MongoCursor::limit</FName>
    <Desc>public MongoCursor MongoCursor::limit ( int $num )
</Desc>
    <FName>MongoCursor::maxTimeMS</FName>
    <Desc>public MongoCursor MongoCursor::maxTimeMS ( int $ms )
Specifies a cumulative time limit in milliseconds to be allowed by the server for processing operations on the cursor.
</Desc>
    <FName>MongoCursor::next</FName>
    <Desc>public array MongoCursor::next ( void )
</Desc>
    <FName>MongoCursor::partial</FName>
    <Desc>public MongoCursor MongoCursor::partial ([ bool $okay = TRUE ] )
This option allows mongos to send partial query results if a shard is unreachable. This is only applicable when running a sharded MongoDB cluster and connecting to a mongos. 
If a shard goes down and a query needs to be sent to that shard, mongos will return the results (if any) from shards it already contacted, then an error message that it could not reach the shard (a MongoCursorException in PHP). If you would like to get whatever results mongos can provide and no exception, you can use this method. Note that this means that you won't have an indication that a shard is down in your query response. 
This has no effect on the query if all shards are reachable. This flag was implemented in MongoDB version 1.7.5, so will only work with that version and higher.
</Desc>
    <FName>MongoCursor::reset</FName>
    <Desc>public void MongoCursor::reset ( void )
</Desc>
    <FName>MongoCursor::rewind</FName>
    <Desc>public void MongoCursor::rewind ( void )
This is identical to the function: 
<?php

public function rewind() {
    $this->reset();
    $this->next();
}

?>
</Desc>
    <FName>MongoCursor::setFlag</FName>
    <Desc>public MongoCursor MongoCursor::setFlag ( int $flag [, bool $set = TRUE ] )
The MongoCursor class has several methods for setting flags on the query object. This method is available in case the MongoDB wire protocol has acquired a new flag, and the driver has not been updated with a method for this new flag. In all other cases, the method should be used. See the "See also" section for available methods.
</Desc>
    <FName>MongoCursor::setReadPreference</FName>
    <Desc>public MongoCursor MongoCursor::setReadPreference ( string $read_preference [, array $tags ] )
</Desc>
    <FName>MongoCursor::skip</FName>
    <Desc>public MongoCursor MongoCursor::skip ( int $num )
</Desc>
    <FName>MongoCursor::slaveOkay</FName>
    <Desc>public MongoCursor MongoCursor::slaveOkay ([ bool $okay = TRUE ] )
Warning 
This method is deprecated since version 1.5.0. Instead, please use MongoCursor::setReadPreference() and Read Preferences. 
Calling this will make the driver route reads to secondaries if: 
You are using a replica set, and 
You created a MongoClient instance using the option "replicaSet" => "setName", and 
There is a healthy secondary that can be reached by the driver. 
You can check which server was used for this query by calling MongoCursor::info() after running the query. It's server field will show which server the query was sent to. 
Note that you should use this function even if you do not use the automatic routing to secondaries. If you connect directly to a secondary in a replica set, you still need to call this function, which basically tells the database that you are aware that you might be getting older data and you're okay with that. If you do not call this, you'll get "not master" errors when you try to query. 
This method will override the static class variable MongoCursor::$slaveOkay. It will also override Mongo::setSlaveOkay(), MongoDB::setSlaveOkay() and MongoCollection::setSlaveOkay().
</Desc>
    <FName>MongoCursor::snapshot</FName>
    <Desc>public MongoCursor MongoCursor::snapshot ( void )
Use snapshot mode for the query. Snapshot mode ensures that a document will not be returned more than once because an intervening write operation results in a move of the document. Documents inserted or deleted during the lifetime of the cursor may or may not be returned, irrespective of snapshot mode. 
Queries with short responses (less than 1MB) are always effectively snapshotted. 
Snapshot mode may not be used with sorting, explicit hints, or queries on sharded collections.
</Desc>
    <FName>MongoCursor::sort</FName>
    <Desc>public MongoCursor MongoCursor::sort ( array $fields )
</Desc>
    <FName>MongoCursor::tailable</FName>
    <Desc>public MongoCursor MongoCursor::tailable ([ bool $tail = TRUE ] )
Mongo has a feature known as tailable cursors which are similar to the Unix "tail -f" command. 
Tailable means cursor is not closed when the last data is retrieved. Rather, the cursor marks the final object's position. you can resume using the cursor later, from where it was located, if more data were received. 
Like any "latent cursor", the cursor may become invalid at some point -- for example if that final object it references were deleted. Thus, you should be prepared to requery if the cursor is MongoCursor::dead().
</Desc>
    <FName>MongoCursor::timeout</FName>
    <Desc>public MongoCursor MongoCursor::timeout ( int $ms )
A timeout can be set at any time and will affect subsequent queries on the cursor, including fetching more results from the database.
</Desc>
    <FName>MongoCursor::valid</FName>
    <Desc>public bool MongoCursor::valid ( void )
</Desc>
    <FName>MongoCursorException::getHost</FName>
    <Desc>public string MongoCursorException::getHost ( void )
Returns the hostname of the server the query was sent too.
</Desc>
    <FName>MongoCursorInterface::batchSize</FName>
    <Desc>abstract public MongoCursorInterface MongoCursorInterface::batchSize ( int $batchSize )
A cursor typically fetches a batch of result objects and stores them locally. This method sets the batch size value to configure the amount of documents retrieved from the server in one round trip.
</Desc>
    <FName>MongoCursorInterface::dead</FName>
    <Desc>abstract public bool MongoCursorInterface::dead ( void )
This method checks whether the cursor has been exhausted and the database has no more results to send to the client. A cursor being "dead" does not necessarily mean that there are no more results available for iteration.
</Desc>
    <FName>MongoCursorInterface::getReadPreference</FName>
    <Desc>abstract public array MongoCursorInterface::getReadPreference ( void )
</Desc>
    <FName>MongoCursorInterface::info</FName>
    <Desc>abstract public array MongoCursorInterface::info ( void )
Returns information about the cursor's creation and iteration. This can be called before or after the cursor has started iterating.
</Desc>
    <FName>MongoCursorInterface::setReadPreference</FName>
    <Desc>abstract public MongoCursorInterface MongoCursorInterface::setReadPreference ( string $read_preference [, array $tags ] )
</Desc>
    <FName>MongoCursorInterface::timeout</FName>
    <Desc>abstract public MongoCursorInterface MongoCursorInterface::timeout ( int $ms )
A timeout can be set at any time and will affect subsequent data retrieval associated with this cursor, including fetching more results from the database.
</Desc>
    <FName>MongoDate::__construct</FName>
    <Desc>public MongoDate::__construct ([ int $sec = time() [, int $usec = 0 ]] )
Creates a new date. If no parameters are given, the current time is used.
</Desc>
    <FName>MongoDate::toDateTime</FName>
    <Desc>public DateTime MongoDate::toDateTime ( void )
Returns a DateTime object representation of this date.
</Desc>
    <FName>MongoDate::__toString</FName>
    <Desc>public string MongoDate::__toString ( void )
Returns a string representation of this date, similar to the representation returned by microtime().
</Desc>
    <FName>MongoDB\BSON\Binary::__construct</FName>
    <Desc>final public MongoDB\BSON\Binary::__construct ( string $data , int $type )
</Desc>
    <FName>MongoDB\BSON\Binary::getData</FName>
    <Desc>final public string MongoDB\BSON\Binary::getData ( void )
</Desc>
    <FName>MongoDB\BSON\Binary::getType</FName>
    <Desc>final public int MongoDB\BSON\Binary::getType ( void )
</Desc>
    <FName>MongoDB\BSON\Binary::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\Binary::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\Binary::serialize</FName>
    <Desc>final public string MongoDB\BSON\Binary::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\Binary::__toString</FName>
    <Desc>final public string MongoDB\BSON\Binary::__toString ( void )
This method is an alias of: MongoDB\BSON\Binary::getData().
</Desc>
    <FName>MongoDB\BSON\Binary::unserialize</FName>
    <Desc>final public void MongoDB\BSON\Binary::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\BinaryInterface::getData</FName>
    <Desc>abstract public string MongoDB\BSON\BinaryInterface::getData ( void )
</Desc>
    <FName>MongoDB\BSON\BinaryInterface::getType</FName>
    <Desc>abstract public int MongoDB\BSON\BinaryInterface::getType ( void )
</Desc>
    <FName>MongoDB\BSON\BinaryInterface::__toString</FName>
    <Desc>abstract public string MongoDB\BSON\BinaryInterface::__toString ( void )
This method is an alias of: MongoDB\BSON\BinaryInterface::getData().
</Desc>
    <FName>MongoDB\BSON\DBPointer::__construct</FName>
    <Desc>final private MongoDB\BSON\DBPointer::__construct ( void )
MongoDB\BSON\DBPointer objects are created through conversion from a deprecated BSON type and cannot be constructed directly.
</Desc>
    <FName>MongoDB\BSON\DBPointer::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\DBPointer::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\DBPointer::serialize</FName>
    <Desc>final public string MongoDB\BSON\DBPointer::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\DBPointer::__toString</FName>
    <Desc>final public string MongoDB\BSON\DBPointer::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\DBPointer::unserialize</FName>
    <Desc>final public void MongoDB\BSON\DBPointer::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\Decimal128::__construct</FName>
    <Desc>final public MongoDB\BSON\Decimal128::__construct ([ string $value ] )
Note: MongoDB\BSON\Decimal128 is only compatible with MongoDB 3.4+. Attempting to use the BSON type with an earlier version of MongoDB will result in an error.
</Desc>
    <FName>MongoDB\BSON\Decimal128::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\Decimal128::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\Decimal128::serialize</FName>
    <Desc>final public string MongoDB\BSON\Decimal128::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\Decimal128::__toString</FName>
    <Desc>final public string MongoDB\BSON\Decimal128::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\Decimal128::unserialize</FName>
    <Desc>final public void MongoDB\BSON\Decimal128::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\Decimal128Interface::__toString</FName>
    <Desc>abstract public string MongoDB\BSON\Decimal128Interface::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\Int64::__construct</FName>
    <Desc>final private MongoDB\BSON\Int64::__construct ( void )
MongoDB\BSON\Int64 objects are created through conversion from a 64-bit integer BSON type on a 32-bit platform and cannot be constructed directly.
</Desc>
    <FName>MongoDB\BSON\Int64::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\Int64::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\Int64::serialize</FName>
    <Desc>final public string MongoDB\BSON\Int64::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\Int64::__toString</FName>
    <Desc>final public string MongoDB\BSON\Int64::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\Int64::unserialize</FName>
    <Desc>final public void MongoDB\BSON\Int64::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\Javascript::__construct</FName>
    <Desc>final public MongoDB\BSON\Javascript::__construct ( string $code [, array|object $scope ] )
</Desc>
    <FName>MongoDB\BSON\Javascript::getCode</FName>
    <Desc>final public string MongoDB\BSON\Javascript::getCode ( void )
</Desc>
    <FName>MongoDB\BSON\Javascript::getScope</FName>
    <Desc>final public object|null MongoDB\BSON\Javascript::getScope ( void )
</Desc>
    <FName>MongoDB\BSON\Javascript::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\Javascript::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\Javascript::serialize</FName>
    <Desc>final public string MongoDB\BSON\Javascript::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\Javascript::__toString</FName>
    <Desc>final public string MongoDB\BSON\Javascript::__toString ( void )
This method is an alias of: MongoDB\BSON\Javascript::getCode().
</Desc>
    <FName>MongoDB\BSON\Javascript::unserialize</FName>
    <Desc>final public void MongoDB\BSON\Javascript::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\JavascriptInterface::getCode</FName>
    <Desc>abstract public string MongoDB\BSON\JavascriptInterface::getCode ( void )
</Desc>
    <FName>MongoDB\BSON\JavascriptInterface::getScope</FName>
    <Desc>abstract public object|null MongoDB\BSON\JavascriptInterface::getScope ( void )
</Desc>
    <FName>MongoDB\BSON\JavascriptInterface::__toString</FName>
    <Desc>abstract public string MongoDB\BSON\JavascriptInterface::__toString ( void )
This method is an alias of: MongoDB\BSON\JavascriptInterface::getCode().
</Desc>
    <FName>MongoDB\BSON\MaxKey::__construct</FName>
    <Desc>final public MongoDB\BSON\MaxKey::__construct ( void )
</Desc>
    <FName>MongoDB\BSON\MaxKey::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\MaxKey::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\MaxKey::serialize</FName>
    <Desc>final public string MongoDB\BSON\MaxKey::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\MaxKey::unserialize</FName>
    <Desc>final public void MongoDB\BSON\MaxKey::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\MinKey::__construct</FName>
    <Desc>final public MongoDB\BSON\MinKey::__construct ( void )
</Desc>
    <FName>MongoDB\BSON\MinKey::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\MinKey::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\MinKey::serialize</FName>
    <Desc>final public string MongoDB\BSON\MinKey::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\MinKey::unserialize</FName>
    <Desc>final public void MongoDB\BSON\MinKey::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\ObjectId::__construct</FName>
    <Desc>final public MongoDB\BSON\ObjectId::__construct ([ string $id ] )
</Desc>
    <FName>MongoDB\BSON\ObjectId::getTimestamp</FName>
    <Desc>final public int MongoDB\BSON\ObjectId::getTimestamp ( void )
The timestamp component of an ObjectId is its most significant 32 bits, which denotes the number of seconds since the Unix epoch. This value is read as an unsigned 32-bit integer with big-endian byte order. 
Note: Because PHP's integer type is signed, some values returned by this method may appear as negative integers on 32-bit platforms. The "%u" formatter of sprintf() may be used to obtain a string representation of the unsigned decimal value.
</Desc>
    <FName>MongoDB\BSON\ObjectId::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\ObjectId::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\ObjectId::serialize</FName>
    <Desc>final public string MongoDB\BSON\ObjectId::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\ObjectId::__toString</FName>
    <Desc>final public string MongoDB\BSON\ObjectId::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\ObjectId::unserialize</FName>
    <Desc>final public void MongoDB\BSON\ObjectId::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\ObjectIdInterface::getTimestamp</FName>
    <Desc>abstract public int MongoDB\BSON\ObjectIdInterface::getTimestamp ( void )
</Desc>
    <FName>MongoDB\BSON\ObjectIdInterface::__toString</FName>
    <Desc>abstract public string MongoDB\BSON\ObjectIdInterface::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\Regex::__construct</FName>
    <Desc>final public MongoDB\BSON\Regex::__construct ( string $pattern [, string $flags = "" ] )
</Desc>
    <FName>MongoDB\BSON\Regex::getFlags</FName>
    <Desc>final public string MongoDB\BSON\Regex::getFlags ( void )
</Desc>
    <FName>MongoDB\BSON\Regex::getPattern</FName>
    <Desc>final public string MongoDB\BSON\Regex::getPattern ( void )
</Desc>
    <FName>MongoDB\BSON\Regex::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\Regex::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\Regex::serialize</FName>
    <Desc>final public string MongoDB\BSON\Regex::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\Regex::__toString</FName>
    <Desc>final public string MongoDB\BSON\Regex::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\Regex::unserialize</FName>
    <Desc>final public void MongoDB\BSON\Regex::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\RegexInterface::getFlags</FName>
    <Desc>abstract public string MongoDB\BSON\RegexInterface::getFlags ( void )
</Desc>
    <FName>MongoDB\BSON\RegexInterface::getPattern</FName>
    <Desc>abstract public string MongoDB\BSON\RegexInterface::getPattern ( void )
</Desc>
    <FName>MongoDB\BSON\RegexInterface::__toString</FName>
    <Desc>abstract public string MongoDB\BSON\RegexInterface::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\Serializable::bsonSerialize</FName>
    <Desc>abstract public array|object MongoDB\BSON\Serializable::bsonSerialize ( void )
Called during serialization of the object to BSON. The method must return an array or stdClass. 
Root documents (e.g. a MongoDB\BSON\Serializable passed to MongoDB\BSON\fromPHP()) will always be serialized as a BSON document. For field values, associative arrays and stdClass instances will be serialized as a BSON document and sequential arrays (i.e. sequential, numeric indexes starting at 0) will be serialized as a BSON array. 
Users are encouraged to include an _id property (e.g. a MongoDB\BSON\ObjectId initialized in your constructor) when returning data for a BSON root document; otherwise, the driver or database will need to generate a MongoDB\BSON\ObjectId when inserting or upserting the document, respectively.
</Desc>
    <FName>MongoDB\BSON\Symbol::__construct</FName>
    <Desc>final private MongoDB\BSON\Symbol::__construct ( void )
MongoDB\BSON\Symbol objects are created through conversion from a deprecated BSON type and cannot be constructed directly.
</Desc>
    <FName>MongoDB\BSON\Symbol::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\Symbol::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\Symbol::serialize</FName>
    <Desc>final public string MongoDB\BSON\Symbol::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\Symbol::__toString</FName>
    <Desc>final public string MongoDB\BSON\Symbol::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\Symbol::unserialize</FName>
    <Desc>final public void MongoDB\BSON\Symbol::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\Timestamp::__construct</FName>
    <Desc>final public MongoDB\BSON\Timestamp::__construct ( int $increment , int $timestamp )
</Desc>
    <FName>MongoDB\BSON\Timestamp::getIncrement</FName>
    <Desc>final public int MongoDB\BSON\Timestamp::getIncrement ( void )
The increment component of a Timestamp is its least significant 32 bits, whichs denotes the incrementing ordinal for operations within a given second. This value is read as an unsigned 32-bit integer with big-endian byte order. 
Note: Because PHP's integer type is signed, some values returned by this method may appear as negative integers on 32-bit platforms. The "%u" formatter of sprintf() may be used to obtain a string representation of the unsigned decimal value.
</Desc>
    <FName>MongoDB\BSON\Timestamp::getTimestamp</FName>
    <Desc>final public int MongoDB\BSON\Timestamp::getTimestamp ( void )
The timestamp component of a Timestamp is its most significant 32 bits, which denotes the number of seconds since the Unix epoch. This value is read as an unsigned 32-bit integer with big-endian byte order. 
Note: Because PHP's integer type is signed, some values returned by this method may appear as negative integers on 32-bit platforms. The "%u" formatter of sprintf() may be used to obtain a string representation of the unsigned decimal value.
</Desc>
    <FName>MongoDB\BSON\Timestamp::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\Timestamp::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\Timestamp::serialize</FName>
    <Desc>final public string MongoDB\BSON\Timestamp::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\Timestamp::__toString</FName>
    <Desc>final public string MongoDB\BSON\Timestamp::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\Timestamp::unserialize</FName>
    <Desc>final public void MongoDB\BSON\Timestamp::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\TimestampInterface::getIncrement</FName>
    <Desc>abstract public int MongoDB\BSON\TimestampInterface::getIncrement ( void )
</Desc>
    <FName>MongoDB\BSON\TimestampInterface::getTimestamp</FName>
    <Desc>abstract public int MongoDB\BSON\TimestampInterface::getTimestamp ( void )
</Desc>
    <FName>MongoDB\BSON\TimestampInterface::__toString</FName>
    <Desc>abstract public string MongoDB\BSON\TimestampInterface::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\Undefined::__construct</FName>
    <Desc>final private MongoDB\BSON\Undefined::__construct ( void )
MongoDB\BSON\Undefined objects are created through conversion from a deprecated BSON type and cannot be constructed directly.
</Desc>
    <FName>MongoDB\BSON\Undefined::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\Undefined::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\Undefined::serialize</FName>
    <Desc>final public string MongoDB\BSON\Undefined::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\Undefined::__toString</FName>
    <Desc>final public string MongoDB\BSON\Undefined::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\Undefined::unserialize</FName>
    <Desc>final public void MongoDB\BSON\Undefined::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\Unserializable::bsonUnserialize</FName>
    <Desc>abstract public void MongoDB\BSON\Unserializable::bsonUnserialize ( array $data )
Called during unserialization of the object from BSON. The properties of the BSON array or document will be passed to the method as an array. 
Remember to check for an _id property when handling data from a BSON document. 
Note: This method acts as the constructor of the object. The __construct() method will not be called after this method.
</Desc>
    <FName>MongoDB\BSON\UTCDateTime::__construct</FName>
    <Desc>final public MongoDB\BSON\UTCDateTime::__construct ([ integer|float|string|DateTimeInterface $milliseconds = NULL ] )
</Desc>
    <FName>MongoDB\BSON\UTCDateTime::jsonSerialize</FName>
    <Desc>final public mixed MongoDB\BSON\UTCDateTime::jsonSerialize ( void )
</Desc>
    <FName>MongoDB\BSON\UTCDateTime::serialize</FName>
    <Desc>final public string MongoDB\BSON\UTCDateTime::serialize ( void )
</Desc>
    <FName>MongoDB\BSON\UTCDateTime::toDateTime</FName>
    <Desc>final public DateTime MongoDB\BSON\UTCDateTime::toDateTime ( void )
</Desc>
    <FName>MongoDB\BSON\UTCDateTime::__toString</FName>
    <Desc>final public string MongoDB\BSON\UTCDateTime::__toString ( void )
</Desc>
    <FName>MongoDB\BSON\UTCDateTime::unserialize</FName>
    <Desc>final public void MongoDB\BSON\UTCDateTime::unserialize ( string $serialized )
</Desc>
    <FName>MongoDB\BSON\UTCDateTimeInterface::toDateTime</FName>
    <Desc>abstract public DateTime MongoDB\BSON\UTCDateTimeInterface::toDateTime ( void )
</Desc>
    <FName>MongoDB\BSON\UTCDateTimeInterface::__toString</FName>
    <Desc>abstract public string MongoDB\BSON\UTCDateTimeInterface::__toString ( void )
</Desc>
    <FName>MongoDB\Driver\BulkWrite::__construct</FName>
    <Desc>public MongoDB\Driver\BulkWrite::__construct ([ array $options ] )
Constructs a new MongoDB\Driver\BulkWrite, which is a mutable object to which one or more write operations may be added. The write(s) may then be executed with MongoDB\Driver\Manager::executeBulkWrite().
</Desc>
    <FName>MongoDB\Driver\BulkWrite::count</FName>
    <Desc>public int MongoDB\Driver\BulkWrite::count ( void )
Returns the number of write operations added to the MongoDB\Driver\BulkWrite object.
</Desc>
    <FName>MongoDB\Driver\BulkWrite::delete</FName>
    <Desc>public void MongoDB\Driver\BulkWrite::delete ( array|object $filter [, array $deleteOptions ] )
Adds a delete operation to the MongoDB\Driver\BulkWrite.
</Desc>
    <FName>MongoDB\Driver\BulkWrite::insert</FName>
    <Desc>public mixed MongoDB\Driver\BulkWrite::insert ( array|object $document )
Adds an insert operation to the MongoDB\Driver\BulkWrite.
</Desc>
    <FName>MongoDB\Driver\BulkWrite::update</FName>
    <Desc>public void MongoDB\Driver\BulkWrite::update ( array|object $filter , array|object $newObj [, array $updateOptions ] )
Adds an update operation to the MongoDB\Driver\BulkWrite.
</Desc>
    <FName>MongoDB\Driver\Command::__construct</FName>
    <Desc>final public MongoDB\Driver\Command::__construct ( array|object $document [, array $commandOptions ] )
Constructs a new MongoDB\Driver\Command, which is an immutable value object that represents a database command. The command may then be executed with MongoDB\Driver\Manager::executeCommand(). 
The complete command document, which includes the command name and its options, should be expressed in the document parameter. The commandOptions parameter is only used to specify options related to the execution of the command and the resulting MongoDB\Driver\Cursor.
</Desc>
    <FName>MongoDB\Driver\Exception\CommandException::getResultDocument</FName>
    <Desc>final public object MongoDB\Driver\Exception\CommandException::getResultDocument ( void )
Returns the result document for the failed command.
</Desc>
    <FName>MongoDB\Driver\Cursor::__construct</FName>
    <Desc>final private MongoDB\Driver\Cursor::__construct ( void )
MongoDB\Driver\Cursor objects are returned as the result of an executed command or query and cannot be constructed directly.
</Desc>
    <FName>MongoDB\Driver\Cursor::getId</FName>
    <Desc>final public MongoDB\Driver\CursorId MongoDB\Driver\Cursor::getId ( void )
Returns the MongoDB\Driver\CursorId associated with this cursor. A cursor ID uniquely identifies the cursor on the server.
</Desc>
    <FName>MongoDB\Driver\Cursor::getServer</FName>
    <Desc>final public MongoDB\Driver\Server MongoDB\Driver\Cursor::getServer ( void )
Returns the MongoDB\Driver\Server associated with this cursor. This is the server that executed the MongoDB\Driver\Query or MongoDB\Driver\Command.
</Desc>
    <FName>MongoDB\Driver\Cursor::isDead</FName>
    <Desc>final public bool MongoDB\Driver\Cursor::isDead ( void )
Checks whether the cursor may have additional results available to read. A cursor is initially "alive" but may become "dead" for any of the following reasons: 
Advancing a non-tailable cursor did not return a document 
The cursor encountered an error 
The cursor read its last batch to completion 
The cursor reached its configured limit 
This is primarily useful with tailable cursors.
</Desc>
    <FName>MongoDB\Driver\Cursor::setTypeMap</FName>
    <Desc>final public void MongoDB\Driver\Cursor::setTypeMap ( array $typemap )
Sets the type map configuration to use when unserializing the BSON results into PHP values.
</Desc>
    <FName>MongoDB\Driver\Cursor::toArray</FName>
    <Desc>final public array MongoDB\Driver\Cursor::toArray ( void )
Iterates the cursor and returns its results in an array. MongoDB\Driver\Cursor::setTypeMap() may be used to control how documents are unserialized into PHP values.
</Desc>
    <FName>MongoDB\Driver\CursorId::__construct</FName>
    <Desc>final private MongoDB\Driver\CursorId::__construct ( void )
MongoDB\Driver\CursorId objects are returned from MongoDB\Driver\Cursor::getId() and cannot be constructed directly.
</Desc>
    <FName>MongoDB\Driver\CursorId::__toString</FName>
    <Desc>final public string MongoDB\Driver\CursorId::__toString ( void )
Returns the string representation of the cursor ID.
</Desc>
    <FName>MongoDB\Driver\Manager::__construct</FName>
    <Desc>final public MongoDB\Driver\Manager::__construct ([ string $uri = "mongodb://127.0.0.1/" [, array $uriOptions = array() [, array $driverOptions = array() ]]] )
Constructs a new MongoDB\Driver\Manager object with the specified options. 
Note: Per the » Server Discovery and Monitoring Specification, this constructor performs no I/O. Connections will be initialized on demand, when the first operation is executed. 
Note: On Unix platforms, the MongoDB driver is sensitive to scripts that use the fork() system call without also calling exec(). Users are advised not to re-use MongoDB\Driver\Manager instances in a forked child process.
</Desc>
    <FName>MongoDB\Driver\Manager::executeBulkWrite</FName>
    <Desc>final public MongoDB\Driver\WriteResult MongoDB\Driver\Manager::executeBulkWrite ( string $namespace , MongoDB\Driver\BulkWrite $bulk [, array $options = array() ] )
Executes one or more write operations on the primary server. 
A MongoDB\Driver\BulkWrite can be constructed with one or more write operations of varying types (e.g. updates, deletes, and inserts). The driver will attempt to send operations of the same type to the server in as few requests as possible to optimize round trips.
</Desc>
    <FName>MongoDB\Driver\Manager::executeCommand</FName>
    <Desc>final public MongoDB\Driver\Cursor MongoDB\Driver\Manager::executeCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] )
Selects a server according to the "readPreference" option and executes the command on that server. By default, the read preference from the MongoDB Connection URI will be used. 
This method applies no special logic to the command. Although this method accepts "readConcern" and "writeConcern" options, which will be incorporated into the command document, those options will not default to corresponding values from the MongoDB Connection URI nor will the MongoDB server version be taken into account. Users are therefore encouraged to use specific read and/or write command methods if possible.
</Desc>
    <FName>MongoDB\Driver\Manager::executeQuery</FName>
    <Desc>final public MongoDB\Driver\Cursor MongoDB\Driver\Manager::executeQuery ( string $namespace , MongoDB\Driver\Query $query [, array $options = array() ] )
Selects a server according to the "readPreference" option and executes the query on that server. By default, the read preference from the MongoDB Connection URI will be used.
</Desc>
    <FName>MongoDB\Driver\Manager::executeReadCommand</FName>
    <Desc>final public MongoDB\Driver\Cursor MongoDB\Driver\Manager::executeReadCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] )
Selects a server according to the "readPreference" option and executes the command on that server. By default, the read preference from the MongoDB Connection URI will be used. 
This method will apply logic that is specific to commands that read (e.g. » count) and take the MongoDB server version into account. The "readConcern" option will default to the corresponding value from the MongoDB Connection URI.
</Desc>
    <FName>MongoDB\Driver\Manager::executeReadWriteCommand</FName>
    <Desc>final public MongoDB\Driver\Cursor MongoDB\Driver\Manager::executeReadWriteCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] )
Executes the command on the primary server. 
This method will apply logic that is specific to commands that read and write (e.g. » findAndModify) and take the MongoDB server version into account. The "readConcern" and "writeConcern" options will default to the corresponding values from the MongoDB Connection URI.
</Desc>
    <FName>MongoDB\Driver\Manager::executeWriteCommand</FName>
    <Desc>final public MongoDB\Driver\Cursor MongoDB\Driver\Manager::executeWriteCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] )
Executes the command on the primary server. 
This method will apply logic that is specific to commands that write (e.g. » drop) and take the MongoDB server version into account. The "writeConcern" option will default to the corresponding value from the MongoDB Connection URI.
</Desc>
    <FName>MongoDB\Driver\Manager::getReadConcern</FName>
    <Desc>final public MongoDB\Driver\ReadConcern MongoDB\Driver\Manager::getReadConcern ( void )
Returns the MongoDB\Driver\ReadConcern for the Manager, which is derived from its URI options. This is the default read concern for queries and commands executed on the Manager.
</Desc>
    <FName>MongoDB\Driver\Manager::getReadPreference</FName>
    <Desc>final public MongoDB\Driver\ReadPreference MongoDB\Driver\Manager::getReadPreference ( void )
Returns the MongoDB\Driver\ReadPreference for the Manager, which is derived from its URI options. This is the default read preference for queries and commands executed on the Manager.
</Desc>
    <FName>MongoDB\Driver\Manager::getServers</FName>
    <Desc>final public array MongoDB\Driver\Manager::getServers ( void )
Returns an array of MongoDB\Driver\Server instances to which this manager is connected. 
Note: Since the driver connects to the database lazily, this method may return an empty array if called before executing an operation on the MongoDB\Driver\Manager.
</Desc>
    <FName>MongoDB\Driver\Manager::getWriteConcern</FName>
    <Desc>final public MongoDB\Driver\WriteConcern MongoDB\Driver\Manager::getWriteConcern ( void )
Returns the MongoDB\Driver\WriteConcern for the Manager, which is derived from its URI options. This is the default write concern for writes and commands executed on the Manager.
</Desc>
    <FName>MongoDB\Driver\Manager::selectServer</FName>
    <Desc>final public MongoDB\Driver\Server MongoDB\Driver\Manager::selectServer ( MongoDB\Driver\ReadPreference $readPreference )
Selects a MongoDB\Driver\Server matching readPreference. This may be used to preselect a server in order to perform version checking before executing an operation. 
Note: Unlike MongoDB\Driver\Manager::getServers(), this method will initialize database connections and perform server discovery if necessary. See the » Server Selection Specification for additional information.
</Desc>
    <FName>MongoDB\Driver\Manager::startSession</FName>
    <Desc>final public MongoDB\Driver\Session MongoDB\Driver\Manager::startSession ([ array $options ] )
Creates a MongoDB\Driver\Session for the given options. The session may then be specified when executing commands, queries, and write operations. 
Note: A MongoDB\Driver\Session can only be used with the MongoDB\Driver\Manager from which it was created.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandFailedEvent::getCommandName</FName>
    <Desc>final public string MongoDB\Driver\Monitoring\CommandFailedEvent::getCommandName ( void )
Returns the command name (e.g. "find", "aggregate").
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandFailedEvent::getDurationMicros</FName>
    <Desc>final public int MongoDB\Driver\Monitoring\CommandFailedEvent::getDurationMicros ( void )
The command's duration is a calculated value that includes the time to send the message and receive the reply from the server.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandFailedEvent::getError</FName>
    <Desc>final public Exception MongoDB\Driver\Monitoring\CommandFailedEvent::getError ( void )
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandFailedEvent::getOperationId</FName>
    <Desc>final public string MongoDB\Driver\Monitoring\CommandFailedEvent::getOperationId ( void )
The operation ID is generated by the driver and may be used to link events together such as bulk write operations, which may have been split across several commands at the protocol level. 
Note: Since multiple commands may share the same operation ID, it is not reliable to use this value to associate event objects with each other. The request ID returned by MongoDB\Driver\Monitoring\CommandFailedEvent::getRequestId() should be used instead.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandFailedEvent::getReply</FName>
    <Desc>final public object MongoDB\Driver\Monitoring\CommandFailedEvent::getReply ( void )
The reply document will be converted from BSON to PHP using the default deserialization rules (e.g. BSON documents will be converted to stdClass).
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandFailedEvent::getRequestId</FName>
    <Desc>final public string MongoDB\Driver\Monitoring\CommandFailedEvent::getRequestId ( void )
The request ID is generated by the driver and may be used to associate this MongoDB\Driver\Monitoring\CommandFailedEvent with a previous MongoDB\Driver\Monitoring\CommandStartedEvent.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandFailedEvent::getServer</FName>
    <Desc>final public MongoDB\Driver\Server MongoDB\Driver\Monitoring\CommandFailedEvent::getServer ( void )
Returns the MongoDB\Driver\Server on which the command was executed.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandStartedEvent::getCommand</FName>
    <Desc>final public object MongoDB\Driver\Monitoring\CommandStartedEvent::getCommand ( void )
The reply document will be converted from BSON to PHP using the default deserialization rules (e.g. BSON documents will be converted to stdClass).
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandStartedEvent::getCommandName</FName>
    <Desc>final public string MongoDB\Driver\Monitoring\CommandStartedEvent::getCommandName ( void )
Returns the command name (e.g. "find", "aggregate").
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandStartedEvent::getDatabaseName</FName>
    <Desc>final public string MongoDB\Driver\Monitoring\CommandStartedEvent::getDatabaseName ( void )
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandStartedEvent::getOperationId</FName>
    <Desc>final public string MongoDB\Driver\Monitoring\CommandStartedEvent::getOperationId ( void )
The operation ID is generated by the driver and may be used to link events together such as bulk write operations, which may have been split across several commands at the protocol level. 
Note: Since multiple commands may share the same operation ID, it is not reliable to use this value to associate event objects with each other. The request ID returned by MongoDB\Driver\Monitoring\CommandStartedEvent::getRequestId() should be used instead.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandStartedEvent::getRequestId</FName>
    <Desc>final public string MongoDB\Driver\Monitoring\CommandStartedEvent::getRequestId ( void )
The request ID is generated by the driver and may be used to associate this MongoDB\Driver\Monitoring\CommandStartedEvent with a later MongoDB\Driver\Monitoring\CommandFailedEvent or MongoDB\Driver\Monitoring\CommandSucceededEvent.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandStartedEvent::getServer</FName>
    <Desc>final public MongoDB\Driver\Server MongoDB\Driver\Monitoring\CommandStartedEvent::getServer ( void )
Returns the MongoDB\Driver\Server on which the command was executed.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandSubscriber::commandFailed</FName>
    <Desc>abstract public void MongoDB\Driver\Monitoring\CommandSubscriber::commandFailed ( MongoDB\Driver\Monitoring\CommandFailedEvent $event )
If the subscriber has been registered with MongoDB\Driver\Monitoring\addSubscriber(), the driver will call this method when a command has failed.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandSubscriber::commandStarted</FName>
    <Desc>abstract public void MongoDB\Driver\Monitoring\CommandSubscriber::commandStarted ( MongoDB\Driver\Monitoring\CommandStartedEvent $event )
If the subscriber has been registered with MongoDB\Driver\Monitoring\addSubscriber(), the driver will call this method when a command has started.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandSubscriber::commandSucceeded</FName>
    <Desc>abstract public void MongoDB\Driver\Monitoring\CommandSubscriber::commandSucceeded ( MongoDB\Driver\Monitoring\CommandSucceededEvent $event )
If the subscriber has been registered with MongoDB\Driver\Monitoring\addSubscriber(), the driver will call this method when a command has succeeded.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandSucceededEvent::getCommandName</FName>
    <Desc>final public string MongoDB\Driver\Monitoring\CommandSucceededEvent::getCommandName ( void )
Returns the command name (e.g. "find", "aggregate").
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandSucceededEvent::getDurationMicros</FName>
    <Desc>final public int MongoDB\Driver\Monitoring\CommandSucceededEvent::getDurationMicros ( void )
The command's duration is a calculated value that includes the time to send the message and receive the reply from the server.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandSucceededEvent::getOperationId</FName>
    <Desc>final public string MongoDB\Driver\Monitoring\CommandSucceededEvent::getOperationId ( void )
The operation ID is generated by the driver and may be used to link events together such as bulk write operations, which may have been split across several commands at the protocol level. 
Note: Since multiple commands may share the same operation ID, it is not reliable to use this value to associate event objects with each other. The request ID returned by MongoDB\Driver\Monitoring\CommandSucceededEvent::getRequestId() should be used instead.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandSucceededEvent::getReply</FName>
    <Desc>final public object MongoDB\Driver\Monitoring\CommandSucceededEvent::getReply ( void )
The reply document will be converted from BSON to PHP using the default deserialization rules (e.g. BSON documents will be converted to stdClass).
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandSucceededEvent::getRequestId</FName>
    <Desc>final public string MongoDB\Driver\Monitoring\CommandSucceededEvent::getRequestId ( void )
The request ID is generated by the driver and may be used to associate this MongoDB\Driver\Monitoring\CommandSucceededEvent with a previous MongoDB\Driver\Monitoring\CommandStartedEvent.
</Desc>
    <FName>MongoDB\Driver\Monitoring\CommandSucceededEvent::getServer</FName>
    <Desc>final public MongoDB\Driver\Server MongoDB\Driver\Monitoring\CommandSucceededEvent::getServer ( void )
Returns the MongoDB\Driver\Server on which the command was executed.
</Desc>
    <FName>MongoDB\Driver\Query::__construct</FName>
    <Desc>final public MongoDB\Driver\Query::__construct ( array|object $filter [, array $queryOptions ] )
Constructs a new MongoDB\Driver\Query, which is an immutable value object that represents a database query. The query may then be executed with MongoDB\Driver\Manager::executeQuery().
</Desc>
    <FName>MongoDB\Driver\ReadConcern::bsonSerialize</FName>
    <Desc>final public object MongoDB\Driver\ReadConcern::bsonSerialize ( void )
</Desc>
    <FName>MongoDB\Driver\ReadConcern::__construct</FName>
    <Desc>final public MongoDB\Driver\ReadConcern::__construct ([ string $level ] )
Constructs a new MongoDB\Driver\ReadConcern, which is an immutable value object.
</Desc>
    <FName>MongoDB\Driver\ReadConcern::getLevel</FName>
    <Desc>final public string|null MongoDB\Driver\ReadConcern::getLevel ( void )
</Desc>
    <FName>MongoDB\Driver\ReadConcern::isDefault</FName>
    <Desc>final public bool MongoDB\Driver\ReadConcern::isDefault ( void )
Returns whether this is the default read concern (i.e. no options are specified). This method is primarily intended to be used in conjunction with MongoDB\Driver\Manager::getReadConcern() to determine whether the Manager has been constructed without any read concern options. 
The driver will not include a default read concern in its read operations (e.g. MongoDB\Driver\Manager::executeQuery()) in order order to allow the server to apply its own default. Libraries that access the Manager's read concern to include it in their own read commands should use this method to ensure that default read concerns are left unset.
</Desc>
    <FName>MongoDB\Driver\ReadPreference::bsonSerialize</FName>
    <Desc>final public object MongoDB\Driver\ReadPreference::bsonSerialize ( void )
</Desc>
    <FName>MongoDB\Driver\ReadPreference::__construct</FName>
    <Desc>final public MongoDB\Driver\ReadPreference::__construct ( string|integer $mode [, array $tagSets = NULL [, array $options = array() ]] )
Constructs a new MongoDB\Driver\ReadPreference, which is an immutable value object.
</Desc>
    <FName>MongoDB\Driver\ReadPreference::getMaxStalenessSeconds</FName>
    <Desc>final public int MongoDB\Driver\ReadPreference::getMaxStalenessSeconds ( void )
</Desc>
    <FName>MongoDB\Driver\ReadPreference::getMode</FName>
    <Desc>final public int MongoDB\Driver\ReadPreference::getMode ( void )
</Desc>
    <FName>MongoDB\Driver\ReadPreference::getTagSets</FName>
    <Desc>final public array MongoDB\Driver\ReadPreference::getTagSets ( void )
</Desc>
    <FName>MongoDB\Driver\Exception\RuntimeException::hasErrorLabel</FName>
    <Desc>final public bool MongoDB\Driver\Exception\RuntimeException::hasErrorLabel ( string $errorLabel )
Returns whether the errorLabel has been set for this exception. Error labels are set by either the server or the driver to indicated specific situations on which you might want to decide on how you want to handle a specific exception. A common situation might be to find out whether you can safely retry a transaction that failed due to a transient error (like a networking issue, or a transaction conflict).
</Desc>
    <FName>MongoDB\Driver\Server::__construct</FName>
    <Desc>final private MongoDB\Driver\Server::__construct ( void )
MongoDB\Driver\Server objects are created internally by MongoDB\Driver\Manager when a database connection is established and may be returned by MongoDB\Driver\Manager::getServers() and MongoDB\Driver\Manager::selectServer().
</Desc>
    <FName>MongoDB\Driver\Server::executeBulkWrite</FName>
    <Desc>final public MongoDB\Driver\WriteResult MongoDB\Driver\Server::executeBulkWrite ( string $namespace , MongoDB\Driver\BulkWrite $bulk [, array $options = array() ] )
Executes one or more write operations on this server. 
A MongoDB\Driver\BulkWrite can be constructed with one or more write operations of varying types (e.g. updates, deletes, and inserts). The driver will attempt to send operations of the same type to the server in as few requests as possible to optimize round trips.
</Desc>
    <FName>MongoDB\Driver\Server::executeCommand</FName>
    <Desc>final public MongoDB\Driver\Cursor MongoDB\Driver\Server::executeCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] )
Executes the command on this server. 
This method applies no special logic to the command. Although this method accepts "readConcern" and "writeConcern" options, which will be incorporated into the command document, those options will not default to corresponding values from the MongoDB Connection URI nor will the MongoDB server version be taken into account. Users are therefore encouraged to use specific read and/or write command methods if possible. 
Note: The "readPreference" option does not control the server to which the driver issues the operation; it will always be executed on this server object. Instead, it may be used when issuing the operation to a secondary (from a replica set connection, not standalone) or mongos node to ensure that the driver sets the wire protocol accordingly or adds the read preference to the operation, respectively.
</Desc>
    <FName>MongoDB\Driver\Server::executeQuery</FName>
    <Desc>final public MongoDB\Driver\Cursor MongoDB\Driver\Server::executeQuery ( string $namespace , MongoDB\Driver\Query $query [, array $options = array() ] )
Executes the query on this server. 
Note: The "readPreference" option does not control the server to which the driver issues the operation; it will always be executed on this server object. Instead, it may be used when issuing the operation to a secondary (from a replica set connection, not standalone) or mongos node to ensure that the driver sets the wire protocol accordingly or adds the read preference to the operation, respectively.
</Desc>
    <FName>MongoDB\Driver\Server::executeReadCommand</FName>
    <Desc>final public MongoDB\Driver\Cursor MongoDB\Driver\Server::executeReadCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] )
Executes the command on this server. 
This method will apply logic that is specific to commands that read (e.g. » count) and take the MongoDB server version into account. The "readConcern" option will default to the corresponding value from the MongoDB Connection URI. 
Note: The "readPreference" option does not control the server to which the driver issues the operation; it will always be executed on this server object. Instead, it may be used when issuing the operation to a secondary (from a replica set connection, not standalone) or mongos node to ensure that the driver sets the wire protocol accordingly or adds the read preference to the operation, respectively.
</Desc>
    <FName>MongoDB\Driver\Server::executeReadWriteCommand</FName>
    <Desc>final public MongoDB\Driver\Cursor MongoDB\Driver\Server::executeReadWriteCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] )
Executes the command on this server. 
This method will apply logic that is specific to commands that read and write (e.g. » findAndModify) and take the MongoDB server version into account. The "readConcern" and "writeConcern" options will default to the corresponding values from the MongoDB Connection URI.
</Desc>
    <FName>MongoDB\Driver\Server::executeWriteCommand</FName>
    <Desc>final public MongoDB\Driver\Cursor MongoDB\Driver\Server::executeWriteCommand ( string $db , MongoDB\Driver\Command $command [, array $options = array() ] )
Executes the command on this server. 
This method will apply logic that is specific to commands that write (e.g. » drop) and take the MongoDB server version into account. The "writeConcern" option will default to the corresponding value from the MongoDB Connection URI.
</Desc>
    <FName>MongoDB\Driver\Server::getHost</FName>
    <Desc>final public string MongoDB\Driver\Server::getHost ( void )
Returns the hostname of this server.
</Desc>
    <FName>MongoDB\Driver\Server::getInfo</FName>
    <Desc>final public array MongoDB\Driver\Server::getInfo ( void )
Returns an array of information about this server.
</Desc>
    <FName>MongoDB\Driver\Server::getLatency</FName>
    <Desc>final public string MongoDB\Driver\Server::getLatency ( void )
Returns the latency of this server (i.e. the client's measured » round trip time of an ismaster command).
</Desc>
    <FName>MongoDB\Driver\Server::getPort</FName>
    <Desc>final public int MongoDB\Driver\Server::getPort ( void )
Returns the port on which this server is listening.
</Desc>
    <FName>MongoDB\Driver\Server::getTags</FName>
    <Desc>final public array MongoDB\Driver\Server::getTags ( void )
Returns an array of » tags used to describe this server in a replica set. The array will contain zero or more string key and value pairs.
</Desc>
    <FName>MongoDB\Driver\Server::getType</FName>
    <Desc>final public int MongoDB\Driver\Server::getType ( void )
Returns an integer denoting the type of this server. The value will correlate with a MongoDB\Driver\Server constant.
</Desc>
    <FName>MongoDB\Driver\Server::isArbiter</FName>
    <Desc>final public bool MongoDB\Driver\Server::isArbiter ( void )
Returns whether this server is an » arbiter member of a replica set.
</Desc>
    <FName>MongoDB\Driver\Server::isHidden</FName>
    <Desc>final public bool MongoDB\Driver\Server::isHidden ( void )
Returns whether this server is a » hidden member of a replica set.
</Desc>
    <FName>MongoDB\Driver\Server::isPassive</FName>
    <Desc>final public bool MongoDB\Driver\Server::isPassive ( void )
Returns whether this server is a » passive member of a replica set (i.e. its priority is 0).
</Desc>
    <FName>MongoDB\Driver\Server::isPrimary</FName>
    <Desc>final public bool MongoDB\Driver\Server::isPrimary ( void )
Returns whether this server is a » primary member of a replica set.
</Desc>
    <FName>MongoDB\Driver\Server::isSecondary</FName>
    <Desc>final public bool MongoDB\Driver\Server::isSecondary ( void )
Returns whether this server is a » secondary member of a replica set.
</Desc>
    <FName>MongoDB\Driver\Session::abortTransaction</FName>
    <Desc>final public void MongoDB\Driver\Session::abortTransaction ( void )
This method aborts an existing transaction and all the associated operations are rolled back. It is like all operations that were part of this transaction never existed.
</Desc>
    <FName>MongoDB\Driver\Session::advanceClusterTime</FName>
    <Desc>final public void MongoDB\Driver\Session::advanceClusterTime ( array|object $clusterTime )
Advances the cluster time for this session. If the cluster time is less than or equal to the session's current cluster time, this function is a no-op. 
By using this method in conjunction with MongoDB\Driver\Session::advanceOperationTime() to copy the cluster and operation times from another session, you can ensure that operations in this session are causally consistent with the last operation in the other session.
</Desc>
    <FName>MongoDB\Driver\Session::advanceOperationTime</FName>
    <Desc>final public void MongoDB\Driver\Session::advanceOperationTime ( MongoDB\BSON\TimestampInterface $operationTime )
Advances the operation time for this session. If the operation time is less than or equal to the session's current operation time, this function is a no-op. 
By using this method in conjunction with MongoDB\Driver\Session::advanceClusterTime() to copy the operation and cluster times from another session, you can ensure that operations in this session are causally consistent with the last operation in the other session.
</Desc>
    <FName>MongoDB\Driver\Session::commitTransaction</FName>
    <Desc>final public void MongoDB\Driver\Session::commitTransaction ( void )
This method commits an existing transaction and all the associated operations are persisted in the database.
</Desc>
    <FName>MongoDB\Driver\Session::__construct</FName>
    <Desc>final private MongoDB\Driver\Session::__construct ( void )
MongoDB\Driver\Session objects are returned by MongoDB\Driver\Manager::startSession() and cannot be constructed directly.
</Desc>
    <FName>MongoDB\Driver\Session::endSession</FName>
    <Desc>final public void MongoDB\Driver\Session::endSession ( void )
This method closes an existing session. If a transaction was associated with this session, this transaction is also aborted, and all its operations are rolled back.
</Desc>
    <FName>MongoDB\Driver\Session::getClusterTime</FName>
    <Desc>final public object|null MongoDB\Driver\Session::getClusterTime ( void )
Returns the cluster time for this session. If the session has not been used for any operation and MongoDB\Driver\Session::advanceClusterTime() has not been called, the cluster time will be NULL.
</Desc>
    <FName>MongoDB\Driver\Session::getLogicalSessionId</FName>
    <Desc>final public object MongoDB\Driver\Session::getLogicalSessionId ( void )
Returns the logical session ID for this session, which may be used to identify this session's operations on the server.
</Desc>
    <FName>MongoDB\Driver\Session::getOperationTime</FName>
    <Desc>final public MongoDB\BSON\Timestamp|null MongoDB\Driver\Session::getOperationTime ( void )
Returns the operation time for this session. If the session has not been used for any operation and MongoDB\Driver\Session::advanceOperationTime() has not been called, the operation time will be NULL
</Desc>
    <FName>MongoDB\Driver\Session::startTransaction</FName>
    <Desc>final public void MongoDB\Driver\Session::startTransaction ( array|object $options )
This method starts a new transaction within this session. When the session is attached to operations through the "session" argument, these operations become of the started transaction. 
Transactions can be committed through MongoDB\Driver\Session::commitTransaction(), and aborted with MongoDB\Driver\Session::abortTransaction(). 
Transactions are also automatically aborted when the session is terminated through MongoDB\Driver\Session::endSession().
</Desc>
    <FName>MongoDB\Driver\WriteConcern::bsonSerialize</FName>
    <Desc>final public object MongoDB\Driver\WriteConcern::bsonSerialize ( void )
</Desc>
    <FName>MongoDB\Driver\WriteConcern::__construct</FName>
    <Desc>final public MongoDB\Driver\WriteConcern::__construct ( string|integer $w [, int $wtimeout [, bool $journal ]] )
Constructs a new MongoDB\Driver\WriteConcern, which is an immutable value object.
</Desc>
    <FName>MongoDB\Driver\WriteConcern::getJournal</FName>
    <Desc>final public boolean|null MongoDB\Driver\WriteConcern::getJournal ( void )
</Desc>
    <FName>MongoDB\Driver\WriteConcern::getW</FName>
    <Desc>final public string|integer|null MongoDB\Driver\WriteConcern::getW ( void )
</Desc>
    <FName>MongoDB\Driver\WriteConcern::getWtimeout</FName>
    <Desc>final public int MongoDB\Driver\WriteConcern::getWtimeout ( void )
</Desc>
    <FName>MongoDB\Driver\WriteConcern::isDefault</FName>
    <Desc>final public bool MongoDB\Driver\WriteConcern::isDefault ( void )
Returns whether this is the default write concern (i.e. no options are specified). This method is primarily intended to be used in conjunction with MongoDB\Driver\Manager::getWriteConcern() to determine whether the Manager has been constructed without any write concern options. 
The driver will not include a default write concern in its write operations (e.g. MongoDB\Driver\Manager::executeBulkWrite()) in order to allow the server to apply its own default, which may have been » modified. Libraries that access the Manager's write concern to include it in their own write commands should use this method to ensure that default write concerns are left unset.
</Desc>
    <FName>MongoDB\Driver\WriteConcernError::getCode</FName>
    <Desc>final public int MongoDB\Driver\WriteConcernError::getCode ( void )
</Desc>
    <FName>MongoDB\Driver\WriteConcernError::getInfo</FName>
    <Desc>final public mixed MongoDB\Driver\WriteConcernError::getInfo ( void )
</Desc>
    <FName>MongoDB\Driver\WriteConcernError::getMessage</FName>
    <Desc>final public string MongoDB\Driver\WriteConcernError::getMessage ( void )
</Desc>
    <FName>MongoDB\Driver\WriteError::getCode</FName>
    <Desc>final public int MongoDB\Driver\WriteError::getCode ( void )
</Desc>
    <FName>MongoDB\Driver\WriteError::getIndex</FName>
    <Desc>final public int MongoDB\Driver\WriteError::getIndex ( void )
</Desc>
    <FName>MongoDB\Driver\WriteError::getInfo</FName>
    <Desc>final public mixed MongoDB\Driver\WriteError::getInfo ( void )
</Desc>
    <FName>MongoDB\Driver\WriteError::getMessage</FName>
    <Desc>final public string MongoDB\Driver\WriteError::getMessage ( void )
</Desc>
    <FName>MongoDB\Driver\Exception\WriteException::getWriteResult</FName>
    <Desc>final public MongoDB\Driver\WriteResult MongoDB\Driver\Exception\WriteException::getWriteResult ( void )
Returns the MongoDB\Driver\WriteResult for the failed write operation. The MongoDB\Driver\WriteResult::getWriteErrors() and MongoDB\Driver\WriteResult::getWriteConcernError() methods may be used to get more details about the failure.
</Desc>
    <FName>MongoDB\Driver\WriteResult::getDeletedCount</FName>
    <Desc>final public integer|null MongoDB\Driver\WriteResult::getDeletedCount ( void )
</Desc>
    <FName>MongoDB\Driver\WriteResult::getInsertedCount</FName>
    <Desc>final public integer|null MongoDB\Driver\WriteResult::getInsertedCount ( void )
</Desc>
    <FName>MongoDB\Driver\WriteResult::getMatchedCount</FName>
    <Desc>final public integer|null MongoDB\Driver\WriteResult::getMatchedCount ( void )
If the update operation results in no change to the document (e.g. setting the value of a field to its current value), the matched count may be greater than the value returned by MongoDB\Driver\WriteResult::getModifiedCount().
</Desc>
    <FName>MongoDB\Driver\WriteResult::getModifiedCount</FName>
    <Desc>final public integer|null MongoDB\Driver\WriteResult::getModifiedCount ( void )
If the update operation results in no change to the document (e.g. setting the value of a field to its current value), the modified count may be less than the value returned by MongoDB\Driver\WriteResult::getMatchedCount().
</Desc>
    <FName>MongoDB\Driver\WriteResult::getServer</FName>
    <Desc>final public MongoDB\Driver\Server MongoDB\Driver\WriteResult::getServer ( void )
Returns the MongoDB\Driver\Server associated with this write result. This is the server that executed the MongoDB\Driver\BulkWrite.
</Desc>
    <FName>MongoDB\Driver\WriteResult::getUpsertedCount</FName>
    <Desc>final public integer|null MongoDB\Driver\WriteResult::getUpsertedCount ( void )
</Desc>
    <FName>MongoDB\Driver\WriteResult::getUpsertedIds</FName>
    <Desc>final public array MongoDB\Driver\WriteResult::getUpsertedIds ( void )
</Desc>
    <FName>MongoDB\Driver\WriteResult::getWriteConcernError</FName>
    <Desc>final public MongoDB\Driver\WriteConcernError|null MongoDB\Driver\WriteResult::getWriteConcernError ( void )
</Desc>
    <FName>MongoDB\Driver\WriteResult::getWriteErrors</FName>
    <Desc>final public array MongoDB\Driver\WriteResult::getWriteErrors ( void )
</Desc>
    <FName>MongoDB\Driver\WriteResult::isAcknowledged</FName>
    <Desc>final public bool MongoDB\Driver\WriteResult::isAcknowledged ( void )
If the write is acknowledged, other count fields will be available on the MongoDB\Driver\WriteResult object.
</Desc>
    <FName>MongoDB::__toString</FName>
    <Desc>public string MongoDB::__toString ( void )
</Desc>
    <FName>MongoDB::authenticate</FName>
    <Desc>public array MongoDB::authenticate ( string $username , string $password )
This method causes its connection to be authenticated. If authentication is enabled for the database server (it's not, by default), you need to log in before the database will allow you to do anything. 
In general, you should use the authenticate built into MongoClient::__construct() in preference to this method. If you authenticate on connection and the connection drops and reconnects during your session, you'll be reauthenticated. If you manually authenticated using this method and the connection drops, you'll have to call this method again once you're reconnected. 
This method is identical to running: 
<?php

$salted = "${username}:mongo:${password}";
$hash = md5($salted);

$nonce = $db->command(array("getnonce" => 1));

$saltedHash = md5($nonce["nonce"]."${username}${hash}");

$result = $db->command(array("authenticate" => 1,
    "user" => $username,
    "nonce" => $nonce["nonce"],
    "key" => $saltedHash
));

?> 
Once a connection has been authenticated, it can only be un-authenticated by using the "logout" database command: 
<?php

$db->command(array("logout" => 1));

?>
</Desc>
    <FName>MongoDB::command</FName>
    <Desc>public array MongoDB::command ( array $command [, array $options = array() [, string &$hash ]] )
Almost everything that is not a CRUD operation can be done with a database command. Need to know the database version? There's a command for that. Need to do aggregation? There's a command for that. Need to turn up logging? You get the idea. 
This method is identical to: 
<?php

public function command($data) {
    return $this->selectCollection('$cmd')->findOne($data);
}

?>
</Desc>
    <FName>MongoDB::__construct</FName>
    <Desc>public MongoDB::__construct ( MongoClient $conn , string $name )
This method is not meant to be called directly. The preferred way to create an instance of MongoDB is through MongoClient::__get() or MongoClient::selectDB(). 
If you're ignoring the previous paragraph and want to call it directly you can do so: 
<?php

$m = new MongoClient();
$db = new MongoDB($m, 'mydbname');

?> 
But don't. Isn't this much nicer: 
<?php

$m = new MongoClient();
$db = $m->mydbname;

// or, if the name contains weird characters:

$db = $m->selectDB('my,db:name');

?>
</Desc>
    <FName>MongoDB::createCollection</FName>
    <Desc>public MongoCollection MongoDB::createCollection ( string $name [, array $options ] )
This method is used to create capped collections and other collections requiring special options. It is identical to running: 
<?php

$collection = $db->command(array(
    "create" => $name,
    "capped" => $options["capped"],
    "size" => $options["size"],
    "max" => $options["max"],
    "autoIndexId" => $options["autoIndexId"],
));

?> 
See MongoDB::command() for more information about database commands.
</Desc>
    <FName>MongoDB::createDBRef</FName>
    <Desc>public array MongoDB::createDBRef ( string $collection , mixed $document_or_id )
This method is a flexible interface for creating database refrences (see MongoDBRef).
</Desc>
    <FName>MongoDB::drop</FName>
    <Desc>public array MongoDB::drop ( void )
This drops the database currently being used. 
This is identical to running: 
<?php

public function drop() {
    $this->command(array("dropDatabase" => 1));
}

?>
</Desc>
    <FName>MongoDB::dropCollection</FName>
    <Desc>public array MongoDB::dropCollection ( mixed $coll )
Warning 
Deprecated
Use MongoCollection::drop() instead. 
This function leaks memory in version 1.0.7 and earlier!
</Desc>
    <FName>MongoDB::execute</FName>
    <Desc>public array MongoDB::execute ( mixed $code [, array $args = array() ] )
Warning 
The » eval command, which this method invokes, is deprecated in MongoDB 3.0+. 
The Mongo database server runs a JavaScript engine. This method allows you to run arbitary JavaScript on the database. This can be useful if you want touch a number of collections lightly, or process some results on the database side to reduce the amount that has to be sent to the client. 
Running JavaScript in the database takes a write lock, meaning it blocks other operations. Make sure you consider this before running a long script. 
This is a wrapper for the » eval database command. This method is basically: 
<?php

public function execute($code, $args) {
    return $this->command(array('eval' => $code, 'args' => $args));
}

?> 
MongoDB implies a return statement if you have a single statement on a single line. This can cause some unintuitive behavior. For example, this returns "foo": 
<?php

$db->execute('"foo";');

?> 
However, these return NULL: 
<?php

$db->execute('"bar"; "foo";'); // more than one statement

$db->execute('db.foo.count(
);'); // more than one line

?> 
To avoid surprising behavior, it is best not to depend on MongoDB to decide what to return, but to explicitly state a return value. In the examples above, we can change them to: 
<?php

$db->execute('"bar"; return "foo";');

$db->execute('return db.foo.count(
);');

?> 
Now the first statement will return "foo" and the second statement will return a count of the "foo" collection.
</Desc>
    <FName>MongoDB::forceError</FName>
    <Desc>public bool MongoDB::forceError ( void )
This method is not very useful for normal MongoDB use. It forces a database error to occur. This means that MongoDB::lastError() will return a generic database error after running this command. 
This command is identical to running: 
<?php

public function forceError() {
    return $this->command(array('forceerror' => 1));
}

?>
</Desc>
    <FName>MongoDB::__get</FName>
    <Desc>public MongoCollection MongoDB::__get ( string $name )
This is the easiest way of getting a collection from a database object. If a collection name contains strange characters, you may have to use MongoDB::selectCollection() instead. 
<?php

$mongo = new MongoClient();

// the following two lines are equivalent
$collection = $mongo->selectDB("foo")->selectCollection("bar");
$collection = $mongo->foo->bar;

?>
</Desc>
    <FName>MongoDB::getCollectionInfo</FName>
    <Desc>public array MongoDB::getCollectionInfo ([ array $options = array() ] )
Gets a list of all collections in the database and returns them as an array of documents, which contain their names and options. 
Note: This method will use the » listCollections database command when communicating with MongoDB 2.8+. For previous database versions, the method will query the special system.namespaces collection.
</Desc>
    <FName>MongoDB::getCollectionNames</FName>
    <Desc>public array MongoDB::getCollectionNames ([ array $options = array() ] )
Gets a list of all collections in the database and returns their names as an array of strings. 
Note: This method will use the » listCollections database command when communicating with MongoDB 2.8+. For previous database versions, the method will query the special system.namespaces collection.
</Desc>
    <FName>MongoDB::getDBRef</FName>
    <Desc>public array MongoDB::getDBRef ( array $ref )
</Desc>
    <FName>MongoDB::getGridFS</FName>
    <Desc>public MongoGridFS MongoDB::getGridFS ([ string $prefix = "fs" ] )
</Desc>
    <FName>MongoDB::getProfilingLevel</FName>
    <Desc>public int MongoDB::getProfilingLevel ( void )
This returns the current database profiling level. 
The database profiler tracks query execution times. If you turn it on (say, using MongoDB::setProfilingLevel() or the shell), you can see how many queries took longer than a given number of milliseconds or the timing for all queries. 
Note that profiling slows down queries, so it is better to use in development or testing than in a time-sensitive application. 
This function is equivalent to running: 
<?php

public function getProfilingLevel() {
    return $this->command(array('profile' => -1));
}

?>
</Desc>
    <FName>MongoDB::getReadPreference</FName>
    <Desc>public array MongoDB::getReadPreference ( void )
</Desc>
    <FName>MongoDB::getSlaveOkay</FName>
    <Desc>public bool MongoDB::getSlaveOkay ( void )
See the query section of this manual for information on distributing reads to secondaries.
</Desc>
    <FName>MongoDB::getWriteConcern</FName>
    <Desc>public array MongoDB::getWriteConcern ( void )
</Desc>
    <FName>MongoDB::lastError</FName>
    <Desc>public array MongoDB::lastError ( void )
This method is equivalent to: 
<?php

public function lastError() {
    return $this->command(array('getlasterror' => 1));
}

?>
</Desc>
    <FName>MongoDB::listCollections</FName>
    <Desc>public array MongoDB::listCollections ([ array $options = array() ] )
Gets a list of all collections in the database and returns them as an array of MongoCollection objects. 
Note: This method will use the » listCollections database command when communicating with MongoDB 2.8+. For previous database versions, the method will query the special system.namespaces collection.
</Desc>
    <FName>MongoDB::prevError</FName>
    <Desc>public array MongoDB::prevError ( void )
MongoDB::lastError() is usually preferred to this. This method returns the last database error that occurred and how many operations ago it occurred. It is mostly deprecated.
</Desc>
    <FName>MongoDB::repair</FName>
    <Desc>public array MongoDB::repair ([ bool $preserve_cloned_files = FALSE [, bool $backup_original_files = FALSE ]] )
This creates a fresh copy of all database data. It will remove any corrupt data and compact and large stretches of free space it finds. This is a very slow operation on a large database. 
This is usually run from the shell or the command line, not the driver. 
It is equivalent to the function: 
<?php

public function repair() {
    return $this->command(array('repairDatabase' => 1));
}

?>
</Desc>
    <FName>MongoDB::resetError</FName>
    <Desc>public array MongoDB::resetError ( void )
This method is not used in normal operations. It resets the database error tracker (which can be incremented with MongoDB::forceError(), also not normally used). 
It is equivalent to running: 
<?php

public function resetError() {
    return $this->command(array('reseterror' => 1));
}

?>
</Desc>
    <FName>MongoDB::selectCollection</FName>
    <Desc>public MongoCollection MongoDB::selectCollection ( string $name )
</Desc>
    <FName>MongoDB::setProfilingLevel</FName>
    <Desc>public int MongoDB::setProfilingLevel ( int $level )
This changes the current database profiling level. 
This function is equivalent to running: 
<?php

public function setProfilingLevel($level) {
    return $this->command(array('profile' => $level));
}

?> 
The options for level are 0 (off), 1 (queries > 100ms), and 2 (all queries). If you would like to profile queries that take longer than another time period, use the database command and pass it a second option, the number of milliseconds. For example, to profile all queries that take longer than one second, run: 
<?php

$result = $this->command(array('profile' => 1, 'slowms' => 1000));

?> 
Profiled queries will appear in the system.profile collection of this database.
</Desc>
    <FName>MongoDB::setReadPreference</FName>
    <Desc>public bool MongoDB::setReadPreference ( string $read_preference [, array $tags ] )
</Desc>
    <FName>MongoDB::setSlaveOkay</FName>
    <Desc>public bool MongoDB::setSlaveOkay ([ bool $ok = TRUE ] )
See the query section of this manual for information on distributing reads to secondaries.
</Desc>
    <FName>MongoDB::setWriteConcern</FName>
    <Desc>public bool MongoDB::setWriteConcern ( mixed $w [, int $wtimeout ] )
</Desc>
    <FName>MongoDBRef::create</FName>
    <Desc>public static array MongoDBRef::create ( string $collection , mixed $id [, string $database ] )
If no database is given, the current database is used.
</Desc>
    <FName>MongoDBRef::get</FName>
    <Desc>public static array MongoDBRef::get ( MongoDB $db , array $ref )
</Desc>
    <FName>MongoDBRef::isRef</FName>
    <Desc>public static bool MongoDBRef::isRef ( mixed $ref )
This method does not actually follow the reference, so it does not determine if it is broken or not. It merely checks that ref is in valid database reference format (in that it is an object or array with $ref and $id fields).
</Desc>
    <FName>MongoDeleteBatch::__construct</FName>
    <Desc>public MongoDeleteBatch::__construct ( MongoCollection $collection [, array $write_options ] )
Constructs a batch of DELETE operations. See MongoWriteBatch.
</Desc>
    <FName>MongoGridFS::__construct</FName>
    <Desc>public MongoGridFS::__construct ( MongoDB $db [, string $prefix = "fs" [, mixed $chunks = "fs" ]] )
Files as stored across two collections, the first containing file meta information, the second containing chunks of the actual file. By default, fs.files and fs.chunks are the collection names used. 
Use one argument to specify a prefix other than "fs": 
$fs = new MongoGridFS($db, "myfiles");uses myfiles.files and myfiles.chunks collections.
</Desc>
    <FName>MongoGridFS::delete</FName>
    <Desc>public bool|array MongoGridFS::delete ( mixed $id )
Note: 
MongoGridFS::delete() is a convenience method for calling MongoGridFS::remove() with specific criteria and default options parameters.
</Desc>
    <FName>MongoGridFS::drop</FName>
    <Desc>public array MongoGridFS::drop ( void )
</Desc>
    <FName>MongoGridFS::find</FName>
    <Desc>public MongoGridFSCursor MongoGridFS::find ([ array $query = array() [, array $fields = array() ]] )
</Desc>
    <FName>MongoGridFS::findOne</FName>
    <Desc>public MongoGridFSFile MongoGridFS::findOne ([ mixed $query = array() [, mixed $fields = array() ]] )
</Desc>
    <FName>MongoGridFS::get</FName>
    <Desc>public MongoGridFSFile MongoGridFS::get ( mixed $id )
</Desc>
    <FName>MongoGridFS::put</FName>
    <Desc>public mixed MongoGridFS::put ( string $filename [, array $metadata = array() [, array $options = array() ]] )
Note: 
MongoGridFS::put() is an alias of MongoGridFS::storeFile().
</Desc>
    <FName>MongoGridFS::remove</FName>
    <Desc>public bool|array MongoGridFS::remove ([ array $criteria = array() [, array $options = array() ]] )
</Desc>
    <FName>MongoGridFS::storeBytes</FName>
    <Desc>public mixed MongoGridFS::storeBytes ( string $bytes [, array $metadata = array() [, array $options = array() ]] )
</Desc>
    <FName>MongoGridFS::storeFile</FName>
    <Desc>public mixed MongoGridFS::storeFile ( string|resource $filename [, array $metadata = array() [, array $options = array() ]] )
</Desc>
    <FName>MongoGridFS::storeUpload</FName>
    <Desc>public mixed MongoGridFS::storeUpload ( string $name [, array $metadata ] )
</Desc>
    <FName>MongoGridFSCursor::__construct</FName>
    <Desc>public MongoGridFSCursor::__construct ( MongoGridFS $gridfs , resource $connection , string $ns , array $query , array $fields )
</Desc>
    <FName>MongoGridFSCursor::current</FName>
    <Desc>public MongoGridFSFile MongoGridFSCursor::current ( void )
</Desc>
    <FName>MongoGridFSCursor::getNext</FName>
    <Desc>public MongoGridFSFile MongoGridFSCursor::getNext ( void )
</Desc>
    <FName>MongoGridFSCursor::key</FName>
    <Desc>public string MongoGridFSCursor::key ( void )
</Desc>
    <FName>MongoGridfsFile::__construct</FName>
    <Desc>public MongoGridfsFile::__construct ( MongoGridFS $gridfs , array $file )
</Desc>
    <FName>MongoGridFSFile::getBytes</FName>
    <Desc>public string MongoGridFSFile::getBytes ( void )
Warning: this will load the file into memory. If the file is bigger than your memory, this will cause problems!
</Desc>
    <FName>MongoGridFSFile::getFilename</FName>
    <Desc>public string MongoGridFSFile::getFilename ( void )
</Desc>
    <FName>MongoGridFSFile::getResource</FName>
    <Desc>public resource MongoGridFSFile::getResource ( void )
This method returns a stream resource that can be used with all file functions in PHP that deal with reading files. The contents of the file are pulled out of MongoDB on the fly, so that the whole file does not have to be loaded into memory first. 
At most two GridFSFile chunks will be loaded in memory.
</Desc>
    <FName>MongoGridFSFile::getSize</FName>
    <Desc>public int MongoGridFSFile::getSize ( void )
</Desc>
    <FName>MongoGridFSFile::write</FName>
    <Desc>public int MongoGridFSFile::write ([ string $filename = NULL ] )
</Desc>
    <FName>MongoId::__construct</FName>
    <Desc>public MongoId::__construct ([ string|MongoId $id = NULL ] )
</Desc>
    <FName>MongoId::getHostname</FName>
    <Desc>public static string MongoId::getHostname ( void )
This returns the hostname MongoId is using to generate unique ids. This should be the same value gethostname() returns. 
It is identical to the function: 
<?php

public static function getHostname() {
    return gethostname();
}

?>
</Desc>
    <FName>MongoId::getInc</FName>
    <Desc>public int MongoId::getInc ( void )
</Desc>
    <FName>MongoId::getPID</FName>
    <Desc>public int MongoId::getPID ( void )
Extracts the pid from the Mongo ID
</Desc>
    <FName>MongoId::getTimestamp</FName>
    <Desc>public int MongoId::getTimestamp ( void )
This returns the same thing as running time() when the id is created.
</Desc>
    <FName>MongoId::isValid</FName>
    <Desc>public static bool MongoId::isValid ( mixed $value )
This method may be used to check a variable before passing it as an argument to MongoId::__construct().
</Desc>
    <FName>MongoId::__set_state</FName>
    <Desc>public static MongoId MongoId::__set_state ( array $props )
This function is only used by PHP internally, it shouldn't need to ever be called by the user. 
It is identical to the function: 
<?php

public static function __set_state($props) {
    return new MongoId("000000000000000000000000");
}

?>
</Desc>
    <FName>MongoId::__toString</FName>
    <Desc>public string MongoId::__toString ( void )
</Desc>
    <FName>MongoInsertBatch::__construct</FName>
    <Desc>public MongoInsertBatch::__construct ( MongoCollection $collection [, array $write_options ] )
Constructs a batch of INSERT operations. See MongoWriteBatch.
</Desc>
    <FName>MongoInt32::__construct</FName>
    <Desc>public MongoInt32::__construct ( string $value )
Creates a new 32-bit number with the given value.
</Desc>
    <FName>MongoInt32::__toString</FName>
    <Desc>public string MongoInt32::__toString ( void )
</Desc>
    <FName>MongoInt64::__construct</FName>
    <Desc>public MongoInt64::__construct ( string $value )
Creates a new 64-bit number with the given value.
</Desc>
    <FName>MongoInt64::__toString</FName>
    <Desc>public string MongoInt64::__toString ( void )
</Desc>
    <FName>MongoLog::getCallback</FName>
    <Desc>public static callable MongoLog::getCallback ( void )
Retrieves the callback function.
</Desc>
    <FName>MongoLog::getLevel</FName>
    <Desc>public static int MongoLog::getLevel ( void )
This function can be used to see which log levels are currently enabled. The returned integer may be compared with the MongoLog level constants using bitwise operators to check for specific log levels. 
<?php

if (MongoLog::getLevel() & MongoLog::FINE) {
    echo "lots of logs\n";
}

if (MongoLog::getLevel() ^ MongoLog::NONE) {
    echo "logging, at least a little\n";
}

if (MongoLog::getLevel() == MongoLog::ALL) {
    echo "logging at the highest levels\n";
}

?>
</Desc>
    <FName>MongoLog::getModule</FName>
    <Desc>public static int MongoLog::getModule ( void )
This function can be used to see which driver modules are currently being logged. The returned integer may be compared with the MongoLog module constants using bitwise operators to check if specific modules are being logged. 
<?php

if (MongoLog::getModule() & MongoLog::RS) {
    echo "logging replica sets\n";
}

if (MongoLog::getModule() ^ MongoLog::NONE) {
    echo "logging something\n";
}

if ((MongoLog::getModule() & MongoLog::IO) == 0) {
    echo "not logging io\n";
}

?>
</Desc>
    <FName>MongoLog::setCallback</FName>
    <Desc>public static void MongoLog::setCallback ( callable $log_function )
This function will set a callback function to be invoked for events in lieu of emitting of PHP notice.
</Desc>
    <FName>MongoLog::setLevel</FName>
    <Desc>public static void MongoLog::setLevel ( int $level )
This function can be used to control logging verbosity and the types of activities that should be logged. The MongoLog level constants may be used with bitwise operators to specify multiple levels. 
<?php

// first, specify a logging module
MongoLog::setModule(MongoLog::CON);

// log messages for every level
MongoLog::setLevel(MongoLog::ALL);

// log warning and info messages only
MongoLog::setLevel(MongoLog::WARNING|MongoLog::INFO);

// log everything except fine activity
MongoLog::setLevel(MongoLog::ALL & (~MongoLog::FINE));

?> 
Note that you must also call MongoLog::setModule() to specify which modules(s) of the driver should log.
</Desc>
    <FName>MongoLog::setModule</FName>
    <Desc>public static void MongoLog::setModule ( int $module )
This function can be used to set which driver modules should be logged. The MongoLog module constants may be used with bitwise operators to specify multiple modules. 
<?php

// first, specify a logging level
MongoLog::setLevel(MongoLog::ALL);

// log replica set activity
MongoLog::setModule(MongoLog::RS);

// log replica sets and connection activity
MongoLog::setModule(MongoLog::RS|MongoLog::CON);

// log everything except IO activity
MongoLog::setModule(MongoLog::ALL & (~MongoLog::IO));

?> 
Note that you must also call MongoLog::setLevel() to enable logging.
</Desc>
    <FName>MongoPool::getSize</FName>
    <Desc>public static int MongoPool::getSize ( void )
</Desc>
    <FName>MongoPool::info</FName>
    <Desc>public array MongoPool::info ( void )
Returns an array of information about all connection pools.
</Desc>
    <FName>MongoPool::setSize</FName>
    <Desc>public static bool MongoPool::setSize ( int $size )
Sets the max number of connections new pools will be able to create.
</Desc>
    <FName>MongoRegex::__construct</FName>
    <Desc>public MongoRegex::__construct ( string $regex )
Creates a new regular expression.
</Desc>
    <FName>MongoRegex::__toString</FName>
    <Desc>public string MongoRegex::__toString ( void )
Returns a string representation of this regular expression.
</Desc>
    <FName>MongoResultException::getDocument</FName>
    <Desc>public array MongoResultException::getDocument ( void )
Retrieves the full error result document.
</Desc>
    <FName>MongoTimestamp::__construct</FName>
    <Desc>public MongoTimestamp::__construct ([ int $sec = time() [, int $inc ]] )
Creates a new timestamp. If no parameters are given, the current time is used and the increment is automatically provided. The increment is set to 0 when the module is loaded and is incremented every time this constructor is called (without the $inc parameter passed in).
</Desc>
    <FName>MongoTimestamp::__toString</FName>
    <Desc>public string MongoTimestamp::__toString ( void )
Returns the "sec" field of this timestamp.
</Desc>
    <FName>MongoUpdateBatch::__construct</FName>
    <Desc>public MongoUpdateBatch::__construct ( MongoCollection $collection [, array $write_options ] )
Constructs a batch of UPDATE operations. See MongoWriteBatch.
</Desc>
    <FName>MongoWriteBatch::add</FName>
    <Desc>public bool MongoWriteBatch::add ( array $item )
Adds a write operation to the batch. 
If $item causes the batch to exceed the maxWriteBatchSize or maxBsonObjectSize limits, the driver will internally split the batches into multiple write commands upon calling MongoWriteBatch::execute().
</Desc>
    <FName>MongoWriteBatch::__construct</FName>
    <Desc>protected MongoWriteBatch::__construct ( MongoCollection $collection [, string $batch_type [, array $write_options ]] )
Constructs a new MongoWriteBatch. 
Note: 
This is a protected constructor. Please use one of the classes inheriting MongoWriteBatch.
</Desc>
    <FName>MongoWriteBatch::execute</FName>
    <Desc>final public array MongoWriteBatch::execute ( array $write_options )
Executes the batch of write operations.
</Desc>
    <FName>MongoWriteConcernException::getDocument</FName>
    <Desc>public array MongoWriteConcernException::getDocument ( void )
Returns the actual response from the server that was interperated as an error.
</Desc>
    <FName>KTaglib_MPEG_File::__construct</FName>
    <Desc>public KTaglib_MPEG_File::__construct ( string $filename )
Opens a new MPEG file.
</Desc>
    <FName>KTaglib_MPEG_File::getAudioProperties</FName>
    <Desc>public KTaglib_MPEG_File KTaglib_MPEG_File::getAudioProperties ( void )
Returns an object that provides access to the audio properties of the mpeg file.
</Desc>
    <FName>KTaglib_MPEG_File::getID3v1Tag</FName>
    <Desc>public KTaglib_ID3v1_Tag KTaglib_MPEG_File::getID3v1Tag ([ bool $create = FALSE ] )
Returns an object that represents an ID3v1 tag, which can be used to get information about the ID3v1 tag.
</Desc>
    <FName>KTaglib_MPEG_File::getID3v2Tag</FName>
    <Desc>public KTaglib_ID3v2_Tag KTaglib_MPEG_File::getID3v2Tag ([ bool $create = FALSE ] )
Returns a ID3v2 object for the mpeg file. If no ID3v2 Tag is present, an KTaglib_TagNotFoundException is thrown.
</Desc>
    <FName>MultipleIterator::attachIterator</FName>
    <Desc>public void MultipleIterator::attachIterator ( Iterator $iterator [, string $infos ] )
Attaches iterator information. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MultipleIterator::__construct</FName>
    <Desc>public MultipleIterator::__construct ([ int $flags = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC ] )
Construct a new MultipleIterator.
</Desc>
    <FName>MultipleIterator::containsIterator</FName>
    <Desc>public bool MultipleIterator::containsIterator ( Iterator $iterator )
Checks if an iterator is attached or not. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MultipleIterator::countIterators</FName>
    <Desc>public int MultipleIterator::countIterators ( void )
Gets the number of attached iterator instances. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MultipleIterator::current</FName>
    <Desc>public array MultipleIterator::current ( void )
Get the registered iterator instances current() result. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MultipleIterator::detachIterator</FName>
    <Desc>public void MultipleIterator::detachIterator ( Iterator $iterator )
Detaches an iterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MultipleIterator::getFlags</FName>
    <Desc>public int MultipleIterator::getFlags ( void )
Gets information about the flags. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MultipleIterator::key</FName>
    <Desc>public array MultipleIterator::key ( void )
Get the registered iterator instances key() result. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MultipleIterator::next</FName>
    <Desc>public void MultipleIterator::next ( void )
Moves all attached iterator instances forward. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MultipleIterator::rewind</FName>
    <Desc>public void MultipleIterator::rewind ( void )
Rewinds all attached iterator instances. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MultipleIterator::setFlags</FName>
    <Desc>public void MultipleIterator::setFlags ( int $flags )
Sets flags. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MultipleIterator::valid</FName>
    <Desc>public bool MultipleIterator::valid ( void )
Checks the validity of sub iterators. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Mutex::create</FName>
    <Desc>final public static int Mutex::create ([ bool $lock ] )
Create, and optionally lock a new Mutex for the caller
</Desc>
    <FName>Mutex::destroy</FName>
    <Desc>final public static bool Mutex::destroy ( int $mutex )
Destroying Mutex handles must be carried out explicitly by the programmer when they are finished with the Mutex handle.
</Desc>
    <FName>Mutex::lock</FName>
    <Desc>final public static bool Mutex::lock ( int $mutex )
Attempt to lock the Mutex for the caller.
An attempt to lock a Mutex owned (locked) by another Thread will result in blocking.
</Desc>
    <FName>Mutex::trylock</FName>
    <Desc>final public static bool Mutex::trylock ( int $mutex )
Attempt to lock the Mutex for the caller without blocking if the Mutex is owned (locked) by another Thread.
</Desc>
    <FName>Mutex::unlock</FName>
    <Desc>final public static bool Mutex::unlock ( int $mutex [, bool $destroy ] )
Attempts to unlock the Mutex for the caller, optionally destroying the Mutex handle. The calling thread should own the Mutex at the time of the call.
</Desc>
    <FName>BaseResult::getWarnings</FName>
    <Desc>abstract public array mysql_xdevapi\BaseResult::getWarnings ( void )
Fetches warnings generated by MySQL server's last operation.
</Desc>
    <FName>BaseResult::getWarningsCount</FName>
    <Desc>abstract public integer mysql_xdevapi\BaseResult::getWarningsCount ( void )
Returns the number of warnings raised by the last operation. Specifically, these warnings are raised by the MySQL server.
</Desc>
    <FName>Collection::add</FName>
    <Desc>public mysql_xdevapi\CollectionAdd mysql_xdevapi\Collection::add ( mixed $document )
Triggers the insertion of the given document(s) into the collection, and multiple variants of this method are supported. Options include: 
Add a single document as a JSON string. 
Add a single document as an array as: [ 'field' => 'value', 'field2' => 'value2' ... ] 
A mix of of both, and multiple documents can be added in the same operation.
</Desc>
    <FName>Collection::addOrReplaceOne</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\Collection::addOrReplaceOne ( string $id , string $doc )
Add a new document, or replace a document if it already exists. 
Here are several scenarios for this method: 
If neither the id or any unique key values conflict with any document in the collection, then the document is added. 
If the id does not match any document but one or more unique key values conflict with a document in the collection, then an error is raised. 
If id matches an existing document and no unique keys are defined for the collection, then the document is replaced. 
If id matches an existing document, and either all unique keys in the replacement document match that same document or they don't conflict with any other documents in the collection, then the document is replaced. 
If id matches an existing document and one or more unique keys match a different document from the collection, then an error is raised.
</Desc>
    <FName>Collection::__construct</FName>
    <Desc>private mysql_xdevapi\Collection::__construct ( void )
Construct a Collection object.
</Desc>
    <FName>Collection::count</FName>
    <Desc>public integer mysql_xdevapi\Collection::count ( void )
This functionality is similar to a SELECT COUNT(*) SQL operation against the MySQL server for the current schema and collection. In other words, it counts the number of documents in the collection.
</Desc>
    <FName>Collection::createIndex</FName>
    <Desc>public void mysql_xdevapi\Collection::createIndex ( string $index_name , string $index_desc_json )
Creates an index on the collection. 
An exception is thrown if an index with the same name already exists, or if index definition is not correctly formed.
</Desc>
    <FName>Collection::dropIndex</FName>
    <Desc>public bool mysql_xdevapi\Collection::dropIndex ( string $index_name )
Drop a collection index. 
This operation does not yield an error if the index does not exist, but FALSE is returned in that case.
</Desc>
    <FName>Collection::existsInDatabase</FName>
    <Desc>public bool mysql_xdevapi\Collection::existsInDatabase ( void )
Checks if the Collection object refers to a collection in the database (schema).
</Desc>
    <FName>Collection::find</FName>
    <Desc>public mysql_xdevapi\CollectionFind mysql_xdevapi\Collection::find ([ string $search_condition ] )
Search a database collection for a document or set of documents. The found documents are returned as a CollectionFind object is to further modify or fetch results from.
</Desc>
    <FName>Collection::getName</FName>
    <Desc>public string mysql_xdevapi\Collection::getName ( void )
Retrieve the collection's name.
</Desc>
    <FName>Collection::getOne</FName>
    <Desc>public Document mysql_xdevapi\Collection::getOne ( string $id )
Fetches one document from the collection. 
This is a shortcut for: Collection.find("_id = :id").bind("id", id).execute().fetchOne();
</Desc>
    <FName>Collection::getSchema</FName>
    <Desc>public Schema Object mysql_xdevapi\Collection::getSchema ( void )
Retrieve the schema object that contains the collection.
</Desc>
    <FName>Collection::getSession</FName>
    <Desc>public Session mysql_xdevapi\Collection::getSession ( void )
Get a new Session object from the Collection object.
</Desc>
    <FName>Collection::modify</FName>
    <Desc>public mysql_xdevapi\CollectionModify mysql_xdevapi\Collection::modify ( string $search_condition )
Modify collections that meet specific search conditions. Multiple operations are allowed, and parameter binding is supported.
</Desc>
    <FName>Collection::remove</FName>
    <Desc>public mysql_xdevapi\CollectionRemove mysql_xdevapi\Collection::remove ( string $search_condition )
Remove collections that meet specific search conditions. Multiple operations are allowed, and parameter binding is supported.
</Desc>
    <FName>Collection::removeOne</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\Collection::removeOne ( string $id )
Remove one document from the collection with the correspending ID. This is a shortcut for Collection.remove("_id = :id").bind("id", id).execute().
</Desc>
    <FName>Collection::replaceOne</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\Collection::replaceOne ( string $id , string $doc )
Updates (or replaces) the document identified by ID, if it exists.
</Desc>
    <FName>CollectionAdd::__construct</FName>
    <Desc>private mysql_xdevapi\CollectionAdd::__construct ( void )
Use to add a document to a collection; called from a Collection object.
</Desc>
    <FName>CollectionAdd::execute</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\CollectionAdd::execute ( void )
The execute method is required to send the CRUD operation request to the MySQL server.
</Desc>
    <FName>CollectionFind::bind</FName>
    <Desc>public mysql_xdevapi\CollectionFind mysql_xdevapi\CollectionFind::bind ( array $placeholder_values )
It allows the user to bind a parameter to the placeholder in the search condition of the find operation. The placeholder has the form of :NAME where ':' is a common prefix that must always exists before any NAME, NAME is the actual name of the placeholder. The bind function accepts a list of placeholders if multiple entities have to be substituted in the search condition.
</Desc>
    <FName>CollectionFind::__construct</FName>
    <Desc>private mysql_xdevapi\CollectionFind::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CollectionFind::execute</FName>
    <Desc>public mysql_xdevapi\DocResult mysql_xdevapi\CollectionFind::execute ( void )
Execute the find operation; this functionality allows for method chaining.
</Desc>
    <FName>CollectionFind::fields</FName>
    <Desc>public mysql_xdevapi\CollectionFind mysql_xdevapi\CollectionFind::fields ( string $projection )
Defined the columns for the query to return. If not defined then all columns are used.
</Desc>
    <FName>CollectionFind::groupBy</FName>
    <Desc>public mysql_xdevapi\CollectionFind mysql_xdevapi\CollectionFind::groupBy ( string $sort_expr )
This function can be used to group the result-set by one more columns, frequently this is used with aggregate functions like COUNT,MAX,MIN,SUM etc.
</Desc>
    <FName>CollectionFind::having</FName>
    <Desc>public mysql_xdevapi\CollectionFind mysql_xdevapi\CollectionFind::having ( string $sort_expr )
This function can be used after the 'field' operation in order to make a selection on the documents to extract.
</Desc>
    <FName>CollectionFind::limit</FName>
    <Desc>public mysql_xdevapi\CollectionFind mysql_xdevapi\CollectionFind::limit ( integer $rows )
Set the maximum number of documents to return.
</Desc>
    <FName>CollectionFind::lockExclusive</FName>
    <Desc>public mysql_xdevapi\CollectionFind mysql_xdevapi\CollectionFind::lockExclusive ([ integer $lock_waiting_option ] )
Lock exclusively the document, other transactions are blocked from updating the document until the document is locked While the document is locked, other transactions are blocked from updating those docs, from doing SELECT ... LOCK IN SHARE MODE, or from reading the data in certain transaction isolation levels. Consistent reads ignore any locks set on the records that exist in the read view. 
This feature is directly useful with the modify() command, to avoid concurrency problems. Basically, it serializes access to a row through row locking
</Desc>
    <FName>CollectionFind::lockShared</FName>
    <Desc>public mysql_xdevapi\CollectionFind mysql_xdevapi\CollectionFind::lockShared ([ integer $lock_waiting_option ] )
Allows to share the documents between multiple transactions which are locking in shared mode. 
Other sessions can read the rows, but cannot modify them until your transaction commits. 
If any of these rows were changed by another transaction that has not yet committed, 
your query waits until that transaction ends and then uses the latest values.
</Desc>
    <FName>CollectionFind::offset</FName>
    <Desc>public mysql_xdevapi\CollectionFind mysql_xdevapi\CollectionFind::offset ( integer $position )
Skip (offset) these number of elements that otherwise would be returned by the find operation. Use with the limit() method. 
Defining an offset larger than the result set size results in an empty set.
</Desc>
    <FName>CollectionFind::sort</FName>
    <Desc>public mysql_xdevapi\CollectionFind mysql_xdevapi\CollectionFind::sort ( string $sort_expr )
Sort the result set by the field selected in the sort_expr argument. The allowed orders are ASC (Ascending) or DESC (Descending). This operation is equivalent to the 'ORDER BY' SQL operation and it follows the same set of rules.
</Desc>
    <FName>CollectionModify::arrayAppend</FName>
    <Desc>public mysql_xdevapi\CollectionModify mysql_xdevapi\CollectionModify::arrayAppend ( string $collection_field , string $expression_or_literal )
Add an element to a document's field, as multiple elements of a field are represented as an array. Unlike arrayInsert(), arrayAppend() always appends the new element at the end of the array, whereas arrayInsert() can define the location.
</Desc>
    <FName>CollectionModify::arrayInsert</FName>
    <Desc>public mysql_xdevapi\CollectionModify mysql_xdevapi\CollectionModify::arrayInsert ( string $collection_field , string $expression_or_literal )
Add an element to a document's field, as multiple elements of a field are represented as an array. Unlike arrayAppend(), arrayInsert() allows you to specify where the new element is inserted by defining which item it is after, whereas arrayAppend() always appends the new element at the end of the array.
</Desc>
    <FName>CollectionModify::bind</FName>
    <Desc>public mysql_xdevapi\CollectionModify mysql_xdevapi\CollectionModify::bind ( array $placeholder_values )
Bind a parameter to the placeholder in the search condition of the modify operation. 
The placeholder has the form of :NAME where ':' is a common prefix that must always exists before any NAME where NAME is the name of the placeholder. The bind method accepts a list of placeholders if multiple entities have to be substituted in the search condition of the modify operation.
</Desc>
    <FName>CollectionModify::__construct</FName>
    <Desc>private mysql_xdevapi\CollectionModify::__construct ( void )
Modify (update) a collection, and is instantiated by the Collection::modify() method.
</Desc>
    <FName>CollectionModify::execute</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\CollectionModify::execute ( void )
The execute method is required to send the CRUD operation request to the MySQL server.
</Desc>
    <FName>CollectionModify::limit</FName>
    <Desc>public mysql_xdevapi\CollectionModify mysql_xdevapi\CollectionModify::limit ( integer $rows )
Limit the number of documents modified by this operation. Optionally combine with skip() to define an offset value.
</Desc>
    <FName>CollectionModify::patch</FName>
    <Desc>public mysql_xdevapi\CollectionModify mysql_xdevapi\CollectionModify::patch ( string $document )
Takes a patch object and applies it on one or more documents, and can update multiple document properties. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CollectionModify::replace</FName>
    <Desc>public mysql_xdevapi\CollectionModify mysql_xdevapi\CollectionModify::replace ( string $collection_field , string $expression_or_literal )
Replace (update) a given field value with a new one.
</Desc>
    <FName>CollectionModify::set</FName>
    <Desc>public mysql_xdevapi\CollectionModify mysql_xdevapi\CollectionModify::set ( string $collection_field , string $expression_or_literal )
Sets or updates attributes on documents in a collection.
</Desc>
    <FName>CollectionModify::skip</FName>
    <Desc>public mysql_xdevapi\CollectionModify mysql_xdevapi\CollectionModify::skip ( integer $position )
Skip the first N elements that would otherwise be returned by a find operation. If the number of elements skipped is larger than the size of the result set, then the find operation returns an empty set. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CollectionModify::sort</FName>
    <Desc>public mysql_xdevapi\CollectionModify mysql_xdevapi\CollectionModify::sort ( string $sort_expr )
Sort the result set by the field selected in the sort_expr argument. The allowed orders are ASC (Ascending) or DESC (Descending). This operation is equivalent to the 'ORDER BY' SQL operation and it follows the same set of rules. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CollectionModify::unset</FName>
    <Desc>public mysql_xdevapi\CollectionModify mysql_xdevapi\CollectionModify::unset ( array $fields )
Removes attributes from documents in a collection. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CollectionRemove::bind</FName>
    <Desc>public mysql_xdevapi\CollectionRemove mysql_xdevapi\CollectionRemove::bind ( array $placeholder_values )
Bind a parameter to the placeholder in the search condition of the remove operation. 
The placeholder has the form of :NAME where ':' is a common prefix that must always exists before any NAME where NAME is the name of the placeholder. The bind method accepts a list of placeholders if multiple entities have to be substituted in the search condition of the remove operation. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CollectionRemove::__construct</FName>
    <Desc>private mysql_xdevapi\CollectionRemove::__construct ( void )
Remove collection documents, and is instantiated by the Collection::remove() method.
</Desc>
    <FName>CollectionRemove::execute</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\CollectionRemove::execute ( void )
The execute function needs to be invoked in order to trigger the client to send the CRUD operation request to the server. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CollectionRemove::limit</FName>
    <Desc>public mysql_xdevapi\CollectionRemove mysql_xdevapi\CollectionRemove::limit ( integer $rows )
Sets the maximum number of documents to remove. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CollectionRemove::sort</FName>
    <Desc>public mysql_xdevapi\CollectionRemove mysql_xdevapi\CollectionRemove::sort ( string $sort_expr )
Sort the result set by the field selected in the sort_expr argument. The allowed orders are ASC (Ascending) or DESC (Descending). This operation is equivalent to the 'ORDER BY' SQL operation and it follows the same set of rules. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::__construct</FName>
    <Desc>private mysql_xdevapi\ColumnResult::__construct ( void )
Retrieve column metadata, such as its character set; this is instantiated by the RowResult::getColumns() method.
</Desc>
    <FName>ColumnResult::getCharacterSetName</FName>
    <Desc>public string mysql_xdevapi\ColumnResult::getCharacterSetName ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::getCollationName</FName>
    <Desc>public string mysql_xdevapi\ColumnResult::getCollationName ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::getColumnLabel</FName>
    <Desc>public string mysql_xdevapi\ColumnResult::getColumnLabel ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::getColumnName</FName>
    <Desc>public string mysql_xdevapi\ColumnResult::getColumnName ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::getFractionalDigits</FName>
    <Desc>public integer mysql_xdevapi\ColumnResult::getFractionalDigits ( void )
Fetch the number of fractional digits for column. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::getLength</FName>
    <Desc>public integer mysql_xdevapi\ColumnResult::getLength ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::getSchemaName</FName>
    <Desc>public string mysql_xdevapi\ColumnResult::getSchemaName ( void )
Fetch the schema name where the column is stored. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::getTableLabel</FName>
    <Desc>public string mysql_xdevapi\ColumnResult::getTableLabel ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::getTableName</FName>
    <Desc>public string mysql_xdevapi\ColumnResult::getTableName ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::getType</FName>
    <Desc>public integer mysql_xdevapi\ColumnResult::getType ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::isNumberSigned</FName>
    <Desc>public integer mysql_xdevapi\ColumnResult::isNumberSigned ( void )
Retrieve a table's column information, and is instantiated by the RowResult::getColumns() method. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ColumnResult::isPadded</FName>
    <Desc>public integer mysql_xdevapi\ColumnResult::isPadded ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CrudOperationBindable::bind</FName>
    <Desc>abstract public mysql_xdevapi\CrudOperationBindable mysql_xdevapi\CrudOperationBindable::bind ( array $placeholder_values )
Binds a value to a specific placeholder. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CrudOperationLimitable::limit</FName>
    <Desc>abstract public mysql_xdevapi\CrudOperationLimitable mysql_xdevapi\CrudOperationLimitable::limit ( integer $rows )
Sets the maximum number of records or documents to return. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CrudOperationSkippable::skip</FName>
    <Desc>abstract public mysql_xdevapi\CrudOperationSkippable mysql_xdevapi\CrudOperationSkippable::skip ( integer $skip )
Skip this number of records in the returned operation. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>CrudOperationSortable::sort</FName>
    <Desc>abstract public mysql_xdevapi\CrudOperationSortable mysql_xdevapi\CrudOperationSortable::sort ( string $sort_expr )
Sort the result set by the field selected in the sort_expr argument. The allowed orders are ASC (Ascending) or DESC (Descending). This operation is equivalent to the 'ORDER BY' SQL operation and it follows the same set of rules. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>DatabaseObject::existsInDatabase</FName>
    <Desc>abstract public bool mysql_xdevapi\DatabaseObject::existsInDatabase ( void )
Verifies if the database object refers to an object that exists in the database.
</Desc>
    <FName>DatabaseObject::getName</FName>
    <Desc>abstract public string mysql_xdevapi\DatabaseObject::getName ( void )
Fetch name of this database object. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>DatabaseObject::getSession</FName>
    <Desc>abstract public mysql_xdevapi\Session mysql_xdevapi\DatabaseObject::getSession ( void )
Fetch session associated to the database object. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>DocResult::__construct</FName>
    <Desc>private mysql_xdevapi\DocResult::__construct ( void )
Fetch document results and warnings, and is instantiated by CollectionFind.
</Desc>
    <FName>DocResult::fetchAll</FName>
    <Desc>public Array mysql_xdevapi\DocResult::fetchAll ( void )
Fetch all results from a result set.
</Desc>
    <FName>DocResult::fetchOne</FName>
    <Desc>public Object mysql_xdevapi\DocResult::fetchOne ( void )
Fetch one result from a result set.
</Desc>
    <FName>DocResult::getWarnings</FName>
    <Desc>public Array mysql_xdevapi\DocResult::getWarnings ( void )
Fetches warnings generated by MySQL server's last operation.
</Desc>
    <FName>DocResult::getWarningsCount</FName>
    <Desc>public integer mysql_xdevapi\DocResult::getWarningsCount ( void )
Returns the number of warnings raised by the last operation. Specifically, these warnings are raised by the MySQL server.
</Desc>
    <FName>Driver::__construct</FName>
    <Desc>private mysql_xdevapi\Driver::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Executable::execute</FName>
    <Desc>abstract public mysql_xdevapi\Result mysql_xdevapi\Executable::execute ( void )
Execute the statement from either a collection operation or a table query; this functionality allows for method chaining.
</Desc>
    <FName>ExecutionStatus::__construct</FName>
    <Desc>private mysql_xdevapi\ExecutionStatus::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Expression::__construct</FName>
    <Desc>public mysql_xdevapi\Expression::__construct ( string $expression )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>FieldMetadata::__construct</FName>
    <Desc>private mysql_xdevapi\FieldMetadata::__construct ( void )
Provides metadata about a table. A FieldMetadata object is provided by other methods, such as RowResult::getColumns() as demonstrated in the example that follows.
</Desc>
    <FName>Result::__construct</FName>
    <Desc>private mysql_xdevapi\Result::__construct ( void )
An object that retrieves generated IDs, AUTO_INCREMENT values, and warnings, for a Result set.
</Desc>
    <FName>Result::getAutoIncrementValue</FName>
    <Desc>public int mysql_xdevapi\Result::getAutoIncrementValue ( void )
Get the last AUTO_INCREMENT value (last insert id).
</Desc>
    <FName>Result::getGeneratedIds</FName>
    <Desc>public ArrayOfInt mysql_xdevapi\Result::getGeneratedIds ( void )
Fetch the generated _id values from the last operation. The unique _id field is generated by the MySQL server.
</Desc>
    <FName>Result::getWarnings</FName>
    <Desc>public array mysql_xdevapi\Result::getWarnings ( void )
Retrieve warnings from the last Result operation.
</Desc>
    <FName>Result::getWarningsCount</FName>
    <Desc>public integer mysql_xdevapi\Result::getWarningsCount ( void )
Retrieve the number of warnings from the last Result operation.
</Desc>
    <FName>RowResult::__construct</FName>
    <Desc>private mysql_xdevapi\RowResult::__construct ( void )
Represents the result set obtained from querying the database.
</Desc>
    <FName>RowResult::fetchAll</FName>
    <Desc>public array mysql_xdevapi\RowResult::fetchAll ( void )
Fetch all the rows from the result set.
</Desc>
    <FName>RowResult::fetchOne</FName>
    <Desc>public object mysql_xdevapi\RowResult::fetchOne ( void )
Fetch one result from the result set. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RowResult::getColumnCount</FName>
    <Desc>public integer mysql_xdevapi\RowResult::getColumnCount ( void )
Retrieve the column count for columns present in the result set.
</Desc>
    <FName>RowResult::getColumnNames</FName>
    <Desc>public array mysql_xdevapi\RowResult::getColumnNames ( void )
Retrieve column names for columns present in the result set. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RowResult::getColumns</FName>
    <Desc>public array mysql_xdevapi\RowResult::getColumns ( void )
Retrieve column metadata for columns present in the result set. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RowResult::getWarnings</FName>
    <Desc>public array mysql_xdevapi\RowResult::getWarnings ( void )
Retrieve warnings from the last RowResult operation.
</Desc>
    <FName>RowResult::getWarningsCount</FName>
    <Desc>public integer mysql_xdevapi\RowResult::getWarningsCount ( void )
Retrieve the number of warnings from the last RowResult operation.
</Desc>
    <FName>Schema::__construct</FName>
    <Desc>private mysql_xdevapi\Schema::__construct ( void )
The Schema object provides full access to the schema (database).
</Desc>
    <FName>Schema::createCollection</FName>
    <Desc>public mysql_xdevapi\Collection mysql_xdevapi\Schema::createCollection ( string $name )
Create a collection within the schema. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Schema::dropCollection</FName>
    <Desc>public bool mysql_xdevapi\Schema::dropCollection ( string $collection_name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Schema::existsInDatabase</FName>
    <Desc>public bool mysql_xdevapi\Schema::existsInDatabase ( void )
Checks if the current object (schema, table, collection, or view) exists in the schema object. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Schema::getCollection</FName>
    <Desc>public mysql_xdevapi\Collection mysql_xdevapi\Schema::getCollection ( string $name )
Get a collection from the schema.
</Desc>
    <FName>Schema::getCollectionAsTable</FName>
    <Desc>public mysql_xdevapi\Table mysql_xdevapi\Schema::getCollectionAsTable ( string $name )
Get a collection, but as a Table object instead of a Collection object.
</Desc>
    <FName>Schema::getCollections</FName>
    <Desc>public array mysql_xdevapi\Schema::getCollections ( void )
Fetch a list of collections for this schema.
</Desc>
    <FName>Schema::getName</FName>
    <Desc>public string mysql_xdevapi\Schema::getName ( void )
Get the name of the schema.
</Desc>
    <FName>Schema::getSession</FName>
    <Desc>public mysql_xdevapi\Session mysql_xdevapi\Schema::getSession ( void )
Get a new Session object from the Schema object.
</Desc>
    <FName>Schema::getTable</FName>
    <Desc>public mysql_xdevapi\Table mysql_xdevapi\Schema::getTable ( string $name )
Fetch a Table object for the provided table in the schema.
</Desc>
    <FName>Schema::getTables</FName>
    <Desc>public array mysql_xdevapi\Schema::getTables ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SchemaObject::getSchema</FName>
    <Desc>abstract mysql_xdevapi\Schema mysql_xdevapi\SchemaObject::getSchema ( void )
Used by other objects to retrieve a schema object.
</Desc>
    <FName>Session::close</FName>
    <Desc>public bool mysql_xdevapi\Session::close ( void )
Close the session with the server.
</Desc>
    <FName>Session::commit</FName>
    <Desc>public Object mysql_xdevapi\Session::commit ( void )
Commit the transaction.
</Desc>
    <FName>Session::__construct</FName>
    <Desc>private mysql_xdevapi\Session::__construct ( void )
A Session object, as initiated by getSession().
</Desc>
    <FName>Session::createSchema</FName>
    <Desc>public mysql_xdevapi\Schema mysql_xdevapi\Session::createSchema ( string $schema_name )
Creates a new schema.
</Desc>
    <FName>Session::dropSchema</FName>
    <Desc>public bool mysql_xdevapi\Session::dropSchema ( string $schema_name )
Drop a schema (database).
</Desc>
    <FName>Session::executeSql</FName>
    <Desc>public Object mysql_xdevapi\Session::executeSql ( string $statement )
Execute an SQL statement, similar to executing the sql() and execute() methods.
</Desc>
    <FName>Session::generateUUID</FName>
    <Desc>public string mysql_xdevapi\Session::generateUUID ( void )
Generate a Universal Unique IDentifier (UUID) generated according to » RFC 4122.
</Desc>
    <FName>Session::getClientId</FName>
    <Desc>public integer mysql_xdevapi\Session::getClientId ( void )
Get ID of the connected client.
</Desc>
    <FName>Session::getSchema</FName>
    <Desc>public mysql_xdevapi\Schema mysql_xdevapi\Session::getSchema ( string $schema_name )
A new Schema object for the provided schema name.
</Desc>
    <FName>Session::getSchemas</FName>
    <Desc>public array mysql_xdevapi\Session::getSchemas ( void )
Get schema objects for all schemas available to the session.
</Desc>
    <FName>Session::getServerVersion</FName>
    <Desc>public integer mysql_xdevapi\Session::getServerVersion ( void )
Retrieve the MySQL server version for the session.
</Desc>
    <FName>Session::killClient</FName>
    <Desc>public object mysql_xdevapi\Session::killClient ( integer $client_id )
Kill the selected client and terminate the collection 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Session::listClients</FName>
    <Desc>public array mysql_xdevapi\Session::listClients ( void )
Get a list of client connections to the session's MySQL server.
</Desc>
    <FName>Session::quoteName</FName>
    <Desc>public string mysql_xdevapi\Session::quoteName ( string $name )
A quoting function to escape SQL names and identifiers. It escapes the identifier given in accordance to the settings of the current connection. This escape function should not be used to escape values.
</Desc>
    <FName>Session::releaseSavepoint</FName>
    <Desc>public void mysql_xdevapi\Session::releaseSavepoint ( string $name )
Release a previously set savepoint.
</Desc>
    <FName>Session::rollback</FName>
    <Desc>public void mysql_xdevapi\Session::rollback ( void )
Rollback the transaction.
</Desc>
    <FName>Session::rollbackTo</FName>
    <Desc>public void mysql_xdevapi\Session::rollbackTo ( string $name )
Rollback the transaction back to the savepoint.
</Desc>
    <FName>Session::setSavepoint</FName>
    <Desc>public string mysql_xdevapi\Session::setSavepoint ([ string $name ] )
Create a new savepoint for the transaction. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Session::sql</FName>
    <Desc>public mysql_xdevapi\SqlStatement mysql_xdevapi\Session::sql ( string $query )
Create a native SQL statement. Placeholders are supported using the native "?" syntax. Use the execute method to execute the SQL statement.
</Desc>
    <FName>Session::startTransaction</FName>
    <Desc>public void mysql_xdevapi\Session::startTransaction ( void )
Start a new transaction.
</Desc>
    <FName>SqlStatement::bind</FName>
    <Desc>public mysql_xdevapi\SqlStatement mysql_xdevapi\SqlStatement::bind ( string $param )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatement::__construct</FName>
    <Desc>private mysql_xdevapi\SqlStatement::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatement::execute</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\SqlStatement::execute ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatement::getNextResult</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\SqlStatement::getNextResult ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatement::getResult</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\SqlStatement::getResult ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatement::hasMoreResults</FName>
    <Desc>public bool mysql_xdevapi\SqlStatement::hasMoreResults ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::__construct</FName>
    <Desc>private mysql_xdevapi\SqlStatementResult::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::fetchAll</FName>
    <Desc>public array mysql_xdevapi\SqlStatementResult::fetchAll ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::fetchOne</FName>
    <Desc>public object mysql_xdevapi\SqlStatementResult::fetchOne ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::getAffectedItemsCount</FName>
    <Desc>public integer mysql_xdevapi\SqlStatementResult::getAffectedItemsCount ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::getColumnCount</FName>
    <Desc>public integer mysql_xdevapi\SqlStatementResult::getColumnCount ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::getColumnNames</FName>
    <Desc>public array mysql_xdevapi\SqlStatementResult::getColumnNames ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::getColumns</FName>
    <Desc>public Array mysql_xdevapi\SqlStatementResult::getColumns ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::getGeneratedIds</FName>
    <Desc>public array mysql_xdevapi\SqlStatementResult::getGeneratedIds ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::getLastInsertId</FName>
    <Desc>public String mysql_xdevapi\SqlStatementResult::getLastInsertId ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::getWarningsCount</FName>
    <Desc>public integer mysql_xdevapi\SqlStatementResult::getWarningCounts ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::getWarnings</FName>
    <Desc>public array mysql_xdevapi\SqlStatementResult::getWarnings ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::hasData</FName>
    <Desc>public bool mysql_xdevapi\SqlStatementResult::hasData ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SqlStatementResult::nextResult</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\SqlStatementResult::nextResult ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Statement::__construct</FName>
    <Desc>private mysql_xdevapi\Statement::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Statement::getNextResult</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\Statement::getNextResult ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Statement::getResult</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\Statement::getResult ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Statement::hasMoreResults</FName>
    <Desc>public bool mysql_xdevapi\Statement::hasMoreResults ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Table::__construct</FName>
    <Desc>private mysql_xdevapi\Table::__construct ( void )
Construct a table object.
</Desc>
    <FName>Table::count</FName>
    <Desc>public integer mysql_xdevapi\Table::count ( void )
Fetch the number of rows in the table.
</Desc>
    <FName>Table::delete</FName>
    <Desc>public mysql_xdevapi\TableDelete mysql_xdevapi\Table::delete ( void )
Deletes rows from a table.
</Desc>
    <FName>Table::existsInDatabase</FName>
    <Desc>public bool mysql_xdevapi\Table::existsInDatabase ( void )
Verifies if this table exists in the database.
</Desc>
    <FName>Table::getName</FName>
    <Desc>public string mysql_xdevapi\Table::getName ( void )
Returns the name of this database object.
</Desc>
    <FName>Table::getSchema</FName>
    <Desc>public mysql_xdevapi\Schema mysql_xdevapi\Table::getSchema ( void )
Fetch the schema associated with the table.
</Desc>
    <FName>Table::getSession</FName>
    <Desc>public mysql_xdevapi\Session mysql_xdevapi\Table::getSession ( void )
Get session associated with the table.
</Desc>
    <FName>Table::insert</FName>
    <Desc>public mysql_xdevapi\TableInsert mysql_xdevapi\Table::insert ( mixed $columns [, mixed $... ] )
Inserts rows into a table.
</Desc>
    <FName>Table::isView</FName>
    <Desc>public bool mysql_xdevapi\Table::isView ( void )
Determine if the underlying object is a view or not.
</Desc>
    <FName>Table::select</FName>
    <Desc>public mysql_xdevapi\TableSelect mysql_xdevapi\Table::select ( mixed $columns [, mixed $... ] )
Fetches data from a table.
</Desc>
    <FName>Table::update</FName>
    <Desc>public mysql_xdevapi\TableUpdate mysql_xdevapi\Table::update ( void )
Updates columns in a table.
</Desc>
    <FName>TableDelete::bind</FName>
    <Desc>public mysql_xdevapi\TableDelete mysql_xdevapi\TableDelete::bind ( array $placeholder_values )
Binds a value to a specific placeholder.
</Desc>
    <FName>TableDelete::__construct</FName>
    <Desc>private mysql_xdevapi\TableDelete::__construct ( void )
Initiated by using the delete() method.
</Desc>
    <FName>TableDelete::execute</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\TableDelete::execute ( void )
Execute the delete query.
</Desc>
    <FName>TableDelete::limit</FName>
    <Desc>public mysql_xdevapi\TableDelete mysql_xdevapi\TableDelete::limit ( integer $rows )
Sets the maximum number of records or documents to delete.
</Desc>
    <FName>TableDelete::offset</FName>
    <Desc>public mysql_xdevapi\TableDelete mysql_xdevapi\TableDelete::offset ( integer $position )
Sets the limit offset.
</Desc>
    <FName>TableDelete::orderby</FName>
    <Desc>public mysql_xdevapi\TableDelete mysql_xdevapi\TableDelete::orderby ( string $orderby_expr )
Set the order options for a result set.
</Desc>
    <FName>TableDelete::where</FName>
    <Desc>public mysql_xdevapi\TableDelete mysql_xdevapi\TableDelete::where ( string $where_expr )
Sets the search condition to filter.
</Desc>
    <FName>TableInsert::__construct</FName>
    <Desc>private mysql_xdevapi\TableInsert::__construct ( void )
Initiated by using the insert() method.
</Desc>
    <FName>TableInsert::execute</FName>
    <Desc>public mysql_xdevapi\Result mysql_xdevapi\TableInsert::execute ( void )
Execute the statement.
</Desc>
    <FName>TableInsert::values</FName>
    <Desc>public mysql_xdevapi\TableInsert mysql_xdevapi\TableInsert::values ( array $row_values )
Set the values to be inserted.
</Desc>
    <FName>TableSelect::bind</FName>
    <Desc>public mysql_xdevapi\TableSelect mysql_xdevapi\TableSelect::bind ( array $placeholder_values )
Binds a value to a specific placeholder.
</Desc>
    <FName>TableSelect::__construct</FName>
    <Desc>private mysql_xdevapi\TableSelect::__construct ( void )
An object returned by the select() method; use execute() to execute the query.
</Desc>
    <FName>TableSelect::execute</FName>
    <Desc>public mysql_xdevapi\RowResult mysql_xdevapi\TableSelect::execute ( void )
Execute the select statement by chaining it with the execute() method.
</Desc>
    <FName>TableSelect::groupBy</FName>
    <Desc>public mysql_xdevapi\TableSelect mysql_xdevapi\TableSelect::groupBy ( mixed $sort_expr )
Sets a grouping criteria for the result set.
</Desc>
    <FName>TableSelect::having</FName>
    <Desc>public mysql_xdevapi\TableSelect mysql_xdevapi\TableSelect::having ( string $sort_expr )
Sets a condition for records to consider in aggregate function operations.
</Desc>
    <FName>TableSelect::limit</FName>
    <Desc>public mysql_xdevapi\TableSelect mysql_xdevapi\TableSelect::limit ( integer $rows )
Sets the maximum number of records or documents to return.
</Desc>
    <FName>TableSelect::lockExclusive</FName>
    <Desc>public mysql_xdevapi\TableSelect mysql_xdevapi\TableSelect::lockExclusive ([ integer $lock_waiting_option ] )
Execute a read operation with EXCLUSIVE LOCK. Only one lock can be active at a time.
</Desc>
    <FName>TableSelect::lockShared</FName>
    <Desc>public mysql_xdevapi\TableSelect mysql_xdevapi\TableSelect::lockShared ([ integer $lock_waiting_option ] )
Execute a read operation with SHARED LOCK. Only one lock can be active at a time.
</Desc>
    <FName>TableSelect::offset</FName>
    <Desc>public mysql_xdevapi\TableSelect mysql_xdevapi\TableSelect::offset ( integer $position )
Skip given number of rows in result.
</Desc>
    <FName>TableSelect::orderby</FName>
    <Desc>public mysql_xdevapi\TableSelect mysql_xdevapi\TableSelect::orderby ( mixed $sort_expr [, mixed $... ] )
Sets the order by criteria.
</Desc>
    <FName>TableSelect::where</FName>
    <Desc>public mysql_xdevapi\TableSelect mysql_xdevapi\TableSelect::where ( string $where_expr )
Sets the search condition to filter.
</Desc>
    <FName>TableUpdate::bind</FName>
    <Desc>public mysql_xdevapi\TableUpdate mysql_xdevapi\TableUpdate::bind ( array $placeholder_values )
Binds a value to a specific placeholder.
</Desc>
    <FName>TableUpdate::__construct</FName>
    <Desc>private mysql_xdevapi\TableUpdate::__construct ( void )
Initiated by using the update() method.
</Desc>
    <FName>TableUpdate::execute</FName>
    <Desc>public mysql_xdevapi\TableUpdate mysql_xdevapi\TableUpdate::execute ( void )
Executes the update statement.
</Desc>
    <FName>TableUpdate::limit</FName>
    <Desc>public mysql_xdevapi\TableUpdate mysql_xdevapi\TableUpdate::limit ( integer $rows )
Set the maximum number of records or documents update.
</Desc>
    <FName>TableUpdate::orderby</FName>
    <Desc>public mysql_xdevapi\TableUpdate mysql_xdevapi\TableUpdate::orderby ( mixed $orderby_expr [, mixed $... ] )
Sets the sorting criteria.
</Desc>
    <FName>TableUpdate::set</FName>
    <Desc>public mysql_xdevapi\TableUpdate mysql_xdevapi\TableUpdate::set ( string $table_field , string $expression_or_literal )
Updates the column value on records in a table.
</Desc>
    <FName>TableUpdate::where</FName>
    <Desc>public mysql_xdevapi\TableUpdate mysql_xdevapi\TableUpdate::where ( string $where_expr )
Set the search condition to filter.
</Desc>
    <FName>Warning::__construct</FName>
    <Desc>private mysql_xdevapi\Warning::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>XSession::__construct</FName>
    <Desc>private mysql_xdevapi\XSession::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mysqli_driver::embedded_server_end</FName>
    <Desc>Object oriented style
void mysqli_driver::embedded_server_end ( void )
Procedural style
void mysqli_embedded_server_end ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli_embedded_server_end</FName>
    <Desc>Object oriented style
void mysqli_driver::embedded_server_end ( void )
Procedural style
void mysqli_embedded_server_end ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli_driver::embedded_server_start</FName>
    <Desc>Object oriented style
bool mysqli_driver::embedded_server_start ( int $start , array $arguments , array $groups )
Procedural style
bool mysqli_embedded_server_start ( int $start , array $arguments , array $groups )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli_embedded_server_start</FName>
    <Desc>Object oriented style
bool mysqli_driver::embedded_server_start ( int $start , array $arguments , array $groups )
Procedural style
bool mysqli_embedded_server_start ( int $start , array $arguments , array $groups )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli_driver::$report_mode</FName>
    <Desc>Object oriented style
int $mysqli_driver->report_mode ;
Procedural style
bool mysqli_report ( int $flags )
A function helpful in improving queries during code development and testing. Depending on the flags, it reports errors from mysqli function calls or queries that don't use an index (or use a bad index).
</Desc>
    <FName>mysqli_result::$current_field</FName>
    <Desc>Object oriented style
int $mysqli_result->current_field ;
Procedural style
int mysqli_field_tell ( mysqli_result $result )
Returns the position of the field cursor used for the last mysqli_fetch_field() call. This value can be used as an argument to mysqli_field_seek().
</Desc>
    <FName>mysqli_field_tell</FName>
    <Desc>Object oriented style
int $mysqli_result->current_field ;
Procedural style
int mysqli_field_tell ( mysqli_result $result )
Returns the position of the field cursor used for the last mysqli_fetch_field() call. This value can be used as an argument to mysqli_field_seek().
</Desc>
    <FName>mysqli_result::data_seek</FName>
    <Desc>Object oriented style
bool mysqli_result::data_seek ( int $offset )
Procedural style
bool mysqli_data_seek ( mysqli_result $result , int $offset )
The mysqli_data_seek() function seeks to an arbitrary result pointer specified by the offset in the result set.
</Desc>
    <FName>mysqli_data_seek</FName>
    <Desc>Object oriented style
bool mysqli_result::data_seek ( int $offset )
Procedural style
bool mysqli_data_seek ( mysqli_result $result , int $offset )
The mysqli_data_seek() function seeks to an arbitrary result pointer specified by the offset in the result set.
</Desc>
    <FName>mysqli_result::fetch_all</FName>
    <Desc>Object oriented style
mixed mysqli_result::fetch_all ([ int $resulttype = MYSQLI_NUM ] )
Procedural style
mixed mysqli_fetch_all ( mysqli_result $result [, int $resulttype = MYSQLI_NUM ] )
mysqli_fetch_all() fetches all result rows and returns the result set as an associative array, a numeric array, or both.
</Desc>
    <FName>mysqli_fetch_all</FName>
    <Desc>Object oriented style
mixed mysqli_result::fetch_all ([ int $resulttype = MYSQLI_NUM ] )
Procedural style
mixed mysqli_fetch_all ( mysqli_result $result [, int $resulttype = MYSQLI_NUM ] )
mysqli_fetch_all() fetches all result rows and returns the result set as an associative array, a numeric array, or both.
</Desc>
    <FName>mysqli_result::fetch_array</FName>
    <Desc>Object oriented style
mixed mysqli_result::fetch_array ([ int $resulttype = MYSQLI_BOTH ] )
Procedural style
mixed mysqli_fetch_array ( mysqli_result $result [, int $resulttype = MYSQLI_BOTH ] )
Returns an array that corresponds to the fetched row or NULL if there are no more rows for the resultset represented by the result parameter. 
mysqli_fetch_array() is an extended version of the mysqli_fetch_row() function. In addition to storing the data in the numeric indices of the result array, the mysqli_fetch_array() function can also store the data in associative indices, using the field names of the result set as keys. 
Note: Field names returned by this function are case-sensitive.
Note: This function sets NULL fields to the PHP NULL value.
If two or more columns of the result have the same field names, the last column will take precedence and overwrite the earlier data. In order to access multiple columns with the same name, the numerically indexed version of the row must be used.
</Desc>
    <FName>mysqli_fetch_array</FName>
    <Desc>Object oriented style
mixed mysqli_result::fetch_array ([ int $resulttype = MYSQLI_BOTH ] )
Procedural style
mixed mysqli_fetch_array ( mysqli_result $result [, int $resulttype = MYSQLI_BOTH ] )
Returns an array that corresponds to the fetched row or NULL if there are no more rows for the resultset represented by the result parameter. 
mysqli_fetch_array() is an extended version of the mysqli_fetch_row() function. In addition to storing the data in the numeric indices of the result array, the mysqli_fetch_array() function can also store the data in associative indices, using the field names of the result set as keys. 
Note: Field names returned by this function are case-sensitive.
Note: This function sets NULL fields to the PHP NULL value.
If two or more columns of the result have the same field names, the last column will take precedence and overwrite the earlier data. In order to access multiple columns with the same name, the numerically indexed version of the row must be used.
</Desc>
    <FName>mysqli_result::fetch_assoc</FName>
    <Desc>Object oriented style
array mysqli_result::fetch_assoc ( void )
Procedural style
array mysqli_fetch_assoc ( mysqli_result $result )
Returns an associative array that corresponds to the fetched row or NULL if there are no more rows. 
Note: Field names returned by this function are case-sensitive.
Note: This function sets NULL fields to the PHP NULL value.
</Desc>
    <FName>mysqli_fetch_assoc</FName>
    <Desc>Object oriented style
array mysqli_result::fetch_assoc ( void )
Procedural style
array mysqli_fetch_assoc ( mysqli_result $result )
Returns an associative array that corresponds to the fetched row or NULL if there are no more rows. 
Note: Field names returned by this function are case-sensitive.
Note: This function sets NULL fields to the PHP NULL value.
</Desc>
    <FName>mysqli_result::fetch_field_direct</FName>
    <Desc>Object oriented style
object mysqli_result::fetch_field_direct ( int $fieldnr )
Procedural style
object mysqli_fetch_field_direct ( mysqli_result $result , int $fieldnr )
Returns an object which contains field definition information from the specified result set.
</Desc>
    <FName>mysqli_fetch_field_direct</FName>
    <Desc>Object oriented style
object mysqli_result::fetch_field_direct ( int $fieldnr )
Procedural style
object mysqli_fetch_field_direct ( mysqli_result $result , int $fieldnr )
Returns an object which contains field definition information from the specified result set.
</Desc>
    <FName>mysqli_result::fetch_field</FName>
    <Desc>Object oriented style
object mysqli_result::fetch_field ( void )
Procedural style
object mysqli_fetch_field ( mysqli_result $result )
Returns the definition of one column of a result set as an object. Call this function repeatedly to retrieve information about all columns in the result set.
</Desc>
    <FName>mysqli_fetch_field</FName>
    <Desc>Object oriented style
object mysqli_result::fetch_field ( void )
Procedural style
object mysqli_fetch_field ( mysqli_result $result )
Returns the definition of one column of a result set as an object. Call this function repeatedly to retrieve information about all columns in the result set.
</Desc>
    <FName>mysqli_result::fetch_fields</FName>
    <Desc>Object oriented style
array mysqli_result::fetch_fields ( void )
Procedural style
array mysqli_fetch_fields ( mysqli_result $result )
This function serves an identical purpose to the mysqli_fetch_field() function with the single difference that, instead of returning one object at a time for each field, the columns are returned as an array of objects.
</Desc>
    <FName>mysqli_fetch_fields</FName>
    <Desc>Object oriented style
array mysqli_result::fetch_fields ( void )
Procedural style
array mysqli_fetch_fields ( mysqli_result $result )
This function serves an identical purpose to the mysqli_fetch_field() function with the single difference that, instead of returning one object at a time for each field, the columns are returned as an array of objects.
</Desc>
    <FName>mysqli_result::fetch_object</FName>
    <Desc>Object oriented style
object mysqli_result::fetch_object ([ string $class_name = "stdClass" [, array $params ]] )
Procedural style
object mysqli_fetch_object ( mysqli_result $result [, string $class_name = "stdClass" [, array $params ]] )
The mysqli_fetch_object() will return the current row result set as an object where the attributes of the object represent the names of the fields found within the result set. 
Note that mysqli_fetch_object() sets the properties of the object before calling the object constructor.
</Desc>
    <FName>mysqli_fetch_object</FName>
    <Desc>Object oriented style
object mysqli_result::fetch_object ([ string $class_name = "stdClass" [, array $params ]] )
Procedural style
object mysqli_fetch_object ( mysqli_result $result [, string $class_name = "stdClass" [, array $params ]] )
The mysqli_fetch_object() will return the current row result set as an object where the attributes of the object represent the names of the fields found within the result set. 
Note that mysqli_fetch_object() sets the properties of the object before calling the object constructor.
</Desc>
    <FName>mysqli_result::fetch_row</FName>
    <Desc>Object oriented style
mixed mysqli_result::fetch_row ( void )
Procedural style
mixed mysqli_fetch_row ( mysqli_result $result )
Fetches one row of data from the result set and returns it as an enumerated array, where each column is stored in an array offset starting from 0 (zero). Each subsequent call to this function will return the next row within the result set, or NULL if there are no more rows.
</Desc>
    <FName>mysqli_fetch_row</FName>
    <Desc>Object oriented style
mixed mysqli_result::fetch_row ( void )
Procedural style
mixed mysqli_fetch_row ( mysqli_result $result )
Fetches one row of data from the result set and returns it as an enumerated array, where each column is stored in an array offset starting from 0 (zero). Each subsequent call to this function will return the next row within the result set, or NULL if there are no more rows.
</Desc>
    <FName>mysqli_result::$field_count</FName>
    <Desc>Object oriented style
int $mysqli_result->field_count;
Procedural style
int mysqli_num_fields ( mysqli_result $result )
Returns the number of fields from specified result set.
</Desc>
    <FName>mysqli_num_fields</FName>
    <Desc>Object oriented style
int $mysqli_result->field_count;
Procedural style
int mysqli_num_fields ( mysqli_result $result )
Returns the number of fields from specified result set.
</Desc>
    <FName>mysqli_result::field_seek</FName>
    <Desc>Object oriented style
bool mysqli_result::field_seek ( int $fieldnr )
Procedural style
bool mysqli_field_seek ( mysqli_result $result , int $fieldnr )
Sets the field cursor to the given offset. The next call to mysqli_fetch_field() will retrieve the field definition of the column associated with that offset. 
Note: 
To seek to the beginning of a row, pass an offset value of zero.
</Desc>
    <FName>mysqli_field_seek</FName>
    <Desc>Object oriented style
bool mysqli_result::field_seek ( int $fieldnr )
Procedural style
bool mysqli_field_seek ( mysqli_result $result , int $fieldnr )
Sets the field cursor to the given offset. The next call to mysqli_fetch_field() will retrieve the field definition of the column associated with that offset. 
Note: 
To seek to the beginning of a row, pass an offset value of zero.
</Desc>
    <FName>mysqli_result::free</FName>
    <Desc>Object oriented style
void mysqli_result::free ( void )
void mysqli_result::close ( void )
void mysqli_result::free_result ( void )
Procedural style
void mysqli_free_result ( mysqli_result $result )
Frees the memory associated with the result. 
Note: 
You should always free your result with mysqli_free_result(), when your result object is not needed anymore.
</Desc>
    <FName>mysqli_result::close</FName>
    <Desc>Object oriented style
void mysqli_result::free ( void )
void mysqli_result::close ( void )
void mysqli_result::free_result ( void )
Procedural style
void mysqli_free_result ( mysqli_result $result )
Frees the memory associated with the result. 
Note: 
You should always free your result with mysqli_free_result(), when your result object is not needed anymore.
</Desc>
    <FName>mysqli_result::$lengths</FName>
    <Desc>Object oriented style
array $mysqli_result->lengths;
Procedural style
array mysqli_fetch_lengths ( mysqli_result $result )
The mysqli_fetch_lengths() function returns an array containing the lengths of every column of the current row within the result set.
</Desc>
    <FName>mysqli_fetch_lengths</FName>
    <Desc>Object oriented style
array $mysqli_result->lengths;
Procedural style
array mysqli_fetch_lengths ( mysqli_result $result )
The mysqli_fetch_lengths() function returns an array containing the lengths of every column of the current row within the result set.
</Desc>
    <FName>mysqli_result::$num_rows</FName>
    <Desc>Object oriented style
int $mysqli_result->num_rows;
Procedural style
int mysqli_num_rows ( mysqli_result $result )
Returns the number of rows in the result set. 
The behaviour of mysqli_num_rows() depends on whether buffered or unbuffered result sets are being used. For unbuffered result sets, mysqli_num_rows() will not return the correct number of rows until all the rows in the result have been retrieved.
</Desc>
    <FName>mysqli_num_rows</FName>
    <Desc>Object oriented style
int $mysqli_result->num_rows;
Procedural style
int mysqli_num_rows ( mysqli_result $result )
Returns the number of rows in the result set. 
The behaviour of mysqli_num_rows() depends on whether buffered or unbuffered result sets are being used. For unbuffered result sets, mysqli_num_rows() will not return the correct number of rows until all the rows in the result have been retrieved.
</Desc>
    <FName>mysqli_stmt::$affected_rows</FName>
    <Desc>Object oriented style
int $mysqli_stmt->affected_rows;
Procedural style
int mysqli_stmt_affected_rows ( mysqli_stmt $stmt )
Returns the number of rows affected by INSERT, UPDATE, or DELETE query. 
This function only works with queries which update a table. In order to get the number of rows from a SELECT query, use mysqli_stmt_num_rows() instead.
</Desc>
    <FName>mysqli_stmt_affected_rows</FName>
    <Desc>Object oriented style
int $mysqli_stmt->affected_rows;
Procedural style
int mysqli_stmt_affected_rows ( mysqli_stmt $stmt )
Returns the number of rows affected by INSERT, UPDATE, or DELETE query. 
This function only works with queries which update a table. In order to get the number of rows from a SELECT query, use mysqli_stmt_num_rows() instead.
</Desc>
    <FName>mysqli_stmt::attr_get</FName>
    <Desc>Object oriented style
int mysqli_stmt::attr_get ( int $attr )
Procedural style
int mysqli_stmt_attr_get ( mysqli_stmt $stmt , int $attr )
Gets the current value of a statement attribute.
</Desc>
    <FName>mysqli_stmt_attr_get</FName>
    <Desc>Object oriented style
int mysqli_stmt::attr_get ( int $attr )
Procedural style
int mysqli_stmt_attr_get ( mysqli_stmt $stmt , int $attr )
Gets the current value of a statement attribute.
</Desc>
    <FName>mysqli_stmt::attr_set</FName>
    <Desc>Object oriented style
bool mysqli_stmt::attr_set ( int $attr , int $mode )
Procedural style
bool mysqli_stmt_attr_set ( mysqli_stmt $stmt , int $attr , int $mode )
Used to modify the behavior of a prepared statement. This function may be called multiple times to set several attributes.
</Desc>
    <FName>mysqli_stmt_attr_set</FName>
    <Desc>Object oriented style
bool mysqli_stmt::attr_set ( int $attr , int $mode )
Procedural style
bool mysqli_stmt_attr_set ( mysqli_stmt $stmt , int $attr , int $mode )
Used to modify the behavior of a prepared statement. This function may be called multiple times to set several attributes.
</Desc>
    <FName>mysqli_stmt::bind_param</FName>
    <Desc>Object oriented style
bool mysqli_stmt::bind_param ( string $types , mixed &$var1 [, mixed &$... ] )
Procedural style
bool mysqli_stmt_bind_param ( mysqli_stmt $stmt , string $types , mixed &$var1 [, mixed &$... ] )
Bind variables for the parameter markers in the SQL statement that was passed to mysqli_prepare(). 
Note: 
If data size of a variable exceeds max. allowed packet size (max_allowed_packet), you have to specify b in types and use mysqli_stmt_send_long_data() to send the data in packets. 
Note: 
Care must be taken when using mysqli_stmt_bind_param() in conjunction with call_user_func_array(). Note that mysqli_stmt_bind_param() requires parameters to be passed by reference, whereas call_user_func_array() can accept as a parameter a list of variables that can represent references or values.
</Desc>
    <FName>mysqli_stmt_bind_param</FName>
    <Desc>Object oriented style
bool mysqli_stmt::bind_param ( string $types , mixed &$var1 [, mixed &$... ] )
Procedural style
bool mysqli_stmt_bind_param ( mysqli_stmt $stmt , string $types , mixed &$var1 [, mixed &$... ] )
Bind variables for the parameter markers in the SQL statement that was passed to mysqli_prepare(). 
Note: 
If data size of a variable exceeds max. allowed packet size (max_allowed_packet), you have to specify b in types and use mysqli_stmt_send_long_data() to send the data in packets. 
Note: 
Care must be taken when using mysqli_stmt_bind_param() in conjunction with call_user_func_array(). Note that mysqli_stmt_bind_param() requires parameters to be passed by reference, whereas call_user_func_array() can accept as a parameter a list of variables that can represent references or values.
</Desc>
    <FName>mysqli_stmt::bind_result</FName>
    <Desc>Object oriented style
bool mysqli_stmt::bind_result ( mixed &$var1 [, mixed &$... ] )
Procedural style
bool mysqli_stmt_bind_result ( mysqli_stmt $stmt , mixed &$var1 [, mixed &$... ] )
Binds columns in the result set to variables. 
When mysqli_stmt_fetch() is called to fetch data, the MySQL client/server protocol places the data for the bound columns into the specified variables var1, .... 
Note: 
Note that all columns must be bound after mysqli_stmt_execute() and prior to calling mysqli_stmt_fetch(). Depending on column types bound variables can silently change to the corresponding PHP type. 
A column can be bound or rebound at any time, even after a result set has been partially retrieved. The new binding takes effect the next time mysqli_stmt_fetch() is called.
</Desc>
    <FName>mysqli_stmt_bind_result</FName>
    <Desc>Object oriented style
bool mysqli_stmt::bind_result ( mixed &$var1 [, mixed &$... ] )
Procedural style
bool mysqli_stmt_bind_result ( mysqli_stmt $stmt , mixed &$var1 [, mixed &$... ] )
Binds columns in the result set to variables. 
When mysqli_stmt_fetch() is called to fetch data, the MySQL client/server protocol places the data for the bound columns into the specified variables var1, .... 
Note: 
Note that all columns must be bound after mysqli_stmt_execute() and prior to calling mysqli_stmt_fetch(). Depending on column types bound variables can silently change to the corresponding PHP type. 
A column can be bound or rebound at any time, even after a result set has been partially retrieved. The new binding takes effect the next time mysqli_stmt_fetch() is called.
</Desc>
    <FName>mysqli_stmt::close</FName>
    <Desc>Object oriented style
bool mysqli_stmt::close ( void )
Procedural style
bool mysqli_stmt_close ( mysqli_stmt $stmt )
Closes a prepared statement. mysqli_stmt_close() also deallocates the statement handle. If the current statement has pending or unread results, this function cancels them so that the next query can be executed.
</Desc>
    <FName>mysqli_stmt_close</FName>
    <Desc>Object oriented style
bool mysqli_stmt::close ( void )
Procedural style
bool mysqli_stmt_close ( mysqli_stmt $stmt )
Closes a prepared statement. mysqli_stmt_close() also deallocates the statement handle. If the current statement has pending or unread results, this function cancels them so that the next query can be executed.
</Desc>
    <FName>mysqli_stmt::__construct</FName>
    <Desc>mysqli_stmt::__construct ( mysqli $link [, string $query ] )
This method constructs a new mysqli_stmt object. 
Note: 
In general, you should use either mysqli_prepare() or mysqli_stmt_init() to create a mysqli_stmt object, rather than directly instantiating the object with new mysqli_stmt. This method (and the ability to directly instantiate mysqli_stmt objects) may be deprecated and removed in the future.
</Desc>
    <FName>mysqli_stmt::data_seek</FName>
    <Desc>Object oriented style
void mysqli_stmt::data_seek ( int $offset )
Procedural style
void mysqli_stmt_data_seek ( mysqli_stmt $stmt , int $offset )
Seeks to an arbitrary result pointer in the statement result set. 
mysqli_stmt_store_result() must be called prior to mysqli_stmt_data_seek().
</Desc>
    <FName>mysqli_stmt_data_seek</FName>
    <Desc>Object oriented style
void mysqli_stmt::data_seek ( int $offset )
Procedural style
void mysqli_stmt_data_seek ( mysqli_stmt $stmt , int $offset )
Seeks to an arbitrary result pointer in the statement result set. 
mysqli_stmt_store_result() must be called prior to mysqli_stmt_data_seek().
</Desc>
    <FName>mysqli_stmt::$errno</FName>
    <Desc>Object oriented style
int $mysqli_stmt->errno;
Procedural style
int mysqli_stmt_errno ( mysqli_stmt $stmt )
Returns the error code for the most recently invoked statement function that can succeed or fail. 
Client error message numbers are listed in the MySQL errmsg.h header file, server error message numbers are listed in mysqld_error.h. In the MySQL source distribution you can find a complete list of error messages and error numbers in the file Docs/mysqld_error.txt.
</Desc>
    <FName>mysqli_stmt_errno</FName>
    <Desc>Object oriented style
int $mysqli_stmt->errno;
Procedural style
int mysqli_stmt_errno ( mysqli_stmt $stmt )
Returns the error code for the most recently invoked statement function that can succeed or fail. 
Client error message numbers are listed in the MySQL errmsg.h header file, server error message numbers are listed in mysqld_error.h. In the MySQL source distribution you can find a complete list of error messages and error numbers in the file Docs/mysqld_error.txt.
</Desc>
    <FName>mysqli_stmt::$error_list</FName>
    <Desc>Object oriented style
array $mysqli_stmt->error_list;
Procedural style
array mysqli_stmt_error_list ( mysqli_stmt $stmt )
Returns an array of errors for the most recently invoked statement function that can succeed or fail.
</Desc>
    <FName>mysqli_stmt_error_list</FName>
    <Desc>Object oriented style
array $mysqli_stmt->error_list;
Procedural style
array mysqli_stmt_error_list ( mysqli_stmt $stmt )
Returns an array of errors for the most recently invoked statement function that can succeed or fail.
</Desc>
    <FName>mysqli_stmt::$error</FName>
    <Desc>Object oriented style
string $mysqli_stmt->error;
Procedural style
string mysqli_stmt_error ( mysqli_stmt $stmt )
Returns a string containing the error message for the most recently invoked statement function that can succeed or fail.
</Desc>
    <FName>mysqli_stmt_error</FName>
    <Desc>Object oriented style
string $mysqli_stmt->error;
Procedural style
string mysqli_stmt_error ( mysqli_stmt $stmt )
Returns a string containing the error message for the most recently invoked statement function that can succeed or fail.
</Desc>
    <FName>mysqli_stmt::execute</FName>
    <Desc>Object oriented style
bool mysqli_stmt::execute ( void )
Procedural style
bool mysqli_stmt_execute ( mysqli_stmt $stmt )
Executes a query that has been previously prepared using the mysqli_prepare() function. When executed any parameter markers which exist will automatically be replaced with the appropriate data. 
If the statement is UPDATE, DELETE, or INSERT, the total number of affected rows can be determined by using the mysqli_stmt_affected_rows() function. Likewise, if the query yields a result set the mysqli_stmt_fetch() function is used. 
Note: 
When using mysqli_stmt_execute(), the mysqli_stmt_fetch() function must be used to fetch the data prior to performing any additional queries.
</Desc>
    <FName>mysqli_stmt_execute</FName>
    <Desc>Object oriented style
bool mysqli_stmt::execute ( void )
Procedural style
bool mysqli_stmt_execute ( mysqli_stmt $stmt )
Executes a query that has been previously prepared using the mysqli_prepare() function. When executed any parameter markers which exist will automatically be replaced with the appropriate data. 
If the statement is UPDATE, DELETE, or INSERT, the total number of affected rows can be determined by using the mysqli_stmt_affected_rows() function. Likewise, if the query yields a result set the mysqli_stmt_fetch() function is used. 
Note: 
When using mysqli_stmt_execute(), the mysqli_stmt_fetch() function must be used to fetch the data prior to performing any additional queries.
</Desc>
    <FName>mysqli_stmt::fetch</FName>
    <Desc>Object oriented style
bool mysqli_stmt::fetch ( void )
Procedural style
bool mysqli_stmt_fetch ( mysqli_stmt $stmt )
Fetch the result from a prepared statement into the variables bound by mysqli_stmt_bind_result(). 
Note: 
Note that all columns must be bound by the application before calling mysqli_stmt_fetch(). 
Note: 
Data are transferred unbuffered without calling mysqli_stmt_store_result() which can decrease performance (but reduces memory cost).
</Desc>
    <FName>mysqli_stmt_fetch</FName>
    <Desc>Object oriented style
bool mysqli_stmt::fetch ( void )
Procedural style
bool mysqli_stmt_fetch ( mysqli_stmt $stmt )
Fetch the result from a prepared statement into the variables bound by mysqli_stmt_bind_result(). 
Note: 
Note that all columns must be bound by the application before calling mysqli_stmt_fetch(). 
Note: 
Data are transferred unbuffered without calling mysqli_stmt_store_result() which can decrease performance (but reduces memory cost).
</Desc>
    <FName>mysqli_stmt::$field_count</FName>
    <Desc>Object oriented style
int $mysqli_stmt->field_count;
Procedural style
int mysqli_stmt_field_count ( mysqli_stmt $stmt )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli_stmt_field_count</FName>
    <Desc>Object oriented style
int $mysqli_stmt->field_count;
Procedural style
int mysqli_stmt_field_count ( mysqli_stmt $stmt )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli_stmt::free_result</FName>
    <Desc>Object oriented style
void mysqli_stmt::free_result ( void )
Procedural style
void mysqli_stmt_free_result ( mysqli_stmt $stmt )
Frees the result memory associated with the statement, which was allocated by mysqli_stmt_store_result().
</Desc>
    <FName>mysqli_stmt_free_result</FName>
    <Desc>Object oriented style
void mysqli_stmt::free_result ( void )
Procedural style
void mysqli_stmt_free_result ( mysqli_stmt $stmt )
Frees the result memory associated with the statement, which was allocated by mysqli_stmt_store_result().
</Desc>
    <FName>mysqli_stmt::get_result</FName>
    <Desc>Object oriented style
mysqli_result mysqli_stmt::get_result ( void )
Procedural style
mysqli_result mysqli_stmt_get_result ( mysqli_stmt $stmt )
Call to return a result set from a prepared statement query.
</Desc>
    <FName>mysqli_stmt_get_result</FName>
    <Desc>Object oriented style
mysqli_result mysqli_stmt::get_result ( void )
Procedural style
mysqli_result mysqli_stmt_get_result ( mysqli_stmt $stmt )
Call to return a result set from a prepared statement query.
</Desc>
    <FName>mysqli_stmt::get_warnings</FName>
    <Desc>Object oriented style
object mysqli_stmt::get_warnings ( mysqli_stmt $stmt )
Procedural style
object mysqli_stmt_get_warnings ( mysqli_stmt $stmt )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli_stmt_get_warnings</FName>
    <Desc>Object oriented style
object mysqli_stmt::get_warnings ( mysqli_stmt $stmt )
Procedural style
object mysqli_stmt_get_warnings ( mysqli_stmt $stmt )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli_stmt::$insert_id</FName>
    <Desc>Object oriented style
int $mysqli_stmt->insert_id;
Procedural style
mixed mysqli_stmt_insert_id ( mysqli_stmt $stmt )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli_stmt_insert_id</FName>
    <Desc>Object oriented style
int $mysqli_stmt->insert_id;
Procedural style
mixed mysqli_stmt_insert_id ( mysqli_stmt $stmt )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli_stmt::more_results</FName>
    <Desc>Object oriented style (method):
public bool mysqli_stmt::more_results ( void )
Procedural style:
bool mysqli_stmt_more_results ( mysql_stmt $stmt )
Checks if there are more query results from a multiple query.
</Desc>
    <FName>mysqli_stmt_more_results</FName>
    <Desc>Object oriented style (method):
public bool mysqli_stmt::more_results ( void )
Procedural style:
bool mysqli_stmt_more_results ( mysql_stmt $stmt )
Checks if there are more query results from a multiple query.
</Desc>
    <FName>mysqli_stmt::next_result</FName>
    <Desc>Object oriented style (method):
public bool mysqli_stmt::next_result ( void )
Procedural style:
bool mysqli_stmt_next_result ( mysql_stmt $stmt )
Reads the next result from a multiple query.
</Desc>
    <FName>mysqli_stmt_next_result</FName>
    <Desc>Object oriented style (method):
public bool mysqli_stmt::next_result ( void )
Procedural style:
bool mysqli_stmt_next_result ( mysql_stmt $stmt )
Reads the next result from a multiple query.
</Desc>
    <FName>mysqli_stmt::$num_rows</FName>
    <Desc>Object oriented style
int $mysqli_stmt->num_rows;
int mysqli_stmt::num_rows ( void )
Procedural style
int mysqli_stmt_num_rows ( mysqli_stmt $stmt )
Returns the number of rows in the result set. The use of mysqli_stmt_num_rows() depends on whether or not you used mysqli_stmt_store_result() to buffer the entire result set in the statement handle. 
If you use mysqli_stmt_store_result(), mysqli_stmt_num_rows() may be called immediately.
</Desc>
    <FName>mysqli_stmt::num_rows</FName>
    <Desc>Object oriented style
int $mysqli_stmt->num_rows;
int mysqli_stmt::num_rows ( void )
Procedural style
int mysqli_stmt_num_rows ( mysqli_stmt $stmt )
Returns the number of rows in the result set. The use of mysqli_stmt_num_rows() depends on whether or not you used mysqli_stmt_store_result() to buffer the entire result set in the statement handle. 
If you use mysqli_stmt_store_result(), mysqli_stmt_num_rows() may be called immediately.
</Desc>
    <FName>mysqli_stmt::$param_count</FName>
    <Desc>Object oriented style
int $mysqli_stmt->param_count;
Procedural style
int mysqli_stmt_param_count ( mysqli_stmt $stmt )
Returns the number of parameter markers present in the prepared statement.
</Desc>
    <FName>mysqli_stmt_param_count</FName>
    <Desc>Object oriented style
int $mysqli_stmt->param_count;
Procedural style
int mysqli_stmt_param_count ( mysqli_stmt $stmt )
Returns the number of parameter markers present in the prepared statement.
</Desc>
    <FName>mysqli_stmt::prepare</FName>
    <Desc>Object oriented style
mixed mysqli_stmt::prepare ( string $query )
Procedural style
bool mysqli_stmt_prepare ( mysqli_stmt $stmt , string $query )
Prepares the SQL query pointed to by the null-terminated string query. 
The parameter markers must be bound to application variables using mysqli_stmt_bind_param() and/or mysqli_stmt_bind_result() before executing the statement or fetching rows. 
Note: 
In the case where you pass a statement to mysqli_stmt_prepare() that is longer than max_allowed_packet of the server, the returned error codes are different depending on whether you are using MySQL Native Driver (mysqlnd) or MySQL Client Library (libmysqlclient). The behavior is as follows: 
mysqlnd on Linux returns an error code of 1153. The error message means "got a packet bigger than max_allowed_packet bytes". 
mysqlnd on Windows returns an error code 2006. This error message means "server has gone away". 
libmysqlclient on all platforms returns an error code 2006. This error message means "server has gone away".
</Desc>
    <FName>mysqli_stmt_prepare</FName>
    <Desc>Object oriented style
mixed mysqli_stmt::prepare ( string $query )
Procedural style
bool mysqli_stmt_prepare ( mysqli_stmt $stmt , string $query )
Prepares the SQL query pointed to by the null-terminated string query. 
The parameter markers must be bound to application variables using mysqli_stmt_bind_param() and/or mysqli_stmt_bind_result() before executing the statement or fetching rows. 
Note: 
In the case where you pass a statement to mysqli_stmt_prepare() that is longer than max_allowed_packet of the server, the returned error codes are different depending on whether you are using MySQL Native Driver (mysqlnd) or MySQL Client Library (libmysqlclient). The behavior is as follows: 
mysqlnd on Linux returns an error code of 1153. The error message means "got a packet bigger than max_allowed_packet bytes". 
mysqlnd on Windows returns an error code 2006. This error message means "server has gone away". 
libmysqlclient on all platforms returns an error code 2006. This error message means "server has gone away".
</Desc>
    <FName>mysqli_stmt::reset</FName>
    <Desc>Object oriented style
bool mysqli_stmt::reset ( void )
Procedural style
bool mysqli_stmt_reset ( mysqli_stmt $stmt )
Resets a prepared statement on client and server to state after prepare. 
It resets the statement on the server, data sent using mysqli_stmt_send_long_data(), unbuffered result sets and current errors. It does not clear bindings or stored result sets. Stored result sets will be cleared when executing the prepared statement (or closing it). 
To prepare a statement with another query use function mysqli_stmt_prepare().
</Desc>
    <FName>mysqli_stmt_reset</FName>
    <Desc>Object oriented style
bool mysqli_stmt::reset ( void )
Procedural style
bool mysqli_stmt_reset ( mysqli_stmt $stmt )
Resets a prepared statement on client and server to state after prepare. 
It resets the statement on the server, data sent using mysqli_stmt_send_long_data(), unbuffered result sets and current errors. It does not clear bindings or stored result sets. Stored result sets will be cleared when executing the prepared statement (or closing it). 
To prepare a statement with another query use function mysqli_stmt_prepare().
</Desc>
    <FName>mysqli_stmt::result_metadata</FName>
    <Desc>Object oriented style
mysqli_result mysqli_stmt::result_metadata ( void )
Procedural style
mysqli_result mysqli_stmt_result_metadata ( mysqli_stmt $stmt )
If a statement passed to mysqli_prepare() is one that produces a result set, mysqli_stmt_result_metadata() returns the result object that can be used to process the meta information such as total number of fields and individual field information. 
Note: 
This result set pointer can be passed as an argument to any of the field-based functions that process result set metadata, such as: 
mysqli_num_fields()
mysqli_fetch_field()
mysqli_fetch_field_direct()
mysqli_fetch_fields()
mysqli_field_count()
mysqli_field_seek()
mysqli_field_tell()
mysqli_free_result()
The result set structure should be freed when you are done with it, which you can do by passing it to mysqli_free_result() 
Note: 
The result set returned by mysqli_stmt_result_metadata() contains only metadata. It does not contain any row results. The rows are obtained by using the statement handle with mysqli_stmt_fetch().
</Desc>
    <FName>mysqli_stmt_result_metadata</FName>
    <Desc>Object oriented style
mysqli_result mysqli_stmt::result_metadata ( void )
Procedural style
mysqli_result mysqli_stmt_result_metadata ( mysqli_stmt $stmt )
If a statement passed to mysqli_prepare() is one that produces a result set, mysqli_stmt_result_metadata() returns the result object that can be used to process the meta information such as total number of fields and individual field information. 
Note: 
This result set pointer can be passed as an argument to any of the field-based functions that process result set metadata, such as: 
mysqli_num_fields()
mysqli_fetch_field()
mysqli_fetch_field_direct()
mysqli_fetch_fields()
mysqli_field_count()
mysqli_field_seek()
mysqli_field_tell()
mysqli_free_result()
The result set structure should be freed when you are done with it, which you can do by passing it to mysqli_free_result() 
Note: 
The result set returned by mysqli_stmt_result_metadata() contains only metadata. It does not contain any row results. The rows are obtained by using the statement handle with mysqli_stmt_fetch().
</Desc>
    <FName>mysqli_stmt::send_long_data</FName>
    <Desc>Object oriented style
bool mysqli_stmt::send_long_data ( int $param_nr , string $data )
Procedural style
bool mysqli_stmt_send_long_data ( mysqli_stmt $stmt , int $param_nr , string $data )
Allows to send parameter data to the server in pieces (or chunks), e.g. if the size of a blob exceeds the size of max_allowed_packet. This function can be called multiple times to send the parts of a character or binary data value for a column, which must be one of the TEXT or BLOB datatypes.
</Desc>
    <FName>mysqli_stmt_send_long_data</FName>
    <Desc>Object oriented style
bool mysqli_stmt::send_long_data ( int $param_nr , string $data )
Procedural style
bool mysqli_stmt_send_long_data ( mysqli_stmt $stmt , int $param_nr , string $data )
Allows to send parameter data to the server in pieces (or chunks), e.g. if the size of a blob exceeds the size of max_allowed_packet. This function can be called multiple times to send the parts of a character or binary data value for a column, which must be one of the TEXT or BLOB datatypes.
</Desc>
    <FName>mysqli_stmt::$sqlstate</FName>
    <Desc>Object oriented style
string $mysqli_stmt->sqlstate;
Procedural style
string mysqli_stmt_sqlstate ( mysqli_stmt $stmt )
Returns a string containing the SQLSTATE error code for the most recently invoked prepared statement function that can succeed or fail. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see » http://dev.mysql.com/doc/mysql/en/error-handling.html.
</Desc>
    <FName>mysqli_stmt_sqlstate</FName>
    <Desc>Object oriented style
string $mysqli_stmt->sqlstate;
Procedural style
string mysqli_stmt_sqlstate ( mysqli_stmt $stmt )
Returns a string containing the SQLSTATE error code for the most recently invoked prepared statement function that can succeed or fail. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see » http://dev.mysql.com/doc/mysql/en/error-handling.html.
</Desc>
    <FName>mysqli_stmt::store_result</FName>
    <Desc>Object oriented style
bool mysqli_stmt::store_result ( void )
Procedural style
bool mysqli_stmt_store_result ( mysqli_stmt $stmt )
You must call mysqli_stmt_store_result() for every query that successfully produces a result set (SELECT, SHOW, DESCRIBE, EXPLAIN), if and only if you want to buffer the complete result set by the client, so that the subsequent mysqli_stmt_fetch() call returns buffered data. 
Note: 
It is unnecessary to call mysqli_stmt_store_result() for other queries, but if you do, it will not harm or cause any notable performance loss in all cases. You can detect whether the query produced a result set by checking if mysqli_stmt_result_metadata() returns NULL.
</Desc>
    <FName>mysqli_stmt_store_result</FName>
    <Desc>Object oriented style
bool mysqli_stmt::store_result ( void )
Procedural style
bool mysqli_stmt_store_result ( mysqli_stmt $stmt )
You must call mysqli_stmt_store_result() for every query that successfully produces a result set (SELECT, SHOW, DESCRIBE, EXPLAIN), if and only if you want to buffer the complete result set by the client, so that the subsequent mysqli_stmt_fetch() call returns buffered data. 
Note: 
It is unnecessary to call mysqli_stmt_store_result() for other queries, but if you do, it will not harm or cause any notable performance loss in all cases. You can detect whether the query produced a result set by checking if mysqli_stmt_result_metadata() returns NULL.
</Desc>
    <FName>mysqli_warning::__construct</FName>
    <Desc>protected mysqli_warning::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mysqli_warning::next</FName>
    <Desc>public void mysqli_warning::next ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mysqli::$affected_rows</FName>
    <Desc>Object oriented style
int $mysqli->affected_rows;
Procedural style
int mysqli_affected_rows ( mysqli $link )
Returns the number of rows affected by the last INSERT, UPDATE, REPLACE or DELETE query. 
For SELECT statements mysqli_affected_rows() works like mysqli_num_rows().
</Desc>
    <FName>mysqli_affected_rows</FName>
    <Desc>Object oriented style
int $mysqli->affected_rows;
Procedural style
int mysqli_affected_rows ( mysqli $link )
Returns the number of rows affected by the last INSERT, UPDATE, REPLACE or DELETE query. 
For SELECT statements mysqli_affected_rows() works like mysqli_num_rows().
</Desc>
    <FName>mysqli::autocommit</FName>
    <Desc>Object oriented style
bool mysqli::autocommit ( bool $mode )
Procedural style
bool mysqli_autocommit ( mysqli $link , bool $mode )
Turns on or off auto-commit mode on queries for the database connection. 
To determine the current state of autocommit use the SQL command SELECT @@autocommit.
</Desc>
    <FName>mysqli_autocommit</FName>
    <Desc>Object oriented style
bool mysqli::autocommit ( bool $mode )
Procedural style
bool mysqli_autocommit ( mysqli $link , bool $mode )
Turns on or off auto-commit mode on queries for the database connection. 
To determine the current state of autocommit use the SQL command SELECT @@autocommit.
</Desc>
    <FName>mysqli::begin_transaction</FName>
    <Desc>Object oriented style (method):
public bool mysqli::begin_transaction ([ int $flags [, string $name ]] )
Procedural style:
bool mysqli_begin_transaction ( mysqli $link [, int $flags [, string $name ]] )
Begins a transaction. Requires the InnoDB engine (it is enabled by default). For additional details about how MySQL transactions work, see » http://dev.mysql.com/doc/mysql/en/commit.html.
</Desc>
    <FName>mysqli_begin_transaction</FName>
    <Desc>Object oriented style (method):
public bool mysqli::begin_transaction ([ int $flags [, string $name ]] )
Procedural style:
bool mysqli_begin_transaction ( mysqli $link [, int $flags [, string $name ]] )
Begins a transaction. Requires the InnoDB engine (it is enabled by default). For additional details about how MySQL transactions work, see » http://dev.mysql.com/doc/mysql/en/commit.html.
</Desc>
    <FName>mysqli::change_user</FName>
    <Desc>Object oriented style
bool mysqli::change_user ( string $user , string $password , string $database )
Procedural style
bool mysqli_change_user ( mysqli $link , string $user , string $password , string $database )
Changes the user of the specified database connection and sets the current database. 
In order to successfully change users a valid username and password parameters must be provided and that user must have sufficient permissions to access the desired database. If for any reason authorization fails, the current user authentication will remain.
</Desc>
    <FName>mysqli_change_user</FName>
    <Desc>Object oriented style
bool mysqli::change_user ( string $user , string $password , string $database )
Procedural style
bool mysqli_change_user ( mysqli $link , string $user , string $password , string $database )
Changes the user of the specified database connection and sets the current database. 
In order to successfully change users a valid username and password parameters must be provided and that user must have sufficient permissions to access the desired database. If for any reason authorization fails, the current user authentication will remain.
</Desc>
    <FName>mysqli::character_set_name</FName>
    <Desc>Object oriented style
string mysqli::character_set_name ( void )
Procedural style
string mysqli_character_set_name ( mysqli $link )
Returns the current character set for the database connection.
</Desc>
    <FName>mysqli_character_set_name</FName>
    <Desc>Object oriented style
string mysqli::character_set_name ( void )
Procedural style
string mysqli_character_set_name ( mysqli $link )
Returns the current character set for the database connection.
</Desc>
    <FName>mysqli::close</FName>
    <Desc>Object oriented style
bool mysqli::close ( void )
Procedural style
bool mysqli_close ( mysqli $link )
Closes a previously opened database connection. 
Open non-persistent MySQL connections and result sets are automatically destroyed when a PHP script finishes its execution. So, while explicitly closing open connections and freeing result sets is optional, doing so is recommended. This will immediately return resources to PHP and MySQL, which can improve performance. For related information, see freeing resources
</Desc>
    <FName>mysqli_close</FName>
    <Desc>Object oriented style
bool mysqli::close ( void )
Procedural style
bool mysqli_close ( mysqli $link )
Closes a previously opened database connection. 
Open non-persistent MySQL connections and result sets are automatically destroyed when a PHP script finishes its execution. So, while explicitly closing open connections and freeing result sets is optional, doing so is recommended. This will immediately return resources to PHP and MySQL, which can improve performance. For related information, see freeing resources
</Desc>
    <FName>mysqli::commit</FName>
    <Desc>Object oriented style
bool mysqli::commit ([ int $flags [, string $name ]] )
Procedural style
bool mysqli_commit ( mysqli $link [, int $flags [, string $name ]] )
Commits the current transaction for the database connection.
</Desc>
    <FName>mysqli_commit</FName>
    <Desc>Object oriented style
bool mysqli::commit ([ int $flags [, string $name ]] )
Procedural style
bool mysqli_commit ( mysqli $link [, int $flags [, string $name ]] )
Commits the current transaction for the database connection.
</Desc>
    <FName>mysqli::$connect_errno</FName>
    <Desc>Object oriented style
int $mysqli->connect_errno;
Procedural style
int mysqli_connect_errno ( void )
Returns the last error code number from the last call to mysqli_connect(). 
Note: 
Client error message numbers are listed in the MySQL errmsg.h header file, server error message numbers are listed in mysqld_error.h. In the MySQL source distribution you can find a complete list of error messages and error numbers in the file Docs/mysqld_error.txt.
</Desc>
    <FName>mysqli_connect_errno</FName>
    <Desc>Object oriented style
int $mysqli->connect_errno;
Procedural style
int mysqli_connect_errno ( void )
Returns the last error code number from the last call to mysqli_connect(). 
Note: 
Client error message numbers are listed in the MySQL errmsg.h header file, server error message numbers are listed in mysqld_error.h. In the MySQL source distribution you can find a complete list of error messages and error numbers in the file Docs/mysqld_error.txt.
</Desc>
    <FName>mysqli::$connect_error</FName>
    <Desc>Object oriented style
string $mysqli->connect_error;
Procedural style
string mysqli_connect_error ( void )
Returns the last error message string from the last call to mysqli_connect().
</Desc>
    <FName>mysqli_connect_error</FName>
    <Desc>Object oriented style
string $mysqli->connect_error;
Procedural style
string mysqli_connect_error ( void )
Returns the last error message string from the last call to mysqli_connect().
</Desc>
    <FName>mysqli::__construct</FName>
    <Desc>Object oriented style
mysqli::__construct ([ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket") ]]]]]] )
void mysqli::connect ([ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket") ]]]]]] )
Procedural style
mysqli mysqli_connect ([ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket") ]]]]]] )
Opens a connection to the MySQL Server.
</Desc>
    <FName>mysqli::connect</FName>
    <Desc>Object oriented style
mysqli::__construct ([ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket") ]]]]]] )
void mysqli::connect ([ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket") ]]]]]] )
Procedural style
mysqli mysqli_connect ([ string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket") ]]]]]] )
Opens a connection to the MySQL Server.
</Desc>
    <FName>mysqli::debug</FName>
    <Desc>Object oriented style
bool mysqli::debug ( string $message )
Procedural style
bool mysqli_debug ( string $message )
Performs debugging operations using the Fred Fish debugging library.
</Desc>
    <FName>mysqli_debug</FName>
    <Desc>Object oriented style
bool mysqli::debug ( string $message )
Procedural style
bool mysqli_debug ( string $message )
Performs debugging operations using the Fred Fish debugging library.
</Desc>
    <FName>mysqli::dump_debug_info</FName>
    <Desc>Object oriented style
bool mysqli::dump_debug_info ( void )
Procedural style
bool mysqli_dump_debug_info ( mysqli $link )
This function is designed to be executed by an user with the SUPER privilege and is used to dump debugging information into the log for the MySQL Server relating to the connection.
</Desc>
    <FName>mysqli_dump_debug_info</FName>
    <Desc>Object oriented style
bool mysqli::dump_debug_info ( void )
Procedural style
bool mysqli_dump_debug_info ( mysqli $link )
This function is designed to be executed by an user with the SUPER privilege and is used to dump debugging information into the log for the MySQL Server relating to the connection.
</Desc>
    <FName>mysqli::$errno</FName>
    <Desc>Object oriented style
int $mysqli->errno;
Procedural style
int mysqli_errno ( mysqli $link )
Returns the last error code for the most recent MySQLi function call that can succeed or fail. 
Client error message numbers are listed in the MySQL errmsg.h header file, server error message numbers are listed in mysqld_error.h. In the MySQL source distribution you can find a complete list of error messages and error numbers in the file Docs/mysqld_error.txt.
</Desc>
    <FName>mysqli_errno</FName>
    <Desc>Object oriented style
int $mysqli->errno;
Procedural style
int mysqli_errno ( mysqli $link )
Returns the last error code for the most recent MySQLi function call that can succeed or fail. 
Client error message numbers are listed in the MySQL errmsg.h header file, server error message numbers are listed in mysqld_error.h. In the MySQL source distribution you can find a complete list of error messages and error numbers in the file Docs/mysqld_error.txt.
</Desc>
    <FName>mysqli::$error_list</FName>
    <Desc>Object oriented style
array $mysqli->error_list;
Procedural style
array mysqli_error_list ( mysqli $link )
Returns a array of errors for the most recent MySQLi function call that can succeed or fail.
</Desc>
    <FName>mysqli_error_list</FName>
    <Desc>Object oriented style
array $mysqli->error_list;
Procedural style
array mysqli_error_list ( mysqli $link )
Returns a array of errors for the most recent MySQLi function call that can succeed or fail.
</Desc>
    <FName>mysqli::$error</FName>
    <Desc>Object oriented style
string $mysqli->error;
Procedural style
string mysqli_error ( mysqli $link )
Returns the last error message for the most recent MySQLi function call that can succeed or fail.
</Desc>
    <FName>mysqli_error</FName>
    <Desc>Object oriented style
string $mysqli->error;
Procedural style
string mysqli_error ( mysqli $link )
Returns the last error message for the most recent MySQLi function call that can succeed or fail.
</Desc>
    <FName>mysqli::$field_count</FName>
    <Desc>Object oriented style
int $mysqli->field_count;
Procedural style
int mysqli_field_count ( mysqli $link )
Returns the number of columns for the most recent query on the connection represented by the link parameter. This function can be useful when using the mysqli_store_result() function to determine if the query should have produced a non-empty result set or not without knowing the nature of the query.
</Desc>
    <FName>mysqli_field_count</FName>
    <Desc>Object oriented style
int $mysqli->field_count;
Procedural style
int mysqli_field_count ( mysqli $link )
Returns the number of columns for the most recent query on the connection represented by the link parameter. This function can be useful when using the mysqli_store_result() function to determine if the query should have produced a non-empty result set or not without knowing the nature of the query.
</Desc>
    <FName>mysqli::get_charset</FName>
    <Desc>Object oriented style
object mysqli::get_charset ( void )
Procedural style
object mysqli_get_charset ( mysqli $link )
Returns a character set object providing several properties of the current active character set.
</Desc>
    <FName>mysqli_get_charset</FName>
    <Desc>Object oriented style
object mysqli::get_charset ( void )
Procedural style
object mysqli_get_charset ( mysqli $link )
Returns a character set object providing several properties of the current active character set.
</Desc>
    <FName>mysqli::$client_info</FName>
    <Desc>Object oriented style
string $mysqli->client_info;
string mysqli::get_client_info ( void )
Procedural style
string mysqli_get_client_info ( mysqli $link )
Returns a string that represents the MySQL client library version.
</Desc>
    <FName>mysqli::get_client_info</FName>
    <Desc>Object oriented style
string $mysqli->client_info;
string mysqli::get_client_info ( void )
Procedural style
string mysqli_get_client_info ( mysqli $link )
Returns a string that represents the MySQL client library version.
</Desc>
    <FName>mysqli::$client_version</FName>
    <Desc>Object oriented style
int $mysqli->client_version;
Procedural style
int mysqli_get_client_version ( mysqli $link )
Returns client version number as an integer.
</Desc>
    <FName>mysqli_get_client_version</FName>
    <Desc>Object oriented style
int $mysqli->client_version;
Procedural style
int mysqli_get_client_version ( mysqli $link )
Returns client version number as an integer.
</Desc>
    <FName>mysqli::get_connection_stats</FName>
    <Desc>Object oriented style
bool mysqli::get_connection_stats ( void )
Procedural style
array mysqli_get_connection_stats ( mysqli $link )
Returns statistics about the client connection. Available only with mysqlnd.
</Desc>
    <FName>mysqli_get_connection_stats</FName>
    <Desc>Object oriented style
bool mysqli::get_connection_stats ( void )
Procedural style
array mysqli_get_connection_stats ( mysqli $link )
Returns statistics about the client connection. Available only with mysqlnd.
</Desc>
    <FName>mysqli::$host_info</FName>
    <Desc>Object oriented style
string $mysqli->host_info;
Procedural style
string mysqli_get_host_info ( mysqli $link )
Returns a string describing the connection represented by the link parameter (including the server host name).
</Desc>
    <FName>mysqli_get_host_info</FName>
    <Desc>Object oriented style
string $mysqli->host_info;
Procedural style
string mysqli_get_host_info ( mysqli $link )
Returns a string describing the connection represented by the link parameter (including the server host name).
</Desc>
    <FName>mysqli::$protocol_version</FName>
    <Desc>Object oriented style
string $mysqli->protocol_version;
Procedural style
int mysqli_get_proto_info ( mysqli $link )
Returns an integer representing the MySQL protocol version used by the connection represented by the link parameter.
</Desc>
    <FName>mysqli_get_proto_info</FName>
    <Desc>Object oriented style
string $mysqli->protocol_version;
Procedural style
int mysqli_get_proto_info ( mysqli $link )
Returns an integer representing the MySQL protocol version used by the connection represented by the link parameter.
</Desc>
    <FName>mysqli::$server_info</FName>
    <Desc>Object oriented style
string $mysqli->server_info;
string mysqli_stmt::get_server_info ( void )
Procedural style
string mysqli_get_server_info ( mysqli $link )
Returns a string representing the version of the MySQL server that the MySQLi extension is connected to.
</Desc>
    <FName>mysqli::get_server_info</FName>
    <Desc>Object oriented style
string $mysqli->server_info;
string mysqli_stmt::get_server_info ( void )
Procedural style
string mysqli_get_server_info ( mysqli $link )
Returns a string representing the version of the MySQL server that the MySQLi extension is connected to.
</Desc>
    <FName>mysqli::$server_version</FName>
    <Desc>Object oriented style
int $mysqli->server_version;
Procedural style
int mysqli_get_server_version ( mysqli $link )
The mysqli_get_server_version() function returns the version of the server connected to (represented by the link parameter) as an integer.
</Desc>
    <FName>mysqli_get_server_version</FName>
    <Desc>Object oriented style
int $mysqli->server_version;
Procedural style
int mysqli_get_server_version ( mysqli $link )
The mysqli_get_server_version() function returns the version of the server connected to (represented by the link parameter) as an integer.
</Desc>
    <FName>mysqli::get_warnings</FName>
    <Desc>Object oriented style
mysqli_warning mysqli::get_warnings ( void )
Procedural style
mysqli_warning mysqli_get_warnings ( mysqli $link )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli_get_warnings</FName>
    <Desc>Object oriented style
mysqli_warning mysqli::get_warnings ( void )
Procedural style
mysqli_warning mysqli_get_warnings ( mysqli $link )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>mysqli::$info</FName>
    <Desc>Object oriented style
string $mysqli->info;
Procedural style
string mysqli_info ( mysqli $link )
The mysqli_info() function returns a string providing information about the last query executed. The nature of this string is provided below: 
Possible mysqli_info return valuesQuery typeExample result string
INSERT INTO...SELECT...Records: 100 Duplicates: 0 Warnings: 0
INSERT INTO...VALUES (...),(...),(...)Records: 3 Duplicates: 0 Warnings: 0
LOAD DATA INFILE ...Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
ALTER TABLE ...Records: 3 Duplicates: 0 Warnings: 0
UPDATE ...Rows matched: 40 Changed: 40 Warnings: 0

Note: 
Queries which do not fall into one of the preceding formats are not supported. In these situations, mysqli_info() will return an empty string.
</Desc>
    <FName>mysqli_info</FName>
    <Desc>Object oriented style
string $mysqli->info;
Procedural style
string mysqli_info ( mysqli $link )
The mysqli_info() function returns a string providing information about the last query executed. The nature of this string is provided below: 
Possible mysqli_info return valuesQuery typeExample result string
INSERT INTO...SELECT...Records: 100 Duplicates: 0 Warnings: 0
INSERT INTO...VALUES (...),(...),(...)Records: 3 Duplicates: 0 Warnings: 0
LOAD DATA INFILE ...Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
ALTER TABLE ...Records: 3 Duplicates: 0 Warnings: 0
UPDATE ...Rows matched: 40 Changed: 40 Warnings: 0

Note: 
Queries which do not fall into one of the preceding formats are not supported. In these situations, mysqli_info() will return an empty string.
</Desc>
    <FName>mysqli::init</FName>
    <Desc>Object oriented style
mysqli mysqli::init ( void )
Procedural style
mysqli mysqli_init ( void )
Allocates or initializes a MYSQL object suitable for mysqli_options() and mysqli_real_connect(). 
Note: 
Any subsequent calls to any mysqli function (except mysqli_options()) will fail until mysqli_real_connect() was called.
</Desc>
    <FName>mysqli_init</FName>
    <Desc>Object oriented style
mysqli mysqli::init ( void )
Procedural style
mysqli mysqli_init ( void )
Allocates or initializes a MYSQL object suitable for mysqli_options() and mysqli_real_connect(). 
Note: 
Any subsequent calls to any mysqli function (except mysqli_options()) will fail until mysqli_real_connect() was called.
</Desc>
    <FName>mysqli::$insert_id</FName>
    <Desc>Object oriented style
mixed $mysqli->insert_id;
Procedural style
mixed mysqli_insert_id ( mysqli $link )
The mysqli_insert_id() function returns the ID generated by a query (usually INSERT) on a table with a column having the AUTO_INCREMENT attribute. If no INSERT or UPDATE statements were sent via this connection, or if the modified table does not have a column with the AUTO_INCREMENT attribute, this function will return zero. 
Note: 
Performing an INSERT or UPDATE statement using the LAST_INSERT_ID() function will also modify the value returned by the mysqli_insert_id() function.
</Desc>
    <FName>mysqli_insert_id</FName>
    <Desc>Object oriented style
mixed $mysqli->insert_id;
Procedural style
mixed mysqli_insert_id ( mysqli $link )
The mysqli_insert_id() function returns the ID generated by a query (usually INSERT) on a table with a column having the AUTO_INCREMENT attribute. If no INSERT or UPDATE statements were sent via this connection, or if the modified table does not have a column with the AUTO_INCREMENT attribute, this function will return zero. 
Note: 
Performing an INSERT or UPDATE statement using the LAST_INSERT_ID() function will also modify the value returned by the mysqli_insert_id() function.
</Desc>
    <FName>mysqli::kill</FName>
    <Desc>Object oriented style
bool mysqli::kill ( int $processid )
Procedural style
bool mysqli_kill ( mysqli $link , int $processid )
This function is used to ask the server to kill a MySQL thread specified by the processid parameter. This value must be retrieved by calling the mysqli_thread_id() function. 
To stop a running query you should use the SQL command KILL QUERY processid.
</Desc>
    <FName>mysqli_kill</FName>
    <Desc>Object oriented style
bool mysqli::kill ( int $processid )
Procedural style
bool mysqli_kill ( mysqli $link , int $processid )
This function is used to ask the server to kill a MySQL thread specified by the processid parameter. This value must be retrieved by calling the mysqli_thread_id() function. 
To stop a running query you should use the SQL command KILL QUERY processid.
</Desc>
    <FName>mysqli::more_results</FName>
    <Desc>Object oriented style
bool mysqli::more_results ( void )
Procedural style
bool mysqli_more_results ( mysqli $link )
Indicates if one or more result sets are available from a previous call to mysqli_multi_query().
</Desc>
    <FName>mysqli_more_results</FName>
    <Desc>Object oriented style
bool mysqli::more_results ( void )
Procedural style
bool mysqli_more_results ( mysqli $link )
Indicates if one or more result sets are available from a previous call to mysqli_multi_query().
</Desc>
    <FName>mysqli::multi_query</FName>
    <Desc>Object oriented style
bool mysqli::multi_query ( string $query )
Procedural style
bool mysqli_multi_query ( mysqli $link , string $query )
Executes one or multiple queries which are concatenated by a semicolon. 
To retrieve the resultset from the first query you can use mysqli_use_result() or mysqli_store_result(). All subsequent query results can be processed using mysqli_more_results() and mysqli_next_result().
</Desc>
    <FName>mysqli_multi_query</FName>
    <Desc>Object oriented style
bool mysqli::multi_query ( string $query )
Procedural style
bool mysqli_multi_query ( mysqli $link , string $query )
Executes one or multiple queries which are concatenated by a semicolon. 
To retrieve the resultset from the first query you can use mysqli_use_result() or mysqli_store_result(). All subsequent query results can be processed using mysqli_more_results() and mysqli_next_result().
</Desc>
    <FName>mysqli::next_result</FName>
    <Desc>Object oriented style
bool mysqli::next_result ( void )
Procedural style
bool mysqli_next_result ( mysqli $link )
Prepares next result set from a previous call to mysqli_multi_query() which can be retrieved by mysqli_store_result() or mysqli_use_result().
</Desc>
    <FName>mysqli_next_result</FName>
    <Desc>Object oriented style
bool mysqli::next_result ( void )
Procedural style
bool mysqli_next_result ( mysqli $link )
Prepares next result set from a previous call to mysqli_multi_query() which can be retrieved by mysqli_store_result() or mysqli_use_result().
</Desc>
    <FName>mysqli::options</FName>
    <Desc>Object oriented style
bool mysqli::options ( int $option , mixed $value )
Procedural style
bool mysqli_options ( mysqli $link , int $option , mixed $value )
Used to set extra connect options and affect behavior for a connection. 
This function may be called multiple times to set several options. 
mysqli_options() should be called after mysqli_init() and before mysqli_real_connect().
</Desc>
    <FName>mysqli_options</FName>
    <Desc>Object oriented style
bool mysqli::options ( int $option , mixed $value )
Procedural style
bool mysqli_options ( mysqli $link , int $option , mixed $value )
Used to set extra connect options and affect behavior for a connection. 
This function may be called multiple times to set several options. 
mysqli_options() should be called after mysqli_init() and before mysqli_real_connect().
</Desc>
    <FName>mysqli::ping</FName>
    <Desc>Object oriented style
bool mysqli::ping ( void )
Procedural style
bool mysqli_ping ( mysqli $link )
Checks whether the connection to the server is working. If it has gone down and global option mysqli.reconnect is enabled, an automatic reconnection is attempted. 
Note: The php.ini setting mysqli.reconnect is ignored by the mysqlnd driver, so automatic reconnection is never attempted. 
This function can be used by clients that remain idle for a long while, to check whether the server has closed the connection and reconnect if necessary.
</Desc>
    <FName>mysqli_ping</FName>
    <Desc>Object oriented style
bool mysqli::ping ( void )
Procedural style
bool mysqli_ping ( mysqli $link )
Checks whether the connection to the server is working. If it has gone down and global option mysqli.reconnect is enabled, an automatic reconnection is attempted. 
Note: The php.ini setting mysqli.reconnect is ignored by the mysqlnd driver, so automatic reconnection is never attempted. 
This function can be used by clients that remain idle for a long while, to check whether the server has closed the connection and reconnect if necessary.
</Desc>
    <FName>mysqli::poll</FName>
    <Desc>Object oriented style
public static int mysqli::poll ( array &$read , array &$error , array &$reject , int $sec [, int $usec ] )
Procedural style
int mysqli_poll ( array &$read , array &$error , array &$reject , int $sec [, int $usec ] )
Poll connections. Available only with mysqlnd. The method can be used as static.
</Desc>
    <FName>mysqli_poll</FName>
    <Desc>Object oriented style
public static int mysqli::poll ( array &$read , array &$error , array &$reject , int $sec [, int $usec ] )
Procedural style
int mysqli_poll ( array &$read , array &$error , array &$reject , int $sec [, int $usec ] )
Poll connections. Available only with mysqlnd. The method can be used as static.
</Desc>
    <FName>mysqli::prepare</FName>
    <Desc>Object oriented style
mysqli_stmt mysqli::prepare ( string $query )
Procedural style
mysqli_stmt mysqli_prepare ( mysqli $link , string $query )
Prepares the SQL query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement. 
The parameter markers must be bound to application variables using mysqli_stmt_bind_param() and/or mysqli_stmt_bind_result() before executing the statement or fetching rows.
</Desc>
    <FName>mysqli_prepare</FName>
    <Desc>Object oriented style
mysqli_stmt mysqli::prepare ( string $query )
Procedural style
mysqli_stmt mysqli_prepare ( mysqli $link , string $query )
Prepares the SQL query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement. 
The parameter markers must be bound to application variables using mysqli_stmt_bind_param() and/or mysqli_stmt_bind_result() before executing the statement or fetching rows.
</Desc>
    <FName>mysqli::query</FName>
    <Desc>Object oriented style
mixed mysqli::query ( string $query [, int $resultmode = MYSQLI_STORE_RESULT ] )
Procedural style
mixed mysqli_query ( mysqli $link , string $query [, int $resultmode = MYSQLI_STORE_RESULT ] )
Performs a query against the database. 
For non-DML queries (not INSERT, UPDATE or DELETE), this function is similar to calling mysqli_real_query() followed by either mysqli_use_result() or mysqli_store_result(). 
Note: 
In the case where you pass a statement to mysqli_query() that is longer than max_allowed_packet of the server, the returned error codes are different depending on whether you are using MySQL Native Driver (mysqlnd) or MySQL Client Library (libmysqlclient). The behavior is as follows: 
mysqlnd on Linux returns an error code of 1153. The error message means "got a packet bigger than max_allowed_packet bytes". 
mysqlnd on Windows returns an error code 2006. This error message means "server has gone away". 
libmysqlclient on all platforms returns an error code 2006. This error message means "server has gone away".
</Desc>
    <FName>mysqli_query</FName>
    <Desc>Object oriented style
mixed mysqli::query ( string $query [, int $resultmode = MYSQLI_STORE_RESULT ] )
Procedural style
mixed mysqli_query ( mysqli $link , string $query [, int $resultmode = MYSQLI_STORE_RESULT ] )
Performs a query against the database. 
For non-DML queries (not INSERT, UPDATE or DELETE), this function is similar to calling mysqli_real_query() followed by either mysqli_use_result() or mysqli_store_result(). 
Note: 
In the case where you pass a statement to mysqli_query() that is longer than max_allowed_packet of the server, the returned error codes are different depending on whether you are using MySQL Native Driver (mysqlnd) or MySQL Client Library (libmysqlclient). The behavior is as follows: 
mysqlnd on Linux returns an error code of 1153. The error message means "got a packet bigger than max_allowed_packet bytes". 
mysqlnd on Windows returns an error code 2006. This error message means "server has gone away". 
libmysqlclient on all platforms returns an error code 2006. This error message means "server has gone away".
</Desc>
    <FName>mysqli::real_connect</FName>
    <Desc>Object oriented style
bool mysqli::real_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags ]]]]]]] )
Procedural style
bool mysqli_real_connect ( mysqli $link [, string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags ]]]]]]] )
Establish a connection to a MySQL database engine. 
This function differs from mysqli_connect(): 
mysqli_real_connect() needs a valid object which has to be created by function mysqli_init(). 
With the mysqli_options() function you can set various options for connection. 
There is a flags parameter.
</Desc>
    <FName>mysqli_real_connect</FName>
    <Desc>Object oriented style
bool mysqli::real_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags ]]]]]]] )
Procedural style
bool mysqli_real_connect ( mysqli $link [, string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags ]]]]]]] )
Establish a connection to a MySQL database engine. 
This function differs from mysqli_connect(): 
mysqli_real_connect() needs a valid object which has to be created by function mysqli_init(). 
With the mysqli_options() function you can set various options for connection. 
There is a flags parameter.
</Desc>
    <FName>mysqli::real_escape_string</FName>
    <Desc>Object oriented style
string mysqli::escape_string ( string $escapestr )
string mysqli::real_escape_string ( string $escapestr )
Procedural style
string mysqli_real_escape_string ( mysqli $link , string $escapestr )
This function is used to create a legal SQL string that you can use in an SQL statement. The given string is encoded to an escaped SQL string, taking into account the current character set of the connection. 
Caution 
Security: the default character set
The character set must be set either at the server level, or with the API function mysqli_set_charset() for it to affect mysqli_real_escape_string(). See the concepts section on character sets for more information.
</Desc>
    <FName>mysqli::escape_string</FName>
    <Desc>Object oriented style
string mysqli::escape_string ( string $escapestr )
string mysqli::real_escape_string ( string $escapestr )
Procedural style
string mysqli_real_escape_string ( mysqli $link , string $escapestr )
This function is used to create a legal SQL string that you can use in an SQL statement. The given string is encoded to an escaped SQL string, taking into account the current character set of the connection. 
Caution 
Security: the default character set
The character set must be set either at the server level, or with the API function mysqli_set_charset() for it to affect mysqli_real_escape_string(). See the concepts section on character sets for more information.
</Desc>
    <FName>mysqli::real_query</FName>
    <Desc>Object oriented style
bool mysqli::real_query ( string $query )
Procedural style
bool mysqli_real_query ( mysqli $link , string $query )
Executes a single query against the database whose result can then be retrieved or stored using the mysqli_store_result() or mysqli_use_result() functions. 
In order to determine if a given query should return a result set or not, see mysqli_field_count().
</Desc>
    <FName>mysqli_real_query</FName>
    <Desc>Object oriented style
bool mysqli::real_query ( string $query )
Procedural style
bool mysqli_real_query ( mysqli $link , string $query )
Executes a single query against the database whose result can then be retrieved or stored using the mysqli_store_result() or mysqli_use_result() functions. 
In order to determine if a given query should return a result set or not, see mysqli_field_count().
</Desc>
    <FName>mysqli::reap_async_query</FName>
    <Desc>Object oriented style
public mysqli_result mysqli::reap_async_query ( void )
Procedural style
mysqli_result mysqli_reap_async_query ( mysqli $link )
Get result from async query. Available only with mysqlnd.
</Desc>
    <FName>mysqli_reap_async_query</FName>
    <Desc>Object oriented style
public mysqli_result mysqli::reap_async_query ( void )
Procedural style
mysqli_result mysqli_reap_async_query ( mysqli $link )
Get result from async query. Available only with mysqlnd.
</Desc>
    <FName>mysqli::refresh</FName>
    <Desc>Object oriented style
public bool mysqli::refresh ( int $options )
Procedural style
bool mysqli_refresh ( resource $link , int $options )
Flushes tables or caches, or resets the replication server information.
</Desc>
    <FName>mysqli_refresh</FName>
    <Desc>Object oriented style
public bool mysqli::refresh ( int $options )
Procedural style
bool mysqli_refresh ( resource $link , int $options )
Flushes tables or caches, or resets the replication server information.
</Desc>
    <FName>mysqli::release_savepoint</FName>
    <Desc>Object oriented style (method):
public bool mysqli::release_savepoint ( string $name )
Procedural style:
bool mysqli_release_savepoint ( mysqli $link , string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mysqli_release_savepoint</FName>
    <Desc>Object oriented style (method):
public bool mysqli::release_savepoint ( string $name )
Procedural style:
bool mysqli_release_savepoint ( mysqli $link , string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mysqli::rollback</FName>
    <Desc>Object oriented style
bool mysqli::rollback ([ int $flags [, string $name ]] )
Procedural style
bool mysqli_rollback ( mysqli $link [, int $flags [, string $name ]] )
Rollbacks the current transaction for the database.
</Desc>
    <FName>mysqli_rollback</FName>
    <Desc>Object oriented style
bool mysqli::rollback ([ int $flags [, string $name ]] )
Procedural style
bool mysqli_rollback ( mysqli $link [, int $flags [, string $name ]] )
Rollbacks the current transaction for the database.
</Desc>
    <FName>mysqli::rpl_query_type</FName>
    <Desc>Object oriented style
int mysqli::rpl_query_type ( string $query )
Procedural style
int mysqli_rpl_query_type ( mysqli $link , string $query )
Returns MYSQLI_RPL_MASTER, MYSQLI_RPL_SLAVE or MYSQLI_RPL_ADMIN depending on a query type. INSERT, UPDATE and similar are master queries, SELECT is slave, and FLUSH, REPAIR and similar are admin. 
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli_rpl_query_type</FName>
    <Desc>Object oriented style
int mysqli::rpl_query_type ( string $query )
Procedural style
int mysqli_rpl_query_type ( mysqli $link , string $query )
Returns MYSQLI_RPL_MASTER, MYSQLI_RPL_SLAVE or MYSQLI_RPL_ADMIN depending on a query type. INSERT, UPDATE and similar are master queries, SELECT is slave, and FLUSH, REPAIR and similar are admin. 
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli::savepoint</FName>
    <Desc>Object oriented style (method):
public bool mysqli::savepoint ( string $name )
Procedural style:
bool mysqli_savepoint ( mysqli $link , string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mysqli_savepoint</FName>
    <Desc>Object oriented style (method):
public bool mysqli::savepoint ( string $name )
Procedural style:
bool mysqli_savepoint ( mysqli $link , string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>mysqli::select_db</FName>
    <Desc>Object oriented style
bool mysqli::select_db ( string $dbname )
Procedural style
bool mysqli_select_db ( mysqli $link , string $dbname )
Selects the default database to be used when performing queries against the database connection. 
Note: 
This function should only be used to change the default database for the connection. You can select the default database with 4th parameter in mysqli_connect().
</Desc>
    <FName>mysqli_select_db</FName>
    <Desc>Object oriented style
bool mysqli::select_db ( string $dbname )
Procedural style
bool mysqli_select_db ( mysqli $link , string $dbname )
Selects the default database to be used when performing queries against the database connection. 
Note: 
This function should only be used to change the default database for the connection. You can select the default database with 4th parameter in mysqli_connect().
</Desc>
    <FName>mysqli::send_query</FName>
    <Desc>Object oriented style
bool mysqli::send_query ( string $query )
Procedural style
bool mysqli_send_query ( mysqli $link , string $query )
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli_send_query</FName>
    <Desc>Object oriented style
bool mysqli::send_query ( string $query )
Procedural style
bool mysqli_send_query ( mysqli $link , string $query )
Warning
This function is currently not documented; only its argument list is available. 
Warning
This function has been DEPRECATED and REMOVED as of PHP 5.3.0.
</Desc>
    <FName>mysqli::set_charset</FName>
    <Desc>Object oriented style
bool mysqli::set_charset ( string $charset )
Procedural style
bool mysqli_set_charset ( mysqli $link , string $charset )
Sets the default character set to be used when sending data from and to the database server.
</Desc>
    <FName>mysqli_set_charset</FName>
    <Desc>Object oriented style
bool mysqli::set_charset ( string $charset )
Procedural style
bool mysqli_set_charset ( mysqli $link , string $charset )
Sets the default character set to be used when sending data from and to the database server.
</Desc>
    <FName>mysqli::set_local_infile_default</FName>
    <Desc>void mysqli_set_local_infile_default ( mysqli $link )
Deactivates a LOAD DATA INFILE LOCAL handler previously set with mysqli_set_local_infile_handler().
</Desc>
    <FName>mysqli_set_local_infile_default</FName>
    <Desc>void mysqli_set_local_infile_default ( mysqli $link )
Deactivates a LOAD DATA INFILE LOCAL handler previously set with mysqli_set_local_infile_handler().
</Desc>
    <FName>mysqli::set_local_infile_handler</FName>
    <Desc>Object oriented style
bool mysqli::set_local_infile_handler ( mysqli $link , callable $read_func )
Procedural style
bool mysqli_set_local_infile_handler ( mysqli $link , callable $read_func )
Set callback function for LOAD DATA LOCAL INFILE command
The callbacks task is to read input from the file specified in the LOAD DATA LOCAL INFILE and to reformat it into the format understood by LOAD DATA INFILE. 
The returned data needs to match the format specified in the LOAD DATA
</Desc>
    <FName>mysqli_set_local_infile_handler</FName>
    <Desc>Object oriented style
bool mysqli::set_local_infile_handler ( mysqli $link , callable $read_func )
Procedural style
bool mysqli_set_local_infile_handler ( mysqli $link , callable $read_func )
Set callback function for LOAD DATA LOCAL INFILE command
The callbacks task is to read input from the file specified in the LOAD DATA LOCAL INFILE and to reformat it into the format understood by LOAD DATA INFILE. 
The returned data needs to match the format specified in the LOAD DATA
</Desc>
    <FName>mysqli::$sqlstate</FName>
    <Desc>Object oriented style
string $mysqli->sqlstate;
Procedural style
string mysqli_sqlstate ( mysqli $link )
Returns a string containing the SQLSTATE error code for the last error. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see » http://dev.mysql.com/doc/mysql/en/error-handling.html. 
Note: 
Note that not all MySQL errors are yet mapped to SQLSTATE's. The value HY000 (general error) is used for unmapped errors.
</Desc>
    <FName>mysqli_sqlstate</FName>
    <Desc>Object oriented style
string $mysqli->sqlstate;
Procedural style
string mysqli_sqlstate ( mysqli $link )
Returns a string containing the SQLSTATE error code for the last error. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see » http://dev.mysql.com/doc/mysql/en/error-handling.html. 
Note: 
Note that not all MySQL errors are yet mapped to SQLSTATE's. The value HY000 (general error) is used for unmapped errors.
</Desc>
    <FName>mysqli::ssl_set</FName>
    <Desc>Object oriented style
bool mysqli::ssl_set ( string $key , string $cert , string $ca , string $capath , string $cipher )
Procedural style
bool mysqli_ssl_set ( mysqli $link , string $key , string $cert , string $ca , string $capath , string $cipher )
Used for establishing secure connections using SSL. It must be called before mysqli_real_connect(). This function does nothing unless OpenSSL support is enabled. 
Note that MySQL Native Driver does not support SSL before PHP 5.3.3, so calling this function when using MySQL Native Driver will result in an error. MySQL Native Driver is enabled by default on Microsoft Windows from PHP version 5.3 onwards.
</Desc>
    <FName>mysqli_ssl_set</FName>
    <Desc>Object oriented style
bool mysqli::ssl_set ( string $key , string $cert , string $ca , string $capath , string $cipher )
Procedural style
bool mysqli_ssl_set ( mysqli $link , string $key , string $cert , string $ca , string $capath , string $cipher )
Used for establishing secure connections using SSL. It must be called before mysqli_real_connect(). This function does nothing unless OpenSSL support is enabled. 
Note that MySQL Native Driver does not support SSL before PHP 5.3.3, so calling this function when using MySQL Native Driver will result in an error. MySQL Native Driver is enabled by default on Microsoft Windows from PHP version 5.3 onwards.
</Desc>
    <FName>mysqli::stat</FName>
    <Desc>Object oriented style
string mysqli::stat ( void )
Procedural style
string mysqli_stat ( mysqli $link )
mysqli_stat() returns a string containing information similar to that provided by the 'mysqladmin status' command. This includes uptime in seconds and the number of running threads, questions, reloads, and open tables.
</Desc>
    <FName>mysqli_stat</FName>
    <Desc>Object oriented style
string mysqli::stat ( void )
Procedural style
string mysqli_stat ( mysqli $link )
mysqli_stat() returns a string containing information similar to that provided by the 'mysqladmin status' command. This includes uptime in seconds and the number of running threads, questions, reloads, and open tables.
</Desc>
    <FName>mysqli::stmt_init</FName>
    <Desc>Object oriented style
mysqli_stmt mysqli::stmt_init ( void )
Procedural style
mysqli_stmt mysqli_stmt_init ( mysqli $link )
Allocates and initializes a statement object suitable for mysqli_stmt_prepare(). 
Note: 
Any subsequent calls to any mysqli_stmt function will fail until mysqli_stmt_prepare() was called.
</Desc>
    <FName>mysqli_stmt_init</FName>
    <Desc>Object oriented style
mysqli_stmt mysqli::stmt_init ( void )
Procedural style
mysqli_stmt mysqli_stmt_init ( mysqli $link )
Allocates and initializes a statement object suitable for mysqli_stmt_prepare(). 
Note: 
Any subsequent calls to any mysqli_stmt function will fail until mysqli_stmt_prepare() was called.
</Desc>
    <FName>mysqli::store_result</FName>
    <Desc>Object oriented style
mysqli_result mysqli::store_result ([ int $option ] )
Procedural style
mysqli_result mysqli_store_result ( mysqli $link [, int $option ] )
Transfers the result set from the last query on the database connection represented by the link parameter to be used with the mysqli_data_seek() function.
</Desc>
    <FName>mysqli_store_result</FName>
    <Desc>Object oriented style
mysqli_result mysqli::store_result ([ int $option ] )
Procedural style
mysqli_result mysqli_store_result ( mysqli $link [, int $option ] )
Transfers the result set from the last query on the database connection represented by the link parameter to be used with the mysqli_data_seek() function.
</Desc>
    <FName>mysqli::$thread_id</FName>
    <Desc>Object oriented style
int $mysqli->thread_id;
Procedural style
int mysqli_thread_id ( mysqli $link )
The mysqli_thread_id() function returns the thread ID for the current connection which can then be killed using the mysqli_kill() function. If the connection is lost and you reconnect with mysqli_ping(), the thread ID will be other. Therefore you should get the thread ID only when you need it. 
Note: 
The thread ID is assigned on a connection-by-connection basis. Hence, if the connection is broken and then re-established a new thread ID will be assigned. 
To kill a running query you can use the SQL command KILL QUERY processid.
</Desc>
    <FName>mysqli_thread_id</FName>
    <Desc>Object oriented style
int $mysqli->thread_id;
Procedural style
int mysqli_thread_id ( mysqli $link )
The mysqli_thread_id() function returns the thread ID for the current connection which can then be killed using the mysqli_kill() function. If the connection is lost and you reconnect with mysqli_ping(), the thread ID will be other. Therefore you should get the thread ID only when you need it. 
Note: 
The thread ID is assigned on a connection-by-connection basis. Hence, if the connection is broken and then re-established a new thread ID will be assigned. 
To kill a running query you can use the SQL command KILL QUERY processid.
</Desc>
    <FName>mysqli::thread_safe</FName>
    <Desc>Procedural style
bool mysqli_thread_safe ( void )
Tells whether the client library is compiled as thread-safe.
</Desc>
    <FName>mysqli_thread_safe</FName>
    <Desc>Procedural style
bool mysqli_thread_safe ( void )
Tells whether the client library is compiled as thread-safe.
</Desc>
    <FName>mysqli::use_result</FName>
    <Desc>Object oriented style
mysqli_result mysqli::use_result ( void )
Procedural style
mysqli_result mysqli_use_result ( mysqli $link )
Used to initiate the retrieval of a result set from the last query executed using the mysqli_real_query() function on the database connection. 
Either this or the mysqli_store_result() function must be called before the results of a query can be retrieved, and one or the other must be called to prevent the next query on that database connection from failing. 
Note: 
The mysqli_use_result() function does not transfer the entire result set from the database and hence cannot be used functions such as mysqli_data_seek() to move to a particular row within the set. To use this functionality, the result set must be stored using mysqli_store_result(). One should not use mysqli_use_result() if a lot of processing on the client side is performed, since this will tie up the server and prevent other threads from updating any tables from which the data is being fetched.
</Desc>
    <FName>mysqli_use_result</FName>
    <Desc>Object oriented style
mysqli_result mysqli::use_result ( void )
Procedural style
mysqli_result mysqli_use_result ( mysqli $link )
Used to initiate the retrieval of a result set from the last query executed using the mysqli_real_query() function on the database connection. 
Either this or the mysqli_store_result() function must be called before the results of a query can be retrieved, and one or the other must be called to prevent the next query on that database connection from failing. 
Note: 
The mysqli_use_result() function does not transfer the entire result set from the database and hence cannot be used functions such as mysqli_data_seek() to move to a particular row within the set. To use this functionality, the result set must be stored using mysqli_store_result(). One should not use mysqli_use_result() if a lot of processing on the client side is performed, since this will tie up the server and prevent other threads from updating any tables from which the data is being fetched.
</Desc>
    <FName>mysqli::$warning_count</FName>
    <Desc>Object oriented style
int $mysqli->warning_count;
Procedural style
int mysqli_warning_count ( mysqli $link )
Returns the number of warnings from the last query in the connection. 
Note: 
For retrieving warning messages you can use the SQL command SHOW WARNINGS [limit row_count].
</Desc>
    <FName>mysqli_warning_count</FName>
    <Desc>Object oriented style
int $mysqli->warning_count;
Procedural style
int mysqli_warning_count ( mysqli $link )
Returns the number of warnings from the last query in the connection. 
Note: 
For retrieving warning messages you can use the SQL command SHOW WARNINGS [limit row_count].
</Desc>
    <FName>MysqlndUhConnection::changeUser</FName>
    <Desc>public bool MysqlndUhConnection::changeUser ( mysqlnd_connection $connection , string $user , string $password , string $database , bool $silent , int $passwd_len )
Changes the user of the specified mysqlnd database connection
</Desc>
    <FName>MysqlndUhConnection::charsetName</FName>
    <Desc>public string MysqlndUhConnection::charsetName ( mysqlnd_connection $connection )
Returns the default character set for the database connection.
</Desc>
    <FName>MysqlndUhConnection::close</FName>
    <Desc>public bool MysqlndUhConnection::close ( mysqlnd_connection $connection , int $close_type )
Closes a previously opened database connection. 
Note: 
Failing to call the parent implementation may cause memory leaks or crash PHP. This is not considered a bug. Please, keep in mind that the mysqlnd library functions have never been designed to be exposed to the user space.
</Desc>
    <FName>MysqlndUhConnection::connect</FName>
    <Desc>public bool MysqlndUhConnection::connect ( mysqlnd_connection $connection , string $host , string $use" , string $password , string $database , int $port , string $socket , int $mysql_flags )
Open a new connection to the MySQL server.
</Desc>
    <FName>MysqlndUhConnection::__construct</FName>
    <Desc>public MysqlndUhConnection::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MysqlndUhConnection::endPSession</FName>
    <Desc>public bool MysqlndUhConnection::endPSession ( mysqlnd_connection $connection )
End a persistent connection 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MysqlndUhConnection::escapeString</FName>
    <Desc>public string MysqlndUhConnection::escapeString ( mysqlnd_connection $connection , string $escape_string )
Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection.
</Desc>
    <FName>MysqlndUhConnection::getAffectedRows</FName>
    <Desc>public int MysqlndUhConnection::getAffectedRows ( mysqlnd_connection $connection )
Gets the number of affected rows in a previous MySQL operation.
</Desc>
    <FName>MysqlndUhConnection::getErrorNumber</FName>
    <Desc>public int MysqlndUhConnection::getErrorNumber ( mysqlnd_connection $connection )
Returns the error code for the most recent function call.
</Desc>
    <FName>MysqlndUhConnection::getErrorString</FName>
    <Desc>public string MysqlndUhConnection::getErrorString ( mysqlnd_connection $connection )
Returns a string description of the last error.
</Desc>
    <FName>MysqlndUhConnection::getFieldCount</FName>
    <Desc>public int MysqlndUhConnection::getFieldCount ( mysqlnd_connection $connection )
Returns the number of columns for the most recent query.
</Desc>
    <FName>MysqlndUhConnection::getHostInformation</FName>
    <Desc>public string MysqlndUhConnection::getHostInformation ( mysqlnd_connection $connection )
Returns a string representing the type of connection used.
</Desc>
    <FName>MysqlndUhConnection::getLastInsertId</FName>
    <Desc>public int MysqlndUhConnection::getLastInsertId ( mysqlnd_connection $connection )
Returns the auto generated id used in the last query.
</Desc>
    <FName>MysqlndUhConnection::getLastMessage</FName>
    <Desc>public void MysqlndUhConnection::getLastMessage ( mysqlnd_connection $connection )
Retrieves information about the most recently executed query.
</Desc>
    <FName>MysqlndUhConnection::getProtocolInformation</FName>
    <Desc>public string MysqlndUhConnection::getProtocolInformation ( mysqlnd_connection $connection )
Returns the version of the MySQL protocol used.
</Desc>
    <FName>MysqlndUhConnection::getServerInformation</FName>
    <Desc>public string MysqlndUhConnection::getServerInformation ( mysqlnd_connection $connection )
Returns the version of the MySQL server.
</Desc>
    <FName>MysqlndUhConnection::getServerStatistics</FName>
    <Desc>public string MysqlndUhConnection::getServerStatistics ( mysqlnd_connection $connection )
Gets the current system status.
</Desc>
    <FName>MysqlndUhConnection::getServerVersion</FName>
    <Desc>public int MysqlndUhConnection::getServerVersion ( mysqlnd_connection $connection )
Returns the version of the MySQL server as an integer.
</Desc>
    <FName>MysqlndUhConnection::getSqlstate</FName>
    <Desc>public string MysqlndUhConnection::getSqlstate ( mysqlnd_connection $connection )
Returns the SQLSTATE error from previous MySQL operation.
</Desc>
    <FName>MysqlndUhConnection::getStatistics</FName>
    <Desc>public array MysqlndUhConnection::getStatistics ( mysqlnd_connection $connection )
Returns statistics about the client connection. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MysqlndUhConnection::getThreadId</FName>
    <Desc>public int MysqlndUhConnection::getThreadId ( mysqlnd_connection $connection )
Returns the thread ID for the current connection.
</Desc>
    <FName>MysqlndUhConnection::getWarningCount</FName>
    <Desc>public int MysqlndUhConnection::getWarningCount ( mysqlnd_connection $connection )
Returns the number of warnings from the last query for the given link.
</Desc>
    <FName>MysqlndUhConnection::init</FName>
    <Desc>public bool MysqlndUhConnection::init ( mysqlnd_connection $connection )
Initialize mysqlnd connection. This is an mysqlnd internal call to initialize the connection object. 
Note: 
Failing to call the parent implementation may cause memory leaks or crash PHP. This is not considered a bug. Please, keep in mind that the mysqlnd library functions have never been designed to be exposed to the user space.
</Desc>
    <FName>MysqlndUhConnection::killConnection</FName>
    <Desc>public bool MysqlndUhConnection::killConnection ( mysqlnd_connection $connection , int $pid )
Asks the server to kill a MySQL thread.
</Desc>
    <FName>MysqlndUhConnection::listFields</FName>
    <Desc>public array MysqlndUhConnection::listFields ( mysqlnd_connection $connection , string $table , string $achtung_wild )
List MySQL table fields. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MysqlndUhConnection::listMethod</FName>
    <Desc>public void MysqlndUhConnection::listMethod ( mysqlnd_connection $connection , string $query , string $achtung_wild , string $par1 )
Wrapper for assorted list commands. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MysqlndUhConnection::moreResults</FName>
    <Desc>public bool MysqlndUhConnection::moreResults ( mysqlnd_connection $connection )
Check if there are any more query results from a multi query.
</Desc>
    <FName>MysqlndUhConnection::nextResult</FName>
    <Desc>public bool MysqlndUhConnection::nextResult ( mysqlnd_connection $connection )
Prepare next result from multi_query.
</Desc>
    <FName>MysqlndUhConnection::ping</FName>
    <Desc>public bool MysqlndUhConnection::ping ( mysqlnd_connection $connection )
Pings a server connection, or tries to reconnect if the connection has gone down.
</Desc>
    <FName>MysqlndUhConnection::query</FName>
    <Desc>public bool MysqlndUhConnection::query ( mysqlnd_connection $connection , string $query )
Performs a query on the database (COM_QUERY).
</Desc>
    <FName>MysqlndUhConnection::queryReadResultsetHeader</FName>
    <Desc>public bool MysqlndUhConnection::queryReadResultsetHeader ( mysqlnd_connection $connection , mysqlnd_statement $mysqlnd_stmt )
Read a result set header.
</Desc>
    <FName>MysqlndUhConnection::reapQuery</FName>
    <Desc>public bool MysqlndUhConnection::reapQuery ( mysqlnd_connection $connection )
Get result from async query.
</Desc>
    <FName>MysqlndUhConnection::refreshServer</FName>
    <Desc>public bool MysqlndUhConnection::refreshServer ( mysqlnd_connection $connection , int $options )
Flush or reset tables and caches. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MysqlndUhConnection::restartPSession</FName>
    <Desc>public bool MysqlndUhConnection::restartPSession ( mysqlnd_connection $connection )
Restart a persistent mysqlnd connection.
</Desc>
    <FName>MysqlndUhConnection::selectDb</FName>
    <Desc>public bool MysqlndUhConnection::selectDb ( mysqlnd_connection $connection , string $database )
Selects the default database for database queries.
</Desc>
    <FName>MysqlndUhConnection::sendClose</FName>
    <Desc>public bool MysqlndUhConnection::sendClose ( mysqlnd_connection $connection )
Sends a close command to MySQL.
</Desc>
    <FName>MysqlndUhConnection::sendQuery</FName>
    <Desc>public bool MysqlndUhConnection::sendQuery ( mysqlnd_connection $connection , string $query )
Sends a query to MySQL.
</Desc>
    <FName>MysqlndUhConnection::serverDumpDebugInformation</FName>
    <Desc>public bool MysqlndUhConnection::serverDumpDebugInformation ( mysqlnd_connection $connection )
Dump debugging information into the log for the MySQL server.
</Desc>
    <FName>MysqlndUhConnection::setAutocommit</FName>
    <Desc>public bool MysqlndUhConnection::setAutocommit ( mysqlnd_connection $connection , int $mode )
Turns on or off auto-committing database modifications
</Desc>
    <FName>MysqlndUhConnection::setCharset</FName>
    <Desc>public bool MysqlndUhConnection::setCharset ( mysqlnd_connection $connection , string $charset )
Sets the default client character set.
</Desc>
    <FName>MysqlndUhConnection::setClientOption</FName>
    <Desc>public bool MysqlndUhConnection::setClientOption ( mysqlnd_connection $connection , int $option , int $value )
Sets a client option.
</Desc>
    <FName>MysqlndUhConnection::setServerOption</FName>
    <Desc>public void MysqlndUhConnection::setServerOption ( mysqlnd_connection $connection , int $option )
Sets a server option.
</Desc>
    <FName>MysqlndUhConnection::shutdownServer</FName>
    <Desc>public void MysqlndUhConnection::shutdownServer ( string $MYSQLND_UH_RES_MYSQLND_NAME , string $level )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MysqlndUhConnection::simpleCommand</FName>
    <Desc>public bool MysqlndUhConnection::simpleCommand ( mysqlnd_connection $connection , int $command , string $arg , int $ok_packet , bool $silent , bool $ignore_upsert_status )
Sends a basic COM_* command to MySQL.
</Desc>
    <FName>MysqlndUhConnection::simpleCommandHandleResponse</FName>
    <Desc>public bool MysqlndUhConnection::simpleCommandHandleResponse ( mysqlnd_connection $connection , int $ok_packet , bool $silent , int $command , bool $ignore_upsert_status )
Process a response for a basic COM_* command send to the client.
</Desc>
    <FName>MysqlndUhConnection::sslSet</FName>
    <Desc>public bool MysqlndUhConnection::sslSet ( mysqlnd_connection $connection , string $key , string $cert , string $ca , string $capath , string $cipher )
Used for establishing secure connections using SSL.
</Desc>
    <FName>MysqlndUhConnection::stmtInit</FName>
    <Desc>public resource MysqlndUhConnection::stmtInit ( mysqlnd_connection $connection )
Initializes a statement and returns a resource for use with mysqli_statement::prepare.
</Desc>
    <FName>MysqlndUhConnection::storeResult</FName>
    <Desc>public resource MysqlndUhConnection::storeResult ( mysqlnd_connection $connection )
Transfers a result set from the last query.
</Desc>
    <FName>MysqlndUhConnection::txCommit</FName>
    <Desc>public bool MysqlndUhConnection::txCommit ( mysqlnd_connection $connection )
Commits the current transaction.
</Desc>
    <FName>MysqlndUhConnection::txRollback</FName>
    <Desc>public bool MysqlndUhConnection::txRollback ( mysqlnd_connection $connection )
Rolls back current transaction.
</Desc>
    <FName>MysqlndUhConnection::useResult</FName>
    <Desc>public resource MysqlndUhConnection::useResult ( mysqlnd_connection $connection )
Initiate a result set retrieval.
</Desc>
    <FName>MysqlndUhPreparedStatement::__construct</FName>
    <Desc>public MysqlndUhPreparedStatement::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>MysqlndUhPreparedStatement::execute</FName>
    <Desc>public bool MysqlndUhPreparedStatement::execute ( mysqlnd_prepared_statement $statement )
Executes a prepared Query.
</Desc>
    <FName>MysqlndUhPreparedStatement::prepare</FName>
    <Desc>public bool MysqlndUhPreparedStatement::prepare ( mysqlnd_prepared_statement $statement , string $query )
Prepare an SQL statement for execution.
</Desc>
    <FName>NoRewindIterator::__construct</FName>
    <Desc>public NoRewindIterator::__construct ( Iterator $iterator )
Constructs a NoRewindIterator.
</Desc>
    <FName>NoRewindIterator::current</FName>
    <Desc>public mixed NoRewindIterator::current ( void )
Gets the current value. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>NoRewindIterator::getInnerIterator</FName>
    <Desc>public iterator NoRewindIterator::getInnerIterator ( void )
Gets the inner iterator, that was passed in to NoRewindIterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>NoRewindIterator::key</FName>
    <Desc>public mixed NoRewindIterator::key ( void )
Gets the current key. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>NoRewindIterator::next</FName>
    <Desc>public void NoRewindIterator::next ( void )
Forwards to the next element. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>NoRewindIterator::rewind</FName>
    <Desc>public void NoRewindIterator::rewind ( void )
Prevents the rewind operation on the inner iterator.
</Desc>
    <FName>NoRewindIterator::valid</FName>
    <Desc>public bool NoRewindIterator::valid ( void )
Checks whether the iterator is valid. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Normalizer::getRawDecomposition</FName>
    <Desc>Object oriented style
public static string Normalizer::getRawDecomposition ( string $input )
Procedural style
string normalizer_get_raw_decomposition ( string $input )
Gets the Decomposition_Mapping property, as specified in the Unicode Character Database (UCD), for the given UTF-8 encoded code point.
</Desc>
    <FName>normalizer_get_raw_decomposition</FName>
    <Desc>Object oriented style
public static string Normalizer::getRawDecomposition ( string $input )
Procedural style
string normalizer_get_raw_decomposition ( string $input )
Gets the Decomposition_Mapping property, as specified in the Unicode Character Database (UCD), for the given UTF-8 encoded code point.
</Desc>
    <FName>Normalizer::isNormalized</FName>
    <Desc>Object oriented style
public static bool Normalizer::isNormalized ( string $input [, int $form = Normalizer::FORM_C ] )
Procedural style
bool normalizer_is_normalized ( string $input [, int $form = Normalizer::FORM_C ] )
Checks if the provided string is already in the specified normalization form.
</Desc>
    <FName>normalizer_is_normalized</FName>
    <Desc>Object oriented style
public static bool Normalizer::isNormalized ( string $input [, int $form = Normalizer::FORM_C ] )
Procedural style
bool normalizer_is_normalized ( string $input [, int $form = Normalizer::FORM_C ] )
Checks if the provided string is already in the specified normalization form.
</Desc>
    <FName>Normalizer::normalize</FName>
    <Desc>Object oriented style
public static string Normalizer::normalize ( string $input [, int $form = Normalizer::FORM_C ] )
Procedural style
string normalizer_normalize ( string $input [, int $form = Normalizer::FORM_C ] )
Normalizes the input provided and returns the normalized string
</Desc>
    <FName>normalizer_normalize</FName>
    <Desc>Object oriented style
public static string Normalizer::normalize ( string $input [, int $form = Normalizer::FORM_C ] )
Procedural style
string normalizer_normalize ( string $input [, int $form = Normalizer::FORM_C ] )
Normalizes the input provided and returns the normalized string
</Desc>
    <FName>NumberFormatter::create</FName>
    <Desc>Object oriented style (method) 
public static NumberFormatter NumberFormatter::create ( string $locale , int $style [, string $pattern ] )
Procedural style 
NumberFormatter numfmt_create ( string $locale , int $style [, string $pattern ] )
Object oriented style (constructor): 
public NumberFormatter::__construct ( string $locale , int $style [, string $pattern ] )
Creates a number formatter.
</Desc>
    <FName>numfmt_create</FName>
    <Desc>Object oriented style (method) 
public static NumberFormatter NumberFormatter::create ( string $locale , int $style [, string $pattern ] )
Procedural style 
NumberFormatter numfmt_create ( string $locale , int $style [, string $pattern ] )
Object oriented style (constructor): 
public NumberFormatter::__construct ( string $locale , int $style [, string $pattern ] )
Creates a number formatter.
</Desc>
    <FName>NumberFormatter::format</FName>
    <Desc>Object oriented style 
public string NumberFormatter::format ( number $value [, int $type ] )
Procedural style 
string numfmt_format ( NumberFormatter $fmt , number $value [, int $type ] )
Format a numeric value according to the formatter rules.
</Desc>
    <FName>numfmt_format</FName>
    <Desc>Object oriented style 
public string NumberFormatter::format ( number $value [, int $type ] )
Procedural style 
string numfmt_format ( NumberFormatter $fmt , number $value [, int $type ] )
Format a numeric value according to the formatter rules.
</Desc>
    <FName>NumberFormatter::formatCurrency</FName>
    <Desc>Object oriented style 
public string NumberFormatter::formatCurrency ( float $value , string $currency )
Procedural style 
string numfmt_format_currency ( NumberFormatter $fmt , float $value , string $currency )
Format the currency value according to the formatter rules.
</Desc>
    <FName>numfmt_format_currency</FName>
    <Desc>Object oriented style 
public string NumberFormatter::formatCurrency ( float $value , string $currency )
Procedural style 
string numfmt_format_currency ( NumberFormatter $fmt , float $value , string $currency )
Format the currency value according to the formatter rules.
</Desc>
    <FName>NumberFormatter::getAttribute</FName>
    <Desc>Object oriented style 
public int NumberFormatter::getAttribute ( int $attr )
Procedural style 
int numfmt_get_attribute ( NumberFormatter $fmt , int $attr )
Get a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.
</Desc>
    <FName>numfmt_get_attribute</FName>
    <Desc>Object oriented style 
public int NumberFormatter::getAttribute ( int $attr )
Procedural style 
int numfmt_get_attribute ( NumberFormatter $fmt , int $attr )
Get a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.
</Desc>
    <FName>NumberFormatter::getErrorCode</FName>
    <Desc>Object oriented style 
public int NumberFormatter::getErrorCode ( void )
Procedural style 
int numfmt_get_error_code ( NumberFormatter $fmt )
Get error code from the last function performed by the formatter.
</Desc>
    <FName>numfmt_get_error_code</FName>
    <Desc>Object oriented style 
public int NumberFormatter::getErrorCode ( void )
Procedural style 
int numfmt_get_error_code ( NumberFormatter $fmt )
Get error code from the last function performed by the formatter.
</Desc>
    <FName>NumberFormatter::getErrorMessage</FName>
    <Desc>Object oriented style 
public string NumberFormatter::getErrorMessage ( void )
Procedural style 
string numfmt_get_error_message ( NumberFormatter $fmt )
Get error message from the last function performed by the formatter.
</Desc>
    <FName>numfmt_get_error_message</FName>
    <Desc>Object oriented style 
public string NumberFormatter::getErrorMessage ( void )
Procedural style 
string numfmt_get_error_message ( NumberFormatter $fmt )
Get error message from the last function performed by the formatter.
</Desc>
    <FName>NumberFormatter::getLocale</FName>
    <Desc>Object oriented style 
public string NumberFormatter::getLocale ([ int $type ] )
Procedural style 
string numfmt_get_locale ( NumberFormatter $fmt [, int $type ] )
Get formatter locale name.
</Desc>
    <FName>numfmt_get_locale</FName>
    <Desc>Object oriented style 
public string NumberFormatter::getLocale ([ int $type ] )
Procedural style 
string numfmt_get_locale ( NumberFormatter $fmt [, int $type ] )
Get formatter locale name.
</Desc>
    <FName>NumberFormatter::getPattern</FName>
    <Desc>Object oriented style 
public string NumberFormatter::getPattern ( void )
Procedural style 
string numfmt_get_pattern ( NumberFormatter $fmt )
Extract pattern used by the formatter.
</Desc>
    <FName>numfmt_get_pattern</FName>
    <Desc>Object oriented style 
public string NumberFormatter::getPattern ( void )
Procedural style 
string numfmt_get_pattern ( NumberFormatter $fmt )
Extract pattern used by the formatter.
</Desc>
    <FName>NumberFormatter::getSymbol</FName>
    <Desc>Object oriented style 
public string NumberFormatter::getSymbol ( int $attr )
Procedural style 
string numfmt_get_symbol ( NumberFormatter $fmt , int $attr )
Get a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.
</Desc>
    <FName>numfmt_get_symbol</FName>
    <Desc>Object oriented style 
public string NumberFormatter::getSymbol ( int $attr )
Procedural style 
string numfmt_get_symbol ( NumberFormatter $fmt , int $attr )
Get a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.
</Desc>
    <FName>NumberFormatter::getTextAttribute</FName>
    <Desc>Object oriented style 
public string NumberFormatter::getTextAttribute ( int $attr )
Procedural style 
string numfmt_get_text_attribute ( NumberFormatter $fmt , int $attr )
Get a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.
</Desc>
    <FName>numfmt_get_text_attribute</FName>
    <Desc>Object oriented style 
public string NumberFormatter::getTextAttribute ( int $attr )
Procedural style 
string numfmt_get_text_attribute ( NumberFormatter $fmt , int $attr )
Get a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.
</Desc>
    <FName>NumberFormatter::parse</FName>
    <Desc>Object oriented style 
public mixed NumberFormatter::parse ( string $value [, int $type [, int &$position ]] )
Procedural style 
mixed numfmt_parse ( NumberFormatter $fmt , string $value [, int $type [, int &$position ]] )
Parse a string into a number using the current formatter rules.
</Desc>
    <FName>numfmt_parse</FName>
    <Desc>Object oriented style 
public mixed NumberFormatter::parse ( string $value [, int $type [, int &$position ]] )
Procedural style 
mixed numfmt_parse ( NumberFormatter $fmt , string $value [, int $type [, int &$position ]] )
Parse a string into a number using the current formatter rules.
</Desc>
    <FName>NumberFormatter::parseCurrency</FName>
    <Desc>Object oriented style 
public float NumberFormatter::parseCurrency ( string $value , string &$currency [, int &$position ] )
Procedural style 
float numfmt_parse_currency ( NumberFormatter $fmt , string $value , string &$currency [, int &$position ] )
Parse a string into a double and a currency using the current formatter.
</Desc>
    <FName>numfmt_parse_currency</FName>
    <Desc>Object oriented style 
public float NumberFormatter::parseCurrency ( string $value , string &$currency [, int &$position ] )
Procedural style 
float numfmt_parse_currency ( NumberFormatter $fmt , string $value , string &$currency [, int &$position ] )
Parse a string into a double and a currency using the current formatter.
</Desc>
    <FName>NumberFormatter::setAttribute</FName>
    <Desc>Object oriented style 
public bool NumberFormatter::setAttribute ( int $attr , int $value )
Procedural style 
bool numfmt_set_attribute ( NumberFormatter $fmt , int $attr , int $value )
Set a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.
</Desc>
    <FName>numfmt_set_attribute</FName>
    <Desc>Object oriented style 
public bool NumberFormatter::setAttribute ( int $attr , int $value )
Procedural style 
bool numfmt_set_attribute ( NumberFormatter $fmt , int $attr , int $value )
Set a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.
</Desc>
    <FName>NumberFormatter::setPattern</FName>
    <Desc>Object oriented style 
public bool NumberFormatter::setPattern ( string $pattern )
Procedural style 
bool numfmt_set_pattern ( NumberFormatter $fmt , string $pattern )
Set the pattern used by the formatter. Can not be used on a rule-based formatter.
</Desc>
    <FName>numfmt_set_pattern</FName>
    <Desc>Object oriented style 
public bool NumberFormatter::setPattern ( string $pattern )
Procedural style 
bool numfmt_set_pattern ( NumberFormatter $fmt , string $pattern )
Set the pattern used by the formatter. Can not be used on a rule-based formatter.
</Desc>
    <FName>NumberFormatter::setSymbol</FName>
    <Desc>Object oriented style 
public bool NumberFormatter::setSymbol ( int $attr , string $value )
Procedural style 
bool numfmt_set_symbol ( NumberFormatter $fmt , int $attr , string $value )
Set a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.
</Desc>
    <FName>numfmt_set_symbol</FName>
    <Desc>Object oriented style 
public bool NumberFormatter::setSymbol ( int $attr , string $value )
Procedural style 
bool numfmt_set_symbol ( NumberFormatter $fmt , int $attr , string $value )
Set a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.
</Desc>
    <FName>NumberFormatter::setTextAttribute</FName>
    <Desc>Object oriented style 
public bool NumberFormatter::setTextAttribute ( int $attr , string $value )
Procedural style 
bool numfmt_set_text_attribute ( NumberFormatter $fmt , int $attr , string $value )
Set a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.
</Desc>
    <FName>numfmt_set_text_attribute</FName>
    <Desc>Object oriented style 
public bool NumberFormatter::setTextAttribute ( int $attr , string $value )
Procedural style 
bool numfmt_set_text_attribute ( NumberFormatter $fmt , int $attr , string $value )
Set a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.
</Desc>
    <FName>OAuth::__construct</FName>
    <Desc>public OAuth::__construct ( string $consumer_key , string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0 ]] )
Creates a new OAuth object
</Desc>
    <FName>OAuth::__destruct</FName>
    <Desc>public void OAuth::__destruct ( void )
The destructor. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuth::disableDebug</FName>
    <Desc>public bool OAuth::disableDebug ( void )
Turns off verbose request information (off by default). Alternatively, the debug property can be set to a FALSE value to turn debug off.
</Desc>
    <FName>OAuth::disableRedirects</FName>
    <Desc>public bool OAuth::disableRedirects ( void )
Disable redirects from being followed automatically, thus allowing the request to be manually redirected. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuth::disableSSLChecks</FName>
    <Desc>public bool OAuth::disableSSLChecks ( void )
Turns off the usual SSL peer certificate and host checks, this is not for production environments. Alternatively, the sslChecks member can be set to FALSE to turn SSL checks off.
</Desc>
    <FName>OAuth::enableDebug</FName>
    <Desc>public bool OAuth::enableDebug ( void )
Turns on verbose request information useful for debugging, the debug information is stored in the debugInfo member. Alternatively, the debug member can be set to a non-FALSE value to turn debug on.
</Desc>
    <FName>OAuth::enableRedirects</FName>
    <Desc>public bool OAuth::enableRedirects ( void )
Follow and sign redirects automatically, which is enabled by default. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuth::enableSSLChecks</FName>
    <Desc>public bool OAuth::enableSSLChecks ( void )
Turns on the usual SSL peer certificate and host checks (enabled by default). Alternatively, the sslChecks member can be set to a non-FALSE value to turn SSL checks off.
</Desc>
    <FName>OAuth::fetch</FName>
    <Desc>public mixed OAuth::fetch ( string $protected_resource_url [, array $extra_parameters [, string $http_method [, array $http_headers ]]] )
Fetch a resource.
</Desc>
    <FName>OAuth::generateSignature</FName>
    <Desc>public string OAuth::generateSignature ( string $http_method , string $url [, mixed $extra_parameters ] )
Generate a signature based on the final HTTP method, URL and a string/array of parameters.
</Desc>
    <FName>OAuth::getAccessToken</FName>
    <Desc>public array OAuth::getAccessToken ( string $access_token_url [, string $auth_session_handle [, string $verifier_token [, string $http_method ]]] )
Fetch an access token, secret and any additional response parameters from the service provider.
</Desc>
    <FName>OAuth::getCAPath</FName>
    <Desc>public array OAuth::getCAPath ( void )
Gets the Certificate Authority information, which includes the ca_path and ca_info set by OAuth::setCaPath(). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuth::getLastResponse</FName>
    <Desc>public string OAuth::getLastResponse ( void )
Get the raw response of the most recent request.
</Desc>
    <FName>OAuth::getLastResponseHeaders</FName>
    <Desc>public string OAuth::getLastResponseHeaders ( void )
Get headers for last response.
</Desc>
    <FName>OAuth::getLastResponseInfo</FName>
    <Desc>public array OAuth::getLastResponseInfo ( void )
Get HTTP information about the last response.
</Desc>
    <FName>OAuth::getRequestHeader</FName>
    <Desc>public string OAuth::getRequestHeader ( string $http_method , string $url [, mixed $extra_parameters ] )
Generate OAuth header string signature based on the final HTTP method, URL and a string/array of parameters
</Desc>
    <FName>OAuth::getRequestToken</FName>
    <Desc>public array OAuth::getRequestToken ( string $request_token_url [, string $callback_url [, string $http_method ]] )
Fetch a request token, secret and any additional response parameters from the service provider.
</Desc>
    <FName>OAuth::setAuthType</FName>
    <Desc>public bool OAuth::setAuthType ( int $auth_type )
Set where the OAuth parameters should be passed.
</Desc>
    <FName>OAuth::setCAPath</FName>
    <Desc>public mixed OAuth::setCAPath ([ string $ca_path [, string $ca_info ]] )
Sets the Certificate Authority (CA), both for path and info. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuth::setNonce</FName>
    <Desc>public mixed OAuth::setNonce ( string $nonce )
Sets the nonce for all subsequent requests.
</Desc>
    <FName>OAuth::setRequestEngine</FName>
    <Desc>public void OAuth::setRequestEngine ( int $reqengine )
Sets the Request Engine, that will be sending the HTTP requests. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuth::setRSACertificate</FName>
    <Desc>public mixed OAuth::setRSACertificate ( string $cert )
Sets the RSA certificate. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuth::setSSLChecks</FName>
    <Desc>public bool OAuth::setSSLChecks ( int $sslcheck )
Tweak specific SSL checks for requests. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuth::setTimestamp</FName>
    <Desc>public mixed OAuth::setTimestamp ( string $timestamp )
Sets the OAuth timestamp for subsequent requests. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuth::setToken</FName>
    <Desc>public bool OAuth::setToken ( string $token , string $token_secret )
Set the token and secret for subsequent requests.
</Desc>
    <FName>OAuth::setVersion</FName>
    <Desc>public bool OAuth::setVersion ( string $version )
Sets the OAuth version for subsequent requests
</Desc>
    <FName>OAuthProvider::addRequiredParameter</FName>
    <Desc>final public bool OAuthProvider::addRequiredParameter ( string $req_params )
Add required oauth provider parameters. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::callconsumerHandler</FName>
    <Desc>public void OAuthProvider::callconsumerHandler ( void )
Calls the registered consumer handler callback function, which is set with OAuthProvider::consumerHandler(). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::callTimestampNonceHandler</FName>
    <Desc>public void OAuthProvider::callTimestampNonceHandler ( void )
Calls the registered timestamp handler callback function, which is set with OAuthProvider::timestampNonceHandler(). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::calltokenHandler</FName>
    <Desc>public void OAuthProvider::calltokenHandler ( void )
Calls the registered token handler callback function, which is set with OAuthProvider::tokenHandler(). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::checkOAuthRequest</FName>
    <Desc>public void OAuthProvider::checkOAuthRequest ([ string $uri [, string $method ]] )
Checks an OAuth request. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::__construct</FName>
    <Desc>public OAuthProvider::__construct ([ array $params_array ] )
Initiates a new OAuthProvider object. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::consumerHandler</FName>
    <Desc>public void OAuthProvider::consumerHandler ( callable $callback_function )
Sets the consumer handler callback, which will later be called with OAuthProvider::callConsumerHandler(). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::generateToken</FName>
    <Desc>final public static string OAuthProvider::generateToken ( int $size [, bool $strong = FALSE ] )
Generates a string of pseudo-random bytes.
</Desc>
    <FName>OAuthProvider::is2LeggedEndpoint</FName>
    <Desc>public void OAuthProvider::is2LeggedEndpoint ( mixed $params_array )
The 2-legged flow, or request signing. It does not require a token. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::isRequestTokenEndpoint</FName>
    <Desc>public void OAuthProvider::isRequestTokenEndpoint ( bool $will_issue_request_token )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::removeRequiredParameter</FName>
    <Desc>final public bool OAuthProvider::removeRequiredParameter ( string $req_params )
Removes a required parameter. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::reportProblem</FName>
    <Desc>final public static string OAuthProvider::reportProblem ( string $oauthexception [, bool $send_headers = TRUE ] )
Pass in a problem as an OAuthException, with possible problems listed in the OAuth constants section. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::setParam</FName>
    <Desc>final public bool OAuthProvider::setParam ( string $param_key [, mixed $param_val ] )
Sets a parameter. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::setRequestTokenPath</FName>
    <Desc>final public bool OAuthProvider::setRequestTokenPath ( string $path )
Sets the request tokens path. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::timestampNonceHandler</FName>
    <Desc>public void OAuthProvider::timestampNonceHandler ( callable $callback_function )
Sets the timestamp nonce handler callback, which will later be called with OAuthProvider::callTimestampNonceHandler(). Errors related to timestamp/nonce are thrown to this callback. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OAuthProvider::tokenHandler</FName>
    <Desc>public void OAuthProvider::tokenHandler ( callable $callback_function )
Sets the token handler callback, which will later be called with OAuthProvider::callTokenHandler(). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>OCI-Collection::append</FName>
    <Desc>bool OCI-Collection::append ( mixed $value )
Appends element to the end of the collection.
</Desc>
    <FName>OCI-Collection::assign</FName>
    <Desc>bool OCI-Collection::assign ( OCI-Collection $from )
Assigns a value to the collection from another, previously created collection. Both collections must be created with oci_new_collection() prior to using them.
</Desc>
    <FName>OCI-Collection::assignElem</FName>
    <Desc>bool OCI-Collection::assignElem ( int $index , mixed $value )
Assigns a value to the element with index index.
</Desc>
    <FName>OCI-Collection::free</FName>
    <Desc>bool OCI-Collection::free ( void )
Frees the resources associated with the collection object.
</Desc>
    <FName>OCI-Collection::getElem</FName>
    <Desc>mixed OCI-Collection::getElem ( int $index )
Returns element's value with the index index (0-based).
</Desc>
    <FName>OCI-Collection::max</FName>
    <Desc>int OCI-Collection::max ( void )
Returns the maximum number of elements in the collection.
</Desc>
    <FName>OCI-Collection::size</FName>
    <Desc>int OCI-Collection::size ( void )
Returns the size of the collection.
</Desc>
    <FName>OCI-Collection::trim</FName>
    <Desc>bool OCI-Collection::trim ( int $num )
Trims num of elements from the end of the collection.
</Desc>
    <FName>OCI-Lob::append</FName>
    <Desc>bool OCI-Lob::append ( OCI-Lob $lob_from )
Appends data from the large object to the end of another large object. 
Writing to the large object with this method will fail if buffering was previously enabled. You must disable buffering before appending. You may need to flush buffers with OCI-Lob::flush before disabling buffering.
</Desc>
    <FName>OCI-Lob::close</FName>
    <Desc>bool OCI-Lob::close ( void )
Closes descriptor of LOB or FILE. This function should be used only with OCI-Lob::writeTemporary.
</Desc>
    <FName>OCI-Lob::eof</FName>
    <Desc>bool OCI-Lob::eof ( void )
Tells whether the internal pointer of large object is at the end of LOB.
</Desc>
    <FName>OCI-Lob::erase</FName>
    <Desc>int OCI-Lob::erase ([ int $offset [, int $length ]] )
Erases a specified portion of the internal LOB data starting at a specified offset. If called without parameters, it erases all LOB data. 
For BLOBs, erasing means that the existing LOB value is overwritten with zero-bytes. For CLOBs, the existing LOB value is overwritten with spaces.
</Desc>
    <FName>OCI-Lob::export</FName>
    <Desc>bool OCI-Lob::export ( string $filename [, int $start [, int $length ]] )
Exports LOB contents to a file.
</Desc>
    <FName>OCI-Lob::flush</FName>
    <Desc>bool OCI-Lob::flush ([ int $flag ] )
OCI-Lob::flush() actually writes data to the server.
</Desc>
    <FName>OCI-Lob::free</FName>
    <Desc>bool OCI-Lob::free ( void )
Frees resources associated with the descriptor, previously allocated with oci_new_descriptor().
</Desc>
    <FName>OCI-Lob::getBuffering</FName>
    <Desc>bool OCI-Lob::getBuffering ( void )
Tells whether the buffering for the large object is on or off.
</Desc>
    <FName>OCI-Lob::import</FName>
    <Desc>bool OCI-Lob::import ( string $filename )
Writes data from the filename in to the current position of large object.
</Desc>
    <FName>OCI-Lob::load</FName>
    <Desc>string OCI-Lob::load ( void )
Returns large object's contents. As script execution is terminated when the memory_limit is reached, ensure that the LOB does not exceed this limit. In most cases it's recommended to use OCI-Lob::read instead.
</Desc>
    <FName>OCI-Lob::read</FName>
    <Desc>string OCI-Lob::read ( int $length )
Reads length bytes from the current position of LOB's internal pointer. 
Reading stops when length bytes have been read or end of the large object is reached. Internal pointer of the large object will be shifted on the amount of bytes read.
</Desc>
    <FName>OCI-Lob::rewind</FName>
    <Desc>bool OCI-Lob::rewind ( void )
Sets the internal pointer to the beginning of the large object.
</Desc>
    <FName>OCI-Lob::save</FName>
    <Desc>bool OCI-Lob::save ( string $data [, int $offset ] )
Saves data to the large object.
</Desc>
    <FName>OCI-Lob::saveFile</FName>
    <Desc>This function is an alias of: OCI-Lob::import(). 
</Desc>
    <FName>OCI-Lob::seek</FName>
    <Desc>bool OCI-Lob::seek ( int $offset [, int $whence = OCI_SEEK_SET ] )
Sets the internal pointer of the large object.
</Desc>
    <FName>OCI-Lob::setBuffering</FName>
    <Desc>bool OCI-Lob::setBuffering ( bool $on_off )
Sets the buffering for the large object, depending on the value of the on_off parameter. 
Use of this function may provide performance improvements by buffering small reads and writes of LOBs by reducing the number of network round-trips and LOB versions. OCI-Lob::flush() should be used to flush buffers, when you have finished working with the large object.
</Desc>
    <FName>OCI-Lob::size</FName>
    <Desc>int OCI-Lob::size ( void )
Gets the size of the large object.
</Desc>
    <FName>OCI-Lob::tell</FName>
    <Desc>int OCI-Lob::tell ( void )
Gets the current position of a LOB's internal pointer.
</Desc>
    <FName>OCI-Lob::truncate</FName>
    <Desc>bool OCI-Lob::truncate ([ int $length = 0 ] )
Truncates the LOB.
</Desc>
    <FName>OCI-Lob::write</FName>
    <Desc>int OCI-Lob::write ( string $data [, int $length ] )
Writes data from the parameter data into the current position of LOB's internal pointer.
</Desc>
    <FName>OCI-Lob::writeTemporary</FName>
    <Desc>bool OCI-Lob::writeTemporary ( string $data [, int $lob_type = OCI_TEMP_CLOB ] )
Creates a temporary large object and writes data to it. 
You should use OCI-Lob::close when you are done with this object.
</Desc>
    <FName>OCI-Lob::writeToFile</FName>
    <Desc>This function is an alias of: OCI-Lob::export(). 
</Desc>
    <FName>OuterIterator::getInnerIterator</FName>
    <Desc>public Iterator OuterIterator::getInnerIterator ( void )
Returns the inner iterator for the current iterator entry.
</Desc>
    <FName>ParentIterator::accept</FName>
    <Desc>public bool ParentIterator::accept ( void )
Determines if the current element has children. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ParentIterator::__construct</FName>
    <Desc>public ParentIterator::__construct ( RecursiveIterator $iterator )
Constructs a ParentIterator on an iterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ParentIterator::getChildren</FName>
    <Desc>public ParentIterator ParentIterator::getChildren ( void )
Get the inner iterator's children contained in a ParentIterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ParentIterator::hasChildren</FName>
    <Desc>public bool ParentIterator::hasChildren ( void )
Check whether the inner iterator's current element has children. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ParentIterator::next</FName>
    <Desc>public void ParentIterator::next ( void )
Moves the iterator forward. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ParentIterator::rewind</FName>
    <Desc>public void ParentIterator::rewind ( void )
Rewinds the iterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Parle\Lexer::advance</FName>
    <Desc>public void Parle\Lexer::advance ( void )
Processes the next rule and prepares the resulting token data.
</Desc>
    <FName>Parle\Lexer::build</FName>
    <Desc>public void Parle\Lexer::build ( void )
Rules, previously added with Parle\Lexer::push() are finalized. This method call has to be done after all the necessary rules was pushed. The rule set becomes read only. The lexing can begin.
</Desc>
    <FName>Parle\Lexer::callout</FName>
    <Desc>public void Parle\Lexer::callout ( int $id , callable $callback )
Define a callback to be invoked once lexer encounters a particular token.
</Desc>
    <FName>Parle\Lexer::consume</FName>
    <Desc>public void Parle\Lexer::consume ( string $data )
Consume the data for lexing.
</Desc>
    <FName>Parle\Lexer::dump</FName>
    <Desc>public void Parle\Lexer::dump ( void )
Dump the current state machine to stdout.
</Desc>
    <FName>Parle\Lexer::getToken</FName>
    <Desc>public Parle\Token Parle\Lexer::getToken ( void )
Retrieve the current token.
</Desc>
    <FName>Parle\Lexer::insertMacro</FName>
    <Desc>public void Parle\Lexer::insertMacro ( string $name , string $regex )
Insert a regex macro, that can be later used as a shortcut and included in other regular expressions.
</Desc>
    <FName>Parle\Lexer::push</FName>
    <Desc>public void Parle\Lexer::push ( string $regex , int $id )
Push a pattern for lexeme recognition.
</Desc>
    <FName>Parle\Lexer::reset</FName>
    <Desc>public void Parle\Lexer::reset ( int $pos )
Reset lexing optionally supplying the desired offset.
</Desc>
    <FName>Parle\Parser::advance</FName>
    <Desc>public void Parle\Parser::advance ( void )
Process next parser rule.
</Desc>
    <FName>Parle\Parser::build</FName>
    <Desc>public void Parle\Parser::build ( void )
Any tokens and grammar rules previously added are finalized. The rule set becomes readonly and the parser is ready to start.
</Desc>
    <FName>Parle\Parser::consume</FName>
    <Desc>public void Parle\Parser::consume ( string $data , Parle\Lexer $lexer )
Consume the data for parsing.
</Desc>
    <FName>Parle\Parser::dump</FName>
    <Desc>public void Parle\Parser::dump ( void )
Dump the current grammar to stdout.
</Desc>
    <FName>Parle\Parser::errorInfo</FName>
    <Desc>public Parle\ErrorInfo Parle\Parser::errorInfo ( void )
Retrieve the error information in case Parle\Parser::action() returned the error action.
</Desc>
    <FName>Parle\Parser::left</FName>
    <Desc>public void Parle\Parser::left ( string $tok )
Declare a terminal with left associativity.
</Desc>
    <FName>Parle\Parser::nonassoc</FName>
    <Desc>public void Parle\Parser::nonassoc ( string $tok )
Declare a terminal, that cannot appear more than once in the row.
</Desc>
    <FName>Parle\Parser::precedence</FName>
    <Desc>public void Parle\Parser::precedence ( string $tok )
Declares a precedence rule for a fictitious terminal symbol. This rule can be later used in the specific grammar rules.
</Desc>
    <FName>Parle\Parser::push</FName>
    <Desc>public int Parle\Parser::push ( string $name , string $rule )
Push a grammar rule. The production id returned can be used later in the parsing process to identify the rule matched.
</Desc>
    <FName>Parle\Parser::reset</FName>
    <Desc>public void Parle\Parser::reset ([ int $tokenId ] )
Reset parser state using the given token id.
</Desc>
    <FName>Parle\Parser::right</FName>
    <Desc>public void Parle\Parser::right ( string $tok )
Declare a terminal with right associativity.
</Desc>
    <FName>Parle\Parser::sigil</FName>
    <Desc>public string Parle\Parser::sigil ([ int $idx ] )
Retrieve a part of the match by a rule. This method is equivalent to the pseudo variable functionality in Bison.
</Desc>
    <FName>Parle\Parser::token</FName>
    <Desc>public void Parle\Parser::token ( string $tok )
Declare a terminal to be used in the grammar.
</Desc>
    <FName>Parle\Parser::tokenId</FName>
    <Desc>public int Parle\Parser::tokenId ( string $tok )
Retrieve the id of the named token.
</Desc>
    <FName>Parle\Parser::trace</FName>
    <Desc>public string Parle\Parser::trace ( void )
Retrieve the current parser operation description. This can be especially useful for studying the parser and to optimize the grammar.
</Desc>
    <FName>Parle\Parser::validate</FName>
    <Desc>public bool Parle\Parser::validate ( string $data , Parle\Lexer $lexer )
Validate an input string. The string is parsed internally, thus this method is useful for the quick input validation.
</Desc>
    <FName>Parle\RLexer::advance</FName>
    <Desc>public void Parle\RLexer::advance ( void )
Processes the next rule and prepares the resulting token data.
</Desc>
    <FName>Parle\RLexer::build</FName>
    <Desc>public void Parle\RLexer::build ( void )
Rules, previously added with Parle\RLexer::push() are finalized. This method call has to be done after all the necessary rules was pushed. The rule set becomes read only. The lexing can begin.
</Desc>
    <FName>Parle\RLexer::callout</FName>
    <Desc>public void Parle\RLexer::callout ( int $id , callable $callback )
Define a callback to be invoked once lexer encounters a particular token.
</Desc>
    <FName>Parle\RLexer::consume</FName>
    <Desc>public void Parle\RLexer::consume ( string $data )
Consume the data for lexing.
</Desc>
    <FName>Parle\RLexer::dump</FName>
    <Desc>public void Parle\RLexer::dump ( void )
Dump the current state machine to stdout.
</Desc>
    <FName>Parle\RLexer::getToken</FName>
    <Desc>public Parle\Token Parle\RLexer::getToken ( void )
Retrive the current token.
</Desc>
    <FName>Parle\RLexer::insertMacro</FName>
    <Desc>public void Parle\RLexer::insertMacro ( string $name , string $regex )
Insert a regex macro, that can be later used as a shortcut and included in other regular expressions.
</Desc>
    <FName>Parle\RLexer::push</FName>
    <Desc>public void Parle\RLexer::push ( string $regex , int $id )
public void Parle\RLexer::push ( string $state , string $regex , int $id , string $newState )
public void Parle\RLexer::push ( string $state , string $regex , string $newState )
Push a pattern for lexeme recognition. 
A 'start state' and 'exit state' can be specified by using a suitable signature.
</Desc>
    <FName>Parle\RLexer::pushState</FName>
    <Desc>public int Parle\RLexer::pushState ( string $state )
This lexer type can have more than one state machine. This allows you to lex different tokens depending on context, thus allowing simple parsing to take place. Once a state pushed, it can be used with a suitable Parle\RLexer::push() signature variant.
</Desc>
    <FName>Parle\RLexer::reset</FName>
    <Desc>public void Parle\RLexer::reset ( int $pos )
Reset lexing optionally supplying the desired offset.
</Desc>
    <FName>Parle\RParser::advance</FName>
    <Desc>public void Parle\RParser::advance ( void )
Prosess next parser rule.
</Desc>
    <FName>Parle\RParser::build</FName>
    <Desc>public void Parle\RParser::build ( void )
Any tokens and grammar rules previously added are finalized. The rule set becomes readonly and the parser is ready to start.
</Desc>
    <FName>Parle\RParser::consume</FName>
    <Desc>public void Parle\RParser::consume ( string $data , Parle\RLexer $rlexer )
Consume the data for parsing.
</Desc>
    <FName>Parle\RParser::dump</FName>
    <Desc>public void Parle\RParser::dump ( void )
Dump the current grammar to stdout.
</Desc>
    <FName>Parle\RParser::errorInfo</FName>
    <Desc>public Parle\ErrorInfo Parle\RParser::errorInfo ( void )
Retrieve the error information in case Parle\RParser::action() returned the error action.
</Desc>
    <FName>Parle\RParser::left</FName>
    <Desc>public void Parle\RParser::left ( string $tok )
Declare a terminal with left associativity.
</Desc>
    <FName>Parle\RParser::nonassoc</FName>
    <Desc>public void Parle\RParser::nonassoc ( string $tok )
Declare a terminal, that cannot appear more than once in the row.
</Desc>
    <FName>Parle\RParser::precedence</FName>
    <Desc>public void Parle\RParser::precedence ( string $tok )
Declares a precedence rule for a fictious terminal symbol. This rule can be later used in the specific grammar rules.
</Desc>
    <FName>Parle\RParser::push</FName>
    <Desc>public int Parle\RParser::push ( string $name , string $rule )
Push a grammar rule. The production id returned can be used later in the parsing process to identify the rule matched.
</Desc>
    <FName>Parle\RParser::reset</FName>
    <Desc>public void Parle\RParser::reset ([ int $tokenId ] )
Reset parser state using the given token id.
</Desc>
    <FName>Parle\RParser::right</FName>
    <Desc>public void Parle\RParser::right ( string $tok )
Declare a terminal with right associativity.
</Desc>
    <FName>Parle\RParser::sigil</FName>
    <Desc>public string Parle\RParser::sigil ([ int $idx ] )
Retrieve a part of the match by a rule. This method is equivalent to the pseudo variable functionality in Bison.
</Desc>
    <FName>Parle\RParser::token</FName>
    <Desc>public void Parle\RParser::token ( string $tok )
Declare a terminal to be used in the grammar.
</Desc>
    <FName>Parle\RParser::tokenId</FName>
    <Desc>public int Parle\RParser::tokenId ( string $tok )
Retrieve the id of the named token.
</Desc>
    <FName>Parle\RParser::trace</FName>
    <Desc>public string Parle\RParser::trace ( void )
Retrieve the current parser operation description. This can be especially useful to study the parser and to optimize the grammar.
</Desc>
    <FName>Parle\RParser::validate</FName>
    <Desc>public bool Parle\RParser::validate ( string $data , Parle\RLexer $lexer )
Validate an input string. The string is parsed internally, thus this method is useful for the quick input validation.
</Desc>
    <FName>Parle\Stack::pop</FName>
    <Desc>public void Parle\Stack::pop ( void )
</Desc>
    <FName>Parle\Stack::push</FName>
    <Desc>public void Parle\Stack::push ( mixed $item )
</Desc>
    <FName>PDO::beginTransaction</FName>
    <Desc>public bool PDO::beginTransaction ( void )
Turns off autocommit mode. While autocommit mode is turned off, changes made to the database via the PDO object instance are not committed until you end the transaction by calling PDO::commit(). Calling PDO::rollBack() will roll back all changes to the database and return the connection to autocommit mode. 
Some databases, including MySQL, automatically issue an implicit COMMIT when a database definition language (DDL) statement such as DROP TABLE or CREATE TABLE is issued within a transaction. The implicit COMMIT will prevent you from rolling back any other changes within the transaction boundary.
</Desc>
    <FName>PDO::commit</FName>
    <Desc>public bool PDO::commit ( void )
Commits a transaction, returning the database connection to autocommit mode until the next call to PDO::beginTransaction() starts a new transaction.
</Desc>
    <FName>PDO::__construct</FName>
    <Desc>public PDO::__construct ( string $dsn [, string $username [, string $passwd [, array $options ]]] )
Creates a PDO instance to represent a connection to the requested database.
</Desc>
    <FName>PDO::cubrid_schema</FName>
    <Desc>public array PDO::cubrid_schema ( int $schema_type [, string $table_name [, string $col_name ]] )
This function is used to get the requested schema information from database. You have to designate table_name, if you want to get information on certain table, col_name, if you want to get information on certain column (can be used only with PDO::CUBRID_SCH_COL_PRIVILEGE). 
The result of this function is returned as a two-dimensional array (column (associative array) * row (numeric array)). The following tables shows types of schema and the column structure of the result array to be returned based on the schema type. 
Result Composition of Each TypeSchemaColumn NumberColumn NameValue
PDO::CUBRID_SCH_TABLE1NAME 
 2TYPE0:system table 1:view 2:table
PDO::CUBRID_SCH_VIEW1NAME 
 2TYPE1:view
PDO::CUBRID_SCH_QUERY_SPEC1QUERY_SPEC 
PDO::CUBRID_SCH_ATTRIBUTE / PDO::CUBRID_SCH_TABLE_ATTRIBUTE1ATTR_NAME 
 2DOMAIN 
 3SCALE 
 4PRECISION 
 5INDEXED1:indexed
 6NOT NULL1:not null
 7SHARED1:shared
 8UNIQUE1:unique
 9DEFAULT 
 10ATTR_ORDERbase:1
 11CLASS_NAME 
 12SOURCE_CLASS 
 13IS_KEY1:key
PDO::CUBRID_SCH_METHOD / PDO::CUBRID_SCH_TABLE_METHOD1NAME 
 2RET_DOMAIN 
 3ARG_DOMAIN 
PDO::CUBRID_SCH_METHOD_FILE1METHOD_FILE 
PDO::CUBRID_SCH_SUPER_TABLE / PDO::CUBRID_SCH_DIRECT_SUPER_TABLE / PDO::CUBRID_SCH_SUB_TABLE1CLASS_NAME 
 2TYPE0:system table 1:view 2:table
PDO::CUBRID_SCH_CONSTRAINT1TYPE0:unique 1:index 2:reverse unique 3:reverse index
 2NAME 
 3ATTR_NAME 
 4NUM_PAGES 
 5NUM_KEYS 
 6PRIMARY_KEY1:primary key
 7KEY_ORDERbase:1
PDO::CUBRID_SCH_TRIGGER1NAME 
 2STATUS 
 3EVENT 
 4TARGET_CLASS 
 5TARGET_ATTR 
 6ACTION_TIME 
 7ACTION 
 8PRIORITY 
 9CONDITION_TIME 
 10CONDITION 
PDO::CUBRID_SCH_TABLE_PRIVILEGE / PDO::CUBRID_SCH_COL_PRIVILEGE1CLASS_NAME / ATTR_NAME 
 2PRIVILEGE 
 3GRANTABLE 
PDO::CUBRID_SCH_PRIMARY_KEY1CLASS_NAME 
 2ATTR_NAME 
 3KEY_SEQbase:1
 4KEY_NAME 
PDO::CUBRID_SCH_IMPORTED_KEYS / PDO::CUBRID_SCH_EXPORTED_KEYS / PDO::CUBRID_SCH_CROSS_REFERENCE1PKTABLE_NAME 
 2PKCOLUMN_NAME 
 3FKTABLE_NAMEbase:1
 4FKCOLUMN_NAME 
 5KEY_SEQbase:1
 6UPDATE_ACTION0:cascade 1:restrict 2:no action 3:set null
 7DELETE_ACTION0:cascade 1:restrict 2:no action 3:set null
 8FK_NAME 
 9PK_NAME
</Desc>
    <FName>PDO::errorCode</FName>
    <Desc>public string PDO::errorCode ( void )
</Desc>
    <FName>PDO::errorInfo</FName>
    <Desc>public array PDO::errorInfo ( void )
</Desc>
    <FName>PDO::exec</FName>
    <Desc>public int PDO::exec ( string $statement )
PDO::exec() executes an SQL statement in a single function call, returning the number of rows affected by the statement. 
PDO::exec() does not return results from a SELECT statement. For a SELECT statement that you only need to issue once during your program, consider issuing PDO::query(). For a statement that you need to issue multiple times, prepare a PDOStatement object with PDO::prepare() and issue the statement with PDOStatement::execute().
</Desc>
    <FName>PDO::getAttribute</FName>
    <Desc>public mixed PDO::getAttribute ( int $attribute )
This function returns the value of a database connection attribute. To retrieve PDOStatement attributes, refer to PDOStatement::getAttribute(). 
Note that some database/driver combinations may not support all of the database connection attributes.
</Desc>
    <FName>PDO::getAvailableDrivers</FName>
    <Desc>public static array PDO::getAvailableDrivers ( void )
array pdo_drivers ( void )
This function returns all currently available PDO drivers which can be used in DSN parameter of PDO::__construct().
</Desc>
    <FName>pdo_drivers</FName>
    <Desc>public static array PDO::getAvailableDrivers ( void )
array pdo_drivers ( void )
This function returns all currently available PDO drivers which can be used in DSN parameter of PDO::__construct().
</Desc>
    <FName>PDO::inTransaction</FName>
    <Desc>public bool PDO::inTransaction ( void )
Checks if a transaction is currently active within the driver. This method only works for database drivers that support transactions.
</Desc>
    <FName>PDO::lastInsertId</FName>
    <Desc>public string PDO::lastInsertId ([ string $name = NULL ] )
Returns the ID of the last inserted row, or the last value from a sequence object, depending on the underlying driver. For example, PDO_PGSQL requires you to specify the name of a sequence object for the name parameter. 
Note: 
This method may not return a meaningful or consistent result across different PDO drivers, because the underlying database may not even support the notion of auto-increment fields or sequences.
</Desc>
    <FName>PDO::pgsqlCopyFromArray</FName>
    <Desc>public bool PDO::pgsqlCopyFromArray ( string $table_name , array $rows [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] )
Copies data from rows array to table table_name using delimiter as fields delimiter and fields list
</Desc>
    <FName>PDO::pgsqlCopyFromFile</FName>
    <Desc>public bool PDO::pgsqlCopyFromFile ( string $table_name , string $filename [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] )
Copies data from file specified by filename into table table_name using delimiter as fields delimiter and fields list
</Desc>
    <FName>PDO::pgsqlCopyToArray</FName>
    <Desc>public array PDO::pgsqlCopyToArray ( string $table_name [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] )
Copies data from table into array using delimiter as fields delimiter and fields list
</Desc>
    <FName>PDO::pgsqlCopyToFile</FName>
    <Desc>public bool PDO::pgsqlCopyToFile ( string $table_name , string $filename [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] )
Copies data from table into file specified by filename using delimiter as fields delimiter and fields list
</Desc>
    <FName>PDO::pgsqlGetNotify</FName>
    <Desc>public array PDO::pgsqlGetNotify ([ int $result_type = PDO::FETCH_USE_DEFAULT [, int $ms_timeout = 0 ]] )
Returns a result set representing a pending asynchronous notification.
</Desc>
    <FName>PDO::pgsqlGetPid</FName>
    <Desc>public int PDO::pgsqlGetPid ( void )
Returns the server's PID.
</Desc>
    <FName>PDO::pgsqlLOBCreate</FName>
    <Desc>public string PDO::pgsqlLOBCreate ( void )
PDO::pgsqlLOBCreate() creates a large object and returns the OID of that object. You may then open a stream on the object using PDO::pgsqlLOBOpen() to read or write data to it. The OID can be stored in columns of type OID and be used to reference the large object, without causing the row to grow arbitrarily large. The large object will continue to live in the database until it is removed by calling PDO::pgsqlLOBUnlink(). 
Large objects can be up to 2GB in size, but are cumbersome to use; you need to ensure that PDO::pgsqlLOBUnlink() is called prior to deleting the last row that references its OID from your database. In addition, large objects have no access controls. As an alternative, try the bytea column type; recent versions of PostgreSQL allow bytea columns of up to 1GB in size and transparently manage the storage for optimal row size. 
Note: This function must be called within a transaction.
</Desc>
    <FName>PDO::pgsqlLOBOpen</FName>
    <Desc>public resource PDO::pgsqlLOBOpen ( string $oid [, string $mode = "rb" ] )
PDO::pgsqlLOBOpen() opens a stream to access the data referenced by oid. If mode is r, the stream is opened for reading, if mode is w, then the stream will be opened for writing. You can use all the usual filesystem functions, such as fread(), fwrite() and fgets() to manipulate the contents of the stream. 
Note: This function, and all manipulations of the large object, must be called and carried out within a transaction.
</Desc>
    <FName>PDO::pgsqlLOBUnlink</FName>
    <Desc>public bool PDO::pgsqlLOBUnlink ( string $oid )
Deletes a large object from the database identified by OID. 
Note: This function must be called within a transaction.
</Desc>
    <FName>PDO::prepare</FName>
    <Desc>public PDOStatement PDO::prepare ( string $statement [, array $driver_options = array() ] )
Prepares an SQL statement to be executed by the PDOStatement::execute() method. The SQL statement can contain zero or more named (:name) or question mark (?) parameter markers for which real values will be substituted when the statement is executed. You cannot use both named and question mark parameter markers within the same SQL statement; pick one or the other parameter style. Use these parameters to bind any user-input, do not include the user-input directly in the query. 
You must include a unique parameter marker for each value you wish to pass in to the statement when you call PDOStatement::execute(). You cannot use a named parameter marker of the same name more than once in a prepared statement, unless emulation mode is on. 
Note: 
Parameter markers can represent a complete data literal only. Neither part of literal, nor keyword, nor identifier, nor whatever arbitrary query part can be bound using parameters. For example, you cannot bind multiple values to a single parameter in the IN() clause of an SQL statement. 
Calling PDO::prepare() and PDOStatement::execute() for statements that will be issued multiple times with different parameter values optimizes the performance of your application by allowing the driver to negotiate client and/or server side caching of the query plan and meta information, and helps to prevent SQL injection attacks by eliminating the need to manually quote the parameters. 
PDO will emulate prepared statements/bound parameters for drivers that do not natively support them, and can also rewrite named or question mark style parameter markers to something more appropriate, if the driver supports one style but not the other.
</Desc>
    <FName>PDO::query</FName>
    <Desc>public PDOStatement PDO::query ( string $statement )
public PDOStatement PDO::query ( string $statement , int $PDO::FETCH_COLUMN , int $colno )
public PDOStatement PDO::query ( string $statement , int $PDO::FETCH_CLASS , string $classname , array $ctorargs )
public PDOStatement PDO::query ( string $statement , int $PDO::FETCH_INTO , object $object )
PDO::query() executes an SQL statement in a single function call, returning the result set (if any) returned by the statement as a PDOStatement object. 
For a query that you need to issue multiple times, you will realize better performance if you prepare a PDOStatement object using PDO::prepare() and issue the statement with multiple calls to PDOStatement::execute(). 
If you do not fetch all of the data in a result set before issuing your next call to PDO::query(), your call may fail. Call PDOStatement::closeCursor() to release the database resources associated with the PDOStatement object before issuing your next call to PDO::query(). 
Note: 
If more than one argument is passed to this function, the remaining arguments will be treated as though you called PDOStatement::setFetchMode() on the resultant statement object.
</Desc>
    <FName>PDO::quote</FName>
    <Desc>public string PDO::quote ( string $string [, int $parameter_type = PDO::PARAM_STR ] )
PDO::quote() places quotes around the input string (if required) and escapes special characters within the input string, using a quoting style appropriate to the underlying driver. 
If you are using this function to build SQL statements, you are strongly recommended to use PDO::prepare() to prepare SQL statements with bound parameters instead of using PDO::quote() to interpolate user input into an SQL statement. Prepared statements with bound parameters are not only more portable, more convenient, immune to SQL injection, but are often much faster to execute than interpolated queries, as both the server and client side can cache a compiled form of the query. 
Not all PDO drivers implement this method (notably PDO_ODBC). Consider using prepared statements instead. 
Caution 
Security: the default character set
The character set must be set either on the server level, or within the database connection itself (depending on the driver) for it to affect PDO::quote(). See the driver-specific documentation for more information.
</Desc>
    <FName>PDO::rollBack</FName>
    <Desc>public bool PDO::rollBack ( void )
Rolls back the current transaction, as initiated by PDO::beginTransaction(). 
If the database was set to autocommit mode, this function will restore autocommit mode after it has rolled back the transaction. 
Some databases, including MySQL, automatically issue an implicit COMMIT when a database definition language (DDL) statement such as DROP TABLE or CREATE TABLE is issued within a transaction. The implicit COMMIT will prevent you from rolling back any other changes within the transaction boundary.
</Desc>
    <FName>PDO::setAttribute</FName>
    <Desc>public bool PDO::setAttribute ( int $attribute , mixed $value )
Sets an attribute on the database handle. Some of the available generic attributes are listed below; some drivers may make use of additional driver specific attributes. 
PDO::ATTR_CASE: Force column names to a specific case. 
PDO::CASE_LOWER: Force column names to lower case. 
PDO::CASE_NATURAL: Leave column names as returned by the database driver. 
PDO::CASE_UPPER: Force column names to upper case. 
PDO::ATTR_ERRMODE: Error reporting. 
PDO::ERRMODE_SILENT: Just set error codes.
PDO::ERRMODE_WARNING: Raise E_WARNING.
PDO::ERRMODE_EXCEPTION: Throw exceptions.
PDO::ATTR_ORACLE_NULLS (available with all drivers, not just Oracle): Conversion of NULL and empty strings. 
PDO::NULL_NATURAL: No conversion.
PDO::NULL_EMPTY_STRING: Empty string is converted to NULL.
PDO::NULL_TO_STRING: NULL is converted to an empty string.
PDO::ATTR_STRINGIFY_FETCHES: Convert numeric values to strings when fetching. Requires bool. 
PDO::ATTR_STATEMENT_CLASS: Set user-supplied statement class derived from PDOStatement. Cannot be used with persistent PDO instances. Requires array(string classname, array(mixed constructor_args)). 
PDO::ATTR_TIMEOUT: Specifies the timeout duration in seconds. Not all drivers support this option, and its meaning may differ from driver to driver. For example, sqlite will wait for up to this time value before giving up on obtaining an writable lock, but other drivers may interpret this as a connect or a read timeout interval. Requires int. 
PDO::ATTR_AUTOCOMMIT (available in OCI, Firebird and MySQL): Whether to autocommit every single statement. 
PDO::ATTR_EMULATE_PREPARES Enables or disables emulation of prepared statements. Some drivers do not support native prepared statements or have limited support for them. Use this setting to force PDO to either always emulate prepared statements (if TRUE and emulated prepares are supported by the driver), or to try to use native prepared statements (if FALSE). It will always fall back to emulating the prepared statement if the driver cannot successfully prepare the current query. Requires bool. 
PDO::MYSQL_ATTR_USE_BUFFERED_QUERY (available in MySQL): Use buffered queries. 
PDO::ATTR_DEFAULT_FETCH_MODE: Set default fetch mode. Description of modes is available in PDOStatement::fetch() documentation.
</Desc>
    <FName>PDO::sqliteCreateAggregate</FName>
    <Desc>public bool PDO::sqliteCreateAggregate ( string $function_name , callable $step_func , callable $finalize_func [, int $num_args ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
This method is similar to PDO::sqliteCreateFunction except that it registers functions that can be used to calculate a result aggregated across all the rows of a query. 
The key difference between this method and PDO::sqliteCreateFunction is that two functions are required to manage the aggregate.
</Desc>
    <FName>PDO::sqliteCreateCollation</FName>
    <Desc>public bool PDO::sqliteCreateCollation ( string $name , callable $callback )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>PDO::sqliteCreateFunction</FName>
    <Desc>public bool PDO::sqliteCreateFunction ( string $function_name , callable $callback [, int $num_args = -1 [, int $flags = 0 ]] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
This method allows you to register a PHP function with SQLite as an UDF (User Defined Function), so that it can be called from within your SQL statements. 
The UDF can be used in any SQL statement that can call functions, such as SELECT and UPDATE statements and also in triggers.
</Desc>
    <FName>PDOStatement::bindColumn</FName>
    <Desc>public bool PDOStatement::bindColumn ( mixed $column , mixed &$param [, int $type [, int $maxlen [, mixed $driverdata ]]] )
PDOStatement::bindColumn() arranges to have a particular variable bound to a given column in the result-set from a query. Each call to PDOStatement::fetch() or PDOStatement::fetchAll() will update all the variables that are bound to columns. 
Note: 
Since information about the columns is not always available to PDO until the statement is executed, portable applications should call this function after PDOStatement::execute(). 
However, to be able to bind a LOB column as a stream when using the PgSQL driver, applications should call this method before calling PDOStatement::execute(), otherwise the large object OID will be returned as an integer.
</Desc>
    <FName>PDOStatement::bindParam</FName>
    <Desc>public bool PDOStatement::bindParam ( mixed $parameter , mixed &$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options ]]] )
Binds a PHP variable to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement. Unlike PDOStatement::bindValue(), the variable is bound as a reference and will only be evaluated at the time that PDOStatement::execute() is called. 
Most parameters are input parameters, that is, parameters that are used in a read-only fashion to build up the query. Some drivers support the invocation of stored procedures that return data as output parameters, and some also as input/output parameters that both send in data and are updated to receive it.
</Desc>
    <FName>PDOStatement::bindValue</FName>
    <Desc>public bool PDOStatement::bindValue ( mixed $parameter , mixed $value [, int $data_type = PDO::PARAM_STR ] )
Binds a value to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement.
</Desc>
    <FName>PDOStatement::closeCursor</FName>
    <Desc>public bool PDOStatement::closeCursor ( void )
PDOStatement::closeCursor() frees up the connection to the server so that other SQL statements may be issued, but leaves the statement in a state that enables it to be executed again. 
This method is useful for database drivers that do not support executing a PDOStatement object when a previously executed PDOStatement object still has unfetched rows. If your database driver suffers from this limitation, the problem may manifest itself in an out-of-sequence error. 
PDOStatement::closeCursor() is implemented either as an optional driver specific method (allowing for maximum efficiency), or as the generic PDO fallback if no driver specific function is installed. The PDO generic fallback is semantically the same as writing the following code in your PHP script: 
<?php
do {
    while ($stmt->fetch())
        ;
    if (!$stmt->nextRowset())
        break;
} while (true);
?>
</Desc>
    <FName>PDOStatement::columnCount</FName>
    <Desc>public int PDOStatement::columnCount ( void )
Use PDOStatement::columnCount() to return the number of columns in the result set represented by the PDOStatement object. 
If the PDOStatement object was returned from PDO::query(), the column count is immediately available. 
If the PDOStatement object was returned from PDO::prepare(), an accurate column count will not be available until you invoke PDOStatement::execute().
</Desc>
    <FName>PDOStatement::debugDumpParams</FName>
    <Desc>public void PDOStatement::debugDumpParams ( void )
Dumps the information contained by a prepared statement directly on the output. It will provide the SQL query in use, the number of parameters used (Params), the list of parameters with their key name or position, their name, their position in the query (if this is supported by the PDO driver, otherwise, it will be -1), type (param_type) as an integer, and a boolean value is_param. 
This is a debug function, which dumps the data directly to the normal output. 
Tip
As with anything that outputs its result directly to the browser, the output-control functions can be used to capture the output of this function, and save it in a string (for example).
This will only dump the parameters in the statement at the moment of the dump. Extra parameters are not stored in the statement, and not displayed.
</Desc>
    <FName>PDOStatement::errorCode</FName>
    <Desc>public string PDOStatement::errorCode ( void )
</Desc>
    <FName>PDOStatement::errorInfo</FName>
    <Desc>public array PDOStatement::errorInfo ( void )
</Desc>
    <FName>PDOStatement::execute</FName>
    <Desc>public bool PDOStatement::execute ([ array $input_parameters ] )
Execute the prepared statement. If the prepared statement included parameter markers, either: 
PDOStatement::bindParam() and/or PDOStatement::bindValue() has to be called to bind either variables or values (respectively) to the parameter markers. Bound variables pass their value as input and receive the output value, if any, of their associated parameter markers
or an array of input-only parameter values has to be passed
</Desc>
    <FName>PDOStatement::fetch</FName>
    <Desc>public mixed PDOStatement::fetch ([ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0 ]]] )
Fetches a row from a result set associated with a PDOStatement object. The fetch_style parameter determines how PDO returns the row.
</Desc>
    <FName>PDOStatement::fetchAll</FName>
    <Desc>public array PDOStatement::fetchAll ([ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array() ]]] )
</Desc>
    <FName>PDOStatement::fetchColumn</FName>
    <Desc>public mixed PDOStatement::fetchColumn ([ int $column_number = 0 ] )
Returns a single column from the next row of a result set or FALSE if there are no more rows. 
Note: 
PDOStatement::fetchColumn() should not be used to retrieve boolean columns, as it is impossible to distinguish a value of FALSE from there being no more rows to retrieve. Use PDOStatement::fetch() instead.
</Desc>
    <FName>PDOStatement::fetchObject</FName>
    <Desc>public mixed PDOStatement::fetchObject ([ string $class_name = "stdClass" [, array $ctor_args ]] )
Fetches the next row and returns it as an object. This function is an alternative to PDOStatement::fetch() with PDO::FETCH_CLASS or PDO::FETCH_OBJ style. 
When an object is fetched, its properties are assigned from respective column values, and afterwards its constructor is invoked.
</Desc>
    <FName>PDOStatement::getAttribute</FName>
    <Desc>public mixed PDOStatement::getAttribute ( int $attribute )
Gets an attribute of the statement. Currently, no generic attributes exist but only driver specific: 
PDO::ATTR_CURSOR_NAME (Firebird and ODBC specific): Get the name of cursor for UPDATE ... WHERE CURRENT OF.
</Desc>
    <FName>PDOStatement::getColumnMeta</FName>
    <Desc>public array PDOStatement::getColumnMeta ( int $column )
Retrieves the metadata for a 0-indexed column in a result set as an associative array. 
Warning 
Not all PDO drivers support PDOStatement::getColumnMeta(). 
The following drivers support this method:
PDO_DBLIB 
PDO_MYSQL 
PDO_PGSQL 
PDO_SQLITE
</Desc>
    <FName>PDOStatement::nextRowset</FName>
    <Desc>public bool PDOStatement::nextRowset ( void )
Some database servers support stored procedures that return more than one rowset (also known as a result set). PDOStatement::nextRowset() enables you to access the second and subsequent rowsets associated with a PDOStatement object. Each rowset can have a different set of columns from the preceding rowset.
</Desc>
    <FName>PDOStatement::rowCount</FName>
    <Desc>public int PDOStatement::rowCount ( void )
PDOStatement::rowCount() returns the number of rows affected by the last DELETE, INSERT, or UPDATE statement executed by the corresponding PDOStatement object. 
If the last SQL statement executed by the associated PDOStatement was a SELECT statement, some databases may return the number of rows returned by that statement. However, this behaviour is not guaranteed for all databases and should not be relied on for portable applications.
</Desc>
    <FName>PDOStatement::setAttribute</FName>
    <Desc>public bool PDOStatement::setAttribute ( int $attribute , mixed $value )
Sets an attribute on the statement. Currently, no generic attributes are set but only driver specific: 
PDO::ATTR_CURSOR_NAME (Firebird and ODBC specific): Set the name of cursor for UPDATE ... WHERE CURRENT OF.
</Desc>
    <FName>PDOStatement::setFetchMode</FName>
    <Desc>public bool PDOStatement::setFetchMode ( int $mode )
public bool PDOStatement::setFetchMode ( int $PDO::FETCH_COLUMN , int $colno )
public bool PDOStatement::setFetchMode ( int $PDO::FETCH_CLASS , string $classname , array $ctorargs )
public bool PDOStatement::setFetchMode ( int $PDO::FETCH_INTO , object $object )
</Desc>
    <FName>Phar::addEmptyDir</FName>
    <Desc>public void Phar::addEmptyDir ( string $dirname )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
With this method, an empty directory is created with path dirname. This method is similar to ZipArchive::addEmptyDir().
</Desc>
    <FName>Phar::addFile</FName>
    <Desc>public void Phar::addFile ( string $file [, string $localname ] )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
With this method, any file or URL can be added to the phar archive. If the optional second parameter localname is specified, the file will be stored in the archive with that name, otherwise the file parameter is used as the path to store within the archive. URLs must have a localname or an exception is thrown. This method is similar to ZipArchive::addFile().
</Desc>
    <FName>Phar::addFromString</FName>
    <Desc>public void Phar::addFromString ( string $localname , string $contents )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
With this method, any string can be added to the phar archive. The file will be stored in the archive with localname as its path. This method is similar to ZipArchive::addFromString().
</Desc>
    <FName>Phar::apiVersion</FName>
    <Desc>final public static string Phar::apiVersion ( void )
Return the API version of the phar file format that will be used when creating phars. The Phar extension supports reading API version 1.0.0 or newer. API version 1.1.0 is required for SHA-256 and SHA-512 hash, and API version 1.1.1 is required to store empty directories.
</Desc>
    <FName>Phar::buildFromDirectory</FName>
    <Desc>public array Phar::buildFromDirectory ( string $base_dir [, string $regex ] )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
Populate a phar archive from directory contents. The optional second parameter is a regular expression (pcre) that is used to exclude files. Any filename that matches the regular expression will be included, all others will be excluded. For more fine-grained control, use Phar::buildFromIterator().
</Desc>
    <FName>Phar::buildFromIterator</FName>
    <Desc>public array Phar::buildFromIterator ( Iterator $iter [, string $base_directory ] )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
Populate a phar archive from an iterator. Two styles of iterators are supported, iterators that map the filename within the phar to the name of a file on disk, and iterators like DirectoryIterator that return SplFileInfo objects. For iterators that return SplFileInfo objects, the second parameter is required.
</Desc>
    <FName>Phar::canCompress</FName>
    <Desc>final public static bool Phar::canCompress ([ int $type = 0 ] )
This should be used to test whether compression is possible prior to loading a phar archive containing compressed files.
</Desc>
    <FName>Phar::canWrite</FName>
    <Desc>final public static bool Phar::canWrite ( void )
This static method determines whether write access has been disabled in the system php.ini via the phar.readonly ini variable.
</Desc>
    <FName>Phar::compress</FName>
    <Desc>public object Phar::compress ( int $compression [, string $extension ] )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
For tar-based and phar-based phar archives, this method compresses the entire archive using gzip compression or bzip2 compression. The resulting file can be processed with the gunzip command/bunzip command, or accessed directly and transparently with the Phar extension. 
For Zip-based phar archives, this method fails with an exception. The zlib extension must be enabled to compress with gzip compression, the bzip2 extension must be enabled in order to compress with bzip2 compression. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed. 
In addition, this method automatically renames the archive, appending .gz, .bz2 or removing the extension if passed Phar::NONE to remove compression. Alternatively, a file extension may be specified with the second parameter.
</Desc>
    <FName>Phar::compressAllFilesBZIP2</FName>
    <Desc>public bool Phar::compressAllFilesBZIP2 ( void )
Note: 
This method has been removed from the phar extension as of version 2.0.0. Alternative implementations are available using Phar::compress(), Phar::decompress(), Phar::compressFiles() and Phar::decompressFiles().
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
This method compresses all files in the Phar archive using bzip2 compression. The bzip2 extension must be enabled to take advantage of this feature. In addition, if any files are already compressed using gzip compression, the zlib extension must be enabled in order to decompress the files prior to re-compressing with bzip2 compression. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed.
</Desc>
    <FName>Phar::compressAllFilesGZ</FName>
    <Desc>public bool Phar::compressAllFilesGZ ( void )
Note: 
This method has been removed from the phar extension as of version 2.0.0. Alternative implementations are available using Phar::compress(), Phar::decompress(), Phar::compressFiles() and Phar::decompressFiles().
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
For tar-based phar archives, this method compresses the entire archive using gzip compression. The resulting file can be processed with the gunzip command, or accessed directly and transparently with the Phar extension. 
For Zip-based and phar-based phar archives, this method compresses all files in the Phar archive using gzip compression. The zlib extension must be enabled to take advantage of this feature. In addition, if any files are already compressed using bzip2 compression, the bzip2 extension must be enabled in order to decompress the files prior to re-compressing with gzip compression. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed.
</Desc>
    <FName>Phar::compressFiles</FName>
    <Desc>public void Phar::compressFiles ( int $compression )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
For tar-based phar archives, this method throws a BadMethodCallException, as compression of individual files within a tar archive is not supported by the file format. Use Phar::compress() to compress an entire tar-based phar archive. 
For Zip-based and phar-based phar archives, this method compresses all files in the Phar archive using the specified compression. The zlib or bzip2 extensions must be enabled to take advantage of this feature. In addition, if any files are already compressed using bzip2/zlib compression, the respective extension must be enabled in order to decompress the files prior to re-compressing. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed.
</Desc>
    <FName>Phar::__construct</FName>
    <Desc>public Phar::__construct ( string $fname [, int $flags [, string $alias ]] )
</Desc>
    <FName>Phar::convertToData</FName>
    <Desc>public PharData Phar::convertToData ([ int $format = 9021976 [, int $compression = 9021976 [, string $extension ]]] )
This method is used to convert an executable phar archive to either a tar or zip file. To make the tar or zip non-executable, the phar stub and phar alias files are removed from the newly created archive. 
If no changes are specified, this method throws a BadMethodCallException if the archive is in phar file format. For archives in tar or zip file format, this method converts the archive to a non-executable archive. 
If successful, the method creates a new archive on disk and returns a PharData object. The old archive is not removed from disk, and should be done manually after the process has finished.
</Desc>
    <FName>Phar::convertToExecutable</FName>
    <Desc>public Phar Phar::convertToExecutable ([ int $format = 9021976 [, int $compression = 9021976 [, string $extension ]]] )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
This method is used to convert a phar archive to another file format. For instance, it can be used to create a tar-based executable phar archive from a zip-based executable phar archive, or from an executable phar archive in the phar file format. In addition, it can be used to apply whole-archive compression to a tar or phar-based archive. 
If no changes are specified, this method throws a BadMethodCallException. 
If successful, the method creates a new archive on disk and returns a Phar object. The old archive is not removed from disk, and should be done manually after the process has finished.
</Desc>
    <FName>Phar::copy</FName>
    <Desc>public bool Phar::copy ( string $oldfile , string $newfile )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
Copy a file internal to the phar archive to another new file within the phar. This is an object-oriented alternative to using copy() with the phar stream wrapper.
</Desc>
    <FName>Phar::count</FName>
    <Desc>public int Phar::count ( void )
</Desc>
    <FName>Phar::createDefaultStub</FName>
    <Desc>final public static string Phar::createDefaultStub ([ string $indexfile [, string $webindexfile ]] )
This method is intended for creation of phar-file format-specific stubs, and is not intended for use with tar- or zip-based phar archives. 
Phar archives contain a bootstrap loader, or stub written in PHP that is executed when the archive is executed in PHP either via include: 
<?php
include 'myphar.phar';
?> 
or by simple execution: 
php myphar.phar
    This method provides a simple and easy method to create a stub that will run a startup file from the phar archive. In addition, different files can be specified for running the phar archive from the command line versus through a web server. The loader stub also calls Phar::interceptFileFuncs() to allow easy bundling of a PHP application that accesses the file system. If the phar extension is not present, the loader stub will extract the phar archive to a temporary directory and then operate on the files. A shutdown function erases the temporary files on exit.
</Desc>
    <FName>Phar::decompress</FName>
    <Desc>public object Phar::decompress ([ string $extension ] )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
For tar-based and phar-based phar archives, this method decompresses the entire archive. 
For Zip-based phar archives, this method fails with an exception. The zlib extension must be enabled to decompress an archive compressed with gzip compression, and the bzip2 extension must be enabled in order to decompress an archive compressed with bzip2 compression. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed. 
In addition, this method automatically changes the file extension of the archive, .phar by default for phar archives, or .phar.tar for tar-based phar archives. Alternatively, a file extension may be specified with the second parameter.
</Desc>
    <FName>Phar::decompressFiles</FName>
    <Desc>public bool Phar::decompressFiles ( void )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
For tar-based phar archives, this method throws a BadMethodCallException, as compression of individual files within a tar archive is not supported by the file format. Use Phar::compress() to compress an entire tar-based phar archive. 
For Zip-based and phar-based phar archives, this method decompresses all files in the Phar archive. The zlib or bzip2 extensions must be enabled to take advantage of this feature if any files are compressed using bzip2/zlib compression. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed.
</Desc>
    <FName>Phar::delete</FName>
    <Desc>public bool Phar::delete ( string $entry )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
Delete a file within an archive. This is the functional equivalent of calling unlink() on the stream wrapper equivalent, as shown in the example below.
</Desc>
    <FName>Phar::delMetadata</FName>
    <Desc>public bool Phar::delMetadata ( void )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
Deletes the global metadata of the phar
</Desc>
    <FName>Phar::extractTo</FName>
    <Desc>public bool Phar::extractTo ( string $pathto [, string|array $files [, bool $overwrite = FALSE ]] )
Extract all files within a phar archive to disk. Extracted files and directories preserve permissions as stored in the archive. The optional parameters allow optional control over which files are extracted, and whether existing files on disk can be overwritten. The second parameter files can be either the name of a file or directory to extract, or an array of names of files and directories to extract. By default, this method will not overwrite existing files, the third parameter can be set to true to enable overwriting of files. This method is similar to ZipArchive::extractTo().
</Desc>
    <FName>Phar::getAlias</FName>
    <Desc>public string Phar::getAlias ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Phar::getMetadata</FName>
    <Desc>public mixed Phar::getMetadata ( void )
Retrieve archive meta-data. Meta-data can be any PHP variable that can be serialized.
</Desc>
    <FName>Phar::getModified</FName>
    <Desc>public bool Phar::getModified ( void )
This method can be used to determine whether a phar has either had an internal file deleted, or contents of a file changed in some way.
</Desc>
    <FName>Phar::getPath</FName>
    <Desc>public string Phar::getPath ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Phar::getSignature</FName>
    <Desc>public array Phar::getSignature ( void )
Returns the verification signature of a phar archive in a hexadecimal string.
</Desc>
    <FName>Phar::getStub</FName>
    <Desc>public string Phar::getStub ( void )
Phar archives contain a bootstrap loader, or stub written in PHP that is executed when the archive is executed in PHP either via include: 
<?php
include 'myphar.phar';
?> 
or by simple execution: 
php myphar.phar
</Desc>
    <FName>Phar::getSupportedCompression</FName>
    <Desc>final public static array Phar::getSupportedCompression ( void )
</Desc>
    <FName>Phar::getSupportedSignatures</FName>
    <Desc>final public static array Phar::getSupportedSignatures ( void )
Return array of supported signature types
</Desc>
    <FName>Phar::getVersion</FName>
    <Desc>public string Phar::getVersion ( void )
Returns the API version of an opened Phar archive.
</Desc>
    <FName>Phar::hasMetadata</FName>
    <Desc>public bool Phar::hasMetadata ( void )
Returns whether phar has global meta-data set.
</Desc>
    <FName>Phar::interceptFileFuncs</FName>
    <Desc>final public static void Phar::interceptFileFuncs ( void )
instructs phar to intercept fopen(), readfile(), file_get_contents(), opendir(), and all of the stat-related functions. If any of these functions is called from within a phar archive with a relative path, the call is modified to access a file within the phar archive. Absolute paths are assumed to be attempts to load external files from the filesystem. 
This function makes it possible to run PHP applications designed to run off of a hard disk as a phar application.
</Desc>
    <FName>Phar::isBuffering</FName>
    <Desc>public bool Phar::isBuffering ( void )
This method can be used to determine whether a Phar will save changes to disk immediately, or whether a call to Phar::stopBuffering() is needed to enable saving changes. 
Phar write buffering is per-archive, buffering active for the foo.phar Phar archive does not affect changes to the bar.phar Phar archive.
</Desc>
    <FName>Phar::isCompressed</FName>
    <Desc>public mixed Phar::isCompressed ( void )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on). Zip-based phar archives cannot be compressed as a file, and so this method will always return FALSE if a zip-based phar archive is queried.
</Desc>
    <FName>Phar::isFileFormat</FName>
    <Desc>public bool Phar::isFileFormat ( int $format )
</Desc>
    <FName>Phar::isValidPharFilename</FName>
    <Desc>final public static bool Phar::isValidPharFilename ( string $filename [, bool $executable = TRUE ] )
Returns whether the given filename is a valid phar filename that will be recognized as a phar archive by the phar extension. This can be used to test a name without having to instantiate a phar archive and catch the inevitable Exception that will be thrown if an invalid name is specified.
</Desc>
    <FName>Phar::isWritable</FName>
    <Desc>public bool Phar::isWritable ( void )
This method returns TRUE if phar.readonly is 0, and the actual phar archive on disk is not read-only.
</Desc>
    <FName>Phar::loadPhar</FName>
    <Desc>final public static bool Phar::loadPhar ( string $filename [, string $alias ] )
This can be used to read the contents of an external Phar archive. This is most useful for assigning an alias to a phar so that subsequent references to the phar can use the shorter alias, or for loading Phar archives that only contain data and are not intended for execution/inclusion in PHP scripts.
</Desc>
    <FName>Phar::mapPhar</FName>
    <Desc>final public static bool Phar::mapPhar ([ string $alias [, int $dataoffset = 0 ]] )
This static method can only be used inside a Phar archive's loader stub in order to initialize the phar when it is directly executed, or when it is included in another script.
</Desc>
    <FName>Phar::mount</FName>
    <Desc>final public static void Phar::mount ( string $pharpath , string $externalpath )
Much like the unix file system concept of mounting external devices to paths within the directory tree, Phar::mount() allows referring to external files and directories as if they were inside of an archive. This allows powerful abstraction such as referring to external configuration files as if they were inside the archive.
</Desc>
    <FName>Phar::mungServer</FName>
    <Desc>final public static void Phar::mungServer ( array $munglist )
Phar::mungServer() should only be called within the stub of a phar archive. 
Defines a list of up to 4 $_SERVER variables that should be modified for execution. Variables that can be modified to remove traces of phar execution are REQUEST_URI, PHP_SELF, SCRIPT_NAME and SCRIPT_FILENAME. 
On its own, this method does nothing. Only when combined with Phar::webPhar() does it take effect, and only when the requested file is a PHP file to be parsed. Note that the PATH_INFO and PATH_TRANSLATED variables are always modified. 
The original values of variables that are modified are stored in the SERVER array with PHAR_ prepended, so for instance SCRIPT_NAME would be saved as PHAR_SCRIPT_NAME.
</Desc>
    <FName>Phar::offsetExists</FName>
    <Desc>public bool Phar::offsetExists ( string $offset )
This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a Phar archive using array access brackets. 
offsetExists() is called whenever isset() is called.
</Desc>
    <FName>Phar::offsetGet</FName>
    <Desc>public int Phar::offsetGet ( string $offset )
This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a Phar archive using array access brackets. Phar::offsetGet() is used for retrieving files from a Phar archive.
</Desc>
    <FName>Phar::offsetSet</FName>
    <Desc>public void Phar::offsetSet ( string $offset , string $value )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a Phar archive using array access brackets. offsetSet is used for modifying an existing file, or adding a new file to a Phar archive.
</Desc>
    <FName>Phar::offsetUnset</FName>
    <Desc>public bool Phar::offsetUnset ( string $offset )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a Phar archive using array access brackets. offsetUnset is used for deleting an existing file, and is called by the unset() language construct.
</Desc>
    <FName>Phar::running</FName>
    <Desc>final public static string Phar::running ([ bool $retphar = TRUE ] )
Returns the full path to the running phar archive. This is intended for use much like the __FILE__ magic constant, and only has effect inside an executing phar archive. 
Inside the stub of an archive, Phar::running() returns "". Simply use __FILE__ to access the current running phar inside a stub.
</Desc>
    <FName>Phar::setAlias</FName>
    <Desc>public bool Phar::setAlias ( string $alias )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
Set the alias for the Phar archive, and write it as the permanent alias for this phar archive. An alias can be used internally to a phar archive to ensure that use of the phar stream wrapper to access internal files always works regardless of the location of the phar archive on the filesystem. Another alternative is to rely upon Phar's interception of include or to use Phar::interceptFileFuncs() and use relative paths.
</Desc>
    <FName>Phar::setDefaultStub</FName>
    <Desc>public bool Phar::setDefaultStub ([ string $index [, string $webindex ]] )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
This method is a convenience method that combines the functionality of Phar::createDefaultStub() and Phar::setStub().
</Desc>
    <FName>Phar::setMetadata</FName>
    <Desc>public void Phar::setMetadata ( mixed $metadata )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
Phar::setMetadata() should be used to store customized data that describes something about the phar archive as a complete entity. PharFileInfo::setMetadata() should be used for file-specific meta-data. Meta-data can slow down the performance of loading a phar archive if the data is large. 
Some possible uses for meta-data include specifying which file within the archive should be used to bootstrap the archive, or the location of a file manifest like » PEAR's package.xml file. However, any useful data that describes the phar archive may be stored.
</Desc>
    <FName>Phar::setSignatureAlgorithm</FName>
    <Desc>public void Phar::setSignatureAlgorithm ( int $sigtype [, string $privatekey ] )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
set the signature algorithm for a phar and apply it. The signature algorithm must be one of Phar::MD5, Phar::SHA1, Phar::SHA256, Phar::SHA512, or Phar::OPENSSL. 
Note that all executable phar archives have a signature created automatically, SHA1 by default. data tar- or zip-based archives (archives created with the PharData class) must have their signature created and set explicitly via Phar::setSignatureAlgorithm().
</Desc>
    <FName>Phar::setStub</FName>
    <Desc>public bool Phar::setStub ( string $stub [, int $len = -1 ] )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
This method is used to add a PHP bootstrap loader stub to a new Phar archive, or to replace the loader stub in an existing Phar archive. 
The loader stub for a Phar archive is used whenever an archive is included directly as in this example: 
<?php
include 'myphar.phar';
?> 
The loader is not accessed when including a file through the phar stream wrapper like so: 
<?php
include 'phar://myphar.phar/somefile.php';
?>
</Desc>
    <FName>Phar::startBuffering</FName>
    <Desc>public void Phar::startBuffering ( void )
Although technically unnecessary, the Phar::startBuffering() method can provide a significant performance boost when creating or modifying a Phar archive with a large number of files. Ordinarily, every time a file within a Phar archive is created or modified in any way, the entire Phar archive will be recreated with the changes. In this way, the archive will be up-to-date with the activity performed on it. 
However, this can be unnecessary when simply creating a new Phar archive, when it would make more sense to write the entire archive out at once. Similarly, it is often necessary to make a series of changes and to ensure that they all are possible before making any changes on disk, similar to the relational database concept of transactions. the Phar::startBuffering()/Phar::stopBuffering() pair of methods is provided for this purpose. 
Phar write buffering is per-archive, buffering active for the foo.phar Phar archive does not affect changes to the bar.phar Phar archive.
</Desc>
    <FName>Phar::stopBuffering</FName>
    <Desc>public void Phar::stopBuffering ( void )
Phar::stopBuffering() is used in conjunction with the Phar::startBuffering() method. Phar::startBuffering() can provide a significant performance boost when creating or modifying a Phar archive with a large number of files. Ordinarily, every time a file within a Phar archive is created or modified in any way, the entire Phar archive will be recreated with the changes. In this way, the archive will be up-to-date with the activity performed on it. 
However, this can be unnecessary when simply creating a new Phar archive, when it would make more sense to write the entire archive out at once. Similarly, it is often necessary to make a series of changes and to ensure that they all are possible before making any changes on disk, similar to the relational database concept of transactions. The Phar::startBuffering()/Phar::stopBuffering() pair of methods is provided for this purpose. 
Phar write buffering is per-archive, buffering active for the foo.phar Phar archive does not affect changes to the bar.phar Phar archive.
</Desc>
    <FName>Phar::uncompressAllFiles</FName>
    <Desc>public bool Phar::uncompressAllFiles ( void )
Note: 
This method has been removed from the phar extension as of version 2.0.0. Alternative implementations are available using Phar::compress(), Phar::decompress(), Phar::compressFiles() and Phar::decompressFiles().
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
This method decompresses all files in the Phar archive. If any files are already compressed using gzip compression, the zlib extension must be enabled in order to decompress the files, and any files compressed using bzip2 compression require the bzip2 extension to decompress the files. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed.
</Desc>
    <FName>Phar::unlinkArchive</FName>
    <Desc>final public static bool Phar::unlinkArchive ( string $archive )
Removes a phar archive from disk and memory.
</Desc>
    <FName>Phar::webPhar</FName>
    <Desc>final public static void Phar::webPhar ([ string $alias [, string $index = "index.php" [, string $f404 [, array $mimetypes [, callable $rewrites ]]]]] )
Phar::mapPhar() for web-based phars. This method parses $_SERVER['REQUEST_URI'] and routes a request from a web browser to an internal file within the phar archive. In essence, it simulates a web server, routing requests to the correct file, echoing the correct headers and parsing PHP files as needed. This powerful method is part of what makes it easy to convert an existing PHP application into a phar archive. Combined with Phar::mungServer() and Phar::interceptFileFuncs(), any web application can be used unmodified from a phar archive. 
Phar::webPhar() should only be called from the stub of a phar archive (see here for more information on what a stub is).
</Desc>
    <FName>PharData::addEmptyDir</FName>
    <Desc>void PharData::addEmptyDir ( string $dirname )
With this method, an empty directory is created with path dirname. This method is similar to ZipArchive::addEmptyDir().
</Desc>
    <FName>PharData::addFile</FName>
    <Desc>public void Phar::addFile ( string $file [, string $localname ] )
With this method, any file or URL can be added to the tar/zip archive. If the optional second parameter localname is specified, the file will be stored in the archive with that name, otherwise the file parameter is used as the path to store within the archive. URLs must have a localname or an exception is thrown. This method is similar to ZipArchive::addFile().
</Desc>
    <FName>PharData::addFromString</FName>
    <Desc>void PharData::addFromString ( string $localname , string $contents )
With this method, any string can be added to the tar/zip archive. The file will be stored in the archive with localname as its path. This method is similar to ZipArchive::addFromString().
</Desc>
    <FName>PharData::buildFromDirectory</FName>
    <Desc>public array Phar::buildFromDirectory ( string $base_dir [, string $regex ] )
Populate a tar/zip archive from directory contents. The optional second parameter is a regular expression (pcre) that is used to exclude files. Any filename that matches the regular expression will be included, all others will be excluded. For more fine-grained control, use PharData::buildFromIterator().
</Desc>
    <FName>PharData::buildFromIterator</FName>
    <Desc>array PharData::buildFromIterator ( Iterator $iter [, string $base_directory ] )
Populate a tar or zip archive from an iterator. Two styles of iterators are supported, iterators that map the filename within the tar/zip to the name of a file on disk, and iterators like DirectoryIterator that return SplFileInfo objects. For iterators that return SplFileInfo objects, the second parameter is required.
</Desc>
    <FName>PharData::compress</FName>
    <Desc>object PharData::compress ( int $compression [, string $extension ] )
For tar archives, this method compresses the entire archive using gzip compression or bzip2 compression. The resulting file can be processed with the gunzip command/bunzip command, or accessed directly and transparently with the Phar extension. 
For zip archives, this method fails with an exception. The zlib extension must be enabled to compress with gzip compression, the bzip2 extension must be enabled in order to compress with bzip2 compression. 
In addition, this method automatically renames the archive, appending .gz, .bz2 or removing the extension if passed Phar::NONE to remove compression. Alternatively, a file extension may be specified with the second parameter.
</Desc>
    <FName>PharData::compressFiles</FName>
    <Desc>void PharData::compressFiles ( int $compression )
For tar-based archives, this method throws a BadMethodCallException, as compression of individual files within a tar archive is not supported by the file format. Use PharData::compress() to compress an entire tar-based archive. 
For Zip-based archives, this method compresses all files in the archive using the specified compression. The zlib or bzip2 extensions must be enabled to take advantage of this feature. In addition, if any files are already compressed using bzip2/zlib compression, the respective extension must be enabled in order to decompress the files prior to re-compressing.
</Desc>
    <FName>PharData::__construct</FName>
    <Desc>PharData::__construct ( string $fname [, int $flags [, string $alias [, int $format = Phar::TAR ]]] )
</Desc>
    <FName>PharData::convertToData</FName>
    <Desc>PharData PharData::convertToData ([ int $format [, int $compression [, string $extension ]]] )
This method is used to convert a non-executable tar or zip archive to another non-executable format. 
If no changes are specified, this method throws a BadMethodCallException. This method should be used to convert a tar archive to zip format or vice-versa. Although it is possible to simply change the compression of a tar archive using this method, it is better to use the PharData::compress() method for logical consistency. 
If successful, the method creates a new archive on disk and returns a PharData object. The old archive is not removed from disk, and should be done manually after the process has finished.
</Desc>
    <FName>PharData::convertToExecutable</FName>
    <Desc>Phar PharData::convertToExecutable ([ int $format [, int $compression [, string $extension ]]] )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
This method is used to convert a non-executable tar or zip archive to an executable phar archive. Any of the three executable file formats (phar, tar or zip) can be used, and whole-archive compression can also be performed. 
If no changes are specified, this method throws a BadMethodCallException. 
If successful, the method creates a new archive on disk and returns a Phar object. The old archive is not removed from disk, and should be done manually after the process has finished.
</Desc>
    <FName>PharData::copy</FName>
    <Desc>bool PharData::copy ( string $oldfile , string $newfile )
Copy a file internal to the tar/zip archive to another new file within the same archive. This is an object-oriented alternative to using copy() with the phar stream wrapper.
</Desc>
    <FName>PharData::decompress</FName>
    <Desc>object PharData::decompress ([ string $extension ] )
For tar-based archives, this method decompresses the entire archive. 
For Zip-based archives, this method fails with an exception. The zlib extension must be enabled to decompress an archive compressed with gzip compression, and the bzip2 extension must be enabled in order to decompress an archive compressed with bzip2 compression. 
In addition, this method automatically renames the file extension of the archive, .tar by default. Alternatively, a file extension may be specified with the extension parameter.
</Desc>
    <FName>PharData::decompressFiles</FName>
    <Desc>bool PharData::decompressFiles ( void )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
For tar-based archives, this method throws a BadMethodCallException, as compression of individual files within a tar archive is not supported by the file format. Use PharData::compress() to compress an entire tar-based archive. 
For Zip-based archives, this method decompresses all files in the archive. The zlib or bzip2 extensions must be enabled to take advantage of this feature if any files are compressed using bzip2/zlib compression.
</Desc>
    <FName>PharData::delete</FName>
    <Desc>bool PharData::delete ( string $entry )
Delete a file within an archive. This is the functional equivalent of calling unlink() on the stream wrapper equivalent, as shown in the example below.
</Desc>
    <FName>PharData::delMetadata</FName>
    <Desc>bool PharData::delMetadata ( void )
Note: 
This method requires the php.ini setting phar.readonly to be set to 0 in order to work for Phar objects. Otherwise, a PharException will be thrown.
Deletes the global metadata of the zip archive
</Desc>
    <FName>PharData::extractTo</FName>
    <Desc>bool PharData::extractTo ( string $pathto [, string|array $files [, bool $overwrite = FALSE ]] )
Extract all files within a tar/zip archive to disk. Extracted files and directories preserve permissions as stored in the archive. The optional parameters allow optional control over which files are extracted, and whether existing files on disk can be overwritten. The second parameter files can be either the name of a file or directory to extract, or an array of names of files and directories to extract. By default, this method will not overwrite existing files, the third parameter can be set to true to enable overwriting of files. This method is similar to ZipArchive::extractTo().
</Desc>
    <FName>PharData::isWritable</FName>
    <Desc>bool PharData::isWritable ( void )
This method returns TRUE if the tar/zip archive on disk is not read-only. Unlike Phar::isWritable(), data-only tar/zip archives can be modified even if phar.readonly is set to 1.
</Desc>
    <FName>PharData::offsetSet</FName>
    <Desc>void PharData::offsetSet ( string $offset , string $value )
This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a tar/zip archive using array access brackets. offsetSet is used for modifying an existing file, or adding a new file to a tar/zip archive.
</Desc>
    <FName>PharData::offsetUnset</FName>
    <Desc>bool PharData::offsetUnset ( string $offset )
This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a tar/zip archive using array access brackets. offsetUnset is used for deleting an existing file, and is called by the unset() language construct.
</Desc>
    <FName>PharData::setAlias</FName>
    <Desc>bool PharData::setAlias ( string $alias )
Non-executable tar/zip archives cannot have an alias, so this method simply throws an exception.
</Desc>
    <FName>PharData::setDefaultStub</FName>
    <Desc>bool PharData::setDefaultStub ([ string $index [, string $webindex ]] )
Non-executable tar/zip archives cannot have a stub, so this method simply throws an exception.
</Desc>
    <FName>PharData::setStub</FName>
    <Desc>bool PharData::setStub ( string $stub [, int $len = -1 ] )
Non-executable tar/zip archives cannot have a stub, so this method simply throws an exception.
</Desc>
    <FName>PharException</FName>
</Desc>
    <FName>PharFileInfo::chmod</FName>
    <Desc>public void PharFileInfo::chmod ( int $permissions )
PharFileInfo::chmod() allows setting of the executable file permissions bit, as well as read-only bits. Writeable bits are ignored, and set at runtime based on the phar.readonly INI variable. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed if the file is within a Phar archive. Files within PharData archives do not have this restriction.
</Desc>
    <FName>PharFileInfo::compress</FName>
    <Desc>public bool PharFileInfo::compress ( int $compression )
This method compresses the file inside the Phar archive using either bzip2 compression or zlib compression. The bzip2 or zlib extension must be enabled to take advantage of this feature. In addition, if the file is already compressed, the respective extension must be enabled in order to decompress the file. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed if the file is within a Phar archive. Files within PharData archives do not have this restriction.
</Desc>
    <FName>PharFileInfo::__construct</FName>
    <Desc>public PharFileInfo::__construct ( string $entry )
This should not be called directly. Instead, a PharFileInfo object is initialized by calling Phar::offsetGet() through array access.
</Desc>
    <FName>PharFileInfo::decompress</FName>
    <Desc>public bool PharFileInfo::decompress ( void )
This method decompresses the file inside the Phar archive. Depending on how the file is compressed, the bzip2 or zlib extensions must be enabled to take advantage of this feature. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed if the file is within a Phar archive. Files within PharData archives do not have this restriction.
</Desc>
    <FName>PharFileInfo::delMetadata</FName>
    <Desc>public bool PharFileInfo::delMetadata ( void )
Deletes the metadata of the entry, if any.
</Desc>
    <FName>PharFileInfo::getCompressedSize</FName>
    <Desc>public int PharFileInfo::getCompressedSize ( void )
This returns the size of the file within the Phar archive. Uncompressed files will return the same value for getCompressedSize as they will with filesize()
</Desc>
    <FName>PharFileInfo::getContent</FName>
    <Desc>public string PharFileInfo::getContent ( void )
This function behaves like file_get_contents() but for Phar.
</Desc>
    <FName>PharFileInfo::getCRC32</FName>
    <Desc>public int PharFileInfo::getCRC32 ( void )
This returns the crc32() checksum of the file within the Phar archive.
</Desc>
    <FName>PharFileInfo::getMetadata</FName>
    <Desc>public mixed PharFileInfo::getMetadata ( void )
Return meta-data that was saved in the Phar archive's manifest for this file.
</Desc>
    <FName>PharFileInfo::getPharFlags</FName>
    <Desc>public int PharFileInfo::getPharFlags ( void )
This returns the flags set in the manifest for a Phar. This will always return 0 in the current implementation.
</Desc>
    <FName>PharFileInfo::hasMetadata</FName>
    <Desc>public bool PharFileInfo::hasMetadata ( void )
Returns the metadata of a file within a phar archive.
</Desc>
    <FName>PharFileInfo::isCompressed</FName>
    <Desc>public bool PharFileInfo::isCompressed ([ int $compression_type = 9021976 ] )
This returns whether a file is compressed within a Phar archive with either Gzip or Bzip2 compression.
</Desc>
    <FName>PharFileInfo::isCompressedBZIP2</FName>
    <Desc>public bool PharFileInfo::isCompressedBZIP2 ( void )
Note: 
This method has been removed from the phar extension as of version 2.0.0. Alternative implementations are available using PharFileInfo::isCompressed(), PharFileInfo::decompress(), and PharFileInfo::compress().
This returns whether a file is compressed within a Phar archive with Bzip2 compression.
</Desc>
    <FName>PharFileInfo::isCompressedGZ</FName>
    <Desc>public bool PharFileInfo::isCompressedGZ ( void )
Note: 
This method has been removed from the phar extension as of version 2.0.0. Alternative implementations are available using PharFileInfo::isCompressed(), PharFileInfo::decompress(), and PharFileInfo::compress().
This returns whether a file is compressed within a Phar archive with Gzip compression.
</Desc>
    <FName>PharFileInfo::isCRCChecked</FName>
    <Desc>public bool PharFileInfo::isCRCChecked ( void )
This returns whether a file within a Phar archive has had its CRC verified.
</Desc>
    <FName>PharFileInfo::setCompressedBZIP2</FName>
    <Desc>public bool PharFileInfo::setCompressedBZIP2 ( void )
Note: 
This method has been removed from the phar extension as of version 2.0.0. Alternative implementations are available using PharFileInfo::isCompressed(), PharFileInfo::decompress(), and PharFileInfo::compress().
This method compresses the file inside the Phar archive using bzip2 compression. The bzip2 extension must be enabled to take advantage of this feature. In addition, if the file is already compressed using gzip compression, the zlib extension must be enabled in order to decompress the file. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed.
</Desc>
    <FName>PharFileInfo::setCompressedGZ</FName>
    <Desc>public bool PharFileInfo::setCompressedGZ ( void )
Note: 
This method has been removed from the phar extension as of version 2.0.0. Alternative implementations are available using PharFileInfo::isCompressed(), PharFileInfo::decompress(), and PharFileInfo::compress().
This method compresses the file inside the Phar archive using gzip compression. The zlib extension must be enabled to take advantage of this feature. In addition, if the file is already compressed using bzip2 compression, the bzip2 extension must be enabled in order to decompress the file. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed.
</Desc>
    <FName>PharFileInfo::setMetadata</FName>
    <Desc>public void PharFileInfo::setMetadata ( mixed $metadata )
PharFileInfo::setMetadata() should only be used to store customized data in a file that cannot be represented with existing information stored with a file. Meta-data can significantly slow down the performance of loading a phar archive if the data is large, or if there are many files containing meta-data. It is important to note that file permissions are natively supported inside a phar; it is possible to set them with the PharFileInfo::chmod() method. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed if the file is within a Phar archive. Files within PharData archives do not have this restriction. 
Some possible uses for meta-data include passing a user/group that should be set when a file is extracted from the phar to disk. Other uses could include explicitly specifying a MIME type to return. However, any useful data that describes a file, but should not be contained inside of it may be stored.
</Desc>
    <FName>PharFileInfo::setUncompressed</FName>
    <Desc>public bool PharFileInfo::setUncompressed ( void )
Note: 
This method has been removed from the phar extension as of version 2.0.0. Alternative implementations are available using PharFileInfo::isCompressed(), PharFileInfo::decompress(), and PharFileInfo::compress().
This method decompresses the file inside the Phar archive. Depending on how the file is compressed, the bzip2 or zlib extensions must be enabled to take advantage of this feature. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed.
</Desc>
    <FName>phdfs::connect</FName>
    <Desc>public bool phdfs::connect ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::__construct</FName>
    <Desc>public phdfs::__construct ( string $ip , string $port )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::copy</FName>
    <Desc>public bool phdfs::copy ( string $source_file , string $destination_file )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::create_directory</FName>
    <Desc>public bool phdfs::create_directory ( string $path )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::delete</FName>
    <Desc>public bool phdfs::delete ( string $path )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::__destruct</FName>
    <Desc>public void phdfs::__destruct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::disconnect</FName>
    <Desc>public bool phdfs::disconnect ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::exists</FName>
    <Desc>public bool phdfs::exists ( string $path )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::file_info</FName>
    <Desc>public array phdfs::file_info ( string $path )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::list_directory</FName>
    <Desc>public array phdfs::list_directory ( string $path [, int $level = 0 ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::read</FName>
    <Desc>public string phdfs::read ( string $path [, int $length = 0 ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::rename</FName>
    <Desc>public bool phdfs::rename ( string $old_path , string $new_path )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::tell</FName>
    <Desc>public int phdfs::tell ( string $path [, int $read_length = 1024 ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>phdfs::write</FName>
    <Desc>public bool phdfs::write ( string $path , string $buffer [, int $mode = 0 ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>php_user_filter::filter</FName>
    <Desc>public int php_user_filter::filter ( resource $in , resource $out , int &$consumed , bool $closing )
This method is called whenever data is read from or written to the attached stream (such as with fread() or fwrite()).
</Desc>
    <FName>php_user_filter::onClose</FName>
    <Desc>public void php_user_filter::onClose ( void )
This method is called upon filter shutdown (typically, this is also during stream shutdown), and is executed after the flush method is called. If any resources were allocated or initialized during onCreate() this would be the time to destroy or dispose of them.
</Desc>
    <FName>php_user_filter::onCreate</FName>
    <Desc>public bool php_user_filter::onCreate ( void )
This method is called during instantiation of the filter class object. If your filter allocates or initializes any other resources (such as a buffer), this is the place to do it. 
When your filter is first instantiated, and yourfilter->onCreate() is called, a number of properties will be available as shown in the table below. 
PropertyContents
FilterClass->filternameA string containing the name the filter was instantiated with. Filters may be registered under multiple names or under wildcards. Use this property to determine which name was used. 
FilterClass->paramsThe contents of the params parameter passed to stream_filter_append() or stream_filter_prepend(). 
FilterClass->streamThe stream resource being filtered. Maybe available only during filter() calls when the closing parameter is set to FALSE.
</Desc>
    <FName>pht\AtomicInteger::__construct</FName>
    <Desc>public AtomicInteger pht\AtomicInteger::__construct ([ int $value = 0 ] )
Handles the creation of a new atomic integer.
</Desc>
    <FName>pht\AtomicInteger::dec</FName>
    <Desc>public void pht\AtomicInteger::dec ( void )
This method will decrement the atomic integer's value by one. Internally, the mutex lock of the atomic integer will be acquired, and so there is no need to manually acquire it (unless this operation needs to be grouped with other operations on the same atomic integer - see the example in pht\AtomicInteger::lock() for a demonstration of this).
</Desc>
    <FName>pht\AtomicInteger::get</FName>
    <Desc>public int pht\AtomicInteger::get ( void )
This method will fetch the current value of the atomic integer. Internally, the mutex lock of the atomic integer will be acquired, and so there is no need to manually acquire it (unless this operation needs to be grouped with other operations on the same atomic integer - see the example in pht\AtomicInteger::lock() for a demonstration of this).
</Desc>
    <FName>pht\AtomicInteger::inc</FName>
    <Desc>public void pht\AtomicInteger::inc ( void )
This method will increment the atomic integer's value by one. Internally, the mutex lock of the atomic integer will be acquired, and so there is no need to manually acquire it (unless this operation needs to be grouped with other operations on the same atomic integer - see the example in pht\AtomicInteger::lock() for a demonstration of this).
</Desc>
    <FName>pht\AtomicInteger::lock</FName>
    <Desc>public void pht\AtomicInteger::lock ( void )
This method will acquire the mutex lock associated with the atomic integer. The mutex lock only needs to be acquired when needing to group together multiple operations. 
The mutex locks of the atomic values are reentrant safe. It is therefore valid for the same thread to reacquire a mutex lock that it has already acquired.
</Desc>
    <FName>pht\AtomicInteger::set</FName>
    <Desc>public void pht\AtomicInteger::set ( int $value )
This method will set the value of the atomic integer. Internally, the mutex lock of the atomic integer will be acquired, and so there is no need to manually acquire it (unless this operation needs to be grouped with other operations on the same atomic integer - see the example in pht\AtomicInteger::lock() for a demonstration of this).
</Desc>
    <FName>pht\AtomicInteger::unlock</FName>
    <Desc>public void pht\AtomicInteger::unlock ( void )
This method will release the mutex lock associated with the atomic integer.
</Desc>
    <FName>pht\HashTable::lock</FName>
    <Desc>public void pht\HashTable::lock ( void )
This method will acquire the mutex lock associated with the hash table. The mutex lock should always be acquired when manipulating the hash table if it is being used by multiple threads. 
The mutex locks of the Inter-Thread Communication (ITC) data structures are not reentrant. Attempting to reacquire an already-acquired mutex lock by the same thread will therefore cause a deadlock.
</Desc>
    <FName>pht\HashTable::size</FName>
    <Desc>public int pht\HashTable::size ( void )
Returns the current size of the hash table. This operation requires a pht\HashTable's mutex lock to be held if it is being used by multiple threads.
</Desc>
    <FName>pht\HashTable::unlock</FName>
    <Desc>public void pht\HashTable::unlock ( void )
This method will release the mutex lock associated with the hash table.
</Desc>
    <FName>pht\Queue::front</FName>
    <Desc>public mixed pht\Queue::front ( void )
This method will remove a value from the front of the queue (in constant time). Attempting to return the front value from an empty queue will result in an Error exception. 
Caution 
Due to the fact that all values in a pht\Queue are serialised, extracting a value from the queue will require it to be deserialised. This can incur a noticeable performance hit if the inspection of the queue's front value is performed within a loop.
</Desc>
    <FName>pht\Queue::lock</FName>
    <Desc>public void pht\Queue::lock ( void )
This method will acquire the mutex lock associated with the queue. The mutex lock should always be acquired when manipulating the queue if it is being used by multiple threads. 
The mutex locks of the Inter-Thread Communication (ITC) data structures are not reentrant. Attempting to reacquire an already-acquired mutex lock by the same thread will therefore cause a deadlock.
</Desc>
    <FName>pht\Queue::pop</FName>
    <Desc>public mixed pht\Queue::pop ( void )
This method will remove a value from the front of the queue (in constant time). Attempting to pop a value from an empty queue will result in an Error exception.
</Desc>
    <FName>pht\Queue::push</FName>
    <Desc>public void pht\Queue::push ( mixed $value )
This method will add a value onto the queue.
</Desc>
    <FName>pht\Queue::size</FName>
    <Desc>public int pht\Queue::size ( void )
Returns the current size of the queue. This operation requires a pht\Queue's mutex lock to be held if it is being used by multiple threads.
</Desc>
    <FName>pht\Queue::unlock</FName>
    <Desc>public void pht\Queue::unlock ( void )
This method will release the mutex lock associated with the queue.
</Desc>
    <FName>pht\Runnable::run</FName>
    <Desc>public void pht\Runnable::run ( void )
This method acts as the entry point of execution for a threaded class. It must be defined by all classes that will be threaded.
</Desc>
    <FName>pht\Thread::addClassTask</FName>
    <Desc>public void pht\Thread::addClassTask ( string $className [, mixed $...ctorArgs ] )
Adds a new class task to a pht\Threads internal task queue.
</Desc>
    <FName>pht\Thread::addFileTask</FName>
    <Desc>public void pht\Thread::addFileTask ( string $fileName [, mixed $...globals ] )
Adds a new file task to a pht\Threads internal task queue.
</Desc>
    <FName>pht\Thread::addFunctionTask</FName>
    <Desc>public void pht\Thread::addFunctionTask ( callable $func [, mixed $...funcArgs ] )
Adds a new function task to a pht\Threads internal task queue.
</Desc>
    <FName>pht\Thread::join</FName>
    <Desc>public void pht\Thread::join ( void )
This method will join the spawned thread (though it will first wait for that thread's internal task queue to finish). As a matter of good practice, threads should always be joined. Not joining a thread may lead to undefined behaviour.
</Desc>
    <FName>pht\Thread::start</FName>
    <Desc>public void pht\Thread::start ( void )
This will cause a new thread to be spawned for the associated pht\Thread object, where its internal task queue will begin to be processed.
</Desc>
    <FName>pht\Thread::taskCount</FName>
    <Desc>public int pht\Thread::taskCount ( void )
Retrieves the current task count of a pht\Thread.
</Desc>
    <FName>pht\Threaded::lock</FName>
    <Desc>public void pht\Threaded::lock ( void )
This method will acquire the mutex lock associated with the given class (either a pht\HashTable, pht\Queue, pht\Vector, or pht\AtomicInteger).
</Desc>
    <FName>pht\Threaded::unlock</FName>
    <Desc>public void pht\Threaded::unlock ( void )
This method will unlock the mutex lock associated with the given class (either a pht\HashTable, pht\Queue, pht\Vector, or pht\AtomicInteger).
</Desc>
    <FName>pht\Vector::__construct</FName>
    <Desc>public Vector pht\Vector::__construct ([ int $size = 0 [, mixed $value = 0 ]] )
Handles the creation of a new vector.
</Desc>
    <FName>pht\Vector::deleteAt</FName>
    <Desc>public void pht\Vector::deleteAt ( int $offset )
This method deletes a value at the specified offset in the vector (in linear time). 
Since the pht\Vector class supports array access, deleting values can also be performed using the array subset notation ([]) in combination with the unset() function.
</Desc>
    <FName>pht\Vector::insertAt</FName>
    <Desc>public void pht\Vector::insertAt ( mixed $value , int $offset )
This method inserts a value at the specified offset into the vector (in linear time). The vector will automatically be resized if it is not large enough.
</Desc>
    <FName>pht\Vector::lock</FName>
    <Desc>public void pht\Vector::lock ( void )
This method will acquire the mutex lock associated with the vector. The mutex lock should always be acquired when manipulating the vector if it is being used by multiple threads. 
The mutex locks of the Inter-Thread Communication (ITC) data structures are not reentrant. Attempting to reacquire an already-acquired mutex lock by the same thread will therefore cause a deadlock.
</Desc>
    <FName>pht\Vector::pop</FName>
    <Desc>public mixed pht\Vector::pop ( void )
This method pops a value from the end of a vector (in constant time). Popping a value from an empty vector will result in an Error exception.
</Desc>
    <FName>pht\Vector::push</FName>
    <Desc>public void pht\Vector::push ( mixed $value )
This method pushes a value onto the end of a vector (in constant time). The vector will automatically be resized if it is not large enough. 
Since the pht\Vector class supports array access, new values can also be pushed onto the vector using the empty subset notation ([]).
</Desc>
    <FName>pht\Vector::resize</FName>
    <Desc>public void pht\Vector::resize ( int $size [, mixed $value = 0 ] )
Resizes the vector. If it is enlarged, then the value parameter will be used to fill in the new slots. If it is made smaller, then the end values will be truncated.
</Desc>
    <FName>pht\Vector::shift</FName>
    <Desc>public mixed pht\Vector::shift ( void )
This method shifts a value from the front of a vector (in linear time). Shifting a value from an empty vector will result in an Error exception.
</Desc>
    <FName>pht\Vector::size</FName>
    <Desc>public int pht\Vector::size ( void )
Returns the current size of the vector. This operation requires a pht\Vector's mutex lock to be held if it is being used by multiple threads.
</Desc>
    <FName>pht\Vector::unlock</FName>
    <Desc>public void pht\Vector::unlock ( void )
This method will release the mutex lock associated with the vector.
</Desc>
    <FName>pht\Vector::unshift</FName>
    <Desc>public void pht\Vector::unshift ( mixed $value )
This method unshifts a value to the front of a vector (in linear time). The vector will automatically be resized if it is not large enough.
</Desc>
    <FName>pht\Vector::updateAt</FName>
    <Desc>public void pht\Vector::updateAt ( mixed $value , int $offset )
This method updates a value at the specified offset in the vector (in linear time). The vector will automatically be resized if it is not large enough. 
Since the pht\Vector class supports array access, updating values can also be performed using the array subset notation ([]).
</Desc>
    <FName>Pool::collect</FName>
    <Desc>public int Pool::collect ([ Callable $collector ] )
Allows the pool to collect references determined to be garbage by the optionally given collector.
</Desc>
    <FName>Pool::__construct</FName>
    <Desc>public Pool Pool::__construct ( int $size [, string $class [, array $ctor ]] )
Construct a new pool of workers. Pools lazily create their threads, which means new threads will only be spawned when they are required to execute tasks.
</Desc>
    <FName>Pool::resize</FName>
    <Desc>public void Pool::resize ( int $size )
Resize the Pool
</Desc>
    <FName>Pool::shutdown</FName>
    <Desc>public void Pool::shutdown ( void )
Shuts down all of the workers in the pool. This will block until all submitted tasks have been executed.
</Desc>
    <FName>Pool::submit</FName>
    <Desc>public int Pool::submit ( Threaded $task )
Submit the task to the next Worker in the Pool
</Desc>
    <FName>Pool::submitTo</FName>
    <Desc>public int Pool::submitTo ( int $worker , Threaded $task )
Submit a task to the specified worker in the pool. The workers are indexed from 0, and will only exist if the pool has needed to create them (since threads are lazily spawned).
</Desc>
    <FName>QuickHashIntHash::add</FName>
    <Desc>public bool QuickHashIntHash::add ( int $key [, int $value ] )
This method adds a new entry to the hash, and returns whether the entry was added. Entries are by default always added unless QuickHashIntHash::CHECK_FOR_DUPES has been passed when the hash was created.
</Desc>
    <FName>QuickHashIntHash::__construct</FName>
    <Desc>public QuickHashIntHash::__construct ( int $size [, int $options ] )
This constructor creates a new QuickHashIntHash. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.
</Desc>
    <FName>QuickHashIntHash::delete</FName>
    <Desc>public bool QuickHashIntHash::delete ( int $key )
This method deletes an entry from the hash, and returns whether the entry was deleted or not. Associated memory structures will not be freed immediately, but rather when the hash itself is freed. 
Elements can not be deleted when the hash is used in an iterator. The method will not throw an exception, but simply return FALSE like would happen with any other deletion failure.
</Desc>
    <FName>QuickHashIntHash::exists</FName>
    <Desc>public bool QuickHashIntHash::exists ( int $key )
This method checks whether an entry with the provided key exists in the hash.
</Desc>
    <FName>QuickHashIntHash::get</FName>
    <Desc>public int QuickHashIntHash::get ( int $key )
This method retrieves a value from the hash by its key.
</Desc>
    <FName>QuickHashIntHash::getSize</FName>
    <Desc>public int QuickHashIntHash::getSize ( void )
Returns the number of elements in the hash.
</Desc>
    <FName>QuickHashIntHash::loadFromFile</FName>
    <Desc>public static QuickHashIntHash QuickHashIntHash::loadFromFile ( string $filename [, int $options ] )
This factory method creates a new hash from a definition file on disk. The file format consists of a signature 'QH\0x11\0', the number of elements as a 32 bit signed integer in system Endianness, followed by 32 bit signed integers packed together in the Endianness that the system that the code runs on uses. For each hash element there are two 32 bit signed integers stored. The first of each element is the key, and the second is the value belonging to the key. An example could be: 
Example #1 QuickHash IntHash file format
00000000  51 48 11 00 02 00 00 00  01 00 00 00 01 00 00 00  |QH..............|
00000010  03 00 00 00 09 00 00 00                           |........|
00000018Example #2 QuickHash IntHash file format
header signature ('QH'; key type: 1; value type: 1; filler: \0x00)
00000000  51 48 11 00

number of elements:
00000004  02 00 00 00

data string:
00000000  01 00 00 00 01 00 00 00  03 00 00 00 09 00 00 00

key/value 1 (key = 1, value = 1)
01 00 00 00  01 00 00 00

key/value 2 (key = 3, value = 9)
03 00 00 00  09 00 00 00
</Desc>
    <FName>QuickHashIntHash::loadFromString</FName>
    <Desc>public static QuickHashIntHash QuickHashIntHash::loadFromString ( string $contents [, int $options ] )
This factory method creates a new hash from a definition in a string. The file format consists of 32 bit signed integers packed together in the Endianness that the system that the code runs on uses. For each element there are two 32 bit signed integers stored. The first of each element is the key, and the second is the value belonging to the key.
</Desc>
    <FName>QuickHashIntHash::saveToFile</FName>
    <Desc>public void QuickHashIntHash::saveToFile ( string $filename )
This method stores an existing hash to a file on disk, in the same format that loadFromFile() can read.
</Desc>
    <FName>QuickHashIntHash::saveToString</FName>
    <Desc>public string QuickHashIntHash::saveToString ( void )
This method returns a serialized version of the hash in the same format that loadFromString() can read.
</Desc>
    <FName>QuickHashIntHash::set</FName>
    <Desc>public bool QuickHashIntHash::set ( int $key , int $value )
This method tries to update an entry with a new value. In case the entry did not yet exist, it will instead add a new entry. It returns whether the entry was added or update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashIntHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.
</Desc>
    <FName>QuickHashIntHash::update</FName>
    <Desc>public bool QuickHashIntHash::update ( int $key , int $value )
This method updates an entry with a new value, and returns whether the entry was update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashIntHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.
</Desc>
    <FName>QuickHashIntSet::add</FName>
    <Desc>public bool QuickHashIntSet::add ( int $key )
This method adds a new entry to the set, and returns whether the entry was added. Entries are by default always added unless QuickHashIntSet::CHECK_FOR_DUPES has been passed when the set was created.
</Desc>
    <FName>QuickHashIntSet::__construct</FName>
    <Desc>public QuickHashIntSet::__construct ( int $size [, int $options ] )
This constructor creates a new QuickHashIntSet. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.
</Desc>
    <FName>QuickHashIntSet::delete</FName>
    <Desc>public bool QuickHashIntSet::delete ( int $key )
This method deletes an entry from the set, and returns whether the entry was deleted or not. Associated memory structures will not be freed immediately, but rather when the set itself is freed.
</Desc>
    <FName>QuickHashIntSet::exists</FName>
    <Desc>public bool QuickHashIntSet::exists ( int $key )
This method checks whether an entry with the provided key exists in the set.
</Desc>
    <FName>QuickHashIntSet::getSize</FName>
    <Desc>publicint QuickHashIntSet::getSize ( void )
Returns the number of elements in the set.
</Desc>
    <FName>QuickHashIntSet::loadFromFile</FName>
    <Desc>public static QuickHashIntSet QuickHashIntSet::loadFromFile ( string $filename [, int $size [, int $options ]] )
This factory method creates a new set from a definition file on disk. The file format consists of 32 bit signed integers packed together in the Endianness that the system that the code runs on uses.
</Desc>
    <FName>QuickHashIntSet::loadFromString</FName>
    <Desc>public static QuickHashIntSet QuickHashIntSet::loadFromString ( string $contents [, int $size [, int $options ]] )
This factory method creates a new set from a definition in a string. The file format consists of 32 bit signed integers packed together in the Endianness that the system that the code runs on uses.
</Desc>
    <FName>QuickHashIntSet::saveToFile</FName>
    <Desc>public void QuickHashIntSet::saveToFile ( string $filename )
This method stores an existing set to a file on disk, in the same format that loadFromFile() can read.
</Desc>
    <FName>QuickHashIntSet::saveToString</FName>
    <Desc>public string QuickHashIntSet::saveToString ( void )
This method returns a serialized version of the set in the same format that loadFromString() can read.
</Desc>
    <FName>QuickHashIntStringHash::add</FName>
    <Desc>public bool QuickHashIntStringHash::add ( int $key , string $value )
This method adds a new entry to the hash, and returns whether the entry was added. Entries are by default always added unless QuickHashIntStringHash::CHECK_FOR_DUPES has been passed when the hash was created.
</Desc>
    <FName>QuickHashIntStringHash::__construct</FName>
    <Desc>public QuickHashIntStringHash::__construct ( int $size [, int $options = 0 ] )
This constructor creates a new QuickHashIntStringHash. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.
</Desc>
    <FName>QuickHashIntStringHash::delete</FName>
    <Desc>public bool QuickHashIntStringHash::delete ( int $key )
This method deletes an entry from the hash, and returns whether the entry was deleted or not. Associated memory structures will not be freed immediately, but rather when the hash itself is freed. 
Elements can not be deleted when the hash is used in an iterator. The method will not throw an exception, but simply return FALSE like would happen with any other deletion failure.
</Desc>
    <FName>QuickHashIntStringHash::exists</FName>
    <Desc>public bool QuickHashIntStringHash::exists ( int $key )
This method checks whether an entry with the provided key exists in the hash.
</Desc>
    <FName>QuickHashIntStringHash::get</FName>
    <Desc>public mixed QuickHashIntStringHash::get ( int $key )
This method retrieves a value from the hash by its key.
</Desc>
    <FName>QuickHashIntStringHash::getSize</FName>
    <Desc>public int QuickHashIntStringHash::getSize ( void )
Returns the number of elements in the hash.
</Desc>
    <FName>QuickHashIntStringHash::loadFromFile</FName>
    <Desc>public static QuickHashIntStringHash QuickHashIntStringHash::loadFromFile ( string $filename [, int $size = 0 [, int $options = 0 ]] )
This factory method creates a new hash from a definition file on disk. The file format consists of a signature 'QH\0x12\0', the number of elements as a 32 bit signed integer in system Endianness, an unsigned 32 bit integer containing the number of element data to follow in characters. This element data contains all the strings. After the header and the strings, the elements follow in pairs of two unsigned 32 bit integers where the first one is the key, and the second one the index in the element data string. An example could be: 
Example #1 QuickHash IntString file format
00000000  51 48 12 00 02 00 00 00  09 00 00 00 4f 4e 45 00  |QH..........ONE.|
00000010  4e 49 4e 45 00 01 00 00  00 00 00 00 00 03 00 00  |NINE............|
00000020  00 04 00 00 00                                    |.....|
00000025Example #2 QuickHash IntString file format
header signature ('QH'; key type: 1; value type: 2; filler: \0x00)
00000000  51 48 12 00

number of elements:
00000004  02 00 00 00

length of string values (9 characters):
00000008  09 00 00 00

string values:
0000000C  4f 4e 45 00 4e 49 4e 45  00

data string:
00000015  01 00 00 00 00 00 00 00  03 00 00 00 04 00 00 00

key/value 1 (key = 1, string index = 0 ("ONE")):
01 00 00 00  00 00 00 00

key/value 2 (key = 3, string index = 4 ("NINE")):
03 00 00 00  04 00 00 00
</Desc>
    <FName>QuickHashIntStringHash::loadFromString</FName>
    <Desc>public static QuickHashIntStringHash QuickHashIntStringHash::loadFromString ( string $contents [, int $size = 0 [, int $options = 0 ]] )
This factory method creates a new hash from a definition in a string. The format is the same as the one used in "loadFromFile".
</Desc>
    <FName>QuickHashIntStringHash::saveToFile</FName>
    <Desc>public void QuickHashIntStringHash::saveToFile ( string $filename )
This method stores an existing hash to a file on disk, in the same format that loadFromFile() can read.
</Desc>
    <FName>QuickHashIntStringHash::saveToString</FName>
    <Desc>public string QuickHashIntStringHash::saveToString ( void )
This method returns a serialized version of the hash in the same format that loadFromString() can read.
</Desc>
    <FName>QuickHashIntStringHash::set</FName>
    <Desc>public int QuickHashIntStringHash::set ( int $key , string $value )
This method tries to update an entry with a new value. In case the entry did not yet exist, it will instead add a new entry. It returns whether the entry was added or update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashIntStringHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.
</Desc>
    <FName>QuickHashIntStringHash::update</FName>
    <Desc>public bool QuickHashIntStringHash::update ( int $key , string $value )
This method updates an entry with a new value, and returns whether the entry was update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashIntStringHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.
</Desc>
    <FName>QuickHashStringIntHash::add</FName>
    <Desc>public bool QuickHashStringIntHash::add ( string $key , int $value )
This method adds a new entry to the hash, and returns whether the entry was added. Entries are by default always added unless QuickHashStringIntHash::CHECK_FOR_DUPES has been passed when the hash was created.
</Desc>
    <FName>QuickHashStringIntHash::__construct</FName>
    <Desc>public QuickHashStringIntHash::__construct ( int $size [, int $options = 0 ] )
This constructor creates a new QuickHashStringIntHash. The size is the amount of bucket lists to create. The more lists there are, the less collisions you will have. Options are also supported.
</Desc>
    <FName>QuickHashStringIntHash::delete</FName>
    <Desc>public bool QuickHashStringIntHash::delete ( string $key )
This method deletes an entry from the hash, and returns whether the entry was deleted or not. Associated memory structures will not be freed immediately, but rather when the hash itself is freed. 
Elements can not be deleted when the hash is used in an iterator. The method will not throw an exception, but simply return FALSE like would happen with any other deletion failure.
</Desc>
    <FName>QuickHashStringIntHash::exists</FName>
    <Desc>public bool QuickHashStringIntHash::exists ( string $key )
This method checks whether an entry with the provided key exists in the hash.
</Desc>
    <FName>QuickHashStringIntHash::get</FName>
    <Desc>public mixed QuickHashStringIntHash::get ( string $key )
This method retrieves a value from the hash by its key.
</Desc>
    <FName>QuickHashStringIntHash::getSize</FName>
    <Desc>public int QuickHashStringIntHash::getSize ( void )
Returns the number of elements in the hash.
</Desc>
    <FName>QuickHashStringIntHash::loadFromFile</FName>
    <Desc>public static QuickHashStringIntHash QuickHashStringIntHash::loadFromFile ( string $filename [, int $size = 0 [, int $options = 0 ]] )
This factory method creates a new hash from a definition file on disk. The file format consists of a signature 'QH\0x21\0', the number of elements as a 32 bit signed integer in system Endianness, an unsigned 32 bit integer containing the number of element data to follow in characters. This element data contains all the strings. The follows another signed 32 bit integer containing the number of bucket lists. After the header and the strings, the elements follow. They are ordered by bucket list so that the keys don't have to be hashed in order to restore the hash. For each bucket list, the following information is stored (all as 32 bit integers): the bucket list index, the number of elements in that list, and then in pairs of two unsigned 32 bit integers the elements, where the first one is the index into the string list containing the keys, and the second one the value. An example could be: 
Example #1 QuickHash StringIntHash file format
00000000  51 48 21 00 02 00 00 00  09 00 00 00 40 00 00 00  |QH!.........@...|
00000010  4f 4e 45 00 4e 49 4e 45  00 07 00 00 00 01 00 00  |ONE.NINE........|
00000020  00 00 00 00 00 01 00 00  00 2f 00 00 00 01 00 00  |........./......|
00000030  00 04 00 00 00 03 00 00  00                       |.........|
00000039Example #2 QuickHash IntHash file format
header signature ('QH'; key type: 2; value type: 1; filler: \0x00)
00000000  51 48 21 00

number of elements:
00000004  02 00 00 00

length of string values (9 characters):
00000008  09 00 00 00

number of hash bucket lists (this is configured for hashes as argument to the
constructor normally, 64 in this case):
0000000C  40 00 00 00

string values:
00000010  4f 4e 45 00 4e 49 4e 45  00

bucket lists:
  bucket list 1 (with key 7, and 1 element):
    header:
    07 00 00 00 01 00 00 00
    elements (key index: 0 ('ONE'), value = 0):
    00 00 00 00 01 00 00 00
  bucket list 2 (with key 0x2f, and 1 element):
    header:
    2f 00 00 00 01 00 00 00
    elements (key index: 4 ('NINE'), value = 3):
    04 00 00 00 03 00 00 00
</Desc>
    <FName>QuickHashStringIntHash::loadFromString</FName>
    <Desc>public static QuickHashStringIntHash QuickHashStringIntHash::loadFromString ( string $contents [, int $size = 0 [, int $options = 0 ]] )
This factory method creates a new hash from a definition in a string. The format is the same as the one used in "loadFromFile".
</Desc>
    <FName>QuickHashStringIntHash::saveToFile</FName>
    <Desc>public void QuickHashStringIntHash::saveToFile ( string $filename )
This method stores an existing hash to a file on disk, in the same format that loadFromFile() can read.
</Desc>
    <FName>QuickHashStringIntHash::saveToString</FName>
    <Desc>public string QuickHashStringIntHash::saveToString ( void )
This method returns a serialized version of the hash in the same format that loadFromString() can read.
</Desc>
    <FName>QuickHashStringIntHash::set</FName>
    <Desc>public int QuickHashStringIntHash::set ( string $key , int $value )
This method tries to update an entry with a new value. In case the entry did not yet exist, it will instead add a new entry. It returns whether the entry was added or update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashStringIntHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.
</Desc>
    <FName>QuickHashStringIntHash::update</FName>
    <Desc>public bool QuickHashStringIntHash::update ( string $key , int $value )
This method updates an entry with a new value, and returns whether the entry was update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashStringIntHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.
</Desc>
    <FName>RarArchive::close</FName>
    <Desc>Object oriented style (method):
public bool RarArchive::close ( void )
Procedural style:
bool rar_close ( RarArchive $rarfile )
Close RAR archive and free all allocated resources.
</Desc>
    <FName>rar_close</FName>
    <Desc>Object oriented style (method):
public bool RarArchive::close ( void )
Procedural style:
bool rar_close ( RarArchive $rarfile )
Close RAR archive and free all allocated resources.
</Desc>
    <FName>RarArchive::getComment</FName>
    <Desc>Object oriented style (method):
public string RarArchive::getComment ( void )
Procedural style:
string rar_comment_get ( RarArchive $rarfile )
Get the (global) comment stored in the RAR archive. It may be up to 64 KiB long. 
Note: 
This extension does not support comments at the entry level.
</Desc>
    <FName>rar_comment_get</FName>
    <Desc>Object oriented style (method):
public string RarArchive::getComment ( void )
Procedural style:
string rar_comment_get ( RarArchive $rarfile )
Get the (global) comment stored in the RAR archive. It may be up to 64 KiB long. 
Note: 
This extension does not support comments at the entry level.
</Desc>
    <FName>RarArchive::getEntries</FName>
    <Desc>Object oriented style (method):
public array RarArchive::getEntries ( void )
Procedural style:
array rar_list ( RarArchive $rarfile )
Get entries list (files and directories) from the RAR archive. 
Note: 
If the archive has entries with the same name, this method, together with RarArchive foreach iteration and array-like access with numeric indexes, are the only ones to access all the entries (i.e., RarArchive::getEntry() and the rar:// wrapper are insufficient).
</Desc>
    <FName>rar_list</FName>
    <Desc>Object oriented style (method):
public array RarArchive::getEntries ( void )
Procedural style:
array rar_list ( RarArchive $rarfile )
Get entries list (files and directories) from the RAR archive. 
Note: 
If the archive has entries with the same name, this method, together with RarArchive foreach iteration and array-like access with numeric indexes, are the only ones to access all the entries (i.e., RarArchive::getEntry() and the rar:// wrapper are insufficient).
</Desc>
    <FName>RarArchive::getEntry</FName>
    <Desc>Object oriented style (method):
public RarEntry RarArchive::getEntry ( string $entryname )
Procedural style:
RarEntry rar_entry_get ( RarArchive $rarfile , string $entryname )
Get entry object (file or directory) from the RAR archive. 
Note: 
You can also get entry objects using RarArchive::getEntries().
Note that a RAR archive can have multiple entries with the same name; this method will retrieve only the first.
</Desc>
    <FName>rar_entry_get</FName>
    <Desc>Object oriented style (method):
public RarEntry RarArchive::getEntry ( string $entryname )
Procedural style:
RarEntry rar_entry_get ( RarArchive $rarfile , string $entryname )
Get entry object (file or directory) from the RAR archive. 
Note: 
You can also get entry objects using RarArchive::getEntries().
Note that a RAR archive can have multiple entries with the same name; this method will retrieve only the first.
</Desc>
    <FName>RarArchive::isBroken</FName>
    <Desc>Object oriented style (method):
public bool RarArchive::isBroken ( void )
Procedural style:
bool rar_broken_is ( RarArchive $rarfile )
This function determines whether an archive is incomplete, i.e., if a volume is missing or a volume is truncated.
</Desc>
    <FName>rar_broken_is</FName>
    <Desc>Object oriented style (method):
public bool RarArchive::isBroken ( void )
Procedural style:
bool rar_broken_is ( RarArchive $rarfile )
This function determines whether an archive is incomplete, i.e., if a volume is missing or a volume is truncated.
</Desc>
    <FName>RarArchive::isSolid</FName>
    <Desc>Object oriented style (method):
public bool RarArchive::isSolid ( void )
Procedural style:
bool rar_solid_is ( RarArchive $rarfile )
Check whether the RAR archive is solid. Individual file extraction is slower on solid archives.
</Desc>
    <FName>rar_solid_is</FName>
    <Desc>Object oriented style (method):
public bool RarArchive::isSolid ( void )
Procedural style:
bool rar_solid_is ( RarArchive $rarfile )
Check whether the RAR archive is solid. Individual file extraction is slower on solid archives.
</Desc>
    <FName>RarArchive::open</FName>
    <Desc>Object oriented style (method):
public static RarArchive RarArchive::open ( string $filename [, string $password = NULL [, callable $volume_callback = NULL ]] )
Procedural style:
RarArchive rar_open ( string $filename [, string $password = NULL [, callable $volume_callback = NULL ]] )
Open specified RAR archive and return RarArchive instance representing it. 
Note: 
If opening a multi-volume archive, the path of the first volume should be passed as the first parameter. Otherwise, not all files will be shown. This is by design.
</Desc>
    <FName>rar_open</FName>
    <Desc>Object oriented style (method):
public static RarArchive RarArchive::open ( string $filename [, string $password = NULL [, callable $volume_callback = NULL ]] )
Procedural style:
RarArchive rar_open ( string $filename [, string $password = NULL [, callable $volume_callback = NULL ]] )
Open specified RAR archive and return RarArchive instance representing it. 
Note: 
If opening a multi-volume archive, the path of the first volume should be passed as the first parameter. Otherwise, not all files will be shown. This is by design.
</Desc>
    <FName>RarArchive::setAllowBroken</FName>
    <Desc>Object oriented style (method):
public bool RarArchive::setAllowBroken ( bool $allow_broken )
Procedural style:
bool rar_allow_broken_set ( RarArchive $rarfile , bool $allow_broken )
This method defines whether broken archives can be read or all the operations that attempt to extract the archive entries will fail. Broken archives are archives for which no error is detected when the file is opened but an error occurs when reading the entries.
</Desc>
    <FName>RarArchive::__toString</FName>
    <Desc>public string RarArchive::__toString ( void )
Provides a string representation for this RarArchive object. It currently shows the full path name of the archive volume that was opened and whether the resource is valid or was already closed through a call to RarArchive::close(). 
This method may be used only for debugging purposes, as there are no guarantees as to which information the result contains or how it is formatted.
</Desc>
    <FName>RarEntry::extract</FName>
    <Desc>public bool RarEntry::extract ( string $dir [, string $filepath = "" [, string $password = NULL [, bool $extended_data = FALSE ]]] )
RarEntry::extract() extracts the entry's data. It will create new file in the specified dir with the name identical to the entry's name, unless the second argument is specified. See below for more information.
</Desc>
    <FName>RarEntry::getAttr</FName>
    <Desc>public int RarEntry::getAttr ( void )
Returns the OS-dependent attributes of the archive entry.
</Desc>
    <FName>RarEntry::getCrc</FName>
    <Desc>public string RarEntry::getCrc ( void )
Returns an hexadecimal string representation of the CRC of the archive entry.
</Desc>
    <FName>RarEntry::getFileTime</FName>
    <Desc>public string RarEntry::getFileTime ( void )
Gets entry last modification time.
</Desc>
    <FName>RarEntry::getHostOs</FName>
    <Desc>public int RarEntry::getHostOs ( void )
Returns the code of the host OS of the archive entry.
</Desc>
    <FName>RarEntry::getMethod</FName>
    <Desc>public int RarEntry::getMethod ( void )
RarEntry::getMethod() returns number of the method used when adding current archive entry.
</Desc>
    <FName>RarEntry::getName</FName>
    <Desc>public string RarEntry::getName ( void )
Returns the name (with path) of the archive entry.
</Desc>
    <FName>RarEntry::getPackedSize</FName>
    <Desc>public int RarEntry::getPackedSize ( void )
Get packed size of the archive entry. 
Note: 
Note that on platforms with 32-bit longs (that includes Windows x64), the maximum size returned is capped at 2 GiB. Check the constant PHP_INT_MAX.
</Desc>
    <FName>RarEntry::getStream</FName>
    <Desc>public resource RarEntry::getStream ([ string $password ] )
Returns a file handler that supports read operations. This handler provides on-the-fly decompression for this entry. 
The handler is not invalidated by calling rar_close(). 
Warning 
The resulting stream has no integrity verification. In particular, file corruption and decryption with a wrong a key will not be detected. It is the programmer's responsability to use the entry's CRC to check for integrity, if he so wishes.
</Desc>
    <FName>RarEntry::getUnpackedSize</FName>
    <Desc>public int RarEntry::getUnpackedSize ( void )
Get unpacked size of the archive entry. 
Note: 
Note that on platforms with 32-bit longs (that includes Windows x64), the maximum size returned is capped at 2 GiB. Check the constant PHP_INT_MAX.
</Desc>
    <FName>RarEntry::getVersion</FName>
    <Desc>public int RarEntry::getVersion ( void )
Returns minimum version of RAR program (e.g. WinRAR) required to unpack the entry. It is encoded as 10 * major version + minor version.
</Desc>
    <FName>RarEntry::isDirectory</FName>
    <Desc>public bool RarEntry::isDirectory ( void )
Tests whether the current entry is a directory.
</Desc>
    <FName>RarEntry::isEncrypted</FName>
    <Desc>public bool RarEntry::isEncrypted ( void )
Tests whether the current entry contents are encrypted. 
Note: 
The password used may differ between files inside the same RAR archive.
</Desc>
    <FName>RarEntry::__toString</FName>
    <Desc>public string RarEntry::__toString ( void )
RarEntry::__toString() returns a textual representation for this entry. It includes whether the entry is a file or a directory (symbolic links and other special objects will be treated as files), the UTF-8 name of the entry and its CRC. The form and content of this representation may be changed in the future, so they cannot be relied upon.
</Desc>
    <FName>RarException::isUsingExceptions</FName>
    <Desc>public static bool RarException::isUsingExceptions ( void )
Checks whether the RAR functions will emit warnings and return error values or whether they will throw exceptions in most of the circumstances (does not include some programmatic errors such as passing the wrong type of arguments).
</Desc>
    <FName>RarException::setUsingExceptions</FName>
    <Desc>public static void RarException::setUsingExceptions ( bool $using_exceptions )
If and only if the argument is TRUE, then, instead of emitting warnings and returning a special value indicating error when the UnRAR library encounters an error, an exception of type RarException will be thrown. 
Exceptions will also be thrown for the following errors, which occur outside the library (their error code will be -1): 
attempting some operations on a closed RarArchive object or a RarEntry object relative to the first; 
attempting to get an entry that does not exist with RarArchive::getEntry().
</Desc>
    <FName>RecursiveArrayIterator::getChildren</FName>
    <Desc>public RecursiveArrayIterator RecursiveArrayIterator::getChildren ( void )
Returns an iterator for the current iterator entry.
</Desc>
    <FName>RecursiveArrayIterator::hasChildren</FName>
    <Desc>public bool RecursiveArrayIterator::hasChildren ( void )
Returns whether current entry is an array or an object for which an iterator can be obtained via RecursiveArrayIterator::getChildren().
</Desc>
    <FName>RecursiveCachingIterator::__construct</FName>
    <Desc>public RecursiveCachingIterator::__construct ( Iterator $iterator [, int $flags = self::CALL_TOSTRING ] )
Constructs a new RecursiveCachingIterator, which consists of a passed in iterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveCachingIterator::getChildren</FName>
    <Desc>public RecursiveCachingIterator RecursiveCachingIterator::getChildren ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveCachingIterator::hasChildren</FName>
    <Desc>public bool RecursiveCachingIterator::hasChildren ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveCallbackFilterIterator::__construct</FName>
    <Desc>public RecursiveCallbackFilterIterator::__construct ( RecursiveIterator $iterator , string $callback )
Creates a filtered iterator from a RecursiveIterator using the callback to determine which items are accepted or rejected.
</Desc>
    <FName>RecursiveCallbackFilterIterator::getChildren</FName>
    <Desc>public RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator::getChildren ( void )
Fetches the filtered children of the inner iterator. 
RecursiveCallbackFilterIterator::hasChildren() should be used to determine if there are children to be fetched.
</Desc>
    <FName>RecursiveCallbackFilterIterator::hasChildren</FName>
    <Desc>public bool RecursiveCallbackFilterIterator::hasChildren ( void )
Returns TRUE if the current element has children, FALSE otherwise.
</Desc>
    <FName>RecursiveDirectoryIterator::__construct</FName>
    <Desc>public RecursiveDirectoryIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )
Constructs a RecursiveDirectoryIterator() for the provided path.
</Desc>
    <FName>RecursiveDirectoryIterator::getChildren</FName>
    <Desc>public mixed RecursiveDirectoryIterator::getChildren ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveDirectoryIterator::getSubPath</FName>
    <Desc>public string RecursiveDirectoryIterator::getSubPath ( void )
Returns the sub path relative to the directory given in the constructor.
</Desc>
    <FName>RecursiveDirectoryIterator::getSubPathname</FName>
    <Desc>public string RecursiveDirectoryIterator::getSubPathname ( void )
Gets the sub path and filename.
</Desc>
    <FName>RecursiveDirectoryIterator::hasChildren</FName>
    <Desc>public bool RecursiveDirectoryIterator::hasChildren ([ bool $allow_links = FALSE ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveDirectoryIterator::key</FName>
    <Desc>public string RecursiveDirectoryIterator::key ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveDirectoryIterator::next</FName>
    <Desc>public void RecursiveDirectoryIterator::next ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveDirectoryIterator::rewind</FName>
    <Desc>public void RecursiveDirectoryIterator::rewind ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveFilterIterator::__construct</FName>
    <Desc>public RecursiveFilterIterator::__construct ( RecursiveIterator $iterator )
Create a RecursiveFilterIterator from a RecursiveIterator.
</Desc>
    <FName>RecursiveFilterIterator::getChildren</FName>
    <Desc>public RecursiveFilterIterator RecursiveFilterIterator::getChildren ( void )
Return the inner iterator's children contained in a RecursiveFilterIterator.
</Desc>
    <FName>RecursiveFilterIterator::hasChildren</FName>
    <Desc>public bool RecursiveFilterIterator::hasChildren ( void )
Check whether the inner iterator's current element has children.
</Desc>
    <FName>RecursiveIterator::getChildren</FName>
    <Desc>public RecursiveIterator RecursiveIterator::getChildren ( void )
Returns an iterator for the current iterator entry.
</Desc>
    <FName>RecursiveIterator::hasChildren</FName>
    <Desc>public bool RecursiveIterator::hasChildren ( void )
Returns if an iterator can be created for the current entry. RecursiveIterator::getChildren().
</Desc>
    <FName>RecursiveIteratorIterator::beginChildren</FName>
    <Desc>public void RecursiveIteratorIterator::beginChildren ( void )
Is called after calling RecursiveIteratorIterator::getChildren(), and its associated RecursiveIteratorIterator::rewind(). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::beginIteration</FName>
    <Desc>public void RecursiveIteratorIterator::beginIteration ( void )
Called when iteration begins (after the first RecursiveIteratorIterator::rewind() call. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::callGetChildren</FName>
    <Desc>public RecursiveIterator RecursiveIteratorIterator::callGetChildren ( void )
Get children of the current element. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::callHasChildren</FName>
    <Desc>public bool RecursiveIteratorIterator::callHasChildren ( void )
Called for each element to test whether it has children. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::__construct</FName>
    <Desc>public RecursiveIteratorIterator::__construct ( Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0 ]] )
Creates a RecursiveIteratorIterator from a RecursiveIterator.
</Desc>
    <FName>RecursiveIteratorIterator::current</FName>
    <Desc>public mixed RecursiveIteratorIterator::current ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::endChildren</FName>
    <Desc>public void RecursiveIteratorIterator::endChildren ( void )
Called when end recursing one level. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::endIteration</FName>
    <Desc>public void RecursiveIteratorIterator::endIteration ( void )
Called when the iteration ends (when RecursiveIteratorIterator::valid() first returns FALSE. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::getDepth</FName>
    <Desc>public int RecursiveIteratorIterator::getDepth ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::getInnerIterator</FName>
    <Desc>public iterator RecursiveIteratorIterator::getInnerIterator ( void )
Gets the current active sub iterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::getMaxDepth</FName>
    <Desc>public mixed RecursiveIteratorIterator::getMaxDepth ( void )
Gets the maximum allowable depth. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::getSubIterator</FName>
    <Desc>public RecursiveIterator RecursiveIteratorIterator::getSubIterator ([ int $level ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::key</FName>
    <Desc>public mixed RecursiveIteratorIterator::key ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::next</FName>
    <Desc>public void RecursiveIteratorIterator::next ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::nextElement</FName>
    <Desc>public void RecursiveIteratorIterator::nextElement ( void )
Called when the next element is available. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::rewind</FName>
    <Desc>public void RecursiveIteratorIterator::rewind ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::setMaxDepth</FName>
    <Desc>public void RecursiveIteratorIterator::setMaxDepth ([ int $max_depth = -1 ] )
Set the maximum allowed depth. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveIteratorIterator::valid</FName>
    <Desc>public bool RecursiveIteratorIterator::valid ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveRegexIterator::__construct</FName>
    <Desc>public RecursiveRegexIterator::__construct ( RecursiveIterator $iterator , string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0 ]]] )
Creates a new regular expression iterator.
</Desc>
    <FName>RecursiveRegexIterator::getChildren</FName>
    <Desc>public RecursiveRegexIterator RecursiveRegexIterator::getChildren ( void )
Returns an iterator for the current iterator entry.
</Desc>
    <FName>RecursiveRegexIterator::hasChildren</FName>
    <Desc>public bool RecursiveRegexIterator::hasChildren ( void )
Returns whether an iterator can be obtained for the current entry. This iterator can be obtained via RecursiveRegexIterator::getChildren().
</Desc>
    <FName>RecursiveTreeIterator::beginChildren</FName>
    <Desc>public void RecursiveTreeIterator::beginChildren ( void )
Called when recursing one level down. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::beginIteration</FName>
    <Desc>public RecursiveIterator RecursiveTreeIterator::beginIteration ( void )
Called when iteration begins (after the first RecursiveTreeIterator::rewind() call). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::callGetChildren</FName>
    <Desc>public RecursiveIterator RecursiveTreeIterator::callGetChildren ( void )
Gets children of the current element. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::callHasChildren</FName>
    <Desc>public bool RecursiveTreeIterator::callHasChildren ( void )
Called for each element to test whether it has children. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::__construct</FName>
    <Desc>public RecursiveTreeIterator::__construct ( RecursiveIterator|IteratorAggregate $it [, int $flags = RecursiveTreeIterator::BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST ]]] )
Constructs a new RecursiveTreeIterator from the supplied recursive iterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::current</FName>
    <Desc>public string RecursiveTreeIterator::current ( void )
Gets the current element prefixed and postfixed. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::endChildren</FName>
    <Desc>public void RecursiveTreeIterator::endChildren ( void )
Called when end recursing one level. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::endIteration</FName>
    <Desc>public void RecursiveTreeIterator::endIteration ( void )
Called when the iteration ends (when RecursiveTreeIterator::valid() first returns FALSE) 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::getEntry</FName>
    <Desc>public string RecursiveTreeIterator::getEntry ( void )
Gets the part of the tree built for the current element. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::getPostfix</FName>
    <Desc>public string RecursiveTreeIterator::getPostfix ( void )
Gets the string to place after the current element. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::getPrefix</FName>
    <Desc>public string RecursiveTreeIterator::getPrefix ( void )
Gets the string to place in front of current element 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::key</FName>
    <Desc>public string RecursiveTreeIterator::key ( void )
Gets the current key prefixed and postfixed. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::next</FName>
    <Desc>public void RecursiveTreeIterator::next ( void )
Moves forward to the next element. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::nextElement</FName>
    <Desc>public void RecursiveTreeIterator::nextElement ( void )
Called when the next element is available. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::rewind</FName>
    <Desc>public void RecursiveTreeIterator::rewind ( void )
Rewinds the iterator to the first element of the top level inner iterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::setPostfix</FName>
    <Desc>public void RecursiveTreeIterator::setPostfix ( string $postfix )
Sets postfix as used in RecursiveTreeIterator::getPostfix(). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::setPrefixPart</FName>
    <Desc>public void RecursiveTreeIterator::setPrefixPart ( int $part , string $value )
Sets a part of the prefix used in the graphic tree. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RecursiveTreeIterator::valid</FName>
    <Desc>public bool RecursiveTreeIterator::valid ( void )
Check whether the current position is valid. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Reflection::export</FName>
    <Desc>public static string Reflection::export ( Reflector $reflector [, bool $return = FALSE ] )
Exports a reflection. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Reflection::getModifierNames</FName>
    <Desc>public static array Reflection::getModifierNames ( int $modifiers )
Gets modifier names.
</Desc>
    <FName>ReflectionClass::__construct</FName>
    <Desc>public ReflectionClass::__construct ( mixed $argument )
Constructs a new ReflectionClass object.
</Desc>
    <FName>ReflectionClass::export</FName>
    <Desc>public static string ReflectionClass::export ( mixed $argument [, bool $return = FALSE ] )
Exports a reflected class.
</Desc>
    <FName>ReflectionClass::getConstant</FName>
    <Desc>public mixed ReflectionClass::getConstant ( string $name )
Gets the defined constant. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::getConstants</FName>
    <Desc>public array ReflectionClass::getConstants ( void )
Gets all defined constants from a class, regardless of their visibility.
</Desc>
    <FName>ReflectionClass::getConstructor</FName>
    <Desc>public ReflectionMethod ReflectionClass::getConstructor ( void )
Gets the constructor of the reflected class.
</Desc>
    <FName>ReflectionClass::getDefaultProperties</FName>
    <Desc>public array ReflectionClass::getDefaultProperties ( void )
Gets default properties from a class (including inherited properties). 
Note: 
This method only works for static properties when used on internal classes. The default value of a static class property can not be tracked when using this method on user defined classes.
</Desc>
    <FName>ReflectionClass::getDocComment</FName>
    <Desc>public string ReflectionClass::getDocComment ( void )
Gets doc comments from a class. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::getEndLine</FName>
    <Desc>public int ReflectionClass::getEndLine ( void )
Gets end line number from a user-defined class definition.
</Desc>
    <FName>ReflectionClass::getExtension</FName>
    <Desc>public ReflectionExtension ReflectionClass::getExtension ( void )
Gets a ReflectionExtension object for the extension which defined the class.
</Desc>
    <FName>ReflectionClass::getExtensionName</FName>
    <Desc>public string ReflectionClass::getExtensionName ( void )
Gets the name of the extension which defined the class.
</Desc>
    <FName>ReflectionClass::getFileName</FName>
    <Desc>public string ReflectionClass::getFileName ( void )
Gets the filename of the file in which the class has been defined.
</Desc>
    <FName>ReflectionClass::getInterfaceNames</FName>
    <Desc>public array ReflectionClass::getInterfaceNames ( void )
Get the interface names.
</Desc>
    <FName>ReflectionClass::getInterfaces</FName>
    <Desc>public array ReflectionClass::getInterfaces ( void )
Gets the interfaces.
</Desc>
    <FName>ReflectionClass::getMethod</FName>
    <Desc>public ReflectionMethod ReflectionClass::getMethod ( string $name )
Gets a ReflectionMethod for a class method.
</Desc>
    <FName>ReflectionClass::getMethods</FName>
    <Desc>public array ReflectionClass::getMethods ([ int $filter ] )
Gets an array of methods for the class.
</Desc>
    <FName>ReflectionClass::getModifiers</FName>
    <Desc>public int ReflectionClass::getModifiers ( void )
Returns a bitfield of the access modifiers for this class.
</Desc>
    <FName>ReflectionClass::getName</FName>
    <Desc>public string ReflectionClass::getName ( void )
Gets the class name. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::getNamespaceName</FName>
    <Desc>public string ReflectionClass::getNamespaceName ( void )
Gets the namespace name. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::getParentClass</FName>
    <Desc>public ReflectionClass ReflectionClass::getParentClass ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::getProperties</FName>
    <Desc>public array ReflectionClass::getProperties ([ int $filter ] )
Retrieves reflected properties.
</Desc>
    <FName>ReflectionClass::getProperty</FName>
    <Desc>public ReflectionProperty ReflectionClass::getProperty ( string $name )
Gets a ReflectionProperty for a class's property.
</Desc>
    <FName>ReflectionClass::getReflectionConstant</FName>
    <Desc>public ReflectionClassConstant ReflectionClass::getReflectionConstant ( string $name )
Gets a ReflectionClassConstant for a class's property.
</Desc>
    <FName>ReflectionClass::getReflectionConstants</FName>
    <Desc>public array ReflectionClass::getReflectionConstants ( void )
Retrieves reflected constants.
</Desc>
    <FName>ReflectionClass::getShortName</FName>
    <Desc>public string ReflectionClass::getShortName ( void )
Gets the short name of the class, the part without the namespace.
</Desc>
    <FName>ReflectionClass::getStartLine</FName>
    <Desc>public int ReflectionClass::getStartLine ( void )
Get the starting line number. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::getStaticProperties</FName>
    <Desc>public array ReflectionClass::getStaticProperties ( void )
Get the static properties. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::getStaticPropertyValue</FName>
    <Desc>public mixed ReflectionClass::getStaticPropertyValue ( string $name [, mixed &$def_value ] )
Gets the value of a static property on this class.
</Desc>
    <FName>ReflectionClass::getTraitAliases</FName>
    <Desc>public array ReflectionClass::getTraitAliases ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::getTraitNames</FName>
    <Desc>public array ReflectionClass::getTraitNames ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::getTraits</FName>
    <Desc>public array ReflectionClass::getTraits ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::hasConstant</FName>
    <Desc>public bool ReflectionClass::hasConstant ( string $name )
Checks whether the class has a specific constant defined or not.
</Desc>
    <FName>ReflectionClass::hasMethod</FName>
    <Desc>public bool ReflectionClass::hasMethod ( string $name )
Checks whether a specific method is defined in a class.
</Desc>
    <FName>ReflectionClass::hasProperty</FName>
    <Desc>public bool ReflectionClass::hasProperty ( string $name )
Checks whether the specified property is defined.
</Desc>
    <FName>ReflectionClass::implementsInterface</FName>
    <Desc>public bool ReflectionClass::implementsInterface ( string $interface )
Checks whether it implements an interface.
</Desc>
    <FName>ReflectionClass::inNamespace</FName>
    <Desc>public bool ReflectionClass::inNamespace ( void )
Checks if this class is defined in a namespace.
</Desc>
    <FName>ReflectionClass::isAbstract</FName>
    <Desc>public bool ReflectionClass::isAbstract ( void )
Checks if the class is abstract.
</Desc>
    <FName>ReflectionClass::isAnonymous</FName>
    <Desc>public bool ReflectionClass::isAnonymous ( void )
Checks if a class is an anonymous class.
</Desc>
    <FName>ReflectionClass::isCloneable</FName>
    <Desc>public bool ReflectionClass::isCloneable ( void )
Returns whether this class is cloneable.
</Desc>
    <FName>ReflectionClass::isFinal</FName>
    <Desc>public bool ReflectionClass::isFinal ( void )
Checks if a class is final.
</Desc>
    <FName>ReflectionClass::isInstance</FName>
    <Desc>public bool ReflectionClass::isInstance ( object $object )
Checks if an object is an instance of a class.
</Desc>
    <FName>ReflectionClass::isInstantiable</FName>
    <Desc>public bool ReflectionClass::isInstantiable ( void )
Checks if the class is instantiable.
</Desc>
    <FName>ReflectionClass::isInterface</FName>
    <Desc>public bool ReflectionClass::isInterface ( void )
Checks whether the class is an interface.
</Desc>
    <FName>ReflectionClass::isInternal</FName>
    <Desc>public bool ReflectionClass::isInternal ( void )
Checks if the class is defined internally by an extension, or the core, as opposed to user-defined.
</Desc>
    <FName>ReflectionClass::isIterable</FName>
    <Desc>public bool ReflectionClass::isIterable ( void )
</Desc>
    <FName>ReflectionClass::isIterateable</FName>
    <Desc>public bool ReflectionClass::isIterateable ( void )
Checks whether the class is iterateable.
</Desc>
    <FName>ReflectionClass::isSubclassOf</FName>
    <Desc>public bool ReflectionClass::isSubclassOf ( string $class )
Checks if the class is a subclass of a specified class or implements a specified interface.
</Desc>
    <FName>ReflectionClass::isTrait</FName>
    <Desc>public bool ReflectionClass::isTrait ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::isUserDefined</FName>
    <Desc>public bool ReflectionClass::isUserDefined ( void )
Checks whether the class is user-defined, as opposed to internal.
</Desc>
    <FName>ReflectionClass::newInstance</FName>
    <Desc>public object ReflectionClass::newInstance ( mixed $args [, mixed $... ] )
Creates a new instance of the class. The given arguments are passed to the class constructor.
</Desc>
    <FName>ReflectionClass::newInstanceArgs</FName>
    <Desc>public object ReflectionClass::newInstanceArgs ([ array $args ] )
Creates a new instance of the class, the given arguments are passed to the class constructor.
</Desc>
    <FName>ReflectionClass::newInstanceWithoutConstructor</FName>
    <Desc>public object ReflectionClass::newInstanceWithoutConstructor ( void )
Creates a new instance of the class without invoking the constructor.
</Desc>
    <FName>ReflectionClass::setStaticPropertyValue</FName>
    <Desc>public void ReflectionClass::setStaticPropertyValue ( string $name , mixed $value )
Sets static property value. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClass::__toString</FName>
    <Desc>public string ReflectionClass::__toString ( void )
Returns the string representation of the ReflectionClass object.
</Desc>
    <FName>ReflectionClassConstant::__construct</FName>
    <Desc>public ReflectionClassConstant::__construct ( mixed $class , string $name )
Constructs a new ReflectionClassConstant object.
</Desc>
    <FName>ReflectionClassConstant::export</FName>
    <Desc>public static string ReflectionClassConstant::export ( mixed $class , string $name [, bool $return ] )
Exports a reflection. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionClassConstant::getDeclaringClass</FName>
    <Desc>public ReflectionClass ReflectionClassConstant::getDeclaringClass ( void )
Gets the declaring class.
</Desc>
    <FName>ReflectionClassConstant::getDocComment</FName>
    <Desc>public string ReflectionClassConstant::getDocComment ( void )
Gets doc comments from a class constant.
</Desc>
    <FName>ReflectionClassConstant::getModifiers</FName>
    <Desc>public int ReflectionClassConstant::getModifiers ( void )
Returns a bitfield of the access modifiers for this class constant.
</Desc>
    <FName>ReflectionClassConstant::getName</FName>
    <Desc>public string ReflectionClassConstant::getName ( void )
</Desc>
    <FName>ReflectionClassConstant::getValue</FName>
    <Desc>public mixed ReflectionClassConstant::getValue ( void )
Gets the class constant's value.
</Desc>
    <FName>ReflectionClassConstant::isPrivate</FName>
    <Desc>public bool ReflectionClassConstant::isPrivate ( void )
Checks if the class constant is private.
</Desc>
    <FName>ReflectionClassConstant::isProtected</FName>
    <Desc>public bool ReflectionClassConstant::isProtected ( void )
Checks if the class constant is protected.
</Desc>
    <FName>ReflectionClassConstant::isPublic</FName>
    <Desc>public bool ReflectionClassConstant::isPublic ( void )
Checks if the class constant is public.
</Desc>
    <FName>ReflectionClassConstant::__toString</FName>
    <Desc>public string ReflectionClassConstant::__toString ( void )
Returns the string representation of the ReflectionClassConstant object.
</Desc>
    <FName>ReflectionExtension::__clone</FName>
    <Desc>final private void ReflectionExtension::__clone ( void )
The clone method prevents an object from being cloned. Reflection objects cannot be cloned.
</Desc>
    <FName>ReflectionExtension::__construct</FName>
    <Desc>public ReflectionExtension::__construct ( string $name )
Construct a ReflectionExtension object.
</Desc>
    <FName>ReflectionExtension::export</FName>
    <Desc>public static string ReflectionExtension::export ( string $name [, string $return = FALSE ] )
Exports a reflected extension. The output format of this function is the same as the CLI argument --re [extension].
</Desc>
    <FName>ReflectionExtension::getClasses</FName>
    <Desc>public array ReflectionExtension::getClasses ( void )
Gets a list of classes from an extension.
</Desc>
    <FName>ReflectionExtension::getClassNames</FName>
    <Desc>public array ReflectionExtension::getClassNames ( void )
Gets a listing of class names as defined in the extension.
</Desc>
    <FName>ReflectionExtension::getConstants</FName>
    <Desc>public array ReflectionExtension::getConstants ( void )
Get defined constants from an extension.
</Desc>
    <FName>ReflectionExtension::getDependencies</FName>
    <Desc>public array ReflectionExtension::getDependencies ( void )
Gets dependencies, by listing both required and conflicting dependencies.
</Desc>
    <FName>ReflectionExtension::getFunctions</FName>
    <Desc>public array ReflectionExtension::getFunctions ( void )
Get defined functions from an extension.
</Desc>
    <FName>ReflectionExtension::getINIEntries</FName>
    <Desc>public array ReflectionExtension::getINIEntries ( void )
Get the ini entries for an extension.
</Desc>
    <FName>ReflectionExtension::getName</FName>
    <Desc>public string ReflectionExtension::getName ( void )
Gets the extensions name.
</Desc>
    <FName>ReflectionExtension::getVersion</FName>
    <Desc>public string ReflectionExtension::getVersion ( void )
Gets the version of the extension.
</Desc>
    <FName>ReflectionExtension::info</FName>
    <Desc>public void ReflectionExtension::info ( void )
Prints out the "phpinfo()" snippet for the given extension.
</Desc>
    <FName>ReflectionExtension::isPersistent</FName>
    <Desc>public void ReflectionExtension::isPersistent ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionExtension::isTemporary</FName>
    <Desc>public void ReflectionExtension::isTemporary ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionExtension::__toString</FName>
    <Desc>public string ReflectionExtension::__toString ( void )
Exports a reflected extension and returns it as a string. This is the same as the ReflectionExtension::export() with the return set to TRUE.
</Desc>
    <FName>ReflectionFunction::__construct</FName>
    <Desc>public ReflectionFunction::__construct ( mixed $name )
Constructs a ReflectionFunction object.
</Desc>
    <FName>ReflectionFunction::export</FName>
    <Desc>public static string ReflectionFunction::export ( string $name [, string $return ] )
Exports a Reflected function.
</Desc>
    <FName>ReflectionFunction::getClosure</FName>
    <Desc>public Closure ReflectionFunction::getClosure ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunction::invoke</FName>
    <Desc>public mixed ReflectionFunction::invoke ([ mixed $parameter [, mixed $... ]] )
Invokes a reflected function.
</Desc>
    <FName>ReflectionFunction::invokeArgs</FName>
    <Desc>public mixed ReflectionFunction::invokeArgs ( array $args )
Invokes the function and pass its arguments as array.
</Desc>
    <FName>ReflectionFunction::isDisabled</FName>
    <Desc>public bool ReflectionFunction::isDisabled ( void )
Checks if the function is disabled, via the disable_functions directive.
</Desc>
    <FName>ReflectionFunction::__toString</FName>
    <Desc>public string ReflectionFunction::__toString ( void )
To string.
</Desc>
    <FName>ReflectionFunctionAbstract::__clone</FName>
    <Desc>final private void ReflectionFunctionAbstract::__clone ( void )
Clones a function. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getClosureScopeClass</FName>
    <Desc>public ReflectionClass ReflectionFunctionAbstract::getClosureScopeClass ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getClosureThis</FName>
    <Desc>public object ReflectionFunctionAbstract::getClosureThis ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getDocComment</FName>
    <Desc>public string ReflectionFunctionAbstract::getDocComment ( void )
Get a Doc comment from a function. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getEndLine</FName>
    <Desc>public int ReflectionFunctionAbstract::getEndLine ( void )
Get the ending line number. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getExtension</FName>
    <Desc>public ReflectionExtension ReflectionFunctionAbstract::getExtension ( void )
Get the extension information of a function. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getExtensionName</FName>
    <Desc>public string ReflectionFunctionAbstract::getExtensionName ( void )
Get the extensions name. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getFileName</FName>
    <Desc>public string ReflectionFunctionAbstract::getFileName ( void )
Gets the file name from a user-defined function. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getName</FName>
    <Desc>public string ReflectionFunctionAbstract::getName ( void )
Get the name of the function. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getNamespaceName</FName>
    <Desc>public string ReflectionFunctionAbstract::getNamespaceName ( void )
Get the namespace name where the class is defined. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getNumberOfParameters</FName>
    <Desc>public int ReflectionFunctionAbstract::getNumberOf
</Desc>
    <FName>ReflectionFunctionAbstract::getNumberOfRequiredParameters</FName>
    <Desc>public int ReflectionFunctionAbstract::getNumberOfRequired
</Desc>
    <FName>ReflectionFunctionAbstract::getParameters</FName>
    <Desc>public array ReflectionFunctionAbstract::get
</Desc>
    <FName>ReflectionFunctionAbstract::getReturnType</FName>
    <Desc>public ReflectionType ReflectionFunctionAbstract::getReturnType ( void )
Gets the specified return type of a reflected function.
</Desc>
    <FName>ReflectionFunctionAbstract::getShortName</FName>
    <Desc>public string ReflectionFunctionAbstract::getShortName ( void )
Get the short name of the function (without the namespace part). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getStartLine</FName>
    <Desc>public int ReflectionFunctionAbstract::getStartLine ( void )
Gets the starting line number of the function. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::getStaticVariables</FName>
    <Desc>public array ReflectionFunctionAbstract::getStaticVariables ( void )
Get the static variables. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::hasReturnType</FName>
    <Desc>public bool ReflectionFunctionAbstract::hasReturnType ( void )
Checks whether the reflected function has a return type specified.
</Desc>
    <FName>ReflectionFunctionAbstract::inNamespace</FName>
    <Desc>public bool ReflectionFunctionAbstract::inNamespace ( void )
Checks whether a function is defined in a namespace. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::isClosure</FName>
    <Desc>public bool ReflectionFunctionAbstract::isClosure ( void )
Checks whether the reflected function is a Closure.
</Desc>
    <FName>ReflectionFunctionAbstract::isDeprecated</FName>
    <Desc>public bool ReflectionFunctionAbstract::isDeprecated ( void )
Checks whether the function is deprecated.
</Desc>
    <FName>ReflectionFunctionAbstract::isGenerator</FName>
    <Desc>public bool ReflectionFunctionAbstract::isGenerator ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::isInternal</FName>
    <Desc>public bool ReflectionFunctionAbstract::isInternal ( void )
Checks whether the function is internal, as opposed to user-defined. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::isUserDefined</FName>
    <Desc>public bool ReflectionFunctionAbstract::isUserDefined ( void )
Checks whether the function is user-defined, as opposed to internal. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::isVariadic</FName>
    <Desc>public bool ReflectionFunctionAbstract::isVariadic ( void )
Checks if the function is variadic.
</Desc>
    <FName>ReflectionFunctionAbstract::returnsReference</FName>
    <Desc>public bool ReflectionFunctionAbstract::returnsReference ( void )
Checks whether the function returns a reference. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionFunctionAbstract::__toString</FName>
    <Desc>abstract public void ReflectionFunctionAbstract::__toString ( void )
To string. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionGenerator::__construct</FName>
    <Desc>public ReflectionGenerator::__construct ( Generator $generator )
Constructs a ReflectionGenerator object.
</Desc>
    <FName>ReflectionGenerator::getExecutingFile</FName>
    <Desc>public string ReflectionGenerator::getExecutingFile ( void )
Get the full path and file name of the currently executing generator.
</Desc>
    <FName>ReflectionGenerator::getExecutingGenerator</FName>
    <Desc>public Generator ReflectionGenerator::getExecutingGenerator ( void )
Get the executing Generator object
</Desc>
    <FName>ReflectionGenerator::getExecutingLine</FName>
    <Desc>public int ReflectionGenerator::getExecutingLine ( void )
Get the currently executing line number of the generator.
</Desc>
    <FName>ReflectionGenerator::getFunction</FName>
    <Desc>public ReflectionFunctionAbstract ReflectionGenerator::getFunction ( void )
Enables the function name of the generator to be obtained by returning a class derived from ReflectionFunctionAbstract.
</Desc>
    <FName>ReflectionGenerator::getThis</FName>
    <Desc>public object ReflectionGenerator::getThis ( void )
Get the $this value that the generator has access to.
</Desc>
    <FName>ReflectionGenerator::getTrace</FName>
    <Desc>public array ReflectionGenerator::getTrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT ] )
Get the trace of the currently executing generator.
</Desc>
    <FName>ReflectionMethod::__construct</FName>
    <Desc>public ReflectionMethod::__construct ( mixed $class , string $name )
public ReflectionMethod::__construct ( string $class_method )
Constructs a new ReflectionMethod.
</Desc>
    <FName>ReflectionMethod::export</FName>
    <Desc>public static string ReflectionMethod::export ( string $class , string $name [, bool $return = FALSE ] )
Exports a ReflectionMethod. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionMethod::getClosure</FName>
    <Desc>public Closure ReflectionMethod::getClosure ( object $object )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionMethod::getDeclaringClass</FName>
    <Desc>public ReflectionClass ReflectionMethod::getDeclaringClass ( void )
Gets the declaring class for the reflected method.
</Desc>
    <FName>ReflectionMethod::getModifiers</FName>
    <Desc>public int ReflectionMethod::getModifiers ( void )
Returns a bitfield of the access modifiers for this method.
</Desc>
    <FName>ReflectionMethod::getPrototype</FName>
    <Desc>public ReflectionMethod ReflectionMethod::getPrototype ( void )
Returns the methods prototype.
</Desc>
    <FName>ReflectionMethod::invoke</FName>
    <Desc>public mixed ReflectionMethod::invoke ( object $object [, mixed $parameter [, mixed $... ]] )
Invokes a reflected method.
</Desc>
    <FName>ReflectionMethod::invokeArgs</FName>
    <Desc>public mixed ReflectionMethod::invokeArgs ( object $object , array $args )
Invokes the reflected method and pass its arguments as array.
</Desc>
    <FName>ReflectionMethod::isAbstract</FName>
    <Desc>public bool ReflectionMethod::isAbstract ( void )
Checks if the method is abstract.
</Desc>
    <FName>ReflectionMethod::isConstructor</FName>
    <Desc>public bool ReflectionMethod::isConstructor ( void )
Checks if the method is a constructor.
</Desc>
    <FName>ReflectionMethod::isDestructor</FName>
    <Desc>public bool ReflectionMethod::isDestructor ( void )
Checks if the method is a destructor.
</Desc>
    <FName>ReflectionMethod::isFinal</FName>
    <Desc>public bool ReflectionMethod::isFinal ( void )
Checks if the method is final.
</Desc>
    <FName>ReflectionMethod::isPrivate</FName>
    <Desc>public bool ReflectionMethod::isPrivate ( void )
Checks if the method is private. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionMethod::isProtected</FName>
    <Desc>public bool ReflectionMethod::isProtected ( void )
Checks if the method is protected.
</Desc>
    <FName>ReflectionMethod::isPublic</FName>
    <Desc>public bool ReflectionMethod::isPublic ( void )
Checks if the method is public.
</Desc>
    <FName>ReflectionMethod::isStatic</FName>
    <Desc>public bool ReflectionMethod::isStatic ( void )
Checks if the method is static.
</Desc>
    <FName>ReflectionMethod::setAccessible</FName>
    <Desc>public void ReflectionMethod::setAccessible ( bool $accessible )
Sets a method to be accessible. For example, it may allow protected and private methods to be invoked.
</Desc>
    <FName>ReflectionMethod::__toString</FName>
    <Desc>public string ReflectionMethod::__toString ( void )
Returns the string representation of the Reflection method object.
</Desc>
    <FName>ReflectionNamedType::getName</FName>
    <Desc>public string ReflectionNamedType::getName ( void )
</Desc>
    <FName>ReflectionObject::__construct</FName>
    <Desc>public ReflectionObject::__construct ( object $argument )
Constructs a ReflectionObject. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionObject::export</FName>
    <Desc>public static string ReflectionObject::export ( string $argument [, bool $return ] )
Exports a reflection. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionParameter::allowsNull</FName>
    <Desc>public bool ReflectionParameter::allowsNull ( void )
Checks whether the parameter allows NULL. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionParameter::canBePassedByValue</FName>
    <Desc>public bool ReflectionParameter::canBePassedByValue ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionParameter::__clone</FName>
    <Desc>final private void ReflectionParameter::__clone ( void )
Clones. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionParameter::__construct</FName>
    <Desc>public ReflectionParameter::__construct ( string $function , string $parameter )
Constructs a ReflectionParameter class. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionParameter::export</FName>
    <Desc>public static string ReflectionParameter::export ( string $function , string $parameter [, bool $return ] )
Exports. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionParameter::getClass</FName>
    <Desc>public ReflectionClass ReflectionParameter::getClass ( void )
Gets the class type hinted for the parameter as a ReflectionClass object. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionParameter::getDeclaringClass</FName>
    <Desc>public ReflectionClass ReflectionParameter::getDeclaringClass ( void )
Gets the declaring class. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionParameter::getDeclaringFunction</FName>
    <Desc>public ReflectionFunctionAbstract ReflectionParameter::getDeclaringFunction ( void )
Gets the declaring function. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionParameter::getDefaultValue</FName>
    <Desc>public mixed ReflectionParameter::getDefaultValue ( void )
Gets the default value of the parameter for a user-defined function or method. If the parameter is not optional a ReflectionException will be thrown.
</Desc>
    <FName>ReflectionParameter::getDefaultValueConstantName</FName>
    <Desc>public string ReflectionParameter::getDefaultValueConstantName ( void )
Returns the default value's constant name of the parameter of a user-defined function or method, if default value is constant or null. If the parameter is not optional a ReflectionException will be thrown.
</Desc>
    <FName>ReflectionParameter::getName</FName>
    <Desc>public string ReflectionParameter::getName ( void )
Gets the name of the parameter.
</Desc>
    <FName>ReflectionParameter::getPosition</FName>
    <Desc>public int ReflectionParameter::getPosition ( void )
Gets the position of the parameter.
</Desc>
    <FName>ReflectionParameter::getType</FName>
    <Desc>public ReflectionType ReflectionParameter::getType ( void )
Gets the associated type of a parameter.
</Desc>
    <FName>ReflectionParameter::hasType</FName>
    <Desc>public bool ReflectionParameter::hasType ( void )
Checks if the parameter has a type associated with it.
</Desc>
    <FName>ReflectionParameter::isArray</FName>
    <Desc>public bool ReflectionParameter::isArray ( void )
Checks if the parameter expects an array.
</Desc>
    <FName>ReflectionParameter::isCallable</FName>
    <Desc>public bool ReflectionParameter::isCallable ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionParameter::isDefaultValueAvailable</FName>
    <Desc>public bool ReflectionParameter::isDefaultValueAvailable ( void )
Checks if a default value for the parameter is available.
</Desc>
    <FName>ReflectionParameter::isDefaultValueConstant</FName>
    <Desc>public bool ReflectionParameter::isDefaultValueConstant ( void )
Returns whether the default value of this parameter is a constant.
</Desc>
    <FName>ReflectionParameter::isOptional</FName>
    <Desc>public bool ReflectionParameter::isOptional ( void )
Checks if the parameter is optional.
</Desc>
    <FName>ReflectionParameter::isPassedByReference</FName>
    <Desc>public bool ReflectionParameter::isPassedByReference ( void )
Checks if the parameter is passed in by reference. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionParameter::isVariadic</FName>
    <Desc>public bool ReflectionParameter::isVariadic ( void )
Checks if the parameter was declared as a variadic parameter.
</Desc>
    <FName>ReflectionParameter::__toString</FName>
    <Desc>public string ReflectionParameter::__toString ( void )
To string. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionProperty::__clone</FName>
    <Desc>final private void ReflectionProperty::__clone ( void )
Clones. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionProperty::__construct</FName>
    <Desc>public ReflectionProperty::__construct ( mixed $class , string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionProperty::export</FName>
    <Desc>public static string ReflectionProperty::export ( mixed $class , string $name [, bool $return ] )
Exports a reflection. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionProperty::getDeclaringClass</FName>
    <Desc>public ReflectionClass ReflectionProperty::getDeclaringClass ( void )
Gets the declaring class. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionProperty::getDocComment</FName>
    <Desc>public string ReflectionProperty::getDocComment ( void )
Gets the doc comment for a property.
</Desc>
    <FName>ReflectionProperty::getModifiers</FName>
    <Desc>public int ReflectionProperty::getModifiers ( void )
Gets the modifiers. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionProperty::getName</FName>
    <Desc>public string ReflectionProperty::getName ( void )
Gets the properties name. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionProperty::getValue</FName>
    <Desc>public mixed ReflectionProperty::getValue ([ object $object ] )
Gets the property's value.
</Desc>
    <FName>ReflectionProperty::isDefault</FName>
    <Desc>public bool ReflectionProperty::isDefault ( void )
Checks whether the property was declared at compile-time, or whether the property was dynamically declared at run-time.
</Desc>
    <FName>ReflectionProperty::isPrivate</FName>
    <Desc>public bool ReflectionProperty::isPrivate ( void )
Checks whether the property is private.
</Desc>
    <FName>ReflectionProperty::isProtected</FName>
    <Desc>public bool ReflectionProperty::isProtected ( void )
Checks whether the property is protected.
</Desc>
    <FName>ReflectionProperty::isPublic</FName>
    <Desc>public bool ReflectionProperty::isPublic ( void )
Checks whether the property is public.
</Desc>
    <FName>ReflectionProperty::isStatic</FName>
    <Desc>public bool ReflectionProperty::isStatic ( void )
Checks whether the property is static.
</Desc>
    <FName>ReflectionProperty::setAccessible</FName>
    <Desc>public void ReflectionProperty::setAccessible ( bool $accessible )
Sets a property to be accessible. For example, it may allow protected and private properties to be accessed.
</Desc>
    <FName>ReflectionProperty::setValue</FName>
    <Desc>public void ReflectionProperty::setValue ( object $object , mixed $value )
public void ReflectionProperty::setValue ( mixed $value )
Sets (changes) the property's value.
</Desc>
    <FName>ReflectionProperty::__toString</FName>
    <Desc>public string ReflectionProperty::__toString ( void )
To string. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionType::allowsNull</FName>
    <Desc>public bool ReflectionType::allowsNull ( void )
Checks whether the parameter allows NULL.
</Desc>
    <FName>ReflectionType::isBuiltin</FName>
    <Desc>public bool ReflectionType::isBuiltin ( void )
Checks if the type is a built-in type in PHP.
</Desc>
    <FName>ReflectionType::__toString</FName>
    <Desc>public string ReflectionType::__toString ( void )
Gets the parameter type name.
</Desc>
    <FName>ReflectionZendExtension::__clone</FName>
    <Desc>final private void ReflectionZendExtension::__clone ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionZendExtension::__construct</FName>
    <Desc>public ReflectionZendExtension::__construct ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionZendExtension::export</FName>
    <Desc>public static string ReflectionZendExtension::export ( string $name [, bool $return ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionZendExtension::getAuthor</FName>
    <Desc>public string ReflectionZendExtension::getAuthor ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionZendExtension::getCopyright</FName>
    <Desc>public string ReflectionZendExtension::getCopyright ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionZendExtension::getName</FName>
    <Desc>public string ReflectionZendExtension::getName ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionZendExtension::getURL</FName>
    <Desc>public string ReflectionZendExtension::getURL ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionZendExtension::getVersion</FName>
    <Desc>public string ReflectionZendExtension::getVersion ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>ReflectionZendExtension::__toString</FName>
    <Desc>public string ReflectionZendExtension::__toString ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Reflector::export</FName>
    <Desc>public static string Reflector::export ( void )
Exports. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Reflector::__toString</FName>
    <Desc>public string Reflector::__toString ( void )
To string. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RegexIterator::accept</FName>
    <Desc>public bool RegexIterator::accept ( void )
Matches (string) RegexIterator::current() (or RegexIterator::key() if the RegexIterator::USE_KEY flag is set) against the regular expression.
</Desc>
    <FName>RegexIterator::__construct</FName>
    <Desc>public RegexIterator::__construct ( Iterator $iterator , string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0 ]]] )
Create a new RegexIterator which filters an Iterator using a regular expression.
</Desc>
    <FName>RegexIterator::getFlags</FName>
    <Desc>public int RegexIterator::getFlags ( void )
Returns the flags, see RegexIterator::setFlags() for a list of available flags.
</Desc>
    <FName>RegexIterator::getMode</FName>
    <Desc>public int RegexIterator::getMode ( void )
Returns the operation mode, see RegexIterator::setMode() for the list of operation modes.
</Desc>
    <FName>RegexIterator::getPregFlags</FName>
    <Desc>public int RegexIterator::getPregFlags ( void )
Returns the regular expression flags, see RegexIterator::__construct() for the list of flags.
</Desc>
    <FName>RegexIterator::getRegex</FName>
    <Desc>public string RegexIterator::getRegex ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>RegexIterator::setFlags</FName>
    <Desc>public void RegexIterator::setFlags ( int $flags )
Sets the flags.
</Desc>
    <FName>RegexIterator::setMode</FName>
    <Desc>public void RegexIterator::setMode ( int $mode )
Sets the operation mode.
</Desc>
    <FName>RegexIterator::setPregFlags</FName>
    <Desc>public void RegexIterator::setPregFlags ( int $preg_flags )
Sets the regular expression flags.
</Desc>
    <FName>ResourceBundle::count</FName>
    <Desc>Object oriented style 
public int ResourceBundle::count ( void )
Procedural style 
int resourcebundle_count ( ResourceBundle $r )
Get the number of elements in the bundle.
</Desc>
    <FName>resourcebundle_count</FName>
    <Desc>Object oriented style 
public int ResourceBundle::count ( void )
Procedural style 
int resourcebundle_count ( ResourceBundle $r )
Get the number of elements in the bundle.
</Desc>
    <FName>ResourceBundle::create</FName>
    <Desc>Object oriented style (method) 
public static ResourceBundle ResourceBundle::create ( string $locale , string $bundlename [, bool $fallback ] )
Procedural style 
ResourceBundle resourcebundle_create ( string $locale , string $bundlename [, bool $fallback ] )
Object oriented style (constructor): 
public ResourceBundle::__construct ( string $locale , string $bundlename [, bool $fallback ] )
Creates a resource bundle.
</Desc>
    <FName>resourcebundle_create</FName>
    <Desc>Object oriented style (method) 
public static ResourceBundle ResourceBundle::create ( string $locale , string $bundlename [, bool $fallback ] )
Procedural style 
ResourceBundle resourcebundle_create ( string $locale , string $bundlename [, bool $fallback ] )
Object oriented style (constructor): 
public ResourceBundle::__construct ( string $locale , string $bundlename [, bool $fallback ] )
Creates a resource bundle.
</Desc>
    <FName>ResourceBundle::get</FName>
    <Desc>Object oriented style 
public mixed ResourceBundle::get ( string|int $index [, bool $fallback = TRUE ] )
Procedural style 
mixed resourcebundle_get ( ResourceBundle $r , string|int $index [, bool $fallback = TRUE ] )
Get the data from the bundle by index or string key.
</Desc>
    <FName>resourcebundle_get</FName>
    <Desc>Object oriented style 
public mixed ResourceBundle::get ( string|int $index [, bool $fallback = TRUE ] )
Procedural style 
mixed resourcebundle_get ( ResourceBundle $r , string|int $index [, bool $fallback = TRUE ] )
Get the data from the bundle by index or string key.
</Desc>
    <FName>ResourceBundle::getErrorCode</FName>
    <Desc>Object oriented style 
public int ResourceBundle::getErrorCode ( void )
Procedural style 
int resourcebundle_get_error_code ( ResourceBundle $r )
Get error code from the last function performed by the bundle object.
</Desc>
    <FName>resourcebundle_get_error_code</FName>
    <Desc>Object oriented style 
public int ResourceBundle::getErrorCode ( void )
Procedural style 
int resourcebundle_get_error_code ( ResourceBundle $r )
Get error code from the last function performed by the bundle object.
</Desc>
    <FName>ResourceBundle::getErrorMessage</FName>
    <Desc>Object oriented style 
public string ResourceBundle::getErrorMessage ( void )
Procedural style 
string resourcebundle_get_error_message ( ResourceBundle $r )
Get error message from the last function performed by the bundle object.
</Desc>
    <FName>resourcebundle_get_error_message</FName>
    <Desc>Object oriented style 
public string ResourceBundle::getErrorMessage ( void )
Procedural style 
string resourcebundle_get_error_message ( ResourceBundle $r )
Get error message from the last function performed by the bundle object.
</Desc>
    <FName>ResourceBundle::getLocales</FName>
    <Desc>Object oriented style 
public array ResourceBundle::getLocales ( string $bundlename )
Procedural style 
array resourcebundle_locales ( string $bundlename )
Get available locales from ResourceBundle name.
</Desc>
    <FName>resourcebundle_locales</FName>
    <Desc>Object oriented style 
public array ResourceBundle::getLocales ( string $bundlename )
Procedural style 
array resourcebundle_locales ( string $bundlename )
Get available locales from ResourceBundle name.
</Desc>
    <FName>RRDCreator::addArchive</FName>
    <Desc>public void RRDCreator::addArchive ( string $description )
Adds RRA definition by description of archive. Archive consists of a number of data values or statistics for each of the defined data-sources (DS). Data sources are defined by method RRDCreator::addDataSource(). You need call this method for each requested archive.
</Desc>
    <FName>RRDCreator::addDataSource</FName>
    <Desc>public void RRDCreator::addDataSource ( string $description )
RRD can accept input from several data sources (DS), e.g incoming and outgoing traffic. This method adds data source by description. You need call this method for each data source.
</Desc>
    <FName>RRDCreator::__construct</FName>
    <Desc>public RRDCreator::__construct ( string $path [, string $startTime [, int $step = 0 ]] )
Creates new RRDCreator instance.
</Desc>
    <FName>RRDCreator::save</FName>
    <Desc>public bool RRDCreator::save ( void )
Saves the RRD database into file, which name is defined by RRDCreator::__construct().
</Desc>
    <FName>RRDGraph::__construct</FName>
    <Desc>public RRDGraph::__construct ( string $path )
Creates new RRDGraph instance. This instance is responsible for rendering the result of RRD database query into image.
</Desc>
    <FName>RRDGraph::save</FName>
    <Desc>public array RRDGraph::save ( void )
Saves the result of RRD database query into image defined by RRDGraph::__construct().
</Desc>
    <FName>RRDGraph::saveVerbose</FName>
    <Desc>public array RRDGraph::saveVerbose ( void )
Saves the RRD database query into image file defined by method RRDGraph::__construct() and returns the verbose information about generated graph, if "-" is used as image filename, image data are also returned in result array.
</Desc>
    <FName>RRDGraph::setOptions</FName>
    <Desc>public void RRDGraph::setOptions ( array $options )
</Desc>
    <FName>RRDUpdater::__construct</FName>
    <Desc>public RRDUpdater::__construct ( string $path )
Creates new RRDUpdater instance. This instance is responsible for updating the RRD database file.
</Desc>
    <FName>RRDUpdater::update</FName>
    <Desc>public bool RRDUpdater::update ( array $values [, string $time = time() ] )
Updates the RRD file defined via RRDUpdater::__construct(). The file is updated with a specific values.
</Desc>
    <FName>Runkit_Sandbox_Parent</FName>
    <Desc>void Runkit_Sandbox_Parent::__construct ( void )
Instantiating the Runkit_Sandbox_Parent class from within a sandbox environment created from the Runkit_Sandbox class provides some (controlled) means for a sandbox child to access its parent. 
Note: Sandbox support (required for runkit_lint(), runkit_lint_file(), and the Runkit_Sandbox class) is only available as of PHP 5.1.0 or specially patched versions of PHP 5.0, and requires that thread safety be enabled. See the README file included in the runkit package for more information.
In order for any of the Runkit_Sandbox_Parent features to function. Support must be enabled on a per-sandbox basis by enabling the parent_access flag from the parent's context. 
Example #1 Working with variables in a sandbox
<?php
$sandbox = new Runkit_Sandbox();
$sandbox['parent_access'] = true;
?> 
Accessing the Parent's Variables
Just as with sandbox variable access, a sandbox parent's variables may be read from and written to as properties of the Runkit_Sandbox_Parent class. Read access to parental variables may be enabled with the parent_read setting (in addition to the base parent_access setting). Write access, in turn, is enabled through the parent_write setting. 
Unlike sandbox child variable access, the variable scope is not limited to globals only. By setting the parent_scope setting to an appropriate integer value, other scopes in the active call stack may be inspected instead. A value of 0 (Default) will direct variable access at the global scope. 1 will point variable access at whatever variable scope was active at the time the current block of sandbox code was executed. Higher values progress back through the functions that called the functions that led to the sandbox executing code that tried to access its own parent's variables. 
Example #2 Accessing parental variables
<?php
$php = new Runkit_Sandbox();
$php['parent_access'] = true;
$php['parent_read'] = true;

$test = "Global";

$php->eval('$PARENT = new Runkit_Sandbox_Parent;');

$php['parent_scope'] = 0;
one();

$php['parent_scope'] = 1;
one();

$php['parent_scope'] = 2;
one();

$php['parent_scope'] = 3;
one();

$php['parent_scope'] = 4;
one();

$php['parent_scope'] = 5;
one();

function one() {
    $test = "one()";
    two();
}

function two() {
    $test = "two()";
    three();
}

function three() {
    $test = "three()";
    $GLOBALS['php']->eval('var_dump($PARENT->test);');
}
?> 
The above example will output:
string(6) "Global"
string(7) "three()"
string(5) "two()"
string(5) "one()"
string(6) "Global"
string(6) "Global"
Calling the Parent's Functions
Just as with sandbox access, a sandbox may access its parents functions providing that the proper settings have been enabled. Enabling parent_call will allow the sandbox to call all functions available to the parent scope. Language constructs are each controlled by their own setting: print and echo are enabled with parent_echo. die() and exit() are enabled with parent_die. eval() is enabled with parent_eval while include, include_once, require, and require_once are enabled through parent_include. 
</Desc>
    <FName>Runkit_Sandbox</FName>
    <Desc>Instantiating the Runkit_Sandbox class creates a new thread with its own scope and program stack. Using a set of options passed to the constructor, this environment may be restricted to a subset of what the primary interpreter can do and provide a safer environment for executing user supplied code. 
Note: Sandbox support (required for runkit_lint(), runkit_lint_file(), and the Runkit_Sandbox class) is only available as of PHP 5.1.0 or specially patched versions of PHP 5.0, and requires that thread safety be enabled. See the README file included in the runkit package for more information.
Constructor
void Runkit_Sandbox::__construct ([ array $options ] )
options is an associative array containing any combination of the special ini options listed below. 
safe_mode 
If the outer script which is instantiating the Runkit_Sandbox class is configured with safe_mode = off, then safe_mode may be turned on for the sandbox environment. This setting can not be used to disable safe_mode when it's already enabled in the outer script. 
safe_mode_gid 
If the outer script which is instantiating the Runkit_Sandbox class is configured with safe_mode_gid = on, then safe_mode_gid may be turned off for the sandbox environment. This setting can not be used to enable safe_mode_gid when it's already disabled in the outer script. 
safe_mode_include_dir 
If the outer script which is instantiating the Runkit_Sandbox class is configured with a safe_mode_include_dir, then a new safe_mode_include_dir may be set for sandbox environments below the currently defined value. safe_mode_include_dir may also be cleared to indicate that the bypass feature is disabled. If safe_mode_include_dir was blank in the outer script, but safe_mode was not enabled, then any arbitrary safe_mode_include_dir may be set while turning safe_mode on. 
open_basedir 
open_basedir may be set to any path below the current setting of open_basedir. If open_basedir is not set within the global scope, then it is assumed to be the root directory and may be set to any location. 
allow_url_fopen 
Like safe_mode, this setting can only be made more restrictive, in this case by setting it to FALSE when it is previously set to TRUE 
disable_functions 
Comma separated list of functions to disable within the sandbox sub-interpreter. This list need not contain the names of the currently disabled functions, they will remain disabled whether listed here or not. 
disable_classes 
Comma separated list of classes to disable within the sandbox sub-interpreter. This list need not contain the names of the currently disabled classes, they will remain disabled whether listed here or not. 
runkit.superglobal 
Comma separated list of variables to be treated as superglobals within the sandbox sub-interpreter. These variables will be used in addition to any variables defined internally or through the global runkit.superglobal setting. 
runkit.internal_override 
Ini option runkit.internal_override may be disabled (but not re-enabled) within sandboxes. 
Example #1 Instantiating a restricted sandbox
<?php
$options = array(
  'safe_mode'=>true,
  'open_basedir'=>'/var/www/users/jdoe/',
  'allow_url_fopen'=>'false',
  'disable_functions'=>'exec,shell_exec,passthru,system',
  'disable_classes'=>'myAppClass');
$sandbox = new Runkit_Sandbox($options);
/* Non-protected ini settings may set normally */
$sandbox->ini_set('html_errors',true);
?> 
Accessing Variables
All variables in the global scope of the sandbox environment are accessible as properties of the sandbox object. The first thing to note is that because of the way memory between these two threads is managed, object and resource variables can not currently be exchanged between interpreters. Additionally, all arrays are deep copied and any references will be lost. This also means that references between interpreters are not possible. 
Example #2 Working with variables in a sandbox
<?php
$sandbox = new Runkit_Sandbox();

$sandbox->foo = 'bar';
$sandbox->eval('echo "$foo\n"; $bar = $foo . "baz";');
echo "{$sandbox->bar}\n";
if (isset($sandbox->foo)) unset($sandbox->foo);
$sandbox->eval('var_dump(isset($foo));');
?> 
The above example will output:
bar
barbaz
bool(false)
Calling PHP Functions
Any function defined within the sandbox may be called as a method on the sandbox object. This also includes a few pseudo-function language constructs: eval(), include, include_once, require, require_once, echo, print, die(), and exit(). 
Example #3 Calling sandbox functions
<?php
$sandbox = new Runkit_Sandbox();

echo $sandbox->str_replace('a','f','abc');
?> 
The above example will output:
fbc
When passing arguments to a sandbox function, the arguments are taken from the outer instance of PHP. If you wish to pass arguments from the sandbox's scope, be sure to access them as properties of the sandbox object as illustrated above. 
Example #4 Passing arguments to sandbox functions
<?php
$sandbox = new Runkit_Sandbox();

$foo = 'bar';
$sandbox->foo = 'baz';
echo $sandbox->str_replace('a',$foo,'a');
echo $sandbox->str_replace('a',$sandbox->foo,'a');
?> 
The above example will output:
bar
baz
Changing Sandbox Settings
As of runkit version 0.5, certain Sandbox settings may be modified on the fly using ArrayAccess syntax. Some settings, such as active are read-only and meant to provide status information. Other settings, such as output_handler may be set and read much like a normal array offset. Future settings may be write-only, however no such settings currently exist. 
Sandbox Settings / Status IndicatorsSettingTypePurposeDefault
activeBoolean (Read Only)TRUE if the Sandbox is still in a usable state, FALSE if the request is in bailout due to a call to die(), exit(), or because of a fatal error condition. TRUE (Initial)
output_handlerCallbackWhen set to a valid callback, all output generated by the Sandbox instance will be processed through the named function. Sandbox output handlers follow the same calling conventions as the system-wide output handler. None
parent_accessBooleanMay the sandbox use instances of the Runkit_Sandbox_Parent class? Must be enabled for other Runkit_Sandbox_Parent related settings to work. FALSE
parent_readBooleanMay the sandbox read variables in its parent's context? FALSE
parent_writeBooleanMay the sandbox modify variables in its parent's context? FALSE
parent_evalBooleanMay the sandbox evaluate arbitrary code in its parent's context? DANGEROUS FALSE
parent_includeBooleanMay the sandbox include php code files in its parent's context? DANGEROUS FALSE
parent_echoBooleanMay the sandbox echo data in its parent's context effectively bypassing its own output_handler? FALSE
parent_callBooleanMay the sandbox call functions in its parent's context? FALSE
parent_dieBooleanMay the sandbox kill its own parent? (And thus itself) FALSE
parent_scopeIntegerWhat scope will parental property access look at? 0 == Global scope, 1 == Calling scope, 2 == Scope preceding calling scope, 3 == The scope before that, etc..., etc... 0 (Global)
parent_scopeStringWhen parent_scope is set to a string value, it refers to a named array variable in the global scope. If the named variable does not exist at the time of access it will be created as an empty array. If the variable exists but it not an array, a dummy array will be created containing a reference to the named global variable.  
</Desc>
    <FName>SAMConnection::commit</FName>
    <Desc>bool SAMConnection::commit ( void )
Calling the "commit" method on a Connection object commits (completes) all in-flight transactions that are part of the current unit of work.
</Desc>
    <FName>SAMConnection::connect</FName>
    <Desc>bool SAMConnection::connect ( string $protocol [, array $properties ] )
Calling the "connect" method on a SAMConnection object connects the PHP script to a messaging server. No messages can be sent or received until a connection is made.
</Desc>
    <FName>SAMConnection::__construct</FName>
    <Desc>SAMConnection::__construct ( void )
Creates a new SAMConnection object.
</Desc>
    <FName>SAMConnection::disconnect</FName>
    <Desc>bool SAMConnection::disconnect ( void )
Calling the "disconnect" method on a SAMConnection object disconnects the PHP script from a messaging server. No messages can be sent or received after a connection has been disconnected.
</Desc>
    <FName>SAMConnection::errno</FName>
    <Desc>int $SAMConnection->errno;
Contains the numeric error code of the last executed SAM operation on this connection. If the last operation completed successfully this property contains 0.
</Desc>
    <FName>SAMConnection::error</FName>
    <Desc>string $SAMConnection->error;
Contains the text description of the last failed SAM operation on this connection. If the last operation completed successfully this property contains an empty string.
</Desc>
    <FName>SAMConnection::isConnected</FName>
    <Desc>bool SAMConnection::isConnected ( void )
Calling the "isConnected" method on a Connection object will check whether the PHP script is connected to a messaging server. No messages can be sent or received unless a connection has been established with a Messaging server.
</Desc>
    <FName>SAMConnection::peek</FName>
    <Desc>SAMMessage SAMConnection::peek ( string $target [, array $properties ] )
</Desc>
    <FName>SAMConnection::peekAll</FName>
    <Desc>array SAMConnection::peekAll ( string $target [, array $properties ] )
</Desc>
    <FName>SAMConnection::receive</FName>
    <Desc>SAMMessage SAMConnection::receive ( string $target [, array $properties ] )
</Desc>
    <FName>SAMConnection::remove</FName>
    <Desc>SAMMessage SAMConnection::remove ( string $target [, array $properties ] )
Removes a message from a queue.
</Desc>
    <FName>SAMConnection::rollback</FName>
    <Desc>bool SAMConnection::rollback ( void )
Rolls back an in-flight unit of work.
</Desc>
    <FName>SAMConnection::send</FName>
    <Desc>string SAMConnection::send ( string $target , SAMMessage $msg [, array $properties ] )
The "send" method is used to send a message to a specific queue or to publish to a specific topic. The method returns a correlation id that can be used as a selector to identify reply or response messages when these are requested.
</Desc>
    <FName>SAMConnection::setDebug</FName>
    <Desc>The "setdebug" method is used to turn on or off additional debugging output. The SAM framework will provide method/function entry and exit trace data plus additional information. Protocol specific implementations also provide extra output. 
void SAMConnection::setDebug ( bool $switch )
</Desc>
    <FName>SAMConnection::subscribe</FName>
    <Desc>string SAMConnection::subscribe ( string $targetTopic )
The "subscribe" method is used to create a new subscription to a specified topic.
</Desc>
    <FName>SAMConnection::unsubscribe</FName>
    <Desc>bool SAMConnection::unsubscribe ( string $subscriptionId [, string $targetTopic ] )
The "unsubscribe" method is used to delete an existing subscription to a specified topic.
</Desc>
    <FName>SAMMessage::body</FName>
    <Desc>string $SAMMessage->body;
The "body" property contains the actual body of the message. It may not always be set.
</Desc>
    <FName>SAMMessage::__construct</FName>
    <Desc>SAMMessage::__construct ([ mixed $body ] )
Creates a new SAMMessage object optionally specifying a message body.
</Desc>
    <FName>SAMMessage::header</FName>
    <Desc>object $SAMMessage->header;
The header property is a container for any system or user properties that area associated with the message. 
Properties may be assigned by the sender of a message to control the way the messaging systems handles it or may be assigned by the messaging system itself to tell the recipient extra information about the message or the way in which it has been handled. 
Some properties are understood by SAM in which case constants have been defined for them. The majority of properties however are ignored by the SAM implementation and simply passed through to the underlying messaging systems allowing the application to use messaging specific property names or to define its own "user" properties. 
The SAM defined properties are as follows: Property namePossible values
SAM_MESSAGEIDWhen a message is received this field contains the unique identifier of the message as allocated by the underlying messaging system. When sending a message this field is ignored. 
SAM_REPLY_TOA string providing the identity of the queue on to which responses to this message should be posted. 
SAM_TYPEAn indication of the type of message to be sent. The value may be SAM_TEXT indicating the contents of the message body is a text string, or SAM_BYTES indicating the contents of the message body are some application defined format. 
The way in which this property is used may depend on the underlying messaging server. For instance a messaging server that supports the JMS (Java Message Service) specification may interpret this value and send messages of type "jms_text" and "jms_bytes". In addition, if the SAM_TYPE property is set to SAM_TEXT the data provided for the message body is expected to be a UTF8 encoded string. 

When setting the values of properties it is often useful to give a hint as to the format in which the property should be delivered to the messaging system. By default property values are delivered as text and the following simple syntax may be used to set a value: 
Example #1 Setting a text format property using the default syntax
<?php
$msg = new SAMMessage();

$msg->header->myPropertyName = 'textData';
?> 
If it is desired to pass type information an alternative syntax may be used where the value and the type hint are passed in an associative array: 
Example #2 Setting a text format property using a type hint
<?php
$msg = new SAMMessage();

$msg->header->myPropertyName = array('textData', SAM_STRING);
?> 
When passing a type hint the type entry should be one of the SAM defined constant values as defined by the following table: ConstantType description
SAM_BOOLEANAny value passed will be interpreted as logical true or false. If the value cannot be interpreted as a PHP boolean value the value passed to the messaging system is undefined. 
SAM_BYTEAn 8-bit signed integer value. SAM will attempt to convert the property value specified into a single byte value to pass to the messaging system. If a string value is passed an attempt will be made to interpret the string as a numeric value. If the numeric value cannot be expressed as an 8-bit signed binary value data may be lost in the conversion. 
SAM_DOUBLEA long floating point value. SAM will attempt to convert the property value specified into a floating point value with 15 digits of precision. If a string value is passed an attempt will be made to interpret the string as a numeric value. If the passed value cannot be expressed as a 15 digit floating point value data may be lost in the conversion. 
SAM_FLOATA short floating point value. SAM will attempt to convert the property value specified into a floating point value with 7 digits of precision. If a string value is passed an attempt will be made to interpret the string as a numeric value. If the passed value cannot be expressed as a 7 digit floating point value data may be lost in the conversion. 
SAM_INTAn 32-bit signed integer value. SAM will attempt to convert the property value specified into a 32-bit value to pass to the messaging system. If a string value is passed an attempt will be made to interpret the string as a numeric value. If the numeric value cannot be expressed as an 32-bit signed binary value data may be lost in the conversion. 
SAM_LONGAn 64-bit signed integer value. SAM will attempt to convert the property value specified into a 64-bit value to pass to the messaging system. If a string value is passed an attempt will be made to interpret the string as a numeric value. If the numeric value cannot be expressed as an 64-bit signed binary value data may be lost in the conversion. 
SAM_STRINGSAM will interpret the property value specified as a string and pass it to the messaging system accordingly.
</Desc>
    <FName>SCA_LocalProxy::createDataObject</FName>
    <Desc>SDO_DataObject SCA_LocalProxy::createDataObject ( string $type_namespace_uri , string $type_name )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
This method is used inside either an ordinary PHP script or an SCA component that needs to create an SDO to pass to a local service. The parameters are the desired SDO's namespace URI and type name. The namespace and type must be defined in the interface of the component that is to be called, so the namespace and type must be defined in one of the schema files which are specified on the @types annotation within the component for which the SCA_LocalProxy object is a proxy.
</Desc>
    <FName>SCA_SoapProxy::createDataObject</FName>
    <Desc>SDO_DataObject SCA_SoapProxy::createDataObject ( string $type_namespace_uri , string $type_name )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
This method is used inside either an ordinary PHP script or an SCA component that needs to create an SDO to pass to a web service. The parameters are the desired SDO's namespace URI and type name. The namespace and type must be defined in the interface of the component that is to be called, so the namespace and type must be defined within the WSDL for the web service. If the web service is also an SCA component then the types will have been defined within one of the schema files which are specified on the @types annotation within the component for which the SCA_SoapProxy object is a proxy.
</Desc>
    <FName>SCA::createDataObject</FName>
    <Desc>SDO_DataObject SCA::createDataObject ( string $type_namespace_uri , string $type_name )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
This method is used inside an SCA component that needs to create an SDO to return. The parameters are the desired SDO's namespace URI and type name. The namespace and type must be defined in one of the schema files which are specified on the @types annotation within the component.
</Desc>
    <FName>SCA::getService</FName>
    <Desc>mixed SCA::getService ( string $target [, string $binding [, array $config ]] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Examine the target and initialize and return a proxy of the appropriate sort. If the target is for a local PHP component the returned proxy will be an SCA_LocalProxy. If the target is for a WSDL file, the returned proxy will be a SCA_SoapProxy.
</Desc>
    <FName>SDO_DAS_ChangeSummary::beginLogging</FName>
    <Desc>void SDO_DAS_ChangeSummary::beginLogging ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Begin logging changes made to the SDO_DataObject.
</Desc>
    <FName>SDO_DAS_ChangeSummary::endLogging</FName>
    <Desc>void SDO_DAS_ChangeSummary::endLogging ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
End logging changes made to an SDO_DataObject.
</Desc>
    <FName>SDO_DAS_ChangeSummary::getChangedDataObjects</FName>
    <Desc>SDO_List SDO_DAS_ChangeSummary::getChangedDataObjects ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get an SDO_List of the SDO_DataObjects which have been changed. These data objects can then be used to identify the types of change made to each, along with the old values.
</Desc>
    <FName>SDO_DAS_ChangeSummary::getChangeType</FName>
    <Desc>int SDO_DAS_ChangeSummary::getChangeType ( SDO_DataObject $dataObject )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get the type of change which has been made to the supplied SDO_DataObject.
</Desc>
    <FName>SDO_DAS_ChangeSummary::getOldContainer</FName>
    <Desc>SDO_DataObject SDO_DAS_ChangeSummary::getOldContainer ( SDO_DataObject $data_object )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get the old container (SDO_DataObject) for a deleted SDO_DataObject.
</Desc>
    <FName>SDO_DAS_ChangeSummary::getOldValues</FName>
    <Desc>SDO_List SDO_DAS_ChangeSummary::getOldValues ( SDO_DataObject $data_object )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get a list of the old values for a given changed SDO_DataObject. Returns a list of SDO_DAS_Settings describing the old values for the changed properties of the SDO_DataObject.
</Desc>
    <FName>SDO_DAS_ChangeSummary::isLogging</FName>
    <Desc>bool SDO_DAS_ChangeSummary::isLogging ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Test to see whether change logging is switched on.
</Desc>
    <FName>SDO_DAS_DataFactory::addPropertyToType</FName>
    <Desc>void SDO_DAS_DataFactory::addPropertyToType ( string $parent_type_namespace_uri , string $parent_type_name , string $property_name , string $type_namespace_uri , string $type_name [, array $options ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Adds a property to a type. The type must already be known to the SDO_DAS_DataFactory (i.e. have been added using addType()). The property becomes a property of the type. This is how the graph model for the structure of an SDO_DataObject is built.
</Desc>
    <FName>SDO_DAS_DataFactory::addType</FName>
    <Desc>void SDO_DAS_DataFactory::addType ( string $type_namespace_uri , string $type_name [, array $options ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Add a new type to the SDO_DAS_DataFactory, defined by its namespace and type name. The type becomes part of the model of data objects that the data factory can create.
</Desc>
    <FName>SDO_DAS_DataFactory::getDataFactory</FName>
    <Desc>SDO_DAS_DataFactory SDO_DAS_DataFactory::getDataFactory ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Static method to get an instance of an SDO_DAS_DataFactory. This instance is initially only configured with the basic SDO types. A Data Access Service is responsible for populating the data factory model and then allowing PHP applications to create SDOs based on the model through the SDO_DataFactory interface. PHP applications should always obtain a data factory from a configured Data Access Service, not through this interface.
</Desc>
    <FName>SDO_DAS_DataObject::getChangeSummary</FName>
    <Desc>SDO_DAS_ChangeSummary SDO_DAS_DataObject::getChangeSummary ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get the SDO_DAS_ChangeSummary for an SDO_DAS_DataObject, or NULL if it does not have one.
</Desc>
    <FName>SDO_DAS_Relational::applyChanges</FName>
    <Desc>void SDO_DAS_Relational::applyChanges ( PDO $database_handle , SDODataObject $root_data_object )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Given a PDO database handle and the special root object of a data graph, examine the change summary in the datagraph and applies the changes to the database. The changes that it can apply can be creations of data objects, deletes of data objects, and modifications to properties of data objects.
</Desc>
    <FName>SDO_DAS_Relational::__construct</FName>
    <Desc>SDO_DAS_Relational::__construct ( array $database_metadata [, string $application_root_type [, array $SDO_containment_references_metadata ]] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Constructs an instance of a Relational Data Access Service from the passed metadata.
</Desc>
    <FName>SDO_DAS_Relational::createRootDataObject</FName>
    <Desc>SDODataObject SDO_DAS_Relational::createRootDataObject ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the special root object at the top of an otherwise empty data graph. This call is used when the application wants to create a data graph from scratch, without having called executeQuery() to create a data graph. 
The special root object has one multi-valued containment property, with a name of the application root type that was passed when the Relational DAS was constructed. The property can take values of only that type. The only thing that the application can usefully do with the root type is to call createDataObject() on it, passing the name of the application root type, in order to create a data object of their own application type.
</Desc>
    <FName>SDO_DAS_Relational::executePreparedQuery</FName>
    <Desc>SDODataObject SDO_DAS_Relational::executePreparedQuery ( PDO $database_handle , PDOStatement $prepared_statement , array $value_list [, array $column_specifier ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Executes a given query against the relational database, using the supplied PDO database handle. Differs from the simpler executeQuery() in that it takes a prepared statement and a list of values. This is the appropriate call to use either when the statement is to executed a number of times with different arguments, and there is therefore a performance benefit to be had from preparing the statement only once, or when the SQL statement is to contain varying values taken from a source that cannot be completely trusted. In this latter case it may be unsafe to construct the SQL statement by simply concatenating the parts of the statement together, since the values may contain pieces of SQL. To guard against this, a so-called SQL injection attack, it is safer to prepare the SQL statement with placeholders (also known as parameter markers, denoted by '?') and supply a list of the values to be substituted as a separate argument. Otherwise this function is the same as executeQuery() in that it uses the model that it built from the metadata to interpret the result set and returns a data graph.
</Desc>
    <FName>SDO_DAS_Relational::executeQuery</FName>
    <Desc>SDODataObject SDO_DAS_Relational::executeQuery ( PDO $database_handle , string $SQL_statement [, array $column_specifier ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Executes a given query against the relational database, using the supplied PDO database handle. Uses the model that it built from the metadata to interpret the result set. Returns a data graph.
</Desc>
    <FName>SDO_DAS_Setting::getListIndex</FName>
    <Desc>int SDO_DAS_Setting::getListIndex ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get the list index for a modification made to an element of a many-valued property. For example, if we modified the third element of a many-valued property we could obtain an SDO_DAS_Setting from the change summary corresponding to that modification. A call to getListIndex() on that setting would return the value 2 (lists are indexed from zero).
</Desc>
    <FName>SDO_DAS_Setting::getPropertyIndex</FName>
    <Desc>int SDO_DAS_Setting::getPropertyIndex ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the property index for the changed property. This index identifies the property which was modified in data object.
</Desc>
    <FName>SDO_DAS_Setting::getPropertyName</FName>
    <Desc>string SDO_DAS_Setting::getPropertyName ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the property name for the changed property. This name identifies the property which was modified in data object.
</Desc>
    <FName>SDO_DAS_Setting::getValue</FName>
    <Desc>mixed SDO_DAS_Setting::getValue ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the old value for the changed property. This can be used by a Data Access Service when writing updates to a data source. The DAS uses the old value to detect conflicts by comparing it with the current value in the data source. If they do not match, then the data source has been updated since the data object was originally populated, and therefore writing any new updates risks compromising the integrity of the data.
</Desc>
    <FName>SDO_DAS_Setting::isSet</FName>
    <Desc>bool SDO_DAS_Setting::isSet ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Test whether a property was set prior to being modified. If it was set prior to being modified then the SDO_DAS_Setting will also contain the old value.
</Desc>
    <FName>SDO_DAS_XML_Document::getRootDataObject</FName>
    <Desc>SDO_DataObject SDO_DAS_XML_Document::getRootDataObject ( void )
Returns the root SDO_DataObject.
</Desc>
    <FName>SDO_DAS_XML_Document::getRootElementName</FName>
    <Desc>string SDO_DAS_XML_Document::getRootElementName ( void )
Returns root element's name.
</Desc>
    <FName>SDO_DAS_XML_Document::getRootElementURI</FName>
    <Desc>string SDO_DAS_XML_Document::getRootElementURI ( void )
Returns root element's URI string.
</Desc>
    <FName>SDO_DAS_XML_Document::setEncoding</FName>
    <Desc>void SDO_DAS_XML_Document::setEncoding ( string $encoding )
Sets the given string as encoding.
</Desc>
    <FName>SDO_DAS_XML_Document::setXMLDeclaration</FName>
    <Desc>void SDO_DAS_XML_Document::setXMLDeclaration ( bool $xmlDeclatation )
Controls whether an XML declaration will be generated at the start of the XML document. Set to TRUE to generate the XML declaration, or FALSE to suppress it.
</Desc>
    <FName>SDO_DAS_XML_Document::setXMLVersion</FName>
    <Desc>void SDO_DAS_XML_Document::setXMLVersion ( string $xmlVersion )
Sets the given string as xml version.
</Desc>
    <FName>SDO_DAS_XML::addTypes</FName>
    <Desc>void SDO_DAS_XML::addTypes ( string $xsd_file )
Load a second or subsequent schema file to an XML DAS that has already been created with the static method create(). Although the file may be any valid schema file, a likely reason for using this method is to add a schema file containing definitions of extra complex types, hence the name. See Example 4 of the parent document for an example.
</Desc>
    <FName>SDO_DAS_XML::create</FName>
    <Desc>SDO_DAS_XML SDO_DAS_XML::create ([ mixed $xsd_file [, string $key ]] )
This is the only static method of SDO_DAS_XML class. Used to instantiate SDO_DAS_XML object.
</Desc>
    <FName>SDO_DAS_XML::createDataObject</FName>
    <Desc>SDO_DataObject SDO_DAS_XML::createDataObject ( string $namespace_uri , string $type_name )
Creates SDO_DataObject for a given namespace URI and type name. The type should be defined in the underlying model otherwise SDO_TypeNotFoundException will be thrown.
</Desc>
    <FName>SDO_DAS_XML::createDocument</FName>
    <Desc>SDO_DAS_XML_Document SDO_DAS_XML::createDocument ([ string $document_element_name ] )
SDO_DAS_XML_Document SDO_DAS_XML::createDocument ( string $document_element_namespace_URI , string $document_element_name [, SDO_DataObject $dataobject ] )
Creates an XML Document object. This will contain just one empty root element on which none of the properties will have been set. The purpose of this call is to allow an application to create an XML document from scratch without the need to load a document from a file or string. The document that is created will be as if a document had been loaded that contained just a single empty document element with no attributes set or elements within it. 
createDocument() may need to be told what the document element is. This will not be necessary in simple cases. When there is no ambiguity then no parameter need be passed to the method. However it is possible to load more than one schema file into the same XML DAS and in this case there may be more than one possible document element defined: furthermore it is even possible that there are two possible document elements that differ only in the namespace. To cope with these cases it is possible to specify either the document element name, or both the document element name and namespace to the method.
</Desc>
    <FName>SDO_DAS_XML::loadFile</FName>
    <Desc>SDO_XMLDocument SDO_DAS_XML::loadFile ( string $xml_file )
Constructs the tree of SDO_DataObjects from the given address to xml instance document. Returns SDO_DAS_XML_Document Object. Use SDO_DAS_XML_Document::getRootDataObject method to get root data object.
</Desc>
    <FName>SDO_DAS_XML::loadString</FName>
    <Desc>SDO_DAS_XML_Document SDO_DAS_XML::loadString ( string $xml_string )
Constructs the tree of SDO_DataObjects from the given xml instance string. Returns SDO_DAS_XML_Document Object. Use SDO_DAS_XML_Document::getRootDataObject method to get root data object.
</Desc>
    <FName>SDO_DAS_XML::saveFile</FName>
    <Desc>void SDO_DAS_XML::saveFile ( SDO_XMLDocument $xdoc , string $xml_file [, int $indent ] )
Saves the SDO_DAS_XML_Document object to a file.
</Desc>
    <FName>SDO_DAS_XML::saveString</FName>
    <Desc>string SDO_DAS_XML::saveString ( SDO_XMLDocument $xdoc [, int $indent ] )
Saves the SDO_DAS_XML_Document object to string.
</Desc>
    <FName>SDO_DataFactory::create</FName>
    <Desc>void SDO_DataFactory::create ( string $type_namespace_uri , string $type_name )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Create a new SDO_DataObject given the data object's namespace URI and type name.
</Desc>
    <FName>SDO_DataObject::clear</FName>
    <Desc>void SDO_DataObject::clear ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Clear an SDO_DataObject's properties. Read-only properties are unaffected. Subsequent calls to isset() for the data object will return FALSE.
</Desc>
    <FName>SDO_DataObject::createDataObject</FName>
    <Desc>SDO_DataObject SDO_DataObject::createDataObject ( mixed $identifier )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Create a child SDO_DataObject of the default type for the property identified. The data object is automatically inserted into the tree and a reference to it is returned.
</Desc>
    <FName>SDO_DataObject::getContainer</FName>
    <Desc>SDO_DataObject SDO_DataObject::getContainer ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get the data object which contains this data object.
</Desc>
    <FName>SDO_DataObject::getSequence</FName>
    <Desc>SDO_Sequence SDO_DataObject::getSequence ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Return the SDO_Sequence for this SDO_DataObject. Accessing the SDO_DataObject through the SDO_Sequence interface acts on the same SDO_DataObject instance data, but preserves ordering across properties.
</Desc>
    <FName>SDO_DataObject::getTypeName</FName>
    <Desc>string SDO_DataObject::getTypeName ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Return the name of the type for a data object. A convenience method corresponding to SDO_Model_ReflectionDataObject::getType().getName().
</Desc>
    <FName>SDO_DataObject::getTypeNamespaceURI</FName>
    <Desc>string SDO_DataObject::getTypeNamespaceURI ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Return the namespace URI of the type for a data object. A convenience method corresponding to SDO_Model_ReflectionDataObject::getType().getNamespaceURI().
</Desc>
    <FName>SDO_Exception::getCause</FName>
    <Desc>mixed SDO_Exception::getCause ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the cause of this exception or NULL if the cause is nonexistent or unknown. Typically the cause will be an SDO_CPPException object, which may be used to obtain additional diagnostic information.
</Desc>
    <FName>SDO_List::insert</FName>
    <Desc>void SDO_List::insert ( mixed $value [, int $index ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Insert a new element at a specified position in the list. All subsequent list items are moved up.
</Desc>
    <FName>SDO_Model_Property::getContainingType</FName>
    <Desc>SDO_Model_Type SDO_Model_Property::getContainingType ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the SDO_Model_Type which contains this property.
</Desc>
    <FName>SDO_Model_Property::getDefault</FName>
    <Desc>mixed SDO_Model_Property::getDefault ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the default value for the property. Only primitive data type properties can have default values.
</Desc>
    <FName>SDO_Model_Property::getName</FName>
    <Desc>string SDO_Model_Property::getName ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the name of the SDO_Model_Property.
</Desc>
    <FName>SDO_Model_Property::getType</FName>
    <Desc>SDO_Model_Type SDO_Model_Property::getType ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get the SDO_Model_Type of the property. The SDO_Model_Type describes the type information for the property, such as its type name, namespace URI, whether it is a primitive data type, and so on.
</Desc>
    <FName>SDO_Model_Property::isContainment</FName>
    <Desc>bool SDO_Model_Property::isContainment ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Test to see if the property corresponds to a containment relationship. Returns TRUE if the property defines a containment relationship, or FALSE if it is reference.
</Desc>
    <FName>SDO_Model_Property::isMany</FName>
    <Desc>bool SDO_Model_Property::isMany ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Test to see if the property is many-valued. Returns TRUE if this is a many-valued property, otherwise returns FALSE.
</Desc>
    <FName>SDO_Model_ReflectionDataObject::__construct</FName>
    <Desc>SDO_Model_ReflectionDataObject::__construct ( SDO_DataObject $data_object )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Construct an SDO_Model_ReflectionDataObject to reflect on an SDO_DataObject. Reflecting on an SDO_DataObject gives access to information about its model. The model contains information such as the data object's type, and whether that type is sequenced (preserves ordering across properties) or open (each instance can have its model extended). The model also holds information about the data object's properties, any default values they may have, and so on.
</Desc>
    <FName>SDO_Model_ReflectionDataObject::export</FName>
    <Desc>mixed SDO_Model_ReflectionDataObject::export ( SDO_Model_ReflectionDataObject $rdo [, bool $return ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get a string describing the SDO_DataObject. The default behaviour is to print the output, but if TRUE is specified for return, it is returned as a string.
</Desc>
    <FName>SDO_Model_ReflectionDataObject::getContainmentProperty</FName>
    <Desc>SDO_Model_Property SDO_Model_ReflectionDataObject::getContainmentProperty ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get the SDO_Model_Property that contains the SDO_DataObject. This method is used to navigate up to the parent's property which contains the data object which has been reflected upon.
</Desc>
    <FName>SDO_Model_ReflectionDataObject::getInstanceProperties</FName>
    <Desc>array SDO_Model_ReflectionDataObject::getInstanceProperties ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get the instance properties for the SDO_DataObject. The instance properties consist of all the properties defined on the data object's type, plus any instance properties from open content (if the data object is an open type).
</Desc>
    <FName>SDO_Model_ReflectionDataObject::getType</FName>
    <Desc>SDO_Model_Type SDO_Model_ReflectionDataObject::getType ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the SDO_Model_Type for the SDO_DataObject. The SDO_Model_Type holds all the information about the data object's type, such as namespace URI, type name, whether it is a primitive data type, and so on.
</Desc>
    <FName>SDO_Model_Type::getBaseType</FName>
    <Desc>SDO_Model_Type SDO_Model_Type::getBaseType ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get the base type for this type. Returns the SDO_Model_Type for the base type if this type inherits from another, otherwise returns NULL. An example of when base types occur is when a type defined in XML schema inherits from another type by using 
<extension base="...">.
</Desc>
    <FName>SDO_Model_Type::getName</FName>
    <Desc>string SDO_Model_Type::getName ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the name of the type. The combination of type name and namespace URI is used to uniquely identify the type.
</Desc>
    <FName>SDO_Model_Type::getNamespaceURI</FName>
    <Desc>string SDO_Model_Type::getNamespaceURI ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the namespace URI of the type. The combination of namespace URI and type name is used to uniquely identify the type.
</Desc>
    <FName>SDO_Model_Type::getProperties</FName>
    <Desc>array SDO_Model_Type::getProperties ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get an array of SDO_Model_Property objects describing the properties defined for the SDO_Model_Type. Each SDO_Model_Property holds information such as the property name, default value, and so on.
</Desc>
    <FName>SDO_Model_Type::getProperty</FName>
    <Desc>SDO_Model_Property SDO_Model_Type::getProperty ( mixed $identifier )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Get an SDO_Model_Property of the type, identified by its property index or property name.
</Desc>
    <FName>SDO_Model_Type::isAbstractType</FName>
    <Desc>bool SDO_Model_Type::isAbstractType ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Test to see if this SDO_Model_Type is an abstract data type. Returns TRUE if this type is abstract, that is, no SDO_DataObject of this type can be instantiated, though other types may inherit from it.
</Desc>
    <FName>SDO_Model_Type::isDataType</FName>
    <Desc>bool SDO_Model_Type::isDataType ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Test to see if this SDO_Model_Type is a primitive data type. Returns TRUE if this type is a primitive data type, otherwise returns FALSE.
</Desc>
    <FName>SDO_Model_Type::isInstance</FName>
    <Desc>bool SDO_Model_Type::isInstance ( SDO_DataObject $data_object )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Test for an SDO_DataObject being an instance of this SDO_Model_Type. Returns TRUE if the SDO_DataObject provided is an instance of this SDO_Model_Type, or a derived type, otherwise returns FALSE.
</Desc>
    <FName>SDO_Model_Type::isOpenType</FName>
    <Desc>bool SDO_Model_Type::isOpenType ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Test to see if this type is open. Returns TRUE if this type is open, otherwise returns FALSE. An SDO_DataObject whose type is open can have properties added to them which are not described by the type. This capability is used to support working with XML documents whose schema support open content, such as that defined by an 
<xsd:any>element.
</Desc>
    <FName>SDO_Model_Type::isSequencedType</FName>
    <Desc>bool SDO_Model_Type::isSequencedType ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Test to see if this is a sequenced type. Returns TRUE if this type is sequence, otherwise returns FALSE. Sequenced types can have the ordering across properties preserved and can contain unstructured text. For more information on sequenced types see the section on Working with Sequenced Data Objects.
</Desc>
    <FName>SDO_Sequence::getProperty</FName>
    <Desc>SDO_Model_Property SDO_Sequence::getProperty ( int $sequence_index )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Return the property for the specified sequence index.
</Desc>
    <FName>SDO_Sequence::insert</FName>
    <Desc>void SDO_Sequence::insert ( mixed $value [, int $sequenceIndex [, mixed $propertyIdentifier ]] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Insert a new element at a specified position in the sequence. All subsequent sequence items are moved up.
</Desc>
    <FName>SDO_Sequence::move</FName>
    <Desc>void SDO_Sequence::move ( int $toIndex, int $fromIndex )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Modify the position of the item in the sequence, without altering the value of the property in the SDO_DataObject.
</Desc>
    <FName>SeasLog::analyzerCount</FName>
    <Desc>public static mixed SeasLog::analyzerCount ( string $level [, string $log_path [, string $key_word ]] )
`SeasLog` get count value of `grep -ai '{level}' | grep -aic '{key_word}'` use system pipe and return to PHP (array or int).
</Desc>
    <FName>SeasLog::analyzerDetail</FName>
    <Desc>public static mixed SeasLog::analyzerDetail ( string $level [, string $log_path [, string $key_word [, int $start [, int $limit [, int $order ]]]]] )
`SeasLog` get results of `grep -ai '{level}' | grep -ai '{key_word}' | sed -n '{start},{limit}'p` use system pipe and return array to PHP.
</Desc>
    <FName>SeasLog::__construct</FName>
    <Desc>public SeasLog::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SeasLog::critical</FName>
    <Desc>public static bool SeasLog::critical ( string $message [, array $content [, string $logger ]] )
Record critical log information. 
Note: 
"CRITICAL" - Critical conditions.Need to be repaired immediately, and the program component is unavailable.
</Desc>
    <FName>SeasLog::debug</FName>
    <Desc>public static bool SeasLog::debug ( string $message [, array $content [, string $logger ]] )
Record debug log information. 
Note: 
"DEBUG" - Detailed debug information.Fine-grained information events.
</Desc>
    <FName>SeasLog::__destruct</FName>
    <Desc>public SeasLog::__destruct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SeasLog::emergency</FName>
    <Desc>public static bool SeasLog::emergency ( string $message [, array $content [, string $logger ]] )
Record emergency log information. 
Note: 
"EMERGENCY" - System is unusable.
</Desc>
    <FName>SeasLog::error</FName>
    <Desc>public static bool SeasLog::error ( string $message [, array $content [, string $logger ]] )
Record error log information. 
Note: 
"ERROR" - Runtime errors that do not require immediate action but should typically.
</Desc>
    <FName>SeasLog::flushBuffer</FName>
    <Desc>public static bool SeasLog::flushBuffer ( void )
Flush logs buffer by seaslog.appender: dump to file, or send to remote api with tcp/udp. 
Note: 
See also: seaslog.appender_retry seaslog.remote_host seaslog.remote_port
</Desc>
    <FName>SeasLog::getBasePath</FName>
    <Desc>public static string Seaslog::getBasePath ( void )
Use the Function SeasLog::getBasePath() will get the value of seaslog.default_basepath what configured in php.ini(seaslog.ini). 
If you use Seaslog::setBasePath(), will change the result.
</Desc>
    <FName>SeasLog::getBuffer</FName>
    <Desc>public static array SeasLog::getBuffer ( void )
</Desc>
    <FName>SeasLog::getBufferEnabled</FName>
    <Desc>public static bool SeasLog::getBufferEnabled ( void )
Result join seaslog.use_buffer and seaslog.buffer_disabled_in_cli.
</Desc>
    <FName>SeasLog::getDatetimeFormat</FName>
    <Desc>public static string SeasLog::getDatetimeFormat ( void )
Get SeasLog datetime format style. Use the Function SeasLog::getDatetimeFormat() will get the value of seaslog.default_datetime_format what configured in php.ini(seaslog.ini).
</Desc>
    <FName>SeasLog::getLastLogger</FName>
    <Desc>public static string SeasLog::getLastLogger ( void )
Use the Function SeasLog::getLastLogger() will get the value of seaslog.default_logger what configured in php.ini(seaslog.ini).
</Desc>
    <FName>SeasLog::getRequestID</FName>
    <Desc>public static string SeasLog::getRequestID ( void )
To distinguish a single request, such as not invoking the SeasLog::setRequestId() function, the unique value generated by the built-in `static char *get_uniqid ()` function is used when the request is initialized.
</Desc>
    <FName>SeasLog::info</FName>
    <Desc>public static bool SeasLog::info ( string $message [, array $content [, string $logger ]] )
Record info log information. 
Note: 
"INFO" - Interesting events.Emphasizes the running process of the application.
</Desc>
    <FName>SeasLog::log</FName>
    <Desc>public static bool SeasLog::log ( string $level [, string $message [, array $content [, string $logger ]]] )
The Common Record Log Function.
</Desc>
    <FName>SeasLog::notice</FName>
    <Desc>public static bool SeasLog::notice ( string $message [, array $content [, string $logger ]] )
Record notice log information. 
Note: 
"NOTICE" - Normal but significant events.Information that is more important than the INFO level during execution.
</Desc>
    <FName>SeasLog::setBasePath</FName>
    <Desc>public static bool SeasLog::setBasePath ( string $base_path )
Set SeasLog base path.
</Desc>
    <FName>SeasLog::setDatetimeFormat</FName>
    <Desc>public static bool SeasLog::setDatetimeFormat ( string $format )
Set SeasLog datetime format style. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SeasLog::setLogger</FName>
    <Desc>public static bool SeasLog::setLogger ( string $logger )
Use the Function SeasLog::setLogger() will change the value of function SeasLog::getLastLogger(). Than's mean, SeasLog will record loginfo into the logger directory.
</Desc>
    <FName>SeasLog::setRequestID</FName>
    <Desc>public static bool SeasLog::setRequestID ( string $request_id )
To distinguish a single request, such as not invoking the SeasLog::setRequestId() function, the unique value generated by the built-in `static char *get_uniqid ()` function is used when the request is initialized.
</Desc>
    <FName>SeasLog::warning</FName>
    <Desc>public static bool SeasLog::warning ( string $message [, array $content [, string $logger ]] )
Record warning log information. 
Note: 
"WARNING" - Exceptional occurrences that are not errors. Potentially aberrant information that needs attention and needs to be repaired.
</Desc>
    <FName>SeekableIterator::seek</FName>
    <Desc>abstract public void SeekableIterator::seek ( int $position )
Seeks to a given position in the iterator.
</Desc>
    <FName>Serializable::serialize</FName>
    <Desc>abstract public string Serializable::serialize ( void )
Should return the string representation of the object. 
Note: 
This method acts as the destructor of the object. The __destruct() method will not be called after this method.
</Desc>
    <FName>Serializable::unserialize</FName>
    <Desc>abstract public void Serializable::unserialize ( string $serialized )
Called during unserialization of the object. 
Note: 
This method acts as the constructor of the object. The __construct() method will not be called after this method.
</Desc>
    <FName>SessionHandler::close</FName>
    <Desc>public bool SessionHandler::close ( void )
Closes the current session. This method is automatically executed internally by PHP when closing the session, or explicitly via session_write_close() (which first calls the SessionHandler::write()). 
This method wraps the internal PHP save handler defined in the session.save_handler ini setting that was set before this handler was activated by session_set_save_handler(). 
If this class is extended by inheritiance, calling the parent close method will invoke the wrapper for this method and therefor invoke the associated internal callback. This allows the method to be overidden and or intercepted. 
For more information on what this method is expected to do, please refer to the documentation at SessionHandlerInterface::close().
</Desc>
    <FName>SessionHandler::create_sid</FName>
    <Desc>public string SessionHandler::create_sid ( void )
Generates and returns a new session ID.
</Desc>
    <FName>SessionHandler::destroy</FName>
    <Desc>public bool SessionHandler::destroy ( string $session_id )
Destroys a session. Called internally by PHP with session_regenerate_id() (assuming the $destroy is set to TRUE, by session_destroy() or when session_decode() fails. 
This method wraps the internal PHP save handler defined in the session.save_handler ini setting that was set before this handler was set by session_set_save_handler(). 
If this class is extended by inheritiance, calling the parent destroy method will invoke the wrapper for this method and therefor invoke the associated internal callback. This allows this method to be overidden and or intercepted and filtered. 
For more information on what this method is expected to do, please refer to the documentation at SessionHandlerInterface::destroy().
</Desc>
    <FName>SessionHandler::gc</FName>
    <Desc>public int SessionHandler::gc ( int $maxlifetime )
Cleans up expired sessions. Called randomly by PHP internally when a session starts or when session_start() is invoked. The frequency this is called is based on the session.gc_divisor and session.gc_probability configuration directives. 
This method wraps the internal PHP save handler defined in the session.save_handler ini setting that was set before this handler was set by session_set_save_handler(). 
If this class is extended by inheritiance, calling the parent gc method will invoke the wrapper for this method and therefore invoke the associated internal callback. This allows this method to be overidden and or intercepted and filtered. 
For more information on what this method is expected to do, please refer to the documentation at SessionHandlerInterface::gc().
</Desc>
    <FName>SessionHandler::open</FName>
    <Desc>public bool SessionHandler::open ( string $save_path , string $session_name )
Create new session, or re-initialize existing session. Called internally by PHP when a session starts either automatically or when session_start() is invoked. 
This method wraps the internal PHP save handler defined in the session.save_handler ini setting that was set before this handler was set by session_set_save_handler(). 
If this class is extended by inheritiance, calling the parent open method will invoke the wrapper for this method and therefor invoke the associated internal callback. This allows this method to be overidden and or intercepted and filtered. 
For more information on what this method is expected to do, please refer to the documentation at SessionHandlerInterface::open().
</Desc>
    <FName>SessionHandler::read</FName>
    <Desc>public string SessionHandler::read ( string $session_id )
Reads the session data from the session storage, and returns the result back to PHP for internal processing. This method is called automatically by PHP when a session is started (either automatically or explicity with session_start() and is preceeded by an internal call to the SessionHandler::open(). 
This method wraps the internal PHP save handler defined in the session.save_handler ini setting that was set before this handler was set by session_set_save_handler(). 
If this class is extended by inheritiance, calling the parent read method will invoke the wrapper for this method and therefor invoke the associated internal callback. This allows the method to be overidden and or intercepted and filtered (for example, decrypting $data value returned by the parent read method). 
For more information on what this method is expected to do, please refer to the documentation at SessionHandlerInterface::read().
</Desc>
    <FName>SessionHandler::write</FName>
    <Desc>public bool SessionHandler::write ( string $session_id , string $session_data )
Writes the session data to the session storage. Called by normal PHP shutdown, by session_write_close(), or when session_register_shutdown() fails. PHP will call SessionHandler::close() immediately after this method returns. 
This method wraps the internal PHP save handler defined in the session.save_handler ini setting that was set before this handler was set by session_set_save_handler(). 
If this class is extended by inheritiance, calling the parent write method will invoke the wrapper for this method and therefor invoke the associated internal callback. This allows this method to be overidden and or intercepted and filtered (for example, encrypting the $data value before sending it to the parent write method). 
For more information on what this method is expected to do, please refer to the documentation at SessionHandlerInterface::write().
</Desc>
    <FName>SessionHandlerInterface::close</FName>
    <Desc>abstract public bool SessionHandlerInterface::close ( void )
Closes the current session. This function is automatically executed when closing the session, or explicitly via session_write_close().
</Desc>
    <FName>SessionHandlerInterface::destroy</FName>
    <Desc>abstract public bool SessionHandlerInterface::destroy ( string $session_id )
Destroys a session. Called by session_regenerate_id() (with $destroy = TRUE), session_destroy() and when session_decode() fails.
</Desc>
    <FName>SessionHandlerInterface::gc</FName>
    <Desc>abstract public int SessionHandlerInterface::gc ( int $maxlifetime )
Cleans up expired sessions. Called by session_start(), based on session.gc_divisor, session.gc_probability and session.gc_maxlifetime settings.
</Desc>
    <FName>SessionHandlerInterface::open</FName>
    <Desc>abstract public bool SessionHandlerInterface::open ( string $save_path , string $session_name )
Re-initialize existing session, or creates a new one. Called when a session starts or when session_start() is invoked.
</Desc>
    <FName>SessionHandlerInterface::read</FName>
    <Desc>abstract public string SessionHandlerInterface::read ( string $session_id )
Reads the session data from the session storage, and returns the results. Called right after the session starts or when session_start() is called. Please note that before this method is called SessionHandlerInterface::open() is invoked. 
This method is called by PHP itself when the session is started. This method should retrieve the session data from storage by the session ID provided. The string returned by this method must be in the same serialized format as when originally passed to the SessionHandlerInterface::write() If the record was not found, return an empty string. 
The data returned by this method will be decoded internally by PHP using the unserialization method specified in session.serialize_handler. The resulting data will be used to populate the $_SESSION superglobal. 
Note that the serialization scheme is not the same as unserialize() and can be accessed by session_decode().
</Desc>
    <FName>SessionHandlerInterface::write</FName>
    <Desc>abstract public bool SessionHandlerInterface::write ( string $session_id , string $session_data )
Writes the session data to the session storage. Called by session_write_close(), when session_register_shutdown() fails, or during a normal shutdown. Note: SessionHandlerInterface::close() is called immediately after this function. 
PHP will call this method when the session is ready to be saved and closed. It encodes the session data from the $_SESSION superglobal to a serialized string and passes this along with the session ID to this method for storage. The serialization method used is specified in the session.serialize_handler setting. 
Note this method is normally called by PHP after the output buffers have been closed unless explicitly called by session_write_close()
</Desc>
    <FName>SessionIdInterface::create_sid</FName>
    <Desc>abstract public string SessionIdInterface::create_sid ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SessionUpdateTimestampHandlerInterface::updateTimestamp</FName>
    <Desc>abstract public bool SessionUpdateTimestampHandlerInterface::updateTimestamp ( string $key , string $val )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SessionUpdateTimestampHandlerInterface::validateId</FName>
    <Desc>abstract public bool SessionUpdateTimestampHandlerInterface::validateId ( string $key )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SimpleXMLElement::addAttribute</FName>
    <Desc>public void SimpleXMLElement::addAttribute ( string $name [, string $value [, string $namespace ]] )
Adds an attribute to the SimpleXML element.
</Desc>
    <FName>SimpleXMLElement::addChild</FName>
    <Desc>public SimpleXMLElement SimpleXMLElement::addChild ( string $name [, string $value [, string $namespace ]] )
Adds a child element to the node and returns a SimpleXMLElement of the child.
</Desc>
    <FName>SimpleXMLElement::asXML</FName>
    <Desc>public mixed SimpleXMLElement::asXML ([ string $filename ] )
The asXML method formats the parent object's data in XML version 1.0.
</Desc>
    <FName>SimpleXMLElement::attributes</FName>
    <Desc>public SimpleXMLElement SimpleXMLElement::attributes ([ string $ns = NULL [, bool $is_prefix = FALSE ]] )
This function provides the attributes and values defined within an xml tag. 
Note: SimpleXML has made a rule of adding iterative properties to most methods. They cannot be viewed using var_dump() or anything else which can examine objects.
</Desc>
    <FName>SimpleXMLElement::children</FName>
    <Desc>public SimpleXMLElement SimpleXMLElement::children ([ string $ns [, bool $is_prefix = FALSE ]] )
This method finds the children of an element. The result follows normal iteration rules. 
Note: SimpleXML has made a rule of adding iterative properties to most methods. They cannot be viewed using var_dump() or anything else which can examine objects.
</Desc>
    <FName>SimpleXMLElement::__construct</FName>
    <Desc>final public SimpleXMLElement::__construct ( string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = "" [, bool $is_prefix = FALSE ]]]] )
Creates a new SimpleXMLElement object.
</Desc>
    <FName>SimpleXMLElement::count</FName>
    <Desc>public int SimpleXMLElement::count ( void )
This method counts the number of children of an element.
</Desc>
    <FName>SimpleXMLElement::getDocNamespaces</FName>
    <Desc>public array SimpleXMLElement::getDocNamespaces ([ bool $recursive = FALSE [, bool $from_root = TRUE ]] )
Returns namespaces declared in document
</Desc>
    <FName>SimpleXMLElement::getName</FName>
    <Desc>public string SimpleXMLElement::getName ( void )
Gets the name of the XML element.
</Desc>
    <FName>SimpleXMLElement::getNamespaces</FName>
    <Desc>public array SimpleXMLElement::getNamespaces ([ bool $recursive = FALSE ] )
Returns namespaces used in document
</Desc>
    <FName>SimpleXMLElement::registerXPathNamespace</FName>
    <Desc>public bool SimpleXMLElement::registerXPathNamespace ( string $prefix , string $ns )
Creates a prefix/ns context for the next XPath query. In particular, this is helpful if the provider of the given XML document alters the namespace prefixes. registerXPathNamespace will create a prefix for the associated namespace, allowing one to access nodes in that namespace without the need to change code to allow for the new prefixes dictated by the provider.
</Desc>
    <FName>SimpleXMLElement::saveXML</FName>
    <Desc>This method is an alias of: SimpleXMLElement::asXML() 
</Desc>
    <FName>SimpleXMLElement::__toString</FName>
    <Desc>public string SimpleXMLElement::__toString ( void )
Returns text content that is directly in this element. Does not return text content that is inside this element's children.
</Desc>
    <FName>SimpleXMLElement::xpath</FName>
    <Desc>public array SimpleXMLElement::xpath ( string $path )
The xpath method searches the SimpleXML node for children matching the XPath path.
</Desc>
    <FName>SimpleXMLIterator::current</FName>
    <Desc>public mixed SimpleXMLIterator::current ( void )
This method returns the current element as a SimpleXMLIterator object or NULL.
</Desc>
    <FName>SimpleXMLIterator::getChildren</FName>
    <Desc>public SimpleXMLIterator SimpleXMLIterator::getChildren ( void )
This method returns a SimpleXMLIterator object containing sub-elements of the current SimpleXMLIterator element.
</Desc>
    <FName>SimpleXMLIterator::hasChildren</FName>
    <Desc>public bool SimpleXMLIterator::hasChildren ( void )
This method checks whether the current SimpleXMLIterator element has sub-elements.
</Desc>
    <FName>SimpleXMLIterator::key</FName>
    <Desc>public mixed SimpleXMLIterator::key ( void )
This method gets the XML tag name of the current element.
</Desc>
    <FName>SimpleXMLIterator::next</FName>
    <Desc>public void SimpleXMLIterator::next ( void )
This method moves the SimpleXMLIterator to the next element.
</Desc>
    <FName>SimpleXMLIterator::rewind</FName>
    <Desc>public void SimpleXMLIterator::rewind ( void )
This method rewinds the SimpleXMLIterator to the first element.
</Desc>
    <FName>SimpleXMLIterator::valid</FName>
    <Desc>public bool SimpleXMLIterator::valid ( void )
This method checks if the current element is valid after calls to SimpleXMLIterator::rewind() or SimpleXMLIterator::next().
</Desc>
    <FName>SNMP::close</FName>
    <Desc>public bool SNMP::close ( void )
Frees previously allocated SNMP session object.
</Desc>
    <FName>SNMP::__construct</FName>
    <Desc>public SNMP::__construct ( int $version , string $hostname , string $community [, int $timeout = 1000000 [, int $retries = 5 ]] )
The function description goes here.
</Desc>
    <FName>SNMP::get</FName>
    <Desc>public mixed SNMP::get ( mixed $object_id [, bool $preserve_keys = FALSE ] )
Fetch an SNMP object specified in object_id using GET query.
</Desc>
    <FName>SNMP::getErrno</FName>
    <Desc>public int SNMP::getErrno ( void )
Returns error code from last SNMP request.
</Desc>
    <FName>SNMP::getError</FName>
    <Desc>public string SNMP::getError ( void )
Returns string with error from last SNMP request.
</Desc>
    <FName>SNMP::getnext</FName>
    <Desc>public mixed SNMP::getnext ( mixed $object_id )
Fetch an SNMP object that follows specified object_id.
</Desc>
    <FName>SNMP::set</FName>
    <Desc>public bool SNMP::set ( mixed $object_id , mixed $type , mixed $value )
Requests remote SNMP agent setting the value of one or more SNMP objects specified by the object_id.
</Desc>
    <FName>SNMP::setSecurity</FName>
    <Desc>public bool SNMP::setSecurity ( string $sec_level [, string $auth_protocol = [, string $auth_passphrase = [, string $priv_protocol = [, string $priv_passphrase = [, string $contextName = [, string $contextEngineID = ]]]]]] )
setSecurity configures security-related session parameters used in SNMP protocol version 3
</Desc>
    <FName>SNMP::walk</FName>
    <Desc>public array SNMP::walk ( string $object_id [, bool $suffix_as_key = FALSE [, int $max_repetitions [, int $non_repeaters ]]] )
SNMP::walk() is used to read SNMP subtree rooted at specified object_id.
</Desc>
    <FName>SoapClient::__call</FName>
    <Desc>public mixed SoapClient::__call ( string $function_name , array $arguments )
Calling this method directly is deprecated. Usually, SOAP functions can be called as methods of the SoapClient object; in situations where this is not possible or additional options are needed, use SoapClient::__soapCall(). 
</Desc>
    <FName>SoapClient::__construct</FName>
    <Desc>public SoapClient::__construct ( mixed $wsdl [, array $options ] )
This function is an alias of: SoapClient::SoapClient() 
</Desc>
    <FName>SoapClient::__doRequest</FName>
    <Desc>public string SoapClient::__doRequest ( string $request , string $location , string $action , int $version [, int $one_way = 0 ] )
Performs SOAP request over HTTP. 
This method can be overridden in subclasses to implement different transport layers, perform additional XML processing or other purpose.
</Desc>
    <FName>SoapClient::__getCookies</FName>
    <Desc>public array SoapClient::__getCookies ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SoapClient::__getFunctions</FName>
    <Desc>public array SoapClient::__getFunctions ( void )
Returns an array of functions described in the WSDL for the Web service. 
Note: 
This function only works in WSDL mode.
</Desc>
    <FName>SoapClient::__getLastRequest</FName>
    <Desc>public string SoapClient::__getLastRequest ( void )
Returns the XML sent in the last SOAP request. 
Note: 
This method works only if the SoapClient object was created with the trace option set to TRUE.
</Desc>
    <FName>SoapClient::__getLastRequestHeaders</FName>
    <Desc>public string SoapClient::__getLastRequestHeaders ( void )
Returns the SOAP headers from the last request. 
Note: 
This function only works if the SoapClient object was created with the trace option set to TRUE.
</Desc>
    <FName>SoapClient::__getLastResponse</FName>
    <Desc>public string SoapClient::__getLastResponse ( void )
Returns the XML received in the last SOAP response. 
Note: 
This method works only if the SoapClient object was created with the trace option set to TRUE.
</Desc>
    <FName>SoapClient::__getLastResponseHeaders</FName>
    <Desc>public string SoapClient::__getLastResponseHeaders ( void )
Returns the SOAP headers from the last response. 
Note: 
This function only works if the SoapClient object was created with the trace option set to TRUE.
</Desc>
    <FName>SoapClient::__getTypes</FName>
    <Desc>public array SoapClient::__getTypes ( void )
Returns an array of types described in the WSDL for the Web service. 
Note: 
This function only works in WSDL mode.
</Desc>
    <FName>SoapClient::__setCookie</FName>
    <Desc>public void SoapClient::__setCookie ( string $name [, string $value ] )
Defines a cookie to be sent along with the SOAP requests. 
Note: 
Calling this method will affect all following calls to SoapClient methods.
</Desc>
    <FName>SoapClient::__setLocation</FName>
    <Desc>public string SoapClient::__setLocation ([ string $new_location ] )
Sets the endpoint URL that will be touched by following SOAP requests. This is equivalent to specifying the location option when constructing the SoapClient. 
Note: 
Calling this method is optional. The SoapClient uses the endpoint from the WSDL file by default.
</Desc>
    <FName>SoapClient::__setSoapHeaders</FName>
    <Desc>public bool SoapClient::__setSoapHeaders ([ mixed $soapheaders ] )
Defines headers to be sent along with the SOAP requests. 
Note: 
Calling this method will replace any previous values.
</Desc>
    <FName>SoapClient::__soapCall</FName>
    <Desc>public mixed SoapClient::__soapCall ( string $function_name , array $arguments [, array $options [, mixed $input_headers [, array &$output_headers ]]] )
This is a low level API function that is used to make a SOAP call. Usually, in WSDL mode, SOAP functions can be called as methods of the SoapClient object. This method is useful in non-WSDL mode when soapaction is unknown, uri differs from the default or when sending and/or receiving SOAP Headers. 
On error, a call to a SOAP function can cause PHP to throw exceptions or return a SoapFault object if exceptions are disabled. To check if the function call failed to catch the SoapFault exceptions, check the result with is_soap_fault().
</Desc>
    <FName>SoapClient::SoapClient</FName>
    <Desc>public SoapClient::SoapClient ( mixed $wsdl [, array $options ] )
This constructor creates SoapClient objects in WSDL or non-WSDL mode.
</Desc>
    <FName>SoapFault::__construct</FName>
    <Desc>SoapFault::__construct ( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )
This function is an alias of: SoapFault::SoapFault() 
</Desc>
    <FName>SoapFault::SoapFault</FName>
    <Desc>SoapFault::SoapFault ( string $faultcode , string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault ]]]] )
This class is used to send SOAP fault responses from the PHP handler. faultcode, faultstring, faultactor and detail are standard elements of a SOAP Fault.
</Desc>
    <FName>SoapFault::__toString</FName>
    <Desc>public string SoapFault::__toString ( void )
Returns a string representation of the SoapFault.
</Desc>
    <FName>SoapHeader::__construct</FName>
    <Desc>SoapHeader::__construct ( string $namespace , string $name [, mixed $data [, bool $mustunderstand [, string $actor ]]] )
This function is an alias of: SoapHeader::SoapHeader() 
</Desc>
    <FName>SoapHeader::SoapHeader</FName>
    <Desc>SoapHeader::SoapHeader ( string $namespace , string $name [, mixed $data [, bool $mustunderstand = FALSE [, string $actor ]]] )
Constructs a new SoapHeader object.
</Desc>
    <FName>SoapParam::__construct</FName>
    <Desc>SoapParam::__construct ( mixed $data , string $name )
This function is an alias of: SoapParam::SoapParam() 
</Desc>
    <FName>SoapParam::SoapParam</FName>
    <Desc>SoapParam::SoapParam ( mixed $data , string $name )
Constructs a new SoapParam object.
</Desc>
    <FName>SoapServer::addFunction</FName>
    <Desc>public void SoapServer::addFunction ( mixed $functions )
Exports one or more functions for remote clients
</Desc>
    <FName>SoapServer::addSoapHeader</FName>
    <Desc>public void SoapServer::addSoapHeader ( SoapHeader $object )
Adds a SOAP header to be returned with the response to the current request.
</Desc>
    <FName>SoapServer::__construct</FName>
    <Desc>public SoapServer::__construct ( mixed $wsdl [, array $options ] )
This function is an alias of: SoapServer::SoapServer() 
</Desc>
    <FName>SoapServer::fault</FName>
    <Desc>public void SoapServer::fault ( string $code , string $string [, string $actor [, string $details [, string $name ]]] )
Sends a response to the client of the current request indicating an error. 
Note: 
This can only be called when handling a request.
</Desc>
    <FName>SoapServer::getFunctions</FName>
    <Desc>public array SoapServer::getFunctions ( void )
Returns a list of the defined functions in the SoapServer object. This method returns the list of all functions added by SoapServer::addFunction() or SoapServer::setClass().
</Desc>
    <FName>SoapServer::handle</FName>
    <Desc>public void SoapServer::handle ([ string $soap_request ] )
Processes a SOAP request, calls necessary functions, and sends a response back.
</Desc>
    <FName>SoapServer::setClass</FName>
    <Desc>public void SoapServer::setClass ( string $class_name [, mixed $args [, mixed $... ]] )
Exports all methods from specified class. 
The object can be made persistent across request for a given PHP session with the SoapServer::setPersistence() method.
</Desc>
    <FName>SoapServer::setObject</FName>
    <Desc>public void SoapServer::setObject ( object $object )
This sets a specific object as the handler for SOAP requests, rather than just a class as in SoapServer::setClass().
</Desc>
    <FName>SoapServer::setPersistence</FName>
    <Desc>public void SoapServer::setPersistence ( int $mode )
This function allows changing the persistence state of a SoapServer object between requests. This function allows saving data between requests utilizing PHP sessions. This method only has an affect on a SoapServer after it has exported functions utilizing SoapServer::setClass(). 
Note: 
The persistence of SOAP_PERSISTENCE_SESSION makes only objects of the given class persistent, but not the class static data. In this case, use $this->bar instead of self::$bar. 
Note: 
SOAP_PERSISTENCE_SESSION serializes data on the class object between requests. In order to properly utilize resources (e.g. PDO), __wakeup() and __sleep() magic methods should be utilized.
</Desc>
    <FName>SoapServer::SoapServer</FName>
    <Desc>public SoapServer::SoapServer ( mixed $wsdl [, array $options ] )
This constructor allows the creation of SoapServer objects in WSDL or non-WSDL mode.
</Desc>
    <FName>SoapVar::__construct</FName>
    <Desc>SoapVar::__construct ( mixed $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )
This function is an alias of: SoapVar::SoapVar() 
</Desc>
    <FName>SoapVar::SoapVar</FName>
    <Desc>SoapVar::SoapVar ( mixed $data , string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace ]]]] )
Constructs a new SoapVar object.
</Desc>
    <FName>SolrClient::addDocument</FName>
    <Desc>public SolrUpdateResponse SolrClient::addDocument ( SolrInputDocument $doc [, bool $overwrite = TRUE [, int $commitWithin = 0 ]] )
This method adds a document to the index.
</Desc>
    <FName>SolrClient::addDocuments</FName>
    <Desc>public void SolrClient::addDocuments ( array $docs [, bool $overwrite = TRUE [, int $commitWithin = 0 ]] )
Adds a collection of documents to the index.
</Desc>
    <FName>SolrClient::commit</FName>
    <Desc>public SolrUpdateResponse SolrClient::commit ([ bool $softCommit = FALSE [, bool $waitSearcher = TRUE [, bool $expungeDeletes = FALSE ]]] )
This method finalizes all add/deletes made to the index.
</Desc>
    <FName>SolrClient::__construct</FName>
    <Desc>public SolrClient::__construct ( array $clientOptions )
Constructor for the SolrClient object
</Desc>
    <FName>SolrClient::deleteById</FName>
    <Desc>public SolrUpdateResponse SolrClient::deleteById ( string $id )
Deletes the document with the specified ID. Where ID is the value of the uniqueKey field declared in the schema
</Desc>
    <FName>SolrClient::deleteByIds</FName>
    <Desc>public SolrUpdateResponse SolrClient::deleteByIds ( array $ids )
Deletes a collection of documents with the specified set of ids.
</Desc>
    <FName>SolrClient::deleteByQueries</FName>
    <Desc>public SolrUpdateResponse SolrClient::deleteByQueries ( array $queries )
Removes all documents matching any of the queries
</Desc>
    <FName>SolrClient::deleteByQuery</FName>
    <Desc>public SolrUpdateResponse SolrClient::deleteByQuery ( string $query )
Deletes all documents matching the given query.
</Desc>
    <FName>SolrClient::__destruct</FName>
    <Desc>public void SolrClient::__destruct ( void )
Destructor
</Desc>
    <FName>SolrClient::getById</FName>
    <Desc>public SolrQueryResponse SolrClient::getById ( string $id )
Get Document By Id. Utilizes Solr Realtime Get (RTG).
</Desc>
    <FName>SolrClient::getByIds</FName>
    <Desc>public SolrQueryResponse SolrClient::getByIds ( array $ids )
Get Documents by their Ids. Utilizes Solr Realtime Get (RTG).
</Desc>
    <FName>SolrClient::getDebug</FName>
    <Desc>public string SolrClient::getDebug ( void )
Returns the debug data for the last connection attempt
</Desc>
    <FName>SolrClient::getOptions</FName>
    <Desc>public array SolrClient::getOptions ( void )
Returns the client options set internally. Very useful for debugging. The values returned are readonly and can only be set when the object is instantiated.
</Desc>
    <FName>SolrClient::optimize</FName>
    <Desc>public SolrUpdateResponse SolrClient::optimize ([ int $maxSegments = 1 [, bool $softCommit = TRUE [, bool $waitSearcher = TRUE ]]] )
Defragments the index for faster search performance.
</Desc>
    <FName>SolrClient::ping</FName>
    <Desc>public SolrPingResponse SolrClient::ping ( void )
Checks if the Solr server is still alive. Sends a HEAD request to the Apache Solr server.
</Desc>
    <FName>SolrClient::query</FName>
    <Desc>public SolrQueryResponse SolrClient::query ( SolrParams $query )
Sends a query to the server.
</Desc>
    <FName>SolrClient::request</FName>
    <Desc>public SolrUpdateResponse SolrClient::request ( string $raw_request )
Sends a raw XML update request to the server
</Desc>
    <FName>SolrClient::rollback</FName>
    <Desc>public SolrUpdateResponse SolrClient::rollback ( void )
Rollbacks all add/deletes made to the index since the last commit. It neither calls any event listeners nor creates a new searcher.
</Desc>
    <FName>SolrClient::setResponseWriter</FName>
    <Desc>public void SolrClient::setResponseWriter ( string $responseWriter )
Sets the response writer used to prepare the response from Solr
</Desc>
    <FName>SolrClient::setServlet</FName>
    <Desc>public bool SolrClient::setServlet ( int $type , string $value )
Changes the specified servlet type to a new value
</Desc>
    <FName>SolrClient::system</FName>
    <Desc>public void SolrClient::system ( void )
Retrieve Solr Server information
</Desc>
    <FName>SolrClient::threads</FName>
    <Desc>public void SolrClient::threads ( void )
Checks the threads status
</Desc>
    <FName>SolrClientException::getInternalInfo</FName>
    <Desc>public array SolrClientException::getInternalInfo ( void )
Returns internal information where the Exception was thrown.
</Desc>
    <FName>SolrCollapseFunction::__construct</FName>
    <Desc>public SolrCollapseFunction::__construct ([ string $field ] )
Collapse Function constructor
</Desc>
    <FName>SolrCollapseFunction::getField</FName>
    <Desc>public string SolrCollapseFunction::getField ( void )
Returns the field that is being collapsed on.
</Desc>
    <FName>SolrCollapseFunction::getHint</FName>
    <Desc>public string SolrCollapseFunction::getHint ( void )
Returns collapse hint
</Desc>
    <FName>SolrCollapseFunction::getMax</FName>
    <Desc>public string SolrCollapseFunction::getMax ( void )
Returns max parameter
</Desc>
    <FName>SolrCollapseFunction::getMin</FName>
    <Desc>public string SolrCollapseFunction::getMin ( void )
Returns min parameter
</Desc>
    <FName>SolrCollapseFunction::getNullPolicy</FName>
    <Desc>public string SolrCollapseFunction::getNullPolicy ( void )
Returns null policy used or null
</Desc>
    <FName>SolrCollapseFunction::getSize</FName>
    <Desc>public int SolrCollapseFunction::getSize ( void )
Gets the initial size of the collapse data structures when collapsing on a numeric field only
</Desc>
    <FName>SolrCollapseFunction::setField</FName>
    <Desc>public SolrCollapseFunction SolrCollapseFunction::setField ( string $fieldName )
The field name to collapse on. In order to collapse a result. The field type must be a single valued String, Int or Float.
</Desc>
    <FName>SolrCollapseFunction::setHint</FName>
    <Desc>public SolrCollapseFunction SolrCollapseFunction::setHint ( string $hint )
Sets collapse hint
</Desc>
    <FName>SolrCollapseFunction::setMax</FName>
    <Desc>public SolrCollapseFunction SolrCollapseFunction::setMax ( string $max )
Selects the group heads by the max value of a numeric field or function query.
</Desc>
    <FName>SolrCollapseFunction::setMin</FName>
    <Desc>public SolrCollapseFunction SolrCollapseFunction::setMin ( string $min )
Sets the initial size of the collapse data structures when collapsing on a numeric field only
</Desc>
    <FName>SolrCollapseFunction::setNullPolicy</FName>
    <Desc>public SolrCollapseFunction SolrCollapseFunction::setNullPolicy ( string $nullPolicy )
Sets the NULL Policy. One of the 3 policies defined as class constants shall be passed. Accepts ignore, expand, or collapse policies.
</Desc>
    <FName>SolrCollapseFunction::setSize</FName>
    <Desc>public SolrCollapseFunction SolrCollapseFunction::setSize ( int $size )
Sets the initial size of the collapse data structures when collapsing on a numeric field only.
</Desc>
    <FName>SolrCollapseFunction::__toString</FName>
    <Desc>public string SolrCollapseFunction::__toString ( void )
Returns a string representing the constructed collapse function
</Desc>
    <FName>SolrDisMaxQuery::addBigramPhraseField</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::addBigramPhraseField ( string $field , string $boost [, string $slop ] )
Adds a Phrase Bigram Field (pf2 parameter) output format: field~slop^boost OR field^boost Slop is optional
</Desc>
    <FName>SolrDisMaxQuery::addBoostQuery</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::addBoostQuery ( string $field , string $value [, string $boost ] )
Adds a Boost Query field with value [and boost] (bq parameter)
</Desc>
    <FName>SolrDisMaxQuery::addPhraseField</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::addPhraseField ( string $field , string $boost [, string $slop ] )
Adds a Phrase Field (pf parameter)
</Desc>
    <FName>SolrDisMaxQuery::addQueryField</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::addQueryField ( string $field [, string $boost ] )
Add a query field with optional boost (qf parameter)
</Desc>
    <FName>SolrDisMaxQuery::addTrigramPhraseField</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::addTrigramPhraseField ( string $field , string $boost [, string $slop ] )
Adds a Trigram Phrase Field (pf3 parameter)
</Desc>
    <FName>SolrDisMaxQuery::addUserField</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::addUserField ( string $field )
Adds a field to The User Fields Parameter (uf)
</Desc>
    <FName>SolrDisMaxQuery::__construct</FName>
    <Desc>public SolrDisMaxQuery::__construct ([ string $q ] )
Class constructor initializes the object and sets the q parameter if passed
</Desc>
    <FName>SolrDisMaxQuery::removeBigramPhraseField</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::removeBigramPhraseField ( string $field )
Removes a Bigram Phrase Field (pf2 parameter) that was previously added using SolrDisMaxQuery::addBigramPhraseField()
</Desc>
    <FName>SolrDisMaxQuery::removeBoostQuery</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::removeBoostQuery ( string $field )
Removes a boost query partial from the existing query, only if SolrDisMaxQuery::addBoostQuery() was used.
</Desc>
    <FName>SolrDisMaxQuery::removePhraseField</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::removePhraseField ( string $field )
Removes a Phrase Field (pf parameter) that was previously added using SolrDisMaxQuery::addPhraseField
</Desc>
    <FName>SolrDisMaxQuery::removeQueryField</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::removeQueryField ( string $field )
Removes a Query Field (qf parameter) from the field list added by SolrDisMaxQuery::addQueryField() 
qf: When building DisjunctionMaxQueries from the user's query it specifies the fields to search in, and boosts for those fields.
</Desc>
    <FName>SolrDisMaxQuery::removeTrigramPhraseField</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::removeTrigramPhraseField ( string $field )
Removes a Trigram Phrase Field (pf3 parameter)
</Desc>
    <FName>SolrDisMaxQuery::removeUserField</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::removeUserField ( string $field )
Removes a field from The User Fields Parameter (uf) 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SolrDisMaxQuery::setBigramPhraseFields</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setBigramPhraseFields ( string $fields )
Sets Bigram Phrase Fields (pf2) and their boosts (and slops)
</Desc>
    <FName>SolrDisMaxQuery::setBigramPhraseSlop</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setBigramPhraseSlop ( string $slop )
Sets Bigram Phrase Slop (ps2 parameter). A default slop for Bigram phrase fields.
</Desc>
    <FName>SolrDisMaxQuery::setBoostFunction</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setBoostFunction ( string $function )
Sets Boost Function (bf parameter). 
Functions (with optional boosts) that will be included in the user's query to influence the score. Any function supported natively by Solr can be used, along with a boost value. e.g.: 
recip(rord(myfield),1,2,3)^1.5
</Desc>
    <FName>SolrDisMaxQuery::setBoostQuery</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setBoostQuery ( string $q )
Sets Boost Query Parameter (bq)
</Desc>
    <FName>SolrDisMaxQuery::setMinimumMatch</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setMinimumMatch ( string $value )
Set Minimum "Should" Match parameter (mm). If the default query operator is AND then mm=100%, if the default query operator (q.op) is OR, then mm=0%.
</Desc>
    <FName>SolrDisMaxQuery::setPhraseFields</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setPhraseFields ( string $fields )
Sets Phrase Fields (pf) and their boosts (and slops)
</Desc>
    <FName>SolrDisMaxQuery::setPhraseSlop</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setPhraseSlop ( string $slop )
Sets the default amount of slop on phrase queries built with "pf", "pf2" and/or "pf3" fields (affects boosting). "ps" parameter
</Desc>
    <FName>SolrDisMaxQuery::setQueryAlt</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setQueryAlt ( string $q )
Set Query Alternate (q.alt parameter) 
When the main q parameter is not specified or is blank. The q.alt parameter is used
</Desc>
    <FName>SolrDisMaxQuery::setQueryPhraseSlop</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setQueryPhraseSlop ( string $slop )
The Query Phrase Slop is the amount of slop permitted on phrase queries explicitly included in the user's query string with the qf parameter. 
slop refers to the number of positions one token needs to be moved in relation to another token in order to match a phrase specified in a query.
</Desc>
    <FName>SolrDisMaxQuery::setTieBreaker</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setTieBreaker ( string $tieBreaker )
Sets Tie Breaker parameter (tie parameter)
</Desc>
    <FName>SolrDisMaxQuery::setTrigramPhraseFields</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setTrigramPhraseFields ( string $fields )
Directly Sets Trigram Phrase Fields (pf3 parameter)
</Desc>
    <FName>SolrDisMaxQuery::setTrigramPhraseSlop</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setTrigramPhraseSlop ( string $slop )
Sets Trigram Phrase Slop (ps3 parameter)
</Desc>
    <FName>SolrDisMaxQuery::setUserFields</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::setUserFields ( string $fields )
Sets User Fields parameter (uf) 
User Fields: Specifies which schema fields the end user shall be allowed to query.
</Desc>
    <FName>SolrDisMaxQuery::useDisMaxQueryParser</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::useDisMaxQueryParser ( void )
Switch QueryParser to be DisMax Query Parser
</Desc>
    <FName>SolrDisMaxQuery::useEDisMaxQueryParser</FName>
    <Desc>public SolrDisMaxQuery SolrDisMaxQuery::useEDisMaxQueryParser ( void )
Switch QueryParser to be EDisMax. By default the query builder uses edismax, if it was switched using SolrDisMaxQuery::useDisMaxQueryParser(), it can be switched back using this method.
</Desc>
    <FName>SolrDocument::addField</FName>
    <Desc>public bool SolrDocument::addField ( string $fieldName , string $fieldValue )
This method adds a field to the SolrDocument instance.
</Desc>
    <FName>SolrDocument::clear</FName>
    <Desc>public bool SolrDocument::clear ( void )
Resets the current object. Discards all the fields and resets the document boost to zero.
</Desc>
    <FName>SolrDocument::__clone</FName>
    <Desc>public void SolrDocument::__clone ( void )
Creates a copy of a SolrDocument object. Not to be called directly.
</Desc>
    <FName>SolrDocument::__construct</FName>
    <Desc>public SolrDocument::__construct ( void )
Constructor for SolrDocument
</Desc>
    <FName>SolrDocument::current</FName>
    <Desc>public SolrDocumentField SolrDocument::current ( void )
Retrieves the current field
</Desc>
    <FName>SolrDocument::deleteField</FName>
    <Desc>public bool SolrDocument::deleteField ( string $fieldName )
Removes a field from the document.
</Desc>
    <FName>SolrDocument::__destruct</FName>
    <Desc>public void SolrDocument::__destruct ( void )
Destructor for SolrDocument.
</Desc>
    <FName>SolrDocument::fieldExists</FName>
    <Desc>public bool SolrDocument::fieldExists ( string $fieldName )
Checks if the requested field as a valid fieldname in the document.
</Desc>
    <FName>SolrDocument::__get</FName>
    <Desc>public SolrDocumentField SolrDocument::__get ( string $fieldName )
Magic method for accessing the field as a property.
</Desc>
    <FName>SolrDocument::getChildDocuments</FName>
    <Desc>public array SolrDocument::getChildDocuments ( void )
Returns an array of child documents (SolrDocument)
</Desc>
    <FName>SolrDocument::getChildDocumentsCount</FName>
    <Desc>public int SolrDocument::getChildDocumentsCount ( void )
Returns the number of child documents
</Desc>
    <FName>SolrDocument::getField</FName>
    <Desc>public SolrDocumentField SolrDocument::getField ( string $fieldName )
Retrieves a field by name.
</Desc>
    <FName>SolrDocument::getFieldCount</FName>
    <Desc>public int SolrDocument::getFieldCount ( void )
Returns the number of fields in this document. Multi-value fields are only counted once.
</Desc>
    <FName>SolrDocument::getFieldNames</FName>
    <Desc>public array SolrDocument::getFieldNames ( void )
Returns an array of fields names in the document.
</Desc>
    <FName>SolrDocument::getInputDocument</FName>
    <Desc>public SolrInputDocument SolrDocument::getInputDocument ( void )
Returns a SolrInputDocument equivalent of the object. This is useful if one wishes to resubmit/update a document retrieved from a query.
</Desc>
    <FName>SolrDocument::hasChildDocuments</FName>
    <Desc>public bool SolrDocument::hasChildDocuments ( void )
Checks whether the document has any child documents
</Desc>
    <FName>SolrDocument::__isset</FName>
    <Desc>public bool SolrDocument::__isset ( string $fieldName )
Checks if a field exists
</Desc>
    <FName>SolrDocument::key</FName>
    <Desc>public string SolrDocument::key ( void )
Retrieves the current key.
</Desc>
    <FName>SolrDocument::merge</FName>
    <Desc>public bool SolrDocument::merge ( SolrDocument $sourceDoc [, bool $overwrite = TRUE ] )
Merges source to the current SolrDocument.
</Desc>
    <FName>SolrDocument::next</FName>
    <Desc>public void SolrDocument::next ( void )
Moves the internal pointer to the next field.
</Desc>
    <FName>SolrDocument::offsetExists</FName>
    <Desc>public bool SolrDocument::offsetExists ( string $fieldName )
Checks if a particular field exists. This is used when the object is treated as an array.
</Desc>
    <FName>SolrDocument::offsetGet</FName>
    <Desc>public SolrDocumentField SolrDocument::offsetGet ( string $fieldName )
This is used to retrieve the field when the object is treated as an array.
</Desc>
    <FName>SolrDocument::offsetSet</FName>
    <Desc>public void SolrDocument::offsetSet ( string $fieldName , string $fieldValue )
Used when the object is treated as an array to add a field to the document.
</Desc>
    <FName>SolrDocument::offsetUnset</FName>
    <Desc>public void SolrDocument::offsetUnset ( string $fieldName )
Removes a field from the document.
</Desc>
    <FName>SolrDocument::reset</FName>
    <Desc>public bool SolrDocument::reset ( void )
This is an alias to SolrDocument::clear()
</Desc>
    <FName>SolrDocument::rewind</FName>
    <Desc>public void SolrDocument::rewind ( void )
Resets the internal pointer to the beginning.
</Desc>
    <FName>SolrDocument::serialize</FName>
    <Desc>public string SolrDocument::serialize ( void )
Used for custom serialization.
</Desc>
    <FName>SolrDocument::__set</FName>
    <Desc>public bool SolrDocument::__set ( string $fieldName , string $fieldValue )
Adds another field to the document. Used to set the fields as new properties.
</Desc>
    <FName>SolrDocument::sort</FName>
    <Desc>public bool SolrDocument::sort ( int $sortOrderBy [, int $sortDirection = SolrDocument::SORT_ASC ] )
The fields are rearranged according to the specified criteria and sort direction
   
   Fields can be sorted by boost values, field names and number of values.
   
   The sortOrderBy parameter must be one of :
   
   * SolrDocument::SORT_FIELD_NAME
   * SolrDocument::SORT_FIELD_BOOST_VALUE
   * SolrDocument::SORT_FIELD_VALUE_COUNT
   
   The sortDirection can be one of :
   
   * SolrDocument::SORT_DEFAULT
   * SolrDocument::SORT_ASC
   * SolrDocument::SORT_DESC
   
   The default way is to sort in ascending order.
</Desc>
    <FName>SolrDocument::toArray</FName>
    <Desc>public array SolrDocument::toArray ( void )
Returns an array representation of the document.
</Desc>
    <FName>SolrDocument::unserialize</FName>
    <Desc>public void SolrDocument::unserialize ( string $serialized )
Custom serialization of SolrDocument objects
</Desc>
    <FName>SolrDocument::__unset</FName>
    <Desc>public bool SolrDocument::__unset ( string $fieldName )
Removes a field from the document when the field is access as an object property.
</Desc>
    <FName>SolrDocument::valid</FName>
    <Desc>public bool SolrDocument::valid ( void )
Checks if the current position internally is still valid. It is used during foreach operations.
</Desc>
    <FName>SolrDocumentField::__construct</FName>
    <Desc>public SolrDocumentField::__construct ( void )
Constructor.
</Desc>
    <FName>SolrDocumentField::__destruct</FName>
    <Desc>public void SolrDocumentField::__destruct ( void )
Destructor.
</Desc>
    <FName>SolrException::getInternalInfo</FName>
    <Desc>public array SolrException::getInternalInfo ( void )
Returns internal information where the Exception was thrown.
</Desc>
    <FName>SolrGenericResponse::__construct</FName>
    <Desc>public SolrGenericResponse::__construct ( void )
Constructor
</Desc>
    <FName>SolrGenericResponse::__destruct</FName>
    <Desc>public void SolrGenericResponse::__destruct ( void )
Destructor.
</Desc>
    <FName>SolrIllegalArgumentException::getInternalInfo</FName>
    <Desc>public array SolrIllegalArgumentException::getInternalInfo ( void )
Returns internal information where the Exception was thrown. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SolrIllegalOperationException::getInternalInfo</FName>
    <Desc>public array SolrIllegalOperationException::getInternalInfo ( void )
Returns internal information where the Exception was thrown. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SolrInputDocument::addChildDocument</FName>
    <Desc>public void SolrInputDocument::addChildDocument ( SolrInputDocument $child )
Adds a child document to construct a document block with nested documents.
</Desc>
    <FName>SolrInputDocument::addChildDocuments</FName>
    <Desc>public void SolrInputDocument::addChildDocuments ( array &$docs )
Adds an array of child documents to the current input document.
</Desc>
    <FName>SolrInputDocument::addField</FName>
    <Desc>public bool SolrInputDocument::addField ( string $fieldName , string $fieldValue [, float $fieldBoostValue = 0.0 ] )
For multi-value fields, if a valid boost value is specified, the specified value will be multiplied by the current boost value for this field.
</Desc>
    <FName>SolrInputDocument::clear</FName>
    <Desc>public bool SolrInputDocument::clear ( void )
Resets the document by dropping all the fields and resets the document boost to zero.
</Desc>
    <FName>SolrInputDocument::__clone</FName>
    <Desc>public void SolrInputDocument::__clone ( void )
Should not be called directly. It is used to create a deep copy of a SolrInputDocument.
</Desc>
    <FName>SolrInputDocument::__construct</FName>
    <Desc>public SolrInputDocument::__construct ( void )
Constructor.
</Desc>
    <FName>SolrInputDocument::deleteField</FName>
    <Desc>public bool SolrInputDocument::deleteField ( string $fieldName )
Removes a field from the document.
</Desc>
    <FName>SolrInputDocument::__destruct</FName>
    <Desc>public void SolrInputDocument::__destruct ( void )
Destructor
</Desc>
    <FName>SolrInputDocument::fieldExists</FName>
    <Desc>public bool SolrInputDocument::fieldExists ( string $fieldName )
Checks if a field exists
</Desc>
    <FName>SolrInputDocument::getBoost</FName>
    <Desc>public float SolrInputDocument::getBoost ( void )
Retrieves the current boost value for the document.
</Desc>
    <FName>SolrInputDocument::getChildDocuments</FName>
    <Desc>public array SolrInputDocument::getChildDocuments ( void )
Returns an array of child documents (SolrInputDocument)
</Desc>
    <FName>SolrInputDocument::getChildDocumentsCount</FName>
    <Desc>public int SolrInputDocument::getChildDocumentsCount ( void )
Returns the number of child documents
</Desc>
    <FName>SolrInputDocument::getField</FName>
    <Desc>public SolrDocumentField SolrInputDocument::getField ( string $fieldName )
Retrieves a field in the document.
</Desc>
    <FName>SolrInputDocument::getFieldBoost</FName>
    <Desc>public float SolrInputDocument::getFieldBoost ( string $fieldName )
Retrieves the boost value for a particular field.
</Desc>
    <FName>SolrInputDocument::getFieldCount</FName>
    <Desc>public int SolrInputDocument::getFieldCount ( void )
Returns the number of fields in the document.
</Desc>
    <FName>SolrInputDocument::getFieldNames</FName>
    <Desc>public array SolrInputDocument::getFieldNames ( void )
Returns an array containing all the fields in the document.
</Desc>
    <FName>SolrInputDocument::hasChildDocuments</FName>
    <Desc>public bool SolrInputDocument::hasChildDocuments ( void )
Checks whether the document has any child documents
</Desc>
    <FName>SolrInputDocument::merge</FName>
    <Desc>public bool SolrInputDocument::merge ( SolrInputDocument $sourceDoc [, bool $overwrite = TRUE ] )
Merges one input document into another.
</Desc>
    <FName>SolrInputDocument::reset</FName>
    <Desc>public bool SolrInputDocument::reset ( void )
This is an alias of SolrInputDocument::clear
</Desc>
    <FName>SolrInputDocument::setBoost</FName>
    <Desc>public bool SolrInputDocument::setBoost ( float $documentBoostValue )
Sets the boost value for this document.
</Desc>
    <FName>SolrInputDocument::setFieldBoost</FName>
    <Desc>public bool SolrInputDocument::setFieldBoost ( string $fieldName , float $fieldBoostValue )
Sets the index-time boost value for a field. This replaces the current boost value for this field.
</Desc>
    <FName>SolrInputDocument::sort</FName>
    <Desc>public bool SolrInputDocument::sort ( int $sortOrderBy [, int $sortDirection = SolrInputDocument::SORT_ASC ] )
The fields are rearranged according to the specified criteria and sort direction
   
   Fields can be sorted by boost values, field names and number of values.
   
   The $order_by parameter must be one of :
   
   * SolrInputDocument::SORT_FIELD_NAME
   * SolrInputDocument::SORT_FIELD_BOOST_VALUE
   * SolrInputDocument::SORT_FIELD_VALUE_COUNT
   
   The sort direction can be one of :
   
   * SolrInputDocument::SORT_DEFAULT
   * SolrInputDocument::SORT_ASC
   * SolrInputDocument::SORT_DESC
</Desc>
    <FName>SolrInputDocument::toArray</FName>
    <Desc>public array SolrInputDocument::toArray ( void )
Returns an array representation of the input document.
</Desc>
    <FName>SolrModifiableParams::__construct</FName>
    <Desc>public SolrModifiableParams::__construct ( void )
Constructor
</Desc>
    <FName>SolrModifiableParams::__destruct</FName>
    <Desc>public void SolrModifiableParams::__destruct ( void )
Destructor
</Desc>
    <FName>SolrObject::__construct</FName>
    <Desc>public SolrObject::__construct ( void )
Creates Solr object.
</Desc>
    <FName>SolrObject::__destruct</FName>
    <Desc>public void SolrObject::__destruct ( void )
The destructor
</Desc>
    <FName>SolrObject::getPropertyNames</FName>
    <Desc>public array SolrObject::getPropertyNames ( void )
Returns an array of all the names of the properties
</Desc>
    <FName>SolrObject::offsetExists</FName>
    <Desc>public bool SolrObject::offsetExists ( string $property_name )
Checks if the property exists. This is used when the object is treated as an array.
</Desc>
    <FName>SolrObject::offsetGet</FName>
    <Desc>public mixed SolrObject::offsetGet ( string $property_name )
Used to get the value of a property. This is used when the object is treated as an array.
</Desc>
    <FName>SolrObject::offsetSet</FName>
    <Desc>public void SolrObject::offsetSet ( string $property_name , string $property_value )
Sets the value for a property. This is used when the object is treated as an array. This object is read-only. This should never be attempted.
</Desc>
    <FName>SolrObject::offsetUnset</FName>
    <Desc>public void SolrObject::offsetUnset ( string $property_name )
Unsets the value for the property. This is used when the object is treated as an array. This object is read-only. This should never be attempted.
</Desc>
    <FName>SolrParams::add</FName>
    <Desc>final public SolrParams SolrParams::add ( string $name , string $value )
This is an alias for SolrParams::addParam
</Desc>
    <FName>SolrParams::addParam</FName>
    <Desc>public SolrParams SolrParams::addParam ( string $name , string $value )
Adds a parameter to the object. This is used for parameters that can be specified multiple times.
</Desc>
    <FName>SolrParams::get</FName>
    <Desc>final public mixed SolrParams::get ( string $param_name )
This is an alias for SolrParams::getParam
</Desc>
    <FName>SolrParams::getParam</FName>
    <Desc>final public mixed SolrParams::getParam ([ string $param_name ] )
Returns a parameter with name param_name
</Desc>
    <FName>SolrParams::getParams</FName>
    <Desc>final public array SolrParams::getParams ( void )
Returns an array of non URL-encoded parameters
</Desc>
    <FName>SolrParams::getPreparedParams</FName>
    <Desc>final public array SolrParams::getPreparedParams ( void )
Returns an array on URL-encoded parameters
</Desc>
    <FName>SolrParams::serialize</FName>
    <Desc>final public string SolrParams::serialize ( void )
Used for custom serialization
</Desc>
    <FName>SolrParams::set</FName>
    <Desc>final public void SolrParams::set ( string $name , string $value )
An alias of SolrParams::setParam
</Desc>
    <FName>SolrParams::setParam</FName>
    <Desc>public SolrParams SolrParams::setParam ( string $name , string $value )
Sets the query parameter to the specified value. This is used for parameters that can only be specified once. Subsequent calls with the same parameter name will override the existing value
</Desc>
    <FName>SolrParams::toString</FName>
    <Desc>final public string SolrParams::toString ([ bool $url_encode = FALSE ] )
Returns all the name-value pair parameters in the object
</Desc>
    <FName>SolrParams::unserialize</FName>
    <Desc>final public void SolrParams::unserialize ( string $serialized )
Used for custom serialization
</Desc>
    <FName>SolrPingResponse::__construct</FName>
    <Desc>public SolrPingResponse::__construct ( void )
Constructor
</Desc>
    <FName>SolrPingResponse::__destruct</FName>
    <Desc>public void SolrPingResponse::__destruct ( void )
Destructor
</Desc>
    <FName>SolrPingResponse::getResponse</FName>
    <Desc>public string SolrPingResponse::getResponse ( void )
Returns the response from the server. This should be empty because the request as a HEAD request.
</Desc>
    <FName>SolrQuery::addExpandFilterQuery</FName>
    <Desc>public SolrQuery SolrQuery::addExpandFilterQuery ( string $fq )
Overrides main filter query, determines which documents to include in the main group.
</Desc>
    <FName>SolrQuery::addExpandSortField</FName>
    <Desc>public SolrQuery SolrQuery::addExpandSortField ( string $field [, string $order ] )
Orders the documents within the expanded groups (expand.sort parameter).
</Desc>
    <FName>SolrQuery::addFacetDateField</FName>
    <Desc>public SolrQuery SolrQuery::addFacetDateField ( string $dateField )
This method allows you to specify a field which should be treated as a facet. 
It can be used multiple times with different field names to indicate multiple facet fields
</Desc>
    <FName>SolrQuery::addFacetDateOther</FName>
    <Desc>public SolrQuery SolrQuery::addFacetDateOther ( string $value [, string $field_override ] )
Sets the facet.date.other parameter. Accepts an optional field override
</Desc>
    <FName>SolrQuery::addFacetField</FName>
    <Desc>public SolrQuery SolrQuery::addFacetField ( string $field )
Adds another field to the facet
</Desc>
    <FName>SolrQuery::addFacetQuery</FName>
    <Desc>public SolrQuery SolrQuery::addFacetQuery ( string $facetQuery )
Adds a facet query
</Desc>
    <FName>SolrQuery::addField</FName>
    <Desc>public SolrQuery SolrQuery::addField ( string $field )
This method is used to used to specify a set of fields to return, thereby restricting the amount of data returned in the response. 
It should be called multiple time, once for each field name.
</Desc>
    <FName>SolrQuery::addFilterQuery</FName>
    <Desc>public SolrQuery SolrQuery::addFilterQuery ( string $fq )
Specifies a filter query
</Desc>
    <FName>SolrQuery::addGroupField</FName>
    <Desc>public SolrQuery SolrQuery::addGroupField ( string $value )
The name of the field by which to group results. The field must be single-valued, and either be indexed or a field type that has a value source and works in a function query, such as ExternalFileField. It must also be a string-based field, such as StrField or TextField Uses group.field parameter
</Desc>
    <FName>SolrQuery::addGroupFunction</FName>
    <Desc>public SolrQuery SolrQuery::addGroupFunction ( string $value )
Adds a group function (group.func parameter) Allows grouping results based on the unique values of a function query.
</Desc>
    <FName>SolrQuery::addGroupQuery</FName>
    <Desc>public SolrQuery SolrQuery::addGroupQuery ( string $value )
Allows grouping of documents that match the given query. Adds query to the group.query parameter
</Desc>
    <FName>SolrQuery::addGroupSortField</FName>
    <Desc>public SolrQuery SolrQuery::addGroupSortField ( string $field [, int $order ] )
Allow sorting group documents, using group sort field (group.sort parameter).
</Desc>
    <FName>SolrQuery::addHighlightField</FName>
    <Desc>public SolrQuery SolrQuery::addHighlightField ( string $field )
Maps to hl.fl. This is used to specify that highlighted snippets should be generated for a particular field
</Desc>
    <FName>SolrQuery::addMltField</FName>
    <Desc>public SolrQuery SolrQuery::addMltField ( string $field )
Maps to mlt.fl. It specifies that a field should be used for similarity.
</Desc>
    <FName>SolrQuery::addMltQueryField</FName>
    <Desc>public SolrQuery SolrQuery::addMltQueryField ( string $field , float $boost )
Maps to mlt.qf. It is used to specify query fields and their boosts
</Desc>
    <FName>SolrQuery::addSortField</FName>
    <Desc>public SolrQuery SolrQuery::addSortField ( string $field [, int $order = SolrQuery::ORDER_DESC ] )
Used to control how the results should be sorted.
</Desc>
    <FName>SolrQuery::addStatsFacet</FName>
    <Desc>public SolrQuery SolrQuery::addStatsFacet ( string $field )
Requests a return of sub results for values within the given facet. Maps to the stats.facet field
</Desc>
    <FName>SolrQuery::addStatsField</FName>
    <Desc>public SolrQuery SolrQuery::addStatsField ( string $field )
Maps to stats.field parameter This methods adds another stats.field parameter.
</Desc>
    <FName>SolrQuery::collapse</FName>
    <Desc>public SolrQuery SolrQuery::collapse ( SolrCollapseFunction $collapseFunction )
Collapses the result set to a single document per group before it forwards the result set to the rest of the search components. 
So all downstream components (faceting, highlighting, etc...) will work with the collapsed result set.
</Desc>
    <FName>SolrQuery::__construct</FName>
    <Desc>public SolrQuery::__construct ([ string $q ] )
Constructor.
</Desc>
    <FName>SolrQuery::__destruct</FName>
    <Desc>public void SolrQuery::__destruct ( void )
Destructor
</Desc>
    <FName>SolrQuery::getExpand</FName>
    <Desc>public bool SolrQuery::getExpand ( void )
Returns TRUE if group expanding is enabled 
</Desc>
    <FName>SolrQuery::getExpandFilterQueries</FName>
    <Desc>public array SolrQuery::getExpandFilterQueries ( void )
Returns the expand filter queries 
</Desc>
    <FName>SolrQuery::getExpandQuery</FName>
    <Desc>public array SolrQuery::getExpandQuery ( void )
Returns the expand query expand.q parameter 
</Desc>
    <FName>SolrQuery::getExpandRows</FName>
    <Desc>public int SolrQuery::getExpandRows ( void )
Returns The number of rows to display in each group (expand.rows) 
</Desc>
    <FName>SolrQuery::getExpandSortFields</FName>
    <Desc>public array SolrQuery::getExpandSortFields ( void )
Returns an array of fields 
</Desc>
    <FName>SolrQuery::getFacet</FName>
    <Desc>public bool SolrQuery::getFacet ( void )
Returns the value of the facet parameter.
</Desc>
    <FName>SolrQuery::getFacetDateEnd</FName>
    <Desc>public string SolrQuery::getFacetDateEnd ([ string $field_override ] )
Returns the value for the facet.date.end parameter. This method accepts an optional field override
</Desc>
    <FName>SolrQuery::getFacetDateFields</FName>
    <Desc>public array SolrQuery::getFacetDateFields ( void )
Returns all the facet.date fields
</Desc>
    <FName>SolrQuery::getFacetDateGap</FName>
    <Desc>public string SolrQuery::getFacetDateGap ([ string $field_override ] )
Returns the value of the facet.date.gap parameter. It accepts an optional field override
</Desc>
    <FName>SolrQuery::getFacetDateHardEnd</FName>
    <Desc>public string SolrQuery::getFacetDateHardEnd ([ string $field_override ] )
Returns the value of the facet.date.hardend parameter. Accepts an optional field override
</Desc>
    <FName>SolrQuery::getFacetDateOther</FName>
    <Desc>public array SolrQuery::getFacetDateOther ([ string $field_override ] )
Returns the value for the facet.date.other parameter. This method accepts an optional field override.
</Desc>
    <FName>SolrQuery::getFacetDateStart</FName>
    <Desc>public string SolrQuery::getFacetDateStart ([ string $field_override ] )
Returns the lower bound for the first date range for all date faceting on this field. Accepts an optional field override
</Desc>
    <FName>SolrQuery::getFacetFields</FName>
    <Desc>public array SolrQuery::getFacetFields ( void )
Returns all the facet fields
</Desc>
    <FName>SolrQuery::getFacetLimit</FName>
    <Desc>public int SolrQuery::getFacetLimit ([ string $field_override ] )
Returns the maximum number of constraint counts that should be returned for the facet fields. This method accepts an optional field override
</Desc>
    <FName>SolrQuery::getFacetMethod</FName>
    <Desc>public string SolrQuery::getFacetMethod ([ string $field_override ] )
Returns the value of the facet.method parameter. This accepts an optional field override.
</Desc>
    <FName>SolrQuery::getFacetMinCount</FName>
    <Desc>public int SolrQuery::getFacetMinCount ([ string $field_override ] )
Returns the minimum counts for facet fields should be included in the response. It accepts an optional field override
</Desc>
    <FName>SolrQuery::getFacetMissing</FName>
    <Desc>public bool SolrQuery::getFacetMissing ([ string $field_override ] )
Returns the current state of the facet.missing parameter. This accepts an optional field override
</Desc>
    <FName>SolrQuery::getFacetOffset</FName>
    <Desc>public int SolrQuery::getFacetOffset ([ string $field_override ] )
Returns an offset into the list of constraints to be used for pagination. Accepts an optional field override
</Desc>
    <FName>SolrQuery::getFacetPrefix</FName>
    <Desc>public string SolrQuery::getFacetPrefix ([ string $field_override ] )
Returns the facet prefix
</Desc>
    <FName>SolrQuery::getFacetQueries</FName>
    <Desc>public array SolrQuery::getFacetQueries ( void )
Returns all the facet queries
</Desc>
    <FName>SolrQuery::getFacetSort</FName>
    <Desc>public int SolrQuery::getFacetSort ([ string $field_override ] )
Returns an integer (SolrQuery::FACET_SORT_INDEX or SolrQuery::FACET_SORT_COUNT)
</Desc>
    <FName>SolrQuery::getFields</FName>
    <Desc>public array SolrQuery::getFields ( void )
Returns the list of fields that will be returned in the response
</Desc>
    <FName>SolrQuery::getFilterQueries</FName>
    <Desc>public array SolrQuery::getFilterQueries ( void )
Returns an array of filter queries. These are queries that can be used to restrict the super set of documents that can be returned, without influencing score
</Desc>
    <FName>SolrQuery::getGroup</FName>
    <Desc>public bool SolrQuery::getGroup ( void )
Returns true if grouping is enabled
</Desc>
    <FName>SolrQuery::getGroupCachePercent</FName>
    <Desc>public int SolrQuery::getGroupCachePercent ( void )
Returns group cache percent value
</Desc>
    <FName>SolrQuery::getGroupFacet</FName>
    <Desc>public bool SolrQuery::getGroupFacet ( void )
Returns the group.facet parameter value
</Desc>
    <FName>SolrQuery::getGroupFields</FName>
    <Desc>public array SolrQuery::getGroupFields ( void )
Returns group fields (group.field parameter values)
</Desc>
    <FName>SolrQuery::getGroupFormat</FName>
    <Desc>public string SolrQuery::getGroupFormat ( void )
Returns the group.format value
</Desc>
    <FName>SolrQuery::getGroupFunctions</FName>
    <Desc>public array SolrQuery::getGroupFunctions ( void )
Returns group functions (group.func parameter values)
</Desc>
    <FName>SolrQuery::getGroupLimit</FName>
    <Desc>public int SolrQuery::getGroupLimit ( void )
Returns the group.limit value
</Desc>
    <FName>SolrQuery::getGroupMain</FName>
    <Desc>public bool SolrQuery::getGroupMain ( void )
Returns the group.main value
</Desc>
    <FName>SolrQuery::getGroupNGroups</FName>
    <Desc>public bool SolrQuery::getGroupNGroups ( void )
Returns the group.ngroups value
</Desc>
    <FName>SolrQuery::getGroupOffset</FName>
    <Desc>public int SolrQuery::getGroupOffset ( void )
Returns the group.offset value
</Desc>
    <FName>SolrQuery::getGroupQueries</FName>
    <Desc>public array SolrQuery::getGroupQueries ( void )
Returns all the group.query parameter values
</Desc>
    <FName>SolrQuery::getGroupSortFields</FName>
    <Desc>public array SolrQuery::getGroupSortFields ( void )
Returns the group.sort value
</Desc>
    <FName>SolrQuery::getGroupTruncate</FName>
    <Desc>public bool SolrQuery::getGroupTruncate ( void )
Returns the group.truncate value
</Desc>
    <FName>SolrQuery::getHighlight</FName>
    <Desc>public bool SolrQuery::getHighlight ( void )
Returns a boolean indicating whether or not to enable highlighted snippets to be generated in the query response.
</Desc>
    <FName>SolrQuery::getHighlightAlternateField</FName>
    <Desc>public string SolrQuery::getHighlightAlternateField ([ string $field_override ] )
Returns the highlight field to use as backup or default. It accepts an optional override.
</Desc>
    <FName>SolrQuery::getHighlightFields</FName>
    <Desc>public array SolrQuery::getHighlightFields ( void )
Returns all the fields that Solr should generate highlighted snippets for
</Desc>
    <FName>SolrQuery::getHighlightFormatter</FName>
    <Desc>public string SolrQuery::getHighlightFormatter ([ string $field_override ] )
Returns the formatter for the highlighted output
</Desc>
    <FName>SolrQuery::getHighlightFragmenter</FName>
    <Desc>public string SolrQuery::getHighlightFragmenter ([ string $field_override ] )
Returns the text snippet generator for highlighted text. Accepts an optional field override.
</Desc>
    <FName>SolrQuery::getHighlightFragsize</FName>
    <Desc>public int SolrQuery::getHighlightFragsize ([ string $field_override ] )
Returns the number of characters of fragments to consider for highlighting. Zero implies no fragmenting. The entire field should be used.
</Desc>
    <FName>SolrQuery::getHighlightHighlightMultiTerm</FName>
    <Desc>public bool SolrQuery::getHighlightHighlightMultiTerm ( void )
Returns whether or not to enable highlighting for range/wildcard/fuzzy/prefix queries
</Desc>
    <FName>SolrQuery::getHighlightMaxAlternateFieldLength</FName>
    <Desc>public int SolrQuery::getHighlightMaxAlternateFieldLength ([ string $field_override ] )
Returns the maximum number of characters of the field to return
</Desc>
    <FName>SolrQuery::getHighlightMaxAnalyzedChars</FName>
    <Desc>public int SolrQuery::getHighlightMaxAnalyzedChars ( void )
Returns the maximum number of characters into a document to look for suitable snippets
</Desc>
    <FName>SolrQuery::getHighlightMergeContiguous</FName>
    <Desc>public bool SolrQuery::getHighlightMergeContiguous ([ string $field_override ] )
Returns whether or not the collapse contiguous fragments into a single fragment. Accepts an optional field override.
</Desc>
    <FName>SolrQuery::getHighlightRegexMaxAnalyzedChars</FName>
    <Desc>public int SolrQuery::getHighlightRegexMaxAnalyzedChars ( void )
Returns the maximum number of characters from a field when using the regex fragmenter
</Desc>
    <FName>SolrQuery::getHighlightRegexPattern</FName>
    <Desc>public string SolrQuery::getHighlightRegexPattern ( void )
Returns the regular expression used for fragmenting
</Desc>
    <FName>SolrQuery::getHighlightRegexSlop</FName>
    <Desc>public float SolrQuery::getHighlightRegexSlop ( void )
Returns the factor by which the regex fragmenter can deviate from the ideal fragment size to accomodate the regular expression
</Desc>
    <FName>SolrQuery::getHighlightRequireFieldMatch</FName>
    <Desc>public bool SolrQuery::getHighlightRequireFieldMatch ( void )
Returns if a field will only be highlighted if the query matched in this particular field.
</Desc>
    <FName>SolrQuery::getHighlightSimplePost</FName>
    <Desc>public string SolrQuery::getHighlightSimplePost ([ string $field_override ] )
Returns the text which appears after a highlighted term. Accepts an optional field override
</Desc>
    <FName>SolrQuery::getHighlightSimplePre</FName>
    <Desc>public string SolrQuery::getHighlightSimplePre ([ string $field_override ] )
Returns the text which appears before a highlighted term. Accepts an optional field override
</Desc>
    <FName>SolrQuery::getHighlightSnippets</FName>
    <Desc>public int SolrQuery::getHighlightSnippets ([ string $field_override ] )
Returns the maximum number of highlighted snippets to generate per field. Accepts an optional field override
</Desc>
    <FName>SolrQuery::getHighlightUsePhraseHighlighter</FName>
    <Desc>public bool SolrQuery::getHighlightUsePhraseHighlighter ( void )
Returns whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document.
</Desc>
    <FName>SolrQuery::getMlt</FName>
    <Desc>public bool SolrQuery::getMlt ( void )
Returns whether or not MoreLikeThis results should be enabled
</Desc>
    <FName>SolrQuery::getMltBoost</FName>
    <Desc>public bool SolrQuery::getMltBoost ( void )
Returns whether or not the query will be boosted by the interesting term relevance
</Desc>
    <FName>SolrQuery::getMltCount</FName>
    <Desc>public int SolrQuery::getMltCount ( void )
Returns the number of similar documents to return for each result
</Desc>
    <FName>SolrQuery::getMltFields</FName>
    <Desc>public array SolrQuery::getMltFields ( void )
Returns all the fields to use for similarity
</Desc>
    <FName>SolrQuery::getMltMaxNumQueryTerms</FName>
    <Desc>public int SolrQuery::getMltMaxNumQueryTerms ( void )
Returns the maximum number of query terms that will be included in any generated query
</Desc>
    <FName>SolrQuery::getMltMaxNumTokens</FName>
    <Desc>public int SolrQuery::getMltMaxNumTokens ( void )
Returns the maximum number of tokens to parse in each document field that is not stored with TermVector support
</Desc>
    <FName>SolrQuery::getMltMaxWordLength</FName>
    <Desc>public int SolrQuery::getMltMaxWordLength ( void )
Returns the maximum word length above which words will be ignored
</Desc>
    <FName>SolrQuery::getMltMinDocFrequency</FName>
    <Desc>public int SolrQuery::getMltMinDocFrequency ( void )
Returns the treshold frequency at which words will be ignored which do not occur in at least this many docs
</Desc>
    <FName>SolrQuery::getMltMinTermFrequency</FName>
    <Desc>public int SolrQuery::getMltMinTermFrequency ( void )
Returns the frequency below which terms will be ignored in the source document
</Desc>
    <FName>SolrQuery::getMltMinWordLength</FName>
    <Desc>public int SolrQuery::getMltMinWordLength ( void )
Returns the minimum word length below which words will be ignored
</Desc>
    <FName>SolrQuery::getMltQueryFields</FName>
    <Desc>public array SolrQuery::getMltQueryFields ( void )
Returns the query fields and their boosts
</Desc>
    <FName>SolrQuery::getQuery</FName>
    <Desc>public string SolrQuery::getQuery ( void )
Returns the main search query
</Desc>
    <FName>SolrQuery::getRows</FName>
    <Desc>public int SolrQuery::getRows ( void )
Returns the maximum number of documents from the complete result set to return to the client for every request
</Desc>
    <FName>SolrQuery::getSortFields</FName>
    <Desc>public array SolrQuery::getSortFields ( void )
Returns all the sort fields
</Desc>
    <FName>SolrQuery::getStart</FName>
    <Desc>public int SolrQuery::getStart ( void )
Returns the offset in the complete result set for the queries where the set of returned documents should begin.
</Desc>
    <FName>SolrQuery::getStats</FName>
    <Desc>public bool SolrQuery::getStats ( void )
Returns whether or not stats is enabled
</Desc>
    <FName>SolrQuery::getStatsFacets</FName>
    <Desc>public array SolrQuery::getStatsFacets ( void )
Returns all the stats facets that were set
</Desc>
    <FName>SolrQuery::getStatsFields</FName>
    <Desc>public array SolrQuery::getStatsFields ( void )
Returns all the statistics fields
</Desc>
    <FName>SolrQuery::getTerms</FName>
    <Desc>public bool SolrQuery::getTerms ( void )
Returns whether or not the TermsComponent is enabled
</Desc>
    <FName>SolrQuery::getTermsField</FName>
    <Desc>public string SolrQuery::getTermsField ( void )
Returns the field from which the terms are retrieved
</Desc>
    <FName>SolrQuery::getTermsIncludeLowerBound</FName>
    <Desc>public bool SolrQuery::getTermsIncludeLowerBound ( void )
Returns whether or not to include the lower bound in the result set
</Desc>
    <FName>SolrQuery::getTermsIncludeUpperBound</FName>
    <Desc>public bool SolrQuery::getTermsIncludeUpperBound ( void )
Returns whether or not to include the upper bound term in the result set
</Desc>
    <FName>SolrQuery::getTermsLimit</FName>
    <Desc>public int SolrQuery::getTermsLimit ( void )
Returns the maximum number of terms Solr should return
</Desc>
    <FName>SolrQuery::getTermsLowerBound</FName>
    <Desc>public string SolrQuery::getTermsLowerBound ( void )
Returns the term to start at
</Desc>
    <FName>SolrQuery::getTermsMaxCount</FName>
    <Desc>public int SolrQuery::getTermsMaxCount ( void )
Returns the maximum document frequency
</Desc>
    <FName>SolrQuery::getTermsMinCount</FName>
    <Desc>public int SolrQuery::getTermsMinCount ( void )
Returns the minimum document frequency to return in order to be included
</Desc>
    <FName>SolrQuery::getTermsPrefix</FName>
    <Desc>public string SolrQuery::getTermsPrefix ( void )
Returns the prefix to which matching terms must be restricted. This will restrict matches to only terms that start with the prefix
</Desc>
    <FName>SolrQuery::getTermsReturnRaw</FName>
    <Desc>public bool SolrQuery::getTermsReturnRaw ( void )
Returns a boolean indicating whether or not to return the raw characters of the indexed term, regardless of if it is human readable
</Desc>
    <FName>SolrQuery::getTermsSort</FName>
    <Desc>public int SolrQuery::getTermsSort ( void )
SolrQuery::TERMS_SORT_INDEX indicates that the terms are returned by index order. SolrQuery::TERMS_SORT_COUNT implies that the terms are sorted by term frequency (highest count first)
</Desc>
    <FName>SolrQuery::getTermsUpperBound</FName>
    <Desc>public string SolrQuery::getTermsUpperBound ( void )
Returns the term to stop at
</Desc>
    <FName>SolrQuery::getTimeAllowed</FName>
    <Desc>public int SolrQuery::getTimeAllowed ( void )
Returns the time in milliseconds allowed for the query to finish.
</Desc>
    <FName>SolrQuery::removeExpandFilterQuery</FName>
    <Desc>public SolrQuery SolrQuery::removeExpandFilterQuery ( string $fq )
Removes an expand filter query.
</Desc>
    <FName>SolrQuery::removeExpandSortField</FName>
    <Desc>public SolrQuery SolrQuery::removeExpandSortField ( string $field )
Removes an expand sort field from the expand.sort parameter.
</Desc>
    <FName>SolrQuery::removeFacetDateField</FName>
    <Desc>public SolrQuery SolrQuery::removeFacetDateField ( string $field )
The name of the field
</Desc>
    <FName>SolrQuery::removeFacetDateOther</FName>
    <Desc>public SolrQuery SolrQuery::removeFacetDateOther ( string $value [, string $field_override ] )
Removes one of the facet.date.other parameters
</Desc>
    <FName>SolrQuery::removeFacetField</FName>
    <Desc>public SolrQuery SolrQuery::removeFacetField ( string $field )
Removes one of the facet.date parameters
</Desc>
    <FName>SolrQuery::removeFacetQuery</FName>
    <Desc>public SolrQuery SolrQuery::removeFacetQuery ( string $value )
Removes one of the facet.query parameters.
</Desc>
    <FName>SolrQuery::removeField</FName>
    <Desc>public SolrQuery SolrQuery::removeField ( string $field )
Removes a field from the list of fields
</Desc>
    <FName>SolrQuery::removeFilterQuery</FName>
    <Desc>public SolrQuery SolrQuery::removeFilterQuery ( string $fq )
Removes a filter query.
</Desc>
    <FName>SolrQuery::removeHighlightField</FName>
    <Desc>public SolrQuery SolrQuery::removeHighlightField ( string $field )
Removes one of the fields used for highlighting.
</Desc>
    <FName>SolrQuery::removeMltField</FName>
    <Desc>public SolrQuery SolrQuery::removeMltField ( string $field )
Removes one of the moreLikeThis fields.
</Desc>
    <FName>SolrQuery::removeMltQueryField</FName>
    <Desc>public SolrQuery SolrQuery::removeMltQueryField ( string $queryField )
Removes one of the moreLikeThis query fields.
</Desc>
    <FName>SolrQuery::removeSortField</FName>
    <Desc>public SolrQuery SolrQuery::removeSortField ( string $field )
Removes one of the sort fields
</Desc>
    <FName>SolrQuery::removeStatsFacet</FName>
    <Desc>public SolrQuery SolrQuery::removeStatsFacet ( string $value )
Removes one of the stats.facet parameters
</Desc>
    <FName>SolrQuery::removeStatsField</FName>
    <Desc>public SolrQuery SolrQuery::removeStatsField ( string $field )
Removes one of the stats.field parameters
</Desc>
    <FName>SolrQuery::setEchoHandler</FName>
    <Desc>public SolrQuery SolrQuery::setEchoHandler ( bool $flag )
If set to true, Solr places the name of the handle used in the response to the client for debugging purposes.
</Desc>
    <FName>SolrQuery::setEchoParams</FName>
    <Desc>public SolrQuery SolrQuery::setEchoParams ( string $type )
Instructs Solr what kinds of Request parameters should be included in the response for debugging purposes, legal values include: 
- none - don't include any request parameters for debugging
- explicit - include the parameters explicitly specified by the client in the request
- all - include all parameters involved in this request, either specified explicitly by the client, or implicit because of the request handler configuration.
</Desc>
    <FName>SolrQuery::setExpand</FName>
    <Desc>public SolrQuery SolrQuery::setExpand ( bool $value )
Enables/Disables the Expand Component.
</Desc>
    <FName>SolrQuery::setExpandQuery</FName>
    <Desc>public SolrQuery SolrQuery::setExpandQuery ( string $q )
Sets the expand.q parameter. 
Overrides the main q parameter, determines which documents to include in the main group.
</Desc>
    <FName>SolrQuery::setExpandRows</FName>
    <Desc>public SolrQuery SolrQuery::setExpandRows ( int $value )
Sets the number of rows to display in each group (expand.rows). Server Default 5
</Desc>
    <FName>SolrQuery::setExplainOther</FName>
    <Desc>public SolrQuery SolrQuery::setExplainOther ( string $query )
Sets the explainOther common query parameter
</Desc>
    <FName>SolrQuery::setFacet</FName>
    <Desc>public SolrQuery SolrQuery::setFacet ( bool $flag )
Enables or disables faceting.
</Desc>
    <FName>SolrQuery::setFacetDateEnd</FName>
    <Desc>public SolrQuery SolrQuery::setFacetDateEnd ( string $value [, string $field_override ] )
Maps to facet.date.end
</Desc>
    <FName>SolrQuery::setFacetDateGap</FName>
    <Desc>public SolrQuery SolrQuery::setFacetDateGap ( string $value [, string $field_override ] )
Maps to facet.date.gap
</Desc>
    <FName>SolrQuery::setFacetDateHardEnd</FName>
    <Desc>public SolrQuery SolrQuery::setFacetDateHardEnd ( bool $value [, string $field_override ] )
Maps to facet.date.hardend
</Desc>
    <FName>SolrQuery::setFacetDateStart</FName>
    <Desc>public SolrQuery SolrQuery::setFacetDateStart ( string $value [, string $field_override ] )
Maps to facet.date.start
</Desc>
    <FName>SolrQuery::setFacetEnumCacheMinDefaultFrequency</FName>
    <Desc>public SolrQuery SolrQuery::setFacetEnumCacheMinDefaultFrequency ( int $frequency [, string $field_override ] )
Sets the minimum document frequency used for determining term count
</Desc>
    <FName>SolrQuery::setFacetLimit</FName>
    <Desc>public SolrQuery SolrQuery::setFacetLimit ( int $limit [, string $field_override ] )
Maps to facet.limit. Sets the maximum number of constraint counts that should be returned for the facet fields.
</Desc>
    <FName>SolrQuery::setFacetMethod</FName>
    <Desc>public SolrQuery SolrQuery::setFacetMethod ( string $method [, string $field_override ] )
Specifies the type of algorithm to use when faceting a field. This method accepts optional field override.
</Desc>
    <FName>SolrQuery::setFacetMinCount</FName>
    <Desc>public SolrQuery SolrQuery::setFacetMinCount ( int $mincount [, string $field_override ] )
Sets the minimum counts for facet fields that should be included in the response
</Desc>
    <FName>SolrQuery::setFacetMissing</FName>
    <Desc>public SolrQuery SolrQuery::setFacetMissing ( bool $flag [, string $field_override ] )
Used to indicate that in addition to the Term-based constraints of a facet field, a count of all matching results which have no value for the field should be computed
</Desc>
    <FName>SolrQuery::setFacetOffset</FName>
    <Desc>public SolrQuery SolrQuery::setFacetOffset ( int $offset [, string $field_override ] )
Sets the offset into the list of constraints to allow for pagination.
</Desc>
    <FName>SolrQuery::setFacetPrefix</FName>
    <Desc>public SolrQuery SolrQuery::setFacetPrefix ( string $prefix [, string $field_override ] )
Specifies a string prefix with which to limits the terms on which to facet.
</Desc>
    <FName>SolrQuery::setFacetSort</FName>
    <Desc>public SolrQuery SolrQuery::setFacetSort ( int $facetSort [, string $field_override ] )
Determines the ordering of the facet field constraints
</Desc>
    <FName>SolrQuery::setGroup</FName>
    <Desc>public SolrQuery SolrQuery::setGroup ( bool $value )
Enable/Disable result grouping (group parameter)
</Desc>
    <FName>SolrQuery::setGroupCachePercent</FName>
    <Desc>public SolrQuery SolrQuery::setGroupCachePercent ( int $percent )
Setting this parameter to a number greater than 0 enables caching for result grouping. Result Grouping executes two searches; this option caches the second search. The server default value is 0. Testing has shown that group caching only improves search time with Boolean, wildcard, and fuzzy queries. For simple queries like term or "match all" queries, group caching degrades performance. group.cache.percent parameter
</Desc>
    <FName>SolrQuery::setGroupFacet</FName>
    <Desc>public SolrQuery SolrQuery::setGroupFacet ( bool $value )
Determines whether to compute grouped facets for the field facets specified in facet.field parameters. Grouped facets are computed based on the first specified group.
</Desc>
    <FName>SolrQuery::setGroupFormat</FName>
    <Desc>public SolrQuery SolrQuery::setGroupFormat ( string $value )
Sets the group.format parameter. If this parameter is set to simple, the grouped documents are presented in a single flat list, and the start and rows parameters affect the numbers of documents instead of groups. Accepts: grouped/simple
</Desc>
    <FName>SolrQuery::setGroupLimit</FName>
    <Desc>public SolrQuery SolrQuery::setGroupLimit ( int $value )
Specifies the number of results to return for each group. The server default value is 1.
</Desc>
    <FName>SolrQuery::setGroupMain</FName>
    <Desc>public SolrQuery SolrQuery::setGroupMain ( string $value )
If true, the result of the first field grouping command is used as the main result list in the response, using group.format=simple.
</Desc>
    <FName>SolrQuery::setGroupNGroups</FName>
    <Desc>public SolrQuery SolrQuery::setGroupNGroups ( bool $value )
If true, Solr includes the number of groups that have matched the query in the results.
</Desc>
    <FName>SolrQuery::setGroupOffset</FName>
    <Desc>public SolrQuery SolrQuery::setGroupOffset ( int $value )
Sets the group.offset parameter.
</Desc>
    <FName>SolrQuery::setGroupTruncate</FName>
    <Desc>public SolrQuery SolrQuery::setGroupTruncate ( bool $value )
If true, facet counts are based on the most relevant document of each group matching the query. The server default value is false. group.truncate parameter
</Desc>
    <FName>SolrQuery::setHighlight</FName>
    <Desc>public SolrQuery SolrQuery::setHighlight ( bool $flag )
Setting it to TRUE enables highlighted snippets to be generated in the query response. 
Setting it to FALSE disables highlighting
</Desc>
    <FName>SolrQuery::setHighlightAlternateField</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightAlternateField ( string $field [, string $field_override ] )
If a snippet cannot be generated because there were no matching terms, one can specify a field to use as the backup or default summary
</Desc>
    <FName>SolrQuery::setHighlightFormatter</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightFormatter ( string $formatter [, string $field_override ] )
Specify a formatter for the highlight output.
</Desc>
    <FName>SolrQuery::setHighlightFragmenter</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightFragmenter ( string $fragmenter [, string $field_override ] )
Specify a text snippet generator for highlighted text.
</Desc>
    <FName>SolrQuery::setHighlightFragsize</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightFragsize ( int $size [, string $field_override ] )
Sets the size, in characters, of fragments to consider for highlighting. "0" indicates that the whole field value should be used (no fragmenting).
</Desc>
    <FName>SolrQuery::setHighlightHighlightMultiTerm</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightHighlightMultiTerm ( bool $flag )
Use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document.
</Desc>
    <FName>SolrQuery::setHighlightMaxAlternateFieldLength</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightMaxAlternateFieldLength ( int $fieldLength [, string $field_override ] )
If SolrQuery::setHighlightAlternateField() was passed the value TRUE, this parameter specifies the maximum number of characters of the field to return 
Any value less than or equal to 0 means unlimited.
</Desc>
    <FName>SolrQuery::setHighlightMaxAnalyzedChars</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightMaxAnalyzedChars ( int $value )
Specifies the number of characters into a document to look for suitable snippets
</Desc>
    <FName>SolrQuery::setHighlightMergeContiguous</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightMergeContiguous ( bool $flag [, string $field_override ] )
Whether or not to collapse contiguous fragments into a single fragment
</Desc>
    <FName>SolrQuery::setHighlightRegexMaxAnalyzedChars</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightRegexMaxAnalyzedChars ( int $maxAnalyzedChars )
Specify the maximum number of characters to analyze from a field when using the regex fragmenter
</Desc>
    <FName>SolrQuery::setHighlightRegexPattern</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightRegexPattern ( string $value )
Specifies the regular expression for fragmenting. This could be used to extract sentences
</Desc>
    <FName>SolrQuery::setHighlightRegexSlop</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightRegexSlop ( float $factor )
The factor by which the regex fragmenter can stray from the ideal fragment size ( specfied by SolrQuery::setHighlightFragsize )to accommodate the regular expression
</Desc>
    <FName>SolrQuery::setHighlightRequireFieldMatch</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightRequireFieldMatch ( bool $flag )
If TRUE, then a field will only be highlighted if the query matched in this particular field. 
This will only work if SolrQuery::setHighlightUsePhraseHighlighter() was set to TRUE
</Desc>
    <FName>SolrQuery::setHighlightSimplePost</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightSimplePost ( string $simplePost [, string $field_override ] )
Sets the text which appears before a highlighted term
</Desc>
    <FName>SolrQuery::setHighlightSimplePre</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightSimplePre ( string $simplePre [, string $field_override ] )
Sets the text which appears before a highlighted term 
The default is <em>
</Desc>
    <FName>SolrQuery::setHighlightSnippets</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightSnippets ( int $value [, string $field_override ] )
Sets the maximum number of highlighted snippets to generate per field
</Desc>
    <FName>SolrQuery::setHighlightUsePhraseHighlighter</FName>
    <Desc>public SolrQuery SolrQuery::setHighlightUsePhraseHighlighter ( bool $flag )
Sets whether or not to use SpanScorer to highlight phrase terms only when they appear within the query phrase in the document
</Desc>
    <FName>SolrQuery::setMlt</FName>
    <Desc>public SolrQuery SolrQuery::setMlt ( bool $flag )
Enables or disables moreLikeThis
</Desc>
    <FName>SolrQuery::setMltBoost</FName>
    <Desc>public SolrQuery SolrQuery::setMltBoost ( bool $flag )
Set if the query will be boosted by the interesting term relevance
</Desc>
    <FName>SolrQuery::setMltCount</FName>
    <Desc>public SolrQuery SolrQuery::setMltCount ( int $count )
Set the number of similar documents to return for each result
</Desc>
    <FName>SolrQuery::setMltMaxNumQueryTerms</FName>
    <Desc>public SolrQuery SolrQuery::setMltMaxNumQueryTerms ( int $value )
Sets the maximum number of query terms that will be included in any generated query.
</Desc>
    <FName>SolrQuery::setMltMaxNumTokens</FName>
    <Desc>public SolrQuery SolrQuery::setMltMaxNumTokens ( int $value )
Specifies the maximum number of tokens to parse in each example doc field that is not stored with TermVector support.
</Desc>
    <FName>SolrQuery::setMltMaxWordLength</FName>
    <Desc>public SolrQuery SolrQuery::setMltMaxWordLength ( int $maxWordLength )
Sets the maximum word length above which words will be ignored.
</Desc>
    <FName>SolrQuery::setMltMinDocFrequency</FName>
    <Desc>public SolrQuery SolrQuery::setMltMinDocFrequency ( int $minDocFrequency )
The frequency at which words will be ignored which do not occur in at least this many docs.
</Desc>
    <FName>SolrQuery::setMltMinTermFrequency</FName>
    <Desc>public SolrQuery SolrQuery::setMltMinTermFrequency ( int $minTermFrequency )
Sets the frequency below which terms will be ignored in the source docs
</Desc>
    <FName>SolrQuery::setMltMinWordLength</FName>
    <Desc>public SolrQuery SolrQuery::setMltMinWordLength ( int $minWordLength )
Sets the minimum word length below which words will be ignored.
</Desc>
    <FName>SolrQuery::setOmitHeader</FName>
    <Desc>public SolrQuery SolrQuery::setOmitHeader ( bool $flag )
Exclude the header from the returned results.
</Desc>
    <FName>SolrQuery::setQuery</FName>
    <Desc>public SolrQuery SolrQuery::setQuery ( string $query )
Sets the search query.
</Desc>
    <FName>SolrQuery::setRows</FName>
    <Desc>public SolrQuery SolrQuery::setRows ( int $rows )
Specifies the maximum number of rows to return in the result
</Desc>
    <FName>SolrQuery::setShowDebugInfo</FName>
    <Desc>public SolrQuery SolrQuery::setShowDebugInfo ( bool $flag )
Whether to show debug info
</Desc>
    <FName>SolrQuery::setStart</FName>
    <Desc>public SolrQuery SolrQuery::setStart ( int $start )
Specifies the number of rows to skip. Useful in pagination of results.
</Desc>
    <FName>SolrQuery::setStats</FName>
    <Desc>public SolrQuery SolrQuery::setStats ( bool $flag )
Enables or disables the Stats component.
</Desc>
    <FName>SolrQuery::setTerms</FName>
    <Desc>public SolrQuery SolrQuery::setTerms ( bool $flag )
Enables or disables the TermsComponent
</Desc>
    <FName>SolrQuery::setTermsField</FName>
    <Desc>public SolrQuery SolrQuery::setTermsField ( string $fieldname )
Sets the name of the field to get the terms from
</Desc>
    <FName>SolrQuery::setTermsIncludeLowerBound</FName>
    <Desc>public SolrQuery SolrQuery::setTermsIncludeLowerBound ( bool $flag )
Include the lower bound term in the result set.
</Desc>
    <FName>SolrQuery::setTermsIncludeUpperBound</FName>
    <Desc>public SolrQuery SolrQuery::setTermsIncludeUpperBound ( bool $flag )
Include the upper bound term in the result set.
</Desc>
    <FName>SolrQuery::setTermsLimit</FName>
    <Desc>public SolrQuery SolrQuery::setTermsLimit ( int $limit )
Sets the maximum number of terms to return
</Desc>
    <FName>SolrQuery::setTermsLowerBound</FName>
    <Desc>public SolrQuery SolrQuery::setTermsLowerBound ( string $lowerBound )
Specifies the Term to start from
</Desc>
    <FName>SolrQuery::setTermsMaxCount</FName>
    <Desc>public SolrQuery SolrQuery::setTermsMaxCount ( int $frequency )
Sets the maximum document frequency.
</Desc>
    <FName>SolrQuery::setTermsMinCount</FName>
    <Desc>public SolrQuery SolrQuery::setTermsMinCount ( int $frequency )
Sets the minimum doc frequency to return in order to be included
</Desc>
    <FName>SolrQuery::setTermsPrefix</FName>
    <Desc>public SolrQuery SolrQuery::setTermsPrefix ( string $prefix )
Restrict matches to terms that start with the prefix
</Desc>
    <FName>SolrQuery::setTermsReturnRaw</FName>
    <Desc>public SolrQuery SolrQuery::setTermsReturnRaw ( bool $flag )
If true, return the raw characters of the indexed term, regardless of if it is human readable
</Desc>
    <FName>SolrQuery::setTermsSort</FName>
    <Desc>public SolrQuery SolrQuery::setTermsSort ( int $sortType )
If SolrQuery::TERMS_SORT_COUNT, sorts the terms by the term frequency (highest count first). If SolrQuery::TERMS_SORT_INDEX, returns the terms in index order
</Desc>
    <FName>SolrQuery::setTermsUpperBound</FName>
    <Desc>public SolrQuery SolrQuery::setTermsUpperBound ( string $upperBound )
Sets the term to stop at
</Desc>
    <FName>SolrQuery::setTimeAllowed</FName>
    <Desc>public SolrQuery SolrQuery::setTimeAllowed ( int $timeAllowed )
The time allowed for a search to finish. This value only applies to the search and not to requests in general. Time is in milliseconds. Values less than or equal to zero implies no time restriction. Partial results may be returned, if there are any.
</Desc>
    <FName>SolrQueryResponse::__construct</FName>
    <Desc>public SolrQueryResponse::__construct ( void )
Constructor
</Desc>
    <FName>SolrQueryResponse::__destruct</FName>
    <Desc>public void SolrQueryResponse::__destruct ( void )
Destructor.
</Desc>
    <FName>SolrResponse::getDigestedResponse</FName>
    <Desc>public string SolrResponse::getDigestedResponse ( void )
Returns the XML response as serialized PHP data
</Desc>
    <FName>SolrResponse::getHttpStatus</FName>
    <Desc>public int SolrResponse::getHttpStatus ( void )
Returns the HTTP status of the response.
</Desc>
    <FName>SolrResponse::getHttpStatusMessage</FName>
    <Desc>public string SolrResponse::getHttpStatusMessage ( void )
Returns more details on the HTTP status.
</Desc>
    <FName>SolrResponse::getRawRequest</FName>
    <Desc>public string SolrResponse::getRawRequest ( void )
Returns the raw request sent to the Solr server.
</Desc>
    <FName>SolrResponse::getRawRequestHeaders</FName>
    <Desc>public string SolrResponse::getRawRequestHeaders ( void )
Returns the raw request headers sent to the Solr server.
</Desc>
    <FName>SolrResponse::getRawResponse</FName>
    <Desc>public string SolrResponse::getRawResponse ( void )
Returns the raw response from the server.
</Desc>
    <FName>SolrResponse::getRawResponseHeaders</FName>
    <Desc>public string SolrResponse::getRawResponseHeaders ( void )
Returns the raw response headers from the server.
</Desc>
    <FName>SolrResponse::getRequestUrl</FName>
    <Desc>public string SolrResponse::getRequestUrl ( void )
Returns the full URL the request was sent to.
</Desc>
    <FName>SolrResponse::getResponse</FName>
    <Desc>public SolrObject SolrResponse::getResponse ( void )
Returns a SolrObject representing the XML response from the server.
</Desc>
    <FName>SolrResponse::setParseMode</FName>
    <Desc>public bool SolrResponse::setParseMode ([ int $parser_mode = 0 ] )
Sets the parse mode.
</Desc>
    <FName>SolrResponse::success</FName>
    <Desc>public bool SolrResponse::success ( void )
Used to check if the request to the server was successful.
</Desc>
    <FName>SolrServerException::getInternalInfo</FName>
    <Desc>public array SolrServerException::getInternalInfo ( void )
Returns internal information where the Exception was thrown.
</Desc>
    <FName>SolrUpdateResponse::__construct</FName>
    <Desc>public SolrUpdateResponse::__construct ( void )
Constructor
</Desc>
    <FName>SolrUpdateResponse::__destruct</FName>
    <Desc>public void SolrUpdateResponse::__destruct ( void )
Destructor
</Desc>
    <FName>SolrUtils::digestXmlResponse</FName>
    <Desc>public static SolrObject SolrUtils::digestXmlResponse ( string $xmlresponse [, int $parse_mode = 0 ] )
This method parses an response XML string from the Apache Solr server into a SolrObject. It throws a SolrException if there was an error.
</Desc>
    <FName>SolrUtils::escapeQueryChars</FName>
    <Desc>public static string SolrUtils::escapeQueryChars ( string $str )
Lucene supports escaping special characters that are part of the query syntax. 
The current list special characters are:
+ - && || ! ( ) { } [ ] ^ " ~ * ? : \ /These characters are part of the query syntax and must be escaped
</Desc>
    <FName>SolrUtils::getSolrVersion</FName>
    <Desc>public static string SolrUtils::getSolrVersion ( void )
Returns the current Solr version.
</Desc>
    <FName>SolrUtils::queryPhrase</FName>
    <Desc>public static string SolrUtils::queryPhrase ( string $str )
Prepares a phrase from an unescaped lucene string.
</Desc>
    <FName>SphinxClient::addQuery</FName>
    <Desc>public int SphinxClient::addQuery ( string $query [, string $index = "*" [, string $comment = "" ]] )
Adds query with the current settings to multi-query batch. This method doesn't affect current settings (sorting, filtering, grouping etc.) in any way.
</Desc>
    <FName>SphinxClient::buildExcerpts</FName>
    <Desc>public array SphinxClient::buildExcerpts ( array $docs , string $index , string $words [, array $opts ] )
Connects to searchd, requests it to generate excerpts (snippets) from the given documents, and returns the results.
</Desc>
    <FName>SphinxClient::buildKeywords</FName>
    <Desc>public array SphinxClient::buildKeywords ( string $query , string $index , bool $hits )
Extracts keywords from query using tokenizer settings for the given index, optionally with per-keyword occurrence statistics.
</Desc>
    <FName>SphinxClient::close</FName>
    <Desc>public bool SphinxClient::close ( void )
Closes previously opened persistent connection.
</Desc>
    <FName>SphinxClient::__construct</FName>
    <Desc>public SphinxClient::__construct ( void )
Creates a new SphinxClient object.
</Desc>
    <FName>SphinxClient::escapeString</FName>
    <Desc>public string SphinxClient::escapeString ( string $string )
Escapes characters that are treated as special operators by the query language parser.
</Desc>
    <FName>SphinxClient::getLastError</FName>
    <Desc>public string SphinxClient::getLastError ( void )
Returns string with the last error message. If there were no errors during the previous API call, empty string is returned. This method doesn't reset the error message, so you can safely call it several times.
</Desc>
    <FName>SphinxClient::getLastWarning</FName>
    <Desc>public string SphinxClient::getLastWarning ( void )
Returns last warning message. If there were no warnings during the previous API call, empty string is returned. This method doesn't reset the warning, so you can safely call it several times.
</Desc>
    <FName>SphinxClient::open</FName>
    <Desc>public bool SphinxClient::open ( void )
Opens persistent connection to the server.
</Desc>
    <FName>SphinxClient::query</FName>
    <Desc>public array SphinxClient::query ( string $query [, string $index = "*" [, string $comment = "" ]] )
Connects to searchd server, runs the given search query with the current settings, obtains and returns the result set.
</Desc>
    <FName>SphinxClient::resetFilters</FName>
    <Desc>public void SphinxClient::resetFilters ( void )
Clears all currently set filters. This call is normally required when using multi-queries. You might want to set different filters for different queries in the batch. To do that, you should call SphinxClient::resetFilters() and add new filters using the respective calls.
</Desc>
    <FName>SphinxClient::resetGroupBy</FName>
    <Desc>public void SphinxClient::resetGroupBy ( void )
Clears all currently group-by settings, and disables group-by. This call is normally required only when using multi-queries.
</Desc>
    <FName>SphinxClient::runQueries</FName>
    <Desc>public array SphinxClient::runQueries ( void )
Connects to searchd, runs a batch of all queries added using SphinxClient::addQuery, obtains and returns the result sets.
</Desc>
    <FName>SphinxClient::setArrayResult</FName>
    <Desc>public bool SphinxClient::setArrayResult ( bool $array_result = FALSE )
Controls the format of search results set arrays (whether matches should be returned as an array or a hash).
</Desc>
    <FName>SphinxClient::setConnectTimeout</FName>
    <Desc>public bool SphinxClient::setConnectTimeout ( float $timeout )
Sets connection timeout (in seconds) for searchd connection.
</Desc>
    <FName>SphinxClient::setFieldWeights</FName>
    <Desc>public bool SphinxClient::setFieldWeights ( array $weights )
Binds per-field weights by name. 
Match ranking can be affected by per-field weights. See » Sphinx documentation for an explanation on how phrase proximity ranking is affected. This call lets you specify non-default weights for full-text fields. 
The weights must be positive 32-bit integers, so be careful not to hit 32-bit integer maximum. The final weight is a 32-bit integer too. Default weight value is 1. Unknown field names are silently ignored.
</Desc>
    <FName>SphinxClient::setFilter</FName>
    <Desc>public bool SphinxClient::setFilter ( string $attribute , array $values [, bool $exclude = FALSE ] )
Adds new integer values set filter to the existing list of filters.
</Desc>
    <FName>SphinxClient::setFilterFloatRange</FName>
    <Desc>public bool SphinxClient::setFilterFloatRange ( string $attribute , float $min , float $max [, bool $exclude = FALSE ] )
Adds new float range filter to the existing list of filters. Only those documents which have attribute value stored in the index between min and max (including values that are exactly equal to min or max) will be matched (or rejected, if exclude is TRUE).
</Desc>
    <FName>SphinxClient::setFilterRange</FName>
    <Desc>public bool SphinxClient::setFilterRange ( string $attribute , int $min , int $max [, bool $exclude = FALSE ] )
Adds new integer range filter to the existing list of filters. Only those documents which have attribute value stored in the index between min and max (including values that are exactly equal to min or max) will be matched (or rejected, if exclude is TRUE).
</Desc>
    <FName>SphinxClient::setGeoAnchor</FName>
    <Desc>public bool SphinxClient::setGeoAnchor ( string $attrlat , string $attrlong , float $latitude , float $longitude )
Sets anchor point for a geosphere distance (geodistance) calculations and enables them. 
Once an anchor point is set, you can use magic "@geodist" attribute name in your filters and/or sorting expressions.
</Desc>
    <FName>SphinxClient::setGroupBy</FName>
    <Desc>public bool SphinxClient::setGroupBy ( string $attribute , int $func [, string $groupsort = "@group desc" ] )
Sets grouping attribute, function, and group sorting mode, and enables grouping. 
Grouping feature is very similar to GROUP BY clause in SQL. Results produced by this function call are going to be the same as produced by the following pseudo code: SELECT ... GROUP BY $func($attribute) ORDER BY $groupsort.
</Desc>
    <FName>SphinxClient::setGroupDistinct</FName>
    <Desc>public bool SphinxClient::setGroupDistinct ( string $attribute )
Sets attribute name for per-group distinct values count calculations. Only available for grouping queries. For each group, all values of attribute will be stored, then the amount of distinct values will be calculated and returned to the client. This feature is similar to COUNT(DISTINCT) clause in SQL.
</Desc>
    <FName>SphinxClient::setIDRange</FName>
    <Desc>public bool SphinxClient::setIDRange ( int $min , int $max )
Sets an accepted range of document IDs. Default range is from 0 to 0, i.e. no limit. Only those records that have document ID between min and max (including IDs exactly equal to min or max) will be matched.
</Desc>
    <FName>SphinxClient::setIndexWeights</FName>
    <Desc>public bool SphinxClient::setIndexWeights ( array $weights )
Sets per-index weights and enables weighted summing of match weights across different indexes.
</Desc>
    <FName>SphinxClient::setLimits</FName>
    <Desc>public bool SphinxClient::setLimits ( int $offset , int $limit [, int $max_matches = 0 [, int $cutoff = 0 ]] )
Sets offset into server-side result set and amount of matches to return to client starting from that offset (limit). Can additionally control maximum server-side result set size for current query (max_matches) and the threshold amount of matches to stop searching at (cutoff).
</Desc>
    <FName>SphinxClient::setMatchMode</FName>
    <Desc>public bool SphinxClient::setMatchMode ( int $mode )
Sets full-text query matching mode. mode is one of the constants listed below. Match modesConstantDescription
SPH_MATCH_ALLMatch all query words (default mode).
SPH_MATCH_ANYMatch any of query words.
SPH_MATCH_PHRASEMatch query as a phrase, requiring perfect match.
SPH_MATCH_BOOLEANMatch query as a boolean expression.
SPH_MATCH_EXTENDEDMatch query as an expression in Sphinx internal query language.
SPH_MATCH_FULLSCANEnables fullscan.
SPH_MATCH_EXTENDED2The same as SPH_MATCH_EXTENDED plus ranking and quorum searching support.
</Desc>
    <FName>SphinxClient::setMaxQueryTime</FName>
    <Desc>public bool SphinxClient::setMaxQueryTime ( int $qtime )
Sets maximum search query time.
</Desc>
    <FName>SphinxClient::setOverride</FName>
    <Desc>public bool SphinxClient::setOverride ( string $attribute , int $type , array $values )
Sets temporary (per-query) per-document attribute value overrides. Override feature lets you "temporary" update attribute values for some documents within a single query, leaving all other queries unaffected. This might be useful for personalized data
</Desc>
    <FName>SphinxClient::setRankingMode</FName>
    <Desc>public bool SphinxClient::setRankingMode ( int $ranker )
Sets ranking mode. Only available in SPH_MATCH_EXTENDED2 matching mode. Ranking modesConstantDescription
SPH_RANK_PROXIMITY_BM25Default ranking mode which uses both proximity and BM25 ranking.
SPH_RANK_BM25Statistical ranking mode which uses BM25 ranking only (similar to most of other full-text engines). This mode is faster, but may result in worse quality on queries which contain more than 1 keyword.
SPH_RANK_NONEDisables ranking. This mode is the fastest. It is essentially equivalent to boolean searching, a weight of 1 is assigned to all matches.
</Desc>
    <FName>SphinxClient::setRetries</FName>
    <Desc>public bool SphinxClient::setRetries ( int $count [, int $delay = 0 ] )
Sets distributed retry count and delay. 
On temporary failures searchd will attempt up to count retries per agent. delay is the delay between the retries, in milliseconds. Retries are disabled by default. Note that this call will not make the API itself retry on temporary failure; it only tells searchd to do so.
</Desc>
    <FName>SphinxClient::setSelect</FName>
    <Desc>public bool SphinxClient::setSelect ( string $clause )
Sets the select clause, listing specific attributes to fetch, and expressions to compute and fetch.
</Desc>
    <FName>SphinxClient::setServer</FName>
    <Desc>public bool SphinxClient::setServer ( string $server , int $port )
Sets searchd host name and TCP port. All subsequent requests will use the new host and port settings. Default host and port are 'localhost' and 3312, respectively.
</Desc>
    <FName>SphinxClient::setSortMode</FName>
    <Desc>public bool SphinxClient::setSortMode ( int $mode [, string $sortby ] )
Sets matches sorting mode. See available modes below. Sorting modesConstantDescription
SPH_SORT_RELEVANCESort by relevance in descending order (best matches first).
SPH_SORT_ATTR_DESCSort by an attribute in descending order (bigger attribute values first).
SPH_SORT_ATTR_ASCSort by an attribute in ascending order (smaller attribute values first).
SPH_SORT_TIME_SEGMENTSSort by time segments (last hour/day/week/month) in descending order, and then by relevance in descending order.
SPH_SORT_EXTENDEDSort by SQL-like combination of columns in ASC/DESC order.
SPH_SORT_EXPRSort by an arithmetic expression.
</Desc>
    <FName>SphinxClient::status</FName>
    <Desc>public array SphinxClient::status ( void )
Queries searchd status, and returns an array of status variable name and value pairs.
</Desc>
    <FName>SphinxClient::updateAttributes</FName>
    <Desc>public int SphinxClient::updateAttributes ( string $index , array $attributes , array $values [, bool $mva = FALSE ] )
Instantly updates given attribute values in given documents.
</Desc>
    <FName>SplDoublyLinkedList::add</FName>
    <Desc>public void SplDoublyLinkedList::add ( mixed $index , mixed $newval )
Insert the value newval at the specified index, shuffling the previous value at that index (and all subsequent values) up through the list.
</Desc>
    <FName>SplDoublyLinkedList::bottom</FName>
    <Desc>public mixed SplDoublyLinkedList::bottom ( void )
</Desc>
    <FName>SplDoublyLinkedList::__construct</FName>
    <Desc>public SplDoublyLinkedList::__construct ( void )
This constructs a new empty doubly linked list.
</Desc>
    <FName>SplDoublyLinkedList::count</FName>
    <Desc>public int SplDoublyLinkedList::count ( void )
</Desc>
    <FName>SplDoublyLinkedList::current</FName>
    <Desc>public mixed SplDoublyLinkedList::current ( void )
Get the current doubly linked list node.
</Desc>
    <FName>SplDoublyLinkedList::getIteratorMode</FName>
    <Desc>public int SplDoublyLinkedList::getIteratorMode ( void )
</Desc>
    <FName>SplDoublyLinkedList::isEmpty</FName>
    <Desc>public bool SplDoublyLinkedList::isEmpty ( void )
</Desc>
    <FName>SplDoublyLinkedList::key</FName>
    <Desc>public mixed SplDoublyLinkedList::key ( void )
This function returns the current node index
</Desc>
    <FName>SplDoublyLinkedList::next</FName>
    <Desc>public void SplDoublyLinkedList::next ( void )
Move the iterator to the next node.
</Desc>
    <FName>SplDoublyLinkedList::offsetExists</FName>
    <Desc>public bool SplDoublyLinkedList::offsetExists ( mixed $index )
</Desc>
    <FName>SplDoublyLinkedList::offsetGet</FName>
    <Desc>public mixed SplDoublyLinkedList::offsetGet ( mixed $index )
</Desc>
    <FName>SplDoublyLinkedList::offsetSet</FName>
    <Desc>public void SplDoublyLinkedList::offsetSet ( mixed $index , mixed $newval )
Sets the value at the specified index to newval.
</Desc>
    <FName>SplDoublyLinkedList::offsetUnset</FName>
    <Desc>public void SplDoublyLinkedList::offsetUnset ( mixed $index )
Unsets the value at the specified index.
</Desc>
    <FName>SplDoublyLinkedList::pop</FName>
    <Desc>public mixed SplDoublyLinkedList::pop ( void )
</Desc>
    <FName>SplDoublyLinkedList::prev</FName>
    <Desc>public void SplDoublyLinkedList::prev ( void )
Move the iterator to the previous node.
</Desc>
    <FName>SplDoublyLinkedList::push</FName>
    <Desc>public void SplDoublyLinkedList::push ( mixed $value )
Pushes value at the end of the doubly linked list.
</Desc>
    <FName>SplDoublyLinkedList::rewind</FName>
    <Desc>public void SplDoublyLinkedList::rewind ( void )
This rewinds the iterator to the beginning.
</Desc>
    <FName>SplDoublyLinkedList::serialize</FName>
    <Desc>public string SplDoublyLinkedList::serialize ( void )
Serializes the storage. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SplDoublyLinkedList::setIteratorMode</FName>
    <Desc>public void SplDoublyLinkedList::setIteratorMode ( int $mode )
</Desc>
    <FName>SplDoublyLinkedList::shift</FName>
    <Desc>public mixed SplDoublyLinkedList::shift ( void )
</Desc>
    <FName>SplDoublyLinkedList::top</FName>
    <Desc>public mixed SplDoublyLinkedList::top ( void )
</Desc>
    <FName>SplDoublyLinkedList::unserialize</FName>
    <Desc>public void SplDoublyLinkedList::unserialize ( string $serialized )
Unserializes the storage, from SplDoublyLinkedList::serialize(). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SplDoublyLinkedList::unshift</FName>
    <Desc>public void SplDoublyLinkedList::unshift ( mixed $value )
Prepends value at the beginning of the doubly linked list.
</Desc>
    <FName>SplDoublyLinkedList::valid</FName>
    <Desc>public bool SplDoublyLinkedList::valid ( void )
Checks if the doubly linked list contains any more nodes.
</Desc>
    <FName>SplEnum::getConstList</FName>
    <Desc>public array SplEnum::getConstList ([ bool $include_default = FALSE ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SplFileInfo::__construct</FName>
    <Desc>public SplFileInfo::__construct ( string $file_name )
Creates a new SplFileInfo object for the file_name specified. The file does not need to exist, or be readable.
</Desc>
    <FName>SplFileInfo::getATime</FName>
    <Desc>public int SplFileInfo::getATime ( void )
Gets the last access time for the file.
</Desc>
    <FName>SplFileInfo::getBasename</FName>
    <Desc>public string SplFileInfo::getBasename ([ string $suffix ] )
This method returns the base name of the file, directory, or link without path info. 
Caution 
SplFileInfo::getBasename() is locale aware, so for it to see the correct basename with multibyte character paths, the matching locale must be set using the setlocale() function.
</Desc>
    <FName>SplFileInfo::getCTime</FName>
    <Desc>public int SplFileInfo::getCTime ( void )
Returns the inode change time for the file. The time returned is a Unix timestamp.
</Desc>
    <FName>SplFileInfo::getExtension</FName>
    <Desc>public string SplFileInfo::getExtension ( void )
Retrieves the file extension.
</Desc>
    <FName>SplFileInfo::getFileInfo</FName>
    <Desc>public SplFileInfo SplFileInfo::getFileInfo ([ string $class_name ] )
This method gets an SplFileInfo object for the referenced file.
</Desc>
    <FName>SplFileInfo::getFilename</FName>
    <Desc>public string SplFileInfo::getFilename ( void )
Gets the filename without any path information.
</Desc>
    <FName>SplFileInfo::getGroup</FName>
    <Desc>public int SplFileInfo::getGroup ( void )
Gets the file group. The group ID is returned in numerical format.
</Desc>
    <FName>SplFileInfo::getInode</FName>
    <Desc>public int SplFileInfo::getInode ( void )
Gets the inode number for the filesystem object.
</Desc>
    <FName>SplFileInfo::getLinkTarget</FName>
    <Desc>public string SplFileInfo::getLinkTarget ( void )
Gets the target of a filesystem link. 
Note: 
The target may not be the real path on the filesystem. Use SplFileInfo::getRealPath() to determine the true path on the filesystem.
</Desc>
    <FName>SplFileInfo::getMTime</FName>
    <Desc>public int SplFileInfo::getMTime ( void )
Returns the time when the contents of the file were changed. The time returned is a Unix timestamp.
</Desc>
    <FName>SplFileInfo::getOwner</FName>
    <Desc>public int SplFileInfo::getOwner ( void )
Gets the file owner. The owner ID is returned in numerical format.
</Desc>
    <FName>SplFileInfo::getPath</FName>
    <Desc>public string SplFileInfo::getPath ( void )
Returns the path to the file, omitting the filename and any trailing slash.
</Desc>
    <FName>SplFileInfo::getPathInfo</FName>
    <Desc>public SplFileInfo SplFileInfo::getPathInfo ([ string $class_name ] )
Gets an SplFileInfo object for the parent of the current file.
</Desc>
    <FName>SplFileInfo::getPathname</FName>
    <Desc>public string SplFileInfo::getPathname ( void )
Returns the path to the file.
</Desc>
    <FName>SplFileInfo::getPerms</FName>
    <Desc>public int SplFileInfo::getPerms ( void )
Gets the file permissions for the file.
</Desc>
    <FName>SplFileInfo::getRealPath</FName>
    <Desc>public string SplFileInfo::getRealPath ( void )
This method expands all symbolic links, resolves relative references and returns the real path to the file.
</Desc>
    <FName>SplFileInfo::getSize</FName>
    <Desc>public int SplFileInfo::getSize ( void )
Returns the filesize in bytes for the file referenced.
</Desc>
    <FName>SplFileInfo::getType</FName>
    <Desc>public string SplFileInfo::getType ( void )
Returns the type of the file referenced.
</Desc>
    <FName>SplFileInfo::isDir</FName>
    <Desc>public bool SplFileInfo::isDir ( void )
This method can be used to determine if the file is a directory.
</Desc>
    <FName>SplFileInfo::isExecutable</FName>
    <Desc>public bool SplFileInfo::isExecutable ( void )
Checks if the file is executable.
</Desc>
    <FName>SplFileInfo::isFile</FName>
    <Desc>public bool SplFileInfo::isFile ( void )
Checks if the file referenced by this SplFileInfo object exists and is a regular file.
</Desc>
    <FName>SplFileInfo::isLink</FName>
    <Desc>public bool SplFileInfo::isLink ( void )
Use this method to check if the file referenced by the SplFileInfo object is a link.
</Desc>
    <FName>SplFileInfo::isReadable</FName>
    <Desc>public bool SplFileInfo::isReadable ( void )
Check if the file is readable.
</Desc>
    <FName>SplFileInfo::isWritable</FName>
    <Desc>public bool SplFileInfo::isWritable ( void )
Checks if the current entry is writable.
</Desc>
    <FName>SplFileInfo::openFile</FName>
    <Desc>public SplFileObject SplFileInfo::openFile ([ string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context = NULL ]]] )
Creates an SplFileObject object of the file. This is useful because SplFileObject contains additional methods for manipulating the file whereas SplFileInfo is only useful for gaining information, like whether the file is writable.
</Desc>
    <FName>SplFileInfo::setFileClass</FName>
    <Desc>public void SplFileInfo::setFileClass ([ string $class_name = "SplFileObject" ] )
Use this method to set a custom class which will be used when SplFileInfo::openFile() is called. The class name passed to this method must be SplFileObject or a class derived from SplFileObject.
</Desc>
    <FName>SplFileInfo::setInfoClass</FName>
    <Desc>public void SplFileInfo::setInfoClass ([ string $class_name = "SplFileInfo" ] )
Use this method to set a custom class which will be used when SplFileInfo::getFileInfo() and SplFileInfo::getPathInfo() are called. The class name passed to this method must be SplFileInfo or a class derived from SplFileInfo.
</Desc>
    <FName>SplFileInfo::__toString</FName>
    <Desc>public void SplFileInfo::__toString ( void )
This method will return the file name of the referenced file.
</Desc>
    <FName>SplFileObject::__construct</FName>
    <Desc>public SplFileObject::__construct ( string $filename [, string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context ]]] )
Construct a new file object.
</Desc>
    <FName>SplFileObject::current</FName>
    <Desc>public string|array SplFileObject::current ( void )
Retrieves the current line of the file.
</Desc>
    <FName>SplFileObject::eof</FName>
    <Desc>public bool SplFileObject::eof ( void )
Determine whether the end of file has been reached
</Desc>
    <FName>SplFileObject::fflush</FName>
    <Desc>public bool SplFileObject::fflush ( void )
Forces a write of all buffered output to the file.
</Desc>
    <FName>SplFileObject::fgetc</FName>
    <Desc>public string SplFileObject::fgetc ( void )
Gets a character from the file.
</Desc>
    <FName>SplFileObject::fgetcsv</FName>
    <Desc>public array SplFileObject::fgetcsv ([ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\" ]]] )
Gets a line from the file which is in CSV format and returns an array containing the fields read. 
Note: 
The locale settings are taken into account by this function. If LC_CTYPE is e.g. en_US.UTF-8, files in one-byte encodings may be read wrongly by this function.
</Desc>
    <FName>SplFileObject::fgets</FName>
    <Desc>public string SplFileObject::fgets ( void )
Gets a line from the file.
</Desc>
    <FName>SplFileObject::fgetss</FName>
    <Desc>public string SplFileObject::fgetss ([ string $allowable_tags ] )
Identical to SplFileObject::fgets(), except that SplFileObject::fgetss() attempts to strip any HTML and PHP tags from the text it reads.
</Desc>
    <FName>SplFileObject::flock</FName>
    <Desc>public bool SplFileObject::flock ( int $operation [, int &$wouldblock ] )
Locks or unlocks the file in the same portable way as flock().
</Desc>
    <FName>SplFileObject::fpassthru</FName>
    <Desc>public int SplFileObject::fpassthru ( void )
Reads to EOF on the given file pointer from the current position and writes the results to the output buffer. 
You may need to call SplFileObject::rewind() to reset the file pointer to the beginning of the file if you have already written data to the file.
</Desc>
    <FName>SplFileObject::fputcsv</FName>
    <Desc>public int SplFileObject::fputcsv ( array $fields [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\" ]]] )
Writes the fields array to the file as a CSV line.
</Desc>
    <FName>SplFileObject::fread</FName>
    <Desc>public string SplFileObject::fread ( int $length )
Reads the given number of bytes from the file.
</Desc>
    <FName>SplFileObject::fscanf</FName>
    <Desc>public mixed SplFileObject::fscanf ( string $format [, mixed &$... ] )
Reads a line from the file and interprets it according to the specified format, which is described in the documentation for sprintf(). 
Any whitespace in the format string matches any whitespace in the line from the file. This means that even a tab \t in the format string can match a single space character in the input stream.
</Desc>
    <FName>SplFileObject::fseek</FName>
    <Desc>public int SplFileObject::fseek ( int $offset [, int $whence = SEEK_SET ] )
Seek to a position in the file measured in bytes from the beginning of the file, obtained by adding offset to the position specified by whence.
</Desc>
    <FName>SplFileObject::fstat</FName>
    <Desc>public array SplFileObject::fstat ( void )
Gathers the statistics of the file. Behaves identically to fstat().
</Desc>
    <FName>SplFileObject::ftell</FName>
    <Desc>public int SplFileObject::ftell ( void )
Returns the position of the file pointer which represents the current offset in the file stream.
</Desc>
    <FName>SplFileObject::ftruncate</FName>
    <Desc>public bool SplFileObject::ftruncate ( int $size )
Truncates the file to size bytes.
</Desc>
    <FName>SplFileObject::fwrite</FName>
    <Desc>public int SplFileObject::fwrite ( string $str [, int $length ] )
Writes the contents of string to the file
</Desc>
    <FName>SplFileObject::getChildren</FName>
    <Desc>public void SplFileObject::getChildren ( void )
An SplFileObject does not have children so this method returns NULL.
</Desc>
    <FName>SplFileObject::getCsvControl</FName>
    <Desc>public array SplFileObject::getCsvControl ( void )
Gets the delimiter, enclosure and escape character used for parsing CSV fields.
</Desc>
    <FName>SplFileObject::getCurrentLine</FName>
    <Desc>This method is an alias of SplFileObject::fgets(). 
</Desc>
    <FName>SplFileObject::getFlags</FName>
    <Desc>public int SplFileObject::getFlags ( void )
Gets the flags set for an instance of SplFileObject as an integer.
</Desc>
    <FName>SplFileObject::getMaxLineLen</FName>
    <Desc>public int SplFileObject::getMaxLineLen ( void )
Gets the maximum line length as set by SplFileObject::setMaxLineLen().
</Desc>
    <FName>SplFileObject::hasChildren</FName>
    <Desc>public bool SplFileObject::hasChildren ( void )
An SplFileObject does not have children so this method always return FALSE.
</Desc>
    <FName>SplFileObject::key</FName>
    <Desc>public int SplFileObject::key ( void )
Gets the current line number. 
Note: 
This number may not reflect the actual line number in the file if SplFileObject::setMaxLineLen() is used to read fixed lengths of the file.
</Desc>
    <FName>SplFileObject::next</FName>
    <Desc>public void SplFileObject::next ( void )
Moves ahead to the next line in the file.
</Desc>
    <FName>SplFileObject::rewind</FName>
    <Desc>public void SplFileObject::rewind ( void )
Rewinds the file back to the first line.
</Desc>
    <FName>SplFileObject::seek</FName>
    <Desc>public void SplFileObject::seek ( int $line_pos )
Seek to specified line in the file.
</Desc>
    <FName>SplFileObject::setCsvControl</FName>
    <Desc>public void SplFileObject::setCsvControl ([ string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\" ]]] )
Sets the delimiter, enclosure and escape character for parsing CSV fields.
</Desc>
    <FName>SplFileObject::setFlags</FName>
    <Desc>public void SplFileObject::setFlags ( int $flags )
Sets the flags to be used by the SplFileObject.
</Desc>
    <FName>SplFileObject::setMaxLineLen</FName>
    <Desc>public void SplFileObject::setMaxLineLen ( int $max_len )
Sets the maximum length of a line to be read.
</Desc>
    <FName>SplFileObject::__toString</FName>
    <Desc>public void SplFileObject::__toString ( void )
This method is an alias of SplFileObject::current(). 
</Desc>
    <FName>SplFileObject::valid</FName>
    <Desc>public bool SplFileObject::valid ( void )
Check whether EOF has been reached.
</Desc>
    <FName>SplFixedArray::__construct</FName>
    <Desc>public SplFixedArray::__construct ([ int $size = 0 ] )
Initializes a fixed array with a number of NULL values equal to size.
</Desc>
    <FName>SplFixedArray::count</FName>
    <Desc>public int SplFixedArray::count ( void )
Returns the size of the array.
</Desc>
    <FName>SplFixedArray::current</FName>
    <Desc>public mixed SplFixedArray::current ( void )
Get the current array element.
</Desc>
    <FName>SplFixedArray::fromArray</FName>
    <Desc>public static SplFixedArray SplFixedArray::fromArray ( array $array [, bool $save_indexes = TRUE ] )
Import the PHP array array in a new SplFixedArray instance
</Desc>
    <FName>SplFixedArray::getSize</FName>
    <Desc>public int SplFixedArray::getSize ( void )
Gets the size of the array.
</Desc>
    <FName>SplFixedArray::key</FName>
    <Desc>public int SplFixedArray::key ( void )
Returns the current array index.
</Desc>
    <FName>SplFixedArray::next</FName>
    <Desc>public void SplFixedArray::next ( void )
Move the iterator to the next array entry.
</Desc>
    <FName>SplFixedArray::offsetExists</FName>
    <Desc>public bool SplFixedArray::offsetExists ( int $index )
Checks whether the requested index index exists.
</Desc>
    <FName>SplFixedArray::offsetGet</FName>
    <Desc>public mixed SplFixedArray::offsetGet ( int $index )
Returns the value at the index index.
</Desc>
    <FName>SplFixedArray::offsetSet</FName>
    <Desc>public void SplFixedArray::offsetSet ( int $index , mixed $newval )
Sets the value at the specified index to newval.
</Desc>
    <FName>SplFixedArray::offsetUnset</FName>
    <Desc>public void SplFixedArray::offsetUnset ( int $index )
Unsets the value at the specified index.
</Desc>
    <FName>SplFixedArray::rewind</FName>
    <Desc>public void SplFixedArray::rewind ( void )
Rewinds the iterator to the beginning.
</Desc>
    <FName>SplFixedArray::setSize</FName>
    <Desc>public bool SplFixedArray::setSize ( int $size )
Change the size of an array to the new size of size. If size is less than the current array size, any values after the new size will be discarded. If size is greater than the current array size, the array will be padded with NULL values.
</Desc>
    <FName>SplFixedArray::toArray</FName>
    <Desc>public array SplFixedArray::toArray ( void )
Returns a PHP array from the fixed array.
</Desc>
    <FName>SplFixedArray::valid</FName>
    <Desc>public bool SplFixedArray::valid ( void )
Checks if the array contains any more elements.
</Desc>
    <FName>SplFixedArray::__wakeup</FName>
    <Desc>public void SplFixedArray::__wakeup ( void )
Reinitialises the array after being unserialised.
</Desc>
    <FName>SplHeap::compare</FName>
    <Desc>abstract protected int SplHeap::compare ( mixed $value1 , mixed $value2 )
Compare value1 with value2. 
Warning 
Throwing exceptions in SplHeap::compare() can corrupt the Heap and place it in a blocked state. You can unblock it by calling SplHeap::recoverFromCorruption(). However, some elements might not be placed correctly and it may hence break the heap-property.
</Desc>
    <FName>SplHeap::__construct</FName>
    <Desc>public SplHeap::__construct ( void )
This constructs a new empty heap.
</Desc>
    <FName>SplHeap::count</FName>
    <Desc>public int SplHeap::count ( void )
</Desc>
    <FName>SplHeap::current</FName>
    <Desc>public mixed SplHeap::current ( void )
Get the current datastructure node.
</Desc>
    <FName>SplHeap::extract</FName>
    <Desc>public mixed SplHeap::extract ( void )
</Desc>
    <FName>SplHeap::insert</FName>
    <Desc>public void SplHeap::insert ( mixed $value )
Insert value in the heap.
</Desc>
    <FName>SplHeap::isCorrupted</FName>
    <Desc>public bool SplHeap::isCorrupted ( void )
</Desc>
    <FName>SplHeap::isEmpty</FName>
    <Desc>public bool SplHeap::isEmpty ( void )
</Desc>
    <FName>SplHeap::key</FName>
    <Desc>public mixed SplHeap::key ( void )
This function returns the current node index
</Desc>
    <FName>SplHeap::next</FName>
    <Desc>public void SplHeap::next ( void )
Move to the next node. This will delete the top node of the heap.
</Desc>
    <FName>SplHeap::recoverFromCorruption</FName>
    <Desc>public void SplHeap::recoverFromCorruption ( void )
</Desc>
    <FName>SplHeap::rewind</FName>
    <Desc>public void SplHeap::rewind ( void )
This rewinds the iterator to the beginning. This is a no-op for heaps as the iterator is virtual and in fact never moves from the top of the heap.
</Desc>
    <FName>SplHeap::top</FName>
    <Desc>public mixed SplHeap::top ( void )
</Desc>
    <FName>SplHeap::valid</FName>
    <Desc>public bool SplHeap::valid ( void )
Checks if the heap contains any more nodes.
</Desc>
    <FName>SplMaxHeap::compare</FName>
    <Desc>protected int SplMaxHeap::compare ( mixed $value1 , mixed $value2 )
Compare value1 with value2.
</Desc>
    <FName>SplMinHeap::compare</FName>
    <Desc>protected int SplMinHeap::compare ( mixed $value1 , mixed $value2 )
Compare value1 with value2.
</Desc>
    <FName>SplObjectStorage::addAll</FName>
    <Desc>public void SplObjectStorage::addAll ( SplObjectStorage $storage )
Adds all objects-data pairs from a different storage in the current storage.
</Desc>
    <FName>SplObjectStorage::attach</FName>
    <Desc>public void SplObjectStorage::attach ( object $object [, mixed $data = NULL ] )
Adds an object inside the storage, and optionally associate it to some data.
</Desc>
    <FName>SplObjectStorage::contains</FName>
    <Desc>public bool SplObjectStorage::contains ( object $object )
Checks if the storage contains the object provided.
</Desc>
    <FName>SplObjectStorage::count</FName>
    <Desc>public int SplObjectStorage::count ( void )
Counts the number of objects in the storage.
</Desc>
    <FName>SplObjectStorage::current</FName>
    <Desc>public object SplObjectStorage::current ( void )
Returns the current storage entry.
</Desc>
    <FName>SplObjectStorage::detach</FName>
    <Desc>public void SplObjectStorage::detach ( object $object )
Removes the object from the storage.
</Desc>
    <FName>SplObjectStorage::getHash</FName>
    <Desc>public string SplObjectStorage::getHash ( object $object )
This method calculates an identifier for the objects added to an SplObjectStorage object. 
The implementation in SplObjectStorage returns the same value as spl_object_hash(). 
The storage object will never contain more than one object with the same identifier. As such, it can be used to implement a set (a collection of unique values) where the quality of an object being unique is determined by the value returned by this function being unique.
</Desc>
    <FName>SplObjectStorage::getInfo</FName>
    <Desc>public mixed SplObjectStorage::getInfo ( void )
Returns the data, or info, associated with the object pointed by the current iterator position.
</Desc>
    <FName>SplObjectStorage::key</FName>
    <Desc>public int SplObjectStorage::key ( void )
Returns the index at which the iterator currently is.
</Desc>
    <FName>SplObjectStorage::next</FName>
    <Desc>public void SplObjectStorage::next ( void )
Moves the iterator to the next object in the storage.
</Desc>
    <FName>SplObjectStorage::offsetExists</FName>
    <Desc>public bool SplObjectStorage::offsetExists ( object $object )
Checks whether an object exists in the storage. 
Note: 
SplObjectStorage::offsetExists() is an alias of SplObjectStorage::contains().
</Desc>
    <FName>SplObjectStorage::offsetGet</FName>
    <Desc>public mixed SplObjectStorage::offsetGet ( object $object )
Returns the data associated with an object in the storage.
</Desc>
    <FName>SplObjectStorage::offsetSet</FName>
    <Desc>public void SplObjectStorage::offsetSet ( object $object [, mixed $data = NULL ] )
Associate data to an object in the storage. 
Note: 
SplObjectStorage::offsetSet() is an alias of SplObjectStorage::attach().
</Desc>
    <FName>SplObjectStorage::offsetUnset</FName>
    <Desc>public void SplObjectStorage::offsetUnset ( object $object )
Removes an object from the storage. 
Note: 
SplObjectStorage::offsetUnset() is an alias of SplObjectStorage::detach().
</Desc>
    <FName>SplObjectStorage::removeAll</FName>
    <Desc>public void SplObjectStorage::removeAll ( SplObjectStorage $storage )
Removes objects contained in another storage from the current storage.
</Desc>
    <FName>SplObjectStorage::removeAllExcept</FName>
    <Desc>public void SplObjectStorage::removeAllExcept ( SplObjectStorage $storage )
Removes all objects except for those contained in another storage from the current storage.
</Desc>
    <FName>SplObjectStorage::rewind</FName>
    <Desc>public void SplObjectStorage::rewind ( void )
Rewind the iterator to the first storage element.
</Desc>
    <FName>SplObjectStorage::serialize</FName>
    <Desc>public string SplObjectStorage::serialize ( void )
Returns a string representation of the storage.
</Desc>
    <FName>SplObjectStorage::setInfo</FName>
    <Desc>public void SplObjectStorage::setInfo ( mixed $data )
Associates data, or info, with the object currently pointed to by the iterator.
</Desc>
    <FName>SplObjectStorage::unserialize</FName>
    <Desc>public void SplObjectStorage::unserialize ( string $serialized )
Unserializes storage entries and attach them to the current storage.
</Desc>
    <FName>SplObjectStorage::valid</FName>
    <Desc>public bool SplObjectStorage::valid ( void )
Returns if the current iterator entry is valid.
</Desc>
    <FName>SplObserver::update</FName>
    <Desc>abstract public void SplObserver::update ( SplSubject $subject )
This method is called when any SplSubject to which the observer is attached calls SplSubject::notify(). 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SplPriorityQueue::compare</FName>
    <Desc>public int SplPriorityQueue::compare ( mixed $priority1 , mixed $priority2 )
Compare priority1 with priority2.
</Desc>
    <FName>SplPriorityQueue::__construct</FName>
    <Desc>public SplPriorityQueue::__construct ( void )
This constructs a new empty queue.
</Desc>
    <FName>SplPriorityQueue::count</FName>
    <Desc>public int SplPriorityQueue::count ( void )
</Desc>
    <FName>SplPriorityQueue::current</FName>
    <Desc>public mixed SplPriorityQueue::current ( void )
Get the current datastructure node.
</Desc>
    <FName>SplPriorityQueue::extract</FName>
    <Desc>public mixed SplPriorityQueue::extract ( void )
</Desc>
    <FName>SplPriorityQueue::getExtractFlags</FName>
    <Desc>public int SplPriorityQueue::getExtractFlags ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SplPriorityQueue::insert</FName>
    <Desc>public void SplPriorityQueue::insert ( mixed $value , mixed $priority )
Insert value with the priority priority in the queue.
</Desc>
    <FName>SplPriorityQueue::isCorrupted</FName>
    <Desc>public bool SplPriorityQueue::isCorrupted ( void )
</Desc>
    <FName>SplPriorityQueue::isEmpty</FName>
    <Desc>public bool SplPriorityQueue::isEmpty ( void )
</Desc>
    <FName>SplPriorityQueue::key</FName>
    <Desc>public mixed SplPriorityQueue::key ( void )
This function returns the current node index
</Desc>
    <FName>SplPriorityQueue::next</FName>
    <Desc>public void SplPriorityQueue::next ( void )
Extracts the top node from the queue.
</Desc>
    <FName>SplPriorityQueue::recoverFromCorruption</FName>
    <Desc>public void SplPriorityQueue::recoverFromCorruption ( void )
</Desc>
    <FName>SplPriorityQueue::rewind</FName>
    <Desc>public void SplPriorityQueue::rewind ( void )
This rewinds the iterator to the beginning. This is a no-op for heaps as the iterator is virtual and in fact never moves from the top of the heap.
</Desc>
    <FName>SplPriorityQueue::setExtractFlags</FName>
    <Desc>public void SplPriorityQueue::setExtractFlags ( int $flags )
</Desc>
    <FName>SplPriorityQueue::top</FName>
    <Desc>public mixed SplPriorityQueue::top ( void )
</Desc>
    <FName>SplPriorityQueue::valid</FName>
    <Desc>public bool SplPriorityQueue::valid ( void )
Checks if the queue contains any more nodes.
</Desc>
    <FName>SplQueue::__construct</FName>
    <Desc>SplQueue::__construct ( void )
This constructs a new empty queue. 
Note: 
This method automatically sets the iterator mode to SplDoublyLinkedList::IT_MODE_FIFO.
</Desc>
    <FName>SplQueue::dequeue</FName>
    <Desc>mixed SplQueue::dequeue ( void )
Dequeues value from the top of the queue. 
Note: 
SplQueue::dequeue() is an alias of SplDoublyLinkedList::shift().
</Desc>
    <FName>SplQueue::enqueue</FName>
    <Desc>void SplQueue::enqueue ( mixed $value )
Enqueues value at the end of the queue. 
Note: 
SplQueue::enqueue() is an alias of SplDoublyLinkedList::push().
</Desc>
    <FName>SplQueue::setIteratorMode</FName>
    <Desc>void SplQueue::setIteratorMode ( int $mode )
</Desc>
    <FName>SplStack::__construct</FName>
    <Desc>SplStack::__construct ( void )
This constructs a new empty stack. 
Note: 
This method automatically sets the iterator mode to SplDoublyLinkedList::IT_MODE_LIFO.
</Desc>
    <FName>SplStack::setIteratorMode</FName>
    <Desc>void SplStack::setIteratorMode ( int $mode )
</Desc>
    <FName>SplSubject::attach</FName>
    <Desc>abstract public void SplSubject::attach ( SplObserver $observer )
Attaches an SplObserver so that it can be notified of updates. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SplSubject::detach</FName>
    <Desc>abstract public void SplSubject::detach ( SplObserver $observer )
Detaches an observer from the subject to no longer notify it of updates. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SplSubject::notify</FName>
    <Desc>abstract public void SplSubject::notify ( void )
Notifies all attached observers. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SplTempFileObject::__construct</FName>
    <Desc>public SplTempFileObject::__construct ([ int $max_memory ] )
Construct a new temporary file object.
</Desc>
    <FName>SplType::__construct</FName>
    <Desc>SplType::__construct ([ mixed $initial_value [, bool $strict ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Spoofchecker::areConfusable</FName>
    <Desc>public bool Spoofchecker::areConfusable ( string $str1 , string $str2 [, string &$error ] )
Checks whether two given strings can easily be mistaken.
</Desc>
    <FName>Spoofchecker::__construct</FName>
    <Desc>public Spoofchecker::__construct ( void )
Creates new instance of Spoofchecker.
</Desc>
    <FName>Spoofchecker::isSuspicious</FName>
    <Desc>public bool Spoofchecker::isSuspicious ( string $text [, string &$error ] )
Checks if given string contains any suspicious characters like letters which are almost identical visually, but are Unicode characters from different sets.
</Desc>
    <FName>Spoofchecker::setAllowedLocales</FName>
    <Desc>public void Spoofchecker::setAllowedLocales ( string $locale_list )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Spoofchecker::setChecks</FName>
    <Desc>public void Spoofchecker::setChecks ( int $checks )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SQLite3::busyTimeout</FName>
    <Desc>public bool SQLite3::busyTimeout ( int $msecs )
Sets a busy handler that will sleep until the database is not locked or the timeout is reached.
</Desc>
    <FName>SQLite3::changes</FName>
    <Desc>public int SQLite3::changes ( void )
Returns the number of database rows that were changed (or inserted or deleted) by the most recent SQL statement.
</Desc>
    <FName>SQLite3::close</FName>
    <Desc>public bool SQLite3::close ( void )
Closes the database connection.
</Desc>
    <FName>SQLite3::__construct</FName>
    <Desc>public SQLite3::__construct ( string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = NULL ]] )
Instantiates an SQLite3 object and opens a connection to an SQLite 3 database. If the build includes encryption, then it will attempt to use the key.
</Desc>
    <FName>SQLite3::createAggregate</FName>
    <Desc>public bool SQLite3::createAggregate ( string $name , mixed $step_callback , mixed $final_callback [, int $argument_count = -1 ] )
Registers a PHP function or user-defined function for use as an SQL aggregate function for use within SQL statements.
</Desc>
    <FName>SQLite3::createCollation</FName>
    <Desc>public bool SQLite3::createCollation ( string $name , callable $callback )
Registers a PHP function or user-defined function for use as a collating function within SQL statements.
</Desc>
    <FName>SQLite3::createFunction</FName>
    <Desc>public bool SQLite3::createFunction ( string $name , mixed $callback [, int $argument_count = -1 [, int $flags = 0 ]] )
Registers a PHP function or user-defined function for use as an SQL scalar function for use within SQL statements.
</Desc>
    <FName>SQLite3::enableExceptions</FName>
    <Desc>bool SQLite3::enableExceptions ([ bool $enableExceptions = FALSE ] )
Controls whether the SQLite3 instance will throw exceptions or warnings on error.
</Desc>
    <FName>SQLite3::escapeString</FName>
    <Desc>public static string SQLite3::escapeString ( string $value )
Returns a string that has been properly escaped for safe inclusion in an SQL statement. 
Warning
This function is not (yet) binary safe!
To properly handle BLOB fields which may contain NUL characters, use SQLite3Stmt::bindParam() instead.
</Desc>
    <FName>SQLite3::exec</FName>
    <Desc>public bool SQLite3::exec ( string $query )
Executes a result-less query against a given database.
</Desc>
    <FName>SQLite3::lastErrorCode</FName>
    <Desc>public int SQLite3::lastErrorCode ( void )
Returns the numeric result code of the most recent failed SQLite request.
</Desc>
    <FName>SQLite3::lastErrorMsg</FName>
    <Desc>public string SQLite3::lastErrorMsg ( void )
Returns English text describing the most recent failed SQLite request.
</Desc>
    <FName>SQLite3::lastInsertRowID</FName>
    <Desc>public int SQLite3::lastInsertRowID ( void )
Returns the row ID of the most recent INSERT into the database.
</Desc>
    <FName>SQLite3::loadExtension</FName>
    <Desc>public bool SQLite3::loadExtension ( string $shared_library )
Attempts to load an SQLite extension library.
</Desc>
    <FName>SQLite3::open</FName>
    <Desc>public void SQLite3::open ( string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = NULL ]] )
Opens an SQLite 3 Database. If the build includes encryption, then it will attempt to use the key.
</Desc>
    <FName>SQLite3::openBlob</FName>
    <Desc>public resource SQLite3::openBlob ( string $table , string $column , int $rowid [, string $dbname = "main" [, int $flags = SQLITE3_OPEN_READONLY ]] )
Opens a stream resource to read or write a BLOB, which would be selected by: 
SELECT column FROM dbname.table WHERE rowid = rowid 
Note: It is not possible to change the size of a BLOB by writing to the stream. Instead, an UPDATE statement has to be executed, possibly using SQLite's zeroblob() function to set the desired BLOB size.
</Desc>
    <FName>SQLite3::prepare</FName>
    <Desc>public SQLite3Stmt SQLite3::prepare ( string $query )
Prepares an SQL statement for execution and returns an SQLite3Stmt object.
</Desc>
    <FName>SQLite3::query</FName>
    <Desc>public SQLite3Result SQLite3::query ( string $query )
Executes an SQL query, returning an SQLite3Result object. If the query does not yield a result (such as DML statements) the returned SQLite3Result object is not really usable. Use SQLite3::exec() for such queries instead.
</Desc>
    <FName>SQLite3::querySingle</FName>
    <Desc>public mixed SQLite3::querySingle ( string $query [, bool $entire_row = FALSE ] )
Executes a query and returns a single result.
</Desc>
    <FName>SQLite3::version</FName>
    <Desc>public static array SQLite3::version ( void )
Returns the SQLite3 library version as a string constant and as a number.
</Desc>
    <FName>SQLite3Result::columnName</FName>
    <Desc>public string SQLite3Result::columnName ( int $column_number )
Returns the name of the column specified by the column_number.
</Desc>
    <FName>SQLite3Result::columnType</FName>
    <Desc>public int SQLite3Result::columnType ( int $column_number )
Returns the type of the column identified by column_number.
</Desc>
    <FName>SQLite3Result::fetchArray</FName>
    <Desc>public array SQLite3Result::fetchArray ([ int $mode = SQLITE3_BOTH ] )
Fetches a result row as an associative or numerically indexed array or both. By default, fetches as both.
</Desc>
    <FName>SQLite3Result::finalize</FName>
    <Desc>public bool SQLite3Result::finalize ( void )
Closes the result set.
</Desc>
    <FName>SQLite3Result::numColumns</FName>
    <Desc>public int SQLite3Result::numColumns ( void )
Returns the number of columns in the result set.
</Desc>
    <FName>SQLite3Result::reset</FName>
    <Desc>public bool SQLite3Result::reset ( void )
Resets the result set back to the first row.
</Desc>
    <FName>SQLite3Stmt::bindParam</FName>
    <Desc>public bool SQLite3Stmt::bindParam ( mixed $sql_param , mixed &$param [, int $type ] )
Binds a parameter to a statement variable.
</Desc>
    <FName>SQLite3Stmt::bindValue</FName>
    <Desc>public bool SQLite3Stmt::bindValue ( mixed $sql_param , mixed $value [, int $type ] )
Binds the value of a parameter to a statement variable.
</Desc>
    <FName>SQLite3Stmt::clear</FName>
    <Desc>public bool SQLite3Stmt::clear ( void )
Clears all current bound parameters.
</Desc>
    <FName>SQLite3Stmt::close</FName>
    <Desc>public bool SQLite3Stmt::close ( void )
Closes the prepared statement. 
Note: Note that all SQLite3Results that have been retrieved by executing this statement will be invalidated when the statement is closed.
</Desc>
    <FName>SQLite3Stmt::execute</FName>
    <Desc>public SQLite3Result SQLite3Stmt::execute ( void )
Executes a prepared statement and returns a result set object. 
Caution 
Result set objects retrieved by calling this method on the same statement object are not independent, but rather share the same underlying structure. Therefore it is recommended to call SQLite3Result::finalize(), before calling SQLite3Stmt::execute() on the same statement object again.
</Desc>
    <FName>SQLite3Stmt::paramCount</FName>
    <Desc>public int SQLite3Stmt::paramCount ( void )
Returns the number of parameters within the prepared statement.
</Desc>
    <FName>SQLite3Stmt::readOnly</FName>
    <Desc>public bool SQLite3Stmt::readOnly ( void )
Returns whether a statement is definitely read only. A statement is considered read only, if it makes no direct changes to the content of the database file. Note that user defined SQL functions might change the database indirectly as a side effect.
</Desc>
    <FName>SQLite3Stmt::reset</FName>
    <Desc>public bool SQLite3Stmt::reset ( void )
Resets the prepared statement to its state prior to execution. All bindings remain intact after reset.
</Desc>
    <FName>Stomp::abort</FName>
    <Desc>Object oriented style (method):
public bool Stomp::abort ( string $transaction_id [, array $headers ] )
Procedural style:
bool stomp_abort ( resource $link , string $transaction_id [, array $headers ] )
Rolls back a transaction in progress.
</Desc>
    <FName>stomp_abort</FName>
    <Desc>Object oriented style (method):
public bool Stomp::abort ( string $transaction_id [, array $headers ] )
Procedural style:
bool stomp_abort ( resource $link , string $transaction_id [, array $headers ] )
Rolls back a transaction in progress.
</Desc>
    <FName>Stomp::ack</FName>
    <Desc>Object oriented style (method):
public bool Stomp::ack ( mixed $msg [, array $headers ] )
Procedural style:
bool stomp_ack ( resource $link , mixed $msg [, array $headers ] )
Acknowledges consumption of a message from a subscription using client acknowledgment.
</Desc>
    <FName>stomp_ack</FName>
    <Desc>Object oriented style (method):
public bool Stomp::ack ( mixed $msg [, array $headers ] )
Procedural style:
bool stomp_ack ( resource $link , mixed $msg [, array $headers ] )
Acknowledges consumption of a message from a subscription using client acknowledgment.
</Desc>
    <FName>Stomp::begin</FName>
    <Desc>Object oriented style (method):
public bool Stomp::begin ( string $transaction_id [, array $headers ] )
Procedural style:
bool stomp_begin ( resource $link , string $transaction_id [, array $headers ] )
Starts a transaction.
</Desc>
    <FName>stomp_begin</FName>
    <Desc>Object oriented style (method):
public bool Stomp::begin ( string $transaction_id [, array $headers ] )
Procedural style:
bool stomp_begin ( resource $link , string $transaction_id [, array $headers ] )
Starts a transaction.
</Desc>
    <FName>Stomp::commit</FName>
    <Desc>Object oriented style (method):
public bool Stomp::commit ( string $transaction_id [, array $headers ] )
Procedural style:
bool stomp_commit ( resource $link , string $transaction_id [, array $headers ] )
Commits a transaction in progress.
</Desc>
    <FName>stomp_commit</FName>
    <Desc>Object oriented style (method):
public bool Stomp::commit ( string $transaction_id [, array $headers ] )
Procedural style:
bool stomp_commit ( resource $link , string $transaction_id [, array $headers ] )
Commits a transaction in progress.
</Desc>
    <FName>Stomp::__construct</FName>
    <Desc>Object oriented style (constructor):
public Stomp::__construct ([ string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers ]]]] )
Procedural style:
resource stomp_connect ([ string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers ]]]] )
Opens a connection to a stomp compliant Message Broker.
</Desc>
    <FName>stomp_connect</FName>
    <Desc>Object oriented style (constructor):
public Stomp::__construct ([ string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers ]]]] )
Procedural style:
resource stomp_connect ([ string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers ]]]] )
Opens a connection to a stomp compliant Message Broker.
</Desc>
    <FName>Stomp::__destruct</FName>
    <Desc>Object oriented style (destructor):
public bool Stomp::__destruct ( void )
Procedural style:
bool stomp_close ( resource $link )
Closes a previously opened connection.
</Desc>
    <FName>stomp_close</FName>
    <Desc>Object oriented style (destructor):
public bool Stomp::__destruct ( void )
Procedural style:
bool stomp_close ( resource $link )
Closes a previously opened connection.
</Desc>
    <FName>Stomp::error</FName>
    <Desc>Object oriented style (method):
public string Stomp::error ( void )
Procedural style:
string stomp_error ( resource $link )
Gets the last stomp error.
</Desc>
    <FName>stomp_error</FName>
    <Desc>Object oriented style (method):
public string Stomp::error ( void )
Procedural style:
string stomp_error ( resource $link )
Gets the last stomp error.
</Desc>
    <FName>StompException::getDetails</FName>
    <Desc>public string StompException::getDetails ( void )
Get exception details.
</Desc>
    <FName>Stomp::getReadTimeout</FName>
    <Desc>Object oriented style (method):
public array Stomp::getReadTimeout ( void )
Procedural style:
array stomp_get_read_timeout ( resource $link )
Gets read timeout
</Desc>
    <FName>stomp_get_read_timeout</FName>
    <Desc>Object oriented style (method):
public array Stomp::getReadTimeout ( void )
Procedural style:
array stomp_get_read_timeout ( resource $link )
Gets read timeout
</Desc>
    <FName>Stomp::getSessionId</FName>
    <Desc>Object oriented style (method):
public string Stomp::getSessionId ( void )
Procedural style:
string stomp_get_session_id ( resource $link )
Gets the current stomp session ID.
</Desc>
    <FName>stomp_get_session_id</FName>
    <Desc>Object oriented style (method):
public string Stomp::getSessionId ( void )
Procedural style:
string stomp_get_session_id ( resource $link )
Gets the current stomp session ID.
</Desc>
    <FName>Stomp::hasFrame</FName>
    <Desc>Object oriented style (method):
public bool Stomp::hasFrame ( void )
Procedural style:
bool stomp_has_frame ( resource $link )
Indicates whether or not there is a frame ready to read.
</Desc>
    <FName>stomp_has_frame</FName>
    <Desc>Object oriented style (method):
public bool Stomp::hasFrame ( void )
Procedural style:
bool stomp_has_frame ( resource $link )
Indicates whether or not there is a frame ready to read.
</Desc>
    <FName>Stomp::readFrame</FName>
    <Desc>Object oriented style (method):
public stompframe Stomp::readFrame ([ string $class_name = "stompFrame" ] )
Procedural style:
array stomp_read_frame ( resource $link )
Reads the next frame. It is possible to instantiate an object of a specific class, and pass parameters to that class's constructor.
</Desc>
    <FName>stomp_read_frame</FName>
    <Desc>Object oriented style (method):
public stompframe Stomp::readFrame ([ string $class_name = "stompFrame" ] )
Procedural style:
array stomp_read_frame ( resource $link )
Reads the next frame. It is possible to instantiate an object of a specific class, and pass parameters to that class's constructor.
</Desc>
    <FName>Stomp::send</FName>
    <Desc>Object oriented style (method):
public bool Stomp::send ( string $destination , mixed $msg [, array $headers ] )
Procedural style:
bool stomp_send ( resource $link , string $destination , mixed $msg [, array $headers ] )
Sends a message to the Message Broker.
</Desc>
    <FName>stomp_send</FName>
    <Desc>Object oriented style (method):
public bool Stomp::send ( string $destination , mixed $msg [, array $headers ] )
Procedural style:
bool stomp_send ( resource $link , string $destination , mixed $msg [, array $headers ] )
Sends a message to the Message Broker.
</Desc>
    <FName>Stomp::setReadTimeout</FName>
    <Desc>Object oriented style (method):
public void Stomp::setReadTimeout ( int $seconds [, int $microseconds ] )
Procedural style:
void stomp_set_read_timeout ( resource $link , int $seconds [, int $microseconds ] )
Sets read timeout.
</Desc>
    <FName>stomp_set_read_timeout</FName>
    <Desc>Object oriented style (method):
public void Stomp::setReadTimeout ( int $seconds [, int $microseconds ] )
Procedural style:
void stomp_set_read_timeout ( resource $link , int $seconds [, int $microseconds ] )
Sets read timeout.
</Desc>
    <FName>Stomp::subscribe</FName>
    <Desc>Object oriented style (method):
public bool Stomp::subscribe ( string $destination [, array $headers ] )
Procedural style:
bool stomp_subscribe ( resource $link , string $destination [, array $headers ] )
Registers to listen to a given destination.
</Desc>
    <FName>stomp_subscribe</FName>
    <Desc>Object oriented style (method):
public bool Stomp::subscribe ( string $destination [, array $headers ] )
Procedural style:
bool stomp_subscribe ( resource $link , string $destination [, array $headers ] )
Registers to listen to a given destination.
</Desc>
    <FName>Stomp::unsubscribe</FName>
    <Desc>Object oriented style (method):
public bool Stomp::unsubscribe ( string $destination [, array $headers ] )
Procedural style:
bool stomp_unsubscribe ( resource $link , string $destination [, array $headers ] )
Removes an existing subscription.
</Desc>
    <FName>stomp_unsubscribe</FName>
    <Desc>Object oriented style (method):
public bool Stomp::unsubscribe ( string $destination [, array $headers ] )
Procedural style:
bool stomp_unsubscribe ( resource $link , string $destination [, array $headers ] )
Removes an existing subscription.
</Desc>
    <FName>StompFrame::__construct</FName>
    <Desc>StompFrame::__construct ([ string $command [, array $headers [, string $body ]]] )
Constructor.
</Desc>
    <FName>streamWrapper::__construct</FName>
    <Desc>streamWrapper::__construct ( void )
Called when opening the stream wrapper, right before streamWrapper::stream_open().
</Desc>
    <FName>streamWrapper::__destruct</FName>
    <Desc>streamWrapper::__destruct ( void )
Called when closing the stream wrapper, right before streamWrapper::stream_flush().
</Desc>
    <FName>streamWrapper::dir_closedir</FName>
    <Desc>public bool streamWrapper::dir_closedir ( void )
This method is called in response to closedir(). 
Any resources which were locked, or allocated, during opening and use of the directory stream should be released.
</Desc>
    <FName>streamWrapper::dir_opendir</FName>
    <Desc>public bool streamWrapper::dir_opendir ( string $path , int $options )
This method is called in response to opendir().
</Desc>
    <FName>streamWrapper::dir_readdir</FName>
    <Desc>public string streamWrapper::dir_readdir ( void )
This method is called in response to readdir().
</Desc>
    <FName>streamWrapper::dir_rewinddir</FName>
    <Desc>public bool streamWrapper::dir_rewinddir ( void )
This method is called in response to rewinddir(). 
Should reset the output generated by streamWrapper::dir_readdir(). i.e.: The next call to streamWrapper::dir_readdir() should return the first entry in the location returned by streamWrapper::dir_opendir().
</Desc>
    <FName>streamWrapper::mkdir</FName>
    <Desc>public bool streamWrapper::mkdir ( string $path , int $mode , int $options )
This method is called in response to mkdir(). 
Note: 
In order for the appropriate error message to be returned this method should not be defined if the wrapper does not support creating directories.
</Desc>
    <FName>streamWrapper::rename</FName>
    <Desc>public bool streamWrapper::rename ( string $path_from , string $path_to )
This method is called in response to rename(). 
Should attempt to rename path_from to path_to 
Note: 
In order for the appropriate error message to be returned this method should not be defined if the wrapper does not support renaming files.
</Desc>
    <FName>streamWrapper::rmdir</FName>
    <Desc>public bool streamWrapper::rmdir ( string $path , int $options )
This method is called in response to rmdir(). 
Note: 
In order for the appropriate error message to be returned this method should not be defined if the wrapper does not support removing directories.
</Desc>
    <FName>streamWrapper::stream_cast</FName>
    <Desc>public resource streamWrapper::stream_cast ( int $cast_as )
This method is called in response to stream_select().
</Desc>
    <FName>streamWrapper::stream_close</FName>
    <Desc>public void streamWrapper::stream_close ( void )
This method is called in response to fclose(). 
All resources that were locked, or allocated, by the wrapper should be released.
</Desc>
    <FName>streamWrapper::stream_eof</FName>
    <Desc>public bool streamWrapper::stream_eof ( void )
This method is called in response to feof().
</Desc>
    <FName>streamWrapper::stream_flush</FName>
    <Desc>public bool streamWrapper::stream_flush ( void )
This method is called in response to fflush() and when the stream is being closed while any unflushed data has been written to it before. 
If you have cached data in your stream but not yet stored it into the underlying storage, you should do so now.
</Desc>
    <FName>streamWrapper::stream_lock</FName>
    <Desc>public bool streamWrapper::stream_lock ( int $operation )
This method is called in response to flock(), when file_put_contents() (when flags contains LOCK_EX), stream_set_blocking() and when closing the stream (LOCK_UN).
</Desc>
    <FName>streamWrapper::stream_metadata</FName>
    <Desc>public bool streamWrapper::stream_metadata ( string $path , int $option , mixed $value )
This method is called to set metadata on the stream. It is called when one of the following functions is called on a stream URL: 
touch() 
chmod() 
chown() 
chgrp() 
Please note that some of these operations may not be available on your system.
</Desc>
    <FName>streamWrapper::stream_open</FName>
    <Desc>public bool streamWrapper::stream_open ( string $path , string $mode , int $options , string &$opened_path )
This method is called immediately after the wrapper is initialized (f.e. by fopen() and file_get_contents()).
</Desc>
    <FName>streamWrapper::stream_read</FName>
    <Desc>public string streamWrapper::stream_read ( int $count )
This method is called in response to fread() and fgets(). 
Note: 
Remember to update the read/write position of the stream (by the number of bytes that were successfully read).
</Desc>
    <FName>streamWrapper::stream_seek</FName>
    <Desc>public bool streamWrapper::stream_seek ( int $offset , int $whence = SEEK_SET )
This method is called in response to fseek(). 
The read/write position of the stream should be updated according to the offset and whence.
</Desc>
    <FName>streamWrapper::stream_set_option</FName>
    <Desc>public bool streamWrapper::stream_set_option ( int $option , int $arg1 , int $arg2 )
This method is called to set options on the stream.
</Desc>
    <FName>streamWrapper::stream_stat</FName>
    <Desc>public array streamWrapper::stream_stat ( void )
This method is called in response to fstat().
</Desc>
    <FName>streamWrapper::stream_tell</FName>
    <Desc>public int streamWrapper::stream_tell ( void )
This method is called in response to fseek() to determine the current position.
</Desc>
    <FName>streamWrapper::stream_truncate</FName>
    <Desc>public bool streamWrapper::stream_truncate ( int $new_size )
Will respond to truncation, e.g., through ftruncate().
</Desc>
    <FName>streamWrapper::stream_write</FName>
    <Desc>public int streamWrapper::stream_write ( string $data )
This method is called in response to fwrite(). 
Note: 
Remember to update the current position of the stream by number of bytes that were successfully written.
</Desc>
    <FName>streamWrapper::unlink</FName>
    <Desc>public bool streamWrapper::unlink ( string $path )
This method is called in response to unlink(). 
Note: 
In order for the appropriate error message to be returned this method should not be defined if the wrapper does not support removing files.
</Desc>
    <FName>streamWrapper::url_stat</FName>
    <Desc>public array streamWrapper::url_stat ( string $path , int $flags )
This method is called in response to all stat() related functions, such as: 
chmod() (only when safe_mode is enabled) 
copy() 
fileperms() 
fileinode() 
filesize() 
fileowner() 
filegroup() 
fileatime() 
filemtime() 
filectime() 
filetype() 
is_writable() 
is_readable() 
is_executable() 
is_file() 
is_dir() 
is_link() 
file_exists() 
lstat() 
stat() 
SplFileInfo::getPerms() 
SplFileInfo::getInode() 
SplFileInfo::getSize() 
SplFileInfo::getOwner() 
SplFileInfo::getGroup() 
SplFileInfo::getATime() 
SplFileInfo::getMTime() 
SplFileInfo::getCTime() 
SplFileInfo::getType() 
SplFileInfo::isWritable() 
SplFileInfo::isReadable() 
SplFileInfo::isExecutable() 
SplFileInfo::isFile() 
SplFileInfo::isDir() 
SplFileInfo::isLink() 
RecursiveDirectoryIterator::hasChildren()
</Desc>
    <FName>SVM::__construct</FName>
    <Desc>public SVM::__construct ( void )
Constructs a new SVM object ready to accept training data.
</Desc>
    <FName>SVM::crossvalidate</FName>
    <Desc>public float svm::crossvalidate ( array $problem , int $number_of_folds )
Crossvalidate can be used to test the effectiveness of the current parameter set on a subset of the training data. Given a problem set and a n "folds", it separates the problem set into n subsets, and the repeatedly trains on one subset and tests on another. While the accuracy will generally be lower than a SVM trained on the enter data set, the accuracy score returned should be relatively useful, so it can be used to test different training parameters.
</Desc>
    <FName>SVM::getOptions</FName>
    <Desc>public array SVM::getOptions ( void )
Retrieve an array containing the training parameters. The parameters will be keyed on the predefined SVM constants.
</Desc>
    <FName>SVM::setOptions</FName>
    <Desc>public bool SVM::setOptions ( array $params )
Set one or more training parameters.
</Desc>
    <FName>SVM::train</FName>
    <Desc>public SVMModel svm::train ( array $problem [, array $weights ] )
Train a support vector machine based on the supplied training data.
</Desc>
    <FName>SVMModel::checkProbabilityModel</FName>
    <Desc>public bool SVMModel::checkProbabilityModel ( void )
Returns true if the model contains probability information.
</Desc>
    <FName>SVMModel::__construct</FName>
    <Desc>public SVMModel::__construct ([ string $filename ] )
Build a new SVMModel. Models will usually be created from the SVM::train function, but then saved models may be restored directly.
</Desc>
    <FName>SVMModel::getLabels</FName>
    <Desc>public array SVMModel::getLabels ( void )
Return an array of labels that the model was trained on. For regression and one class models an empty array is returned.
</Desc>
    <FName>SVMModel::getNrClass</FName>
    <Desc>public int SVMModel::getNrClass ( void )
Returns the number of classes the model was trained with, will return 2 for one class and regression models.
</Desc>
    <FName>SVMModel::getSvmType</FName>
    <Desc>public int SVMModel::getSvmType ( void )
Returns an integer value representing the type of the SVM model used, e.g SVM::C_SVC.
</Desc>
    <FName>SVMModel::getSvrProbability</FName>
    <Desc>public float SVMModel::getSvrProbability ( void )
For regression models, returns a sigma value. If there is no probability information or the model is not SVR, 0 is returned.
</Desc>
    <FName>SVMModel::load</FName>
    <Desc>public bool SVMModel::load ( string $filename )
Load a model file ready for classification or regression.
</Desc>
    <FName>SVMModel::predict_probability</FName>
    <Desc>public float SVMModel::predict_probability ( array $data )
This function accepts an array of data and attempts to predict the class, as with the predict function. Additionally, however, this function returns an array of probabilities, one per class in the model, which represent the estimated chance of the data supplied being a member of that class. Requires that the model to be used has been trained with the probability parameter set to true.
</Desc>
    <FName>SVMModel::predict</FName>
    <Desc>public float SVMModel::predict ( array $data )
This function accepts an array of data and attempts to predict the class or regression value based on the model extracted from previously trained data.
</Desc>
    <FName>SVMModel::save</FName>
    <Desc>public bool SVMModel::save ( string $filename )
Save the model data to a file, for later use.
</Desc>
    <FName>SWFAction::__construct</FName>
    <Desc>SWFAction::__construct ( string $script )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Creates a new SWFAction and compiles the given script in it.
</Desc>
    <FName>SWFBitmap::__construct</FName>
    <Desc>SWFBitmap::__construct ( mixed $file [, mixed $alphafile ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Creates the new SWFBitmap object from the given file.
</Desc>
    <FName>SWFBitmap::getHeight</FName>
    <Desc>float SWFBitmap::getHeight ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the bitmap's height.
</Desc>
    <FName>SWFBitmap::getWidth</FName>
    <Desc>float SWFBitmap::getWidth ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the bitmap's width.
</Desc>
    <FName>SWFButton::addAction</FName>
    <Desc>void SWFButton::addAction ( SWFAction $action , int $flags )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Adds the given action to the button for the given conditions.
</Desc>
    <FName>SWFButton::addASound</FName>
    <Desc>SWFSoundInstance SWFButton::addASound ( SWFSound $sound , int $flags )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>SWFButton::addShape</FName>
    <Desc>void SWFButton::addShape ( SWFShape $shape , int $flags )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Adds the given shape to the button.
</Desc>
    <FName>SWFButton::__construct</FName>
    <Desc>SWFButton::__construct ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Creates a new Button.
</Desc>
    <FName>SWFButton::setAction</FName>
    <Desc>void SWFButton::setAction ( SWFAction $action )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Sets the action to be performed when the button is clicked. 
This is a shortcut for SWFButton::addAction() called with the SWFBUTTON_MOUSEUP flag.
</Desc>
    <FName>SWFButton::setDown</FName>
    <Desc>void SWFButton::setDown ( SWFShape $shape )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfbutton::setdown() alias for addShape(shape, SWFBUTTON_DOWN).
</Desc>
    <FName>SWFButton::setHit</FName>
    <Desc>void SWFButton::setHit ( SWFShape $shape )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfbutton::sethit() alias for addShape(shape, SWFBUTTON_HIT).
</Desc>
    <FName>SWFButton::setMenu</FName>
    <Desc>void SWFButton::setMenu ( int $flag )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFButton::setOver</FName>
    <Desc>void SWFButton::setOver ( SWFShape $shape )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfbutton::setover() alias for addShape(shape, SWFBUTTON_OVER).
</Desc>
    <FName>SWFButton::setUp</FName>
    <Desc>void SWFButton::setUp ( SWFShape $shape )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfbutton::setup() alias for addShape(shape, SWFBUTTON_UP).
</Desc>
    <FName>SWFDisplayItem::addAction</FName>
    <Desc>void SWFDisplayItem::addAction ( SWFAction $action , int $flags )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFDisplayItem::addColor</FName>
    <Desc>void SWFDisplayItem::addColor ( int $red , int $green , int $blue [, int $a ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::addcolor() adds the color to this item's color transform. The color is given in its RGB form. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::endMask</FName>
    <Desc>void SWFDisplayItem::endMask ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFDisplayItem::getRot</FName>
    <Desc>float SWFDisplayItem::getRot ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>SWFDisplayItem::getX</FName>
    <Desc>float SWFDisplayItem::getX ( void )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFDisplayItem::getY() - Description 
</Desc>
    <FName>SWFDisplayItem::getXScale</FName>
    <Desc>float SWFDisplayItem::getXScale ( void )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFDisplayItem::getYScale() - Description 
</Desc>
    <FName>SWFDisplayItem::getXSkew</FName>
    <Desc>float SWFDisplayItem::getXSkew ( void )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFDisplayItem::getYSkew() - Description 
</Desc>
    <FName>SWFDisplayItem::getY</FName>
    <Desc>float SWFDisplayItem::getY ( void )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFDisplayItem::getX() - Description 
</Desc>
    <FName>SWFDisplayItem::getYScale</FName>
    <Desc>float SWFDisplayItem::getYScale ( void )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFDisplayItem::getXScale() - Description 
</Desc>
    <FName>SWFDisplayItem::getYSkew</FName>
    <Desc>float SWFDisplayItem::getYSkew ( void )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFDisplayItem::getXSkew() - Description 
</Desc>
    <FName>SWFDisplayItem::move</FName>
    <Desc>void SWFDisplayItem::move ( float $dx , float $dy )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::move() moves the current object by (dx,dy) from its current position. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::moveTo</FName>
    <Desc>void SWFDisplayItem::moveTo ( float $x , float $y )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::moveto() moves the current object to (x,y) in global coordinates. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::multColor</FName>
    <Desc>void SWFDisplayItem::multColor ( float $red , float $green , float $blue [, float $a ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::multcolor() multiplies the item's color transform by the given values. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::remove</FName>
    <Desc>void SWFDisplayItem::remove ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::remove() removes this object from the movie's display list. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::rotate</FName>
    <Desc>void SWFDisplayItem::rotate ( float $angle )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::rotate() rotates the current object by angle degrees from its current rotation. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::rotateTo</FName>
    <Desc>void SWFDisplayItem::rotateTo ( float $angle )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::rotateto() set the current object rotation to angle degrees in global coordinates. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::scale</FName>
    <Desc>void SWFDisplayItem::scale ( float $dx , float $dy )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::scale() scales the current object by (dx,dy) from its current size. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::scaleTo</FName>
    <Desc>void SWFDisplayItem::scaleTo ( float $x [, float $y ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::scaleto() scales the current object to (x,y) in global coordinates. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::setDepth</FName>
    <Desc>void SWFDisplayItem::setDepth ( int $depth )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::setdepth() sets the object's z-order to depth. Depth defaults to the order in which instances are created (by adding a shape/text to a movie)- newer ones are on top of older ones. If two objects are given the same depth, only the later-defined one can be moved. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::setMaskLevel</FName>
    <Desc>void SWFDisplayItem::setMaskLevel ( int $level )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFDisplayItem::setMatrix</FName>
    <Desc>void SWFDisplayItem::setMatrix ( float $a , float $b , float $c , float $d , float $x , float $y )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFDisplayItem::setName</FName>
    <Desc>void SWFDisplayItem::setName ( string $name )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::setname() sets the object's name to name, for targetting with action script. Only useful on sprites. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::setRatio</FName>
    <Desc>void SWFDisplayItem::setRatio ( float $ratio )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::setratio() sets the object's ratio to ratio. Obviously only useful for morphs. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::skewX</FName>
    <Desc>void SWFDisplayItem::skewX ( float $ddegrees )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::skewx() adds ddegrees to current x-skew. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::skewXTo</FName>
    <Desc>void SWFDisplayItem::skewXTo ( float $degrees )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::skewxto() sets the x-skew to degrees. For degrees is 1.0, it means a 45-degree forward slant. More is more forward, less is more backward. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::skewY</FName>
    <Desc>void SWFDisplayItem::skewY ( float $ddegrees )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::skewy() adds ddegrees to current y-skew. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFDisplayItem::skewYTo</FName>
    <Desc>void SWFDisplayItem::skewYTo ( float $degrees )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfdisplayitem::skewyto() sets the y-skew to degrees. For degrees is 1.0, it means a 45-degree forward slant. More is more upward, less is more downward. 
The object may be a swfshape(), a swfbutton(), a swftext() or a swfsprite() object. It must have been added using the swfmovie::add().
</Desc>
    <FName>SWFFill::moveTo</FName>
    <Desc>void SWFFill::moveTo ( float $x , float $y )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Moves the fill origin to the given global coordinates.
</Desc>
    <FName>SWFFill::rotateTo</FName>
    <Desc>void SWFFill::rotateTo ( float $angle )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Sets the fill rotation to the given angle.
</Desc>
    <FName>SWFFill::scaleTo</FName>
    <Desc>void SWFFill::scaleTo ( float $x [, float $y ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Sets the fill scale to the given coordinates.
</Desc>
    <FName>SWFFill::skewXTo</FName>
    <Desc>void SWFFill::skewXTo ( float $x )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Sets the fill x-skew to x.
</Desc>
    <FName>SWFFill::skewYTo</FName>
    <Desc>void SWFFill::skewYTo ( float $y )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Sets the fill y-skew to y.
</Desc>
    <FName>SWFFont::__construct</FName>
    <Desc>SWFFont::__construct ( string $filename )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
If filename is the name of an FDB file (i.e., it ends in ".fdb"), load the font definition found in said file. Otherwise, create a browser-defined font reference. 
FDB ("font definition block") is a very simple wrapper for the SWF DefineFont2 block which contains a full description of a font. One may create FDB files from SWT Generator template files with the included makefdb utility- look in the util directory off the main ming distribution directory. 
Browser-defined fonts don't contain any information about the font other than its name. It is assumed that the font definition will be provided by the movie player. The fonts _serif, _sans, and _typewriter should always be available. For example: 
<?php
$f = newSWFFont("_sans"); 
?> 
will give you the standard sans-serif font, probably the same as what you'd get with <font name="sans-serif"> in HTML. 
</Desc>
    <FName>SWFFont::getAscent</FName>
    <Desc>float SWFFont::getAscent ( void )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFFont::getDescent() - Returns the descent of the font, or 0 if not available 
</Desc>
    <FName>SWFFont::getDescent</FName>
    <Desc>float SWFFont::getDescent ( void )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFFont::getAscent() - Returns the ascent of the font, or 0 if not available 
</Desc>
    <FName>SWFFont::getLeading</FName>
    <Desc>float SWFFont::getLeading ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>SWFFont::getShape</FName>
    <Desc>string SWFFont::getShape ( int $code )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>SWFFont::getUTF8Width</FName>
    <Desc>float SWFFont::getUTF8Width ( string $string )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFFont::getWidth() - Returns the string's width 
</Desc>
    <FName>SWFFont::getWidth</FName>
    <Desc>float SWFFont::getWidth ( string $string )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swffont::getwidth() returns the string string's width, using font's default scaling. You'll probably want to use the swftext() version of this method which uses the text object's scale. 
See Also
SWFFont::getUTF8Width() - Calculates the width of the given string in this font at full height 
</Desc>
    <FName>SWFFontChar::addChars</FName>
    <Desc>void SWFFontChar::addChars ( string $char )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFFontChar::addUTF8Chars</FName>
    <Desc>void SWFFontChar::addUTF8Chars ( string $char )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFGradient::addEntry</FName>
    <Desc>void SWFGradient::addEntry ( float $ratio , int $red , int $green , int $blue [, int $alpha = 255 ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfgradient::addentry() adds an entry to the gradient list. ratio is a number between 0 and 1 indicating where in the gradient this color appears. Thou shalt add entries in order of increasing ratio. 
red, green, blue is a color (RGB mode).
</Desc>
    <FName>SWFGradient::__construct</FName>
    <Desc>SWFGradient::__construct ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfgradient() creates a new SWFGradient object. 
After you've added the entries to your gradient, you can use the gradient in a shape fill with the swfshape::addfill() method. 
SWFGradient has the following methods : swfgradient::addentry(). 
This simple example will draw a big black-to-white gradient as background, and a reddish disc in its center. 
Example #1 swfgradient() example
<?php

  $m = new SWFMovie();
  $m->setDimension(320, 240);

  $s = new SWFShape();

  // first gradient- black to white
  $g = new SWFGradient();
  $g->addEntry(0.0, 0, 0, 0);
  $g->addEntry(1.0, 0xff, 0xff, 0xff);

  $f = $s->addFill($g, SWFFILL_LINEAR_GRADIENT);
  $f->scaleTo(0.01);
  $f->moveTo(160, 120);
  $s->setRightFill($f);
  $s->drawLine(320, 0);
  $s->drawLine(0, 240);
  $s->drawLine(-320, 0);
  $s->drawLine(0, -240);

  $m->add($s);

  $s = new SWFShape();

  // second gradient- radial gradient from red to transparent
  $g = new SWFGradient();
  $g->addEntry(0.0, 0xff, 0, 0, 0xff);
  $g->addEntry(1.0, 0xff, 0, 0, 0);

  $f = $s->addFill($g, SWFFILL_RADIAL_GRADIENT);
  $f->scaleTo(0.005);
  $f->moveTo(160, 120);
  $s->setRightFill($f);
  $s->drawLine(320, 0);
  $s->drawLine(0, 240);
  $s->drawLine(-320, 0);
  $s->drawLine(0, -240);

  $m->add($s);

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?> 
</Desc>
    <FName>SWFMorph::__construct</FName>
    <Desc>SWFMorph::__construct ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Creates a new SWFMorph object. 
Also called a "shape tween". This thing lets you make those tacky twisting things that make your computer choke. Oh, joy!
</Desc>
    <FName>SWFMorph::getShape1</FName>
    <Desc>SWFShape SWFMorph::getShape1 ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Gets the morph's starting shape.
</Desc>
    <FName>SWFMorph::getShape2</FName>
    <Desc>SWFShape SWFMorph::getShape2 ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Gets the morph's ending shape.
</Desc>
    <FName>SWFMovie::add</FName>
    <Desc>mixed SWFMovie::add ( object $instance )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Adds an SWF object instance to the current movie.
</Desc>
    <FName>SWFMovie::addExport</FName>
    <Desc>void SWFMovie::addExport ( SWFCharacter $char , string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFMovie::addFont</FName>
    <Desc>mixed SWFMovie::addFont ( SWFFont $font )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFMovie::__construct</FName>
    <Desc>SWFMovie::__construct ([ int $version ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Creates a new movie object, representing an SWF movie.
</Desc>
    <FName>SWFMovie::importChar</FName>
    <Desc>SWFSprite SWFMovie::importChar ( string $libswf , string $name )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFMovie::importFont() - Description 
</Desc>
    <FName>SWFMovie::importFont</FName>
    <Desc>SWFFontChar SWFMovie::importFont ( string $libswf , string $name )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFMovie::importChar() - Description 
</Desc>
    <FName>SWFMovie::labelFrame</FName>
    <Desc>void SWFMovie::labelFrame ( string $label )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFMovie::nextFrame</FName>
    <Desc>void SWFMovie::nextFrame ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Moves to the next frame of the animation.
</Desc>
    <FName>SWFMovie::output</FName>
    <Desc>int SWFMovie::output ([ int $compression ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Dumps the SWFMovie. 
Don't forget to send the Content-Type HTTP header file before using this function, in order to display the movie in a browser.
</Desc>
    <FName>SWFMovie::remove</FName>
    <Desc>void SWFMovie::remove ( object $instance )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Removes the given object instance from the display list.
</Desc>
    <FName>SWFMovie::save</FName>
    <Desc>int SWFMovie::save ( string $filename [, int $compression = -1 ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Saves the SWF movie to the specified filename.
</Desc>
    <FName>SWFMovie::saveToFile</FName>
    <Desc>int SWFMovie::saveToFile ( resource $x [, int $compression = -1 ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFMovie::setbackground</FName>
    <Desc>void SWFMovie::setbackground ( int $red , int $green , int $blue )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Sets the background color. 
Why is there no rgba version? Think about it, you might want to let the HTML background show through. There's a way to do that, but it only works on IE4. Search the » http://www.macromedia.com/ site for details.
</Desc>
    <FName>SWFMovie::setDimension</FName>
    <Desc>void SWFMovie::setDimension ( float $width , float $height )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Sets the movie's dimension to the specified width and height.
</Desc>
    <FName>SWFMovie::setFrames</FName>
    <Desc>void SWFMovie::setFrames ( int $number )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Sets the total number of frames in the animation to the given number.
</Desc>
    <FName>SWFMovie::setRate</FName>
    <Desc>void SWFMovie::setRate ( float $rate )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Sets the frame rate to the specified rate. 
Animation will slow down if the player can't render frames fast enough- unless there's a streaming sound, in which case display frames are sacrificed to keep sound from skipping.
</Desc>
    <FName>SWFMovie::startSound</FName>
    <Desc>SWFSoundInstance SWFMovie::startSound ( SWFSound $sound )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFMovie::stopSound() - Description 
</Desc>
    <FName>SWFMovie::stopSound</FName>
    <Desc>void SWFMovie::stopSound ( SWFSound $sound )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFMovie::streamMP3</FName>
    <Desc>int SWFMovie::streamMP3 ( mixed $mp3file [, float $skip = 0 ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Streams the given MP3 file mp3file. 
This method is not very robust in dealing with oddities (can skip over an initial ID3 tag, but that's about it). 
Note that the movie isn't smart enough to put enough frames in to contain the entire mp3 stream- you'll have to add (length of song * frames per second) frames to get the entire stream in.
</Desc>
    <FName>SWFMovie::writeExports</FName>
    <Desc>void SWFMovie::writeExports ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFPrebuiltClip::__construct</FName>
    <Desc>SWFPrebuiltClip::__construct ( mixed $file )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>SWFShape::addFill</FName>
    <Desc>SWFFill SWFShape::addFill ( int $red , int $green , int $blue [, int $alpha = 255 ] )
SWFFill addFill ( SWFBitmap $bitmap [, int $flags ] )
SWFFill addFill ( SWFGradient $gradient [, int $flags ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
SWFShape::addFill() adds a solid fill to the shape's list of fill styles. SWFShape::addFill() accepts three different types of arguments. 
red, green, blue is a color (RGB mode). 
The bitmap argument is an SWFBitmap() object. The flags argument can be one of the following values: SWFFILL_CLIPPED_BITMAP, SWFFILL_TILED_BITMAP, SWFFILL_LINEAR_GRADIENT or SWFFILL_RADIAL_GRADIENT. Default is SWFFILL_TILED_BITMAP for SWFBitmap and SWFFILL_LINEAR_GRADIENT for SWFGradient. 
The gradient argument is an SWFGradient() object. The flags argument can be one of the following values : SWFFILL_RADIAL_GRADIENT or SWFFILL_LINEAR_GRADIENT. Default is SWFFILL_LINEAR_GRADIENT. I'm sure about this one. Really. 
SWFShape::addFill() returns an SWFFill() object for use with the SWFShape::setLeftFill() and SWFShape::setRightFill() functions described below.
</Desc>
    <FName>SWFShape::__construct</FName>
    <Desc>SWFShape::__construct ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Created a new SWFShape object.
</Desc>
    <FName>SWFShape::drawArc</FName>
    <Desc>void SWFShape::drawArc ( float $r , float $startAngle , float $endAngle )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFShape::drawCircle</FName>
    <Desc>void SWFShape::drawCircle ( float $r )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFShape::drawCubic</FName>
    <Desc>int SWFShape::drawCubic ( float $bx , float $by , float $cx , float $cy , float $dx , float $dy )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFShape::drawCubicTo() - Draws a cubic bezier curve using the current position and the three given points as control points 
</Desc>
    <FName>SWFShape::drawCubicTo</FName>
    <Desc>int SWFShape::drawCubicTo ( float $bx , float $by , float $cx , float $cy , float $dx , float $dy )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFShape::drawCubic() - Draws a cubic bezier curve using the current position and the three given points as control points 
</Desc>
    <FName>SWFShape::drawCurve</FName>
    <Desc>int SWFShape::drawCurve ( float $controldx , float $controldy , float $anchordx , float $anchordy [, float $targetdx ], float $targetdy )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfshape::drawcurve() draws a quadratic curve (using the current line style,set by swfshape::setline()) from the current pen position to the relative position (anchorx,anchory) using relative control point (controlx,controly). That is, head towards the control point, then smoothly turn to the anchor point. 
With 6 parameters, it draws a cubic bezier to point (x+targetdx, x+targetdy) with control points (x+controldx, y+controldy) and (x+anchordx, y+anchordy). 
See Also
SWFShape::drawCurve() 
</Desc>
    <FName>SWFShape::drawCurveTo</FName>
    <Desc>int SWFShape::drawCurveTo ( float $controlx , float $controly , float $anchorx , float $anchory [, float $targetx ], float $targety )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfshape::drawcurveto() draws a quadratic curve (using the current line style, set by swfshape::setline()) from the current pen position to (anchorx,anchory) using (controlx,controly) as a control point. That is, head towards the control point, then smoothly turn to the anchor point. 
With 6 parameters, it draws a cubic bezier to point (targetx, targety) with control points (controlx, controly) and (anchorx, anchory). 
See Also
SWFShape::drawCurveTo() 
</Desc>
    <FName>SWFShape::drawGlyph</FName>
    <Desc>void SWFShape::drawGlyph ( SWFFont $font , string $character [, int $size ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFShape::drawLine</FName>
    <Desc>void SWFShape::drawLine ( float $dx , float $dy )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfshape::drawline() draws a line (using the current line style set by swfshape::setline()) from the current pen position to displacement (dx,dy).
</Desc>
    <FName>SWFShape::drawLineTo</FName>
    <Desc>void SWFShape::drawLineTo ( float $x , float $y )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfshape::setrightfill() draws a line (using the current line style, set by swfshape::setline()) from the current pen position to point (x,y) in the shape's coordinate space.
</Desc>
    <FName>SWFShape::movePen</FName>
    <Desc>void SWFShape::movePen ( float $dx , float $dy )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfshape::setrightfill() move the shape's pen from coordinates (current x,current y) to (current x + dx, current y + dy) in the shape's coordinate space.
</Desc>
    <FName>SWFShape::movePenTo</FName>
    <Desc>void SWFShape::movePenTo ( float $x , float $y )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfshape::setrightfill() move the shape's pen to (x,y) in the shape's coordinate space.
</Desc>
    <FName>SWFShape::setLeftFill</FName>
    <Desc>void SWFShape::setLeftFill ( SWFGradient $fill )
void setLeftFill ( int $red , int $green , int $blue [, int $a ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
What this nonsense is about is, every edge segment borders at most two fills. When rasterizing the object, it's pretty handy to know what those fills are ahead of time, so the swf format requires these to be specified. 
swfshape::setleftfill() sets the fill on the left side of the edge- that is, on the interior if you're defining the outline of the shape in a counter-clockwise fashion. The fill object is an SWFFill object returned from one of the addFill functions above. 
This seems to be reversed when you're defining a shape in a morph, though. If your browser crashes, just try setting the fill on the other side. 
Shortcut for $swfshape->setleftfill($s->addfill($r, $g, $b [, $a]));.
</Desc>
    <FName>SWFShape::setLine</FName>
    <Desc>void SWFShape::setLine ( SWFShape $shape )
void setLine ( int $width , int $red , int $green , int $blue [, int $a ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfshape::setline() sets the shape's line style. width is the line's width. If width is 0, the line's style is removed (then, all other arguments are ignored). If width > 0, then line's color is set to red, green, blue. Last parameter a is optional. 
You must declare all line styles before you use them (see example).
</Desc>
    <FName>SWFShape::setRightFill</FName>
    <Desc>void SWFShape::setRightFill ( SWFGradient $fill )
void setRightFill ( int $red , int $green , int $blue [, int $a ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Shortcut for $swfshape->setrightfill($s->addfill($r, $g, $b [, $a]));.
</Desc>
    <FName>SWFSound::__construct</FName>
    <Desc>SWFSound::__construct ( string $filename [, int $flags = 0 ] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>SWFSoundInstance::loopCount</FName>
    <Desc>void SWFSoundInstance::loopCount ( int $point )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFSoundInstance::loopInPoint</FName>
    <Desc>void SWFSoundInstance::loopInPoint ( int $point )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFSoundInstance::loopOutPoint</FName>
    <Desc>void SWFSoundInstance::loopOutPoint ( int $point )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFSoundInstance::noMultiple</FName>
    <Desc>void SWFSoundInstance::noMultiple ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFSprite::add</FName>
    <Desc>void SWFSprite::add ( object $object )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfsprite::add() adds a swfshape(), a swfbutton(), a swftext(), a swfaction() or a swfsprite() object. 
For displayable types (swfshape(), swfbutton(), swftext(), swfaction() or swfsprite()), this returns a handle to the object in a display list.
</Desc>
    <FName>SWFSprite::__construct</FName>
    <Desc>SWFSprite::__construct ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Creates a new SWFSprite object. 
</Desc>
    <FName>SWFSprite::labelFrame</FName>
    <Desc>void SWFSprite::labelFrame ( string $label )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFSprite::nextFrame</FName>
    <Desc>void SWFSprite::nextFrame ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfsprite::setframes() moves to the next frame of the animation.
</Desc>
    <FName>SWFSprite::remove</FName>
    <Desc>void SWFSprite::remove ( object $object )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfsprite::remove() remove a swfshape(), a swfbutton(), a swftext(), a swfaction() or a swfsprite() object from the sprite.
</Desc>
    <FName>SWFSprite::setFrames</FName>
    <Desc>void SWFSprite::setFrames ( int $number )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swfsprite::setframes() sets the total number of frames in the animation to numberofframes.
</Desc>
    <FName>SWFSprite::startSound</FName>
    <Desc>SWFSoundInstance SWFSprite::startSound ( SWFSound $sount )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFSprite::stopSound() - Description 
</Desc>
    <FName>SWFSprite::stopSound</FName>
    <Desc>void SWFSprite::stopSound ( SWFSound $sount )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFText::addString</FName>
    <Desc>void SWFText::addString ( string $string )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftext::addstring() draws the string string at the current pen (cursor) location. Pen is at the baseline of the text; i.e., ascending text is in the -y direction.
</Desc>
    <FName>SWFText::addUTF8String</FName>
    <Desc>void SWFText::addUTF8String ( string $text )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFText::__construct</FName>
    <Desc>SWFText::__construct ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Creates a new SWFText object, fresh for manipulating.
</Desc>
    <FName>SWFText::getAscent</FName>
    <Desc>float SWFText::getAscent ( void )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFText::getDescent() - Returns the descent of the current font at its current size, or 0 if not available 
</Desc>
    <FName>SWFText::getDescent</FName>
    <Desc>float SWFText::getDescent ( void )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFText::getAscent() - Returns the ascent of the current font at its current size, or 0 if not available 
</Desc>
    <FName>SWFText::getLeading</FName>
    <Desc>float SWFText::getLeading ( void )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>SWFText::getUTF8Width</FName>
    <Desc>float SWFText::getUTF8Width ( string $string )
Warning
This function is currently not documented; only its argument list is available. 
See Also
SWFText::getWidth() - Computes string's width 
</Desc>
    <FName>SWFText::getWidth</FName>
    <Desc>float SWFText::getWidth ( string $string )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Returns the rendered width of the string at the text object's current font, scale, and spacing settings. 
See Also
SWFText::getUTF8Width() - Calculates the width of the given string in this text objects current font and size 
</Desc>
    <FName>SWFText::moveTo</FName>
    <Desc>void SWFText::moveTo ( float $x , float $y )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftext::moveto() moves the pen (or cursor, if that makes more sense) to (x,y) in text object's coordinate space. If either is zero, though, value in that dimension stays the same. Annoying, should be fixed.
</Desc>
    <FName>SWFText::setColor</FName>
    <Desc>void SWFText::setColor ( int $red , int $green , int $blue [, int $a = 255 ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Changes the current text color.
</Desc>
    <FName>SWFText::setFont</FName>
    <Desc>void SWFText::setFont ( SWFFont $font )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftext::setfont() sets the current font to font.
</Desc>
    <FName>SWFText::setHeight</FName>
    <Desc>void SWFText::setHeight ( float $height )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftext::setheight() sets the current font height to height. Default is 240.
</Desc>
    <FName>SWFText::setSpacing</FName>
    <Desc>void SWFText::setSpacing ( float $spacing )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftext::setspacing() sets the current font spacing to spacing. Default is 1.0. 0 is all of the letters written at the same point. This doesn't really work that well because it inflates the advance across the letter, doesn't add the same amount of spacing between the letters. I should try and explain that better, prolly. Or just fix the damn thing to do constant spacing. This was really just a way to figure out how letter advances work, anyway.. So nyah.
</Desc>
    <FName>SWFTextField::addChars</FName>
    <Desc>void SWFTextField::addChars ( string $chars )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFTextField::addString</FName>
    <Desc>void SWFTextField::addString ( string $string )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::setname() concatenates the string string to the text field.
</Desc>
    <FName>SWFTextField::align</FName>
    <Desc>void SWFTextField::align ( int $alignement )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::align() sets the text field alignment to alignement. Valid values for alignement are : SWFTEXTFIELD_ALIGN_LEFT, SWFTEXTFIELD_ALIGN_RIGHT, SWFTEXTFIELD_ALIGN_CENTER and SWFTEXTFIELD_ALIGN_JUSTIFY.
</Desc>
    <FName>SWFTextField::__construct</FName>
    <Desc>SWFTextField::__construct ([ int $flags ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield() creates a new text field object. Text Fields are less flexible than swftext() objects- they can't be rotated, scaled non-proportionally, or skewed, but they can be used as form entries, and they can use browser-defined fonts. 
The optional flags change the text field's behavior. It has the following possibles values : 
SWFTEXTFIELD_DRAWBOX draws the outline of the textfield 
SWFTEXTFIELD_HASLENGTH 
SWFTEXTFIELD_HTML allows text markup using HTML-tags 
SWFTEXTFIELD_MULTILINE allows multiple lines 
SWFTEXTFIELD_NOEDIT indicates that the field shouldn't be user-editable 
SWFTEXTFIELD_NOSELECT makes the field non-selectable 
SWFTEXTFIELD_PASSWORD obscures the data entry 
SWFTEXTFIELD_WORDWRAP allows text to wrap 
Flags are combined with the bitwise OR operation. For example, 
<?php
$t = newSWFTextField(SWFTEXTFIELD_PASSWORD | SWFTEXTFIELD_NOEDIT); 
?> 
creates a totally useless non-editable password field. 
SWFTextField has the following methods : swftextfield::setfont(), swftextfield::setbounds(), swftextfield::align(), swftextfield::setheight(), swftextfield::setleftmargin(), swftextfield::setrightmargin(), swftextfield::setmargins(), swftextfield::setindentation(), swftextfield::setlinespacing(), swftextfield::setcolor(), swftextfield::setname() and swftextfield::addstring(). 
</Desc>
    <FName>SWFTextField::setBounds</FName>
    <Desc>void SWFTextField::setBounds ( float $width , float $height )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::setbounds() sets the text field width to width and height to height. If you don't set the bounds yourself, Ming makes a poor guess at what the bounds are.
</Desc>
    <FName>SWFTextField::setColor</FName>
    <Desc>void SWFTextField::setColor ( int $red , int $green , int $blue [, int $a = 255 ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::setcolor() sets the color of the text field. Default is fully opaque black. Color is represented using RGB system.
</Desc>
    <FName>SWFTextField::setFont</FName>
    <Desc>void SWFTextField::setFont ( SWFFont $font )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::setfont() sets the text field font to the [browser-defined?] font font.
</Desc>
    <FName>SWFTextField::setHeight</FName>
    <Desc>void SWFTextField::setHeight ( float $height )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::setheight() sets the font height of this text field font to the given height height. Default is 240.
</Desc>
    <FName>SWFTextField::setIndentation</FName>
    <Desc>void SWFTextField::setIndentation ( float $width )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::setindentation() sets the indentation of the first line in the text field, to width.
</Desc>
    <FName>SWFTextField::setLeftMargin</FName>
    <Desc>void SWFTextField::setLeftMargin ( float $width )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::setleftmargin() sets the left margin width of the text field to width. Default is 0.
</Desc>
    <FName>SWFTextField::setLineSpacing</FName>
    <Desc>void SWFTextField::setLineSpacing ( float $height )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::setlinespacing() sets the line spacing of the text field to the height of height. Default is 40.
</Desc>
    <FName>SWFTextField::setMargins</FName>
    <Desc>void SWFTextField::setMargins ( float $left , float $right )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::setmargins() set both margins at once, for the man on the go.
</Desc>
    <FName>SWFTextField::setName</FName>
    <Desc>void SWFTextField::setName ( string $name )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::setname() sets the variable name of this text field to name, for form posting and action scripting purposes.
</Desc>
    <FName>SWFTextField::setPadding</FName>
    <Desc>void SWFTextField::setPadding ( float $padding )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>SWFTextField::setRightMargin</FName>
    <Desc>void SWFTextField::setRightMargin ( float $width )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
swftextfield::setrightmargin() sets the right margin width of the text field to width. Default is 0.
</Desc>
    <FName>SWFVideoStream::__construct</FName>
    <Desc>SWFVideoStream::__construct ([ string $file ] )
Warning
This function is currently not documented; only its argument list is available. 
</Desc>
    <FName>SWFVideoStream::getNumFrames</FName>
    <Desc>int SWFVideoStream::getNumFrames ( void )
This function returns the number of video-frames of a SWFVideoStream.
</Desc>
    <FName>SWFVideoStream::setDimension</FName>
    <Desc>void SWFVideoStream::setDimension ( int $x , int $y )
Sets the width and height for streamed videos.
</Desc>
    <FName>Swish::__construct</FName>
    <Desc>void Swish::__construct ( string $index_names )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>Swish::getMetaList</FName>
    <Desc>array Swish::getMetaList ( string $index_name )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>Swish::getPropertyList</FName>
    <Desc>array Swish::getPropertyList ( string $index_name )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>Swish::prepare</FName>
    <Desc>object Swish::prepare ([ string $query ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Prepare and return a search object, which you can later use for unlimited number of queries.
</Desc>
    <FName>Swish::query</FName>
    <Desc>object Swish::query ( string $query )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
A quick method to execute a search with default parameters.
</Desc>
    <FName>SwishResult::getMetaList</FName>
    <Desc>array SwishResult::getMetaList ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>SwishResult::stem</FName>
    <Desc>array SwishResult::stem ( string $word )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Stems the word based on the fuzzy mode used during indexing. Each result object is linked with its index, so the results are based on this index.
</Desc>
    <FName>SwishResults::getParsedWords</FName>
    <Desc>array SwishResults::getParsedWords ( string $index_name )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>SwishResults::getRemovedStopwords</FName>
    <Desc>array SwishResults::getRemovedStopwords ( string $index_name )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>SwishResults::nextResult</FName>
    <Desc>object SwishResults::nextResult ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>SwishResults::seekResult</FName>
    <Desc>int SwishResults::seekResult ( int $position )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>SwishSearch::execute</FName>
    <Desc>object SwishSearch::execute ([ string $query ] )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Searches the index file(s) based on the parameters set in the search object.
</Desc>
    <FName>SwishSearch::resetLimit</FName>
    <Desc>void SwishSearch::resetLimit ( void )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk. 
Reset the search limits previous set by SwishSearch::setLimit.
</Desc>
    <FName>SwishSearch::setLimit</FName>
    <Desc>void SwishSearch::setLimit ( string $property , string $low , string $high )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>SwishSearch::setPhraseDelimiter</FName>
    <Desc>void SwishSearch::setPhraseDelimiter ( string $delimiter )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>SwishSearch::setSort</FName>
    <Desc>void SwishSearch::setSort ( string $sort )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>SwishSearch::setStructure</FName>
    <Desc>void SwishSearch::setStructure ( int $structure )
Warning
This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding documentation may change without notice in a future release of PHP. This function should be used at your own risk.
</Desc>
    <FName>Swoole\Async::dnsLookup</FName>
    <Desc>public static void Swoole\Async::dnsLookup ( string $hostname , callable $callback )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Async::read</FName>
    <Desc>public static bool Swoole\Async::read ( string $filename , callable $callback [, integer $chunk_size [, integer $offset ]] )
</Desc>
    <FName>Swoole\Async::readFile</FName>
    <Desc>public static void Swoole\Async::readFile ( string $filename , callable $callback )
</Desc>
    <FName>Swoole\Async::set</FName>
    <Desc>public static void Swoole\Async::set ( array $settings )
</Desc>
    <FName>Swoole\Async::write</FName>
    <Desc>public static void Swoole\Async::write ( string $filename , string $content [, integer $offset [, callable $callback ]] )
</Desc>
    <FName>Swoole\Async::writeFile</FName>
    <Desc>public static void Swoole\Async::writeFile ( string $filename , string $content [, callable $callback [, string $flags ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Atomic::add</FName>
    <Desc>public integer Swoole\Atomic::add ([ integer $add_value ] )
Add a number to the value to the atomic object.
</Desc>
    <FName>Swoole\Atomic::cmpset</FName>
    <Desc>public integer Swoole\Atomic::cmpset ( integer $cmp_value , integer $new_value )
</Desc>
    <FName>Swoole\Atomic::__construct</FName>
    <Desc>public Swoole\Atomic::__construct ([ integer $value ] )
Swoole atomic object is a integer variable allows any processor to atomically test and modify. It is implemented based on CPU atomic instructions. The Swoole atomic variables have to defined before swoole_server->start. 
Compare-and-swap (CAS) is an atomic instruction used in multithreading to achieve synchronization. It compares the content of a memory location with a given value and, only if they are the same, modifies the content of that memory location to a new given value.
</Desc>
    <FName>Swoole\Atomic::get</FName>
    <Desc>public integer Swoole\Atomic::get ( void )
Get the current value of the atomic object.
</Desc>
    <FName>Swoole\Atomic::set</FName>
    <Desc>public integer Swoole\Atomic::set ( integer $value )
Set a new value to the atomic object. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Atomic::sub</FName>
    <Desc>public integer Swoole\Atomic::sub ([ integer $sub_value ] )
Subtract a number to the value of the atomic object.
</Desc>
    <FName>Swoole\Buffer::append</FName>
    <Desc>public integer Swoole\Buffer::append ( string $data )
</Desc>
    <FName>Swoole\Buffer::clear</FName>
    <Desc>public void Swoole\Buffer::clear ( void )
</Desc>
    <FName>Swoole\Buffer::__construct</FName>
    <Desc>public Swoole\Buffer::__construct ([ integer $size ] )
</Desc>
    <FName>Swoole\Buffer::__destruct</FName>
    <Desc>public void Swoole\Buffer::__destruct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Buffer::expand</FName>
    <Desc>public integer Swoole\Buffer::expand ( integer $size )
</Desc>
    <FName>Swoole\Buffer::read</FName>
    <Desc>public string Swoole\Buffer::read ( integer $offset , integer $length )
</Desc>
    <FName>Swoole\Buffer::recycle</FName>
    <Desc>public void Swoole\Buffer::recycle ( void )
</Desc>
    <FName>Swoole\Buffer::substr</FName>
    <Desc>public string Swoole\Buffer::substr ( integer $offset [, integer $length [, bool $remove ]] )
If $remove is set to be true and $offset is set to be 0, the data will be removed from the buffer. The memory for storing the data will be released when the buffer object is deconstructed.
</Desc>
    <FName>Swoole\Buffer::__toString</FName>
    <Desc>public string Swoole\Buffer::__toString ( void )
</Desc>
    <FName>Swoole\Buffer::write</FName>
    <Desc>public void Swoole\Buffer::write ( integer $offset , string $data )
</Desc>
    <FName>Swoole\Channel::__construct</FName>
    <Desc>public Swoole\Channel::__construct ( string $size )
Swoole channel is memory data structure works like Chan in Golang, implemented based on shared memory and mutex locks. It can be used as high performance message queue in memory. Construct a swoole channel with a fixed size. The minimum size of a swoole channel is 64KB. Exceptions will be thrown if there is not enough memory.
</Desc>
    <FName>Swoole\Channel::__destruct</FName>
    <Desc>public void Swoole\Channel::__destruct ( void )
</Desc>
    <FName>Swoole\Channel::pop</FName>
    <Desc>public mixed Swoole\Channel::pop ( void )
</Desc>
    <FName>Swoole\Channel::push</FName>
    <Desc>public bool Swoole\Channel::push ( string $data )
Data can be any non-empty PHP variable, the variable will be serialized if it is not string type. 
If size of the data is more than 8KB, swoole channel will use temp files storage. 
The function will return true if the write operation is succeeded, or return false if there is not enough space.
</Desc>
    <FName>Swoole\Channel::stats</FName>
    <Desc>public array Swoole\Channel::stats ( void )
Get the numbers of queued elements and total size of the memory used by the queue.
</Desc>
    <FName>Swoole\Client::close</FName>
    <Desc>public bool Swoole\Client::close ([ bool $force ] )
</Desc>
    <FName>Swoole\Client::connect</FName>
    <Desc>public bool Swoole\Client::connect ( string $host [, integer $port [, integer $timeout [, integer $flag ]]] )
</Desc>
    <FName>Swoole\Client::__construct</FName>
    <Desc>public Swoole\Client::__construct ( int $sock_type [, integer $is_async ] )
</Desc>
    <FName>Swoole\Client::__destruct</FName>
    <Desc>public void Swoole\Client::__destruct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Client::getpeername</FName>
    <Desc>public array Swoole\Client::getpeername ( void )
</Desc>
    <FName>Swoole\Client::getsockname</FName>
    <Desc>public array Swoole\Client::getsockname ( void )
</Desc>
    <FName>Swoole\Client::isConnected</FName>
    <Desc>public bool Swoole\Client::isConnected ( void )
This method returns the connection status of application layer.
</Desc>
    <FName>Swoole\Client::on</FName>
    <Desc>public void Swoole\Client::on ( string $event , callable $callback )
</Desc>
    <FName>Swoole\Client::pause</FName>
    <Desc>public void Swoole\Client::pause ( void )
</Desc>
    <FName>Swoole\Client::pipe</FName>
    <Desc>public void Swoole\Client::pipe ( string $socket )
</Desc>
    <FName>Swoole\Client::recv</FName>
    <Desc>public void Swoole\Client::recv ([ string $size [, string $flag ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Client::resume</FName>
    <Desc>public void Swoole\Client::resume ( void )
</Desc>
    <FName>Swoole\Client::send</FName>
    <Desc>public integer Swoole\Client::send ( string $data [, string $flag ] )
</Desc>
    <FName>Swoole\Client::sendfile</FName>
    <Desc>public boolean Swoole\Client::sendfile ( string $filename [, int $offset ] )
This is a wrapper of the Linux sendfile system call.
</Desc>
    <FName>Swoole\Client::sendto</FName>
    <Desc>public boolean Swoole\Client::sendto ( string $ip , integer $port , string $data )
The swoole client should be type of SWOOLE_SOCK_UDP or SWOOLE_SOCK_UDP6.
</Desc>
    <FName>Swoole\Client::set</FName>
    <Desc>public void Swoole\Client::set ( array $settings )
</Desc>
    <FName>Swoole\Client::sleep</FName>
    <Desc>public void Swoole\Client::sleep ( void )
Remove the TCP client from system event loop.
</Desc>
    <FName>Swoole\Client::wakeup</FName>
    <Desc>public void Swoole\Client::wakeup ( void )
</Desc>
    <FName>Swoole\Connection\Iterator::count</FName>
    <Desc>public int Swoole\Connection\Iterator::count ( void )
Gets the number of connections.
</Desc>
    <FName>Swoole\Connection\Iterator::current</FName>
    <Desc>public Connection Swoole\Connection\Iterator::current ( void )
Get current connection entry.
</Desc>
    <FName>Swoole\Connection\Iterator::key</FName>
    <Desc>public int Swoole\Connection\Iterator::key ( void )
This function returns key of the current connection.
</Desc>
    <FName>Swoole\Connection\Iterator::next</FName>
    <Desc>public Connection Swoole\Connection\Iterator::next ( void )
The iterator to the next connection.
</Desc>
    <FName>Swoole\Connection\Iterator::offsetExists</FName>
    <Desc>public boolean Swoole\Connection\Iterator::offsetExists ( int $index )
Check if offset exists.
</Desc>
    <FName>Swoole\Connection\Iterator::offsetGet</FName>
    <Desc>public Connection Swoole\Connection\Iterator::offsetGet ( string $index )
Return the connection at specified offset.
</Desc>
    <FName>Swoole\Connection\Iterator::offsetSet</FName>
    <Desc>public void Swoole\Connection\Iterator::offsetSet ( int $offset , mixed $connection )
Assign a Connection to the specified offset.
</Desc>
    <FName>Swoole\Connection\Iterator::offsetUnset</FName>
    <Desc>public void Swoole\Connection\Iterator::offsetUnset ( int $offset )
Unsets an offset.
</Desc>
    <FName>Swoole\Connection\Iterator::rewind</FName>
    <Desc>public void Swoole\Connection\Iterator::rewind ( void )
</Desc>
    <FName>Swoole\Connection\Iterator::valid</FName>
    <Desc>public boolean Swoole\Connection\Iterator::valid ( void )
Checks if the current position is valid.
</Desc>
    <FName>Swoole\Coroutine\Client::close</FName>
    <Desc>public ReturnType Swoole\Coroutine\Client::close ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Client::connect</FName>
    <Desc>public ReturnType Swoole\Coroutine\Client::connect ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Client::__construct</FName>
    <Desc>public Swoole\Coroutine\Client::__construct ( void )
</Desc>
    <FName>Swoole\Coroutine\Client::__destruct</FName>
    <Desc>public ReturnType Swoole\Coroutine\Client::__destruct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Client::getpeername</FName>
    <Desc>public ReturnType Swoole\Coroutine\Client::getpeername ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Client::getsockname</FName>
    <Desc>public ReturnType Swoole\Coroutine\Client::getsockname ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Client::isConnected</FName>
    <Desc>public ReturnType Swoole\Coroutine\Client::isConnected ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Client::recv</FName>
    <Desc>public ReturnType Swoole\Coroutine\Client::recv ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Client::send</FName>
    <Desc>public ReturnType Swoole\Coroutine\Client::send ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Client::sendfile</FName>
    <Desc>public ReturnType Swoole\Coroutine\Client::sendfile ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Client::sendto</FName>
    <Desc>public ReturnType Swoole\Coroutine\Client::sendto ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Client::set</FName>
    <Desc>public ReturnType Swoole\Coroutine\Client::set ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::addFile</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::addFile ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::close</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::close ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::__construct</FName>
    <Desc>public Swoole\Coroutine\Http\Client::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::__destruct</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::__destruct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::execute</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::execute ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::get</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::get ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::getDefer</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::getDefer ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::isConnected</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::isConnected ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::post</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::post ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::recv</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::recv ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::set</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::set ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::setCookies</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::setCookies ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::setData</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::setData ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::setDefer</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::setDefer ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::setHeaders</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::setHeaders ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\Http\Client::setMethod</FName>
    <Desc>public ReturnType Swoole\Coroutine\Http\Client::setMethod ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\MySQL::close</FName>
    <Desc>public ReturnType Swoole\Coroutine\MySQL::close ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\MySQL::connect</FName>
    <Desc>public ReturnType Swoole\Coroutine\MySQL::connect ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\MySQL::__construct</FName>
    <Desc>public Swoole\Coroutine\MySQL::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\MySQL::__destruct</FName>
    <Desc>public ReturnType Swoole\Coroutine\MySQL::__destruct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\MySQL::getDefer</FName>
    <Desc>public ReturnType Swoole\Coroutine\MySQL::getDefer ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\MySQL::query</FName>
    <Desc>public ReturnType Swoole\Coroutine\MySQL::query ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\MySQL::recv</FName>
    <Desc>public ReturnType Swoole\Coroutine\MySQL::recv ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine\MySQL::setDefer</FName>
    <Desc>public ReturnType Swoole\Coroutine\MySQL::setDefer ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine::call_user_func_array</FName>
    <Desc>public static mixed Swoole\Coroutine::call_user_func_array ( callable $callback , array $param_array )
Calls the callback given by the first parameter with the parameters in param_array.
</Desc>
    <FName>Swoole\Coroutine::call_user_func</FName>
    <Desc>public static mixed Swoole\Coroutine::call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )
Calls the callback given by the first parameter and passes the remaining parameters as arguments.
</Desc>
    <FName>Swoole\Coroutine::cli_wait</FName>
    <Desc>public static ReturnType Swoole\Coroutine::cli_wait ( void )
</Desc>
    <FName>Swoole\Coroutine::create</FName>
    <Desc>public static ReturnType Swoole\Coroutine::create ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine::getuid</FName>
    <Desc>public static ReturnType Swoole\Coroutine::getuid ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine::resume</FName>
    <Desc>public static ReturnType Swoole\Coroutine::resume ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Coroutine::suspend</FName>
    <Desc>public static ReturnType Swoole\Coroutine::suspend ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Event::add</FName>
    <Desc>public static boolean Swoole\Event::add ( int $fd , callable $read_callback [, callable $write_callback [, string $events ]] )
</Desc>
    <FName>Swoole\Event::defer</FName>
    <Desc>public static void Swoole\Event::defer ( mixed $callback )
</Desc>
    <FName>Swoole\Event::del</FName>
    <Desc>public static boolean Swoole\Event::del ( string $fd )
</Desc>
    <FName>Swoole\Event::exit</FName>
    <Desc>public static void Swoole\Event::exit ( void )
</Desc>
    <FName>Swoole\Event::set</FName>
    <Desc>public static boolean Swoole\Event::set ( int $fd [, string $read_callback [, string $write_callback [, string $events ]]] )
</Desc>
    <FName>Swoole\Event::wait</FName>
    <Desc>public static void Swoole\Event::wait ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Event::write</FName>
    <Desc>public static void Swoole\Event::write ( string $fd , string $data )
</Desc>
    <FName>Swoole\Http\Client::addFile</FName>
    <Desc>public void Swoole\Http\Client::addFile ( string $path , string $name [, string $type [, string $filename [, string $offset ]]] )
</Desc>
    <FName>Swoole\Http\Client::close</FName>
    <Desc>public void Swoole\Http\Client::close ( void )
</Desc>
    <FName>Swoole\Http\Client::__construct</FName>
    <Desc>public Swoole\Http\Client::__construct ( string $host [, string $port [, boolean $ssl ]] )
</Desc>
    <FName>Swoole\Http\Client::__destruct</FName>
    <Desc>public void Swoole\Http\Client::__destruct ( void )
</Desc>
    <FName>Swoole\Http\Client::download</FName>
    <Desc>public void Swoole\Http\Client::download ( string $path , string $file , callable $callback [, integer $offset ] )
</Desc>
    <FName>Swoole\Http\Client::execute</FName>
    <Desc>public void Swoole\Http\Client::execute ( string $path , string $callback )
</Desc>
    <FName>Swoole\Http\Client::get</FName>
    <Desc>public void Swoole\Http\Client::get ( string $path , callable $callback )
</Desc>
    <FName>Swoole\Http\Client::isConnected</FName>
    <Desc>public boolean Swoole\Http\Client::isConnected ( void )
</Desc>
    <FName>Swoole\Http\Client::on</FName>
    <Desc>public void Swoole\Http\Client::on ( string $event_name , callable $callback )
</Desc>
    <FName>Swoole\Http\Client::post</FName>
    <Desc>public void Swoole\Http\Client::post ( string $path , string $data , callable $callback )
</Desc>
    <FName>Swoole\Http\Client::push</FName>
    <Desc>public void Swoole\Http\Client::push ( string $data [, string $opcode [, string $finish ]] )
</Desc>
    <FName>Swoole\Http\Client::set</FName>
    <Desc>public void Swoole\Http\Client::set ( array $settings )
</Desc>
    <FName>Swoole\Http\Client::setCookies</FName>
    <Desc>public void Swoole\Http\Client::setCookies ( array $cookies )
</Desc>
    <FName>Swoole\Http\Client::setData</FName>
    <Desc>public ReturnType Swoole\Http\Client::setData ( string $data )
The HTTP method will be changed to be POST.
</Desc>
    <FName>Swoole\Http\Client::setHeaders</FName>
    <Desc>public void Swoole\Http\Client::setHeaders ( array $headers )
</Desc>
    <FName>Swoole\Http\Client::setMethod</FName>
    <Desc>public void Swoole\Http\Client::setMethod ( string $method )
</Desc>
    <FName>Swoole\Http\Client::upgrade</FName>
    <Desc>public void Swoole\Http\Client::upgrade ( string $path , string $callback )
</Desc>
    <FName>Swoole\Http\Request::__destruct</FName>
    <Desc>public void Swoole\Http\Request::__destruct ( void )
</Desc>
    <FName>Swoole\Http\Request::rawcontent</FName>
    <Desc>public string Swoole\Http\Request::rawcontent ( void )
This method is used for the POST data which isn't in the form of `application/x-www-form-urlencoded`. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Http\Response::cookie</FName>
    <Desc>public string Swoole\Http\Response::cookie ( string $name [, string $value [, string $expires [, string $path [, string $domain [, string $secure [, string $httponly ]]]]]] )
</Desc>
    <FName>Swoole\Http\Response::__destruct</FName>
    <Desc>public void Swoole\Http\Response::__destruct ( void )
</Desc>
    <FName>Swoole\Http\Response::end</FName>
    <Desc>public void Swoole\Http\Response::end ([ string $content ] )
</Desc>
    <FName>Swoole\Http\Response::gzip</FName>
    <Desc>public ReturnType Swoole\Http\Response::gzip ([ string $compress_level ] )
The header about Content-Encoding will be added automatically.
</Desc>
    <FName>Swoole\Http\Response::header</FName>
    <Desc>public void Swoole\Http\Response::header ( string $key , string $value [, string $ucwords ] )
</Desc>
    <FName>Swoole\Http\Response::initHeader</FName>
    <Desc>public ReturnType Swoole\Http\Response::initHeader ( void )
Init the HTTP response header.
</Desc>
    <FName>Swoole\Http\Response::rawcookie</FName>
    <Desc>public ReturnType Swoole\Http\Response::rawcookie ( string $name [, string $value [, string $expires [, string $path [, string $domain [, string $secure [, string $httponly ]]]]]] )
</Desc>
    <FName>Swoole\Http\Response::sendfile</FName>
    <Desc>public ReturnType Swoole\Http\Response::sendfile ( string $filename [, int $offset ] )
Send file through the HTTP response.
</Desc>
    <FName>Swoole\Http\Response::status</FName>
    <Desc>public ReturnType Swoole\Http\Response::status ( string $http_code )
Set the status code of the HTTP response.
</Desc>
    <FName>Swoole\Http\Response::write</FName>
    <Desc>public void Swoole\Http\Response::write ( string $content )
Append HTTP body content to the HTTP response.
</Desc>
    <FName>Swoole\Http\Server::on</FName>
    <Desc>public void Swoole\Http\Server::on ( string $event_name , callable $callback )
Bind callback function to HTTP server by event name.
</Desc>
    <FName>Swoole\Http\Server::start</FName>
    <Desc>public void Swoole\Http\Server::start ( void )
Start the swoole http server.
</Desc>
    <FName>Swoole\Lock::__construct</FName>
    <Desc>public Swoole\Lock::__construct ([ string $type [, string $file_lock_location ]] )
Swoole lock is used for data synchronization between multiple theads or processes.
</Desc>
    <FName>Swoole\Lock::__destruct</FName>
    <Desc>public void Swoole\Lock::__destruct ( void )
</Desc>
    <FName>Swoole\Lock::lock_read</FName>
    <Desc>public void Swoole\Lock::lock_read ( void )
Lock a read-write lock for reading.
</Desc>
    <FName>Swoole\Lock::lock</FName>
    <Desc>public void Swoole\Lock::lock ( void )
</Desc>
    <FName>Swoole\Lock::trylock_read</FName>
    <Desc>public void Swoole\Lock::trylock_read ( void )
</Desc>
    <FName>Swoole\Lock::trylock</FName>
    <Desc>public void Swoole\Lock::trylock ( void )
</Desc>
    <FName>Swoole\Lock::unlock</FName>
    <Desc>public void Swoole\Lock::unlock ( void )
</Desc>
    <FName>Swoole\Mmap::open</FName>
    <Desc>public static ReturnType Swoole\Mmap::open ( string $filename [, string $size [, string $offset ]] )
</Desc>
    <FName>Swoole\MySQL::close</FName>
    <Desc>public void Swoole\MySQL::close ( void )
</Desc>
    <FName>Swoole\MySQL::connect</FName>
    <Desc>public void Swoole\MySQL::connect ( array $server_config , callable $callback )
Connect to the remote MySQL server.
</Desc>
    <FName>Swoole\MySQL::__construct</FName>
    <Desc>public Swoole\MySQL::__construct ( void )
Construct an async MySQL client.
</Desc>
    <FName>Swoole\MySQL::__destruct</FName>
    <Desc>public void Swoole\MySQL::__destruct ( void )
</Desc>
    <FName>Swoole\MySQL::getBuffer</FName>
    <Desc>public ReturnType Swoole\MySQL::getBuffer ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\MySQL::on</FName>
    <Desc>public void Swoole\MySQL::on ( string $event_name , callable $callback )
Register callback function based on event name, current only 'close' event is supported.
</Desc>
    <FName>Swoole\MySQL::query</FName>
    <Desc>public ReturnType Swoole\MySQL::query ( string $sql , callable $callback )
</Desc>
    <FName>Swoole\Process::alarm</FName>
    <Desc>public static void Swoole\Process::alarm ( integer $interval_usec )
</Desc>
    <FName>Swoole\Process::close</FName>
    <Desc>public void Swoole\Process::close ( void )
Close the pipe to the child process.
</Desc>
    <FName>Swoole\Process::__construct</FName>
    <Desc>public Swoole\Process::__construct ( callable $callback [, boolean $redirect_stdin_and_stdout [, integer $pipe_type ]] )
</Desc>
    <FName>Swoole\Process::daemon</FName>
    <Desc>public static void Swoole\Process::daemon ([ boolean $nochdir [, boolean $noclose ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Process::__destruct</FName>
    <Desc>public void Swoole\Process::__destruct ( void )
</Desc>
    <FName>Swoole\Process::exec</FName>
    <Desc>public ReturnType Swoole\Process::exec ( string $exec_file , string $args )
The process will be replaced to be the system command process, but the pipe to the parent process will be kept.
</Desc>
    <FName>Swoole\Process::exit</FName>
    <Desc>public void Swoole\Process::exit ([ string $exit_code ] )
</Desc>
    <FName>Swoole\Process::freeQueue</FName>
    <Desc>public void Swoole\Process::freeQueue ( void )
</Desc>
    <FName>Swoole\Process::kill</FName>
    <Desc>public static void Swoole\Process::kill ( integer $pid [, string $signal_no ] )
Send signal to the child process.
</Desc>
    <FName>Swoole\Process::name</FName>
    <Desc>public void Swoole\Process::name ( string $process_name )
</Desc>
    <FName>Swoole\Process::pop</FName>
    <Desc>public mixed Swoole\Process::pop ([ integer $maxsize ] )
</Desc>
    <FName>Swoole\Process::push</FName>
    <Desc>public boolean Swoole\Process::push ( string $data )
</Desc>
    <FName>Swoole\Process::read</FName>
    <Desc>public string Swoole\Process::read ([ integer $maxsize ] )
</Desc>
    <FName>Swoole\Process::signal</FName>
    <Desc>public static void Swoole\Process::signal ( string $signal_no , callable $callback )
</Desc>
    <FName>Swoole\Process::start</FName>
    <Desc>public void Swoole\Process::start ( void )
</Desc>
    <FName>Swoole\Process::statQueue</FName>
    <Desc>public array Swoole\Process::statQueue ( void )
</Desc>
    <FName>Swoole\Process::useQueue</FName>
    <Desc>public boolean Swoole\Process::useQueue ( integer $key [, integer $mode ] )
</Desc>
    <FName>Swoole\Process::wait</FName>
    <Desc>public static array Swoole\Process::wait ([ boolean $blocking ] )
</Desc>
    <FName>Swoole\Process::write</FName>
    <Desc>public integer Swoole\Process::write ( string $data )
</Desc>
    <FName>Swoole\Redis\Server::format</FName>
    <Desc>public static ReturnType Swoole\Redis\Server::format ( string $type [, string $value ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Redis\Server::setHandler</FName>
    <Desc>public ReturnType Swoole\Redis\Server::setHandler ( string $command , string $callback [, string $number_of_string_param [, string $type_of_array_param ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Redis\Server::start</FName>
    <Desc>public ReturnType Swoole\Redis\Server::start ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Serialize::pack</FName>
    <Desc>public static ReturnType Swoole\Serialize::pack ( string $data [, int $is_fast ] )
Swoole provides a fast and high performance serialization module.
</Desc>
    <FName>Swoole\Serialize::unpack</FName>
    <Desc>public static ReturnType Swoole\Serialize::unpack ( string $data [, string $args ] )
Unserialize the data.
</Desc>
    <FName>Swoole\Server\Port::__construct</FName>
    <Desc>private Swoole\Server\Port::__construct ( void )
</Desc>
    <FName>Swoole\Server\Port::__destruct</FName>
    <Desc>public void Swoole\Server\Port::__destruct ( void )
</Desc>
    <FName>Swoole\Server\Port::on</FName>
    <Desc>public ReturnType Swoole\Server\Port::on ( string $event_name , callable $callback )
</Desc>
    <FName>Swoole\Server\Port::set</FName>
    <Desc>public void Swoole\Server\Port::set ( array $settings )
</Desc>
    <FName>Swoole\Server::addlistener</FName>
    <Desc>public void Swoole\Server::addlistener ( string $host , integer $port , string $socket_type )
</Desc>
    <FName>Swoole\Server::addProcess</FName>
    <Desc>public boolean Swoole\Server::addProcess ( swoole_process $process )
</Desc>
    <FName>Swoole\Server::after</FName>
    <Desc>public ReturnType Swoole\Server::after ( integer $after_time_ms , callable $callback [, string $param ] )
</Desc>
    <FName>Swoole\Server::bind</FName>
    <Desc>public boolean Swoole\Server::bind ( integer $fd , integer $uid )
</Desc>
    <FName>Swoole\Server::clearTimer</FName>
    <Desc>Object oriented style (method):
public void Swoole\Server::clearTimer ( integer $timer_id )
Procedural style:
void swoole_timer_clear ( integer $timer_id )
Stop and destory a timer
</Desc>
    <FName>swoole_timer_clear</FName>
    <Desc>Object oriented style (method):
public void Swoole\Server::clearTimer ( integer $timer_id )
Procedural style:
void swoole_timer_clear ( integer $timer_id )
Stop and destory a timer
</Desc>
    <FName>Swoole\Server::close</FName>
    <Desc>public boolean Swoole\Server::close ( integer $fd [, boolean $reset ] )
</Desc>
    <FName>Swoole\Server::confirm</FName>
    <Desc>public boolean Swoole\Server::confirm ( integer $fd )
</Desc>
    <FName>Swoole\Server::connection_info</FName>
    <Desc>public array Swoole\Server::connection_info ( integer $fd [, integer $reactor_id ] )
</Desc>
    <FName>Swoole\Server::connection_list</FName>
    <Desc>public array Swoole\Server::connection_list ( integer $start_fd [, integer $pagesize ] )
</Desc>
    <FName>Swoole\Server::__construct</FName>
    <Desc>public Swoole\Server::__construct ( string $host [, integer $port [, integr $mode [, integer $sock_type ]]] )
</Desc>
    <FName>Swoole\Server::defer</FName>
    <Desc>public void Swoole\Server::defer ( callable $callback )
</Desc>
    <FName>Swoole\Server::exist</FName>
    <Desc>public boolean Swoole\Server::exist ( integer $fd )
</Desc>
    <FName>Swoole\Server::finish</FName>
    <Desc>public void Swoole\Server::finish ( string $data )
</Desc>
    <FName>Swoole\Server::getClientInfo</FName>
    <Desc>public ReturnType Swoole\Server::getClientInfo ( integer $fd [, integer $reactor_id ] )
</Desc>
    <FName>Swoole\Server::getClientList</FName>
    <Desc>public array Swoole\Server::getClientList ( integer $start_fd [, integer $pagesize ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Server::getLastError</FName>
    <Desc>public integer Swoole\Server::getLastError ( void )
</Desc>
    <FName>Swoole\Server::heartbeat</FName>
    <Desc>public mixed Swoole\Server::heartbeat ( boolean $if_close_connection )
</Desc>
    <FName>Swoole\Server::listen</FName>
    <Desc>public boolean Swoole\Server::listen ( string $host , integer $port , string $socket_type )
</Desc>
    <FName>Swoole\Server::on</FName>
    <Desc>public void Swoole\Server::on ( string $event_name , callable $callback )
</Desc>
    <FName>Swoole\Server::pause</FName>
    <Desc>public void Swoole\Server::pause ( integer $fd )
</Desc>
    <FName>Swoole\Server::protect</FName>
    <Desc>public void Swoole\Server::protect ( integer $fd [, boolean $is_protected ] )
</Desc>
    <FName>Swoole\Server::reload</FName>
    <Desc>public boolean Swoole\Server::reload ( void )
</Desc>
    <FName>Swoole\Server::resume</FName>
    <Desc>public void Swoole\Server::resume ( integer $fd )
</Desc>
    <FName>Swoole\Server::send</FName>
    <Desc>public boolean Swoole\Server::send ( integer $fd , string $data [, integer $reactor_id ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Server::sendfile</FName>
    <Desc>public boolean Swoole\Server::sendfile ( integer $fd , string $filename [, integer $offset ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Server::sendMessage</FName>
    <Desc>public boolean Swoole\Server::sendMessage ( integer $worker_id , string $data )
</Desc>
    <FName>Swoole\Server::sendto</FName>
    <Desc>public boolean Swoole\Server::sendto ( string $ip , integer $port , string $data [, string $server_socket ] )
</Desc>
    <FName>Swoole\Server::sendwait</FName>
    <Desc>public boolean Swoole\Server::sendwait ( integer $fd , string $data )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Server::set</FName>
    <Desc>public ReturnType Swoole\Server::set ( array $settings )
Set the runtime settings of the swoole server. The settings can be accessed by $server->setting when the swoole server has started.
</Desc>
    <FName>Swoole\Server::shutdown</FName>
    <Desc>public void Swoole\Server::shutdown ( void )
</Desc>
    <FName>Swoole\Server::start</FName>
    <Desc>public void Swoole\Server::start ( void )
</Desc>
    <FName>Swoole\Server::stats</FName>
    <Desc>public array Swoole\Server::stats ( void )
</Desc>
    <FName>Swoole\Server::stop</FName>
    <Desc>public boolean Swoole\Server::stop ([ integer $worker_id ] )
</Desc>
    <FName>Swoole\Server::task</FName>
    <Desc>public mixed Swoole\Server::task ( string $data [, integer $dst_worker_id [, callable $callback ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Server::taskwait</FName>
    <Desc>public void Swoole\Server::taskwait ( string $data [, float $timeout [, integer $worker_id ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Swoole\Server::taskWaitMulti</FName>
    <Desc>public void Swoole\Server::taskWaitMulti ( array $tasks [, double $timeout_ms ] )
</Desc>
    <FName>Swoole\Server::tick</FName>
    <Desc>public void Swoole\Server::tick ( integer $interval_ms , callable $callback )
</Desc>
    <FName>Swoole\Table::column</FName>
    <Desc>public ReturnType Swoole\Table::column ( string $name , string $type [, integer $size ] )
</Desc>
    <FName>Swoole\Table::__construct</FName>
    <Desc>public Swoole\Table::__construct ( integer $table_size )
</Desc>
    <FName>Swoole\Table::count</FName>
    <Desc>public integer Swoole\Table::count ( void )
</Desc>
    <FName>Swoole\Table::create</FName>
    <Desc>public void Swoole\Table::create ( void )
</Desc>
    <FName>Swoole\Table::current</FName>
    <Desc>public array Swoole\Table::current ( void )
</Desc>
    <FName>Swoole\Table::decr</FName>
    <Desc>public ReturnType Swoole\Table::decr ( string $key , string $column [, integer $decrby ] )
</Desc>
    <FName>Swoole\Table::del</FName>
    <Desc>public void Swoole\Table::del ( string $key )
</Desc>
    <FName>Swoole\Table::destroy</FName>
    <Desc>public void Swoole\Table::destroy ( void )
</Desc>
    <FName>Swoole\Table::exist</FName>
    <Desc>public boolean Swoole\Table::exist ( string $key )
</Desc>
    <FName>Swoole\Table::get</FName>
    <Desc>public integer Swoole\Table::get ( string $row_key , string $column_key )
</Desc>
    <FName>Swoole\Table::incr</FName>
    <Desc>public void Swoole\Table::incr ( string $key , string $column [, integer $incrby ] )
</Desc>
    <FName>Swoole\Table::key</FName>
    <Desc>public string Swoole\Table::key ( void )
</Desc>
    <FName>Swoole\Table::next</FName>
    <Desc>public ReturnType Swoole\Table::next ( void )
</Desc>
    <FName>Swoole\Table::rewind</FName>
    <Desc>public void Swoole\Table::rewind ( void )
</Desc>
    <FName>Swoole\Table::set</FName>
    <Desc>public VOID Swoole\Table::set ( string $key , array $value )
</Desc>
    <FName>Swoole\Table::valid</FName>
    <Desc>public boolean Swoole\Table::valid ( void )
</Desc>
    <FName>Swoole\Timer::after</FName>
    <Desc>public static void Swoole\Timer::after ( int $after_time_ms , callable $callback )
Trigger a callback function after a period of time.
</Desc>
    <FName>Swoole\Timer::clear</FName>
    <Desc>public static void Swoole\Timer::clear ( integer $timer_id )
Delete a timer by timer ID.
</Desc>
    <FName>Swoole\Timer::exists</FName>
    <Desc>public static boolean Swoole\Timer::exists ( integer $timer_id )
Check if a timer is existed.
</Desc>
    <FName>Swoole\Timer::tick</FName>
    <Desc>public static void Swoole\Timer::tick ( integer $interval_ms , callable $callback [, string $param ] )
</Desc>
    <FName>Swoole\WebSocket\Server::exist</FName>
    <Desc>public boolean Swoole\WebSocket\Server::exist ( integer $fd )
</Desc>
    <FName>Swoole\WebSocket\Server::on</FName>
    <Desc>public ReturnType Swoole\WebSocket\Server::on ( string $event_name , callable $callback )
Register event callback function
</Desc>
    <FName>Swoole\WebSocket\Server::pack</FName>
    <Desc>public static binary Swoole\WebSocket\Server::pack ( string $data [, string $opcode [, string $finish [, string $mask ]]] )
</Desc>
    <FName>Swoole\WebSocket\Server::push</FName>
    <Desc>public void Swoole\WebSocket\Server::push ( string $fd , string $data [, string $opcode [, string $finish ]] )
</Desc>
    <FName>Swoole\WebSocket\Server::unpack</FName>
    <Desc>public static string Swoole\WebSocket\Server::unpack ( binary $data )
</Desc>
    <FName>SyncEvent::__construct</FName>
    <Desc>public SyncEvent::__construct ([ string $name [, bool $manual = FALSE [, bool $prefire = FALSE ]]] )
Constructs a named or unnamed event object.
</Desc>
    <FName>SyncEvent::fire</FName>
    <Desc>public bool SyncEvent::fire ( void )
Fires/sets a SyncEvent object. Lets multiple threads through that are waiting if the event object was created with a manual value of TRUE.
</Desc>
    <FName>SyncEvent::reset</FName>
    <Desc>public bool SyncEvent::reset ( void )
Resets a SyncEvent object that has been fired/set. Only valid for manual event objects.
</Desc>
    <FName>SyncEvent::wait</FName>
    <Desc>public bool SyncEvent::wait ([ int $wait = -1 ] )
Waits for the SyncEvent object to be fired.
</Desc>
    <FName>SyncMutex::__construct</FName>
    <Desc>public SyncMutex::__construct ([ string $name ] )
Constructs a named or unnamed countable mutex.
</Desc>
    <FName>SyncMutex::lock</FName>
    <Desc>public bool SyncMutex::lock ([ int $wait = -1 ] )
Obtains an exclusive lock on a SyncMutex object. If the lock is already acquired, then this increments an internal counter.
</Desc>
    <FName>SyncMutex::unlock</FName>
    <Desc>public bool SyncMutex::unlock ([ bool $all = FALSE ] )
Decreases the internal counter of a SyncMutex object. When the internal counter reaches zero, the actual lock on the object is released.
</Desc>
    <FName>SyncReaderWriter::__construct</FName>
    <Desc>public SyncReaderWriter::__construct ([ string $name [, bool $autounlock = TRUE ]] )
Constructs a named or unnamed reader-writer object.
</Desc>
    <FName>SyncReaderWriter::readlock</FName>
    <Desc>public bool SyncReaderWriter::readlock ([ int $wait = -1 ] )
Obtains a read lock on a SyncReaderWriter object.
</Desc>
    <FName>SyncReaderWriter::readunlock</FName>
    <Desc>public bool SyncReaderWriter::readunlock ( void )
Releases a read lock on a SyncReaderWriter object.
</Desc>
    <FName>SyncReaderWriter::writelock</FName>
    <Desc>public bool SyncReaderWriter::writelock ([ int $wait = -1 ] )
Obtains an exclusive write lock on a SyncReaderWriter object.
</Desc>
    <FName>SyncReaderWriter::writeunlock</FName>
    <Desc>public bool SyncReaderWriter::writeunlock ( void )
Releases a write lock on a SyncReaderWriter object.
</Desc>
    <FName>SyncSemaphore::__construct</FName>
    <Desc>public SyncSemaphore::__construct ([ string $name [, int $initialval = 1 [, bool $autounlock = TRUE ]]] )
Constructs a named or unnamed semaphore.
</Desc>
    <FName>SyncSemaphore::lock</FName>
    <Desc>public bool SyncSemaphore::lock ([ int $wait = -1 ] )
Decreases the count of a SyncSemaphore object or waits until the semaphore becomes non-zero.
</Desc>
    <FName>SyncSemaphore::unlock</FName>
    <Desc>public bool SyncSemaphore::unlock ([ int &$prevcount ] )
Increases the count of a SyncSemaphore object.
</Desc>
    <FName>SyncSharedMemory::__construct</FName>
    <Desc>public SyncSharedMemory::__construct ( string $name , int $size )
Constructs a named shared memory object.
</Desc>
    <FName>SyncSharedMemory::first</FName>
    <Desc>public bool SyncSharedMemory::first ( void )
Retrieves the system-wide first instance status of a SyncSharedMemory object.
</Desc>
    <FName>SyncSharedMemory::read</FName>
    <Desc>public SyncSharedMemory::read ([ int $start = 0 [, int $length ]] )
Copies data from named shared memory.
</Desc>
    <FName>SyncSharedMemory::size</FName>
    <Desc>public bool SyncSharedMemory::size ( void )
Retrieves the shared memory size of a SyncSharedMemory object.
</Desc>
    <FName>SyncSharedMemory::write</FName>
    <Desc>public SyncSharedMemory::write ([ string $string [, int $start = 0 ]] )
Copies data to named shared memory.
</Desc>
    <FName>KTaglib_Tag::getAlbum</FName>
    <Desc>public string KTaglib_Tag::getAlbum ( void )
Returns the album string of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.
</Desc>
    <FName>KTaglib_Tag::getArtist</FName>
    <Desc>public string KTaglib_Tag::getArtist ( void )
Returns the artist string of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.
</Desc>
    <FName>KTaglib_Tag::getComment</FName>
    <Desc>public string KTaglib_Tag::getComment ( void )
Returns the comment of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.
</Desc>
    <FName>KTaglib_Tag::getGenre</FName>
    <Desc>public string KTaglib_Tag::getGenre ( void )
Returns the genre of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.
</Desc>
    <FName>KTaglib_Tag::getTitle</FName>
    <Desc>public string KTaglib_Tag::getTitle ( void )
Returns the title string of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.
</Desc>
    <FName>KTaglib_Tag::getTrack</FName>
    <Desc>public int KTaglib_Tag::getTrack ( void )
Returns the track number of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.
</Desc>
    <FName>KTaglib_Tag::getYear</FName>
    <Desc>public int KTaglib_Tag::getYear ( void )
Returns the year of an ID3 tag. This method is implemented in ID3v1 and ID3v2 tags.
</Desc>
    <FName>KTaglib_Tag::isEmpty</FName>
    <Desc>public bool KTaglib_Tag::isEmpty ( void )
Returns true if the tag exists, but is empty. This method is implemented in ID3v1 and ID3v2 tags.
</Desc>
    <FName>Thread::detach</FName>
    <Desc>public void Thread::detach ( void )
Detaches the referenced Thread from the calling context, dangerous! 
Warning 
This method can cause undefined, unsafe behaviour. It should not usually be used, it is present for completeness and advanced use cases.
</Desc>
    <FName>Thread::getCreatorId</FName>
    <Desc>public int Thread::getCreatorId ( void )
Will return the identity of the Thread that created the referenced Thread
</Desc>
    <FName>Thread::getCurrentThread</FName>
    <Desc>public static Thread Thread::getCurrentThread ( void )
Return a reference to the currently executing Thread
</Desc>
    <FName>Thread::getCurrentThreadId</FName>
    <Desc>public static int Thread::getCurrentThreadId ( void )
Will return the identity of the currently executing Thread
</Desc>
    <FName>Thread::getThreadId</FName>
    <Desc>public int Thread::getThreadId ( void )
Will return the identity of the referenced Thread
</Desc>
    <FName>Thread::globally</FName>
    <Desc>public static mixed Thread::globally ( void )
Will execute a Callable in the global scope
</Desc>
    <FName>Thread::isJoined</FName>
    <Desc>public bool Thread::isJoined ( void )
Tell if the referenced Thread has been joined
</Desc>
    <FName>Threaded::isRunning</FName>
    <Desc>public bool Threaded::isRunning ( void )
Tell if the referenced object is executing
</Desc>
    <FName>Thread::isStarted</FName>
    <Desc>public bool Thread::isStarted ( void )
Tell if the referenced Thread was started
</Desc>
    <FName>Thread::join</FName>
    <Desc>public bool Thread::join ( void )
Causes the calling context to wait for the referenced Thread to finish executing
</Desc>
    <FName>Thread::kill</FName>
    <Desc>public void Thread::kill ( void )
Forces the referenced Thread to terminate 
Warning 
The programmer should not ordinarily kill Threads by force
</Desc>
    <FName>Thread::start</FName>
    <Desc>public bool Thread::start ([ int $options ] )
Will start a new Thread to execute the implemented run method
</Desc>
    <FName>Threaded::chunk</FName>
    <Desc>public array Threaded::chunk ( int $size , bool $preserve )
Fetches a chunk of the objects property table of the given size, optionally preserving keys
</Desc>
    <FName>Threaded::count</FName>
    <Desc>public int Threaded::count ( void )
Returns the number of properties for this object
</Desc>
    <FName>Threaded::extend</FName>
    <Desc>public bool Threaded::extend ( string $class )
Makes thread safe standard class at runtime
</Desc>
    <FName>Threaded::from</FName>
    <Desc>public Threaded Threaded::from ( Closure $run [, Closure $construct [, array $args ]] )
Creates an anonymous Threaded object from closures
</Desc>
    <FName>Threaded::getTerminationInfo</FName>
    <Desc>public array Threaded::getTerminationInfo ( void )
Retrieves terminal error information from the referenced object
</Desc>
    <FName>Threaded::isTerminated</FName>
    <Desc>public bool Threaded::isTerminated ( void )
Tell if the referenced object was terminated during execution; suffered fatal errors, or threw uncaught exceptions
</Desc>
    <FName>Threaded::isWaiting</FName>
    <Desc>public bool Threaded::isWaiting ( void )
Tell if the referenced object is waiting for notification
</Desc>
    <FName>Threaded::lock</FName>
    <Desc>public bool Threaded::lock ( void )
Lock the referenced objects property table
</Desc>
    <FName>Threaded::merge</FName>
    <Desc>public bool Threaded::merge ( mixed $from [, bool $overwrite ] )
Merges data into the current object
</Desc>
    <FName>Threaded::notify</FName>
    <Desc>public bool Threaded::notify ( void )
Send notification to the referenced object
</Desc>
    <FName>Threaded::notifyOne</FName>
    <Desc>public bool Threaded::notifyOne ( void )
Send notification to the referenced object. This unblocks at least one of the blocked threads (as opposed to unblocking all of them, as seen with Threaded::notify()).
</Desc>
    <FName>Threaded::pop</FName>
    <Desc>public bool Threaded::pop ( void )
Pops an item from the objects property table
</Desc>
    <FName>Threaded::run</FName>
    <Desc>public void Threaded::run ( void )
The programmer should always implement the run method for objects that are intended for execution.
</Desc>
    <FName>Threaded::shift</FName>
    <Desc>public mixed Threaded::shift ( void )
Shifts an item from the objects property table
</Desc>
    <FName>Threaded::synchronized</FName>
    <Desc>public mixed Threaded::synchronized ( Closure $block [, mixed $... ] )
Executes the block while retaining the referenced objects synchronization lock for the calling context
</Desc>
    <FName>Threaded::unlock</FName>
    <Desc>public bool Threaded::unlock ( void )
Unlock the referenced objects storage for the calling context
</Desc>
    <FName>Threaded::wait</FName>
    <Desc>public bool Threaded::wait ([ int $timeout ] )
Will cause the calling context to wait for notification from the referenced object
</Desc>
    <FName>Throwable::getCode</FName>
    <Desc>abstract public int Throwable::getCode ( void )
Returns the error code associated with the thrown object.
</Desc>
    <FName>Throwable::getFile</FName>
    <Desc>abstract public string Throwable::getFile ( void )
Get the name of the file in which the exception was created.
</Desc>
    <FName>Throwable::getLine</FName>
    <Desc>abstract public int Throwable::getLine ( void )
Returns the line number where the thrown object was instantiated.
</Desc>
    <FName>Throwable::getMessage</FName>
    <Desc>abstract public string Throwable::getMessage ( void )
Returns the message associated with the thrown object.
</Desc>
    <FName>Throwable::getPrevious</FName>
    <Desc>abstract public Throwable Throwable::getPrevious ( void )
Returns any previous Throwable (for example, one provided as the third parameter to Exception::__construct()).
</Desc>
    <FName>Throwable::getTrace</FName>
    <Desc>abstract public array Throwable::getTrace ( void )
Returns the stack trace as an array.
</Desc>
    <FName>Throwable::getTraceAsString</FName>
    <Desc>abstract public string Throwable::getTraceAsString ( void )
</Desc>
    <FName>Throwable::__toString</FName>
    <Desc>abstract public string Throwable::__toString ( void )
</Desc>
    <FName>tidy::body</FName>
    <Desc>Object oriented style
tidyNode tidy::body ( void )
Procedural style
tidyNode tidy_get_body ( tidy $object )
Returns a tidyNode object starting from the <body> tag of the tidy parse tree.
</Desc>
    <FName>tidy_get_body</FName>
    <Desc>Object oriented style
tidyNode tidy::body ( void )
Procedural style
tidyNode tidy_get_body ( tidy $object )
Returns a tidyNode object starting from the <body> tag of the tidy parse tree.
</Desc>
    <FName>tidy::cleanRepair</FName>
    <Desc>Object oriented style
bool tidy::cleanRepair ( void )
Procedural style
bool tidy_clean_repair ( tidy $object )
This function cleans and repairs the given tidy object.
</Desc>
    <FName>tidy_clean_repair</FName>
    <Desc>Object oriented style
bool tidy::cleanRepair ( void )
Procedural style
bool tidy_clean_repair ( tidy $object )
This function cleans and repairs the given tidy object.
</Desc>
    <FName>tidy::__construct</FName>
    <Desc>tidy::__construct ([ string $filename [, mixed $config [, string $encoding [, bool $use_include_path ]]]] )
Constructs a new tidy object.
</Desc>
    <FName>tidy::diagnose</FName>
    <Desc>Object oriented style
bool tidy::diagnose ( void )
Procedural style
bool tidy_diagnose ( tidy $object )
Runs diagnostic tests on the given tidy object, adding some more information about the document in the error buffer.
</Desc>
    <FName>tidy_diagnose</FName>
    <Desc>Object oriented style
bool tidy::diagnose ( void )
Procedural style
bool tidy_diagnose ( tidy $object )
Runs diagnostic tests on the given tidy object, adding some more information about the document in the error buffer.
</Desc>
    <FName>tidy::getConfig</FName>
    <Desc>Object oriented style
array tidy::getConfig ( void )
Procedural style
array tidy_get_config ( tidy $object )
Gets the list of the configuration options in use by the given tidy object.
</Desc>
    <FName>tidy_get_config</FName>
    <Desc>Object oriented style
array tidy::getConfig ( void )
Procedural style
array tidy_get_config ( tidy $object )
Gets the list of the configuration options in use by the given tidy object.
</Desc>
    <FName>tidy::getHtmlVer</FName>
    <Desc>Object oriented style
int tidy::getHtmlVer ( void )
Procedural style
int tidy_get_html_ver ( tidy $object )
Returns the detected HTML version for the specified tidy object.
</Desc>
    <FName>tidy_get_html_ver</FName>
    <Desc>Object oriented style
int tidy::getHtmlVer ( void )
Procedural style
int tidy_get_html_ver ( tidy $object )
Returns the detected HTML version for the specified tidy object.
</Desc>
    <FName>tidy::getOpt</FName>
    <Desc>Object oriented style
mixed tidy::getOpt ( string $option )
Procedural style
mixed tidy_getopt ( tidy $object , string $option )
Returns the value of the specified option for the specified tidy object.
</Desc>
    <FName>tidy_getopt</FName>
    <Desc>Object oriented style
mixed tidy::getOpt ( string $option )
Procedural style
mixed tidy_getopt ( tidy $object , string $option )
Returns the value of the specified option for the specified tidy object.
</Desc>
    <FName>tidy::getOptDoc</FName>
    <Desc>Object oriented style
string tidy::getOptDoc ( string $optname )
Procedural style
string tidy_get_opt_doc ( tidy $object , string $optname )
tidy_get_opt_doc() returns the documentation for the given option name. 
Note: 
You need at least libtidy from 25 April, 2005 for this function be available.
</Desc>
    <FName>tidy_get_opt_doc</FName>
    <Desc>Object oriented style
string tidy::getOptDoc ( string $optname )
Procedural style
string tidy_get_opt_doc ( tidy $object , string $optname )
tidy_get_opt_doc() returns the documentation for the given option name. 
Note: 
You need at least libtidy from 25 April, 2005 for this function be available.
</Desc>
    <FName>tidy::getRelease</FName>
    <Desc>Object oriented style
string tidy::getRelease ( void )
Procedural style
string tidy_get_release ( void )
Gets the release date of the Tidy library.
</Desc>
    <FName>tidy_get_release</FName>
    <Desc>Object oriented style
string tidy::getRelease ( void )
Procedural style
string tidy_get_release ( void )
Gets the release date of the Tidy library.
</Desc>
    <FName>tidy::getStatus</FName>
    <Desc>Object oriented style
int tidy::getStatus ( void )
Procedural style
int tidy_get_status ( tidy $object )
Returns the status for the specified tidy object.
</Desc>
    <FName>tidy_get_status</FName>
    <Desc>Object oriented style
int tidy::getStatus ( void )
Procedural style
int tidy_get_status ( tidy $object )
Returns the status for the specified tidy object.
</Desc>
    <FName>tidy::head</FName>
    <Desc>Object oriented style
tidyNode tidy::head ( void )
Procedural style
tidyNode tidy_get_head ( tidy $object )
Returns a tidyNode object starting from the <head> tag of the tidy parse tree.
</Desc>
    <FName>tidy_get_head</FName>
    <Desc>Object oriented style
tidyNode tidy::head ( void )
Procedural style
tidyNode tidy_get_head ( tidy $object )
Returns a tidyNode object starting from the <head> tag of the tidy parse tree.
</Desc>
    <FName>tidy::html</FName>
    <Desc>Object oriented style
tidyNode tidy::html ( void )
Procedural style
tidyNode tidy_get_html ( tidy $object )
Returns a tidyNode object starting from the <html> tag of the tidy parse tree.
</Desc>
    <FName>tidy_get_html</FName>
    <Desc>Object oriented style
tidyNode tidy::html ( void )
Procedural style
tidyNode tidy_get_html ( tidy $object )
Returns a tidyNode object starting from the <html> tag of the tidy parse tree.
</Desc>
    <FName>tidy::isXhtml</FName>
    <Desc>Object oriented style
bool tidy::isXhtml ( void )
Procedural style
bool tidy_is_xhtml ( tidy $object )
Tells if the document is a XHTML document.
</Desc>
    <FName>tidy_is_xhtml</FName>
    <Desc>Object oriented style
bool tidy::isXhtml ( void )
Procedural style
bool tidy_is_xhtml ( tidy $object )
Tells if the document is a XHTML document.
</Desc>
    <FName>tidy::isXml</FName>
    <Desc>Object oriented style
bool tidy::isXml ( void )
Procedural style
bool tidy_is_xml ( tidy $object )
Tells if the document is a generic (non HTML/XHTML) XML document.
</Desc>
    <FName>tidy_is_xml</FName>
    <Desc>Object oriented style
bool tidy::isXml ( void )
Procedural style
bool tidy_is_xml ( tidy $object )
Tells if the document is a generic (non HTML/XHTML) XML document.
</Desc>
    <FName>tidy::parseFile</FName>
    <Desc>Object oriented style
bool tidy::parseFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE ]]] )
Procedural style
tidy tidy_parse_file ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE ]]] )
Parses the given file.
</Desc>
    <FName>tidy_parse_file</FName>
    <Desc>Object oriented style
bool tidy::parseFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE ]]] )
Procedural style
tidy tidy_parse_file ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE ]]] )
Parses the given file.
</Desc>
    <FName>tidy::parseString</FName>
    <Desc>Object oriented style
bool tidy::parseString ( string $input [, mixed $config [, string $encoding ]] )
Procedural style
tidy tidy_parse_string ( string $input [, mixed $config [, string $encoding ]] )
Parses a document stored in a string.
</Desc>
    <FName>tidy_parse_string</FName>
    <Desc>Object oriented style
bool tidy::parseString ( string $input [, mixed $config [, string $encoding ]] )
Procedural style
tidy tidy_parse_string ( string $input [, mixed $config [, string $encoding ]] )
Parses a document stored in a string.
</Desc>
    <FName>tidy::$errorBuffer</FName>
    <Desc>Object oriented style (property):
string $tidy->errorBuffer;
Procedural style:
string tidy_get_error_buffer ( tidy $tidy )
Returns warnings and errors which occurred parsing the specified document.
</Desc>
    <FName>tidy_get_error_buffer</FName>
    <Desc>Object oriented style (property):
string $tidy->errorBuffer;
Procedural style:
string tidy_get_error_buffer ( tidy $tidy )
Returns warnings and errors which occurred parsing the specified document.
</Desc>
    <FName>tidy::repairFile</FName>
    <Desc>Object oriented style
string tidy::repairFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE ]]] )
Procedural style
string tidy_repair_file ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE ]]] )
Repairs the given file and returns it as a string.
</Desc>
    <FName>tidy_repair_file</FName>
    <Desc>Object oriented style
string tidy::repairFile ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE ]]] )
Procedural style
string tidy_repair_file ( string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE ]]] )
Repairs the given file and returns it as a string.
</Desc>
    <FName>tidy::repairString</FName>
    <Desc>Object oriented style
string tidy::repairString ( string $data [, mixed $config [, string $encoding ]] )
Procedural style
string tidy_repair_string ( string $data [, mixed $config [, string $encoding ]] )
Repairs the given string.
</Desc>
    <FName>tidy_repair_string</FName>
    <Desc>Object oriented style
string tidy::repairString ( string $data [, mixed $config [, string $encoding ]] )
Procedural style
string tidy_repair_string ( string $data [, mixed $config [, string $encoding ]] )
Repairs the given string.
</Desc>
    <FName>tidy::root</FName>
    <Desc>Object oriented style
tidyNode tidy::root ( void )
Procedural style
tidyNode tidy_get_root ( tidy $object )
Returns a tidyNode object representing the root of the tidy parse tree.
</Desc>
    <FName>tidy_get_root</FName>
    <Desc>Object oriented style
tidyNode tidy::root ( void )
Procedural style
tidyNode tidy_get_root ( tidy $object )
Returns a tidyNode object representing the root of the tidy parse tree.
</Desc>
    <FName>tidyNode::getParent</FName>
    <Desc>tidyNode tidyNode::getParent ( void )
Returns the parent node of the current node.
</Desc>
    <FName>tidyNode::hasChildren</FName>
    <Desc>bool tidyNode::hasChildren ( void )
Tells if the node has children.
</Desc>
    <FName>tidyNode::hasSiblings</FName>
    <Desc>bool tidyNode::hasSiblings ( void )
Tells if the node has siblings.
</Desc>
    <FName>tidyNode::isAsp</FName>
    <Desc>bool tidyNode::isAsp ( void )
Tells whether the current node is ASP.
</Desc>
    <FName>tidyNode::isComment</FName>
    <Desc>bool tidyNode::isComment ( void )
Tells if the node is a comment.
</Desc>
    <FName>tidyNode::isHtml</FName>
    <Desc>bool tidyNode::isHtml ( void )
Tells if the node is part of HTML document.
</Desc>
    <FName>tidyNode::isJste</FName>
    <Desc>bool tidyNode::isJste ( void )
Tells if the node is JSTE.
</Desc>
    <FName>tidyNode::isPhp</FName>
    <Desc>bool tidyNode::isPhp ( void )
Tells if the node is PHP.
</Desc>
    <FName>tidyNode::isText</FName>
    <Desc>bool tidyNode::isText ( void )
Tells if the node represents a text (without any markup).
</Desc>
    <FName>TokyoTyrant::add</FName>
    <Desc>public number TokyoTyrant::add ( string $key , number $increment [, int $type = 0 ] )
Adds to an int or double value. This increments the value by the given amount and returns the new value. If the key does not exist a new key is created with initial value of the increment parameter.
</Desc>
    <FName>TokyoTyrant::connect</FName>
    <Desc>public TokyoTyrant TokyoTyrant::connect ( string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]] )
Connects to a remote database
</Desc>
    <FName>TokyoTyrant::connectUri</FName>
    <Desc>public TokyoTyrant TokyoTyrant::connectUri ( string $uri )
Connects to a database using an uri
</Desc>
    <FName>TokyoTyrant::__construct</FName>
    <Desc>public TokyoTyrant::__construct ([ string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options ]]] )
Constructs a new TokyoTyrant object and optionally connects to the database
</Desc>
    <FName>TokyoTyrant::copy</FName>
    <Desc>public TokyoTyrant TokyoTyrant::copy ( string $path )
Makes a copy of the current database
</Desc>
    <FName>TokyoTyrant::ext</FName>
    <Desc>public string TokyoTyrant::ext ( string $name , int $options , string $key , string $value )
Executes a remote script extension.
</Desc>
    <FName>TokyoTyrant::fwmKeys</FName>
    <Desc>public array TokyoTyrant::fwmKeys ( string $prefix , int $max_recs )
Returns the forward matching keys from the database
</Desc>
    <FName>TokyoTyrant::get</FName>
    <Desc>public mixed TokyoTyrant::get ( mixed $keys )
This method is used to return a value or multiple values. This method accepts a string or an array as a value.
</Desc>
    <FName>TokyoTyrant::getIterator</FName>
    <Desc>public TokyoTyrantIterator TokyoTyrant::getIterator ( void )
Gets an iterator for iterating all keys / values in the database.
</Desc>
    <FName>TokyoTyrant::num</FName>
    <Desc>public int TokyoTyrant::num ( void )
Returns the number of records in the database
</Desc>
    <FName>TokyoTyrant::out</FName>
    <Desc>public TokyoTyrant TokyoTyrant::out ( mixed $keys )
Removes a record or multiple records. This method accepts a string for a single key or an array of keys for multiple records.
</Desc>
    <FName>TokyoTyrant::put</FName>
    <Desc>public TokyoTyrant TokyoTyrant::put ( mixed $keys [, string $value = NULL ] )
Puts a key-value pair into the database or multiple key-value pairs. If keys is string then the second parameter value defines the value. The second parameter is mandatory if keys is a string. If the key exists the value will be replaced with new value.
</Desc>
    <FName>TokyoTyrant::putCat</FName>
    <Desc>public TokyoTyrant TokyoTyrant::putCat ( mixed $keys [, string $value ] )
Appends a value into existing key or multiple values if keys is an array. The second parameter is mandatory if keys is a string. If the record does not exist a new record is created.
</Desc>
    <FName>TokyoTyrant::putKeep</FName>
    <Desc>public TokyoTyrant TokyoTyrant::putKeep ( mixed $keys [, string $value ] )
Puts a key-value pair into the database or multiple key-value pairs. If keys is string then the second parameter value defines the value. The second parameter is mandatory if keys is a string. If the key already exists this method throws an exception indicating that the records exists.
</Desc>
    <FName>TokyoTyrant::putNr</FName>
    <Desc>public TokyoTyrant TokyoTyrant::putNr ( mixed $keys [, string $value = NULL ] )
Puts a key-value pair into the database or multiple key-value pairs. If keys is string then the second parameter value defines the value. The second parameter is mandatory if keys is a string. This method does not wait for the response from the server.
</Desc>
    <FName>TokyoTyrant::putShl</FName>
    <Desc>public mixed TokyoTyrant::putShl ( string $key , string $value , int $width )
Concatenate to a record and shift to left.
</Desc>
    <FName>TokyoTyrant::restore</FName>
    <Desc>public mixed TokyoTyrant::restore ( string $log_dir , int $timestamp [, bool $check_consistency = TRUE ] )
Restore the database from the update log. 
Warning 
This method is not supported on 32bit platforms.
</Desc>
    <FName>TokyoTyrant::setMaster</FName>
    <Desc>public mixed TokyoTyrant::setMaster ( string $host , int $port , int $timestamp [, bool $check_consistency = TRUE ] )
Sets the replication master of the database 
Warning 
This method is not supported on 32bit platforms.
</Desc>
    <FName>TokyoTyrant::size</FName>
    <Desc>public int TokyoTyrant::size ( string $key )
Returns the size of a value by key
</Desc>
    <FName>TokyoTyrant::stat</FName>
    <Desc>public array TokyoTyrant::stat ( void )
Returns statistics of the remote database
</Desc>
    <FName>TokyoTyrant::sync</FName>
    <Desc>public mixed TokyoTyrant::sync ( void )
Synchronizes the database on to the physical device
</Desc>
    <FName>TokyoTyrant::tune</FName>
    <Desc>public TokyoTyrant TokyoTyrant::tune ( float $timeout [, int $options = TokyoTyrant::RDBT_RECON ] )
Tunes database connection options.
</Desc>
    <FName>TokyoTyrant::vanish</FName>
    <Desc>public mixed TokyoTyrant::vanish ( void )
Empties a remote database
</Desc>
    <FName>TokyoTyrantIterator::__construct</FName>
    <Desc>public TokyoTyrantIterator::__construct ( mixed $object )
Construct a new TokyoTyrantIterator object. One connection can have multiple iterators but it is not quaranteed that all items are traversed in that case. object parameter can be either an of instance TokyoTyrant or TokyoTyrantTable.
</Desc>
    <FName>TokyoTyrantIterator::current</FName>
    <Desc>public mixed TokyoTyrantIterator::current ( void )
Returns the current value during iteration.
</Desc>
    <FName>TokyoTyrantIterator::key</FName>
    <Desc>public mixed TokyoTyrantIterator::key ( void )
Returns the current key.
</Desc>
    <FName>TokyoTyrantIterator::next</FName>
    <Desc>public mixed TokyoTyrantIterator::next ( void )
Move to next key during iteration and return it's value.
</Desc>
    <FName>TokyoTyrantIterator::rewind</FName>
    <Desc>public void TokyoTyrantIterator::rewind ( void )
Rewinds the iterator for new iteration. Called automatically at the beginning of foreach.
</Desc>
    <FName>TokyoTyrantIterator::valid</FName>
    <Desc>public bool TokyoTyrantIterator::valid ( void )
Checks whether the internal pointer points to valid element.
</Desc>
    <FName>TokyoTyrantQuery::addCond</FName>
    <Desc>public mixed TokyoTyrantQuery::addCond ( string $name , int $op , string $expr )
Adds a condition to the query. Condition can be something like: get all keys which value matches expr.
</Desc>
    <FName>TokyoTyrantQuery::__construct</FName>
    <Desc>public TokyoTyrantQuery::__construct ( TokyoTyrantTable $table )
Construct a new query object
</Desc>
    <FName>TokyoTyrantQuery::count</FName>
    <Desc>public int TokyoTyrantQuery::count ( void )
Returns a count of how many records a query returns.
</Desc>
    <FName>TokyoTyrantQuery::current</FName>
    <Desc>public array TokyoTyrantQuery::current ( void )
Returns the current element. Part of Iterator interface
</Desc>
    <FName>TokyoTyrantQuery::hint</FName>
    <Desc>public string TokyoTyrantQuery::hint ( void )
Get the hint string of the query. The hint string contains information about an executed query and it could be compared to for example MySQL EXPLAIN statement.
</Desc>
    <FName>TokyoTyrantQuery::key</FName>
    <Desc>public string TokyoTyrantQuery::key ( void )
Returns the current key. Part of the Iterator interface
</Desc>
    <FName>TokyoTyrantQuery::metaSearch</FName>
    <Desc>public array TokyoTyrantQuery::metaSearch ( array $queries , int $type )
Executes multiple queries on a database and returns matching records. The current object is always the left most object in the search.
</Desc>
    <FName>TokyoTyrantQuery::next</FName>
    <Desc>public array TokyoTyrantQuery::next ( void )
Returns the next result in the resultset. Part of the Iterator interface.
</Desc>
    <FName>TokyoTyrantQuery::out</FName>
    <Desc>public TokyoTyrantQuery TokyoTyrantQuery::out ( void )
Removes all records that match the query. Works exactly like search but removes the records instead of returning them.
</Desc>
    <FName>TokyoTyrantQuery::rewind</FName>
    <Desc>public bool TokyoTyrantQuery::rewind ( void )
Rewind the resultset and executes the query if it has not been executed. Part of the Iterator interface.
</Desc>
    <FName>TokyoTyrantQuery::search</FName>
    <Desc>public array TokyoTyrantQuery::search ( void )
Executes a search on the table database. Returns an array of arrays containing the matching records. In the returned array the first level is the primary key of the data and the second level is the row data.
</Desc>
    <FName>TokyoTyrantQuery::setLimit</FName>
    <Desc>public mixed TokyoTyrantQuery::setLimit ([ int $max [, int $skip ]] )
Set the maximum amount of records to return on a query.
</Desc>
    <FName>TokyoTyrantQuery::setOrder</FName>
    <Desc>public mixed TokyoTyrantQuery::setOrder ( string $name , int $type )
Sets the order of a query
</Desc>
    <FName>TokyoTyrantQuery::valid</FName>
    <Desc>public bool TokyoTyrantQuery::valid ( void )
Checks if the current item is valid. Part of the Iterator interface
</Desc>
    <FName>TokyoTyrantTable::add</FName>
    <Desc>public void TokyoTyrantTable::add ( string $key , mixed $increment [, string $type ] )
This method is not supported with table databases.
</Desc>
    <FName>TokyoTyrantTable::genUid</FName>
    <Desc>public int TokyoTyrantTable::genUid ( void )
Generates an unique id inside the table database. In table databases rows are referenced using a numeric primary key.
</Desc>
    <FName>TokyoTyrantTable::get</FName>
    <Desc>public array TokyoTyrantTable::get ( mixed $keys )
Gets a row from table database. keys is a single integer for the primary key of the row or an array of integers for multiple rows.
</Desc>
    <FName>TokyoTyrantTable::getIterator</FName>
    <Desc>public TokyoTyrantIterator TokyoTyrantTable::getIterator ( void )
Gets an iterator for iterating all keys / values in the database.
</Desc>
    <FName>TokyoTyrantTable::getQuery</FName>
    <Desc>public TokyoTyrantQuery TokyoTyrantTable::getQuery ( void )
Get a query object to execute searches on the database
</Desc>
    <FName>TokyoTyrantTable::out</FName>
    <Desc>public void TokyoTyrantTable::out ( mixed $keys )
Removes records from a table database.
</Desc>
    <FName>TokyoTyrantTable::put</FName>
    <Desc>public int TokyoTyrantTable::put ( string $key , array $columns )
Puts a new row into the database. This method parameters are key which is the primary key of the row, passing NULL will generate a new unique id. value is an array containing the row contents which is usually key value pairs.
</Desc>
    <FName>TokyoTyrantTable::putCat</FName>
    <Desc>public void TokyoTyrantTable::putCat ( string $key , array $columns )
This method can be used to add new columns to existing records. Existing keys will be left unmodified but any new columns will be appended to the row. Passing null as key will generate a new row.
</Desc>
    <FName>TokyoTyrantTable::putKeep</FName>
    <Desc>public void TokyoTyrantTable::putKeep ( string $key , array $columns )
Puts a new record into the database. If the key already exists this method throws an exception indicating that the records exists.
</Desc>
    <FName>TokyoTyrantTable::putNr</FName>
    <Desc>public void TokyoTyrantTable::putNr ( mixed $keys [, string $value ] )
This method is not supported on table databases. Calling this method through TokyoTyrantTable is considered an error and an TokyoTyrantException will be thrown.
</Desc>
    <FName>TokyoTyrantTable::putShl</FName>
    <Desc>public void TokyoTyrantTable::putShl ( string $key , string $value , int $width )
This method is not supported on table databases. Calling this method through TokyoTyrantTable is considered an error and an TokyoTyrantException will be thrown.
</Desc>
    <FName>TokyoTyrantTable::setIndex</FName>
    <Desc>public mixed TokyoTyrantTable::setIndex ( string $column , int $type )
Sets an index on a specified column. The index type is one of the TokyoTyrant::RDBIT_* constants. Passing TokyoTyrant::RDBIT_VOID removes the index.
</Desc>
    <FName>Transliterator::__construct</FName>
    <Desc>Transliterator::__construct ( void )
This method should not be called. Its only purpose is to deny instantiation with the new operator. 
Use the factory methods Transliterator::create() or Transliterator::createFromRules() instead.
</Desc>
    <FName>Transliterator::create</FName>
    <Desc>Object oriented style
public static Transliterator Transliterator::create ( string $id [, int $direction ] )
Procedural style
Transliterator transliterator_create ( string $id [, int $direction ] )
Opens a Transliterator by id. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>transliterator_create</FName>
    <Desc>Object oriented style
public static Transliterator Transliterator::create ( string $id [, int $direction ] )
Procedural style
Transliterator transliterator_create ( string $id [, int $direction ] )
Opens a Transliterator by id. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Transliterator::createFromRules</FName>
    <Desc>Object oriented style
public static Transliterator Transliterator::createFromRules ( string $rules [, string $direction ] )
Procedural style
Transliterator transliterator_create_from_rules ( string $id [, int $direction ] )
Creates a Transliterator from rules. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>transliterator_create_from_rules</FName>
    <Desc>Object oriented style
public static Transliterator Transliterator::createFromRules ( string $rules [, string $direction ] )
Procedural style
Transliterator transliterator_create_from_rules ( string $id [, int $direction ] )
Creates a Transliterator from rules. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Transliterator::createInverse</FName>
    <Desc>Object oriented style
public Transliterator Transliterator::createInverse ( void )
Procedural style
Transliterator transliterator_create_inverse ( void )
Opens the inverse transliterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>transliterator_create_inverse</FName>
    <Desc>Object oriented style
public Transliterator Transliterator::createInverse ( void )
Procedural style
Transliterator transliterator_create_inverse ( void )
Opens the inverse transliterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Transliterator::getErrorCode</FName>
    <Desc>Object oriented style
public int Transliterator::getErrorCode ( void )
Procedural style
int transliterator_get_error_code ( void )
Gets the last error code for this transliterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>transliterator_get_error_code</FName>
    <Desc>Object oriented style
public int Transliterator::getErrorCode ( void )
Procedural style
int transliterator_get_error_code ( void )
Gets the last error code for this transliterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Transliterator::getErrorMessage</FName>
    <Desc>Object oriented style
public string Transliterator::getErrorMessage ( void )
Procedural style
string transliterator_get_error_message ( void )
Gets the last error message for this transliterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>transliterator_get_error_message</FName>
    <Desc>Object oriented style
public string Transliterator::getErrorMessage ( void )
Procedural style
string transliterator_get_error_message ( void )
Gets the last error message for this transliterator. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Transliterator::listIDs</FName>
    <Desc>Object oriented style
public static array Transliterator::listIDs ( void )
Procedural style
array transliterator_list_ids ( void )
Returns an array with the registered transliterator IDs. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>transliterator_list_ids</FName>
    <Desc>Object oriented style
public static array Transliterator::listIDs ( void )
Procedural style
array transliterator_list_ids ( void )
Returns an array with the registered transliterator IDs. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Transliterator::transliterate</FName>
    <Desc>Object oriented style
public string Transliterator::transliterate ( string $subject [, int $start [, int $end ]] )
Procedural style
transliterator_transliterate ( mixed $transliterator , string $subject [, int $start [, int $end ]] )
Transforms a string or part thereof using an ICU transliterator.
</Desc>
    <FName>transliterator_transliterate</FName>
    <Desc>Object oriented style
public string Transliterator::transliterate ( string $subject [, int $start [, int $end ]] )
Procedural style
transliterator_transliterate ( mixed $transliterator , string $subject [, int $start [, int $end ]] )
Transforms a string or part thereof using an ICU transliterator.
</Desc>
    <FName>UConverter::__construct</FName>
    <Desc>public UConverter::__construct ([ string $destination_encoding [, string $source_encoding ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::convert</FName>
    <Desc>public string UConverter::convert ( string $str [, bool $reverse ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::fromUCallback</FName>
    <Desc>public mixed UConverter::fromUCallback ( int $reason , string $source , string $codePoint , int &$error )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::getAliases</FName>
    <Desc>public static array UConverter::getAliases ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::getAvailable</FName>
    <Desc>public static array UConverter::getAvailable ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::getDestinationEncoding</FName>
    <Desc>public string UConverter::getDestinationEncoding ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::getDestinationType</FName>
    <Desc>public int UConverter::getDestinationType ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::getErrorCode</FName>
    <Desc>public int UConverter::getErrorCode ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::getErrorMessage</FName>
    <Desc>public string UConverter::getErrorMessage ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::getSourceEncoding</FName>
    <Desc>public string UConverter::getSourceEncoding ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::getSourceType</FName>
    <Desc>public int UConverter::getSourceType ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::getStandards</FName>
    <Desc>public static array UConverter::getStandards ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::getSubstChars</FName>
    <Desc>public string UConverter::getSubstChars ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::reasonText</FName>
    <Desc>public static string UConverter::reasonText ([ int $reason ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::setDestinationEncoding</FName>
    <Desc>public void UConverter::setDestinationEncoding ( string $encoding )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::setSourceEncoding</FName>
    <Desc>public void UConverter::setSourceEncoding ( string $encoding )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::setSubstChars</FName>
    <Desc>public void UConverter::setSubstChars ( string $chars )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::toUCallback</FName>
    <Desc>public mixed UConverter::toUCallback ( int $reason , string $source , string $codeUnits , int &$error )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UConverter::transcode</FName>
    <Desc>public static string UConverter::transcode ( string $str , string $toEncoding , string $fromEncoding [, array $options ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UI\Area::onDraw</FName>
    <Desc>protected UI\Area::onDraw ( UI\Draw\Pen $pen , UI\Size $areaSize , UI\Point $clipPoint , UI\Size $clipSize )
Shall be invoked when this Area requires redrawing
</Desc>
    <FName>UI\Area::onKey</FName>
    <Desc>protected UI\Area::onKey ( string $key , int $ext , int $flags )
Shall be executed on key events
</Desc>
    <FName>UI\Area::onMouse</FName>
    <Desc>protected UI\Area::onMouse ( UI\Point $areaPoint , UI\Size $areaSize , int $flags )
Shall be executed on mouse events
</Desc>
    <FName>UI\Area::redraw</FName>
    <Desc>public UI\Area::redraw ( void )
Requests that this Area is redrawn
</Desc>
    <FName>UI\Area::scrollTo</FName>
    <Desc>public UI\Area::scrollTo ( UI\Point $point , UI\Size $size )
Scroll this Area
</Desc>
    <FName>UI\Area::setSize</FName>
    <Desc>public UI\Area::setSize ( UI\Size $size )
Sets the size of this Area
</Desc>
    <FName>UI\Control::destroy</FName>
    <Desc>public UI\Control::destroy ( void )
Shall destroy this Control
</Desc>
    <FName>UI\Control::disable</FName>
    <Desc>public UI\Control::disable ( void )
Shall disable this Control
</Desc>
    <FName>UI\Control::enable</FName>
    <Desc>public UI\Control::enable ( void )
Shall enable this Control
</Desc>
    <FName>UI\Control::getParent</FName>
    <Desc>public UI\Control UI\Control::getParent ( void )
Shall return the parent Control
</Desc>
    <FName>UI\Control::getTopLevel</FName>
    <Desc>public int UI\Control::getTopLevel ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UI\Control::hide</FName>
    <Desc>public UI\Control::hide ( void )
Shall hide this Control
</Desc>
    <FName>UI\Control::isEnabled</FName>
    <Desc>public bool UI\Control::isEnabled ( void )
Shall detect if this Control is enabled
</Desc>
    <FName>UI\Control::isVisible</FName>
    <Desc>public bool UI\Control::isVisible ( void )
Shall detect if this Control is visible
</Desc>
    <FName>UI\Control::setParent</FName>
    <Desc>public UI\Control::setParent ( UI\Control $parent )
Shall set the parent Control of this Control
</Desc>
    <FName>UI\Control::show</FName>
    <Desc>public UI\Control::show ( void )
Shall show this Control
</Desc>
    <FName>UI\Controls\Box::append</FName>
    <Desc>public int UI\Controls\Box::append ( Control $control [, bool $stretchy = FALSE ] )
Shall append the given control to this Box
</Desc>
    <FName>UI\Controls\Box::__construct</FName>
    <Desc>public UI\Controls\Box::__construct ([ int $orientation = UI\Controls\Box::Horizontal ] )
Shall construct a new box
</Desc>
    <FName>UI\Controls\Box::delete</FName>
    <Desc>public bool UI\Controls\Box::delete ( int $index )
Shall delete the control at the given index from this Box
</Desc>
    <FName>UI\Controls\Box::getOrientation</FName>
    <Desc>public int UI\Controls\Box::getOrientation ( void )
Shall retrieve the orientation of this Box
</Desc>
    <FName>UI\Controls\Box::isPadded</FName>
    <Desc>public bool UI\Controls\Box::isPadded ( void )
Shall detect if padding is enabled on this Box
</Desc>
    <FName>UI\Controls\Box::setPadded</FName>
    <Desc>public UI\Controls\Box::setPadded ( bool $padded )
Shall enable or disable padding on this Box
</Desc>
    <FName>UI\Controls\Button::__construct</FName>
    <Desc>public UI\Controls\Button::__construct ( string $text )
Shall construct a new Button
</Desc>
    <FName>UI\Controls\Button::getText</FName>
    <Desc>public string UI\Controls\Button::getText ( void )
Shall retrieve the text (label) for this Button
</Desc>
    <FName>UI\Controls\Button::onClick</FName>
    <Desc>protected UI\Controls\Button::onClick ( void )
Shall be executed when this Button is clicked
</Desc>
    <FName>UI\Controls\Button::setText</FName>
    <Desc>public UI\Controls\Button::setText ( string $text )
Shall set the text (label) for this Button
</Desc>
    <FName>UI\Controls\Check::__construct</FName>
    <Desc>public UI\Controls\Check::__construct ( string $text )
Shall construct a new Check
</Desc>
    <FName>UI\Controls\Check::getText</FName>
    <Desc>public string UI\Controls\Check::getText ( void )
Shall return the text (label) for this Check
</Desc>
    <FName>UI\Controls\Check::isChecked</FName>
    <Desc>public bool UI\Controls\Check::isChecked ( void )
Shall detect the status of this Check
</Desc>
    <FName>UI\Controls\Check::onToggle</FName>
    <Desc>protected UI\Controls\Check::onToggle ( void )
Shall be executed when the status of this Check is changed
</Desc>
    <FName>UI\Controls\Check::setChecked</FName>
    <Desc>public UI\Controls\Check::setChecked ( bool $checked )
Shall change the status of this Check
</Desc>
    <FName>UI\Controls\Check::setText</FName>
    <Desc>public UI\Controls\Check::setText ( string $text )
Shall set the text (label) for this Check
</Desc>
    <FName>UI\Controls\ColorButton::getColor</FName>
    <Desc>public UI\Color UI\Controls\ColorButton::getColor ( void )
Shall retrieve the currently selected Color
</Desc>
    <FName>UI\Controls\ColorButton::onChange</FName>
    <Desc>protected UI\Controls\ColorButton::onChange ( void )
Shall be executed when the selected Color is changed
</Desc>
    <FName>UI\Controls\ColorButton::setColor</FName>
    <Desc>public UI\Controls\ColorButton::setColor ( UI\Draw\Color $color )
public UI\Controls\ColorButton::setColor ( int $color )
Shall set the currently selected Color
</Desc>
    <FName>UI\Controls\Combo::append</FName>
    <Desc>public UI\Controls\Combo::append ( string $text )
Append an option to this Combo
</Desc>
    <FName>UI\Controls\Combo::getSelected</FName>
    <Desc>public int UI\Controls\Combo::getSelected ( void )
Shall retrieve the index of the option selected in this Combo
</Desc>
    <FName>UI\Controls\Combo::onSelected</FName>
    <Desc>protected UI\Controls\Combo::onSelected ( void )
Shall be executed when an option is selected in this Combo
</Desc>
    <FName>UI\Controls\Combo::setSelected</FName>
    <Desc>public UI\Controls\Combo::setSelected ( int $index )
Shall set the currently selected option in this Combo
</Desc>
    <FName>UI\Controls\EditableCombo::append</FName>
    <Desc>public UI\Controls\EditableCombo::append ( string $text )
Shall append a new option to this Editable Combo
</Desc>
    <FName>UI\Controls\EditableCombo::getText</FName>
    <Desc>public string UI\Controls\EditableCombo::getText ( void )
Get the value of the currently selected option in this Editable Combo
</Desc>
    <FName>UI\Controls\EditableCombo::onChange</FName>
    <Desc>protected UI\Controls\EditableCombo::onChange ( void )
Shall be executed when the value of this Editable Combobox changes
</Desc>
    <FName>UI\Controls\EditableCombo::setText</FName>
    <Desc>public UI\Controls\EditableCombo::setText ( string $text )
Shall set the text of the currently selected option in this Editable Combo
</Desc>
    <FName>UI\Controls\Entry::__construct</FName>
    <Desc>public UI\Controls\Entry::__construct ([ int $type = UI\Controls\Entry::Normal ] )
Construct a new entry of the given type
</Desc>
    <FName>UI\Controls\Entry::getText</FName>
    <Desc>public string UI\Controls\Entry::getText ( void )
Shall return the current text from this Entry
</Desc>
    <FName>UI\Controls\Entry::isReadOnly</FName>
    <Desc>public bool UI\Controls\Entry::isReadOnly ( void )
Shall detect if this Entry is read only
</Desc>
    <FName>UI\Controls\Entry::onChange</FName>
    <Desc>protected UI\Controls\Entry::onChange ( void )
Shall be executed when the text in this Entry changes
</Desc>
    <FName>UI\Controls\Entry::setReadOnly</FName>
    <Desc>public UI\Controls\Entry::setReadOnly ( bool $readOnly )
Shall enable or disable read only for this Entry
</Desc>
    <FName>UI\Controls\Entry::setText</FName>
    <Desc>public UI\Controls\Entry::setText ( string $text )
Shall set the text for this Entry
</Desc>
    <FName>UI\Controls\Form::append</FName>
    <Desc>public int UI\Controls\Form::append ( string $label , UI\Control $control [, bool $stretchy = FALSE ] )
Shall append the control to the form, and set the label
</Desc>
    <FName>UI\Controls\Form::delete</FName>
    <Desc>public bool UI\Controls\Form::delete ( int $index )
Shall delete the control at the given index in this Form
</Desc>
    <FName>UI\Controls\Form::isPadded</FName>
    <Desc>public bool UI\Controls\Form::isPadded ( void )
Shall detect if padding is enabled on this Form
</Desc>
    <FName>UI\Controls\Form::setPadded</FName>
    <Desc>public UI\Controls\Form::setPadded ( bool $padded )
Shall enable or disable padding on this Form
</Desc>
    <FName>UI\Controls\Grid::append</FName>
    <Desc>public UI\Controls\Grid::append ( UI\Control $control , int $left , int $top , int $xspan , int $yspan , bool $hexpand , int $halign , bool $vexpand , int $valign )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UI\Controls\Grid::isPadded</FName>
    <Desc>public bool UI\Controls\Grid::isPadded ( void )
Shall detect if padding is enabled on this Grid
</Desc>
    <FName>UI\Controls\Grid::setPadded</FName>
    <Desc>public UI\Controls\Grid::setPadded ( bool $padding )
Shall enable or disable padding for this Grid
</Desc>
    <FName>UI\Controls\Group::append</FName>
    <Desc>public UI\Controls\Group::append ( UI\Control $control )
Shall append a control to this Group
</Desc>
    <FName>UI\Controls\Group::__construct</FName>
    <Desc>public UI\Controls\Group::__construct ( string $title )
Shall construct a new Group with the given title
</Desc>
    <FName>UI\Controls\Group::getTitle</FName>
    <Desc>public string UI\Controls\Group::getTitle ( void )
Shall return the current title for this Group
</Desc>
    <FName>UI\Controls\Group::hasMargin</FName>
    <Desc>public bool UI\Controls\Group::hasMargin ( void )
Shall detect if this Group has a margin
</Desc>
    <FName>UI\Controls\Group::setMargin</FName>
    <Desc>public UI\Controls\Group::setMargin ( bool $margin )
Shall enable or disable margins for this Group
</Desc>
    <FName>UI\Controls\Group::setTitle</FName>
    <Desc>public UI\Controls\Group::setTitle ( string $title )
Shall set the title for this Group
</Desc>
    <FName>UI\Controls\Label::__construct</FName>
    <Desc>public UI\Controls\Label::__construct ( string $text )
Shall construct a new Label
</Desc>
    <FName>UI\Controls\Label::getText</FName>
    <Desc>public string UI\Controls\Label::getText ( void )
Shall return the current text for this Label 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UI\Controls\Label::setText</FName>
    <Desc>public UI\Controls\Label::setText ( string $text )
Shall set the text for this Label
</Desc>
    <FName>UI\Controls\MultilineEntry::append</FName>
    <Desc>public UI\Controls\MultilineEntry::append ( string $text )
Shall append the given text to the text in this Multiline Entry
</Desc>
    <FName>UI\Controls\MultilineEntry::__construct</FName>
    <Desc>public UI\Controls\MultilineEntry::__construct ([ int $type ] )
Shall construct a new Multiline Entry of the given type
</Desc>
    <FName>UI\Controls\MultilineEntry::getText</FName>
    <Desc>public string UI\Controls\MultilineEntry::getText ( void )
Shall return the text in this Multiline Entry
</Desc>
    <FName>UI\Controls\MultilineEntry::isReadOnly</FName>
    <Desc>public bool UI\Controls\MultilineEntry::isReadOnly ( void )
Shall detect if this Multiline Entry is read only
</Desc>
    <FName>UI\Controls\MultilineEntry::onChange</FName>
    <Desc>protected UI\Controls\MultilineEntry::onChange ( void )
Shall be executed when the text in this Multiline Entry is changed
</Desc>
    <FName>UI\Controls\MultilineEntry::setReadOnly</FName>
    <Desc>public UI\Controls\MultilineEntry::setReadOnly ( bool $readOnly )
Shall enable or disable read only on this Multiline Entry
</Desc>
    <FName>UI\Controls\MultilineEntry::setText</FName>
    <Desc>public UI\Controls\MultilineEntry::setText ( string $text )
Shall set the text in this Multiline Entry
</Desc>
    <FName>UI\Controls\Picker::__construct</FName>
    <Desc>public UI\Controls\Picker::__construct ([ int $type = UI\Controls\Picker::Date ] )
Construct a new Picker of the given type
</Desc>
    <FName>UI\Controls\Progress::getValue</FName>
    <Desc>public int UI\Controls\Progress::getValue ( void )
Shall retrieve the current value of this Progress bar
</Desc>
    <FName>UI\Controls\Progress::setValue</FName>
    <Desc>public UI\Controls\Progress::setValue ( int $value )
Shall set the value for this Progress bar
</Desc>
    <FName>UI\Controls\Radio::append</FName>
    <Desc>public UI\Controls\Radio::append ( string $text )
Shall append a new option to this Radio
</Desc>
    <FName>UI\Controls\Radio::getSelected</FName>
    <Desc>public int UI\Controls\Radio::getSelected ( void )
Shall retrieve the index of the currently selected option in this Radio
</Desc>
    <FName>UI\Controls\Radio::onSelected</FName>
    <Desc>protected UI\Controls\Radio::onSelected ( void )
Shall be executed when the option selected in this Radio changes
</Desc>
    <FName>UI\Controls\Radio::setSelected</FName>
    <Desc>public UI\Controls\Radio::setSelected ( int $index )
Shall set the currently selected option in this Radio
</Desc>
    <FName>UI\Controls\Separator::__construct</FName>
    <Desc>public UI\Controls\Separator::__construct ([ int $type = UI\Controls\Separator::Horizontal ] )
Shall construct a new Separator of the given type
</Desc>
    <FName>UI\Controls\Slider::__construct</FName>
    <Desc>public UI\Controls\Slider::__construct ( int $min , int $max )
Construct a new Slider with the given range
</Desc>
    <FName>UI\Controls\Slider::getValue</FName>
    <Desc>public int UI\Controls\Slider::getValue ( void )
Get the value from this Slider
</Desc>
    <FName>UI\Controls\Slider::onChange</FName>
    <Desc>protected UI\Controls\Slider::onChange ( void )
Shall be executed when the value of this Slider changes
</Desc>
    <FName>UI\Controls\Slider::setValue</FName>
    <Desc>public UI\Controls\Slider::setValue ( int $value )
Shall set the value for this Slider
</Desc>
    <FName>UI\Controls\Spin::__construct</FName>
    <Desc>public UI\Controls\Spin::__construct ( int $min , int $max )
Constructs a new Spin with the given range
</Desc>
    <FName>UI\Controls\Spin::getValue</FName>
    <Desc>public int UI\Controls\Spin::getValue ( void )
Get the value in this Spin
</Desc>
    <FName>UI\Controls\Spin::onChange</FName>
    <Desc>protected UI\Controls\Spin::onChange ( void )
Shall be executed when the value in this Spin changes
</Desc>
    <FName>UI\Controls\Spin::setValue</FName>
    <Desc>public UI\Controls\Spin::setValue ( int $value )
Set the value in this Spin
</Desc>
    <FName>UI\Controls\Tab::append</FName>
    <Desc>public int UI\Controls\Tab::append ( string $name , UI\Control $control )
Append a new page to this Tab
</Desc>
    <FName>UI\Controls\Tab::delete</FName>
    <Desc>public bool UI\Controls\Tab::delete ( int $index )
Shall remove the selected page from this Tab
</Desc>
    <FName>UI\Controls\Tab::hasMargin</FName>
    <Desc>public bool UI\Controls\Tab::hasMargin ( int $page )
Shall detect if the given page has a margin.
</Desc>
    <FName>UI\Controls\Tab::insertAt</FName>
    <Desc>public UI\Controls\Tab::insertAt ( string $name , int $page , UI\Control $control )
Shall insert a new page into this Tab
</Desc>
    <FName>UI\Controls\Tab::pages</FName>
    <Desc>public int UI\Controls\Tab::pages ( void )
Shall return the number of pages in this Tab
</Desc>
    <FName>UI\Controls\Tab::setMargin</FName>
    <Desc>public UI\Controls\Tab::setMargin ( int $page , bool $margin )
Shall enable or disable margins on the selected page
</Desc>
    <FName>UI\Draw\Brush\Gradient::addStop</FName>
    <Desc>public int UI\Draw\Brush\Gradient::addStop ( float $position , UI\Draw\Color $color )
public int UI\Draw\Brush\Gradient::addStop ( float $position , int $color )
Shall at a stop of the given color at the given position
</Desc>
    <FName>UI\Draw\Brush\Gradient::delStop</FName>
    <Desc>public int UI\Draw\Brush\Gradient::delStop ( int $index )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UI\Draw\Brush\Gradient::setStop</FName>
    <Desc>public bool UI\Draw\Brush\Gradient::setStop ( int $index , float $position , UI\Draw\Color $color )
public bool UI\Draw\Brush\Gradient::setStop ( int $index , float $position , int $color )
</Desc>
    <FName>UI\Draw\Brush\LinearGradient::__construct</FName>
    <Desc>public UI\Draw\Brush\LinearGradient::__construct ( UI\Point $start , UI\Point $end )
Shall construct a new linear gradient
</Desc>
    <FName>UI\Draw\Brush\RadialGradient::__construct</FName>
    <Desc>public UI\Draw\Brush\RadialGradient::__construct ( UI\Point $start , UI\Point $outer , float $radius )
Shall construct a new radial gradient
</Desc>
    <FName>UI\Draw\Brush::__construct</FName>
    <Desc>public UI\Draw\Brush::__construct ( UI\Draw\Color $color )
public UI\Draw\Brush::__construct ( int $color )
Shall construct a solid brush using the given color
</Desc>
    <FName>UI\Draw\Brush::getColor</FName>
    <Desc>public UI\Draw\Color UI\Draw\Brush::getColor ( void )
Shall return a UI\Draw\Color for this brush
</Desc>
    <FName>UI\Draw\Brush::setColor</FName>
    <Desc>public void UI\Draw\Brush::setColor ( UI\Draw\Color $color )
public void UI\Draw\Brush::setColor ( int $color )
Shall set the color of this brush to the color provided
</Desc>
    <FName>UI\Draw\Color::__construct</FName>
    <Desc>public UI\Draw\Color::__construct ([ UI\Draw\Color $color ] )
public UI\Draw\Color::__construct ([ int $color ] )
Shall construct a new color
</Desc>
    <FName>UI\Draw\Color::getChannel</FName>
    <Desc>public float UI\Draw\Color::getChannel ( int $channel )
Shall retrieve the value for a channel
</Desc>
    <FName>UI\Draw\Color::setChannel</FName>
    <Desc>public void UI\Draw\Color::setChannel ( int $channel , float $value )
Shall set the selected channel to the given value
</Desc>
    <FName>UI\Draw\Matrix::invert</FName>
    <Desc>public UI\Draw\Matrix::invert ( void )
Shall invert this matrix
</Desc>
    <FName>UI\Draw\Matrix::isInvertible</FName>
    <Desc>public bool UI\Draw\Matrix::isInvertible ( void )
Shall detect if this Matrix may be inverted
</Desc>
    <FName>UI\Draw\Matrix::multiply</FName>
    <Desc>public UI\Draw\Matrix UI\Draw\Matrix::multiply ( UI\Draw\Matrix $matrix )
Shall multiply this matrix with the given matrix
</Desc>
    <FName>UI\Draw\Matrix::rotate</FName>
    <Desc>public UI\Draw\Matrix::rotate ( UI\Point $point , float $amount )
Shall rotate this Matrix
</Desc>
    <FName>UI\Draw\Matrix::scale</FName>
    <Desc>public UI\Draw\Matrix::scale ( UI\Point $center , UI\Point $point )
Shall scale this Matrix
</Desc>
    <FName>UI\Draw\Matrix::skew</FName>
    <Desc>public UI\Draw\Matrix::skew ( UI\Point $point , UI\Point $amount )
Shall skew this Matrix
</Desc>
    <FName>UI\Draw\Matrix::translate</FName>
    <Desc>public UI\Draw\Matrix::translate ( UI\Point $point )
Shall translate this Matrix
</Desc>
    <FName>UI\Draw\Path::addRectangle</FName>
    <Desc>public UI\Draw\Path::addRectangle ( UI\Point $point , UI\Size $size )
Shall map the path of a rectangle of the given size, at the given point
</Desc>
    <FName>UI\Draw\Path::arcTo</FName>
    <Desc>public UI\Draw\Path::arcTo ( UI\Point $point , float $radius , float $angle , float $sweep , float $negative )
Shall map the path for an arc
</Desc>
    <FName>UI\Draw\Path::bezierTo</FName>
    <Desc>public UI\Draw\Path::bezierTo ( UI\Point $point , float $radius , float $angle , float $sweep , float $negative )
Shall draw a bezier curve
</Desc>
    <FName>UI\Draw\Path::closeFigure</FName>
    <Desc>public UI\Draw\Path::closeFigure ( void )
Shall close the current figure
</Desc>
    <FName>UI\Draw\Path::__construct</FName>
    <Desc>public UI\Draw\Path::__construct ([ int $mode = UI\Draw\Path::Winding ] )
Shall construct a new path in the given mode
</Desc>
    <FName>UI\Draw\Path::end</FName>
    <Desc>public UI\Draw\Path::end ( void )
Shall finalize this Path
</Desc>
    <FName>UI\Draw\Path::lineTo</FName>
    <Desc>public UI\Draw\Path::lineTo ( UI\Point $point , float $radius , float $angle , float $sweep , float $negative )
Shall map the path for a line
</Desc>
    <FName>UI\Draw\Path::newFigure</FName>
    <Desc>public UI\Draw\Path::newFigure ( UI\Point $point )
Shall map a new figure at the given point
</Desc>
    <FName>UI\Draw\Path::newFigureWithArc</FName>
    <Desc>public UI\Draw\Path::newFigureWithArc ( UI\Point $point , float $radius , float $angle , float $sweep , float $negative )
</Desc>
    <FName>UI\Draw\Pen::clip</FName>
    <Desc>public UI\Draw\Pen::clip ( UI\Draw\Path $path )
Shall clip the given Path
</Desc>
    <FName>UI\Draw\Pen::fill</FName>
    <Desc>public UI\Draw\Pen::fill ( UI\Draw\Path $path , UI\Draw\Brush $with )
public UI\Draw\Pen::fill ( UI\Draw\Path $path , UI\Draw\Color $with )
public UI\Draw\Pen::fill ( UI\Draw\Path $path , int $with )
Shall fill the given path
</Desc>
    <FName>UI\Draw\Pen::restore</FName>
    <Desc>public UI\Draw\Pen::restore ( void )
Shall restore a previously saved Pen
</Desc>
    <FName>UI\Draw\Pen::save</FName>
    <Desc>public UI\Draw\Pen::save ( void )
Shall save the Pen
</Desc>
    <FName>UI\Draw\Pen::stroke</FName>
    <Desc>public UI\Draw\Pen::stroke ( UI\Draw\Path $path , UI\Draw\Brush $with , UI\Draw\Stroke $stroke )
public UI\Draw\Pen::stroke ( UI\Draw\Path $path , UI\Draw\Color $with , UI\Draw\Stroke $stroke )
public UI\Draw\Pen::stroke ( UI\Draw\Path $path , int $with , UI\Draw\Stroke $stroke )
Shall stroke the given path
</Desc>
    <FName>UI\Draw\Pen::transform</FName>
    <Desc>public UI\Draw\Pen::transform ( UI\Draw\Matrix $matrix )
Shall perform matrix transformation
</Desc>
    <FName>UI\Draw\Pen::write</FName>
    <Desc>public UI\Draw\Pen::write ( UI\Point $point , UI\Draw\Text\Layout $layout )
Shall draw the given text layout at the given point
</Desc>
    <FName>UI\Draw\Stroke::__construct</FName>
    <Desc>public UI\Draw\Stroke::__construct ([ int $cap = UI\Draw\Line\Cap::Flat [, int $join = UI\Draw\Line\Join::Miter [, float $thickness = 1 [, float $miterLimit = 10 ]]]] )
Shall construct a new Stroke
</Desc>
    <FName>UI\Draw\Stroke::getCap</FName>
    <Desc>public int UI\Draw\Stroke::getCap ( void )
Shall retrieve the line cap setting of this Stroke
</Desc>
    <FName>UI\Draw\Stroke::getJoin</FName>
    <Desc>public int UI\Draw\Stroke::getJoin ( void )
Shall retrieve the line join setting of this Stroke
</Desc>
    <FName>UI\Draw\Stroke::getMiterLimit</FName>
    <Desc>public float UI\Draw\Stroke::getMiterLimit ( void )
Shall retrieve the miter limit of this Stroke
</Desc>
    <FName>UI\Draw\Stroke::getThickness</FName>
    <Desc>public float UI\Draw\Stroke::getThickness ( void )
Shall retrieve the thickness of this Stroke
</Desc>
    <FName>UI\Draw\Stroke::setCap</FName>
    <Desc>public UI\Draw\Stroke::setCap ( int $cap )
Shall set the line cap setting for this Stroke
</Desc>
    <FName>UI\Draw\Stroke::setJoin</FName>
    <Desc>public UI\Draw\Stroke::setJoin ( int $join )
Shall set the line join setting for this Stroke
</Desc>
    <FName>UI\Draw\Stroke::setMiterLimit</FName>
    <Desc>public UI\Draw\Stroke::setMiterLimit ( float $limit )
Set the miter limit for this Stroke
</Desc>
    <FName>UI\Draw\Stroke::setThickness</FName>
    <Desc>public UI\Draw\Stroke::setThickness ( float $thickness )
Shall set the thickness for this Stroke
</Desc>
    <FName>UI\Draw\Text\Font\Descriptor::__construct</FName>
    <Desc>public UI\Draw\Text\Font\Descriptor::__construct ( string $family , float $size [, int $weight = UI\Draw\Text\Font\Weight::Normal [, int $italic = UI\Draw\Text\Font\Italic::Normal [, int $stretch = UI\Draw\Text\Font\Stretch::Normal ]]] )
Shall construct a new Font Descriptor
</Desc>
    <FName>UI\Draw\Text\Font\Descriptor::getFamily</FName>
    <Desc>public string UI\Draw\Text\Font\Descriptor::getFamily ( void )
Shall return the requested font family
</Desc>
    <FName>UI\Draw\Text\Font\Descriptor::getItalic</FName>
    <Desc>public int UI\Draw\Text\Font\Descriptor::getItalic ( void )
Shall return constant setting
</Desc>
    <FName>UI\Draw\Text\Font\Descriptor::getSize</FName>
    <Desc>public float UI\Draw\Text\Font\Descriptor::getSize ( void )
Shall return the requested size
</Desc>
    <FName>UI\Draw\Text\Font\Descriptor::getStretch</FName>
    <Desc>public int UI\Draw\Text\Font\Descriptor::getStretch ( void )
Shall return requested stretch
</Desc>
    <FName>UI\Draw\Text\Font\Descriptor::getWeight</FName>
    <Desc>public int UI\Draw\Text\Font\Descriptor::getWeight ( void )
Shall return requested weight
</Desc>
    <FName>UI\Draw\Text\Font::__construct</FName>
    <Desc>public UI\Draw\Text\Font::__construct ( UI\Draw\Text\Font\Descriptor $descriptor )
Shall construct a new Font using the given descriptor
</Desc>
    <FName>UI\Draw\Text\Font::getAscent</FName>
    <Desc>public float UI\Draw\Text\Font::getAscent ( void )
</Desc>
    <FName>UI\Draw\Text\Font::getDescent</FName>
    <Desc>public float UI\Draw\Text\Font::getDescent ( void )
</Desc>
    <FName>UI\Draw\Text\Font::getLeading</FName>
    <Desc>public float UI\Draw\Text\Font::getLeading ( void )
</Desc>
    <FName>UI\Draw\Text\Font::getUnderlinePosition</FName>
    <Desc>public float UI\Draw\Text\Font::getUnderlinePosition ( void )
</Desc>
    <FName>UI\Draw\Text\Font::getUnderlineThickness</FName>
    <Desc>public float UI\Draw\Text\Font::getUnderlineThickness ( void )
</Desc>
    <FName>UI\Draw\Text\Layout::__construct</FName>
    <Desc>public UI\Draw\Text\Layout::__construct ( string $text , UI\Draw\Text\Font $font , float $width )
Shall construct a new Text Layout
</Desc>
    <FName>UI\Draw\Text\Layout::setColor</FName>
    <Desc>public UI\Draw\Text\Layout::setColor ( UI\Draw\Color $color [, int $start = 0 [, int $end ]] )
public UI\Draw\Text\Layout::setColor ( int $color [, int $start = 0 [, int $end ]] )
Shall set the Color for all of, or a range of the text in the Layout
</Desc>
    <FName>UI\Draw\Text\Layout::setWidth</FName>
    <Desc>public UI\Draw\Text\Layout::setWidth ( float $width )
Shall set the width of this Text Layout
</Desc>
    <FName>UI\Executor::__construct</FName>
    <Desc>public UI\Executor::__construct ( void )
public UI\Executor::__construct ( int $microseconds )
public UI\Executor::__construct ( int $seconds , int $microseconds )
Shall construct an executor with the given interval, will not start executing until main loop is entered
</Desc>
    <FName>UI\Executor::kill</FName>
    <Desc>public void UI\Executor::kill ( void )
Shall stop an executor, the executor cannot be restarted
</Desc>
    <FName>UI\Executor::onExecute</FName>
    <Desc>abstract protected void UI\Executor::onExecute ( void )
Shall be repetitively queued for execution in the main thread
</Desc>
    <FName>UI\Executor::setInterval</FName>
    <Desc>public bool UI\Executor::setInterval ( int $microseconds )
public bool UI\Executor::setInterval ( int $seconds , int $microseconds )
Shall set the new interval. An interval of 0 will pause the executor until a new interval has been set
</Desc>
    <FName>UI\Menu::append</FName>
    <Desc>public UI\MenuItem UI\Menu::append ( string $name [, string $type = UI\MenuItem::class ] )
Shall append a new Menu Item
</Desc>
    <FName>UI\Menu::appendAbout</FName>
    <Desc>public UI\MenuItem UI\Menu::appendAbout ([ string $type = UI\MenuItem::class ] )
Shall append an About menu item
</Desc>
    <FName>UI\Menu::appendCheck</FName>
    <Desc>public UI\MenuItem UI\Menu::appendCheck ( string $name [, string $type = UI\MenuItem::class ] )
Shall append a checkable menu item
</Desc>
    <FName>UI\Menu::appendPreferences</FName>
    <Desc>public UI\MenuItem UI\Menu::appendPreferences ([ string $type = UI\MenuItem::class ] )
Shall append a Preferences menu item
</Desc>
    <FName>UI\Menu::appendQuit</FName>
    <Desc>public UI\MenuItem UI\Menu::appendQuit ([ string $type = UI\MenuItem::class ] )
Shall append a Quit menu item
</Desc>
    <FName>UI\Menu::appendSeparator</FName>
    <Desc>public UI\Menu::appendSeparator ( void )
Shall append a separator
</Desc>
    <FName>UI\Menu::__construct</FName>
    <Desc>public UI\Menu::__construct ( string $name )
Shall construct a new Menu
</Desc>
    <FName>UI\MenuItem::disable</FName>
    <Desc>public UI\MenuItem::disable ( void )
Shall disable this Menu Item
</Desc>
    <FName>UI\MenuItem::enable</FName>
    <Desc>public UI\MenuItem::enable ( void )
Shall enable this Menu Item
</Desc>
    <FName>UI\MenuItem::isChecked</FName>
    <Desc>public bool UI\MenuItem::isChecked ( void )
Shall detect if this Menu Item is checked
</Desc>
    <FName>UI\MenuItem::onClick</FName>
    <Desc>protected UI\MenuItem::onClick ( void )
Shall be executed when this Menu Item is clicked
</Desc>
    <FName>UI\MenuItem::setChecked</FName>
    <Desc>public UI\MenuItem::setChecked ( bool $checked )
Shall set the checked status of this Menu Item
</Desc>
    <FName>UI\Point::at</FName>
    <Desc>public static UI\Point UI\Point::at ( float $point )
public static UI\Point UI\Point::at ( UI\Size $size )
Shall return a UI\Point object where x and y are equal to those supplied, either in float or UI\Size form
</Desc>
    <FName>UI\Point::__construct</FName>
    <Desc>public UI\Point::__construct ( float $x , float $y )
Construct a new Point using new co-ordinates
</Desc>
    <FName>UI\Point::getX</FName>
    <Desc>public float UI\Point::getX ( void )
Retrieves the X co-ordinate
</Desc>
    <FName>UI\Point::getY</FName>
    <Desc>public float UI\Point::getY ( void )
Retrieves the Y co-ordinate
</Desc>
    <FName>UI\Point::setX</FName>
    <Desc>public UI\Point::setX ( float $point )
Set the X co-ordinate
</Desc>
    <FName>UI\Point::setY</FName>
    <Desc>public UI\Point::setY ( float $point )
Set the Y co-ordinate
</Desc>
    <FName>UI\Size::__construct</FName>
    <Desc>public UI\Size::__construct ( float $width , float $height )
Construct a new Size using new width and height
</Desc>
    <FName>UI\Size::getHeight</FName>
    <Desc>public float UI\Size::getHeight ( void )
Retrieves the Height
</Desc>
    <FName>UI\Size::getWidth</FName>
    <Desc>public float UI\Size::getWidth ( void )
Retrieves the Width
</Desc>
    <FName>UI\Size::of</FName>
    <Desc>public static UI\Size UI\Size::of ( float $size )
public static UI\Size UI\Size::of ( UI\Point $point )
Shall return a UI\Size object where width and height are equal to those supplied, either in float or UI\Point form
</Desc>
    <FName>UI\Size::setHeight</FName>
    <Desc>public UI\Size::setHeight ( float $size )
Set new Height
</Desc>
    <FName>UI\Size::setWidth</FName>
    <Desc>public UI\Size::setWidth ( float $size )
Set new Width
</Desc>
    <FName>UI\Window::add</FName>
    <Desc>public UI\Window::add ( UI\Control $control )
Shall add a Control to this Window
</Desc>
    <FName>UI\Window::__construct</FName>
    <Desc>public UI\Window::__construct ( string $title , Size $size [, bool $menu = FALSE ] )
Shall construct a new Window
</Desc>
    <FName>UI\Window::error</FName>
    <Desc>public UI\Window::error ( string $title , string $msg )
Shall show an error box
</Desc>
    <FName>UI\Window::getSize</FName>
    <Desc>public UI\Size UI\Window::getSize ( void )
Shall return the size of this Window
</Desc>
    <FName>UI\Window::getTitle</FName>
    <Desc>public string UI\Window::getTitle ( void )
Shall retrieve the title of this Window
</Desc>
    <FName>UI\Window::hasBorders</FName>
    <Desc>public bool UI\Window::hasBorders ( void )
Shall detect if borders are used on this Window
</Desc>
    <FName>UI\Window::hasMargin</FName>
    <Desc>public bool UI\Window::hasMargin ( void )
Shall detect if margins are used on this Window
</Desc>
    <FName>UI\Window::isFullScreen</FName>
    <Desc>public bool UI\Window::isFullScreen ( void )
Shall detect if this Window us using the whole screen
</Desc>
    <FName>UI\Window::msg</FName>
    <Desc>public UI\Window::msg ( string $title , string $msg )
Shall show a message box
</Desc>
    <FName>UI\Window::onClosing</FName>
    <Desc>protected int UI\Window::onClosing ( void )
Should gracefully destroy this Window
</Desc>
    <FName>UI\Window::open</FName>
    <Desc>public string UI\Window::open ( void )
Shall show an open file dialog
</Desc>
    <FName>UI\Window::save</FName>
    <Desc>public string UI\Window::save ( void )
Shall show a save dialog
</Desc>
    <FName>UI\Window::setBorders</FName>
    <Desc>public UI\Window::setBorders ( bool $borders )
Shall enable or disable the use of borders on this Window
</Desc>
    <FName>UI\Window::setFullScreen</FName>
    <Desc>public UI\Window::setFullScreen ( bool $full )
Shall enable or disable the use of the full screen for this Window 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>UI\Window::setMargin</FName>
    <Desc>public UI\Window::setMargin ( bool $margin )
Shall enable or disable the use of margins for this Window
</Desc>
    <FName>UI\Window::setSize</FName>
    <Desc>public UI\Window::setSize ( UI\Size $size )
Shall set the size of this Window
</Desc>
    <FName>UI\Window::setTitle</FName>
    <Desc>public UI\Window::setTitle ( string $title )
Shall set the title for this Window
</Desc>
    <FName>V8Js::__construct</FName>
    <Desc>public V8Js::__construct ([ string $object_name = "PHP" [, array $variables = array() [, array $extensions = array() [, bool $report_uncaught_exceptions = TRUE ]]]] )
Constructs a new V8Js object.
</Desc>
    <FName>V8Js::executeString</FName>
    <Desc>public mixed V8Js::executeString ( string $script [, string $identifier = "V8Js::executeString()" [, int $flags = V8Js::FLAG_NONE ]] )
Compiles and executes the string passed with script as Javascript code.
</Desc>
    <FName>V8Js::getExtensions</FName>
    <Desc>public static array V8Js::getExtensions ( void )
This function returns array of Javascript extensions registered using V8Js::registerExtension().
</Desc>
    <FName>V8Js::getPendingException</FName>
    <Desc>public V8JsException V8Js::getPendingException ( void )
Returns any pending uncaught Javascript exception as V8JsException left from earlier V8Js::executeString() call(s).
</Desc>
    <FName>V8Js::registerExtension</FName>
    <Desc>public static bool V8Js::registerExtension ( string $extension_name , string $script [, array $dependencies = array() [, bool $auto_enable = FALSE ]] )
Registers passed Javascript script as extension to be used in V8Js contexts.
</Desc>
    <FName>V8JsException::getJsFileName</FName>
    <Desc>final public string V8JsException::getJsFileName ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>V8JsException::getJsLineNumber</FName>
    <Desc>final public int V8JsException::getJsLineNumber ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>V8JsException::getJsSourceLine</FName>
    <Desc>final public string V8JsException::getJsSourceLine ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>V8JsException::getJsTrace</FName>
    <Desc>final public string V8JsException::getJsTrace ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>VarnishAdmin::auth</FName>
    <Desc>public bool VarnishAdmin::auth ( void )
</Desc>
    <FName>VarnishAdmin::ban</FName>
    <Desc>public int VarnishAdmin::ban ( string $vcl_regex )
</Desc>
    <FName>VarnishAdmin::banUrl</FName>
    <Desc>public int VarnishAdmin::banUrl ( string $vcl_regex )
</Desc>
    <FName>VarnishAdmin::clearPanic</FName>
    <Desc>public int VarnishAdmin::clearPanic ( void )
</Desc>
    <FName>VarnishAdmin::connect</FName>
    <Desc>public bool VarnishAdmin::connect ( void )
</Desc>
    <FName>VarnishAdmin::__construct</FName>
    <Desc>public VarnishAdmin::__construct ([ array $args ] )
</Desc>
    <FName>VarnishAdmin::disconnect</FName>
    <Desc>public bool VarnishAdmin::disconnect ( void )
</Desc>
    <FName>VarnishAdmin::getPanic</FName>
    <Desc>public string VarnishAdmin::getPanic ( void )
</Desc>
    <FName>VarnishAdmin::getParams</FName>
    <Desc>public array VarnishAdmin::getParams ( void )
</Desc>
    <FName>VarnishAdmin::isRunning</FName>
    <Desc>public bool VarnishAdmin::isRunning ( void )
</Desc>
    <FName>VarnishAdmin::setCompat</FName>
    <Desc>public void VarnishAdmin::setCompat ( int $compat )
</Desc>
    <FName>VarnishAdmin::setHost</FName>
    <Desc>public void VarnishAdmin::setHost ( string $host )
</Desc>
    <FName>VarnishAdmin::setIdent</FName>
    <Desc>public void VarnishAdmin::setIdent ( string $ident )
</Desc>
    <FName>VarnishAdmin::setParam</FName>
    <Desc>public int VarnishAdmin::setParam ( string $name , string|integer $value )
</Desc>
    <FName>VarnishAdmin::setPort</FName>
    <Desc>public void VarnishAdmin::setPort ( int $port )
</Desc>
    <FName>VarnishAdmin::setSecret</FName>
    <Desc>public void VarnishAdmin::setSecret ( string $secret )
</Desc>
    <FName>VarnishAdmin::setTimeout</FName>
    <Desc>public void VarnishAdmin::setTimeout ( int $timeout )
</Desc>
    <FName>VarnishAdmin::start</FName>
    <Desc>public int VarnishAdmin::start ( void )
</Desc>
    <FName>VarnishAdmin::stop</FName>
    <Desc>public int VarnishAdmin::stop ( void )
</Desc>
    <FName>VarnishLog::__construct</FName>
    <Desc>public VarnishLog::__construct ([ array $args ] )
</Desc>
    <FName>VarnishLog::getLine</FName>
    <Desc>public array VarnishLog::getLine ( void )
</Desc>
    <FName>VarnishLog::getTagName</FName>
    <Desc>public static string VarnishLog::getTagName ( int $index )
</Desc>
    <FName>VarnishStat::__construct</FName>
    <Desc>public VarnishStat::__construct ([ array $args ] )
</Desc>
    <FName>VarnishStat::getSnapshot</FName>
    <Desc>public array VarnishStat::getSnapshot ( void )
</Desc>
    <FName>Vtiful\Kernel\Excel::addSheet</FName>
    <Desc>public Vtiful\Kernel\Excel::addSheet ( string $sheetName )
Create a new worksheet in the xlsx file.
</Desc>
    <FName>Vtiful\Kernel\Excel::autoFilter</FName>
    <Desc>public Vtiful\Kernel\Excel::autoFilter ( string $scope )
Add autofilter to a worksheet.
</Desc>
    <FName>Vtiful\Kernel\Excel::constMemory</FName>
    <Desc>public Vtiful\Kernel\Excel::constMemory ( string $fileName [, string $sheetName ] )
Write a large file with constant memory usage.
</Desc>
    <FName>Vtiful\Kernel\Excel::__construct</FName>
    <Desc>public Vtiful\Kernel\Excel::__construct ( array $config )
Vtiful\Kernel\Excel constructor, create a class object.
</Desc>
    <FName>Vtiful\Kernel\Excel::data</FName>
    <Desc>public Vtiful\Kernel\Excel::data ( array $data )
Write a data in the worksheet.
</Desc>
    <FName>Vtiful\Kernel\Excel::fileName</FName>
    <Desc>public Vtiful\Kernel\Excel::fileName ( string $fileName [, string $sheetName ] )
Create a brand new xlsx file and create a worksheet.
</Desc>
    <FName>Vtiful\Kernel\Excel::getHandle</FName>
    <Desc>public Vtiful\Kernel\Excel::getHandle ( void )
Get the xlsx text resource handle.
</Desc>
    <FName>Vtiful\Kernel\Excel::header</FName>
    <Desc>public Vtiful\Kernel\Excel::header ( array $headerData )
Write a header in the worksheet.
</Desc>
    <FName>Vtiful\Kernel\Excel::insertFormula</FName>
    <Desc>public Vtiful\Kernel\Excel::insertFormula ( int $row , int $column , string $formula )
Insert calculation formula.
</Desc>
    <FName>Vtiful\Kernel\Excel::insertImage</FName>
    <Desc>public Vtiful\Kernel\Excel::insertImage ( int $row , int $column , string $localImagePath )
Insert a local image into the cell.
</Desc>
    <FName>Vtiful\Kernel\Excel::insertText</FName>
    <Desc>public Vtiful\Kernel\Excel::insertText ( int $row , int $column , stringintdouble $data [, string $format ] )
Write text in a cell.
</Desc>
    <FName>Vtiful\Kernel\Excel::mergeCells</FName>
    <Desc>public Vtiful\Kernel\Excel::mergeCells ( string $scope , string $data )
Merge Cells.
</Desc>
    <FName>Vtiful\Kernel\Excel::output</FName>
    <Desc>public Vtiful\Kernel\Excel::output ( void )
Output xlsx file to disk.
</Desc>
    <FName>Vtiful\Kernel\Excel::setColumn</FName>
    <Desc>public Vtiful\Kernel\Excel::setColumn ( string $range , float $width [, resource $format ] )
Set the format of the column.
</Desc>
    <FName>Vtiful\Kernel\Excel::setRow</FName>
    <Desc>public Vtiful\Kernel\Excel::setRow ( string $range , float $height [, resource $format ] )
Set the format of the column.
</Desc>
    <FName>Vtiful\Kernel\Format::align</FName>
    <Desc>public Vtiful\Kernel\Format::align ( resource $handle , int $style )
set cell align
</Desc>
    <FName>Vtiful\Kernel\Format::bold</FName>
    <Desc>public Vtiful\Kernel\Format::bold ( resource $handle )
Vtiful\Kernel\Format bold format
</Desc>
    <FName>Vtiful\Kernel\Format::italic</FName>
    <Desc>public Vtiful\Kernel\Format::italic ( resource $handle )
Vtiful\Kernel\Format italic format
</Desc>
    <FName>Vtiful\Kernel\Format::underline</FName>
    <Desc>public Vtiful\Kernel\Format::underline ( resource $handle , int $style )
Vtiful\Kernel\Format underline format
</Desc>
    <FName>WeakMap::__construct</FName>
    <Desc>public WeakMap::__construct ( void )
Constructs a new map.
</Desc>
    <FName>WeakMap::count</FName>
    <Desc>public int WeakMap::count ( void )
Counts the number of live entries in the map.
</Desc>
    <FName>WeakMap::current</FName>
    <Desc>public mixed WeakMap::current ( void )
Returns the current value being iterated on in the map.
</Desc>
    <FName>WeakMap::key</FName>
    <Desc>public object WeakMap::key ( void )
Returns the object serving as key in the map, at the current iterating position.
</Desc>
    <FName>WeakMap::next</FName>
    <Desc>public void WeakMap::next ( void )
Advances to the next map element.
</Desc>
    <FName>WeakMap::offsetExists</FName>
    <Desc>public bool WeakMap::offsetExists ( object $object )
Checks whether the passed object is referenced in the map.
</Desc>
    <FName>WeakMap::offsetGet</FName>
    <Desc>public mixed WeakMap::offsetGet ( object $object )
Returns the value pointed to by a certain object.
</Desc>
    <FName>WeakMap::offsetSet</FName>
    <Desc>public void WeakMap::offsetSet ( object $object , mixed $value )
Updates the map with a new key-value pair. If the key already existed in the map, the old value is replaced with the new.
</Desc>
    <FName>WeakMap::offsetUnset</FName>
    <Desc>public void WeakMap::offsetUnset ( object $object )
Removes an entry from the map.
</Desc>
    <FName>WeakMap::rewind</FName>
    <Desc>public void WeakMap::rewind ( void )
Rewinds the iterator to the beginning of the map.
</Desc>
    <FName>WeakMap::valid</FName>
    <Desc>public bool WeakMap::valid ( void )
Returns whether the iterator is still on a valid map element.
</Desc>
    <FName>Weakref::acquire</FName>
    <Desc>public bool Weakref::acquire ( void )
Acquires a strong reference on that object, virtually turning the weak reference into a strong one. 
The Weakref instance maintains an internal acquired counter to track outstanding strong references. If the call to Weakref::acquire() is successful, this counter will be incremented by one.
</Desc>
    <FName>Weakref::__construct</FName>
    <Desc>public Weakref::__construct ( object $object )
Constructs a new weak reference.
</Desc>
    <FName>Weakref::get</FName>
    <Desc>public object Weakref::get ( void )
Returns the object pointed to by the weak reference.
</Desc>
    <FName>Weakref::release</FName>
    <Desc>public bool Weakref::release ( void )
Releases a previously acquired reference, potentially turning a strong reference back into a weak reference. 
The Weakref instance maintains an internal acquired counter to track outstanding strong references. If the call to Weakref::release() is successful, this counter will be decremented by one. Once this counter reaches zero, the strong reference is turned back into a weak reference.
</Desc>
    <FName>Weakref::valid</FName>
    <Desc>public bool Weakref::valid ( void )
Checks whether the object referenced still exists.
</Desc>
    <FName>wkhtmltox\Image\Converter::__construct</FName>
    <Desc>public wkhtmltox\Image\Converter::__construct ([ string $buffer [, array $settings ]] )
Creates an Image converter, optionally taking an input buffer and configuration settings
</Desc>
    <FName>wkhtmltox\Image\Converter::convert</FName>
    <Desc>public ?string wkhtmltox\Image\Converter::convert ( void )
Performs conversion of the input buffer
</Desc>
    <FName>wkhtmltox\Image\Converter::getVersion</FName>
    <Desc>public string wkhtmltox\Image\Converter::getVersion ( void )
Determines the version of Converter as reported by libwkhtmltox
</Desc>
    <FName>wkhtmltox\PDF\Converter::add</FName>
    <Desc>public void wkhtmltox\PDF\Converter::add ( wkhtmltox\PDF\Object $object )
Adds the given object to conversion
</Desc>
    <FName>wkhtmltox\PDF\Converter::__construct</FName>
    <Desc>public wkhtmltox\PDF\Converter::__construct ([ array $settings ] )
Creates a PDF converter, using optional configuration settings
</Desc>
    <FName>wkhtmltox\PDF\Converter::convert</FName>
    <Desc>public ?string wkhtmltox\PDF\Converter::convert ( void )
Performs conversion of all previously added Objects
</Desc>
    <FName>wkhtmltox\PDF\Converter::getVersion</FName>
    <Desc>public string wkhtmltox\PDF\Converter::getVersion ( void )
Determines the version of Converter as reported by libwkhtmltox
</Desc>
    <FName>wkhtmltox\PDF\Object::__construct</FName>
    <Desc>public wkhtmltox\PDF\Object::__construct ( string $buffer [, array $settings ] )
Creates a new PDF Object from the given buffer and optional configuration settings
</Desc>
    <FName>Worker::collect</FName>
    <Desc>public int Worker::collect ([ Callable $collector ] )
Allows the worker to collect references determined to be garbage by the optionally given collector.
</Desc>
    <FName>Worker::getStacked</FName>
    <Desc>public int Worker::getStacked ( void )
Returns the number of tasks left on the stack
</Desc>
    <FName>Worker::isShutdown</FName>
    <Desc>public bool Worker::isShutdown ( void )
Whether the worker has been shutdown or not.
</Desc>
    <FName>Worker::isWorking</FName>
    <Desc>public bool Worker::isWorking ( void )
Tell if a Worker is executing Stackables
</Desc>
    <FName>Worker::shutdown</FName>
    <Desc>public bool Worker::shutdown ( void )
Shuts down the worker after executing all of the stacked tasks.
</Desc>
    <FName>Worker::stack</FName>
    <Desc>public int Worker::stack ( Threaded &$work )
Appends the new work to the stack of the referenced worker.
</Desc>
    <FName>Worker::unstack</FName>
    <Desc>public int Worker::unstack ( void )
Removes the first task (the oldest one) in the stack.
</Desc>
    <FName>XMLDiff\Base::__construct</FName>
    <Desc>public XMLDiff\Base::__construct ( string $nsname )
Base constructor for all the worker classes in the xmldiff extension.
</Desc>
    <FName>XMLDiff\Base::diff</FName>
    <Desc>abstract public mixed XMLDiff\Base::diff ( mixed $from , mixed $to )
Abstract diff method to be implemented by inheriting classes. 
The basic purpose of this method is to produce diff of the two documents. The param order matters and will produce different output.
</Desc>
    <FName>XMLDiff\Base::merge</FName>
    <Desc>abstract public mixed XMLDiff\Base::merge ( mixed $src , mixed $diff )
Abstract merge method to be implemented by inheriting classes. 
Basically the method purpose is to produce a new XML document based on the diff information.
</Desc>
    <FName>XMLDiff\DOM::diff</FName>
    <Desc>public DOMDocument XMLDiff\DOM::diff ( DOMDocument $from , DOMDocument $to )
Diff two DOMDocument instances and produce the new one containing the diff information.
</Desc>
    <FName>XMLDiff\DOM::merge</FName>
    <Desc>public DOMDocument XMLDiff\DOM::merge ( DOMDocument $src , DOMDocument $diff )
Create new DOMDocument based on the diff.
</Desc>
    <FName>XMLDiff\File::diff</FName>
    <Desc>public string XMLDiff\File::diff ( string $from , string $to )
Diff two local XML files and produce string with the diff information.
</Desc>
    <FName>XMLDiff\File::merge</FName>
    <Desc>public string XMLDiff\File::merge ( string $src , string $diff )
Create new XML document based on diffs and source document.
</Desc>
    <FName>XMLDiff\Memory::diff</FName>
    <Desc>public string XMLDiff\Memory::diff ( string $from , string $to )
Diff two strings containing XML documents and produce the diff information.
</Desc>
    <FName>XMLDiff\Memory::merge</FName>
    <Desc>public string XMLDiff\Memory::merge ( string $src , string $diff )
Create new XML document based on diffs and source document.
</Desc>
    <FName>XMLReader::close</FName>
    <Desc>public bool XMLReader::close ( void )
Closes the input the XMLReader object is currently parsing.
</Desc>
    <FName>XMLReader::expand</FName>
    <Desc>public DOMNode XMLReader::expand ([ DOMNode $basenode ] )
This method copies the current node and returns the appropriate DOM object.
</Desc>
    <FName>XMLReader::getAttribute</FName>
    <Desc>public string XMLReader::getAttribute ( string $name )
Returns the value of a named attribute or NULL if the attribute does not exist or not positioned on an element node.
</Desc>
    <FName>XMLReader::getAttributeNo</FName>
    <Desc>public string XMLReader::getAttributeNo ( int $index )
Returns the value of an attribute based on its position or an empty string if attribute does not exist or not positioned on an element node.
</Desc>
    <FName>XMLReader::getAttributeNs</FName>
    <Desc>public string XMLReader::getAttributeNs ( string $localName , string $namespaceURI )
Returns the value of an attribute by name and namespace URI or an empty string if attribute does not exist or not positioned on an element node.
</Desc>
    <FName>XMLReader::getParserProperty</FName>
    <Desc>public bool XMLReader::getParserProperty ( int $property )
Indicates if specified property has been set.
</Desc>
    <FName>XMLReader::isValid</FName>
    <Desc>public bool XMLReader::isValid ( void )
Returns a boolean indicating if the document being parsed is currently valid.
</Desc>
    <FName>XMLReader::lookupNamespace</FName>
    <Desc>public string XMLReader::lookupNamespace ( string $prefix )
Lookup in scope namespace for a given prefix.
</Desc>
    <FName>XMLReader::moveToAttribute</FName>
    <Desc>public bool XMLReader::moveToAttribute ( string $name )
Positions cursor on the named attribute.
</Desc>
    <FName>XMLReader::moveToAttributeNo</FName>
    <Desc>public bool XMLReader::moveToAttributeNo ( int $index )
Positions cursor on attribute based on its position.
</Desc>
    <FName>XMLReader::moveToAttributeNs</FName>
    <Desc>public bool XMLReader::moveToAttributeNs ( string $localName , string $namespaceURI )
Positions cursor on the named attribute in specified namespace.
</Desc>
    <FName>XMLReader::moveToElement</FName>
    <Desc>public bool XMLReader::moveToElement ( void )
Moves cursor to the parent Element of current Attribute.
</Desc>
    <FName>XMLReader::moveToFirstAttribute</FName>
    <Desc>public bool XMLReader::moveToFirstAttribute ( void )
Moves cursor to the first Attribute.
</Desc>
    <FName>XMLReader::moveToNextAttribute</FName>
    <Desc>public bool XMLReader::moveToNextAttribute ( void )
Moves cursor to the next Attribute if positioned on an Attribute or moves to first attribute if positioned on an Element.
</Desc>
    <FName>XMLReader::next</FName>
    <Desc>public bool XMLReader::next ([ string $localname ] )
Positions cursor on the next node skipping all subtrees.
</Desc>
    <FName>XMLReader::open</FName>
    <Desc>public bool XMLReader::open ( string $URI [, string $encoding [, int $options = 0 ]] )
Set the URI containing the XML document to be parsed.
</Desc>
    <FName>XMLReader::read</FName>
    <Desc>public bool XMLReader::read ( void )
Moves cursor to the next node in the document.
</Desc>
    <FName>XMLReader::readInnerXml</FName>
    <Desc>public string XMLReader::readInnerXml ( void )
Reads the contents of the current node, including child nodes and markup.
</Desc>
    <FName>XMLReader::readOuterXml</FName>
    <Desc>public string XMLReader::readOuterXml ( void )
Reads the contents of the current node, including the node itself.
</Desc>
    <FName>XMLReader::readString</FName>
    <Desc>public string XMLReader::readString ( void )
Reads the contents of the current node as a string.
</Desc>
    <FName>XMLReader::setParserProperty</FName>
    <Desc>public bool XMLReader::setParserProperty ( int $property , bool $value )
Set parser options. The options must be set after XMLReader::open() or XMLReader::xml() are called and before the first XMLReader::read() call.
</Desc>
    <FName>XMLReader::setRelaxNGSchema</FName>
    <Desc>public bool XMLReader::setRelaxNGSchema ( string $filename )
Set the filename or URI for the RelaxNG Schema to use for validation.
</Desc>
    <FName>XMLReader::setRelaxNGSchemaSource</FName>
    <Desc>public bool XMLReader::setRelaxNGSchemaSource ( string $source )
Set the data containing a RelaxNG Schema to use for validation.
</Desc>
    <FName>XMLReader::setSchema</FName>
    <Desc>public bool XMLReader::setSchema ( string $filename )
Use W3C XSD schema to validate the document as it is processed. Activation is only possible before the first Read().
</Desc>
    <FName>XMLReader::XML</FName>
    <Desc>public bool XMLReader::xml ( string $source [, string $encoding [, int $options = 0 ]] )
Set the data containing the XML to parse.
</Desc>
    <FName>XSLTProcessor::__construct</FName>
    <Desc>XSLTProcessor::__construct ( void )
Creates a new XSLTProcessor object.
</Desc>
    <FName>XSLTProcessor::getParameter</FName>
    <Desc>string XSLTProcessor::getParameter ( string $namespaceURI , string $localName )
Gets a parameter if previously set by XSLTProcessor::setParameter().
</Desc>
    <FName>XSLTProcessor::getSecurityPrefs</FName>
    <Desc>public int XSLTProcessor::getSecurityPrefs ( void )
Gets the security preferences.
</Desc>
    <FName>XSLTProcessor::hasExsltSupport</FName>
    <Desc>bool XSLTProcessor::hasExsltSupport ( void )
This method determines if PHP was built with the » EXSLT library.
</Desc>
    <FName>XSLTProcessor::importStylesheet</FName>
    <Desc>public bool XSLTProcessor::importStylesheet ( object $stylesheet )
This method imports the stylesheet into the XSLTProcessor for transformations.
</Desc>
    <FName>XSLTProcessor::registerPHPFunctions</FName>
    <Desc>void XSLTProcessor::registerPHPFunctions ([ mixed $restrict ] )
This method enables the ability to use PHP functions as XSLT functions within XSL stylesheets.
</Desc>
    <FName>XSLTProcessor::removeParameter</FName>
    <Desc>bool XSLTProcessor::removeParameter ( string $namespaceURI , string $localName )
Removes a parameter, if set. This will make the processor use the default value for the parameter as specified in the stylesheet.
</Desc>
    <FName>XSLTProcessor::setParameter</FName>
    <Desc>bool XSLTProcessor::setParameter ( string $namespace , string $name , string $value )
bool XSLTProcessor::setParameter ( string $namespace , array $options )
Sets the value of one or more parameters to be used in subsequent transformations with XSLTProcessor. If the parameter doesn't exist in the stylesheet it will be ignored.
</Desc>
    <FName>XSLTProcessor::setProfiling</FName>
    <Desc>bool XSLTProcessor::setProfiling ( string $filename )
Sets the file to output profiling information when processing a stylesheet.
</Desc>
    <FName>XSLTProcessor::setSecurityPrefs</FName>
    <Desc>public int XSLTProcessor::setSecurityPrefs ( int $securityPrefs )
Sets the security preferences.
</Desc>
    <FName>XSLTProcessor::transformToDoc</FName>
    <Desc>DOMDocument XSLTProcessor::transformToDoc ( DOMNode $doc )
Transforms the source node to a DOMDocument applying the stylesheet given by the XSLTProcessor::importStylesheet() method.
</Desc>
    <FName>XSLTProcessor::transformToUri</FName>
    <Desc>int XSLTProcessor::transformToURI ( DOMDocument $doc , string $uri )
Transforms the source node to an URI applying the stylesheet given by the XSLTProcessor::importStylesheet() method.
</Desc>
    <FName>XSLTProcessor::transformToXml</FName>
    <Desc>string XSLTProcessor::transformToXml ( object $doc )
Transforms the source node to a string applying the stylesheet given by the xsltprocessor::importStylesheet() method.
</Desc>
    <FName>Yaconf::get</FName>
    <Desc>public static mixed Yaconf::get ( string $name [, mixed $default_value = NULL ] )
</Desc>
    <FName>Yaconf::has</FName>
    <Desc>public static bool Yaconf::has ( string $name )
</Desc>
    <FName>Yaf_Action_Abstract::execute</FName>
    <Desc>abstract publicmixed Yaf_Action_Abstract::execute ([ mixed $arg [, mixed $... ]] )
user should always define this method for a action, this is the entry point of an action. Yaf_Action_Abstract::execute() may have agruments. 
Note: 
The value retrived from the request is not safe. you should do some filtering work before you use it.
</Desc>
    <FName>Yaf_Action_Abstract::getController</FName>
    <Desc>publicYaf_Controller_Abstract Yaf_Action_Abstract::getController ( void )
retrieve current controller object.
</Desc>
    <FName>Yaf_Application::app</FName>
    <Desc>public staticmixed Yaf_Application::app ( void )
Retrieve the Yaf_Application instance. Alternatively, we also could use Yaf_Dispatcher::getApplication().
</Desc>
    <FName>Yaf_Application::bootstrap</FName>
    <Desc>public void Yaf_Application::bootstrap ([ Yaf_Bootstrap_Abstract $bootstrap ] )
Run a Bootstrap, all the methods defined in the Bootstrap and named with prefix "_init" will be called according to their declaration order, if the parameter bootstrap is not supplied, Yaf will look for a Bootstrap under application.directory.
</Desc>
    <FName>Yaf_Application::clearLastError</FName>
    <Desc>public Yaf_Application Yaf_Application::clearLastError ( void )
</Desc>
    <FName>Yaf_Application::__clone</FName>
    <Desc>private void Yaf_Application::__clone ( void )
</Desc>
    <FName>Yaf_Application::__construct</FName>
    <Desc>public Yaf_Application::__construct ( mixed $config [, string $envrion ] )
Instance a Yaf_Application.
</Desc>
    <FName>Yaf_Application::__destruct</FName>
    <Desc>public void Yaf_Application::__destruct ( void )
</Desc>
    <FName>Yaf_Application::environ</FName>
    <Desc>public void Yaf_Application::environ ( void )
Retrive environ which was defined in yaf.environ which has a default value "product".
</Desc>
    <FName>Yaf_Application::execute</FName>
    <Desc>public void Yaf_Application::execute ( callable $entry , string $... )
This method is typically used to run Yaf_Application in a crontab work. Make the crontab work can also use the autoloader and Bootstrap mechanism.
</Desc>
    <FName>Yaf_Application::getAppDirectory</FName>
    <Desc>public Yaf_Application Yaf_Application::getAppDirectory ( void )
</Desc>
    <FName>Yaf_Application::getConfig</FName>
    <Desc>public Yaf_Config_Abstract Yaf_Application::getConfig ( void )
</Desc>
    <FName>Yaf_Application::getDispatcher</FName>
    <Desc>public Yaf_Dispatcher Yaf_Application::getDispatcher ( void )
</Desc>
    <FName>Yaf_Application::getLastErrorMsg</FName>
    <Desc>public string Yaf_Application::getLastErrorMsg ( void )
</Desc>
    <FName>Yaf_Application::getLastErrorNo</FName>
    <Desc>public int Yaf_Application::getLastErrorNo ( void )
</Desc>
    <FName>Yaf_Application::getModules</FName>
    <Desc>public array Yaf_Application::getModules ( void )
Get the modules list defined in config, if no one defined, there will always be a module named "Index".
</Desc>
    <FName>Yaf_Application::run</FName>
    <Desc>public void Yaf_Application::run ( void )
Run a Yaf_Application, let the Yaf_Application accept a request and route this request, dispatch to controller/action and render response. Finally, return the response to the client.
</Desc>
    <FName>Yaf_Application::setAppDirectory</FName>
    <Desc>public Yaf_Application Yaf_Application::setAppDirectory ( string $directory )
</Desc>
    <FName>Yaf_Application::__sleep</FName>
    <Desc>private void Yaf_Application::__sleep ( void )
</Desc>
    <FName>Yaf_Application::__wakeup</FName>
    <Desc>private void Yaf_Application::__wakeup ( void )
</Desc>
    <FName>Yaf_Config_Abstract::get</FName>
    <Desc>abstract public mixed Yaf_Config_Abstract::get ( string $name , mixed $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Abstract::readonly</FName>
    <Desc>abstract public bool Yaf_Config_Abstract::readonly ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Abstract::set</FName>
    <Desc>abstract public Yaf_Config_Abstract Yaf_Config_Abstract::set ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Abstract::toArray</FName>
    <Desc>abstract public array Yaf_Config_Abstract::toArray ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::__construct</FName>
    <Desc>public Yaf_Config_Ini::__construct ( string $config_file [, string $section ] )
Yaf_Config_Ini constructor
</Desc>
    <FName>Yaf_Config_Ini::count</FName>
    <Desc>public void Yaf_Config_Ini::count ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::current</FName>
    <Desc>public void Yaf_Config_Ini::current ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::__get</FName>
    <Desc>public void Yaf_Config_Ini::__get ([ string $name ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::__isset</FName>
    <Desc>public void Yaf_Config_Ini::__isset ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::key</FName>
    <Desc>public void Yaf_Config_Ini::key ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::next</FName>
    <Desc>public void Yaf_Config_Ini::next ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::offsetExists</FName>
    <Desc>public void Yaf_Config_Ini::offsetExists ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::offsetGet</FName>
    <Desc>public void Yaf_Config_Ini::offsetGet ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::offsetSet</FName>
    <Desc>public void Yaf_Config_Ini::offsetSet ( string $name , string $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::offsetUnset</FName>
    <Desc>public void Yaf_Config_Ini::offsetUnset ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::readonly</FName>
    <Desc>public void Yaf_Config_Ini::readonly ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::rewind</FName>
    <Desc>public void Yaf_Config_Ini::rewind ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::__set</FName>
    <Desc>public void Yaf_Config_Ini::__set ( string $name , mixed $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Ini::toArray</FName>
    <Desc>public array Yaf_Config_Ini::toArray ( void )
Returns a PHP array from the Yaf_Config_Ini
</Desc>
    <FName>Yaf_Config_Ini::valid</FName>
    <Desc>public void Yaf_Config_Ini::valid ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::__construct</FName>
    <Desc>public Yaf_Config_Simple::__construct ( string $config_file [, string $section ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::count</FName>
    <Desc>public void Yaf_Config_Simple::count ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::current</FName>
    <Desc>public void Yaf_Config_Simple::current ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::__get</FName>
    <Desc>public void Yaf_Config_Simple::__get ([ string $name ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::__isset</FName>
    <Desc>public void Yaf_Config_Simple::__isset ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::key</FName>
    <Desc>public void Yaf_Config_Simple::key ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::next</FName>
    <Desc>public void Yaf_Config_Simple::next ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::offsetExists</FName>
    <Desc>public void Yaf_Config_Simple::offsetExists ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::offsetGet</FName>
    <Desc>public void Yaf_Config_Simple::offsetGet ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::offsetSet</FName>
    <Desc>public void Yaf_Config_Simple::offsetSet ( string $name , string $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::offsetUnset</FName>
    <Desc>public void Yaf_Config_Simple::offsetUnset ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::readonly</FName>
    <Desc>public void Yaf_Config_Simple::readonly ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::rewind</FName>
    <Desc>public void Yaf_Config_Simple::rewind ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::__set</FName>
    <Desc>public void Yaf_Config_Simple::__set ( string $name , string $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Config_Simple::toArray</FName>
    <Desc>public array Yaf_Config_Simple::toArray ( void )
Returns a PHP array from the Yaf_Config_Simple
</Desc>
    <FName>Yaf_Config_Simple::valid</FName>
    <Desc>public void Yaf_Config_Simple::valid ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Controller_Abstract::__clone</FName>
    <Desc>final private void Yaf_Controller_Abstract::__clone ( void )
</Desc>
    <FName>Yaf_Controller_Abstract::__construct</FName>
    <Desc>final private Yaf_Controller_Abstract::__construct ( void )
Yaf_Controller_Abstract::__construct() is final, which means it can not be overridden. You may want to see Yaf_Controller_Abstract::init() instead.
</Desc>
    <FName>Yaf_Controller_Abstract::display</FName>
    <Desc>protected bool Yaf_Controller_Abstract::display ( string $tpl [, array $parameters ] )
</Desc>
    <FName>Yaf_Controller_Abstract::forward</FName>
    <Desc>public void Yaf_Controller_Abstract::forward ( string $action [, array $paramters ] )
public void Yaf_Controller_Abstract::forward ( string $controller , string $action [, array $paramters ] )
public void Yaf_Controller_Abstract::forward ( string $module , string $controller , string $action [, array $paramters ] )
forward current execution process to other action. 
Note: 
this method doesn't switch to the destination action immediately, it will take place after current flow finish.
</Desc>
    <FName>Yaf_Controller_Abstract::getInvokeArg</FName>
    <Desc>public void Yaf_Controller_Abstract::getInvokeArg ( string $name )
</Desc>
    <FName>Yaf_Controller_Abstract::getInvokeArgs</FName>
    <Desc>public void Yaf_Controller_Abstract::getInvokeArgs ( void )
</Desc>
    <FName>Yaf_Controller_Abstract::getModuleName</FName>
    <Desc>public string Yaf_Controller_Abstract::getModuleName ( void )
get the controller's module name
</Desc>
    <FName>Yaf_Controller_Abstract::getRequest</FName>
    <Desc>public Yaf_Request_Abstract Yaf_Controller_Abstract::getRequest ( void )
retrieve current request object
</Desc>
    <FName>Yaf_Controller_Abstract::getResponse</FName>
    <Desc>public Yaf_Response_Abstract Yaf_Controller_Abstract::getResponse ( void )
retrieve current response object
</Desc>
    <FName>Yaf_Controller_Abstract::getView</FName>
    <Desc>public Yaf_View_Interface Yaf_Controller_Abstract::getView ( void )
retrieve view engine
</Desc>
    <FName>Yaf_Controller_Abstract::getViewpath</FName>
    <Desc>public string Yaf_Controller_Abstract::getViewpath ( void )
</Desc>
    <FName>Yaf_Controller_Abstract::init</FName>
    <Desc>public void Yaf_Controller_Abstract::init ( void )
Yaf_Controller_Abstract::__construct() is final, which means users can not override it. but users can define Yaf_Controller_Abstract::init(), which will be called after controller object is instantiated.
</Desc>
    <FName>Yaf_Controller_Abstract::initView</FName>
    <Desc>public void Yaf_Controller_Abstract::initView ([ array $options ] )
</Desc>
    <FName>Yaf_Controller_Abstract::redirect</FName>
    <Desc>public bool Yaf_Controller_Abstract::redirect ( string $url )
redirect to a URL by sending a 302 header
</Desc>
    <FName>Yaf_Controller_Abstract::render</FName>
    <Desc>protected string Yaf_Controller_Abstract::render ( string $tpl [, array $parameters ] )
</Desc>
    <FName>Yaf_Controller_Abstract::setViewpath</FName>
    <Desc>public void Yaf_Controller_Abstract::setViewpath ( string $view_directory )
</Desc>
    <FName>Yaf_Dispatcher::autoRender</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::autoRender ([ bool $flag ] )
Yaf_Dispatcher will render automatically after dispatches a incoming request, you can prevent the rendering by calling this method with flag TRUE 
Note: 
you can simply return FALSE in a action to prevent the auto-rendering of that action
</Desc>
    <FName>Yaf_Dispatcher::catchException</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::catchException ([ bool $flag ] )
While the application.dispatcher.throwException is On(you can also calling to Yaf_Dispatcher::throwException(TRUE)() to enable it), Yaf will throw Exception whe error occurrs instead of trigger error. 
then if you enable Yaf_Dispatcher::catchException()(also can enabled by set application.dispatcher.catchException), all uncaught Exceptions will be caught by ErrorController::error if you have defined one.
</Desc>
    <FName>Yaf_Dispatcher::__clone</FName>
    <Desc>private void Yaf_Dispatcher::__clone ( void )
</Desc>
    <FName>Yaf_Dispatcher::__construct</FName>
    <Desc>public Yaf_Dispatcher::__construct ( void )
</Desc>
    <FName>Yaf_Dispatcher::disableView</FName>
    <Desc>public bool Yaf_Dispatcher::disableView ( void )
disable view engine, used in some app that user will output by theirself 
Note: 
you can simply return FALSE in a action to prevent the auto-rendering of that action
</Desc>
    <FName>Yaf_Dispatcher::dispatch</FName>
    <Desc>public Yaf_Response_Abstract Yaf_Dispatcher::dispatch ( Yaf_Request_Abstract $request )
This method does the heavy work of the Yaf_Dispatcher. It take a request object. 
The dispatch process has three distinct events: 
Routing 
Dispatching 
Response 
Routing takes place exactly once, using the values in the request object when dispatch() is called. Dispatching takes place in a loop; a request may either indicate multiple actions to dispatch, or the controller or a plugin may reset the request object to force additional actions to dispatch(see Yaf_Plugin_Abstract. When all is done, the Yaf_Dispatcher returns a response.
</Desc>
    <FName>Yaf_Dispatcher::enableView</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::enableView ( void )
</Desc>
    <FName>Yaf_Dispatcher::flushInstantly</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::flushInstantly ([ bool $flag ] )
</Desc>
    <FName>Yaf_Dispatcher::getApplication</FName>
    <Desc>public Yaf_Application Yaf_Dispatcher::getApplication ( void )
Retrive the Yaf_Application instance. same as Yaf_Application::app().
</Desc>
    <FName>Yaf_Dispatcher::getInstance</FName>
    <Desc>public static Yaf_Dispatcher Yaf_Dispatcher::getInstance ( void )
</Desc>
    <FName>Yaf_Dispatcher::getRequest</FName>
    <Desc>public Yaf_Request_Abstract Yaf_Dispatcher::getRequest ( void )
</Desc>
    <FName>Yaf_Dispatcher::getRouter</FName>
    <Desc>public Yaf_Router Yaf_Dispatcher::getRouter ( void )
</Desc>
    <FName>Yaf_Dispatcher::initView</FName>
    <Desc>public Yaf_View_Interface Yaf_Dispatcher::initView ( string $templates_dir [, array $options ] )
</Desc>
    <FName>Yaf_Dispatcher::registerPlugin</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::registerPlugin ( Yaf_Plugin_Abstract $plugin )
Register a plugin(see Yaf_Plugin_Abstract). Generally, we register plugins in Bootstrap(see Yaf_Bootstrap_Abstract).
</Desc>
    <FName>Yaf_Dispatcher::returnResponse</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::returnResponse ( bool $flag )
</Desc>
    <FName>Yaf_Dispatcher::setDefaultAction</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::setDefaultAction ( string $action )
</Desc>
    <FName>Yaf_Dispatcher::setDefaultController</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::setDefaultController ( string $controller )
</Desc>
    <FName>Yaf_Dispatcher::setDefaultModule</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::setDefaultModule ( string $module )
</Desc>
    <FName>Yaf_Dispatcher::setErrorHandler</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::setErrorHandler ( call $callback , int $error_types )
Set error handler for Yaf. when application.dispatcher.throwException is off, Yaf will trigger catchable error while unexpected errors occrred. 
Thus, this error handler will be called while the error raise.
</Desc>
    <FName>Yaf_Dispatcher::setRequest</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::setRequest ( Yaf_Request_Abstract $request )
</Desc>
    <FName>Yaf_Dispatcher::setView</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::setView ( Yaf_View_Interface $view )
This method proviods a solution for that if you want use a custom view engine instead of Yaf_View_Simple
</Desc>
    <FName>Yaf_Dispatcher::__sleep</FName>
    <Desc>private void Yaf_Dispatcher::__sleep ( void )
</Desc>
    <FName>Yaf_Dispatcher::throwException</FName>
    <Desc>public Yaf_Dispatcher Yaf_Dispatcher::throwException ([ bool $flag ] )
Siwtch on/off exception throwing while unexpected error occurring. When this is on, Yaf will throwing exceptions instead of triggering catchable errors. 
You can also use application.dispatcher.throwException to achieve the same purpose.
</Desc>
    <FName>Yaf_Dispatcher::__wakeup</FName>
    <Desc>private void Yaf_Dispatcher::__wakeup ( void )
</Desc>
    <FName>Yaf_Exception::__construct</FName>
    <Desc>public Yaf_Exception::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Exception::getPrevious</FName>
    <Desc>public void Yaf_Exception::getPrevious ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::autoload</FName>
    <Desc>public void Yaf_Loader::autoload ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::clearLocalNamespace</FName>
    <Desc>public void Yaf_Loader::clearLocalNamespace ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::__clone</FName>
    <Desc>private void Yaf_Loader::__clone ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::__construct</FName>
    <Desc>private Yaf_Loader::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::getInstance</FName>
    <Desc>public static void Yaf_Loader::getInstance ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::getLibraryPath</FName>
    <Desc>public Yaf_Loader Yaf_Loader::getLibraryPath ([ bool $is_global = FALSE ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::getLocalNamespace</FName>
    <Desc>public void Yaf_Loader::getLocalNamespace ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::import</FName>
    <Desc>public static void Yaf_Loader::import ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::isLocalName</FName>
    <Desc>public void Yaf_Loader::isLocalName ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::registerLocalNamespace</FName>
    <Desc>public void Yaf_Loader::registerLocalNamespace ( mixed $prefix )
Register local class prefix name, Yaf_Loader search classes in two library directories, the one is configured via application.library.directory(in application.ini) which is called local libraray directory; the other is configured via yaf.library (in php.ini) which is callled global library directory, since it can be shared by many applications in the same server. 
When an autloading is trigger, Yaf_Loader will determine which library directory should be searched in by exame the prefix name of the missed classname. If the prefix name is registered as a localnamespack then look for it in local library directory, otherwise look for it in global library directory. 
Note: 
If yaf.library is not configured, then the global library directory is assumed to be the local library directory. in that case, all autoloading will look for local library directory. But if you want your Yaf application be strong, then always register your own classes as local classes.
</Desc>
    <FName>Yaf_Loader::setLibraryPath</FName>
    <Desc>public Yaf_Loader Yaf_Loader::setLibraryPath ( string $directory [, bool $is_global = FALSE ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::__sleep</FName>
    <Desc>private void Yaf_Loader::__sleep ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Loader::__wakeup</FName>
    <Desc>private void Yaf_Loader::__wakeup ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Plugin_Abstract::dispatchLoopShutdown</FName>
    <Desc>public void Yaf_Plugin_Abstract::dispatchLoopShutdown ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )
This is the latest hook in Yaf plugin hook system, if a custom plugin implement this method, then it will be called after the dispatch loop finished. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Plugin_Abstract::dispatchLoopStartup</FName>
    <Desc>public void Yaf_Plugin_Abstract::dispatchLoopStartup ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )
</Desc>
    <FName>Yaf_Plugin_Abstract::postDispatch</FName>
    <Desc>public void Yaf_Plugin_Abstract::postDispatch ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Plugin_Abstract::preDispatch</FName>
    <Desc>public void Yaf_Plugin_Abstract::preDispatch ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Plugin_Abstract::preResponse</FName>
    <Desc>public void Yaf_Plugin_Abstract::preResponse ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Plugin_Abstract::routerShutdown</FName>
    <Desc>public void Yaf_Plugin_Abstract::routerShutdown ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )
This hook will be trigged after the route process finished, this hook is usually used for login check. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Plugin_Abstract::routerStartup</FName>
    <Desc>public void Yaf_Plugin_Abstract::routerStartup ( Yaf_Request_Abstract $request , Yaf_Response_Abstract $response )
This is the earliest hook in Yaf plugin hook system, if a custom plugin implement this method, then it will be called before routing a request. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Registry::__clone</FName>
    <Desc>private void Yaf_Registry::__clone ( void )
</Desc>
    <FName>Yaf_Registry::__construct</FName>
    <Desc>private Yaf_Registry::__construct ( void )
</Desc>
    <FName>Yaf_Registry::del</FName>
    <Desc>public static void Yaf_Registry::del ( string $name )
Remove an item from registry
</Desc>
    <FName>Yaf_Registry::get</FName>
    <Desc>public static mixed Yaf_Registry::get ( string $name )
Retrieve an item from registry
</Desc>
    <FName>Yaf_Registry::has</FName>
    <Desc>public static bool Yaf_Registry::has ( string $name )
Check whether an item exists
</Desc>
    <FName>Yaf_Registry::set</FName>
    <Desc>public static bool Yaf_Registry::set ( string $name , string $value )
Add an item into registry
</Desc>
    <FName>Yaf_Request_Abstract::getActionName</FName>
    <Desc>public void Yaf_Request_Abstract::getActionName ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Abstract::getBaseUri</FName>
    <Desc>public void Yaf_Request_Abstract::getBaseUri ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Abstract::getControllerName</FName>
    <Desc>public void Yaf_Request_Abstract::getControllerName ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Abstract::getEnv</FName>
    <Desc>public void Yaf_Request_Abstract::getEnv ( string $name [, string $default ] )
Retrieve ENV variable
</Desc>
    <FName>Yaf_Request_Abstract::getException</FName>
    <Desc>public void Yaf_Request_Abstract::getException ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Abstract::getLanguage</FName>
    <Desc>public void Yaf_Request_Abstract::getLanguage ( void )
</Desc>
    <FName>Yaf_Request_Abstract::getMethod</FName>
    <Desc>public string Yaf_Request_Abstract::getMethod ( void )
</Desc>
    <FName>Yaf_Request_Abstract::getModuleName</FName>
    <Desc>public void Yaf_Request_Abstract::getModuleName ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Abstract::getParam</FName>
    <Desc>public mixed Yaf_Request_Abstract::getParam ( string $name [, string $default ] )
</Desc>
    <FName>Yaf_Request_Abstract::getParams</FName>
    <Desc>public array Yaf_Request_Abstract::getParams ( void )
</Desc>
    <FName>Yaf_Request_Abstract::getRequestUri</FName>
    <Desc>public void Yaf_Request_Abstract::getRequestUri ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Abstract::getServer</FName>
    <Desc>public void Yaf_Request_Abstract::getServer ( string $name [, string $default ] )
Retrieve SERVER variable
</Desc>
    <FName>Yaf_Request_Abstract::isCli</FName>
    <Desc>public bool Yaf_Request_Abstract::isCli ( void )
</Desc>
    <FName>Yaf_Request_Abstract::isDispatched</FName>
    <Desc>public bool Yaf_Request_Abstract::isDispatched ( void )
</Desc>
    <FName>Yaf_Request_Abstract::isGet</FName>
    <Desc>public bool Yaf_Request_Abstract::isGet ( void )
</Desc>
    <FName>Yaf_Request_Abstract::isHead</FName>
    <Desc>public bool Yaf_Request_Abstract::isHead ( void )
</Desc>
    <FName>Yaf_Request_Abstract::isOptions</FName>
    <Desc>public bool Yaf_Request_Abstract::isOptions ( void )
</Desc>
    <FName>Yaf_Request_Abstract::isPost</FName>
    <Desc>public bool Yaf_Request_Abstract::isPost ( void )
</Desc>
    <FName>Yaf_Request_Abstract::isPut</FName>
    <Desc>public bool Yaf_Request_Abstract::isPut ( void )
</Desc>
    <FName>Yaf_Request_Abstract::isRouted</FName>
    <Desc>public bool Yaf_Request_Abstract::isRouted ( void )
</Desc>
    <FName>Yaf_Request_Abstract::isXmlHttpRequest</FName>
    <Desc>public bool Yaf_Request_Abstract::isXmlHttpRequest ( void )
</Desc>
    <FName>Yaf_Request_Abstract::setActionName</FName>
    <Desc>public void Yaf_Request_Abstract::setActionName ( string $action )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Abstract::setBaseUri</FName>
    <Desc>public bool Yaf_Request_Abstract::setBaseUri ( string $uir )
Set base URI, base URI is used when doing routing, in routing phase request URI is used to route a request, while base URI is used to skip the leadding part(base URI) of request URI. That is, if comes a request with request URI a/b/c, then if you set base URI to "a/b", only "/c" will be used in routing phase. 
Note: 
generally, you don't need to set this, Yaf will determine it automatically.
</Desc>
    <FName>Yaf_Request_Abstract::setControllerName</FName>
    <Desc>public void Yaf_Request_Abstract::setControllerName ( string $controller )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Abstract::setDispatched</FName>
    <Desc>public void Yaf_Request_Abstract::setDispatched ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Abstract::setModuleName</FName>
    <Desc>public void Yaf_Request_Abstract::setModuleName ( string $module )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Abstract::setParam</FName>
    <Desc>public bool Yaf_Request_Abstract::setParam ( string $name [, string $value ] )
Set a parameter to request, which can be retrieved by Yaf_Request_Abstract::getParam()
</Desc>
    <FName>Yaf_Request_Abstract::setRequestUri</FName>
    <Desc>public void Yaf_Request_Abstract::setRequestUri ( string $uir )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Abstract::setRouted</FName>
    <Desc>public void Yaf_Request_Abstract::setRouted ([ string $flag ] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Http::__clone</FName>
    <Desc>private void Yaf_Request_Http::__clone ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Http::__construct</FName>
    <Desc>public Yaf_Request_Http::__construct ([ string $request_uri [, string $base_uri ]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Http::get</FName>
    <Desc>public mixed Yaf_Request_Http::get ( string $name [, string $default ] )
Retrieve variable from client, this method will search the name in request pramas, if the name is not found, then will search in POST, GET, Cookie, Server
</Desc>
    <FName>Yaf_Request_Http::getCookie</FName>
    <Desc>public mixed Yaf_Request_Http::getCookie ( string $name [, string $default ] )
Retrieve Cookie variable
</Desc>
    <FName>Yaf_Request_Http::getFiles</FName>
    <Desc>public void Yaf_Request_Http::getFiles ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Http::getPost</FName>
    <Desc>public mixed Yaf_Request_Http::getPost ( string $name [, string $default ] )
Retrieve POST variable
</Desc>
    <FName>Yaf_Request_Http::getQuery</FName>
    <Desc>public mixed Yaf_Request_Http::getQuery ( string $name [, string $default ] )
Retrieve GET variable
</Desc>
    <FName>Yaf_Request_Http::getRaw</FName>
    <Desc>public mixed Yaf_Request_Http::getRaw ( void )
Retrieve Raw request body
</Desc>
    <FName>Yaf_Request_Http::getRequest</FName>
    <Desc>public void Yaf_Request_Http::getRequest ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Http::isXmlHttpRequest</FName>
    <Desc>public bool Yaf_Request_Http::isXmlHttpRequest ( void )
Check the request whether it is a Ajax Request. 
Note: 
This method depends on the request header: HTTP_X_REQUESTED_WITH, some Javascript library doesn't set this header while doing Ajax request
</Desc>
    <FName>Yaf_Request_Simple::__clone</FName>
    <Desc>private void Yaf_Request_Simple::__clone ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Simple::__construct</FName>
    <Desc>public Yaf_Request_Simple::__construct ([ string $method [, string $module [, string $controller [, string $action [, array $params ]]]]] )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Simple::get</FName>
    <Desc>public void Yaf_Request_Simple::get ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Simple::getCookie</FName>
    <Desc>public void Yaf_Request_Simple::getCookie ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Simple::getFiles</FName>
    <Desc>public void Yaf_Request_Simple::getFiles ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Simple::getPost</FName>
    <Desc>public void Yaf_Request_Simple::getPost ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Simple::getQuery</FName>
    <Desc>public void Yaf_Request_Simple::getQuery ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Simple::getRequest</FName>
    <Desc>public void Yaf_Request_Simple::getRequest ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Request_Simple::isXmlHttpRequest</FName>
    <Desc>public void Yaf_Request_Simple::isXmlHttpRequest ( void )
</Desc>
    <FName>Yaf_Response_Abstract::appendBody</FName>
    <Desc>public bool Yaf_Response_Abstract::appendBody ( string $content [, string $key ] )
Append a content to a exists content block
</Desc>
    <FName>Yaf_Response_Abstract::clearBody</FName>
    <Desc>public bool Yaf_Response_Abstract::clearBody ([ string $key ] )
Clear existsed content
</Desc>
    <FName>Yaf_Response_Abstract::clearHeaders</FName>
    <Desc>public void Yaf_Response_Abstract::clearHeaders ( void )
</Desc>
    <FName>Yaf_Response_Abstract::__clone</FName>
    <Desc>private void Yaf_Response_Abstract::__clone ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Response_Abstract::__construct</FName>
    <Desc>public Yaf_Response_Abstract::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Response_Abstract::__destruct</FName>
    <Desc>public void Yaf_Response_Abstract::__destruct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Response_Abstract::getBody</FName>
    <Desc>public mixed Yaf_Response_Abstract::getBody ([ string $key ] )
Retrieve a exists content
</Desc>
    <FName>Yaf_Response_Abstract::getHeader</FName>
    <Desc>public void Yaf_Response_Abstract::getHeader ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Response_Abstract::prependBody</FName>
    <Desc>public bool Yaf_Response_Abstract::prependBody ( string $content [, string $key ] )
prepend a content to a exists content block
</Desc>
    <FName>Yaf_Response_Abstract::response</FName>
    <Desc>public void Yaf_Response_Abstract::response ( void )
send response
</Desc>
    <FName>Yaf_Response_Abstract::setAllHeaders</FName>
    <Desc>protected void Yaf_Response_Abstract::setAllHeaders ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Response_Abstract::setBody</FName>
    <Desc>public bool Yaf_Response_Abstract::setBody ( string $content [, string $key ] )
Set content to response
</Desc>
    <FName>Yaf_Response_Abstract::setHeader</FName>
    <Desc>public bool Yaf_Response_Abstract::setHeader ( string $name , string $value [, bool $replace ] )
Used to send a HTTP header
</Desc>
    <FName>Yaf_Response_Abstract::setRedirect</FName>
    <Desc>public void Yaf_Response_Abstract::setRedirect ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Response_Abstract::__toString</FName>
    <Desc>private string Yaf_Response_Abstract::__toString ( void )
</Desc>
    <FName>Yaf_Route_Interface::assemble</FName>
    <Desc>abstract public string Yaf_Route_Interface::assemble ( array $info [, array $query ] )
this method returns a url according to the argument info, and append query strings to the url according to the argument query. 
a route should implement this method according to its own route rules, and do a reverse progress.
</Desc>
    <FName>Yaf_Route_Interface::route</FName>
    <Desc>abstract public bool Yaf_Route_Interface::route ( Yaf_Request_Abstract $request )
Yaf_Route_Interface::route() is the only method that a custom route should implement. 
Note: 
since of 2.3.0, there is another method should also be implemented, see Yaf_Route_Interface::assemble(). 
if this method return TRUE, then the route process will be end. otherwise, Yaf_Router will call next route in the route stack to route request. 
This method would set the route result to the parameter request, by calling Yaf_Request_Abstract::setControllerName(), Yaf_Request_Abstract::setActionName() and Yaf_Request_Abstract::setModuleName(). 
This method should also call Yaf_Request_Abstract::setRouted() to make the request routed at last.
</Desc>
    <FName>Yaf_Route_Map::assemble</FName>
    <Desc>public string Yaf_Route_Map::assemble ( array $info [, array $query ] )
Assemble a url.
</Desc>
    <FName>Yaf_Route_Map::__construct</FName>
    <Desc>public Yaf_Route_Map::__construct ([ string $controller_prefer = FALSE [, string $delimiter = "" ]] )
</Desc>
    <FName>Yaf_Route_Map::route</FName>
    <Desc>public bool Yaf_Route_Map::route ( Yaf_Request_Abstract $request )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Route_Regex::assemble</FName>
    <Desc>public string Yaf_Route_Regex::assemble ( array $info [, array $query ] )
Assemble a url.
</Desc>
    <FName>Yaf_Route_Regex::__construct</FName>
    <Desc>public Yaf_Route_Regex::__construct ( string $match , array $route [, array $map [, array $verify [, string $reverse ]]] )
</Desc>
    <FName>Yaf_Route_Regex::route</FName>
    <Desc>public bool Yaf_Route_Regex::route ( Yaf_Request_Abstract $request )
Route a incoming request. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Route_Rewrite::assemble</FName>
    <Desc>public string Yaf_Route_Rewrite::assemble ( array $info [, array $query ] )
Assemble a url.
</Desc>
    <FName>Yaf_Route_Rewrite::__construct</FName>
    <Desc>public Yaf_Route_Rewrite::__construct ( string $match , array $route [, array $verify ] )
</Desc>
    <FName>Yaf_Route_Rewrite::route</FName>
    <Desc>public bool Yaf_Route_Rewrite::route ( Yaf_Request_Abstract $request )
</Desc>
    <FName>Yaf_Route_Simple::assemble</FName>
    <Desc>public string Yaf_Route_Simple::assemble ( array $info [, array $query ] )
Assemble a url.
</Desc>
    <FName>Yaf_Route_Simple::__construct</FName>
    <Desc>public Yaf_Route_Simple::__construct ( string $module_name , string $controller_name , string $action_name )
Yaf_Route_Simple will get route info from query string. and the parameters of this constructor will used as keys while searching for the route info in $_GET. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Route_Simple::route</FName>
    <Desc>public bool Yaf_Route_Simple::route ( Yaf_Request_Abstract $request )
see Yaf_Route_Simple::__construct() 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Route_Static::assemble</FName>
    <Desc>public string Yaf_Route_Static::assemble ( array $info [, array $query ] )
Assemble a url.
</Desc>
    <FName>Yaf_Route_Static::match</FName>
    <Desc>public void Yaf_Route_Static::match ( string $uri )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Route_Static::route</FName>
    <Desc>public bool Yaf_Route_Static::route ( Yaf_Request_Abstract $request )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Route_Supervar::assemble</FName>
    <Desc>public string Yaf_Route_Supervar::assemble ( array $info [, array $query ] )
Assemble a url.
</Desc>
    <FName>Yaf_Route_Supervar::__construct</FName>
    <Desc>public Yaf_Route_Supervar::__construct ( string $supervar_name )
Yaf_Route_Supervar is similar with Yaf_Route_Static, the difference is Yaf_Route_Supervar will look for path info in query string, and the parameter supervar_name is the key.
</Desc>
    <FName>Yaf_Route_Supervar::route</FName>
    <Desc>public bool Yaf_Route_Supervar::route ( Yaf_Request_Abstract $request )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Router::addConfig</FName>
    <Desc>public bool Yaf_Router::addConfig ( Yaf_Config_Abstract $config )
Add routes defined by configs into Yaf_Router's route stack
</Desc>
    <FName>Yaf_Router::addRoute</FName>
    <Desc>public bool Yaf_Router::addRoute ( string $name , Yaf_Route_Abstract $route )
defaultly, Yaf_Router using a Yaf_Route_Static as its defualt route. you can add new routes into router's route stack by calling this method. 
the newer route will be called before the older(route stack), and if the newer router return TRUE, the router process will be end. otherwise, the older one will be called.
</Desc>
    <FName>Yaf_Router::__construct</FName>
    <Desc>public Yaf_Router::__construct ( void )
</Desc>
    <FName>Yaf_Router::getCurrentRoute</FName>
    <Desc>public string Yaf_Router::getCurrentRoute ( void )
Get the name of the route which is effective in the route process. 
Note: 
You should call this method after the route process finished, since before that, this method will always return NULL.
</Desc>
    <FName>Yaf_Router::getRoute</FName>
    <Desc>public Yaf_Route_Interface Yaf_Router::getRoute ( string $name )
Retrieve a route by name, see also Yaf_Router::getCurrentRoute()
</Desc>
    <FName>Yaf_Router::getRoutes</FName>
    <Desc>public mixed Yaf_Router::getRoutes ( void )
Retrieve registered routes
</Desc>
    <FName>Yaf_Router::route</FName>
    <Desc>public bool Yaf_Router::route ( Yaf_Request_Abstract $request )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::__clone</FName>
    <Desc>private void Yaf_Session::__clone ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::__construct</FName>
    <Desc>private Yaf_Session::__construct ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::count</FName>
    <Desc>public void Yaf_Session::count ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::current</FName>
    <Desc>public void Yaf_Session::current ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::del</FName>
    <Desc>public void Yaf_Session::del ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::__get</FName>
    <Desc>public void Yaf_Session::__get ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::getInstance</FName>
    <Desc>public static void Yaf_Session::getInstance ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::has</FName>
    <Desc>public void Yaf_Session::has ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::__isset</FName>
    <Desc>public void Yaf_Session::__isset ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::key</FName>
    <Desc>public void Yaf_Session::key ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::next</FName>
    <Desc>public void Yaf_Session::next ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::offsetExists</FName>
    <Desc>public void Yaf_Session::offsetExists ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::offsetGet</FName>
    <Desc>public void Yaf_Session::offsetGet ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::offsetSet</FName>
    <Desc>public void Yaf_Session::offsetSet ( string $name , string $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::offsetUnset</FName>
    <Desc>public void Yaf_Session::offsetUnset ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::rewind</FName>
    <Desc>public void Yaf_Session::rewind ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::__set</FName>
    <Desc>public void Yaf_Session::__set ( string $name , string $value )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::__sleep</FName>
    <Desc>private void Yaf_Session::__sleep ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::start</FName>
    <Desc>public void Yaf_Session::start ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::__unset</FName>
    <Desc>public void Yaf_Session::__unset ( string $name )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::valid</FName>
    <Desc>public void Yaf_Session::valid ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_Session::__wakeup</FName>
    <Desc>private void Yaf_Session::__wakeup ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_View_Interface::assign</FName>
    <Desc>abstract public bool Yaf_View_Interface::assign ( string $name [, string $value ] )
Assigan values to View engine, then the value can access directly by name in template. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_View_Interface::display</FName>
    <Desc>abstract public bool Yaf_View_Interface::display ( string $tpl [, array $tpl_vars ] )
Render a template and output the result immediatly. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_View_Interface::getScriptPath</FName>
    <Desc>abstract public void Yaf_View_Interface::getScriptPath ( void )
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_View_Interface::render</FName>
    <Desc>abstract public string Yaf_View_Interface::render ( string $tpl [, array $tpl_vars ] )
Render a template and return the result. 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_View_Interface::setScriptPath</FName>
    <Desc>abstract public void Yaf_View_Interface::setScriptPath ( string $template_dir )
Set the templates base directory, this is usually called by Yaf_Dispatcher 
Warning
This function is currently not documented; only its argument list is available.
</Desc>
    <FName>Yaf_View_Simple::assign</FName>
    <Desc>public bool Yaf_View_Simple::assign ( string $name [, mixed $value ] )
assign variable to view engine
</Desc>
    <FName>Yaf_View_Simple::assignRef</FName>
    <Desc>public bool Yaf_View_Simple::assignRef ( string $name , mixed &$value )
unlike Yaf_View_Simple::assign(), this method assign a ref value to engine.
</Desc>
    <FName>Yaf_View_Simple::clear</FName>
    <Desc>public bool Yaf_View_Simple::clear ([ string $name ] )
clear assigned variable
</Desc>
    <FName>Yaf_View_Simple::__construct</FName>
    <Desc>final public Yaf_View_Simple::__construct ( string $template_dir [, array $options ] )
</Desc>
    <FName>Yaf_View_Simple::display</FName>
    <Desc>public bool Yaf_View_Simple::display ( string $tpl [, array $tpl_vars ] )
Render a template and display the result instantly.
</Desc>
    <FName>Yaf_View_Simple::eval</FName>
    <Desc>public string Yaf_View_Simple::eval ( string $tpl_content [, array $tpl_vars ] )
Render a string tempalte and return the result.
</Desc>
    <FName>Yaf_View_Simple::__get</FName>
    <Desc>public void Yaf_View_Simple::__get ([ string $name ] )
Retrieve assigned varaiable 
Note: 
parameter can be empty since 2.1.11
</Desc>
    <FName>Yaf_View_Simple::getScriptPath</FName>
    <Desc>public string Yaf_View_Simple::getScriptPath ( void )
</Desc>
    <FName>Yaf_View_Simple::__isset</FName>
    <Desc>public void Yaf_View_Simple::__isset ( string $name )
</Desc>
    <FName>Yaf_View_Simple::render</FName>
    <Desc>public string Yaf_View_Simple::render ( string $tpl [, array $tpl_vars ] )
Render a template and return the result.
</Desc>
    <FName>Yaf_View_Simple::__set</FName>
    <Desc>public void Yaf_View_Simple::__set ( string $name , mixed $value )
This is a alternative and easier way to Yaf_View_Simple::assign().
</Desc>
    <FName>Yaf_View_Simple::setScriptPath</FName>
    <Desc>public bool Yaf_View_Simple::setScriptPath ( string $template_dir )
</Desc>
    <FName>Yar_Client_Exception::getType</FName>
    <Desc>public string Yar_Client_Exception::getType ( void )
</Desc>
    <FName>Yar_Client::__call</FName>
    <Desc>public void Yar_Client::__call ( string $method , array $parameters )
Issue a call to remote RPC method.
</Desc>
    <FName>Yar_Client::__construct</FName>
    <Desc>final public Yar_Client::__construct ( string $url [, array $options ] )
Create a Yar_Client to a Yar_Server.
</Desc>
    <FName>Yar_Client::setOpt</FName>
    <Desc>public Yar_Client Yar_Client::setOpt ( int $name , mixed $value )
</Desc>
    <FName>Yar_Concurrent_Client::call</FName>
    <Desc>public static int Yar_Concurrent_Client::call ( string $uri , string $method [, array $parameters [, callable $callback [, callable $error_callback [, array $options ]]]] )
Register a RPC call, but won't sent it immediately, it will be send while further call to Yar_Concurrent_Client::loop()
</Desc>
    <FName>Yar_Concurrent_Client::loop</FName>
    <Desc>public static bool Yar_Concurrent_Client::loop ([ callable $callback [, callable $error_callback ]] )
Send all registed remote RPC calls.
</Desc>
    <FName>Yar_Concurrent_Client::reset</FName>
    <Desc>public static bool Yar_Concurrent_Client::reset ( void )
Clean all registered calls
</Desc>
    <FName>Yar_Server_Exception::getType</FName>
    <Desc>public string Yar_Server_Exception::getType ( void )
Get the exception original type threw by server
</Desc>
    <FName>Yar_Server::__construct</FName>
    <Desc>final public Yar_Server::__construct ( Object $obj )
Set up a Yar HTTP RPC Server, All the public methods of $obj will be register as a RPC service.
</Desc>
    <FName>Yar_Server::handle</FName>
    <Desc>public bool Yar_Server::handle ( void )
Start a RPC HTTP server, and ready for accpet RPC requests. 
Note: 
Usual RPC calls will be issued as HTTP POST requests. If a HTTP GET request is issued to the uri, the service information (commented section above) will be printed on the page
</Desc>
    <FName>ZipArchive::addEmptyDir</FName>
    <Desc>bool ZipArchive::addEmptyDir ( string $dirname )
Adds an empty directory in the archive.
</Desc>
    <FName>ZipArchive::addFile</FName>
    <Desc>bool ZipArchive::addFile ( string $filename [, string $localname = NULL [, int $start = 0 [, int $length = 0 ]]] )
Adds a file to a ZIP archive from a given path. 
Note: For maximum portability, it is recommended to always use forward slashes (/) as directory separator in ZIP filenames.
</Desc>
    <FName>ZipArchive::addFromString</FName>
    <Desc>bool ZipArchive::addFromString ( string $localname , string $contents )
Add a file to a ZIP archive using its contents. 
Note: For maximum portability, it is recommended to always use forward slashes (/) as directory separator in ZIP filenames.
</Desc>
    <FName>ZipArchive::addGlob</FName>
    <Desc>bool ZipArchive::addGlob ( string $pattern [, int $flags = 0 [, array $options = array() ]] )
Add files from a directory which match the glob pattern. 
Note: For maximum portability, it is recommended to always use forward slashes (/) as directory separator in ZIP filenames.
</Desc>
    <FName>ZipArchive::addPattern</FName>
    <Desc>bool ZipArchive::addPattern ( string $pattern [, string $path = "." [, array $options = array() ]] )
Add files from a directory which match the regular expression pattern. The operation is not recursive. The pattern will be matched against the file name only.
</Desc>
    <FName>ZipArchive::close</FName>
    <Desc>bool ZipArchive::close ( void )
Close opened or created archive and save changes. This method is automatically called at the end of the script.
</Desc>
    <FName>ZipArchive::count</FName>
    <Desc>public int ZipArchive::count ( void )
</Desc>
    <FName>ZipArchive::deleteIndex</FName>
    <Desc>bool ZipArchive::deleteIndex ( int $index )
Delete an entry in the archive using its index.
</Desc>
    <FName>ZipArchive::deleteName</FName>
    <Desc>bool ZipArchive::deleteName ( string $name )
Delete an entry in the archive using its name.
</Desc>
    <FName>ZipArchive::extractTo</FName>
    <Desc>bool ZipArchive::extractTo ( string $destination [, mixed $entries ] )
Extract the complete archive or the given files to the specified destination.
</Desc>
    <FName>ZipArchive::getArchiveComment</FName>
    <Desc>string ZipArchive::getArchiveComment ([ int $flags ] )
Returns the Zip archive comment.
</Desc>
    <FName>ZipArchive::getCommentIndex</FName>
    <Desc>string ZipArchive::getCommentIndex ( int $index [, int $flags ] )
Returns the comment of an entry using the entry index.
</Desc>
    <FName>ZipArchive::getCommentName</FName>
    <Desc>string ZipArchive::getCommentName ( string $name [, int $flags ] )
Returns the comment of an entry using the entry name.
</Desc>
    <FName>ZipArchive::getExternalAttributesIndex</FName>
    <Desc>bool ZipArchive::GetExternalAttributesIndex ( int $index , int &$opsys , int &$attr [, int $flags ] )
Retrieve the external attributes of an entry defined by its index.
</Desc>
    <FName>ZipArchive::getExternalAttributesName</FName>
    <Desc>bool ZipArchive::getExternalAttributesName ( string $name , int &$opsys , int &$attr [, int $flags ] )
Retrieve the external attributes of an entry defined by its name.
</Desc>
    <FName>ZipArchive::getFromIndex</FName>
    <Desc>string ZipArchive::getFromIndex ( int $index [, int $length = 0 [, int $flags ]] )
Returns the entry contents using its index.
</Desc>
    <FName>ZipArchive::getFromName</FName>
    <Desc>string ZipArchive::getFromName ( string $name [, int $length = 0 [, int $flags ]] )
Returns the entry contents using its name.
</Desc>
    <FName>ZipArchive::getNameIndex</FName>
    <Desc>string ZipArchive::getNameIndex ( int $index [, int $flags ] )
Returns the name of an entry using its index.
</Desc>
    <FName>ZipArchive::getStatusString</FName>
    <Desc>string ZipArchive::getStatusString ( void )
Returns the status error message, system and/or zip messages.
</Desc>
    <FName>ZipArchive::getStream</FName>
    <Desc>resource ZipArchive::getStream ( string $name )
Get a file handler to the entry defined by its name. For now it only supports read operations.
</Desc>
    <FName>ZipArchive::locateName</FName>
    <Desc>int ZipArchive::locateName ( string $name [, int $flags ] )
Locates an entry using its name.
</Desc>
    <FName>ZipArchive::open</FName>
    <Desc>mixed ZipArchive::open ( string $filename [, int $flags ] )
Opens a new zip archive for reading, writing or modifying.
</Desc>
    <FName>ZipArchive::renameIndex</FName>
    <Desc>bool ZipArchive::renameIndex ( int $index , string $newname )
Renames an entry defined by its index.
</Desc>
    <FName>ZipArchive::renameName</FName>
    <Desc>bool ZipArchive::renameName ( string $name , string $newname )
Renames an entry defined by its name.
</Desc>
    <FName>ZipArchive::setArchiveComment</FName>
    <Desc>bool ZipArchive::setArchiveComment ( string $comment )
Set the comment of a ZIP archive.
</Desc>
    <FName>ZipArchive::setCommentIndex</FName>
    <Desc>bool ZipArchive::setCommentIndex ( int $index , string $comment )
Set the comment of an entry defined by its index.
</Desc>
    <FName>ZipArchive::setCommentName</FName>
    <Desc>bool ZipArchive::setCommentName ( string $name , string $comment )
Set the comment of an entry defined by its name.
</Desc>
    <FName>ZipArchive::setCompressionIndex</FName>
    <Desc>bool ZipArchive::setCompressionIndex ( int $index , int $comp_method [, int $comp_flags = 0 ] )
Set the compression method of an entry defined by its index.
</Desc>
    <FName>ZipArchive::setCompressionName</FName>
    <Desc>bool ZipArchive::setCompressionName ( string $name , int $comp_method [, int $comp_flags = 0 ] )
Set the compression method of an entry defined by its name.
</Desc>
    <FName>ZipArchive::setEncryptionIndex</FName>
    <Desc>bool ZipArchive::setEncryptionIndex ( int $index , string $method [, string $password ] )
Set the encryption method of an entry defined by its index.
</Desc>
    <FName>ZipArchive::setEncryptionName</FName>
    <Desc>bool ZipArchive::setEncryptionName ( string $name , int $method [, string $password ] )
Set the encryption method of an entry defined by its name.
</Desc>
    <FName>ZipArchive::setExternalAttributesIndex</FName>
    <Desc>bool ZipArchive::setExternalAttributesIndex ( int $index , int $opsys , int $attr [, int $flags ] )
Set the external attributes of an entry defined by its index.
</Desc>
    <FName>ZipArchive::setExternalAttributesName</FName>
    <Desc>bool ZipArchive::setExternalAttributesName ( string $name , int $opsys , int $attr [, int $flags ] )
Set the external attributes of an entry defined by its name.
</Desc>
    <FName>ZipArchive::setPassword</FName>
    <Desc>public bool ZipArchive::setPassword ( string $password )
Sets the password for the active archive.
</Desc>
    <FName>ZipArchive::statIndex</FName>
    <Desc>array ZipArchive::statIndex ( int $index [, int $flags ] )
The function obtains information about the entry defined by its index.
</Desc>
    <FName>ZipArchive::statName</FName>
    <Desc>array ZipArchive::statName ( string $name [, int $flags ] )
The function obtains information about the entry defined by its name.
</Desc>
    <FName>ZipArchive::unchangeAll</FName>
    <Desc>bool ZipArchive::unchangeAll ( void )
Undo all changes done in the archive.
</Desc>
    <FName>ZipArchive::unchangeArchive</FName>
    <Desc>bool ZipArchive::unchangeArchive ( void )
Revert all global changes to the archive. For now, this only reverts archive comment changes.
</Desc>
    <FName>ZipArchive::unchangeIndex</FName>
    <Desc>bool ZipArchive::unchangeIndex ( int $index )
Revert all changes done to an entry at the given index.
</Desc>
    <FName>ZipArchive::unchangeName</FName>
    <Desc>bool ZipArchive::unchangeName ( string $name )
Revert all changes done to an entry.
</Desc>
    <FName>ZMQ::__construct</FName>
    <Desc>privateZMQ::__construct ( void )
Private constructor to prevent direct initialization. This class holds the constants for ZMQ extension.
</Desc>
    <FName>ZMQContext::__construct</FName>
    <Desc>ZMQContext::__construct ([ int $io_threads = 1 [, bool $is_persistent = TRUE ]] )
Constructs a new ZMQ context. The context is used to initialize sockets. A persistent context is required to initialize persistent sockets.
</Desc>
    <FName>ZMQContext::getOpt</FName>
    <Desc>public mixed ZMQContext::getOpt ( string $key )
Returns the value of a context option.
</Desc>
    <FName>ZMQContext::getSocket</FName>
    <Desc>public ZMQSocket ZMQContext::getSocket ( int $type [, string $persistent_id = NULL [, callback $on_new_socket = NULL ]] )
Shortcut for creating new sockets from the context. If the context is not persistent the persistent_id parameter is ignored and the socket falls back to being non-persistent. The on_new_socket is called only when a new underlying socket structure is created.
</Desc>
    <FName>ZMQContext::isPersistent</FName>
    <Desc>public bool ZMQContext::isPersistent ( void )
Whether the context is persistent. Persistent context is needed for persistent connections as each socket is allocated from a context.
</Desc>
    <FName>ZMQContext::setOpt</FName>
    <Desc>public ZMQContext ZMQContext::setOpt ( int $key , mixed $value )
Sets a ZMQ context option. The type of the value depends on the key. See ZMQ Constant Types for more information.
</Desc>
    <FName>ZMQDevice::__construct</FName>
    <Desc>ZMQDevice::__construct ( ZMQSocket $frontend , ZMQSocket $backend [, ZMQSocket $listener ] )
"OMQ devices can do intermediation of addresses, services, queues, or any other abstraction you care to define above the message and socket layers." -- zguide
</Desc>
    <FName>ZMQDevice::getIdleTimeout</FName>
    <Desc>public ZMQDevice ZMQDevice::getIdleTimeout ( void )
Gets the idle callback timeout value. Added in ZMQ extension version 1.1.0.
</Desc>
    <FName>ZMQDevice::getTimerTimeout</FName>
    <Desc>public ZMQDevice ZMQDevice::getTimerTimeout ( void )
Gets the timer callback timeout value. Added in ZMQ extension version 1.1.0.
</Desc>
    <FName>ZMQDevice::run</FName>
    <Desc>public void ZMQDevice::run ( void )
Runs the device.
</Desc>
    <FName>ZMQDevice::setIdleCallback</FName>
    <Desc>public ZMQDevice ZMQDevice::setIdleCallback ( callable $cb_func , int $timeout [, mixed $user_data ] )
Sets the idle callback function. If idle timeout is defined the idle callback function shall be called if the internal poll loop times out without events. If the callback function returns false or a value that evaluates to false the device is stopped. The callback function signature is callback (mixed $user_data).
</Desc>
    <FName>ZMQDevice::setIdleTimeout</FName>
    <Desc>public ZMQDevice ZMQDevice::setIdleTimeout ( int $timeout )
Sets the idle callback timeout value. The idle callback is invoked periodically when the device is idle.
</Desc>
    <FName>ZMQDevice::setTimerCallback</FName>
    <Desc>public ZMQDevice ZMQDevice::setTimerCallback ( callable $cb_func , int $timeout [, mixed $user_data ] )
Sets the timer callback function. The timer callback will be invoked after timeout has passed. The difference between idle and timer callbacks are that idle callback is invoked only when the device is idle. The callback function signature is callback (mixed $user_data). Added in ZMQ extension version 1.1.0.
</Desc>
    <FName>ZMQDevice::setTimerTimeout</FName>
    <Desc>public ZMQDevice ZMQDevice::setTimerTimeout ( int $timeout )
Sets the timer callback timeout value. The timer callback is invoked periodically if it's set. Added in ZMQ extension version 1.1.0.
</Desc>
    <FName>ZMQPoll::add</FName>
    <Desc>public string ZMQPoll::add ( mixed $entry , int $type )
Adds a new item to the poll set and returns the internal id of the added item. The item can be removed from the poll set using the returned string id.
</Desc>
    <FName>ZMQPoll::clear</FName>
    <Desc>public ZMQPoll ZMQPoll::clear ( void )
Clears all elements from the poll set.
</Desc>
    <FName>ZMQPoll::count</FName>
    <Desc>public int ZMQPoll::count ( void )
Count the items in the poll set.
</Desc>
    <FName>ZMQPoll::getLastErrors</FName>
    <Desc>public array ZMQPoll::getLastErrors ( void )
Returns the ids of the objects that had errors in the last poll.
</Desc>
    <FName>ZMQPoll::poll</FName>
    <Desc>public int ZMQPoll::poll ( array &$readable , array &$writable [, int $timeout = -1 ] )
Polls the items in the current poll set. The readable and writable items are returned in the readable and writable parameters. ZMQPoll::getLastErrors() can be used to check if there were errors.
</Desc>
    <FName>ZMQPoll::remove</FName>
    <Desc>public bool ZMQPoll::remove ( mixed $item )
Remove item from the poll set. The item parameter can be ZMQSocket object, a stream resource or the id returned from ZMQPoll::add() method.
</Desc>
    <FName>ZMQSocket::bind</FName>
    <Desc>public ZMQSocket ZMQSocket::bind ( string $dsn [, bool $force = FALSE ] )
Bind the socket to an endpoint. The endpoint is defined in format transport://address where transport is one of the following: inproc, ipc, tcp, pgm or epgm.
</Desc>
    <FName>ZMQSocket::connect</FName>
    <Desc>public ZMQSocket ZMQSocket::connect ( string $dsn [, bool $force = FALSE ] )
Connect the socket to a remote endpoint. The endpoint is defined in format transport://address where transport is one of the following: inproc, ipc, tcp, pgm or epgm.
</Desc>
    <FName>ZMQSocket::__construct</FName>
    <Desc>ZMQSocket::__construct ( ZMQContext $context , int $type [, string $persistent_id = NULL [, callback $on_new_socket = NULL ]] )
Constructs a ZMQSocket object. persistent_id parameter can be used to allocated a persistent socket. A persistent socket has to be allocated from a persistent context and it stays connected over multiple requests. The persistent_id parameter can be used to recall the same socket over multiple requests. The on_new_socket is called only when a new underlying socket structure is created.
</Desc>
    <FName>ZMQSocket::disconnect</FName>
    <Desc>public ZMQSocket ZMQSocket::disconnect ( string $dsn )
Disconnect the socket from a previously connected remote endpoint. The endpoint is defined in format transport://address where transport is one of the following: inproc, ipc, tcp, pgm or epgm.
</Desc>
    <FName>ZMQSocket::getEndpoints</FName>
    <Desc>public array ZMQSocket::getEndpoints ( void )
Returns a list of endpoints where the socket is connected or bound to.
</Desc>
    <FName>ZMQSocket::getPersistentId</FName>
    <Desc>public string ZMQSocket::getPersistentId ( void )
Returns the persistent id of the socket.
</Desc>
    <FName>ZMQSocket::getSocketType</FName>
    <Desc>public int ZMQSocket::getSocketType ( void )
Gets the socket type.
</Desc>
    <FName>ZMQSocket::getSockOpt</FName>
    <Desc>public mixed ZMQSocket::getSockOpt ( string $key )
Returns the value of a socket option.
</Desc>
    <FName>ZMQSocket::isPersistent</FName>
    <Desc>public bool ZMQSocket::isPersistent ( void )
Check whether the socket is persistent.
</Desc>
    <FName>ZMQSocket::recv</FName>
    <Desc>public string ZMQSocket::recv ([ int $mode = 0 ] )
Receive a message from a socket. By default receiving will block until a message is available unless ZMQ::MODE_NOBLOCK flag is used. ZMQ::SOCKOPT_RCVMORE socket option can be used for receiving multi-part messages. See ZMQSocket::setSockOpt() for more information.
</Desc>
    <FName>ZMQSocket::recvMulti</FName>
    <Desc>public string ZMQSocket::recvMulti ([ int $mode = 0 ] )
Receive an array multipart message from a socket. By default receiving will block until a message is available unless ZMQ::MODE_NOBLOCK flag is used.
</Desc>
    <FName>ZMQSocket::send</FName>
    <Desc>public ZMQSocket ZMQSocket::send ( string $message [, int $mode = 0 ] )
Send a message using the socket. The operation can block unless ZMQ::MODE_NOBLOCK is used.
</Desc>
    <FName>ZMQSocket::sendmulti</FName>
    <Desc>public ZMQSocket ZMQSocket::send ( array $message [, int $mode = 0 ] )
Send a multipart message using the socket. The operation can block unless ZMQ::MODE_NOBLOCK is used.
</Desc>
    <FName>ZMQSocket::setSockOpt</FName>
    <Desc>public ZMQSocket ZMQSocket::setSockOpt ( int $key , mixed $value )
Sets a ZMQ socket option. The type of the value depends on the key. See ZMQ Constant Types for more information.
</Desc>
    <FName>ZMQSocket::unbind</FName>
    <Desc>public ZMQSocket ZMQSocket::unbind ( string $dsn )
Unbind the socket from an endpoint. The endpoint is defined in format transport://address where transport is one of the following: inproc, ipc, tcp, pgm or epgm.
</Desc>
    <FName>Zookeeper::addAuth</FName>
    <Desc>public bool Zookeeper::addAuth ( string $scheme , string $cert [, callable $completion_cb = NULL ] )
The application calls this function to specify its credentials for purposes of authentication. The server will use the security provider specified by the scheme parameter to authenticate the client connection. If the authentication request has failed: - the server connection is dropped. - the watcher is called with the ZOO_AUTH_FAILED_STATE value as the state parameter.
</Desc>
    <FName>Zookeeper::close</FName>
    <Desc>public void Zookeeper::close ( void )
Errors/Exceptions
This method emits ZookeeperException and it's derivatives when closing an uninitialized instance. 
See Also
Zookeeper::__construct() - Create a handle to used communicate with zookeeper 
Zookeeper::connect() - Create a handle to used communicate with zookeeper 
ZookeeperException 
</Desc>
    <FName>Zookeeper::connect</FName>
    <Desc>public void Zookeeper::connect ( string $host [, callable $watcher_cb = NULL [, int $recv_timeout = 10000 ]] )
This method creates a new handle and a zookeeper session that corresponds to that handle. Session establishment is asynchronous, meaning that the session should not be considered established until (and unless) an event of state ZOO_CONNECTED_STATE is received.
</Desc>
    <FName>Zookeeper::__construct</FName>
    <Desc>public Zookeeper::__construct ([ string $host = '' [, callable $watcher_cb = NULL [, int $recv_timeout = 10000 ]]] )
This method creates a new handle and a zookeeper session that corresponds to that handle. Session establishment is asynchronous, meaning that the session should not be considered established until (and unless) an event of state ZOO_CONNECTED_STATE is received.
</Desc>
    <FName>Zookeeper::create</FName>
    <Desc>public string Zookeeper::create ( string $path , string $value , array $acls [, int $flags = NULL ] )
This method will create a node in ZooKeeper. A node can only be created if it does not already exists. The Create Flags affect the creation of nodes. If ZOO_EPHEMERAL flag is set, the node will automatically get removed if the client session goes away. If the ZOO_SEQUENCE flag is set, a unique monotonically increasing sequence number is appended to the path name.
</Desc>
    <FName>Zookeeper::delete</FName>
    <Desc>public bool Zookeeper::delete ( string $path [, int $version = -1 ] )
</Desc>
    <FName>Zookeeper::exists</FName>
    <Desc>public bool Zookeeper::exists ( string $path [, callable $watcher_cb = NULL ] )
</Desc>
    <FName>Zookeeper::get</FName>
    <Desc>public string Zookeeper::get ( string $path [, callable $watcher_cb = NULL [, array &$stat = NULL [, int $max_size = 0 ]]] )
</Desc>
    <FName>Zookeeper::getAcl</FName>
    <Desc>public array Zookeeper::getAcl ( string $path )
</Desc>
    <FName>Zookeeper::getChildren</FName>
    <Desc>public array Zookeeper::getChildren ( string $path [, callable $watcher_cb = NULL ] )
</Desc>
    <FName>Zookeeper::getClientId</FName>
    <Desc>public int Zookeeper::getClientId ( void )
</Desc>
    <FName>Zookeeper::getConfig</FName>
    <Desc>public ZookeeperConfig Zookeeper::getConfig ( void )
</Desc>
    <FName>Zookeeper::getRecvTimeout</FName>
    <Desc>public int Zookeeper::getRecvTimeout ( void )
</Desc>
    <FName>Zookeeper::getState</FName>
    <Desc>public int Zookeeper::getState ( void )
</Desc>
    <FName>Zookeeper::isRecoverable</FName>
    <Desc>public bool Zookeeper::isRecoverable ( void )
The application must close the handle and try to reconnect.
</Desc>
    <FName>Zookeeper::set</FName>
    <Desc>public bool Zookeeper::set ( string $path , string $value [, int $version = -1 [, array &$stat = NULL ]] )
</Desc>
    <FName>Zookeeper::setAcl</FName>
    <Desc>public bool Zookeeper::setAcl ( string $path , int $version , array $acl )
</Desc>
    <FName>Zookeeper::setDebugLevel</FName>
    <Desc>public static bool Zookeeper::setDebugLevel ( int $logLevel )
</Desc>
    <FName>Zookeeper::setDeterministicConnOrder</FName>
    <Desc>public static bool Zookeeper::setDeterministicConnOrder ( bool $yesOrNo )
If passed a non-zero value, will make the client connect to quorum peers in the order as specified in the zookeeper_init() call. A zero value causes zookeeper_init() to permute the peer endpoints which is good for more even client connection distribution among the quorum peers.
</Desc>
    <FName>Zookeeper::setLogStream</FName>
    <Desc>public bool Zookeeper::setLogStream ( resource $stream )
The zookeeper library uses stderr as its default log stream. Application must make sure the stream is writable. Passing in NULL resets the stream to its default value (stderr).
</Desc>
    <FName>Zookeeper::setWatcher</FName>
    <Desc>public bool Zookeeper::setWatcher ( callable $watcher_cb )
</Desc>
  </Help>
</PHPNotepad>
