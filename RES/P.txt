APCIterator::__construct(string $cache [, mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE]]]]):public
APCIterator::current(void):public mixed
APCIterator::getTotalCount(void):public int
APCIterator::getTotalHits(void):public int
APCIterator::getTotalSize(void):public int
APCIterator::key(void):public string
APCIterator::next(void):public void
APCIterator::rewind(void):public void
APCIterator::valid(void):public void
APCUIterator::__construct([mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE]]]]):public
APCUIterator::current(void):public mixed
APCUIterator::getTotalCount(void):public int
APCUIterator::getTotalHits(void):public int
APCUIterator::getTotalSize(void):public int
APCUIterator::key(void):public string
APCUIterator::next(void):public void
APCUIterator::rewind(void):public void
APCUIterator::valid(void):public void
AppendIterator::append(Iterator $iterator):public void
AppendIterator::__construct(void):public
AppendIterator::current(void):public mixed
AppendIterator::getArrayIterator(void):public ArrayIterator
AppendIterator::getInnerIterator(void):public Iterator
AppendIterator::getIteratorIndex(void):public int
AppendIterator::key(void):public scalar
AppendIterator::next(void):public void
AppendIterator::rewind(void):public void
AppendIterator::valid(void):public bool
ArrayAccess::offsetExists(mixed $offset):abstract public bool
ArrayAccess::offsetGet(mixed $offset):abstract public mixed
ArrayAccess::offsetSet(mixed $offset, mixed $value):abstract public void
ArrayAccess::offsetUnset(mixed $offset):abstract public void
ArrayIterator::append(mixed $value):public void
ArrayIterator::asort(void):public void
ArrayIterator::__construct([mixed $array = array() [, int $flags = 0]]):public
ArrayIterator::count(void):public int
ArrayIterator::current(void):public mixed
ArrayIterator::getArrayCopy(void):public array
ArrayIterator::getFlags(void):public void
ArrayIterator::key(void):public mixed
ArrayIterator::ksort(void):public void
ArrayIterator::natcasesort(void):public void
ArrayIterator::natsort(void):public void
ArrayIterator::next(void):public void
ArrayIterator::offsetExists(mixed $index):public bool
ArrayIterator::offsetGet(mixed $index):public mixed
ArrayIterator::offsetSet(mixed $index, mixed $newval):public void
ArrayIterator::offsetUnset(mixed $index):public void
ArrayIterator::rewind(void):public void
ArrayIterator::seek(int $position):public void
ArrayIterator::serialize(void):public string
ArrayIterator::setFlags(string $flags):public void
ArrayIterator::uasort(callable $cmp_function):public void
ArrayIterator::uksort(callable $cmp_function):public void
ArrayIterator::unserialize(string $serialized):public string
ArrayIterator::valid(void):public bool
ArrayObject::append(mixed $value):public void
ArrayObject::asort(void):public void
ArrayObject::__construct([mixed $input = array() [, int $flags = 0 [, string $iterator_class = "ArrayIterator"]]]):public
ArrayObject::count(void):public int
ArrayObject::exchangeArray(mixed $input):public array
ArrayObject::getArrayCopy(void):public array
ArrayObject::getFlags(void):public int
ArrayObject::getIterator(void):public ArrayIterator
ArrayObject::getIteratorClass(void):public string
ArrayObject::ksort(void):public void
ArrayObject::natcasesort(void):public void
ArrayObject::natsort(void):public void
ArrayObject::offsetExists(mixed $index):public bool
ArrayObject::offsetGet(mixed $index):public mixed
ArrayObject::offsetSet(mixed $index, mixed $newval):public void
ArrayObject::offsetUnset(mixed $index):public void
ArrayObject::serialize(void):public string
ArrayObject::setFlags(int $flags):public void
ArrayObject::setIteratorClass(string $iterator_class):public void
ArrayObject::uasort(callable $cmp_function):public void
ArrayObject::uksort(callable $cmp_function):public void
ArrayObject::unserialize(string $serialized):public void
KTaglib_MPEG_AudioProperties::getBitrate(void):public int
KTaglib_MPEG_AudioProperties::getChannels(void):public int
KTaglib_MPEG_AudioProperties::getLayer(void):public int
KTaglib_MPEG_AudioProperties::getLength(void):public int
KTaglib_MPEG_AudioProperties::getSampleBitrate(void):public int
KTaglib_MPEG_AudioProperties::getVersion(void):public int
KTaglib_MPEG_AudioProperties::isCopyrighted(void):public bool
KTaglib_MPEG_AudioProperties::isOriginal(void):public bool
KTaglib_MPEG_AudioProperties::isProtectionEnabled(void):public bool
CachingIterator::__construct(Iterator $iterator [, int $flags = self::CALL_TOSTRING]):public
CachingIterator::count(void):public int
CachingIterator::current(void):public void
CachingIterator::getCache(void):public array
CachingIterator::getFlags(void):public int
CachingIterator::getInnerIterator(void):public Iterator
CachingIterator::hasNext(void):public void
CachingIterator::key(void):public scalar
CachingIterator::next(void):public void
CachingIterator::offsetExists(mixed $index):public void
CachingIterator::offsetGet(string $index):public void
CachingIterator::offsetSet(mixed $index, mixed $newval):public void
CachingIterator::offsetUnset(string $index):public void
CachingIterator::rewind(void):public void
CachingIterator::setFlags(int $flags):public void
CachingIterator::__toString(void):public void
CachingIterator::valid(void):public void
Cairo::availableFonts(void):public static array
cairo_available_fonts(void):array
Cairo::availableSurfaces(void):public static array
cairo_available_surfaces(void):array
Cairo::statusToString(int $status):public static string
cairo_status_to_string(int $status):string
Cairo::version(void):public static int
cairo_version(void):int
Cairo::versionString(void):public static string
cairo_version_string(void):string
CairoContext::appendPath(CairoPath $path):public void
cairo_append_path(CairoContext $context, CairoPath $path):void
CairoContext::arc(float $x, float $y, float $radius, float $angle1, float $angle2):public void
cairo_arc(CairoContext $context, float $x, float $y, float $radius, float $angle1, float $angle2):void
CairoContext::arcNegative(float $x, float $y, float $radius, float $angle1, float $angle2):public void
cairo_arc_negative(CairoContext $context, float $x, float $y, float $radius, float $angle1, float $angle2):void
CairoContext::clip(void):public void
cairo_clip(CairoContext $context):void
CairoContext::clipExtents(void):public array
cairo_clip_extents(CairoContext $context):array
CairoContext::clipPreserve(void):public void
cairo_clip_preserve(CairoContext $context):void
CairoContext::clipRectangleList(void):public array
cairo_clip_rectangle_list(CairoContext $context):array
CairoContext::closePath(void):public void
cairo_close_path(CairoContext $context):void
CairoContext::__construct(CairoSurface $surface):public
CairoContext::copyPage(void):public void
cairo_copy_page(CairoContext $context):void
CairoContext::copyPath(void):public CairoPath
cairo_copy_path(CairoContext $context):CairoPath
CairoContext::copyPathFlat(void):public CairoPath
cairo_copy_path_flat(CairoContext $context):CairoPath
CairoContext::curveTo(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):public void
cairo_curve_to(CairoContext $context, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):void
CairoContext::deviceToUser(float $x, float $y):public array
cairo_device_to_user(CairoContext $context, float $x, float $y):array
CairoContext::deviceToUserDistance(float $x, float $y):public array
cairo_device_to_user_distance(CairoContext $context, float $x, float $y):array
CairoContext::fill(void):public void
cairo_fill(CairoContext $context):void
CairoContext::fillExtents(void):public array
cairo_fill_extents(CairoContext $context):array
CairoContext::fillPreserve(void):public void
cairo_fill_preserve(CairoContext $context):void
CairoContext::fontExtents(void):public array
cairo_font_extents(CairoContext $context):array
CairoContext::getAntialias(void):public int
cairo_get_antialias(CairoContext $context):int
CairoContext::getCurrentPoint(void):public array
cairo_get_current_point(CairoContext $context):array
CairoContext::getDash(void):public array
cairo_get_dash(CairoContext $context):array
CairoContext::getDashCount(void):public int
cairo_get_dash_count(CairoContext $context):int
CairoContext::getFillRule(void):public int
cairo_get_fill_rule(CairoContext $context):int
CairoContext::getFontFace(void):public void
cairo_get_font_face(CairoContext $context):void
CairoContext::getFontMatrix(void):public void
cairo_get_font_matrix(CairoContext $context):void
CairoContext::getFontOptions(void):public void
cairo_get_font_options(CairoContext $context):void
CairoContext::getGroupTarget(void):public void
cairo_get_group_target(CairoContext $context):void
CairoContext::getLineCap(void):public int
cairo_get_line_cap(CairoContext $context):int
CairoContext::getLineJoin(void):public int
cairo_get_line_join(CairoContext $context):int
CairoContext::getLineWidth(void):public float
cairo_get_line_width(CairoContext $context):float
CairoContext::getMatrix(void):public void
cairo_get_matrix(CairoContext $context):void
CairoContext::getMiterLimit(void):public float
cairo_get_miter_limit(CairoContext $context):float
CairoContext::getOperator(void):public int
cairo_get_operator(CairoContext $context):int
CairoContext::getScaledFont(void):public void
cairo_get_scaled_font(CairoContext $context):void
CairoContext::getSource(void):public void
cairo_get_source(CairoContext $context):void
CairoContext::getTarget(void):public void
cairo_get_target(CairoContext $context):void
CairoContext::getTolerance(void):public float
cairo_get_tolerance(CairoContext $context):float
CairoContext::glyphPath(array $glyphs):public void
cairo_glyph_path(CairoContext $context, array $glyphs):void
CairoContext::hasCurrentPoint(void):public bool
cairo_has_current_point(CairoContext $context):bool
CairoContext::identityMatrix(void):public void
cairo_identity_matrix(CairoContext $context):void
CairoContext::inFill(float $x, float $y):public bool
cairo_in_fill(CairoContext $context, float $x, float $y):bool
CairoContext::inStroke(float $x, float $y):public bool
cairo_in_stroke(CairoContext $context, float $x, float $y):bool
CairoContext::lineTo(float $x, float $y):public void
cairo_line_to(CairoContext $context, float $x, float $y):void
CairoContext::mask(CairoPattern $pattern):public void
cairo_mask(CairoContext $context, CairoPattern $pattern):void
CairoContext::maskSurface(CairoSurface $surface [, float $x [, float $y]]):public void
cairo_mask_surface(CairoContext $context, CairoSurface $surface [, float $x [, float $y]]):void
CairoContext::moveTo(float $x, float $y):public void
cairo_move_to(CairoContext $context, float $x, float $y):void
CairoContext::newPath(void):public void
cairo_new_path(CairoContext $context):void
CairoContext::newSubPath(void):public void
cairo_new_sub_path(CairoContext $context):void
CairoContext::paint(void):public void
cairo_paint(CairoContext $context):void
CairoContext::paintWithAlpha(float $alpha):public void
cairo_paint_with_alpha(CairoContext $context, float $alpha):void
CairoContext::pathExtents(void):public array
cairo_path_extents(CairoContext $context):array
CairoContext::popGroup(void):public void
cairo_pop_group(CairoContext $context):void
CairoContext::popGroupToSource(void):public void
cairo_pop_group_to_source(CairoContext $context):void
CairoContext::pushGroup(void):public void
cairo_push_group(CairoContext $context):void
CairoContext::pushGroupWithContent(int $content):public void
cairo_push_group_with_content(CairoContext $context, int $content):void
CairoContext::rectangle(float $x, float $y, float $width, float $height):public void
cairo_rectangle(CairoContext $context, float $x, float $y, float $width, float $height):void
CairoContext::relCurveTo(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):public void
cairo_rel_curve_to(CairoContext $context, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):void
CairoContext::relLineTo(float $x, float $y):public void
cairo_rel_line_to(CairoContext $context, float $x, float $y):void
CairoContext::relMoveTo(float $x, float $y):public void
cairo_rel_move_to(CairoContext $context, float $x, float $y):void
CairoContext::resetClip(void):public void
cairo_reset_clip(CairoContext $context):void
CairoContext::restore(void):public void
cairo_restore(CairoContext $context):void
CairoContext::rotate(float $angle):public void
cairo_rotate(CairoContext $context, float $angle):void
CairoContext::save(void):public void
cairo_save(CairoContext $context):void
CairoContext::scale(float $x, float $y):public void
cairo_scale(CairoContext $context, float $x, float $y):void
CairoContext::selectFontFace(string $family [, int $slant [, int $weight]]):public void
cairo_select_font_face(CairoContext $context, string $family [, int $slant [, int $weight]]):void
CairoContext::setAntialias([int $antialias]):public void
cairo_set_antialias(CairoContext $context [, int $antialias]):void
CairoContext::setDash(array $dashes [, float $offset]):public void
cairo_set_dash(CairoContext $context, array $dashes [, float $offset]):void
CairoContext::setFillRule(int $setting):public void
cairo_set_fill_rule(CairoContext $context, int $setting):void
CairoContext::setFontFace(CairoFontFace $fontface):public void
cairo_set_font_face(CairoContext $context, CairoFontFace $fontface):void
CairoContext::setFontMatrix(CairoMatrix $matrix):public void
cairo_set_font_matrix(CairoContext $context, CairoMatrix $matrix):void
CairoContext::setFontOptions(CairoFontOptions $fontoptions):public void
cairo_set_font_options(CairoContext $context, CairoFontOptions $fontoptions):void
CairoContext::setFontSize(float $size):public void
cairo_set_font_size(CairoContext $context, float $size):void
CairoContext::setLineCap(int $setting):public void
cairo_set_line_cap(CairoContext $context, int $setting):void
CairoContext::setLineJoin(int $setting):public void
cairo_set_line_join(CairoContext $context, int $setting):void
CairoContext::setLineWidth(float $width):public void
cairo_set_line_width(CairoContext $context, float $width):void
CairoContext::setMatrix(CairoMatrix $matrix):public void
cairo_set_matrix(CairoContext $context, CairoMatrix $matrix):void
CairoContext::setMiterLimit(float $limit):public void
cairo_set_miter_limit(CairoContext $context, float $limit):void
CairoContext::setOperator(int $setting):public void
cairo_set_operator(CairoContext $context, int $setting):void
CairoContext::setScaledFont(CairoScaledFont $scaledfont):public void
cairo_set_scaled_font(CairoContext $context, CairoScaledFont $scaledfont):void
CairoContext::setSource(CairoPattern $pattern):public void
cairo_set_source(CairoContext $context, CairoPattern $pattern):void
CairoContext::setSourceRGB(float $red, float $green, float $blue):public void
CairoContext::setSourceRGBA(float $red, float $green, float $blue, float $alpha):public void
CairoContext::setSourceSurface(CairoSurface $surface [, float $x [, float $y]]):public void
cairo_set_source_surface(CairoContext $context, CairoSurface $surface [, float $x [, float $y]]):void
CairoContext::setTolerance(float $tolerance):public void
cairo_set_tolerance(CairoContext $context, float $tolerance):void
CairoContext::showPage(void):public void
cairo_show_page(CairoContext $context):void
CairoContext::showText(string $text):public void
cairo_show_text(CairoContext $context, string $text):void
CairoContext::status(void):public int
cairo_status(CairoContext $context):int
CairoContext::stroke(void):public void
cairo_stroke(CairoContext $context):void
CairoContext::strokeExtents(void):public array
cairo_stroke_extents(CairoContext $context):array
CairoContext::strokePreserve(void):public void
cairo_stroke_preserve(CairoContext $context):void
CairoContext::textExtents(string $text):public array
cairo_text_extents(CairoContext $context):array
CairoContext::textPath(string $string):public void
cairo_text_path(CairoContext $context, string $text):void
CairoContext::transform(CairoMatrix $matrix):public void
cairo_transform(CairoContext $context, CairoMatrix $matrix):void
CairoContext::translate(float $x, float $y):public void
cairo_translate(CairoContext $context, float $x, float $y):void
CairoContext::userToDevice(float $x, float $y):public array
cairo_user_to_device(CairoContext $context, float $x, float $y):array
CairoContext::userToDeviceDistance(float $x, float $y):public array
cairo_user_to_device_distance(CairoContext $context, float $x, float $y):array
CairoFontFace::__construct(void):public
CairoFontFace::getType(void):public int
cairo_font_face_get_type(CairoFontFace $fontface):int
CairoFontFace::status(void):public int
cairo_font_face_status(CairoFontFace $fontface):int
CairoFontOptions::__construct(void):public
CairoFontOptions::equal(CairoFontOptions $other):public bool
CairoFontOptions::getAntialias(void):public int
CairoFontOptions::getHintMetrics(void):public int
CairoFontOptions::getHintStyle(void):public int
CairoFontOptions::getSubpixelOrder(void):public int
CairoFontOptions::hash(void):public int
CairoFontOptions::merge(CairoFontOptions $other):public void
CairoFontOptions::setAntialias(int $antialias):public void
CairoFontOptions::setHintMetrics(int $hint_metrics):public void
CairoFontOptions::setHintStyle(int $hint_style):public void
CairoFontOptions::setSubpixelOrder(int $subpixel_order):public void
CairoFontOptions::status(void):public int
CairoFormat::strideForWidth(int $format, int $width):public static int
CairoGradientPattern::addColorStopRgb(float $offset, float $red, float $green, float $blue):public void
CairoGradientPattern::addColorStopRgba(float $offset, float $red, float $green, float $blue, float $alpha):public void
CairoGradientPattern::getColorStopCount(void):public int
CairoGradientPattern::getColorStopRgba(int $index):public array
CairoGradientPattern::getExtend(void):public int
CairoGradientPattern::setExtend(int $extend):public void
CairoImageSurface::__construct(int $format, int $width, int $height):public
CairoImageSurface::createForData(string $data, int $format, int $width, int $height):public static void
CairoImageSurface::createFromPng(string $file):public static CairoImageSurface
CairoImageSurface::getData(void):public string
CairoImageSurface::getFormat(void):public int
CairoImageSurface::getHeight(void):public int
CairoImageSurface::getStride(void):public int
CairoImageSurface::getWidth(void):public int
CairoLinearGradient::__construct(float $x0, float $y0, float $x1, float $y1):public
CairoLinearGradient::getPoints(void):public array
CairoMatrix::__construct([float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0]]]]]]):public
cairo_matrix_init([float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0]]]]]]):object
CairoMatrix::initIdentity(void):public static void
cairo_matrix_init_identity(void):object
CairoMatrix::initRotate(float $radians):public static void
cairo_matrix_init_rotate(float $radians):object
CairoMatrix::initScale(float $sx, float $sy):public static void
cairo_matrix_init_scale(float $sx, float $sy):object
CairoMatrix::initTranslate(float $tx, float $ty):public static void
cairo_matrix_init_translate(float $tx, float $ty):object
CairoMatrix::invert(void):public void
CairoMatrix::multiply(CairoMatrix $matrix1, CairoMatrix $matrix2):public static CairoMatrix
CairoMatrix::rotate(float $radians):public void
cairo_matrix_rotate(CairoContext $context, string $radians):void
CairoMatrix::scale(float $sx, float $sy):public void
cairo_matrix_scale(CairoContext $context, float $sx, float $sy):void
CairoMatrix::transformDistance(float $dx, float $dy):public array
CairoMatrix::transformPoint(float $dx, float $dy):public array
CairoMatrix::translate(float $tx, float $ty):public void
CairoPattern::__construct(void):public
CairoPattern::getMatrix(void):public void
CairoPattern::getType(void):public int
CairoPattern::setMatrix(CairoMatrix $matrix):public void
CairoPattern::status(void):public int
CairoPdfSurface::__construct(string $file, float $width, float $height):public
CairoPdfSurface::setSize(float $width, float $height):public void
CairoPsSurface::__construct(string $file, float $width, float $height):public
CairoPsSurface::dscBeginPageSetup(void):public void
CairoPsSurface::dscBeginSetup(void):public void
CairoPsSurface::dscComment(string $comment):public void
CairoPsSurface::getEps(void):public bool
CairoPsSurface::getLevels(void):public static array
CairoPsSurface::levelToString(int $level):public static string
CairoPsSurface::restrictToLevel(int $level):public void
CairoPsSurface::setEps(bool $level):public void
CairoPsSurface::setSize(float $width, float $height):public void
CairoRadialGradient::__construct(float $x0, float $y0, float $r0, float $x1, float $y1, float $r1):public
CairoRadialGradient::getCircles(void):public array
CairoScaledFont::__construct(CairoFontFace $font_face, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $options):public
CairoScaledFont::extents(void):public array
CairoScaledFont::getCtm(void):public CairoMatrix
CairoScaledFont::getFontFace(void):public void
CairoScaledFont::getFontMatrix(void):public void
CairoScaledFont::getFontOptions(void):public void
CairoScaledFont::getScaleMatrix(void):public void
CairoScaledFont::getType(void):public int
CairoScaledFont::glyphExtents(array $glyphs):public array
CairoScaledFont::status(void):public int
CairoScaledFont::textExtents(string $text):public array
CairoSolidPattern::__construct(float $red, float $green, float $blue [, float $alpha = 0]):public
CairoSolidPattern::getRgba(void):public array
CairoSurface::__construct(void):public
CairoSurface::copyPage(void):public void
CairoSurface::createSimilar(CairoSurface $other, int $content, string $width, string $height):public void
CairoSurface::finish(void):public void
CairoSurface::flush(void):public void
CairoSurface::getContent(void):public int
CairoSurface::getDeviceOffset(void):public array
CairoSurface::getFontOptions(void):public void
CairoSurface::getType(void):public int
CairoSurface::markDirty(void):public void
CairoSurface::markDirtyRectangle(float $x, float $y, float $width, float $height):public void
CairoSurface::setDeviceOffset(float $x, float $y):public void
CairoSurface::setFallbackResolution(float $x, float $y):public void
CairoSurface::showPage(void):public void
CairoSurface::status(void):public int
CairoSurface::writeToPng(string $file):public void
CairoSurfacePattern::__construct(CairoSurface $surface):public
CairoSurfacePattern::getExtend(void):public int
CairoSurfacePattern::getFilter(void):public int
CairoSurfacePattern::getSurface(void):public void
CairoSurfacePattern::setExtend(int $extend):public void
CairoSurfacePattern::setFilter(int $filter):public void
CairoSvgSurface::__construct(string $file, float $width, float $height):public
CairoSvgSurface::getVersions(void):public static array
cairo_svg_surface_get_versions(void):array
CairoSvgSurface::restrictToVersion(int $version):public void
CairoSvgSurface::versionToString(int $version):public static string
CallbackFilterIterator::accept(void):public string
CallbackFilterIterator::__construct(Iterator $iterator, callable $callback):public
chdb::__construct(string $pathname):public
chdb::get(string $key):public string
Closure::bind(Closure $closure, object $newthis [, mixed $newscope = "static"]):public static Closure
Closure::bindTo(object $newthis [, mixed $newscope = "static"]):public Closure
Closure::call(object $newthis [, mixed $...]):public mixed
Closure::__construct(void):private
Closure::fromCallable(callable $callable):public static Closure
Collator::asort(array &$arr [, int $sort_flag]):public bool
collator_asort(Collator $coll, array &$arr [, int $sort_flag]):bool
Collator::compare(string $str1, string $str2):public int
collator_compare(Collator $coll, string $str1, string $str2):int
Collator::__construct(string $locale):public
Collator::create(string $locale):public static Collator
collator_create(string $locale):Collator
Collator::getAttribute(int $attr):public int
collator_get_attribute(Collator $coll, int $attr):int
Collator::getErrorCode(void):public int
collator_get_error_code(Collator $coll):int
Collator::getErrorMessage(void):public string
collator_get_error_message(Collator $coll):string
Collator::getLocale(int $type):public string
collator_get_locale(Collator $coll, int $type):string
Collator::getSortKey(string $str):public string
collator_get_sort_key(Collator $coll, string $str):string
Collator::getStrength(void):public int
collator_get_strength(Collator $coll):int
Collator::setAttribute(int $attr, int $val):public bool
collator_set_attribute(Collator $coll, int $attr, int $val):bool
Collator::setStrength(int $strength):public bool
collator_set_strength(Collator $coll, int $strength):bool
Collator::sort(array &$arr [, int $sort_flag]):public bool
collator_sort(Collator $coll, array &$arr [, int $sort_flag]):bool
Collator::sortWithSortKeys(array &$arr):public bool
collator_sort_with_sort_keys(Collator $coll, array &$arr):bool
Collectable::isGarbage(void):public bool
Collectable::setGarbage(void):public void
CommonMark\CQL::__construct(string $query):public
CommonMark\CQL::__invoke(\CommonMark\Node $root, callable $handler):public
CommonMark\Interfaces\IVisitable::accept(CommonMark\Interfaces\IVisitor $visitor):abstract public void
CommonMark\Interfaces\IVisitor::enter(IVisitable $visitable):abstract public ?int|IVisitable
CommonMark\Interfaces\IVisitor::leave(IVisitable $visitable):abstract public ?int|IVisitable
CommonMark\Node\BulletList::__construct(void):public
CommonMark\Node\CodeBlock::__construct(string $fence, string $literal):public
CommonMark\Node\Heading::__construct(void):public
CommonMark\Node\Image::__construct(void):public
CommonMark\Node\Link::__construct(void):public
CommonMark\Node\OrderedList::__construct(void):public
CommonMark\Node\Text::__construct(void):public
CommonMark\Node::accept(CommonMark\Interfaces\IVisitor $visitor):public void
CommonMark\Node::appendChild(CommonMark\Node $child):public CommonMark\Node
CommonMark\Node::insertAfter(CommonMark\Node $sibling):public CommonMark\Node
CommonMark\Node::insertBefore(CommonMark\Node $sibling):public CommonMark\Node
CommonMark\Node::prependChild(CommonMark\Node $child):public CommonMark\Node
CommonMark\Node::replace(CommonMark\Node $target):public CommonMark\Node
CommonMark\Node::unlink(void):public void
CommonMark\Parser::__construct([int $options]):public
CommonMark\Parser::finish(void):public CommonMark\Node
CommonMark\Parser::parse(string $buffer):public void
Componere\Abstract\Definition::addInterface(string $interface):public Definition
Componere\Abstract\Definition::addMethod(string $name, \Componere\Method $method):public Definition
Componere\Abstract\Definition::addTrait(string $trait):public Definition
Componere\Abstract\Definition::getReflector(void):public \ReflectionClass
Componere\Definition::addConstant(string $name, \Componere\Value $value):public Definition
Componere\Definition::addProperty(string $name, \Componere\Value $value):public Definition
Componere\Definition::__construct(string $name):public
Componere\Definition::getClosure(string $name):public \Closure
Componere\Definition::getClosures(void):public array
Componere\Definition::isRegistered(void):public bool
Componere\Definition::register(void):public void
Componere\Method::__construct(\Closure $closure):public
Componere\Method::getReflector(void):public \ReflectionMethod
Componere\Method::setPrivate(void):public Method
Componere\Method::setProtected(void):public Method
Componere\Method::setStatic(void):public Method
Componere\Patch::apply(void):public void
Componere\Patch::__construct(object $instance):public
Componere\Patch::derive(object $instance):public Patch
Componere\Patch::getClosure(string $name):public \Closure
Componere\Patch::getClosures(void):public array
Componere\Patch::isApplied(void):public bool
Componere\Patch::revert(void):public void
Componere\Value::__construct([$default]):public
Componere\Value::hasDefault(void):public bool
Componere\Value::isPrivate(void):public bool
Componere\Value::isProtected(void):public bool
Componere\Value::isStatic(void):public bool
Componere\Value::setPrivate(void):public Value
Componere\Value::setProtected(void):public Value
Componere\Value::setStatic(void):public Value
Componere\cast(Type, $object):Type
Componere\cast_by_ref(Type, $object):Type
Cond::broadcast(int $condition):final public static bool
Cond::create(void):final public static int
Cond::destroy(int $condition):final public static bool
Cond::signal(int $condition):final public static bool
Cond::wait(int $condition, int $mutex [, int $timeout]):final public static bool
Countable::count(void):abstract public int
CURLFile::__construct(string $filename [, string $mimetype [, string $postname]]):public
curl_file_create(string $filename [, string $mimetype [, string $postname]]):CURLFile
CURLFile::getFilename(void):public string
CURLFile::getMimeType(void):public string
CURLFile::getPostFilename(void):public string
CURLFile::setMimeType(string $mime):public void
CURLFile::setPostFilename(string $postname):public void
CURLFile::__wakeup(void):public void
DateInterval::__construct(string $interval_spec):public
DateInterval::createFromDateString(string $time):public static DateInterval
DateInterval::format(string $format):public string
DatePeriod::__construct(DateTimeInterface $start, DateInterval $interval, int $recurrences [, int $options]):public
DatePeriod::getDateInterval(void):public DateInterval
DatePeriod::getEndDate(void):public DateTimeInterface
DatePeriod::getStartDate(void):public DateTimeInterface
DateTime::add(DateInterval $interval):public DateTime
date_add(DateTime $object, DateInterval $interval):DateTime
DateTime::__construct([string $time = "now" [, DateTimeZone $timezone = NULL]]):public
date_create([string $time = "now" [, DateTimeZone $timezone = NULL]]):DateTime
DateTime::createFromFormat(string $format, string $time [, DateTimeZone $timezone]):public static DateTime
date_create_from_format(string $format, string $time [, DateTimeZone $timezone]):DateTime
DateTime::diff(DateTimeInterface $datetime2 [, bool $absolute = FALSE]):public DateInterval
DateTimeImmutable::diff(DateTimeInterface $datetime2 [, bool $absolute = FALSE]):public DateInterval
DateTime::format(string $format):public string
DateTimeImmutable::format(string $format):public string
DateTime::getLastErrors(void):public static array
date_get_last_errors(void):array
DateTime::getOffset(void):public int
DateTimeImmutable::getOffset(void):public int
DateTime::getTimestamp(void):public int
DateTimeImmutable::getTimestamp(void):public int
DateTime::getTimezone(void):public DateTimeZone
DateTimeImmutable::getTimezone(void):public DateTimeZone
DateTime::modify(string $modify):public DateTime
date_modify(DateTime $object, string $modify):DateTime
DateTime::__set_state(array $array):public static DateTime
DateTime::setDate(int $year, int $month, int $day):public DateTime
date_date_set(DateTime $object, int $year, int $month, int $day):DateTime
DateTime::setISODate(int $year, int $week [, int $day = 1]):public DateTime
date_isodate_set(DateTime $object, int $year, int $week [, int $day = 1]):DateTime
DateTime::setTime(int $hour, int $minute [, int $second = 0 [, int $microseconds = 0]]):public DateTime
date_time_set(DateTime $object, int $hour, int $minute [, int $second = 0 [, int $microseconds = 0]]):DateTime
DateTime::setTimestamp(int $unixtimestamp):public DateTime
date_timestamp_set(DateTime $object, int $unixtimestamp):DateTime
DateTime::setTimezone(DateTimeZone $timezone):public DateTime
date_timezone_set(DateTime $object, DateTimeZone $timezone):DateTime
DateTime::sub(DateInterval $interval):public DateTime
date_sub(DateTime $object, DateInterval $interval):DateTime
DateTime::__wakeup(void):public
DateTimeImmutable::__wakeup(void):public
DateTimeImmutable::add(DateInterval $interval):public DateTimeImmutable
DateTimeImmutable::__construct([string $time = "now" [, DateTimeZone $timezone = NULL]]):public
date_create_immutable([string $time = "now" [, DateTimeZone $timezone = NULL]]):DateTimeImmutable
DateTimeImmutable::createFromFormat(string $format, string $time [, DateTimeZone $timezone]):public static DateTimeImmutable
date_create_immutable_from_format(string $format, string $time [, DateTimeZone $timezone]):DateTimeImmutable
DateTimeImmutable::createFromMutable(DateTime $datetime):public static DateTimeImmutable
DateTimeImmutable::getLastErrors(void):public static array
DateTimeImmutable::modify(string $modify):public DateTimeImmutable
DateTimeImmutable::__set_state(array $array):public static DateTimeImmutable
DateTimeImmutable::setDate(int $year, int $month, int $day):public DateTimeImmutable
DateTimeImmutable::setISODate(int $year, int $week [, int $day = 1]):public DateTimeImmutable
DateTimeImmutable::setTime(int $hour, int $minute [, int $second = 0 [, int $microseconds = 0]]):public DateTimeImmutable
DateTimeImmutable::setTimestamp(int $unixtimestamp):public DateTimeImmutable
DateTimeImmutable::setTimezone(DateTimeZone $timezone):public DateTimeImmutable
DateTimeImmutable::sub(DateInterval $interval):public DateTimeImmutable
DateTimeZone::__construct(string $timezone):public
timezone_open(string $timezone):DateTimeZone
DateTimeZone::getLocation(void):public array
timezone_location_get(DateTimeZone $object):array
DateTimeZone::getName(void):public string
timezone_name_get(DateTimeZone $object):string
DateTimeZone::getOffset(DateTime $datetime):public int
timezone_offset_get(DateTimeZone $object, DateTime $datetime):int
DateTimeZone::getTransitions([int $timestamp_begin [, int $timestamp_end]]):public array
timezone_transitions_get(DateTimeZone $object [, int $timestamp_begin [, int $timestamp_end]]):array
DateTimeZone::listAbbreviations(void):public static array
timezone_abbreviations_list(void):array
DateTimeZone::listIdentifiers([int $what = DateTimeZone::ALL [, string $country = NULL]]):public static array
timezone_identifiers_list([int $what = DateTimeZone::ALL [, string $country = NULL]]):array
Directory::close([resource $dir_handle]):public void
Directory::read([resource $dir_handle]):public string
Directory::rewind([resource $dir_handle]):public void
DirectoryIterator::__construct(string $path):public
DirectoryIterator::current(void):public DirectoryIterator
DirectoryIterator::getATime(void):public int
DirectoryIterator::getBasename([string $suffix]):public string
DirectoryIterator::getCTime(void):public int
DirectoryIterator::getExtension(void):public string
DirectoryIterator::getFilename(void):public string
DirectoryIterator::getGroup(void):public int
DirectoryIterator::getInode(void):public int
DirectoryIterator::getMTime(void):public int
DirectoryIterator::getOwner(void):public int
DirectoryIterator::getPath(void):public string
DirectoryIterator::getPathname(void):public string
DirectoryIterator::getPerms(void):public int
DirectoryIterator::getSize(void):public int
DirectoryIterator::getType(void):public string
DirectoryIterator::isDir(void):public bool
DirectoryIterator::isDot(void):public bool
DirectoryIterator::isExecutable(void):public bool
DirectoryIterator::isFile(void):public bool
DirectoryIterator::isLink(void):public bool
DirectoryIterator::isReadable(void):public bool
DirectoryIterator::isWritable(void):public bool
DirectoryIterator::key(void):public string
DirectoryIterator::next(void):public void
DirectoryIterator::rewind(void):public void
DirectoryIterator::seek(int $position):public void
DirectoryIterator::__toString(void):public string
DirectoryIterator::valid(void):public bool
DOMAttr::__construct(string $name [, string $value]):public
DOMAttr::isId(void):public bool
DOMCdataSection::__construct(string $value):public
DOMCharacterData::appendData(string $data):public void
DOMCharacterData::deleteData(int $offset, int $count):public void
DOMCharacterData::insertData(int $offset, string $data):public void
DOMCharacterData::replaceData(int $offset, int $count, string $data):public void
DOMCharacterData::substringData(int $offset, int $count):public string
DOMComment::__construct([string $value]):public
DOMDocument::__construct([string $version [, string $encoding]]):public
DOMDocument::createAttribute(string $name):public DOMAttr
DOMDocument::createAttributeNS(string $namespaceURI, string $qualifiedName):public DOMAttr
DOMDocument::createCDATASection(string $data):public DOMCDATASection
DOMDocument::createComment(string $data):public DOMComment
DOMDocument::createDocumentFragment(void):public DOMDocumentFragment
DOMDocument::createElement(string $name [, string $value]):public DOMElement
DOMDocument::createElementNS(string $namespaceURI, string $qualifiedName [, string $value]):public DOMElement
DOMDocument::createEntityReference(string $name):public DOMEntityReference
DOMDocument::createProcessingInstruction(string $target [, string $data]):public DOMProcessingInstruction
DOMDocument::createTextNode(string $content):public DOMText
DOMDocument::getElementById(string $elementId):public DOMElement
DOMDocument::getElementsByTagName(string $name):public DOMNodeList
DOMDocument::getElementsByTagNameNS(string $namespaceURI, string $localName):public DOMNodeList
DOMDocument::importNode(DOMNode $importedNode [, bool $deep]):public DOMNode
DOMDocument::load(string $filename [, int $options = 0]):public mixed
DOMDocument::loadHTML(string $source [, int $options = 0]):public bool
DOMDocument::loadHTMLFile(string $filename [, int $options = 0]):public bool
DOMDocument::loadXML(string $source [, int $options = 0]):public mixed
DOMDocument::normalizeDocument(void):public void
DOMDocument::registerNodeClass(string $baseclass, string $extendedclass):public bool
DOMDocument::relaxNGValidate(string $filename):public bool
DOMDocument::relaxNGValidateSource(string $source):public bool
DOMDocument::save(string $filename [, int $options]):public int
DOMDocument::saveHTML([DOMNode $node = NULL]):public string
DOMDocument::saveHTMLFile(string $filename):public int
DOMDocument::saveXML([DOMNode $node [, int $options]]):public string
DOMDocument::schemaValidate(string $filename [, int $flags]):public bool
DOMDocument::schemaValidateSource(string $source [, int $flags]):public bool
DOMDocument::validate(void):public bool
DOMDocument::xinclude([int $options]):public int
DOMDocumentFragment::appendXML(string $data):public bool
DOMElement::__construct(string $name [, string $value [, string $namespaceURI]]):public
DOMElement::getAttribute(string $name):public string
DOMElement::getAttributeNode(string $name):public DOMAttr
DOMElement::getAttributeNodeNS(string $namespaceURI, string $localName):public DOMAttr
DOMElement::getAttributeNS(string $namespaceURI, string $localName):public string
DOMElement::getElementsByTagName(string $name):public DOMNodeList
DOMElement::getElementsByTagNameNS(string $namespaceURI, string $localName):public DOMNodeList
DOMElement::hasAttribute(string $name):public bool
DOMElement::hasAttributeNS(string $namespaceURI, string $localName):public bool
DOMElement::removeAttribute(string $name):public bool
DOMElement::removeAttributeNode(DOMAttr $oldnode):public bool
DOMElement::removeAttributeNS(string $namespaceURI, string $localName):public bool
DOMElement::setAttribute(string $name, string $value):public DOMAttr
DOMElement::setAttributeNode(DOMAttr $attr):public DOMAttr
DOMElement::setAttributeNodeNS(DOMAttr $attr):public DOMAttr
DOMElement::setAttributeNS(string $namespaceURI, string $qualifiedName, string $value):public void
DOMElement::setIdAttribute(string $name, bool $isId):public void
DOMElement::setIdAttributeNode(DOMAttr $attr, bool $isId):public void
DOMElement::setIdAttributeNS(string $namespaceURI, string $localName, bool $isId):public void
DOMEntityReference::__construct(string $name):public
DOMImplementation::__construct(void)
DOMImplementation::createDocument([string $namespaceURI = NULL [, string $qualifiedName = NULL [, DOMDocumentType $doctype = NULL]]]):public DOMDocument
DOMImplementation::createDocumentType([string $qualifiedName = NULL [, string $publicId = NULL [, string $systemId = NULL]]]):public DOMDocumentType
DOMImplementation::hasFeature(string $feature, string $version):public bool
DOMNamedNodeMap::getNamedItem(string $name):DOMNode
DOMNamedNodeMap::getNamedItemNS(string $namespaceURI, string $localName):DOMNode
DOMNamedNodeMap::item(int $index):DOMNode
DOMNode::appendChild(DOMNode $newnode):public DOMNode
DOMNode::C14N([bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]]):public string
DOMNode::C14NFile(string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]]):public int
DOMNode::cloneNode([bool $deep]):public DOMNode
DOMNode::getLineNo(void):public int
DOMNode::getNodePath(void):public string
DOMNode::hasAttributes(void):public bool
DOMNode::hasChildNodes(void):public bool
DOMNode::insertBefore(DOMNode $newnode [, DOMNode $refnode]):public DOMNode
DOMNode::isDefaultNamespace(string $namespaceURI):public bool
DOMNode::isSameNode(DOMNode $node):public bool
DOMNode::isSupported(string $feature, string $version):public bool
DOMNode::lookupNamespaceUri(string $prefix):public string
DOMNode::lookupPrefix(string $namespaceURI):public string
DOMNode::normalize(void):public void
DOMNode::removeChild(DOMNode $oldnode):public DOMNode
DOMNode::replaceChild(DOMNode $newnode, DOMNode $oldnode):public DOMNode
DOMNodeList::count(void):public int
DOMNodeList::item(int $index):DOMNode
DOMProcessingInstruction::__construct(string $name [, string $value]):public
DOMText::__construct([string $value]):public
DOMText::isElementContentWhitespace(void):public bool
DOMText::isWhitespaceInElementContent(void):public bool
DOMText::splitText(int $offset):public DOMText
DOMXPath::__construct(DOMDocument $doc):public
DOMXPath::evaluate(string $expression [, DOMNode $contextnode [, bool $registerNodeNS = TRUE]]):public mixed
DOMXPath::query(string $expression [, DOMNode $contextnode [, bool $registerNodeNS = TRUE]]):public DOMNodeList
DOMXPath::registerNamespace(string $prefix, string $namespaceURI):public bool
DOMXPath::registerPhpFunctions([mixed $restrict]):public void
Ds\Collection::clear(void):abstract public void
Ds\Collection::copy(void):abstract public Ds\Collection
Ds\Collection::isEmpty(void):abstract public bool
Ds\Collection::toArray(void):abstract public array
Ds\Deque::allocate(int $capacity):public void
Ds\Deque::apply(callable $callback):public void
Ds\Deque::capacity(void):public int
Ds\Deque::clear(void):public void
Ds\Deque::__construct([mixed $values]):public
Ds\Deque::contains([mixed $...values]):public bool
Ds\Deque::copy(void):public Ds\Deque
Ds\Deque::filter([callable $callback]):public Ds\Deque
Ds\Deque::find(mixed $value):public mixed
Ds\Deque::first(void):public mixed
Ds\Deque::get(int $index):public mixed
Ds\Deque::insert(int $index [, mixed $...values]):public void
Ds\Deque::isEmpty(void):public bool
Ds\Deque::join([string $glue]):public string
Ds\Deque::last(void):public mixed
Ds\Deque::map(callable $callback):public Ds\Deque
Ds\Deque::merge(mixed $values):public Ds\Deque
Ds\Deque::pop(void):public mixed
Ds\Deque::push([mixed $...values]):public void
Ds\Deque::reduce(callable $callback [, mixed $initial]):public mixed
Ds\Deque::remove(int $index):public mixed
Ds\Deque::reverse(void):public void
Ds\Deque::reversed(void):public Ds\Deque
Ds\Deque::rotate(int $rotations):public void
Ds\Deque::set(int $index, mixed $value):public void
Ds\Deque::shift(void):public mixed
Ds\Deque::slice(int $index [, int $length]):public Ds\Deque
Ds\Deque::sort([callable $comparator]):public void
Ds\Deque::sorted([callable $comparator]):public Ds\Deque
Ds\Deque::sum(void):public number
Ds\Deque::toArray(void):public array
Ds\Deque::unshift([mixed $values]):public void
Ds\Hashable::equals(object $obj):abstract public bool
Ds\Hashable::hash(void):abstract public mixed
Ds\Map::allocate(int $capacity):public void
Ds\Map::apply(callable $callback):public void
Ds\Map::capacity(void):public int
Ds\Map::clear(void):public void
Ds\Map::__construct([mixed $...values]):public
Ds\Map::copy(void):public Ds\Map
Ds\Map::diff(Ds\Map $map):public Ds\Map
Ds\Map::filter([callable $callback]):public Ds\Map
Ds\Map::first(void):public Ds\Pair
Ds\Map::get(mixed $key [, mixed $default]):public mixed
Ds\Map::hasKey(mixed $key):public bool
Ds\Map::hasValue(mixed $value):public bool
Ds\Map::intersect(Ds\Map $map):public Ds\Map
Ds\Map::isEmpty(void):public bool
Ds\Map::keys(void):public Ds\Set
Ds\Map::ksort([callable $comparator]):public void
Ds\Map::ksorted([callable $comparator]):public Ds\Map
Ds\Map::last(void):public Ds\Pair
Ds\Map::map(callable $callback):public Ds\Map
Ds\Map::merge(mixed $values):public Ds\Map
Ds\Map::pairs(void):public Ds\Sequence
Ds\Map::put(mixed $key, mixed $value):public void
Ds\Map::putAll(mixed $pairs):public void
Ds\Map::reduce(callable $callback [, mixed $initial]):public mixed
Ds\Map::remove(mixed $key [, mixed $default]):public mixed
Ds\Map::reverse(void):public void
Ds\Map::reversed(void):public Ds\Map
Ds\Map::skip(int $position):public Ds\Pair
Ds\Map::slice(int $index [, int $length]):public Ds\Map
Ds\Map::sort([callable $comparator]):public void
Ds\Map::sorted([callable $comparator]):public Ds\Map
Ds\Map::sum(void):public number
Ds\Map::toArray(void):public array
Ds\Map::union(Ds\Map $map):public Ds\Map
Ds\Map::values(void):public Ds\Sequence
Ds\Map::xor(Ds\Map $map):public Ds\Map
Ds\Pair::clear(void):public void
Ds\Pair::__construct([mixed $key [, mixed $value]]):public
Ds\Pair::copy(void):public Ds\Pair
Ds\Pair::isEmpty(void):public bool
Ds\Pair::toArray(void):public array
Ds\PriorityQueue::allocate(int $capacity):public void
Ds\PriorityQueue::capacity(void):public int
Ds\PriorityQueue::clear(void):public void
Ds\PriorityQueue::__construct(void):public
Ds\PriorityQueue::copy(void):public Ds\PriorityQueue
Ds\PriorityQueue::isEmpty(void):public bool
Ds\PriorityQueue::peek(void):public mixed
Ds\PriorityQueue::pop(void):public mixed
Ds\PriorityQueue::push(mixed $value, int $priority):public void
Ds\PriorityQueue::toArray(void):public array
Ds\Queue::allocate(int $capacity):public void
Ds\Queue::capacity(void):public int
Ds\Queue::clear(void):public void
Ds\Queue::__construct([mixed $values]):public
Ds\Queue::copy(void):public Ds\Queue
Ds\Queue::isEmpty(void):public bool
Ds\Queue::peek(void):public mixed
Ds\Queue::pop(void):public mixed
Ds\Queue::push([mixed $...values]):public void
Ds\Queue::toArray(void):public array
Ds\Sequence::allocate(int $capacity):abstract public void
Ds\Sequence::apply(callable $callback):abstract public void
Ds\Sequence::capacity(void):abstract public int
Ds\Sequence::contains([mixed $...values]):abstract public bool
Ds\Sequence::filter([callable $callback]):abstract public Ds\Sequence
Ds\Sequence::find(mixed $value):abstract public mixed
Ds\Sequence::first(void):abstract public mixed
Ds\Sequence::get(int $index):abstract public mixed
Ds\Sequence::insert(int $index [, mixed $...values]):abstract public void
Ds\Sequence::join([string $glue]):abstract public string
Ds\Sequence::last(void):abstract public mixed
Ds\Sequence::map(callable $callback):abstract public Ds\Sequence
Ds\Sequence::merge(mixed $values):abstract public Ds\Sequence
Ds\Sequence::pop(void):abstract public mixed
Ds\Sequence::push([mixed $...values]):abstract public void
Ds\Sequence::reduce(callable $callback [, mixed $initial]):abstract public mixed
Ds\Sequence::remove(int $index):abstract public mixed
Ds\Sequence::reverse(void):abstract public void
Ds\Sequence::reversed(void):abstract public Ds\Sequence
Ds\Sequence::rotate(int $rotations):abstract public void
Ds\Sequence::set(int $index, mixed $value):abstract public void
Ds\Sequence::shift(void):abstract public mixed
Ds\Sequence::slice(int $index [, int $length]):abstract public Ds\Sequence
Ds\Sequence::sort([callable $comparator]):abstract public void
Ds\Sequence::sorted([callable $comparator]):abstract public Ds\Sequence
Ds\Sequence::sum(void):abstract public number
Ds\Sequence::unshift([mixed $values]):abstract public void
Ds\Set::add([mixed $...values]):public void
Ds\Set::allocate(int $capacity):public void
Ds\Set::capacity(void):public int
Ds\Set::clear(void):public void
Ds\Set::__construct([mixed $...values]):public
Ds\Set::contains([mixed $...values]):public bool
Ds\Set::copy(void):public Ds\Set
Ds\Set::diff(Ds\Set $set):public Ds\Set
Ds\Set::filter([callable $callback]):public Ds\Set
Ds\Set::first(void):public void
Ds\Set::get(int $index):public mixed
Ds\Set::intersect(Ds\Set $set):public Ds\Set
Ds\Set::isEmpty(void):public bool
Ds\Set::join([string $glue]):public string
Ds\Set::last(void):public void
Ds\Set::merge(mixed $values):public Ds\Set
Ds\Set::reduce(callable $callback [, mixed $initial]):public mixed
Ds\Set::remove([mixed $...values]):public void
Ds\Set::reverse(void):public void
Ds\Set::reversed(void):public Ds\Set
Ds\Set::slice(int $index [, int $length]):public Ds\Set
Ds\Set::sort([callable $comparator]):public void
Ds\Set::sorted([callable $comparator]):public Ds\Set
Ds\Set::sum(void):public number
Ds\Set::toArray(void):public array
Ds\Set::union(Ds\Set $set):public Ds\Set
Ds\Set::xor(Ds\Set $set):public Ds\Set
Ds\Stack::allocate(int $capacity):public void
Ds\Stack::capacity(void):public int
Ds\Stack::clear(void):public void
Ds\Stack::__construct([mixed $values]):public
Ds\Stack::copy(void):public Ds\Stack
Ds\Stack::isEmpty(void):public bool
Ds\Stack::peek(void):public mixed
Ds\Stack::pop(void):public mixed
Ds\Stack::push([mixed $...values]):public void
Ds\Stack::toArray(void):public array
Ds\Vector::allocate(int $capacity):public void
Ds\Vector::apply(callable $callback):public void
Ds\Vector::capacity(void):public int
Ds\Vector::clear(void):public void
Ds\Vector::__construct([mixed $values]):public
Ds\Vector::contains([mixed $...values]):public bool
Ds\Vector::copy(void):public Ds\Vector
Ds\Vector::filter([callable $callback]):public Ds\Vector
Ds\Vector::find(mixed $value):public mixed
Ds\Vector::first(void):public mixed
Ds\Vector::get(int $index):public mixed
Ds\Vector::insert(int $index [, mixed $...values]):public void
Ds\Vector::isEmpty(void):public bool
Ds\Vector::join([string $glue]):public string
Ds\Vector::last(void):public mixed
Ds\Vector::map(callable $callback):public Ds\Vector
Ds\Vector::merge(mixed $values):public Ds\Vector
Ds\Vector::pop(void):public mixed
Ds\Vector::push([mixed $...values]):public void
Ds\Vector::reduce(callable $callback [, mixed $initial]):public mixed
Ds\Vector::remove(int $index):public mixed
Ds\Vector::reverse(void):public void
Ds\Vector::reversed(void):public Ds\Vector
Ds\Vector::rotate(int $rotations):public void
Ds\Vector::set(int $index, mixed $value):public void
Ds\Vector::shift(void):public mixed
Ds\Vector::slice(int $index [, int $length]):public Ds\Vector
Ds\Vector::sort([callable $comparator]):public void
Ds\Vector::sorted([callable $comparator]):public Ds\Vector
Ds\Vector::sum(void):public number
Ds\Vector::toArray(void):public array
Ds\Vector::unshift([mixed $values]):public void
EmptyIterator::current(void):public mixed
EmptyIterator::key(void):public scalar
EmptyIterator::next(void):public void
EmptyIterator::rewind(void):public void
EmptyIterator::valid(void):public bool
Error::__clone(void):final private void
Error::__construct([string $message = "" [, int $code = 0 [, Throwable $previous = NULL]]]):public
Error::getCode(void):final public mixed
Error::getFile(void):final public string
Error::getLine(void):final public int
Error::getMessage(void):final public string
Error::getPrevious(void):final public Throwable
Error::getTrace(void):final public array
Error::getTraceAsString(void):final public string
Error::__toString(void):public string
ErrorException::__construct([string $message = "" [, int $code = 0 [, int $severity = E_ERROR [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL]]]]]]):public
ErrorException::getSeverity(void):final public int
Ev::backend(void):final public static int
Ev::depth(void):final public static int
Ev::embeddableBackends(void):final public static void
Ev::feedSignal(int $signum):final public static void
Ev::feedSignalEvent(int $signum):final public static void
Ev::iteration(void):final public static int
Ev::now(void):final public static float
Ev::nowUpdate(void):final public static void
Ev::recommendedBackends(void):final public static void
Ev::resume(void):final public static void
Ev::run([int $flags]):final public static void
Ev::sleep(float $seconds):final public static void
Ev::stop([int $how]):final public static void
Ev::supportedBackends(void):final public static void
Ev::suspend(void):final public static void
Ev::time(void):final public static float
Ev::verify(void):final public static void
EvCheck::__construct(callable $callback [, mixed $data [, int $priority]]):public
EvCheck::createStopped(string $callback [, string $data [, string $priority]]):final public static object
EvChild::__construct(int $pid, bool $trace, callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
EvChild::createStopped(int $pid, bool $trace, callable $callback [, mixed $data [, int $priority]]):final public static object
EvChild::set(int $pid, bool $trace):public void
EvEmbed::__construct(object $other [, callable $callback [, mixed $data [, int $priority]]]):public
EvEmbed::createStopped(object $other [, callable $callback [, mixed $data [, int $priority]]]):final public static void
EvEmbed::set(object $other):public void
EvEmbed::sweep(void):public void
Event::add([float $timeout]):public bool
Event::addSignal([float $timeout]):public bool
Event::addTimer([float $timeout]):public bool
Event::__construct(EventBase $base, mixed $fd, int $what, callable $cb [, mixed $arg = NULL]):public
Event::del(void):public bool
Event::delSignal(void):public bool
Event::delTimer(void):public bool
Event::free(void):public void
Event::getSupportedMethods(void):public static array
Event::pending(int $flags):public bool
Event::set(EventBase $base, mixed $fd [, int $what [, callable $cb [, mixed $arg]]]):public bool
Event::setPriority(int $priority):public bool
Event::setTimer(EventBase $base, callable $cb [, mixed $arg]):public bool
Event::signal(EventBase $base, int $signum, callable $cb [, mixed $arg]):public static Event
Event::timer(EventBase $base, callable $cb [, mixed $arg]):public static Event
EventBase::__construct([EventConfig $cfg]):public
EventBase::dispatch(void):public void
EventBase::exit([float $timeout]):public bool
EventBase::free(void):public void
EventBase::getFeatures(void):public int
EventBase::getMethod(void):public string
EventBase::getTimeOfDayCached(void):public float
EventBase::gotExit(void):public bool
EventBase::gotStop(void):public bool
EventBase::loop([int $flags]):public bool
EventBase::priorityInit(int $n_priorities):public bool
EventBase::reInit(void):public bool
EventBase::stop(void):public bool
EventBuffer::add(string $data):public bool
EventBuffer::addBuffer(EventBuffer $buf):public bool
EventBuffer::appendFrom(EventBuffer $buf, int $len):public int
EventBuffer::__construct(void):public
EventBuffer::copyout(string &$data, int $max_bytes):public int
EventBuffer::drain(int $len):public bool
EventBuffer::enableLocking(void):public void
EventBuffer::expand(int $len):public bool
EventBuffer::freeze(bool $at_front):public bool
EventBuffer::lock(void):public void
EventBuffer::prepend(string $data):public bool
EventBuffer::prependBuffer(EventBuffer $buf):public bool
EventBuffer::pullup(int $size):public string
EventBuffer::read(int $max_bytes):public string
EventBuffer::readFrom(mixed $fd, int $howmuch):public int
EventBuffer::readLine(int $eol_style):public string
EventBuffer::search(string $what [, int $start = -1 [, int $end = -1]]):public mixed
EventBuffer::searchEol([int $start = -1 [, int $eol_style = EventBuffer::EOL_ANY]]):public mixed
EventBuffer::substr(int $start [, int $length]):public string
EventBuffer::unfreeze(bool $at_front):public bool
EventBuffer::unlock(void):public bool
EventBuffer::write(mixed $fd [, int $howmuch]):public int
EventBufferEvent::close(void):public void
EventBufferEvent::connect(string $addr):public bool
EventBufferEvent::connectHost(EventDnsBase $dns_base, string $hostname, int $port [, int $family = EventUtil::AF_UNSPEC]):public bool
EventBufferEvent::__construct(EventBase $base [, mixed $socket = NULL [, int $options = 0 [, callable $readcb = NULL [, callable $writecb = NULL [, callable $eventcb = NULL]]]]]):public
EventBufferEvent::createPair(EventBase $base [, int $options = 0]):public static array
EventBufferEvent::disable(int $events):public bool
EventBufferEvent::enable(int $events):public bool
EventBufferEvent::free(void):public void
EventBufferEvent::getDnsErrorString(void):public string
EventBufferEvent::getEnabled(void):public int
EventBufferEvent::getInput(void):public EventBuffer
EventBufferEvent::getOutput(void):public EventBuffer
EventBufferEvent::read(int $size):public string
EventBufferEvent::readBuffer(EventBuffer $buf):public bool
EventBufferEvent::setCallbacks(callable $readcb, callable $writecb, callable $eventcb [, string $arg]):public void
EventBufferEvent::setPriority(int $priority):public bool
EventBufferEvent::setTimeouts(float $timeout_read, float $timeout_write):public bool
EventBufferEvent::setWatermark(int $events, int $lowmark, int $highmark):public void
EventBufferEvent::sslError(void):public string
EventBufferEvent::sslFilter(EventBase $base, EventBufferEvent $underlying, EventSslContext $ctx, int $state [, int $options = 0]):public static EventBufferEvent
EventBufferEvent::sslGetCipherInfo(void):public string
EventBufferEvent::sslGetCipherName(void):public string
EventBufferEvent::sslGetCipherVersion(void):public string
EventBufferEvent::sslGetProtocol(void):public string
EventBufferEvent::sslRenegotiate(void):public void
EventBufferEvent::sslSocket(EventBase $base, mixed $socket, EventSslContext $ctx, int $state [, int $options]):public static EventBufferEvent
EventBufferEvent::write(string $data):public bool
EventBufferEvent::writeBuffer(EventBuffer $buf):public bool
EventConfig::avoidMethod(string $method):public bool
EventConfig::__construct(void):public
EventConfig::requireFeatures(int $feature):public bool
EventConfig::setMaxDispatchInterval(int $max_interval, int $max_callbacks, int $min_priority):public void
EventDnsBase::addNameserverIp(string $ip):public bool
EventDnsBase::addSearch(string $domain):public void
EventDnsBase::clearSearch(void):public void
EventDnsBase::__construct(EventBase $base, bool $initialize):public
EventDnsBase::countNameservers(void):public int
EventDnsBase::loadHosts(string $hosts):public bool
EventDnsBase::parseResolvConf(int $flags, string $filename):public bool
EventDnsBase::setOption(string $option, string $value):public bool
EventDnsBase::setSearchNdots(int $ndots):public bool
EventHttp::accept(mixed $socket):public bool
EventHttp::addServerAlias(string $alias):public bool
EventHttp::bind(string $address, int $port):public void
EventHttp::__construct(EventBase $base [, EventSslContext $ctx = NULL]):public
EventHttp::removeServerAlias(string $alias):public bool
EventHttp::setAllowedMethods(int $methods):public void
EventHttp::setCallback(string $path, string $cb [, string $arg]):public void
EventHttp::setDefaultCallback(string $cb [, string $arg]):public void
EventHttp::setMaxBodySize(int $value):public void
EventHttp::setMaxHeadersSize(int $value):public void
EventHttp::setTimeout(int $value):public void
EventHttpConnection::__construct(EventBase $base, EventDnsBase $dns_base, string $address, int $port [, EventSslContext $ctx = NULL]):public
EventHttpConnection::getBase(void):public EventBase
EventHttpConnection::getPeer(string &$address, int &$port):public void
EventHttpConnection::makeRequest(EventHttpRequest $req, int $type, string $uri):public bool
EventHttpConnection::setCloseCallback(callable $callback [, mixed $data]):public void
EventHttpConnection::setLocalAddress(string $address):public void
EventHttpConnection::setLocalPort(int $port):public void
EventHttpConnection::setMaxBodySize(string $max_size):public void
EventHttpConnection::setMaxHeadersSize(string $max_size):public void
EventHttpConnection::setRetries(int $retries):public void
EventHttpConnection::setTimeout(int $timeout):public void
EventHttpRequest::addHeader(string $key, string $value, int $type):public bool
EventHttpRequest::cancel(void):public void
EventHttpRequest::clearHeaders(void):public void
EventHttpRequest::closeConnection(void):public void
EventHttpRequest::__construct(callable $callback [, mixed $data = NULL]):public
EventHttpRequest::findHeader(string $key, string $type):public void
EventHttpRequest::free(void):public void
EventHttpRequest::getBufferEvent(void):public EventBufferEvent
EventHttpRequest::getCommand(void):public void
EventHttpRequest::getConnection() method is usually useful when we need to set up a callback on connection close. See EventHttpConnection::setCloseCallback() .
EventHttpRequest::getHost(void):public string
EventHttpRequest::getInputBuffer(void):public EventBuffer
EventHttpRequest::getInputHeaders(void):public array
EventHttpRequest::getOutputBuffer(void):public EventBuffer
EventHttpRequest::getOutputHeaders(void):public void
EventHttpRequest::getResponseCode(void):public int
EventHttpRequest::getUri(void):public string
EventHttpRequest::removeHeader(string $key, string $type):public void
EventHttpRequest::sendError(int $error [, string $reason = NULL]):public void
EventHttpRequest::sendReply(int $code, string $reason [, EventBuffer $buf]):public void
EventHttpRequest::sendReplyChunk(EventBuffer $buf):public void
EventHttpRequest::sendReplyEnd(void):public void
EventHttpRequest::sendReplyStart(int $code, string $reason):public void
EventListener::__construct(EventBase $base, callable $cb, mixed $data, int $flags, int $backlog, mixed $target):public
EventListener::disable(void):public bool
EventListener::enable(void):public bool
EventListener::getBase(void):public void
EventListener::getSocketName(string &$address [, mixed &$port]):public static bool
EventListener::setCallback(callable $cb [, mixed $arg = NULL]):public void
EventListener::setErrorCallback(string $cb):public void
EventSslContext::__construct(string $method, string $options):public
EventUtil::__construct(void):abstract public
EventUtil::getLastSocketErrno([mixed $socket = NULL]):public static int
EventUtil::getLastSocketError([mixed $socket]):public static string
EventUtil::getSocketFd(mixed $socket):public static int
EventUtil::getSocketName(mixed $socket, string &$address [, mixed &$port]):public static bool
EventUtil::setSocketOption(mixed $socket, int $level, int $optname, mixed $optval):public static bool
EventUtil::sslRandPoll(void):public static void
EvFork::__construct(callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
EvFork::createStopped(string $callback [, string $data [, string $priority]]):final public static object
EvIdle::__construct(callable $callback [, mixed $data [, int $priority]]):public
EvIdle::createStopped(string $callback [, mixed $data [, int $priority]]):final public static object
EvIo::__construct(mixed $fd, int $events, callable $callback [, mixed $data [, int $priority]]):public
EvIo::createStopped(mixed $fd, int $events, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static EvIo
EvIo::set(mixed $fd, int $events):public void
EvLoop::backend(void):public int
EvLoop::check(string $callback [, string $data [, string $priority]]):final public EvCheck
EvLoop::child(string $pid, string $trace, string $callback [, string $data [, string $priority]]):final public EvChild
EvLoop::__construct([int $flags [, mixed $data = NULL [, float $io_interval = 0.0 [, float $timeout_interval = 0.0]]]]):public
EvLoop::defaultLoop([int $flags = Ev::FLAG_AUTO [, mixed $data = NULL [, float $io_interval = 0. [, float $timeout_interval = 0.]]]]):public static EvLoop
EvLoop::embed(string $other [, string $callback [, string $data [, string $priority]]]):final public EvEmbed
EvLoop::fork(callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvFork
EvLoop::idle(callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvIdle
EvLoop::invokePending(void):public void
EvLoop::io(mixed $fd, int $events, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvIo
EvLoop::loopFork(void):public void
EvLoop::now(void):public float
EvLoop::nowUpdate(void):public void
EvLoop::periodic(float $offset, float $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvPeriodic
EvLoop::prepare(callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvPrepare
EvLoop::resume(void):public void
EvLoop::run([int $flags = 0]):public void
EvLoop::signal(int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvSignal
EvLoop::stat(string $path, float $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvStat
EvLoop::stop([int $how]):public void
EvLoop::suspend(void):public void
EvLoop::timer(float $after, float $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvTimer
EvLoop::verify(void):public void
EvPeriodic::again(void):public void
EvPeriodic::at(void):public float
EvPeriodic::__construct(float $offset, string $interval, callable $reschedule_cb, callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
EvPeriodic::createStopped(float $offset, float $interval, callable $reschedule_cb, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static EvPeriodic
EvPeriodic::set(float $offset, float $interval):public void
EvPrepare::__construct(string $callback [, string $data [, string $priority]]):public
EvPrepare::createStopped(callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static EvPrepare
EvSignal::__construct(int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
EvSignal::createStopped(int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static EvSignal
EvSignal::set(int $signum):public void
EvStat::attr(void):public array
EvStat::__construct(string $path, float $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
EvStat::createStopped(string $path, float $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static void
EvStat::prev(void):public void
EvStat::set(string $path, float $interval):public void
EvStat::stat(void):public bool
EvTimer::again(void):public void
EvTimer::__construct(float $after, float $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
EvTimer::createStopped(float $after, float $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static EvTimer
EvTimer::set(float $after, float $repeat):public void
EvWatcher::clear(void):public int
EvWatcher::__construct(void):abstract public
EvWatcher::feed(int $revents):public void
EvWatcher::getLoop(void):public EvLoop
EvWatcher::invoke(int $revents):public void
EvWatcher::keepalive([bool $value]):public bool
EvWatcher::setCallback(callable $callback):public void
EvWatcher::start(void):public void
EvWatcher::stop(void):public void
Exception::__clone(void):final private void
Exception::__construct([string $message = "" [, int $code = 0 [, Throwable $previous = NULL]]]):public
Exception::getCode(void):final public mixed
Exception::getFile(void):final public string
Exception::getLine(void):final public int
Exception::getMessage(void):final public string
Exception::getPrevious(void):final public Throwable
Exception::getTrace(void):final public array
Exception::getTraceAsString(void):final public string
Exception::__toString(void):public string
FANNConnection::__construct(int $from_neuron, int $to_neuron, float $weight):public
FANNConnection::getFromNeuron(void):public int
FANNConnection::getToNeuron(void):public int
FANNConnection::getWeight(void):public void
FANNConnection::setWeight(float $weight):public void
FilesystemIterator::__construct(string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS]):public
FilesystemIterator::current(void):public mixed
FilesystemIterator::getFlags(void):public int
FilesystemIterator::key(void):public string
FilesystemIterator::next(void):public void
FilesystemIterator::rewind(void):public void
FilesystemIterator::setFlags([int $flags]):public void
FilterIterator::accept(void):public abstract bool
FilterIterator::__construct(Iterator $iterator):public
FilterIterator::current(void):public mixed
FilterIterator::getInnerIterator(void):public Iterator
FilterIterator::key(void):public mixed
FilterIterator::next(void):public void
FilterIterator::rewind(void):public void
FilterIterator::valid(void):public bool
finfo::buffer(string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL]]):public string
finfo::__construct([int $options = FILEINFO_NONE [, string $magic_file = NULL]]):public
finfo::file(string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL]]):public string
finfo::set_flags(int $options):public bool
abs(mixed $number):number
acos(float $arg):float
acosh(float $arg):float
addcslashes(string $str, string $charlist):string
addslashes(string $str):string
apache_child_terminate(void):bool
apache_get_modules(void):array
apache_get_version(void):string
apache_getenv(string $variable [, bool $walk_to_top = FALSE]):string
apache_lookup_uri(string $filename):object
apache_note(string $note_name [, string $note_value = ""]):string
apache_request_headers(void):array
apache_reset_timeout(void):bool
apache_response_headers(void):array
apache_setenv(string $variable, string $value [, bool $walk_to_top = FALSE]):bool
apc_add(string $key, mixed $var [, int $ttl = 0]):bool
apc_bin_dump([array $files = NULL [, array $user_vars = NULL]]):string
apc_bin_dumpfile(array $files, array $user_vars, string $filename [, int $flags = 0 [, resource $context = NULL]]):int
apc_bin_load(string $data [, int $flags = 0]):bool
apc_bin_loadfile(string $filename [, resource $context = NULL [, int $flags = 0]]):bool
apc_cache_info([string $cache_type = "" [, bool $limited = FALSE]]):array
apc_cas(string $key, int $old, int $new):bool
apc_clear_cache([string $cache_type = ""]):bool
apc_compile_file(string $filename [, bool $atomic = TRUE]):mixed
apc_dec(string $key [, int $step = 1 [, bool &$success]]):int
apc_define_constants(string $key, array $constants [, bool $case_sensitive = TRUE]):bool
apc_delete_file(mixed $keys):mixed
apc_delete(string $key):mixed
apc_exists(mixed $keys):mixed
apc_fetch(mixed $key [, bool &$success]):mixed
apc_inc(string $key [, int $step = 1 [, bool &$success]]):int
apc_load_constants(string $key [, bool $case_sensitive = TRUE]):bool
apc_sma_info([bool $limited = FALSE]):array
apc_store(string $key, mixed $var [, int $ttl = 0]):bool
apcu_add(string $key, mixed $var [, int $ttl = 0]):bool
apcu_cache_info([bool $limited = FALSE]):array
apcu_cas(string $key, int $old, int $new):bool
apcu_clear_cache(void):bool
apcu_dec(string $key [, int $step = 1 [, bool &$success]]):int
apcu_delete(mixed $key):bool
apcu_entry(string $key, callable $generator [, int $ttl = 0]):mixed
apcu_exists(mixed $keys):mixed
apcu_fetch(mixed $key [, bool &$success]):mixed
apcu_inc(string $key [, int $step = 1 [, bool &$success]]):int
apcu_sma_info([bool $limited = FALSE]):array
apcu_store(string $key, mixed $var [, int $ttl = 0]):bool
apd_breakpoint(int $debug_level):bool
apd_callstack(void):array
apd_clunk(string $warning [, string $delimiter = "<BR />"]):void
apd_continue(int $debug_level):bool
apd_croak(string $warning [, string $delimiter = "<BR />"]):void
apd_dump_function_table(void):void
apd_dump_persistent_resources(void):array
apd_dump_regular_resources(void):array
apd_echo(string $output):bool
apd_get_active_symbols(void):array
apd_set_pprof_trace([string $dump_directory = ini_get("apd.dumpdir") [, string $fragment = "pprof"]]):string
apd_set_session_trace_socket(string $tcp_server, int $socket_type, int $port, int $debug_level):bool
apd_set_session_trace(int $debug_level [, string $dump_directory = ini_get("apd.dumpdir")]):void
apd_set_session(int $debug_level):void
array_change_key_case(array $array [, int $case = CASE_LOWER]):array
array_chunk(array $array, int $size [, bool $preserve_keys = FALSE]):array
array_column(array $input, mixed $column_key [, mixed $index_key = NULL]):array
array_combine(array $keys, array $values):array
array_count_values(array $array):array
array_diff_assoc(array $array1, array $array2 [, array $...]):array
array_diff_key(array $array1, array $array2 [, array $...]):array
array_diff_uassoc(array $array1, array $array2 [, array $...], callable $key_compare_func):array
array_diff_ukey(array $array1, array $array2 [, array $...], callable $key_compare_func):array
array_diff(array $array1, array $array2 [, array $...]):array
array_fill_keys(array $keys, mixed $value):array
array_fill(int $start_index, int $num, mixed $value):array
array_filter(array $array [, callable $callback [, int $flag = 0]]):array
array_flip(array $array):array
array_intersect_assoc(array $array1, array $array2 [, array $...]):array
array_intersect_key(array $array1, array $array2 [, array $...]):array
array_intersect_uassoc(array $array1, array $array2 [, array $...], callable $key_compare_func):array
array_intersect_ukey(array $array1, array $array2 [, array $...], callable $key_compare_func):array
array_intersect(array $array1, array $array2 [, array $...]):array
array_key_exists(mixed $key, array $array):bool
array_key_first(array $array):mixed
array_key_last(array $array):mixed
array_keys(array $array [, mixed $search_value [, bool $strict = FALSE]]):array
array_map(callable $callback, array $array1 [, array $...]):array
array_merge_recursive(array $array1 [, array $...]):array
array_merge(array $array1 [, array $...]):array
array_multisort(array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $...]]]):bool
array_pad(array $array, int $size, mixed $value):array
array_pop(array &$array):mixed
array_product(array $array):number
array_push(array &$array [, mixed $...]):int
array_rand(array $array [, int $num = 1]):mixed
array_reduce(array $array, callable $callback [, mixed $initial = NULL]):mixed
array_replace_recursive(array $array1 [, array $...]):array
array_replace(array $array1 [, array $...]):array
array_reverse(array $array [, bool $preserve_keys = FALSE]):array
array_search(mixed $needle, array $haystack [, bool $strict = FALSE]):mixed
array_shift(array &$array):mixed
array_slice(array $array, int $offset [, int $length = NULL [, bool $preserve_keys = FALSE]]):array
array_splice(array &$input, int $offset [, int $length = count($input) [, mixed $replacement = array()]]):array
array_sum(array $array):number
array_udiff_assoc(array $array1, array $array2 [, array $...], callable $value_compare_func):array
array_udiff_uassoc(array $array1, array $array2 [, array $...], callable $value_compare_func, callable $key_compare_func):array
array_udiff(array $array1, array $array2 [, array $...], callable $value_compare_func):array
array_uintersect_assoc(array $array1, array $array2 [, array $...], callable $value_compare_func):array
array_uintersect_uassoc(array $array1, array $array2 [, array $...], callable $value_compare_func, callable $key_compare_func):array
array_uintersect(array $array1, array $array2 [, array $...], callable $value_compare_func):array
array_unique(array $array [, int $sort_flags = SORT_STRING]):array
array_unshift(array &$array [, mixed $...]):int
array_values(array $array):array
array_walk_recursive(array &$array, callable $callback [, mixed $userdata = NULL]):bool
array_walk(array &$array, callable $callback [, mixed $userdata = NULL]):bool
arrayarray ([mixed $...])
arsort(array &$array [, int $sort_flags = SORT_REGULAR]):bool
asin(float $arg):float
asinh(float $arg):float
asort(array &$array [, int $sort_flags = SORT_REGULAR]):bool
assert_options(int $what [, mixed $value]):mixed
assert(mixed $assertion [, string $description]):bool
atan(float $arg):float
atan2(float $y, float $x):float
atanh(float $arg):float
__autoload(string $class):void
base_convert(string $number, int $frombase, int $tobase):string
base64_decode(string $data [, bool $strict = FALSE]):string
base64_encode(string $data):string
basename(string $path [, string $suffix]):string
bbcode_add_element(resource $bbcode_container, string $tag_name, array $tag_rules):bool
bbcode_add_smiley(resource $bbcode_container, string $smiley, string $replace_by):bool
bbcode_create([array $bbcode_initial_tags = NULL]):resource
bbcode_destroy(resource $bbcode_container):bool
bbcode_parse(resource $bbcode_container, string $to_parse):string
bbcode_set_arg_parser(resource $bbcode_container, resource $bbcode_arg_parser):bool
bbcode_set_flags(resource $bbcode_container, int $flags [, int $mode = BBCODE_SET_FLAGS_SET]):bool
bcadd(string $left_operand, string $right_operand [, int $scale = 0]):string
bccomp(string $left_operand, string $right_operand [, int $scale = 0]):int
bcdiv(string $dividend, string $divisor [, int $scale = 0]):string
bcmod(string $dividend, string $divisor [, int $scale]):string
bcmul(string $left_operand, string $right_operand [, int $scale = 0]):string
bcompiler_load_exe(string $filename):bool
bcompiler_load(string $filename):bool
bcompiler_parse_class(string $class, string $callback):bool
bcompiler_read(resource $filehandle):bool
bcompiler_write_class(resource $filehandle, string $className [, string $extends]):bool
bcompiler_write_constant(resource $filehandle, string $constantName):bool
bcompiler_write_exe_footer(resource $filehandle, int $startpos):bool
bcompiler_write_file(resource $filehandle, string $filename):bool
bcompiler_write_footer(resource $filehandle):bool
bcompiler_write_function(resource $filehandle, string $functionName):bool
bcompiler_write_functions_from_file(resource $filehandle, string $fileName):bool
bcompiler_write_header(resource $filehandle [, string $write_ver]):bool
bcompiler_write_included_filename(resource $filehandle, string $filename):bool
bcpow(string $base, string $exponent [, int $scale = 0]):string
bcpowmod(string $base, string $exponent, string $modulus [, int $scale = 0]):string
bcscale([int $scale]):int
bcsqrt(string $operand [, int $scale = 0]):string
bcsub(string $left_operand, string $right_operand [, int $scale = 0]):string
bin2hex(string $str):string
bind_textdomain_codeset(string $domain, string $codeset):string
bindec(string $binary_string):number
bindtextdomain(string $domain, string $directory):string
blenc_encrypt(string $plaintext, string $encodedfile [, string $encryption_key]):string
boolval(mixed $var):bool
bson_decode(string $bson):array
bson_encode(mixed $anything):string
bzclose(resource $bz):int
bzcompress(string $source [, int $blocksize = 4 [, int $workfactor = 0]]):mixed
bzdecompress(string $source [, int $small = 0]):mixed
bzerrno(resource $bz):int
bzerror(resource $bz):array
bzerrstr(resource $bz):string
bzflush(resource $bz):bool
bzopen(mixed $file, string $mode):resource
bzread(resource $bz [, int $length = 1024]):string
bzwrite(resource $bz, string $data [, int $length]):int
cairo_create(CairoSurface $surface):CairoContext
cairo_font_options_create(void):CairoFontOptions
cairo_font_options_equal(CairoFontOptions $options, CairoFontOptions $other):bool
cairo_font_options_get_antialias(CairoFontOptions $options):int
cairo_font_options_get_hint_metrics(CairoFontOptions $options):int
cairo_font_options_get_hint_style(CairoFontOptions $options):int
cairo_font_options_get_subpixel_order(CairoFontOptions $options):int
cairo_font_options_hash(CairoFontOptions $options):int
cairo_font_options_merge(CairoFontOptions $options, CairoFontOptions $other):void
cairo_font_options_set_antialias(CairoFontOptions $options, int $antialias):void
cairo_font_options_set_hint_metrics(CairoFontOptions $options, int $hint_metrics):void
cairo_font_options_set_hint_style(CairoFontOptions $options, int $hint_style):void
cairo_font_options_set_subpixel_order(CairoFontOptions $options, int $subpixel_order):void
cairo_font_options_status(CairoFontOptions $options):int
cairo_format_stride_for_width(int $format, int $width):int
cairo_image_surface_create_for_data(string $data, int $format, int $width, int $height [, int $stride = -1]):CairoImageSurface
cairo_image_surface_create_from_png(mixed $file):CairoImageSurface
cairo_image_surface_create(int $format, int $width, int $height):CairoImageSurface
cairo_image_surface_get_data(CairoImageSurface $surface):string
cairo_image_surface_get_format(CairoImageSurface $surface):int
cairo_image_surface_get_height(CairoImageSurface $surface):int
cairo_image_surface_get_stride(CairoImageSurface $surface):int
cairo_image_surface_get_width(CairoImageSurface $surface):int
cairo_matrix_create_scale(float $sx, float $sy):void
cairo_matrix_create_translate(float $tx, float $ty):void
cairo_matrix_invert(CairoMatrix $matrix):void
cairo_matrix_multiply(CairoMatrix $matrix1, CairoMatrix $matrix2):CairoMatrix
cairo_matrix_transform_distance(CairoMatrix $matrix, float $dx, float $dy):array
cairo_matrix_transform_point(CairoMatrix $matrix, float $dx, float $dy):array
cairo_matrix_translate(CairoMatrix $matrix, float $tx, float $ty):void
cairo_pattern_add_color_stop_rgb(CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue):void
cairo_pattern_add_color_stop_rgba(CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue, float $alpha):void
cairo_pattern_create_for_surface(CairoSurface $surface):CairoPattern
cairo_pattern_create_linear(float $x0, float $y0, float $x1, float $y1):CairoPattern
cairo_pattern_create_radial(float $x0, float $y0, float $r0, float $x1, float $y1, float $r1):CairoPattern
cairo_pattern_create_rgb(float $red, float $green, float $blue):CairoPattern
cairo_pattern_create_rgba(float $red, float $green, float $blue, float $alpha):CairoPattern
cairo_pattern_get_color_stop_count(CairoGradientPattern $pattern):int
cairo_pattern_get_color_stop_rgba(CairoGradientPattern $pattern, int $index):array
cairo_pattern_get_extend(string $pattern):int
cairo_pattern_get_filter(CairoSurfacePattern $pattern):int
cairo_pattern_get_linear_points(CairoLinearGradient $pattern):array
cairo_pattern_get_matrix(CairoPattern $pattern):CairoMatrix
cairo_pattern_get_radial_circles(CairoRadialGradient $pattern):array
cairo_pattern_get_rgba(CairoSolidPattern $pattern):array
cairo_pattern_get_surface(CairoSurfacePattern $pattern):CairoSurface
cairo_pattern_get_type(CairoPattern $pattern):int
cairo_pattern_set_extend(string $pattern, string $extend):void
cairo_pattern_set_filter(CairoSurfacePattern $pattern, int $filter):void
cairo_pattern_set_matrix(CairoPattern $pattern, CairoMatrix $matrix):void
cairo_pattern_status(CairoPattern $pattern):int
cairo_pdf_surface_create(string $file, float $width, float $height):CairoPdfSurface
cairo_pdf_surface_set_size(CairoPdfSurface $surface, float $width, float $height):void
cairo_ps_get_levels(void):array
cairo_ps_level_to_string(int $level):string
cairo_ps_surface_create(string $file, float $width, float $height):CairoPsSurface
cairo_ps_surface_dsc_begin_page_setup(CairoPsSurface $surface):void
cairo_ps_surface_dsc_begin_setup(CairoPsSurface $surface):void
cairo_ps_surface_dsc_comment(CairoPsSurface $surface, string $comment):void
cairo_ps_surface_get_eps(CairoPsSurface $surface):bool
cairo_ps_surface_restrict_to_level(CairoPsSurface $surface, int $level):void
cairo_ps_surface_set_eps(CairoPsSurface $surface, bool $level):void
cairo_ps_surface_set_size(CairoPsSurface $surface, float $width, float $height):void
cairo_scaled_font_create(CairoFontFace $fontface, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $fontoptions):CairoScaledFont
cairo_scaled_font_extents(CairoScaledFont $scaledfont):array
cairo_scaled_font_get_ctm(CairoScaledFont $scaledfont):CairoMatrix
cairo_scaled_font_get_font_face(CairoScaledFont $scaledfont):CairoFontFace
cairo_scaled_font_get_font_matrix(CairoScaledFont $scaledfont):CairoFontOptions
cairo_scaled_font_get_font_options(CairoScaledFont $scaledfont):CairoFontOptions
cairo_scaled_font_get_scale_matrix(CairoScaledFont $scaledfont):CairoMatrix
cairo_scaled_font_get_type(CairoScaledFont $scaledfont):int
cairo_scaled_font_glyph_extents(CairoScaledFont $scaledfont, array $glyphs):array
cairo_scaled_font_status(CairoScaledFont $scaledfont):int
cairo_scaled_font_text_extents(CairoScaledFont $scaledfont, string $text):array
cairo_surface_copy_page(CairoSurface $surface):void
cairo_surface_create_similar(CairoSurface $surface, int $content, float $width, float $height):CairoSurface
cairo_surface_finish(CairoSurface $surface):void
cairo_surface_flush(CairoSurface $surface):void
cairo_surface_get_content(CairoSurface $surface):int
cairo_surface_get_device_offset(CairoSurface $surface):array
cairo_surface_get_font_options(CairoSurface $surface):CairoFontOptions
cairo_surface_get_type(CairoSurface $surface):int
cairo_surface_mark_dirty_rectangle(CairoSurface $surface, float $x, float $y, float $width, float $height):void
cairo_surface_mark_dirty(CairoSurface $surface):void
cairo_surface_set_device_offset(CairoSurface $surface, float $x, float $y):void
cairo_surface_set_fallback_resolution(CairoSurface $surface, float $x, float $y):void
cairo_surface_show_page(CairoSurface $surface):void
cairo_surface_status(CairoSurface $surface):int
cairo_surface_write_to_png(CairoSurface $surface, resource $stream):void
cairo_svg_surface_create(string $file, float $width, float $height):CairoSvgSurface
cairo_svg_surface_restrict_to_version(CairoSvgSurface $surface, int $version):void
cairo_svg_version_to_string(int $version):string
cal_days_in_month(int $calendar, int $month, int $year):int
cal_from_jd(int $jd, int $calendar):array
cal_info([int $calendar = -1]):array
cal_to_jd(int $calendar, int $month, int $day, int $year):int
call_user_func_array(callable $callback, array $param_arr):mixed
call_user_func(callable $callback [, mixed $parameter [, mixed $...]]):mixed
call_user_method_array(string $method_name, object &$obj, array $params):mixed
call_user_method(string $method_name, object &$obj [, mixed $parameter [, mixed $...]]):mixed
ceil(float $value):float
chdb_create(string $pathname, array $data):bool
chdir(string $directory):bool
checkdate(int $month, int $day, int $year):bool
checkdnsrr(string $host [, string $type = "MX"]):bool
chgrp(string $filename, mixed $group):bool
chmod(string $filename, int $mode):bool
chop() is different than the Perl chop() function, which removes the last character in the string.
chown(string $filename, mixed $user):bool
chr(int $bytevalue):string
chroot(string $directory):bool
chunk_split(string $body [, int $chunklen = 76 [, string $end = "\r\n"]]):string
class_alias(string $original, string $alias [, bool $autoload = TRUE]):bool
class_exists(string $class_name [, bool $autoload = TRUE]):bool
class_implements(mixed $class [, bool $autoload = TRUE]):array
class_parents(mixed $class [, bool $autoload = TRUE]):array
class_uses(mixed $class [, bool $autoload = TRUE]):array
classkit_import(string $filename):array
classkit_method_add(string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC]):bool
classkit_method_copy(string $dClass, string $dMethod, string $sClass [, string $sMethod]):bool
classkit_method_redefine(string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC]):bool
classkit_method_remove(string $classname, string $methodname):bool
classkit_method_rename(string $classname, string $methodname, string $newname):bool
clearstatcache([bool $clear_realpath_cache = FALSE [, string $filename]]):void
cli_get_process_title(void):string
cli_set_process_title(string $title):bool
closedir([resource $dir_handle]):void
closelog(void):bool
com_create_guid(void):string
com_event_sink(variant $comobject, object $sinkobject [, mixed $sinkinterface]):bool
com_get_active_object(string $progid [, int $code_page]):variant
com_load_typelib(string $typelib_name [, bool $case_insensitive = TRUE]):bool
com_message_pump([int $timeoutms = 0]):bool
com_print_typeinfo(object $comobject [, string $dispinterface [, bool $wantsink = FALSE]]):bool
CommonMark\Parse(string $content [, int $options]):CommonMark\Node
CommonMark\Render\HTML(CommonMark\Node $node [, int $options]):string
CommonMark\Render\Latex(CommonMark\Node $node [, int $options [, int $width]]):string
CommonMark\Render\Man(CommonMark\Node $node [, int $options [, int $width]]):string
CommonMark\Render\XML(CommonMark\Node $node [, int $options]):string
CommonMark\Render(CommonMark\Node $node [, int $options [, int $width]]):string
compact(mixed $varname1 [, mixed $...]):array
connection_aborted(void):int
connection_status(void):int
constant(string $name):mixed
convert_cyr_string(string $str, string $from, string $to):string
convert_uudecode(string $data):string
convert_uuencode(string $data):string
copy(string $source, string $dest [, resource $context]):bool
cos(float $arg):float
cosh(float $arg):float
count_chars(string $string [, int $mode = 0]):mixed
count(mixed $array_or_countable [, int $mode = COUNT_NORMAL]):int
crack_check(resource $dictionary, string $password):bool
crack_closedict([resource $dictionary]):bool
crack_getlastmessage(void):string
crack_opendict(string $dictionary):resource
crc32(string $str):int
create_function(string $args, string $code):string
crypt(string $str [, string $salt]):string
ctype_alnum(string $text):bool
ctype_alpha(string $text):bool
ctype_cntrl(string $text):bool
ctype_digit(string $text):bool
ctype_graph(string $text):bool
ctype_lower(string $text):bool
ctype_print(string $text):bool
ctype_punct(string $text):bool
ctype_space(string $text):bool
ctype_upper(string $text):bool
ctype_xdigit(string $text):bool
cubrid_affected_rows([resource $conn_identifier]):int
cubrid_bind(resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type]):bool
cubrid_client_encoding([resource $conn_identifier]):string
cubrid_close_prepare(resource $req_identifier):bool
cubrid_close_request(resource $req_identifier):bool
cubrid_close([resource $conn_identifier]):bool
cubrid_col_get(resource $conn_identifier, string $oid, string $attr_name):array
cubrid_col_size(resource $conn_identifier, string $oid, string $attr_name):int
cubrid_column_names(resource $req_identifier):array
cubrid_column_types(resource $req_identifier):array
cubrid_commit(resource $conn_identifier):bool
cubrid_connect_with_url(string $conn_url [, string $userid [, string $passwd [, bool $new_link = FALSE]]]):resource
cubrid_connect(string $host, int $port, string $dbname [, string $userid [, string $passwd [, bool $new_link = FALSE]]]):resource
cubrid_current_oid(resource $req_identifier):string
cubrid_data_seek(resource $result, int $row_number):bool
cubrid_db_name(array $result, int $index):string
cubrid_disconnect([resource $conn_identifier]):bool
cubrid_drop(resource $conn_identifier, string $oid):bool
cubrid_errno([resource $conn_identifier]):int
cubrid_error_code_facility(void):int
cubrid_error_code(void):int
cubrid_error_msg(void):string
cubrid_error([resource $connection]):string
cubrid_execute(resource $conn_identifier, string $sql [, int $option = 0]):resource
cubrid_fetch_array(resource $result [, int $type = CUBRID_BOTH]):array
cubrid_fetch_assoc(resource $result [, int $type]):array
cubrid_fetch_field(resource $result [, int $field_offset = 0]):object
cubrid_fetch_lengths(resource $result):array
cubrid_fetch_object(resource $result [, string $class_name [, array $params [, int $type]]]):object
cubrid_fetch_row(resource $result [, int $type]):array
cubrid_fetch(resource $result [, int $type = CUBRID_BOTH]):mixed
cubrid_field_flags(resource $result, int $field_offset):string
cubrid_field_len(resource $result, int $field_offset):int
cubrid_field_name(resource $result, int $field_offset):string
cubrid_field_seek(resource $result [, int $field_offset = 0]):bool
cubrid_field_table(resource $result, int $field_offset):string
cubrid_field_type(resource $result, int $field_offset):string
cubrid_free_result(resource $req_identifier):bool
cubrid_get_autocommit(resource $conn_identifier):bool
cubrid_get_charset(resource $conn_identifier):string
cubrid_get_class_name(resource $conn_identifier, string $oid):string
cubrid_get_client_info(void):string
cubrid_get_db_parameter(resource $conn_identifier):array
cubrid_get_query_timeout(resource $req_identifier):int
cubrid_get_server_info(resource $conn_identifier):string
cubrid_get(resource $conn_identifier, string $oid [, mixed $attr]):mixed
cubrid_insert_id([resource $conn_identifier]):string
cubrid_is_instance(resource $conn_identifier, string $oid):int
cubrid_list_dbs([resource $conn_identifier]):array
cubrid_load_from_glo(resource $conn_identifier, string $oid, string $file_name):int
cubrid_lob_close(array $lob_identifier_array):bool
cubrid_lob_export(resource $conn_identifier, resource $lob_identifier, string $path_name):bool
cubrid_lob_get(resource $conn_identifier, string $sql):array
cubrid_lob_send(resource $conn_identifier, resource $lob_identifier):bool
cubrid_lob_size(resource $lob_identifier):string
cubrid_lob2_bind(resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type]):bool
cubrid_lob2_close(resource $lob_identifier):bool
cubrid_lob2_export(resource $lob_identifier, string $file_name):bool
cubrid_lob2_import(resource $lob_identifier, string $file_name):bool
cubrid_lob2_new([resource $conn_identifier [, string $type = "BLOB"]]):resource
cubrid_lob2_read(resource $lob_identifier, int $len):string
cubrid_lob2_seek(resource $lob_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT]):bool
cubrid_lob2_seek64(resource $lob_identifier, string $offset [, int $origin = CUBRID_CURSOR_CURRENT]):bool
cubrid_lob2_size(resource $lob_identifier):int
cubrid_lob2_size64(resource $lob_identifier):string
cubrid_lob2_tell(resource $lob_identifier):int
cubrid_lob2_tell64(resource $lob_identifier):string
cubrid_lob2_write(resource $lob_identifier, string $buf):bool
cubrid_lock_read(resource $conn_identifier, string $oid):bool
cubrid_lock_write(resource $conn_identifier, string $oid):bool
cubrid_move_cursor(resource $req_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT]):bool
cubrid_new_glo(resource $conn_identifier, string $class_name, string $file_name):string
cubrid_next_result(resource $result):bool
cubrid_num_cols(resource $result):int
cubrid_num_fields(resource $result):int
cubrid_num_rows(resource $result):int
cubrid_pconnect_with_url(string $conn_url [, string $userid [, string $passwd]]):resource
cubrid_pconnect(string $host, int $port, string $dbname [, string $userid [, string $passwd]]):resource
cubrid_ping([resource $conn_identifier]):bool
cubrid_prepare(resource $conn_identifier, string $prepare_stmt [, int $option = 0]):resource
cubrid_put(resource $conn_identifier, string $oid [, string $attr], mixed $value):bool
cubrid_query(string $query [, resource $conn_identifier]):resource
cubrid_real_escape_string(string $unescaped_string [, resource $conn_identifier]):string
cubrid_result(resource $result, int $row [, mixed $field = 0]):string
cubrid_rollback(resource $conn_identifier):bool
cubrid_save_to_glo(resource $conn_identifier, string $oid, string $file_name):int
cubrid_schema(resource $conn_identifier, int $schema_type [, string $class_name [, string $attr_name]]):array
cubrid_send_glo(resource $conn_identifier, string $oid):int
cubrid_seq_drop(resource $conn_identifier, string $oid, string $attr_name, int $index):bool
cubrid_seq_insert(resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element):bool
cubrid_seq_put(resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element):bool
cubrid_set_add(resource $conn_identifier, string $oid, string $attr_name, string $set_element):bool
cubrid_set_autocommit(resource $conn_identifier, bool $mode):bool
cubrid_set_db_parameter(resource $conn_identifier, int $param_type, int $param_value):bool
cubrid_set_drop(resource $conn_identifier, string $oid, string $attr_name, string $set_element):bool
cubrid_set_query_timeout(resource $req_identifier, int $timeout):bool
cubrid_unbuffered_query(string $query [, resource $conn_identifier]):resource
cubrid_version(void):string
curl_close(resource $ch):void
curl_copy_handle(resource $ch):resource
curl_errno(resource $ch):int
curl_error(resource $ch):string
curl_escape(resource $ch, string $str):string
curl_exec(resource $ch):mixed
curl_getinfo(resource $ch [, int $opt]):mixed
curl_init([string $url = NULL]):resource
curl_multi_add_handle(resource $mh, resource $ch):int
curl_multi_close(resource $mh):void
curl_multi_errno(resource $mh):int
curl_multi_exec(resource $mh, int &$still_running):int
curl_multi_getcontent(resource $ch):string
curl_multi_info_read(resource $mh [, int &$msgs_in_queue = NULL]):array
curl_multi_init(void):resource
curl_multi_remove_handle(resource $mh, resource $ch):int
curl_multi_select(resource $mh [, float $timeout = 1.0]):int
curl_multi_setopt(resource $mh, int $option, mixed $value):bool
curl_multi_strerror(int $errornum):string
curl_pause(resource $ch, int $bitmask):int
curl_reset(resource $ch):void
curl_setopt_array(resource $ch, array $options):bool
curl_setopt(resource $ch, int $option, mixed $value):bool
curl_share_close(resource $sh):void
curl_share_errno(resource $sh):int
curl_share_init(void):resource
curl_share_setopt(resource $sh, int $option, string $value):bool
curl_share_strerror(int $errornum):string
curl_strerror(int $errornum):string
curl_unescape(resource $ch, string $str):string
curl_version([int $age = CURLVERSION_NOW]):array
current(array $array):mixed
cyrus_authenticate(resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password]]]]]]]):void
cyrus_bind(resource $connection, array $callbacks):bool
cyrus_close(resource $connection):bool
cyrus_connect([string $host [, string $port [, int $flags]]]):resource
cyrus_query(resource $connection, string $query):array
cyrus_unbind(resource $connection, string $trigger_name):bool
date_default_timezone_get(void):string
date_default_timezone_set(string $timezone_identifier):bool
date_diff(DateTimeInterface $datetime1, DateTimeInterface $datetime2 [, bool $absolute = FALSE]):DateInterval
date_format(string $format):string
date_interval_create_from_date_string(string $time):DateInterval
date_interval_format(string $format):string
date_offset_get(DateTimeInterface $object):int
date_parse_from_format(string $format, string $date):array
date_parse(string $date):array
date_sun_info(int $time, float $latitude, float $longitude):array
date_sunrise(int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunrise_zenith") [, float $gmt_offset = 0]]]]]):mixed
date_sunset(int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunset_zenith") [, float $gmt_offset = 0]]]]]):mixed
date_timestamp_get(DateTimeInterface $object):int
date_timezone_get(DateTimeInterface $object):DateTimeZone
date(string $format [, int $timestamp = time()]):string
db2_autocommit(resource $connection [, bool $value]):mixed
db2_bind_param(resource $stmt, int $parameter_number, string $variable_name [, int $parameter_type [, int $data_type = 0 [, int $precision = -1 [, int $scale = 0]]]]):bool
db2_client_info(resource $connection):object
db2_close(resource $connection):bool
db2_column_privileges(resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name]]]]):resource
db2_columns(resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name]]]]):resource
db2_commit(resource $connection):bool
db2_conn_error([resource $connection]):string
db2_conn_errormsg([resource $connection]):string
db2_connect(string $database, string $username, string $password [, array $options]):resource
db2_cursor_type(resource $stmt):int
db2_escape_string(string $string_literal):string
db2_exec(resource $connection, string $statement [, array $options]):resource
db2_execute(resource $stmt [, array $parameters]):bool
db2_fetch_array(resource $stmt [, int $row_number = -1]):array
db2_fetch_assoc(resource $stmt [, int $row_number = -1]):array
db2_fetch_both(resource $stmt [, int $row_number = -1]):array
db2_fetch_object(resource $stmt [, int $row_number = -1]):object
db2_fetch_row(resource $stmt [, int $row_number]):bool
db2_field_display_size(resource $stmt, mixed $column):int
db2_field_name(resource $stmt, mixed $column):string
db2_field_num(resource $stmt, mixed $column):int
db2_field_precision(resource $stmt, mixed $column):int
db2_field_scale(resource $stmt, mixed $column):int
db2_field_type(resource $stmt, mixed $column):string
db2_field_width(resource $stmt, mixed $column):int
db2_foreign_keys(resource $connection, string $qualifier, string $schema, string $table-name):resource
db2_free_result(resource $stmt):bool
db2_free_stmt(resource $stmt):bool
db2_get_option(resource $resource, string $option):string
db2_last_insert_id(resource $resource):string
db2_lob_read(resource $stmt, int $colnum, int $length):string
db2_next_result(resource $stmt):resource
db2_num_fields(resource $stmt):int
db2_num_rows(resource $stmt):int
db2_pclose(resource $resource):bool
db2_pconnect(string $database, string $username, string $password [, array $options]):resource
db2_prepare(resource $connection, string $statement [, array $options]):resource
db2_primary_keys(resource $connection, string $qualifier, string $schema, string $table-name):resource
db2_procedure_columns(resource $connection, string $qualifier, string $schema, string $procedure, string $parameter):resource
db2_procedures(resource $connection, string $qualifier, string $schema, string $procedure):resource
db2_result(resource $stmt, mixed $column):mixed
db2_rollback(resource $connection):bool
db2_server_info(resource $connection):object
db2_set_option(resource $resource, array $options, int $type):bool
db2_special_columns(resource $connection, string $qualifier, string $schema, string $table_name, int $scope):resource
db2_statistics(resource $connection, string $qualifier, string $schema, string $table-name, bool $unique):resource
db2_stmt_error([resource $stmt]):string
db2_stmt_errormsg([resource $stmt]):string
db2_table_privileges(resource $connection [, string $qualifier [, string $schema [, string $table_name]]]):resource
db2_tables(resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type]]]]):resource
dba_close(resource $handle):void
dba_delete(string $key, resource $handle):bool
dba_exists(string $key, resource $handle):bool
dba_fetch(string $key, resource $handle):string
dba_firstkey(resource $handle):string
dba_handlers([bool $full_info = FALSE]):array
dba_insert(string $key, string $value, resource $handle):bool
dba_key_split(mixed $key):mixed
dba_list(void):array
dba_nextkey(resource $handle):string
dba_open(string $path, string $mode [, string $handler [, mixed $...]]):resource
dba_optimize(resource $handle):bool
dba_popen(string $path, string $mode [, string $handler [, mixed $...]]):resource
dba_replace(string $key, string $value, resource $handle):bool
dba_sync(resource $handle):bool
dbase_add_record(resource $dbase_identifier, array $record):bool
dbase_close(resource $dbase_identifier):bool
dbase_create(string $filename, array $fields [, int $type = DBASE_TYPE_DBASE]):resource
dbase_delete_record(resource $dbase_identifier, int $record_number):bool
dbase_get_header_info(resource $dbase_identifier):array
dbase_get_record_with_names(resource $dbase_identifier, int $record_number):array
dbase_get_record(resource $dbase_identifier, int $record_number):array
dbase_numfields(resource $dbase_identifier):int
dbase_numrecords(resource $dbase_identifier):int
dbase_open(string $filename, int $mode):resource
dbase_pack(resource $dbase_identifier):bool
dbase_replace_record(resource $dbase_identifier, array $record, int $record_number):bool
dbplus_add(resource $relation, array $tuple):int
dbplus_aql(string $query [, string $server [, string $dbpath]]):resource
dbplus_chdir([string $newdir]):string
dbplus_close(resource $relation):mixed
dbplus_curr(resource $relation, array &$tuple):int
dbplus_errcode([int $errno]):string
dbplus_errno(void):int
dbplus_find(resource $relation, array $constraints, mixed $tuple):int
dbplus_first(resource $relation, array &$tuple):int
dbplus_flush(resource $relation):int
dbplus_freealllocks(void):int
dbplus_freelock(resource $relation, string $tuple):int
dbplus_freerlocks(resource $relation):int
dbplus_getlock(resource $relation, string $tuple):int
dbplus_getunique(resource $relation, int $uniqueid):int
dbplus_info(resource $relation, string $key, array &$result):int
dbplus_last(resource $relation, array &$tuple):int
dbplus_lockrel(resource $relation):int
dbplus_next(resource $relation, array &$tuple):int
dbplus_open(string $name):resource
dbplus_prev(resource $relation, array &$tuple):int
dbplus_rchperm(resource $relation, int $mask, string $user, string $group):int
dbplus_rcreate(string $name, mixed $domlist [, bool $overwrite]):resource
dbplus_rcrtexact(string $name, resource $relation [, bool $overwrite]):mixed
dbplus_rcrtlike(string $name, resource $relation [, int $overwrite]):mixed
dbplus_resolve(string $relation_name):array
dbplus_restorepos(resource $relation, array $tuple):int
dbplus_rkeys(resource $relation, mixed $domlist):mixed
dbplus_ropen(string $name):resource
dbplus_rquery(string $query [, string $dbpath]):resource
dbplus_rrename(resource $relation, string $name):int
dbplus_rsecindex(resource $relation, mixed $domlist, int $type):mixed
dbplus_runlink(resource $relation):int
dbplus_rzap(resource $relation):int
dbplus_savepos(resource $relation):int
dbplus_setindex(resource $relation, string $idx_name):int
dbplus_setindexbynumber(resource $relation, int $idx_number):int
dbplus_sql(string $query [, string $server [, string $dbpath]]):resource
dbplus_tcl(int $sid, string $script):string
dbplus_tremove(resource $relation, array $tuple [, array &$current]):int
dbplus_undo(resource $relation):int
dbplus_undoprepare(resource $relation):int
dbplus_unlockrel(resource $relation):int
dbplus_unselect(resource $relation):int
dbplus_update(resource $relation, array $old, array $new):int
dbplus_xlockrel(resource $relation):int
dbplus_xunlockrel(resource $relation):int
dbx_close(object $link_identifier):int
dbx_compare(array $row_a, array $row_b, string $column_key [, int $flags = DBX_CMP_ASC | DBX_CMP_NATIVE]):int
dbx_connect(mixed $module, string $host, string $database, string $username, string $password [, int $persistent]):object
dbx_error(object $link_identifier):string
dbx_escape_string(object $link_identifier, string $text):string
dbx_fetch_row(object $result_identifier):mixed
dbx_query(object $link_identifier, string $sql_statement [, int $flags]):mixed
dbx_sort(object $result, string $user_compare_function):bool
dcgettext(string $domain, string $message, int $category):string
dcngettext(string $domain, string $msgid1, string $msgid2, int $n, int $category):string
debug_backtrace([int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0]]):array
debug_print_backtrace([int $options = 0 [, int $limit = 0]]):void
debug_zval_dump(mixed $variable [, mixed $...]):void
decbin(int $number):string
dechex(int $number):string
decoct(int $number):string
define_syslog_variables(void):void
define(string $name, mixed $value [, bool $case_insensitive = FALSE]):bool
defined(string $name):bool
deflate_add(resource $context, string $data [, int $flush_mode = ZLIB_SYNC_FLUSH]):string
deflate_init(int $encoding [, array $options = array()]):resource
deg2rad(float $number):float
delete
dgettext(string $domain, string $message):string
dio_close(resource $fd):void
dio_fcntl(resource $fd, int $cmd [, mixed $args]):mixed
dio_open(string $filename, int $flags [, int $mode = 0]):resource
dio_read(resource $fd [, int $len = 1024]):string
dio_seek(resource $fd, int $pos [, int $whence = SEEK_SET]):int
dio_stat(resource $fd):array
dio_tcsetattr(resource $fd, array $options):bool
dio_truncate(resource $fd, int $offset):bool
dio_write(resource $fd, string $data [, int $len = 0]):int
dir(string $directory [, resource $context]):Directory
dirname(string $path [, int $levels = 1]):string
disk_free_space(string $directory):float
disk_total_space(string $directory):float
diskfreespace(string $directory):float
dl(string $library):bool
dngettext(string $domain, string $msgid1, string $msgid2, int $n):string
dns_check_record(string $host [, string $type = "MX"]):bool
dns_get_mx(void):int
dns_get_record(string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl [, bool $raw = FALSE]]]]):array
dom_import_simplexml(SimpleXMLElement $node):DOMElement
doubleval(mixed $var):float
each(array &$array):array
easter_date([int $year = date("Y")]):int
easter_days([int $year = date("Y") [, int $method = CAL_EASTER_DEFAULT]]):int
echo(string $arg1 [, string $...]):void
eio_busy(int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_cancel(resource $req):void
eio_chmod(string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_chown(string $path, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]):resource
eio_close(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_custom(callable $execute, int $pri, callable $callback [, mixed $data = NULL]):resource
eio_dup2(mixed $fd, mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_event_loop(void):bool
eio_fallocate(mixed $fd, int $mode, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_fchmod(mixed $fd, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_fchown(mixed $fd, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]):resource
eio_fdatasync(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_fstat(mixed $fd, int $pri, callable $callback [, mixed $data]):resource
eio_fstatvfs(mixed $fd, int $pri, callable $callback [, mixed $data]):resource
eio_fsync(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_ftruncate(mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]):resource
eio_futime(mixed $fd, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_get_event_stream(void):mixed
eio_get_last_error(resource $req):string
eio_grp_add(resource $grp, resource $req):void
eio_grp_cancel(resource $grp):void
eio_grp_limit(resource $grp, int $limit):void
eio_grp(callable $callback [, string $data = NULL]):resource
eio_init(void):void
eio_link(string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_lstat(string $path, int $pri, callable $callback [, mixed $data = NULL]):resource
eio_mkdir(string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_mknod(string $path, int $mode, int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_nop([int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_npending(void):int
eio_nready(void):int
eio_nreqs(void):int
eio_nthreads(void):int
eio_open(string $path, int $flags, int $mode, int $pri, callable $callback [, mixed $data = NULL]):resource
eio_poll(void):int
eio_read(mixed $fd, int $length, int $offset, int $pri, callable $callback [, mixed $data = NULL]):resource
eio_readahead(mixed $fd, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_readdir(string $path, int $flags, int $pri, callable $callback [, string $data = NULL]):resource
eio_readlink(string $path, int $pri, callable $callback [, string $data = NULL]):resource
eio_realpath(string $path, int $pri, callable $callback [, string $data = NULL]):resource
eio_rename(string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_rmdir(string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_seek(mixed $fd, int $offset, int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_sendfile(mixed $out_fd, mixed $in_fd, int $offset, int $length [, int $pri [, callable $callback [, string $data]]]):resource
eio_set_max_idle(int $nthreads):void
eio_set_max_parallel(int $nthreads):void
eio_set_max_poll_reqs(int $nreqs):void
eio_set_max_poll_time(float $nseconds):void
eio_set_min_parallel(string $nthreads):void
eio_stat(string $path, int $pri, callable $callback [, mixed $data = NULL]):resource
eio_statvfs(string $path, int $pri, callable $callback [, mixed $data]):resource
eio_symlink(string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_sync_file_range(mixed $fd, int $offset, int $nbytes, int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_sync([int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_syncfs(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_truncate(string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]):resource
eio_unlink(string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_utime(string $path, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
eio_write(mixed $fd, string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]]):resource
empty(mixed $var):bool
enchant_broker_describe(resource $broker):array
enchant_broker_dict_exists(resource $broker, string $tag):bool
enchant_broker_free_dict(resource $dict):bool
enchant_broker_free(resource $broker):bool
enchant_broker_get_dict_path(resource $broker, int $dict_type):bool
enchant_broker_get_error(resource $broker):string
enchant_broker_init(void):resource
enchant_broker_list_dicts(resource $broker):mixed
enchant_broker_request_dict(resource $broker, string $tag):resource
enchant_broker_request_pwl_dict(resource $broker, string $filename):resource
enchant_broker_set_dict_path(resource $broker, int $dict_type, string $value):bool
enchant_broker_set_ordering(resource $broker, string $tag, string $ordering):bool
enchant_dict_add_to_personal(resource $dict, string $word):void
enchant_dict_add_to_session(resource $dict, string $word):void
enchant_dict_check(resource $dict, string $word):bool
enchant_dict_describe(resource $dict):mixed
enchant_dict_get_error(resource $dict):string
enchant_dict_is_in_session(resource $dict, string $word):bool
enchant_dict_quick_check(resource $dict, string $word [, array &$suggestions]):bool
enchant_dict_store_replacement(resource $dict, string $mis, string $cor):void
enchant_dict_suggest(resource $dict, string $word):array
end(array &$array):mixed
ereg_replace(string $pattern, string $replacement, string $string):string
ereg(string $pattern, string $string [, array &$regs]):int
eregi_replace(string $pattern, string $replacement, string $string):string
eregi(string $pattern, string $string [, array &$regs]):int
error_clear_last(void):void
error_get_last(void):array
error_log(string $message [, int $message_type = 0 [, string $destination [, string $extra_headers]]]):bool
error_reporting([int $level]):int
escapeshellarg(string $arg):string
escapeshellcmd(string $command):string
eval(string $code):mixed
event_add(resource $event [, int $timeout = -1]):bool
event_base_free(resource $event_base):void
event_base_loop(resource $event_base [, int $flags = 0]):int
event_base_loopbreak(resource $event_base):bool
event_base_loopexit(resource $event_base [, int $timeout = -1]):bool
event_base_new(void):resource
event_base_priority_init(resource $event_base, int $npriorities):bool
event_base_reinit(resource $event_base):bool
event_base_set(resource $event, resource $event_base):bool
event_buffer_base_set(resource $bevent, resource $event_base):bool
event_buffer_disable(resource $bevent, int $events):bool
event_buffer_enable(resource $bevent, int $events):bool
event_buffer_fd_set(resource $bevent, resource $fd):void
event_buffer_free(resource $bevent):void
event_buffer_new(resource $stream, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg]):resource
event_buffer_priority_set(resource $bevent, int $priority):bool
event_buffer_read(resource $bevent, int $data_size):string
event_buffer_set_callback(resource $event, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg]):bool
event_buffer_timeout_set(resource $bevent, int $read_timeout, int $write_timeout):void
event_buffer_watermark_set(resource $bevent, int $events, int $lowmark, int $highmark):void
event_buffer_write(resource $bevent, string $data [, int $data_size = -1]):bool
event_del(resource $event):bool
event_free(resource $event):void
event_new(void):resource
event_priority_set(resource $event, int $priority):bool
event_set(resource $event, mixed $fd, int $events, mixed $callback [, mixed $arg]):bool
event_timer_add(resource $event [, int $timeout = -1]):bool
event_timer_del(resource $event):bool
event_timer_new(void):resource
event_timer_set(resource $event, callable $callback [, mixed $arg]):bool
exec(string $command [, array &$output [, int &$return_var]]):string
exif_imagetype(string $filename):int
exif_read_data(mixed $stream [, string $sections = NULL [, bool $arrays = FALSE [, bool $thumbnail = FALSE]]]):array
exif_tagname(int $index):string
exif_thumbnail(mixed $stream [, int &$width [, int &$height [, int &$imagetype]]]):string
exit([string $status]):void
exp(float $arg):float
expect_expectl(resource $expect, array $cases [, array &$match]):int
expect_popen(string $command):resource
explode(string $delimiter, string $string [, int $limit = PHP_INT_MAX]):array
expm1(float $arg):float
extension_loaded(string $name):bool
extract(array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL]]):int
ezmlm_hash(string $addr):int
fam_cancel_monitor(resource $fam, resource $fam_monitor):bool
fam_close(resource $fam):void
fam_monitor_collection(resource $fam, string $dirname, int $depth, string $mask):resource
fam_monitor_directory(resource $fam, string $dirname):resource
fam_monitor_file(resource $fam, string $filename):resource
fam_next_event(resource $fam):array
fam_open([string $appname]):resource
fam_pending(resource $fam):int
fam_resume_monitor(resource $fam, resource $fam_monitor):bool
fam_suspend_monitor(resource $fam, resource $fam_monitor):bool
fann_cascadetrain_on_data(resource $ann, resource $data, int $max_neurons, int $neurons_between_reports, float $desired_error):bool
fann_cascadetrain_on_file(resource $ann, string $filename, int $max_neurons, int $neurons_between_reports, float $desired_error):bool
fann_clear_scaling_params(resource $ann):bool
fann_copy(resource $ann):resource
fann_create_from_file(string $configuration_file):resource
fann_create_shortcut_array(int $num_layers, array $layers):resource
fann_create_shortcut(int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...]):resource
fann_create_sparse_array(float $connection_rate, int $num_layers, array $layers):resource
fann_create_sparse(float $connection_rate, int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...]):resource
fann_create_standard_array(int $num_layers, array $layers):resource
fann_create_standard(int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...]):resource
fann_create_train_from_callback(int $num_data, int $num_input, int $num_output, callable $user_function):resource
fann_create_train(int $num_data, int $num_input, int $num_output):resource
fann_descale_input(resource $ann, array $input_vector):bool
fann_descale_output(resource $ann, array $output_vector):bool
fann_descale_train(resource $ann, resource $train_data):bool
fann_destroy_train(resource $train_data):bool
fann_destroy(resource $ann):bool
fann_duplicate_train_data(resource $data):resource
fann_get_activation_function(resource $ann, int $layer, int $neuron):int
fann_get_activation_steepness(resource $ann, int $layer, int $neuron):float
fann_get_bias_array(resource $ann):array
fann_get_bit_fail_limit(resource $ann):float
fann_get_bit_fail(resource $ann):int
fann_get_cascade_activation_functions_count(resource $ann):int
fann_get_cascade_activation_functions(resource $ann):array
fann_get_cascade_activation_steepnesses_count(resource $ann):int
fann_get_cascade_activation_steepnesses(resource $ann):array
fann_get_cascade_candidate_change_fraction(resource $ann):float
fann_get_cascade_candidate_limit(resource $ann):float
fann_get_cascade_candidate_stagnation_epochs(resource $ann):int
fann_get_cascade_max_cand_epochs(resource $ann):int
fann_get_cascade_max_out_epochs(resource $ann):int
fann_get_cascade_min_cand_epochs(resource $ann):int
fann_get_cascade_min_out_epochs(resource $ann):int
fann_get_cascade_num_candidate_groups(resource $ann):int
fann_get_cascade_num_candidates(resource $ann):int
fann_get_cascade_output_change_fraction(resource $ann):float
fann_get_cascade_output_stagnation_epochs(resource $ann):int
fann_get_cascade_weight_multiplier(resource $ann):float
fann_get_connection_array(resource $ann):array
fann_get_connection_rate(resource $ann):float
fann_get_errno(resource $errdat):int
fann_get_errstr(resource $errdat):string
fann_get_layer_array(resource $ann):array
fann_get_learning_momentum(resource $ann):float
fann_get_learning_rate(resource $ann):float
fann_get_MSE(resource $ann):float
fann_get_network_type(resource $ann):int
fann_get_num_input(resource $ann):int
fann_get_num_layers(resource $ann):int
fann_get_num_output(resource $ann):int
fann_get_quickprop_decay(resource $ann):float
fann_get_quickprop_mu(resource $ann):float
fann_get_rprop_decrease_factor(resource $ann):float
fann_get_rprop_delta_max(resource $ann):float
fann_get_rprop_delta_min(resource $ann):float
fann_get_rprop_delta_zero(resource $ann):int
fann_get_rprop_increase_factor(resource $ann):float
fann_get_sarprop_step_error_shift(resource $ann):float
fann_get_sarprop_step_error_threshold_factor(resource $ann):float
fann_get_sarprop_temperature(resource $ann):float
fann_get_sarprop_weight_decay_shift(resource $ann):float
fann_get_total_connections(resource $ann):int
fann_get_total_neurons(resource $ann):int
fann_get_train_error_function(resource $ann):int
fann_get_train_stop_function(resource $ann):int
fann_get_training_algorithm(resource $ann):int
fann_init_weights(resource $ann, resource $train_data):bool
fann_length_train_data(resource $data):int
fann_merge_train_data(resource $data1, resource $data2):resource
fann_num_input_train_data(resource $data):int
fann_num_output_train_data(resource $data):int
fann_print_error(resource $errdat):void
fann_randomize_weights(resource $ann, float $min_weight, float $max_weight):bool
fann_read_train_from_file(string $filename):resource
fann_reset_errno(resource $errdat):void
fann_reset_errstr(resource $errdat):void
fann_reset_MSE(string $ann):bool
fann_run(resource $ann, array $input):array
fann_save_train(resource $data, string $file_name):bool
fann_save(resource $ann, string $configuration_file):bool
fann_scale_input_train_data(resource $train_data, float $new_min, float $new_max):bool
fann_scale_input(resource $ann, array $input_vector):bool
fann_scale_output_train_data(resource $train_data, float $new_min, float $new_max):bool
fann_scale_output(resource $ann, array $output_vector):bool
fann_scale_train_data(resource $train_data, float $new_min, float $new_max):bool
fann_scale_train(resource $ann, resource $train_data):bool
fann_set_activation_function_hidden(resource $ann, int $activation_function):bool
fann_set_activation_function_layer(resource $ann, int $activation_function, int $layer):bool
fann_set_activation_function_output(resource $ann, int $activation_function):bool
fann_set_activation_function(resource $ann, int $activation_function, int $layer, int $neuron):bool
fann_set_activation_steepness_hidden(resource $ann, float $activation_steepness):bool
fann_set_activation_steepness_layer(resource $ann, float $activation_steepness, int $layer):bool
fann_set_activation_steepness_output(resource $ann, float $activation_steepness):bool
fann_set_activation_steepness(resource $ann, float $activation_steepness, int $layer, int $neuron):bool
fann_set_bit_fail_limit(resource $ann, float $bit_fail_limit):bool
fann_set_callback(resource $ann, collable $callback):bool
fann_set_cascade_activation_functions(resource $ann, array $cascade_activation_functions):bool
fann_set_cascade_activation_steepnesses(resource $ann, array $cascade_activation_steepnesses_count):bool
fann_set_cascade_candidate_change_fraction(resource $ann, float $cascade_candidate_change_fraction):bool
fann_set_cascade_candidate_limit(resource $ann, float $cascade_candidate_limit):bool
fann_set_cascade_candidate_stagnation_epochs(resource $ann, int $cascade_candidate_stagnation_epochs):bool
fann_set_cascade_max_cand_epochs(resource $ann, int $cascade_max_cand_epochs):bool
fann_set_cascade_max_out_epochs(resource $ann, int $cascade_max_out_epochs):bool
fann_set_cascade_min_cand_epochs(resource $ann, int $cascade_min_cand_epochs):bool
fann_set_cascade_min_out_epochs(resource $ann, int $cascade_min_out_epochs):bool
fann_set_cascade_num_candidate_groups(resource $ann, int $cascade_num_candidate_groups):bool
fann_set_cascade_output_change_fraction(resource $ann, float $cascade_output_change_fraction):bool
fann_set_cascade_output_stagnation_epochs(resource $ann, int $cascade_output_stagnation_epochs):bool
fann_set_cascade_weight_multiplier(resource $ann, float $cascade_weight_multiplier):bool
fann_set_error_log(resource $errdat, string $log_file):void
fann_set_input_scaling_params(resource $ann, resource $train_data, float $new_input_min, float $new_input_max):bool
fann_set_learning_momentum(resource $ann, float $learning_momentum):bool
fann_set_learning_rate(resource $ann, float $learning_rate):bool
fann_set_output_scaling_params(resource $ann, resource $train_data, float $new_output_min, float $new_output_max):bool
fann_set_quickprop_decay(resource $ann, float $quickprop_decay):bool
fann_set_quickprop_mu(resource $ann, float $quickprop_mu):bool
fann_set_rprop_decrease_factor(resource $ann, float $rprop_decrease_factor):bool
fann_set_rprop_delta_max(resource $ann, float $rprop_delta_max):bool
fann_set_rprop_delta_min(resource $ann, float $rprop_delta_min):bool
fann_set_rprop_delta_zero(resource $ann, float $rprop_delta_zero):bool
fann_set_rprop_increase_factor(resource $ann, float $rprop_increase_factor):bool
fann_set_sarprop_step_error_shift(resource $ann, float $sarprop_step_error_shift):bool
fann_set_sarprop_step_error_threshold_factor(resource $ann, float $sarprop_step_error_threshold_factor):bool
fann_set_sarprop_temperature(resource $ann, float $sarprop_temperature):bool
fann_set_sarprop_weight_decay_shift(resource $ann, float $sarprop_weight_decay_shift):bool
fann_set_scaling_params(resource $ann, resource $train_data, float $new_input_min, float $new_input_max, float $new_output_min, float $new_output_max):bool
fann_set_train_error_function(resource $ann, int $error_function):bool
fann_set_train_stop_function(resource $ann, int $stop_function):bool
fann_set_training_algorithm(resource $ann, int $training_algorithm):bool
fann_set_weight_array(resource $ann, array $connections):bool
fann_set_weight(resource $ann, int $from_neuron, int $to_neuron, float $weight):bool
fann_shuffle_train_data(resource $train_data):bool
fann_subset_train_data(resource $data, int $pos, int $length):resource
fann_test_data(resource $ann, resource $data):float
fann_test(resource $ann, array $input, array $desired_output):array
fann_train_epoch(resource $ann, resource $data):float
fann_train_on_data(resource $ann, resource $data, int $max_epochs, int $epochs_between_reports, float $desired_error):bool
fann_train_on_file(resource $ann, string $filename, int $max_epochs, int $epochs_between_reports, float $desired_error):bool
fann_train(resource $ann, array $input, array $desired_output):bool
fastcgi_finish_request(void):bool
fbsql_affected_rows([resource $link_identifier]):int
fbsql_autocommit(resource $link_identifier [, bool $OnOff]):bool
fbsql_blob_size(string $blob_handle [, resource $link_identifier]):int
fbsql_change_user(string $user, string $password [, string $database [, resource $link_identifier]]):bool
fbsql_clob_size(string $clob_handle [, resource $link_identifier]):int
fbsql_close([resource $link_identifier]):bool
fbsql_commit([resource $link_identifier]):bool
fbsql_connect([string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password")]]]):resource
fbsql_create_blob(string $blob_data [, resource $link_identifier]):string
fbsql_create_clob(string $clob_data [, resource $link_identifier]):string
fbsql_create_db(string $database_name [, resource $link_identifier [, string $database_options]]):bool
fbsql_data_seek(resource $result, int $row_number):bool
fbsql_database_password(resource $link_identifier [, string $database_password]):string
fbsql_database(resource $link_identifier [, string $database]):string
fbsql_db_query(string $database, string $query [, resource $link_identifier]):resource
fbsql_db_status(string $database_name [, resource $link_identifier]):int
fbsql_drop_db(string $database_name [, resource $link_identifier]):bool
fbsql_errno([resource $link_identifier]):int
fbsql_error([resource $link_identifier]):string
fbsql_fetch_array(resource $result [, int $result_type]):array
fbsql_fetch_assoc(resource $result):array
fbsql_fetch_field(resource $result [, int $field_offset]):object
fbsql_fetch_lengths(resource $result):array
fbsql_fetch_object(resource $result):object
fbsql_fetch_row(resource $result):array
fbsql_field_flags(resource $result [, int $field_offset]):string
fbsql_field_len(resource $result [, int $field_offset]):int
fbsql_field_name(resource $result [, int $field_index]):string
fbsql_field_seek(resource $result [, int $field_offset]):bool
fbsql_field_table(resource $result [, int $field_offset]):string
fbsql_field_type(resource $result [, int $field_offset]):string
fbsql_free_result(resource $result):bool
fbsql_get_autostart_info([resource $link_identifier]):array
fbsql_hostname(resource $link_identifier [, string $host_name]):string
fbsql_insert_id([resource $link_identifier]):int
fbsql_list_dbs([resource $link_identifier]):resource
fbsql_list_fields(string $database_name, string $table_name [, resource $link_identifier]):resource
fbsql_list_tables(string $database [, resource $link_identifier]):resource
fbsql_next_result(resource $result):bool
fbsql_num_fields(resource $result):int
fbsql_num_rows(resource $result):int
fbsql_password(resource $link_identifier [, string $password]):string
fbsql_pconnect([string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password")]]]):resource
fbsql_query(string $query [, resource $link_identifier [, int $batch_size]]):resource
fbsql_read_blob(string $blob_handle [, resource $link_identifier]):string
fbsql_read_clob(string $clob_handle [, resource $link_identifier]):string
fbsql_result(resource $result [, int $row [, mixed $field]]):mixed
fbsql_rollback([resource $link_identifier]):bool
fbsql_rows_fetched(resource $result):int
fbsql_select_db([string $database_name [, resource $link_identifier]]):bool
fbsql_set_characterset(resource $link_identifier, int $characterset [, int $in_out_both]):void
fbsql_set_lob_mode(resource $result, int $lob_mode):bool
fbsql_set_password(resource $link_identifier, string $user, string $password, string $old_password):bool
fbsql_set_transaction(resource $link_identifier, int $locking, int $isolation):void
fbsql_start_db(string $database_name [, resource $link_identifier [, string $database_options]]):bool
fbsql_stop_db(string $database_name [, resource $link_identifier]):bool
fbsql_table_name(resource $result, int $index):string
fbsql_tablename(resource $result, int $index):string
fbsql_username(resource $link_identifier [, string $username]):string
fbsql_warnings([bool $OnOff]):bool
fclose(resource $handle):bool
fdf_add_doc_javascript(resource $fdf_document, string $script_name, string $script_code):bool
fdf_add_template(resource $fdf_document, int $newpage, string $filename, string $template, int $rename):bool
fdf_close(resource $fdf_document):void
fdf_create(void):resource
fdf_enum_values(resource $fdf_document, callable $function [, mixed $userdata]):bool
fdf_errno(void):int
fdf_error([int $error_code = -1]):string
fdf_get_ap(resource $fdf_document, string $field, int $face, string $filename):bool
fdf_get_attachment(resource $fdf_document, string $fieldname, string $savepath):array
fdf_get_encoding(resource $fdf_document):string
fdf_get_file(resource $fdf_document):string
fdf_get_flags(resource $fdf_document, string $fieldname, int $whichflags):int
fdf_get_opt(resource $fdf_document, string $fieldname [, int $element = -1]):mixed
fdf_get_status(resource $fdf_document):string
fdf_get_value(resource $fdf_document, string $fieldname [, int $which = -1]):mixed
fdf_get_version([resource $fdf_document]):string
fdf_header(void):void
fdf_next_field_name(resource $fdf_document [, string $fieldname]):string
fdf_open_string(string $fdf_data):resource
fdf_open(string $filename):resource
fdf_remove_item(resource $fdf_document, string $fieldname, int $item):bool
fdf_save_string(resource $fdf_document):string
fdf_save(resource $fdf_document [, string $filename]):bool
fdf_set_ap(resource $fdf_document, string $field_name, int $face, string $filename, int $page_number):bool
fdf_set_encoding(resource $fdf_document, string $encoding):bool
fdf_set_file(resource $fdf_document, string $url [, string $target_frame]):bool
fdf_set_flags(resource $fdf_document, string $fieldname, int $whichFlags, int $newFlags):bool
fdf_set_javascript_action(resource $fdf_document, string $fieldname, int $trigger, string $script):bool
fdf_set_on_import_javascript(resource $fdf_document, string $script, bool $before_data_import):bool
fdf_set_opt(resource $fdf_document, string $fieldname, int $element, string $str1, string $str2):bool
fdf_set_status(resource $fdf_document, string $status):bool
fdf_set_submit_form_action(resource $fdf_document, string $fieldname, int $trigger, string $script, int $flags):bool
fdf_set_target_frame(resource $fdf_document, string $frame_name):bool
fdf_set_value(resource $fdf_document, string $fieldname, mixed $value [, int $isName]):bool
fdf_set_version(resource $fdf_document, string $version):bool
feof(resource $handle):bool
fflush(resource $handle):bool
fgetc(resource $handle):string
fgetcsv(resource $handle [, int $length = 0 [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\"]]]]):array
fgets(resource $handle [, int $length]):string
fgetss(resource $handle [, int $length [, string $allowable_tags]]):string
file_exists(string $filename):bool
file_get_contents(string $filename [, bool $use_include_path = FALSE [, resource $context [, int $offset = 0 [, int $maxlen]]]]):string
file_put_contents(string $filename, mixed $data [, int $flags = 0 [, resource $context]]):int
file(string $filename [, int $flags = 0 [, resource $context]]):array
fileatime(string $filename):int
filectime(string $filename):int
filegroup(string $filename):int
fileinode(string $filename):int
filemtime(string $filename):int
fileowner(string $filename):int
fileperms(string $filename):int
filepro_fieldcount(void):int
filepro_fieldname(int $field_number):string
filepro_fieldtype(int $field_number):string
filepro_fieldwidth(int $field_number):int
filepro_retrieve(int $row_number, int $field_number):string
filepro_rowcount(void):int
filepro(string $directory):bool
filesize(string $filename):int
filetype(string $filename):string
filter_has_var(int $type, string $variable_name):bool
filter_id(string $filtername):int
filter_input_array(int $type [, mixed $definition [, bool $add_empty = TRUE]]):mixed
filter_input(int $type, string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options]]):mixed
filter_list(void):array
filter_var_array(array $data [, mixed $definition [, bool $add_empty = TRUE]]):mixed
filter_var(mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options]]):mixed
finfo_buffer(resource $finfo, string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL]]):string
finfo_close(resource $finfo):bool
finfo_file(resource $finfo, string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL]]):string
finfo_open([int $options = FILEINFO_NONE [, string $magic_file = NULL]]):resource
finfo_set_flags(resource $finfo, int $options):bool
floatval(mixed $var):float
flock(resource $handle, int $operation [, int &$wouldblock]):bool
floor(float $value):float
flush(void):void
fmod(float $x, float $y):float
fnmatch(string $pattern, string $string [, int $flags = 0]):bool
fopen(string $filename, string $mode [, bool $use_include_path = FALSE [, resource $context]]):resource
forward_static_call_array(callable $function, array $parameters):mixed
forward_static_call(callable $function [, mixed $parameter [, mixed $...]]):mixed
fpassthru(resource $handle):int
fprintf(resource $handle, string $format [, mixed $args [, mixed $...]]):int
fputcsv(resource $handle, array $fields [, string $delimiter = "," [, string $enclosure = '"' [, string $escape_char = "\\"]]]):int
fputs(resource $handle, string $string [, int $length]):int
fread(resource $handle, int $length):string
frenchtojd(int $month, int $day, int $year):int
fribidi_log2vis(string $str, string $direction, int $charset):string
fscanf(resource $handle, string $format [, mixed &$...]):mixed
fseek(resource $handle, int $offset [, int $whence = SEEK_SET]):int
fsockopen(string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout")]]]]):resource
fstat(resource $handle):array
ftell(resource $handle):int
ftok(string $pathname, string $proj):int
ftp_alloc(resource $ftp_stream, int $filesize [, string &$result]):bool
ftp_append(resource $ftp, string $remote_file, string $local_file [, int $mode = FTP_IMAGE]):bool
ftp_cdup(resource $ftp_stream):bool
ftp_chdir(resource $ftp_stream, string $directory):bool
ftp_chmod(resource $ftp_stream, int $mode, string $filename):int
ftp_close(resource $ftp_stream):bool
ftp_connect(string $host [, int $port = 21 [, int $timeout = 90]]):resource
ftp_delete(resource $ftp_stream, string $path):bool
ftp_exec(resource $ftp_stream, string $command):bool
ftp_fget(resource $ftp_stream, resource $handle, string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0]]):bool
ftp_fput(resource $ftp_stream, string $remote_file, resource $handle [, int $mode = FTP_IMAGE [, int $startpos = 0]]):bool
ftp_get_option(resource $ftp_stream, int $option):mixed
ftp_get(resource $ftp_stream, string $local_file, string $remote_file [, int $mode = FTP_BINARY [, int $resumepos = 0]]):bool
ftp_login(resource $ftp_stream, string $username, string $password):bool
ftp_mdtm(resource $ftp_stream, string $remote_file):int
ftp_mkdir(resource $ftp_stream, string $directory):string
ftp_mlsd(resource $ftp_stream, string $directory):array
ftp_nb_continue(resource $ftp_stream):int
ftp_nb_fget(resource $ftp_stream, resource $handle, string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0]]):int
ftp_nb_fput(resource $ftp_stream, string $remote_file, resource $handle [, int $mode = FTP_IMAGE [, int $startpos = 0]]):int
ftp_nb_get(resource $ftp_stream, string $local_file, string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0]]):int
ftp_nb_put(resource $ftp_stream, string $remote_file, string $local_file [, int $mode = FTP_IMAGE [, int $startpos = 0]]):int
ftp_nlist(resource $ftp_stream, string $directory):array
ftp_pasv(resource $ftp_stream, bool $pasv):bool
ftp_put(resource $ftp_stream, string $remote_file, string $local_file [, int $mode = FTP_IMAGE [, int $startpos = 0]]):bool
ftp_pwd(resource $ftp_stream):string
ftp_quit(resource $ftp_stream):bool
ftp_raw(resource $ftp_stream, string $command):array
ftp_rawlist(resource $ftp_stream, string $directory [, bool $recursive = FALSE]):array
ftp_rename(resource $ftp_stream, string $oldname, string $newname):bool
ftp_rmdir(resource $ftp_stream, string $directory):bool
ftp_set_option(resource $ftp_stream, int $option, mixed $value):bool
ftp_site(resource $ftp_stream, string $command):bool
ftp_size(resource $ftp_stream, string $remote_file):int
ftp_ssl_connect(string $host [, int $port = 21 [, int $timeout = 90]]):resource
ftp_systype(resource $ftp_stream):string
ftruncate(resource $handle, int $size):bool
func_get_arg(int $arg_num):mixed
func_get_args(void):array
func_num_args(void):int
function_exists(string $function_name):bool
fwrite(resource $handle, string $string [, int $length]):int
gc_collect_cycles(void):int
gc_disable(void):void
gc_enable(void):void
gc_enabled(void):bool
gc_mem_caches(void):int
gd_info(void):array
geoip_asnum_by_name(string $hostname):string
geoip_continent_code_by_name(string $hostname):string
geoip_country_code_by_name(string $hostname):string
geoip_country_code3_by_name(string $hostname):string
geoip_country_name_by_name(string $hostname):string
geoip_database_info([int $database = GEOIP_COUNTRY_EDITION]):string
geoip_db_avail(int $database):bool
geoip_db_filename(int $database):string
geoip_db_get_all_info(void):array
geoip_domain_by_name(string $hostname):string
geoip_id_by_name(string $hostname):int
geoip_isp_by_name(string $hostname):string
geoip_netspeedcell_by_name(string $hostname):string
geoip_org_by_name(string $hostname):string
geoip_record_by_name(string $hostname):array
geoip_region_by_name(string $hostname):array
geoip_region_name_by_code(string $country_code, string $region_code):string
geoip_setup_custom_directory(string $path):void
geoip_time_zone_by_country_and_region(string $country_code [, string $region_code]):string
get_browser([string $user_agent [, bool $return_array = FALSE]]):mixed
get_called_class(void):string
get_cfg_var(string $option):mixed
get_class_methods(mixed $class_name):array
get_class_vars(string $class_name):array
get_class([object $object]):string
get_current_user(void):string
get_declared_classes(void):array
get_declared_interfaces(void):array
get_declared_traits(void):array
get_defined_constants([bool $categorize = FALSE]):array
get_defined_functions([bool $exclude_disabled = FALSE]):array
get_defined_vars(void):array
get_extension_funcs(string $module_name):array
get_headers(string $url [, int $format = 0 [, resource $context]]):array
get_html_translation_table([int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = "UTF-8"]]]):array
get_include_path(void):string
get_included_files(void):array
get_loaded_extensions([bool $zend_extensions = FALSE]):array
get_magic_quotes_gpc(void):bool
get_magic_quotes_runtime(void):bool
get_meta_tags(string $filename [, bool $use_include_path = FALSE]):array
get_object_vars(object $object):array
get_parent_class([mixed $object]):string
get_required_files(void):array
get_resource_type(resource $handle):string
get_resources([string $type]):array
getallheaders(void):array
getcwd(void):string
getdate([int $timestamp = time()]):array
getenv(string $varname [, bool $local_only = FALSE]):string
gethostbyaddr(string $ip_address):string
gethostbyname(string $hostname):string
gethostbynamel(string $hostname):array
gethostname(void):string
getimagesize(string $filename [, array &$imageinfo]):array
getimagesizefromstring(string $imagedata [, array &$imageinfo]):array
getlastmod(void):int
getmxrr(string $hostname, array &$mxhosts [, array &$weight]):bool
getmygid(void):int
getmyinode(void):int
getmypid(void):int
getmyuid(void):int
getopt(string $options [, array $longopts [, int &$optind]]):array
getprotobyname(string $name):int
getprotobynumber(int $number):string
getrandmax(void):int
getrusage([int $who = 0]):array
getservbyname(string $service, string $protocol):int
getservbyport(int $port, string $protocol):string
gettext(string $message):string
gettimeofday([bool $return_float = FALSE]):mixed
gettype(mixed $var):string
glob(string $pattern [, int $flags = 0]):array
gmdate(string $format [, int $timestamp = time()]):string
gmmktime([int $hour = gmdate("H") [, int $minute = gmdate("i") [, int $second = gmdate("s") [, int $month = gmdate("n") [, int $day = gmdate("j") [, int $year = gmdate("Y") [, int $is_dst = -1]]]]]]]):int
gmp_abs(GMP $a):GMP
gmp_add(GMP $a, GMP $b):GMP
gmp_and(GMP $a, GMP $b):GMP
gmp_clrbit(GMP $a, int $index):void
gmp_cmp(GMP $a, GMP $b):int
gmp_com(GMP $a):GMP
gmp_div_q(GMP $a, GMP $b [, int $round = GMP_ROUND_ZERO]):GMP
gmp_div_qr(GMP $n, GMP $d [, int $round = GMP_ROUND_ZERO]):array
gmp_div_r(GMP $n, GMP $d [, int $round = GMP_ROUND_ZERO]):GMP
gmp_div_q().:This function is an alias of:
gmp_divexact(GMP $n, GMP $d):GMP
gmp_export(GMP $gmpnumber [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN]]):string
gmp_fact(mixed $a):GMP
gmp_gcd(GMP $a, GMP $b):GMP
gmp_gcdext(GMP $a, GMP $b):array
gmp_hamdist(GMP $a, GMP $b):int
gmp_import(string $data [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN]]):GMP
gmp_init(mixed $number [, int $base = 0]):GMP
gmp_intval(GMP $gmpnumber):int
gmp_invert(GMP $a, GMP $b):GMP
gmp_jacobi(GMP $a, GMP $p):int
gmp_legendre(GMP $a, GMP $p):int
gmp_mod(GMP $n, GMP $d):GMP
gmp_mul(GMP $a, GMP $b):GMP
gmp_neg(GMP $a):GMP
gmp_nextprime(int $a):GMP
gmp_or(GMP $a, GMP $b):GMP
gmp_perfect_square(GMP $a):bool
gmp_popcount(GMP $a):int
gmp_pow(GMP $base, int $exp):GMP
gmp_powm(GMP $base, GMP $exp, GMP $mod):GMP
gmp_prob_prime(GMP $a [, int $reps = 10]):int
gmp_random_bits(int $bits):GMP
gmp_random_range(GMP $min, GMP $max):GMP
gmp_random_seed(mixed $seed):void
gmp_random([int $limiter = 20]):GMP
gmp_root(GMP $a, int $nth):GMP
gmp_rootrem(GMP $a, int $nth):array
gmp_scan0(GMP $a, int $start):int
gmp_scan1(GMP $a, int $start):int
gmp_setbit(GMP $a, int $index [, bool $bit_on = TRUE]):void
gmp_sign(GMP $a):int
gmp_sqrt(GMP $a):GMP
gmp_sqrtrem(GMP $a):array
gmp_strval(GMP $gmpnumber [, int $base = 10]):string
gmp_sub(GMP $a, GMP $b):GMP
gmp_testbit(GMP $a, int $index):bool
gmp_xor(GMP $a, GMP $b):GMP
gmstrftime(string $format [, int $timestamp = time()]):string
gnupg_adddecryptkey(resource $identifier, string $fingerprint, string $passphrase):bool
gnupg_addencryptkey(resource $identifier, string $fingerprint):bool
gnupg_addsignkey(resource $identifier, string $fingerprint [, string $passphrase]):bool
gnupg_cleardecryptkeys(resource $identifier):bool
gnupg_clearencryptkeys(resource $identifier):bool
gnupg_clearsignkeys(resource $identifier):bool
gnupg_decrypt(resource $identifier, string $text):string
gnupg_decryptverify(resource $identifier, string $text, string &$plaintext):array
gnupg_encrypt(resource $identifier, string $plaintext):string
gnupg_encryptsign(resource $identifier, string $plaintext):string
gnupg_export(resource $identifier, string $fingerprint):string
gnupg_geterror(resource $identifier):string
gnupg_getprotocol(resource $identifier):int
gnupg_import(resource $identifier, string $keydata):array
gnupg_init(void):resource
gnupg_keyinfo(resource $identifier, string $pattern):array
gnupg_setarmor(resource $identifier, int $armor):bool
gnupg_seterrormode(resource $identifier, int $errormode):void
gnupg_setsignmode(resource $identifier, int $signmode):bool
gnupg_sign(resource $identifier, string $plaintext):string
gnupg_verify(resource $identifier, string $signed_text, string $signature [, string &$plaintext]):array
gopher_parsedir(string $dirent):array
grapheme_extract(string $haystack, int $size [, int $extract_type [, int $start = 0 [, int &$next]]]):string
grapheme_stripos(string $haystack, string $needle [, int $offset = 0]):int
grapheme_stristr(string $haystack, string $needle [, bool $before_needle = FALSE]):string
grapheme_strlen(string $input):int
grapheme_strpos(string $haystack, string $needle [, int $offset = 0]):int
grapheme_strripos(string $haystack, string $needle [, int $offset = 0]):int
grapheme_strrpos(string $haystack, string $needle [, int $offset = 0]):int
grapheme_strstr(string $haystack, string $needle [, bool $before_needle = FALSE]):string
grapheme_substr(string $string, int $start [, int $length]):string
gregoriantojd(int $month, int $day, int $year):int
gupnp_context_get_host_ip(resource $context):string
gupnp_context_get_port(resource $context):int
gupnp_context_get_subscription_timeout(resource $context):int
gupnp_context_host_path(resource $context, string $local_path, string $server_path):bool
gupnp_context_new([string $host_ip [, int $port = 0]]):resource
gupnp_context_set_subscription_timeout(resource $context, int $timeout):void
gupnp_context_timeout_add(resource $context, int $timeout, mixed $callback [, mixed $arg]):bool
gupnp_context_unhost_path(resource $context, string $server_path):bool
gupnp_control_point_browse_start(resource $cpoint):bool
gupnp_control_point_browse_stop(resource $cpoint):bool
gupnp_control_point_callback_set(resource $cpoint, int $signal, mixed $callback [, mixed $arg]):bool
gupnp_control_point_new(resource $context, string $target):resource
gupnp_device_action_callback_set(resource $root_device, int $signal, string $action_name, mixed $callback [, mixed $arg]):bool
gupnp_device_info_get_service(resource $root_device, string $type):resource
gupnp_device_info_get(resource $root_device):array
gupnp_root_device_get_available(resource $root_device):bool
gupnp_root_device_get_relative_location(resource $root_device):string
gupnp_root_device_new(resource $context, string $location, string $description_dir):resource
gupnp_root_device_set_available(resource $root_device, bool $available):bool
gupnp_root_device_start(resource $root_device):bool
gupnp_root_device_stop(resource $root_device):bool
gupnp_service_action_get(resource $action, string $name, int $type):mixed
gupnp_service_action_return_error(resource $action, int $error_code [, string $error_description]):bool
gupnp_service_action_return(resource $action):bool
gupnp_service_action_set(resource $action, string $name, int $type, mixed $value):bool
gupnp_service_freeze_notify(resource $service):bool
gupnp_service_info_get_introspection(resource $proxy [, mixed $callback [, mixed $arg]]):mixed
gupnp_service_info_get(resource $proxy):array
gupnp_service_introspection_get_state_variable(resource $introspection, string $variable_name):array
gupnp_service_notify(resource $service, string $name, int $type, mixed $value):bool
gupnp_service_proxy_action_get(resource $proxy, string $action, string $name, int $type):mixed
gupnp_service_proxy_action_set(resource $proxy, string $action, string $name, mixed $value, int $type):bool
gupnp_service_proxy_add_notify(resource $proxy, string $value, int $type, mixed $callback [, mixed $arg]):bool
gupnp_service_proxy_callback_set(resource $proxy, int $signal, mixed $callback [, mixed $arg]):bool
gupnp_service_proxy_get_subscribed(resource $proxy):bool
gupnp_service_proxy_remove_notify(resource $proxy, string $value):bool
gupnp_service_proxy_set_subscribed(resource $proxy, bool $subscribed):bool
gupnp_service_thaw_notify(resource $service):bool
gzclose(resource $zp):bool
gzcompress(string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE]]):string
gzdecode(string $data [, int $length]):string
gzdeflate(string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW]]):string
gzencode(string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP]]):string
gzeof(resource $zp):int
gzfile(string $filename [, int $use_include_path = 0]):array
gzgetc(resource $zp):string
gzgets(resource $zp [, int $length]):string
gzgetss(resource $zp, int $length [, string $allowable_tags]):string
gzinflate(string $data [, int $length = 0]):string
gzopen(string $filename, string $mode [, int $use_include_path = 0]):resource
gzpassthru(resource $zp):int
gzputs(resource $zp, string $string [, int $length]):int
gzread(resource $zp, int $length):string
gzrewind(resource $zp):bool
gzseek(resource $zp, int $offset [, int $whence = SEEK_SET]):int
gztell(resource $zp):int
gzuncompress(string $data [, int $length = 0]):string
gzwrite(resource $zp, string $string [, int $length]):int
__halt_compiler(void):void
hash_algos(void):array
hash_copy(HashContext $context):HashContext
hash_equals(string $known_string, string $user_string):bool
hash_file(string $algo, string $filename [, bool $raw_output = FALSE]):string
hash_final(HashContext $context [, bool $raw_output = FALSE]):string
hash_hkdf(string $algo, string $ikm [, int $length = 0 [, string $info = '' [, string $salt = '']]]):string
hash_hmac_algos(void):array
hash_hmac_file(string $algo, string $filename, string $key [, bool $raw_output = FALSE]):string
hash_hmac(string $algo, string $data, string $key [, bool $raw_output = FALSE]):string
hash_init(string $algo [, int $options = 0 [, string $key = NULL]]):HashContext
hash_pbkdf2(string $algo, string $password, string $salt, int $iterations [, int $length = 0 [, bool $raw_output = FALSE]]):string
hash_update_file(HashContext $hcontext, string $filename [, resource $scontext = NULL]):bool
hash_update_stream(HashContext $context, resource $handle [, int $length = -1]):int
hash_update(HashContext $context, string $data):bool
hash(string $algo, string $data [, bool $raw_output = FALSE]):string
header_register_callback(callable $callback):bool
header_remove([string $name]):void
header(string $header [, bool $replace = TRUE [, int $http_response_code]]):void
headers_list(void):array
headers_sent([string &$file [, int &$line]]):bool
hebrev(string $hebrew_text [, int $max_chars_per_line = 0]):string
hebrevc(string $hebrew_text [, int $max_chars_per_line = 0]):string
hex2bin(string $data):string
hexdec(string $hex_string):number
highlight_file(string $filename [, bool $return = FALSE]):mixed
highlight_string(string $str [, bool $return = FALSE]):mixed
hrtime([bool $get_as_number = FALSE]):mixed
html_entity_decode(string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset")]]):string
htmlentities(string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset") [, bool $double_encode = TRUE]]]):string
htmlspecialchars_decode(string $string [, int $flags = ENT_COMPAT | ENT_HTML401]):string
htmlspecialchars(string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset") [, bool $double_encode = TRUE]]]):string
http_build_query(mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738]]]):string
http_response_code([int $response_code]):mixed
hwapi_attribute_new([string $name [, string $value]]):HW_API_Attribute
hwapi_content_new(string $content, string $mimetype):HW_API_Content
hwapi_hgcsp(string $hostname [, int $port]):HW_API
hwapi_object_new(array $parameter):hw_api_object
hypot(float $x, float $y):float
ibase_add_user(resource $service_handle, string $user_name, string $password [, string $first_name [, string $middle_name [, string $last_name]]]):bool
ibase_affected_rows([resource $link_identifier]):int
ibase_backup(resource $service_handle, string $source_db, string $dest_file [, int $options = 0 [, bool $verbose = FALSE]]):mixed
ibase_blob_add(resource $blob_handle, string $data):void
ibase_blob_cancel(resource $blob_handle):bool
ibase_blob_close(resource $blob_handle):mixed
ibase_blob_create([resource $link_identifier = NULL]):resource
ibase_blob_echo(string $blob_id):bool
ibase_blob_get(resource $blob_handle, int $len):string
ibase_blob_import(resource $link_identifier, resource $file_handle):string
ibase_blob_info(resource $link_identifier, string $blob_id):array
ibase_blob_open(resource $link_identifier, string $blob_id):resource
ibase_close([resource $connection_id = NULL]):bool
ibase_commit_ret([resource $link_or_trans_identifier = NULL]):bool
ibase_commit([resource $link_or_trans_identifier = NULL]):bool
ibase_connect([string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync]]]]]]]]):resource
ibase_db_info(resource $service_handle, string $db, int $action [, int $argument = 0]):string
ibase_delete_user(resource $service_handle, string $user_name):bool
ibase_drop_db([resource $connection = NULL]):bool
ibase_errcode(void):int
ibase_errmsg(void):string
ibase_execute(resource $query [, mixed $bind_arg [, mixed $...]]):resource
ibase_fetch_assoc(resource $result [, int $fetch_flag = 0]):array
ibase_fetch_object(resource $result_id [, int $fetch_flag = 0]):object
ibase_fetch_row(resource $result_identifier [, int $fetch_flag = 0]):array
ibase_field_info(resource $result, int $field_number):array
ibase_free_event_handler(resource $event):bool
ibase_free_query(resource $query):bool
ibase_free_result(resource $result_identifier):bool
ibase_gen_id(string $generator [, int $increment = 1 [, resource $link_identifier = NULL]]):mixed
ibase_maintain_db(resource $service_handle, string $db, int $action [, int $argument = 0]):bool
ibase_modify_user(resource $service_handle, string $user_name, string $password [, string $first_name [, string $middle_name [, string $last_name]]]):bool
ibase_name_result(resource $result, string $name):bool
ibase_num_fields(resource $result_id):int
ibase_num_params(resource $query):int
ibase_param_info(resource $query, int $param_number):array
ibase_pconnect([string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync]]]]]]]]):resource
ibase_prepare(string $query):resource
ibase_query([resource $link_identifier], string $query [, int $bind_args]):resource
ibase_restore(resource $service_handle, string $source_file, string $dest_db [, int $options = 0 [, bool $verbose = FALSE]]):mixed
ibase_rollback_ret([resource $link_or_trans_identifier = NULL]):bool
ibase_rollback([resource $link_or_trans_identifier = NULL]):bool
ibase_server_info(resource $service_handle, int $action):string
ibase_service_attach(string $host, string $dba_username, string $dba_password):resource
ibase_service_detach(resource $service_handle):bool
ibase_set_event_handler(callable $event_handler, string $event_name1 [, string $event_name2 [, string $...]]):resource
ibase_trans([int $trans_args [, resource $link_identifier]]):resource
ibase_wait_event(string $event_name1 [, string $event_name2 [, string $...]]):string
iconv_get_encoding([string $type = "all"]):mixed
iconv_mime_decode_headers(string $encoded_headers [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding")]]):array
iconv_mime_decode(string $encoded_header [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding")]]):string
iconv_mime_encode(string $field_name, string $field_value [, array $preferences = NULL]):string
iconv_set_encoding(string $type, string $charset):bool
iconv_strlen(string $str [, string $charset = ini_get("iconv.internal_encoding")]):int
iconv_strpos(string $haystack, string $needle [, int $offset = 0 [, string $charset = ini_get("iconv.internal_encoding")]]):int
iconv_strrpos(string $haystack, string $needle [, string $charset = ini_get("iconv.internal_encoding")]):int
iconv_substr(string $str, int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get("iconv.internal_encoding")]]):string
iconv(string $in_charset, string $out_charset, string $str):string
id3_get_frame_long_name(string $frameId):string
id3_get_frame_short_name(string $frameId):string
id3_get_genre_id(string $genre):int
id3_get_genre_list(void):array
id3_get_genre_name(int $genre_id):string
id3_get_tag(string $filename [, int $version = ID3_BEST]):array
id3_get_version(string $filename):int
id3_remove_tag(string $filename [, int $version = ID3_V1_0]):bool
id3_set_tag(string $filename, array $tag [, int $version = ID3_V1_0]):bool
idate(string $format [, int $timestamp = time()]):int
idn_to_ascii(string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_UTS46 [, array &$idna_info]]]):string
idn_to_utf8(string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_UTS46 [, array &$idna_info]]]):string
ifx_affected_rows(resource $result_id):int
ifx_blobinfile_mode(int $mode):bool
ifx_byteasvarchar(int $mode):bool
ifx_close([resource $link_identifier]):bool
ifx_connect([string $database [, string $userid [, string $password]]]):resource
ifx_copy_blob(int $bid):int
ifx_create_blob(int $type, int $mode, string $param):int
ifx_create_char(string $param):int
ifx_do(resource $result_id):bool
ifx_error([resource $link_identifier]):string
ifx_errormsg([int $errorcode]):string
ifx_fetch_row(resource $result_id [, mixed $position]):array
ifx_fieldproperties(resource $result_id):array
ifx_fieldtypes(resource $result_id):array
ifx_free_blob(int $bid):bool
ifx_free_char(int $bid):bool
ifx_free_result(resource $result_id):bool
ifx_get_blob(int $bid):string
ifx_get_char(int $bid):string
ifx_getsqlca(resource $result_id):array
ifx_htmltbl_result(resource $result_id [, string $html_table_options]):int
ifx_nullformat(int $mode):bool
ifx_num_fields(resource $result_id):int
ifx_num_rows(resource $result_id):int
ifx_pconnect([string $database [, string $userid [, string $password]]]):resource
ifx_prepare(string $query, resource $link_identifier [, int $cursor_def], mixed $blobidarray):resource
ifx_query(string $query, resource $link_identifier [, int $cursor_type [, mixed $blobidarray]]):resource
ifx_textasvarchar(int $mode):bool
ifx_update_blob(int $bid, string $content):bool
ifx_update_char(int $bid, string $content):bool
ifxus_close_slob(int $bid):bool
ifxus_create_slob(int $mode):int
ifxus_free_slob(int $bid):bool
ifxus_open_slob(int $bid, int $mode):int
ifxus_read_slob(int $bid, int $nbytes):string
ifxus_seek_slob(int $bid, int $mode, int $offset):int
ifxus_tell_slob(int $bid):int
ifxus_write_slob(int $bid, string $content):int
ignore_user_abort([bool $value]):int
iis_add_server(string $path, string $comment, string $server_ip, int $port, string $host_name, int $rights, int $start_server):int
iis_get_dir_security(int $server_instance, string $virtual_path):int
iis_get_script_map(int $server_instance, string $virtual_path, string $script_extension):string
iis_get_server_by_comment(string $comment):int
iis_get_server_by_path(string $path):int
iis_get_server_rights(int $server_instance, string $virtual_path):int
iis_get_service_state(string $service_id):int
iis_remove_server(int $server_instance):int
iis_set_app_settings(int $server_instance, string $virtual_path, string $application_scope):int
iis_set_dir_security(int $server_instance, string $virtual_path, int $directory_flags):int
iis_set_script_map(int $server_instance, string $virtual_path, string $script_extension, string $engine_path, int $allow_scripting):int
iis_set_server_rights(int $server_instance, string $virtual_path, int $directory_flags):int
iis_start_server(int $server_instance):int
iis_start_service(string $service_id):int
iis_stop_server(int $server_instance):int
iis_stop_service(string $service_id):int
image_type_to_extension(int $imagetype [, bool $include_dot = TRUE]):string
image_type_to_mime_type(int $imagetype):string
image2wbmp(resource $image [, string $filename [, int $foreground]]):bool
imageaffine(resource $image, array $affine [, array $clip]):resource
imageaffinematrixconcat(array $m1, array $m2):array
imageaffinematrixget(int $type [, mixed $options]):array
imagealphablending(resource $image, bool $blendmode):bool
imageantialias(resource $image, bool $enabled):bool
imagearc(resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color):bool
imagebmp(resource $image [, mixed $to = NULL [, bool $compressed = TRUE]]):bool
imagechar(resource $image, int $font, int $x, int $y, string $c, int $color):bool
imagecharup(resource $image, int $font, int $x, int $y, string $c, int $color):bool
imagecolorallocate(resource $image, int $red, int $green, int $blue):int
imagecolorallocatealpha(resource $image, int $red, int $green, int $blue, int $alpha):int
imagecolorat(resource $image, int $x, int $y):int
imagecolorclosest(resource $image, int $red, int $green, int $blue):int
imagecolorclosestalpha(resource $image, int $red, int $green, int $blue, int $alpha):int
imagecolorclosesthwb(resource $image, int $red, int $green, int $blue):int
imagecolordeallocate(resource $image, int $color):bool
imagecolorexact(resource $image, int $red, int $green, int $blue):int
imagecolorexactalpha(resource $image, int $red, int $green, int $blue, int $alpha):int
imagecolormatch(resource $image1, resource $image2):bool
imagecolorresolve(resource $image, int $red, int $green, int $blue):int
imagecolorresolvealpha(resource $image, int $red, int $green, int $blue, int $alpha):int
imagecolorset(resource $image, int $index, int $red, int $green, int $blue [, int $alpha = 0]):void
imagecolorsforindex(resource $image, int $index):array
imagecolorstotal(resource $image):int
imagecolortransparent(resource $image [, int $color]):int
imageconvolution(resource $image, array $matrix, float $div, float $offset):bool
imagecopy(resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h):bool
imagecopymerge(resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct):bool
imagecopymergegray(resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct):bool
imagecopyresampled(resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h):bool
imagecopyresized(resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h):bool
imagecreate(int $width, int $height):resource
imagecreatefrombmp(string $filename):resource
imagecreatefromgd(string $filename):resource
imagecreatefromgd2(string $filename):resource
imagecreatefromgd2part(string $filename, int $srcX, int $srcY, int $width, int $height):resource
imagecreatefromgif(string $filename):resource
imagecreatefromjpeg(string $filename):resource
imagecreatefrompng(string $filename):resource
imagecreatefromstring(string $image):resource
imagecreatefromwbmp(string $filename):resource
imagecreatefromwebp(string $filename):resource
imagecreatefromxbm(string $filename):resource
imagecreatefromxpm(string $filename):resource
imagecreatetruecolor(int $width, int $height):resource
imagecrop(resource $image, array $rect):resource
imagecropauto(resource $image [, int $mode = -1 [, float $threshold = .5 [, int $color = -1]]]):resource
imagedashedline(resource $image, int $x1, int $y1, int $x2, int $y2, int $color):bool
imagedestroy(resource $image):bool
imageellipse(resource $image, int $cx, int $cy, int $width, int $height, int $color):bool
imagefill(resource $image, int $x, int $y, int $color):bool
imagefilledarc(resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color, int $style):bool
imagefilledellipse(resource $image, int $cx, int $cy, int $width, int $height, int $color):bool
imagefilledpolygon(resource $image, array $points, int $num_points, int $color):bool
imagefilledrectangle(resource $image, int $x1, int $y1, int $x2, int $y2, int $color):bool
imagefilltoborder(resource $image, int $x, int $y, int $border, int $color):bool
imagefilter(resource $image, int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4]]]]):bool
imageflip(resource $image, int $mode):bool
imagefontheight(int $font):int
imagefontwidth(int $font):int
imageftbbox(float $size, float $angle, string $fontfile, string $text [, array $extrainfo]):array
imagefttext(resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text [, array $extrainfo]):array
imagegammacorrect(resource $image, float $inputgamma, float $outputgamma):bool
imagegd(resource $image [, mixed $to = NULL]):bool
imagegd2(resource $image [, mixed $to = NULL [, int $chunk_size = 128 [, int $type = IMG_GD2_RAW]]]):bool
imagegetclip(resource $im):array
imagegif(resource $image [, mixed $to]):bool
imagegrabscreen(void):resource
imagegrabwindow(int $window_handle [, int $client_area = 0]):resource
imageinterlace(resource $image [, int $interlace = 0]):int
imageistruecolor(resource $image):bool
imagejpeg(resource $image [, mixed $to [, int $quality]]):bool
imagelayereffect(resource $image, int $effect):bool
imageline(resource $image, int $x1, int $y1, int $x2, int $y2, int $color):bool
imageloadfont(string $file):int
imageopenpolygon(resource $image, array $points, int $num_points, int $color):bool
imagepalettecopy(resource $destination, resource $source):void
imagepalettetotruecolor(resource $src):bool
imagepng(resource $image [, mixed $to [, int $quality [, int $filters]]]):bool
imagepolygon(resource $image, array $points, int $num_points, int $color):bool
imagepsbbox(string $text, resource $font, int $size):array
imagepsencodefont(resource $font_index, string $encodingfile):bool
imagepsextendfont(resource $font_index, float $extend):bool
imagepsfreefont(resource $font_index):bool
imagepsloadfont(string $filename):resource
imagepsslantfont(resource $font_index, float $slant):bool
imagepstext(resource $image, string $text, resource $font_index, int $size, int $foreground, int $background, int $x, int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4]]]]):array
imagerectangle(resource $image, int $x1, int $y1, int $x2, int $y2, int $color):bool
imageresolution(resource $image [, int $res_x [, int $res_y]]):mixed
imagerotate(resource $image, float $angle, int $bgd_color [, int $ignore_transparent = 0]):resource
imagesavealpha(resource $image, bool $saveflag):bool
imagescale(resource $image, int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED]]):resource
imagesetbrush(resource $image, resource $brush):bool
imagesetclip(resource $im, int $x1, int $y1, int $x2, int $y2):bool
imagesetinterpolation(resource $image [, int $method = IMG_BILINEAR_FIXED]):bool
imagesetpixel(resource $image, int $x, int $y, int $color):bool
imagesetstyle(resource $image, array $style):bool
imagesetthickness(resource $image, int $thickness):bool
imagesettile(resource $image, resource $tile):bool
imagestring(resource $image, int $font, int $x, int $y, string $string, int $color):bool
imagestringup(resource $image, int $font, int $x, int $y, string $string, int $color):bool
imagesx(resource $image):int
imagesy(resource $image):int
imagetruecolortopalette(resource $image, bool $dither, int $ncolors):bool
imagettfbbox(float $size, float $angle, string $fontfile, string $text):array
imagettftext(resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text):array
imagetypes(void):int
imagewbmp(resource $image [, mixed $to [, int $foreground]]):bool
imagewebp(resource $image [, mixed $to = NULL [, int $quality = 80]]):bool
imagexbm(resource $image, string $filename [, int $foreground]):bool
imap_8bit(string $string):string
imap_alerts(void):array
imap_append(resource $imap_stream, string $mailbox, string $message [, string $options = NULL [, string $internal_date = NULL]]):bool
imap_base64(string $text):string
imap_binary(string $string):string
imap_body(resource $imap_stream, int $msg_number [, int $options = 0]):string
imap_bodystruct(resource $imap_stream, int $msg_number, string $section):object
imap_check(resource $imap_stream):object
imap_clearflag_full(resource $imap_stream, string $sequence, string $flag [, int $options = 0]):bool
imap_close(resource $imap_stream [, int $flag = 0]):bool
imap_createmailbox().:This function is an alias of:
imap_createmailbox(resource $imap_stream, string $mailbox):bool
imap_delete(resource $imap_stream, int $msg_number [, int $options = 0]):bool
imap_deletemailbox(resource $imap_stream, string $mailbox):bool
imap_errors(void):array
imap_expunge(resource $imap_stream):bool
imap_fetch_overview(resource $imap_stream, string $sequence [, int $options = 0]):array
imap_fetchbody(resource $imap_stream, int $msg_number, string $section [, int $options = 0]):string
imap_fetchheader(resource $imap_stream, int $msg_number [, int $options = 0]):string
imap_fetchmime(resource $imap_stream, int $msg_number, string $section [, int $options = 0]):string
imap_fetchstructure(resource $imap_stream, int $msg_number [, int $options = 0]):object
imap_fetchtext(resource $imap_stream, int $msg_number [, int $options = 0]):string
imap_gc(resource $imap_stream, int $caches):bool
imap_get_quota(resource $imap_stream, string $quota_root):array
imap_get_quotaroot(resource $imap_stream, string $quota_root):array
imap_getacl(resource $imap_stream, string $mailbox):array
imap_getmailboxes(resource $imap_stream, string $ref, string $pattern):array
imap_getsubscribed(resource $imap_stream, string $ref, string $pattern):array
imap_headerinfo().:This function is an alias of:
imap_headerinfo(resource $imap_stream, int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL]]]):object
imap_headers(resource $imap_stream):array
imap_last_error(void):string
imap_list(resource $imap_stream, string $ref, string $pattern):array
imap_listmailbox(resource $imap_stream, string $ref, string $pattern):array
imap_listscan(resource $imap_stream, string $ref, string $pattern, string $content):array
imap_listsubscribed(resource $imap_stream, string $ref, string $pattern):array
imap_lsub(resource $imap_stream, string $ref, string $pattern):array
imap_mail_compose(array $envelope, array $body):string
imap_mail_copy(resource $imap_stream, string $msglist, string $mailbox [, int $options = 0]):bool
imap_mail_move(resource $imap_stream, string $msglist, string $mailbox [, int $options = 0]):bool
imap_mail(string $to, string $subject, string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL]]]]):bool
imap_mailboxmsginfo(resource $imap_stream):object
imap_mime_header_decode(string $text):array
imap_msgno(resource $imap_stream, int $uid):int
imap_mutf7_to_utf8(string $in):string
imap_num_msg(resource $imap_stream):int
imap_num_recent(resource $imap_stream):int
imap_open(string $mailbox, string $username, string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL]]]):resource
imap_ping(resource $imap_stream):bool
imap_qprint(string $string):string
imap_renamemailbox().:This function is an alias of:
imap_renamemailbox(resource $imap_stream, string $old_mbox, string $new_mbox):bool
imap_reopen(resource $imap_stream, string $mailbox [, int $options = 0 [, int $n_retries = 0]]):bool
imap_rfc822_parse_adrlist(string $address, string $default_host):array
imap_rfc822_parse_headers(string $headers [, string $defaulthost = "UNKNOWN"]):object
imap_rfc822_write_address(string $mailbox, string $host, string $personal):string
imap_savebody(resource $imap_stream, mixed $file, int $msg_number [, string $part_number = "" [, int $options = 0]]):bool
imap_scanmailboxIMAP Functions:imap_savebody
imap_scanmailbox(resource $imap_stream, string $ref, string $pattern, string $content):array
imap_search(resource $imap_stream, string $criteria [, int $options = SE_FREE [, string $charset = NULL]]):array
imap_set_quota(resource $imap_stream, string $quota_root, int $quota_limit):bool
imap_setacl(resource $imap_stream, string $mailbox, string $id, string $rights):bool
imap_setflag_full(resource $imap_stream, string $sequence, string $flag [, int $options = NIL]):bool
imap_sort(resource $imap_stream, int $criteria, int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NULL]]]):array
imap_status(resource $imap_stream, string $mailbox, int $options):object
imap_subscribe(resource $imap_stream, string $mailbox):bool
imap_thread(resource $imap_stream [, int $options = SE_FREE]):array
imap_timeout(int $timeout_type [, int $timeout = -1]):mixed
imap_uid(resource $imap_stream, int $msg_number):int
imap_undelete(resource $imap_stream, int $msg_number [, int $flags = 0]):bool
imap_unsubscribe(resource $imap_stream, string $mailbox):bool
imap_utf7_decode(string $text):string
imap_utf7_encode(string $data):string
imap_utf8_to_mutf7(string $in):string
imap_utf8(string $mime_encoded_text):string
implode(string $glue, array $pieces):string
import_request_variables(string $types [, string $prefix]):bool
in_array(mixed $needle, array $haystack [, bool $strict = FALSE]):bool
inclued_get_data(void):array
inet_ntop(string $in_addr):string
inet_pton(string $address):string
inflate_add(resource $context, string $encoded_data [, int $flush_mode = ZLIB_SYNC_FLUSH]):string
inflate_get_read_len(resource $resource):int
inflate_get_status(resource $resource):int
inflate_init(int $encoding [, array $options = array()]):resource
ingres_autocommit_state(resource $link):bool
ingres_autocommit(resource $link):bool
ingres_charset(resource $link):string
ingres_close(resource $link):bool
ingres_commit(resource $link):bool
ingres_connect([string $database [, string $username [, string $password [, array $options]]]]):resource
ingres_cursor(resource $result):string
ingres_errno([resource $link]):int
ingres_error([resource $link]):string
ingres_errsqlstate([resource $link]):string
ingres_escape_string(resource $link, string $source_string):string
ingres_execute(resource $result [, array $params [, string $types]]):bool
ingres_fetch_array(resource $result [, int $result_type]):array
ingres_fetch_assoc(resource $result):array
ingres_fetch_object(resource $result [, int $result_type]):object
ingres_fetch_proc_return(resource $result):int
ingres_fetch_row(resource $result):array
ingres_field_length(resource $result, int $index):int
ingres_field_name(resource $result, int $index):string
ingres_field_nullable(resource $result, int $index):bool
ingres_field_precision(resource $result, int $index):int
ingres_field_scale(resource $result, int $index):int
ingres_field_type(resource $result, int $index):string
ingres_free_result(resource $result):bool
ingres_next_error([resource $link]):bool
ingres_num_fields(resource $result):int
ingres_num_rows(resource $result):int
ingres_pconnect([string $database [, string $username [, string $password [, array $options]]]]):resource
ingres_prepare(resource $link, string $query):mixed
ingres_query(resource $link, string $query [, array $params [, string $types]]):mixed
ingres_result_seek(resource $result, int $position):bool
ingres_rollback(resource $link):bool
ingres_set_environment(resource $link, array $options):bool
ingres_unbuffered_query(resource $link, string $query [, array $params [, string $types]]):mixed
ini_alter(string $varname, string $newvalue):string
ini_get_all([string $extension [, bool $details = TRUE]]):array
ini_get(string $varname):string
ini_restore(string $varname):void
ini_set(string $varname, string $newvalue):string
inotify_add_watch(resource $inotify_instance, string $pathname, int $mask):int
inotify_init(void):resource
inotify_queue_len(resource $inotify_instance):int
inotify_read(resource $inotify_instance):array
inotify_rm_watch(resource $inotify_instance, int $watch_descriptor):bool
intdiv(int $dividend, int $divisor):int
interface_exists(string $interface_name [, bool $autoload = TRUE]):bool
intl_error_name(int $error_code):string
intl_get_error_code(void):int
intl_get_error_message(void):string
intl_is_failure(int $error_code):bool
intval(mixed $var [, int $base = 10]):int
ip2long(string $ip_address):int
iptcembed(string $iptcdata, string $jpeg_file_name [, int $spool = 0]):mixed
iptcparse(string $iptcblock):array
is_a(object $object, string $class_name [, bool $allow_string = FALSE]):bool
is_array(mixed $var):bool
is_bool(mixed $var):bool
is_callable(mixed $var [, bool $syntax_only = FALSE [, string &$callable_name]]):bool
is_countable(mixed $var):bool
is_dir(string $filename):bool
is_double(mixed $var):bool
is_executable(string $filename):bool
is_file(string $filename):bool
is_finite(float $val):bool
is_float(mixed $var):bool
is_infinite(float $val):bool
is_int(mixed $var):bool
is_integer(mixed $var):bool
is_iterable(mixed $var):bool
is_link(string $filename):bool
is_long(mixed $var):bool
is_nan(float $val):bool
is_null(mixed $var):bool
is_numeric(mixed $var):bool
is_object(mixed $var):bool
is_readable(string $filename):bool
is_real(mixed $var):bool
is_resource(mixed $var):bool
is_scalar(mixed $var):bool
is_soap_fault(mixed $object):bool
is_string(mixed $var):bool
is_subclass_of(mixed $object, string $class_name [, bool $allow_string = TRUE]):bool
is_tainted(string $string):bool
is_uploaded_file(string $filename):bool
is_writable(string $filename):bool
is_writeable(string $filename):bool
isset(mixed $var [, mixed $...]):bool
iterator_apply(Traversable $iterator, callable $function [, array $args = NULL]):int
iterator_count(Traversable $iterator):int
iterator_to_array(Traversable $iterator [, bool $use_keys = TRUE]):array
jddayofweek(int $julianday [, int $mode = CAL_DOW_DAYNO]):mixed
jdmonthname(int $julianday, int $mode):string
jdtofrench(int $juliandaycount):string
jdtogregorian(int $julianday):string
jdtojewish(int $juliandaycount [, bool $hebrew = FALSE [, int $fl = 0]]):string
jdtojulian(int $julianday):string
jdtounix(int $jday):int
jewishtojd(int $month, int $day, int $year):int
join(string $glue, array $pieces):string
jpeg2wbmp(string $jpegname, string $wbmpname, int $dest_height, int $dest_width, int $threshold):bool
json_decode(string $json [, bool $assoc = FALSE [, int $depth = 512 [, int $options = 0]]]):mixed
json_encode(mixed $value [, int $options = 0 [, int $depth = 512]]):string
json_last_error_msg(void):string
json_last_error(void):int
judy_type(Judy $array):int
judy_version(void):string
juliantojd(int $month, int $day, int $year):int
kadm5_chpass_principal(resource $handle, string $principal, string $password):bool
kadm5_create_principal(resource $handle, string $principal [, string $password [, array $options]]):bool
kadm5_delete_principal(resource $handle, string $principal):bool
kadm5_destroy(resource $handle):bool
kadm5_flush(resource $handle):bool
kadm5_get_policies(resource $handle):array
kadm5_get_principal(resource $handle, string $principal):array
kadm5_get_principals(resource $handle):array
kadm5_init_with_password(string $admin_server, string $realm, string $principal, string $password):resource
kadm5_modify_principal(resource $handle, string $principal, array $options):bool
key_exists().:This function is an alias of: array_
key(array $array):mixed
krsort(array &$array [, int $sort_flags = SORT_REGULAR]):bool
ksort(array &$array [, int $sort_flags = SORT_REGULAR]):bool
lcfirst(string $str):string
lcg_value(void):float
lchgrp(string $filename, mixed $group):bool
lchown(string $filename, mixed $user):bool
ldap_8859_to_t61(string $value):string
ldap_add(resource $link_identifier, string $dn, array $entry [, array $serverctrls]):bool
ldap_bind(resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL]]):bool
ldap_close(resource $link_identifier):bool
ldap_compare(resource $link_identifier, string $dn, string $attribute, string $value [, array $serverctrls]):mixed
ldap_connect([string $host = NULL [, int $port = 389]]):resource
ldap_control_paged_result_response(resource $link, resource $result [, string &$cookie [, int &$estimated]]):bool
ldap_control_paged_result(resource $link, int $pagesize [, bool $iscritical = FALSE [, string $cookie = ""]]):bool
ldap_count_entries(resource $link_identifier, resource $result_identifier):int
ldap_delete(resource $link_identifier, string $dn [, array $serverctrls]):bool
ldap_dn2ufn(string $dn):string
ldap_err2str(int $errno):string
ldap_errno(resource $link_identifier):int
ldap_error(resource $link_identifier):string
ldap_escape(string $value [, string $ignore [, int $flags]]):string
ldap_exop_passwd(resource $link [, string $user [, string $oldpw [, string $newpw [, array &$serverctrls]]]]):mixed
ldap_exop_refresh(resource $link, string $dn, int $ttl):int
ldap_exop_whoami(resource $link):string
ldap_exop(resource $link, string $reqoid [, string $reqdata [, array $servercontrols [, string &$retdata [, string &$retoid]]]]):mixed
ldap_explode_dn(string $dn, int $with_attrib):array
ldap_first_attribute(resource $link_identifier, resource $result_entry_identifier):string
ldap_first_entry(resource $link_identifier, resource $result_identifier):resource
ldap_first_reference(resource $link, resource $result):resource
ldap_free_result(resource $result_identifier):bool
ldap_get_attributes(resource $link_identifier, resource $result_entry_identifier):array
ldap_get_dn(resource $link_identifier, resource $result_entry_identifier):string
ldap_get_entries(resource $link_identifier, resource $result_identifier):array
ldap_get_option(resource $link_identifier, int $option, mixed &$retval):bool
ldap_get_values_len(resource $link_identifier, resource $result_entry_identifier, string $attribute):array
ldap_get_values(resource $link_identifier, resource $result_entry_identifier, string $attribute):array
ldap_list(resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls]]]]]]):resource
ldap_mod_add(resource $link_identifier, string $dn, array $entry [, array $serverctrls]):bool
ldap_mod_del(resource $link_identifier, string $dn, array $entry [, array $serverctrls]):bool
ldap_mod_replace(resource $link_identifier, string $dn, array $entry [, array $serverctrls]):bool
ldap_modify_batch(resource $link_identifier, string $dn, array $entry [, array $serverctrls]):bool
ldap_modify_batchldap_next_attributeLDAP Functions
ldap_next_attribute(resource $link_identifier, resource $result_entry_identifier):string
ldap_next_entry(resource $link_identifier, resource $result_entry_identifier):resource
ldap_next_reference(resource $link, resource $entry):resource
ldap_parse_exop(resource $link, resource $result [, string &$retdata [, string &$retoid]]):bool
ldap_parse_reference(resource $link, resource $entry, array &$referrals):bool
ldap_parse_result(resource $link, resource $result, int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals [, array &$serverctrls]]]]):bool
ldap_read(resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls]]]]]]):resource
ldap_rename(resource $link_identifier, string $dn, string $newrdn, string $newparent, bool $deleteoldrdn [, array $serverctrls]):bool
ldap_sasl_bind(resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL]]]]]]]):bool
ldap_search(resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls]]]]]]):resource
ldap_set_option(resource $link_identifier, int $option, mixed $newval):bool
ldap_set_rebind_proc(resource $link, callable $callback):bool
ldap_sort(resource $link, resource $result, string $sortfilter):bool
ldap_start_tls(resource $link):bool
ldap_t61_to_8859(string $value):string
ldap_unbind(resource $link_identifier):bool
levenshtein(string $str1, string $str2):int
libxml_clear_errors(void):void
libxml_disable_entity_loader([bool $disable = TRUE]):bool
libxml_get_errors(void):array
libxml_get_last_error(void):LibXMLError
libxml_set_external_entity_loader(callable $resolver_function):bool
libxml_set_streams_context(resource $streams_context):void
libxml_use_internal_errors([bool $use_errors = FALSE]):bool
link(string $target, string $link):bool
linkinfo(string $path):int
list(mixed $var1 [, mixed $...]):array
localeconv(void):array
localtime([int $timestamp = time() [, bool $is_associative = FALSE]]):array
log_cmd_delete(array $server, array $writeOptions, array $deleteOptions, array $protocolOptions)
log_cmd_insert(array $server, array $document, array $writeOptions, array $protocolOptions)
log_cmd_update(array $server, array $writeOptions, array $updateOptions, array $protocolOptions)
log_getmore(array $server, array $info)
log_killcursor(array $server, array $info)
log_reply(array $server, array $messageHeaders, array $operationHeaders)
log_write_batch(array $server, array $writeOptions, array $batch, array $protocolOptions)
log(float $arg [, float $base = M_E]):float
log10(float $arg):float
log1p(float $number):float
long2ip(int $proper_address):string
lstat(string $filename):array
ltrim(string $str [, string $character_mask]):string
lzf_compress(string $data):string
lzf_decompress(string $data):string
lzf_optimized_for(void):int
m_checkstatus(resource $conn, int $identifier):int
m_completeauthorizations(resource $conn, int &$array):int
m_connect(resource $conn):int
m_connectionerror(resource $conn):string
m_deletetrans(resource $conn, int $identifier):bool
m_destroyconn(resource $conn):bool
m_destroyengine(void):void
m_getcell(resource $conn, int $identifier, string $column, int $row):string
m_getcellbynum(resource $conn, int $identifier, int $column, int $row):string
m_getcommadelimited(resource $conn, int $identifier):string
m_getheader(resource $conn, int $identifier, int $column_num):string
m_initconn(void):resource
m_initengine(string $location):int
m_iscommadelimited(resource $conn, int $identifier):int
m_maxconntimeout(resource $conn, int $secs):bool
m_monitor(resource $conn):int
m_numcolumns(resource $conn, int $identifier):int
m_numrows(resource $conn, int $identifier):int
m_parsecommadelimited(resource $conn, int $identifier):int
m_responsekeys(resource $conn, int $identifier):array
m_responseparam(resource $conn, int $identifier, string $key):string
m_returnstatus(resource $conn, int $identifier):int
m_setblocking(resource $conn, int $tf):int
m_setdropfile(resource $conn, string $directory):int
m_setip(resource $conn, string $host, int $port):int
m_setssl_cafile(resource $conn, string $cafile):int
m_setssl_files(resource $conn, string $sslkeyfile, string $sslcertfile):int
m_setssl(resource $conn, string $host, int $port):int
m_settimeout(resource $conn, int $seconds):int
m_sslcert_gen_hash(string $filename):string
m_transactionssent(resource $conn):int
m_transinqueue(resource $conn):int
m_transkeyval(resource $conn, int $identifier, string $key, string $value):int
m_transnew(resource $conn):int
m_transsend(resource $conn, int $identifier):int
m_uwait(int $microsecs):int
m_validateidentifier(resource $conn, int $tf):int
m_verifyconnection(resource $conn, int $tf):bool
m_verifysslcert(resource $conn, int $tf):bool
magic_quotes_runtime():This function is an alias of: set_
mail(string $to, string $subject, string $message [, mixed $additional_headers [, string $additional_parameters]]):bool
mailparse_determine_best_xfer_encoding(resource $fp):string
mailparse_msg_create(void):resource
mailparse_msg_extract_part_file(resource $mimemail, mixed $filename [, callable $callbackfunc]):string
mailparse_msg_extract_part(resource $mimemail, string $msgbody [, callable $callbackfunc]):void
mailparse_msg_extract_whole_part_file(resource $mimemail, string $filename [, callable $callbackfunc]):string
mailparse_msg_free(resource $mimemail):bool
mailparse_msg_get_part_data(resource $mimemail):array
mailparse_msg_get_part(resource $mimemail, string $mimesection):resource
mailparse_msg_get_structure(resource $mimemail):array
mailparse_msg_parse_file(string $filename):resource
mailparse_msg_parse(resource $mimemail, string $data):bool
mailparse_rfc822_parse_addresses(string $addresses):array
mailparse_stream_encode(resource $sourcefp, resource $destfp, string $encoding):bool
mailparse_uudecode_all(resource $fp):array
main
max(array $values):mixed
maxdb_affected_rows(resource $link):int
maxdb::affected_rows(resource $link):int
maxdb_autocommit(resource $link, bool $mode):bool
maxdb::auto_commit(bool $mode):bool
maxdb_bind_param(resource $stmt, string $types, mixed &$var1 [, mixed &$...]):bool
maxdb_bind_result(resource $stmt, mixed &$var1 [, mixed &$...]):bool
maxdb_change_user(resource $link, string $user, string $password, string $database):bool
maxdb::change_user(string $user, string $password, string $database):bool
maxdb_character_set_name(resource $link):string
maxdb::character_set_name(void):string
maxdb_client_encoding(resource $link):string
maxdb_close_long_data(resource $stmt, int $param_nr):bool
maxdb::close_long_data(resource $stmt, int $param_nr):bool
maxdb_close(resource $link):bool
maxdb::close(void):bool
maxdb_commit(resource $link):bool
maxdb::commit(void):bool
maxdb_connect_errno(void):int
maxdb_connect_error(void):string
maxdb_connect([string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]]):resource
maxdb::__construct([string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]])
maxdb_data_seek(resource $result, int $offset):bool
maxdb_result::data_seek(int $offset):bool
maxdb_debug(string $debug):void
maxdb_disable_reads_from_master(resource $link):bool
maxdb::disable_reads_from_master(void):void
maxdb_disable_rpl_parse(resource $link):bool
maxdb_dump_debug_info(resource $link):bool
maxdb_embedded_connect([string $dbname]):resource
maxdb_enable_reads_from_master(resource $link):bool
maxdb_enable_rpl_parse(resource $link):bool
maxdb_errno(resource $link):int
maxdb::errno(resource $link):int
maxdb_error(resource $link):string
maxdb::error(resource $link):string
maxdb_escape_string(resource $link, string $escapestr):string
maxdb_execute(resource $stmt):bool
maxdb_fetch_array(resource $result [, int $resulttype]):mixed
maxdb_result::fetch_array([int $resulttype]):mixed
maxdb_fetch_assoc(resource $result):array
maxdb_result::fetch_assoc(void):array
maxdb_fetch_field_direct(resource $result, int $fieldnr):mixed
maxdb_result::fetch_field_direct(int $fieldnr):mixed
maxdb_fetch_field(resource $result):mixed
maxdb_result::fetch_field(void):mixed
maxdb_fetch_fields(resource $result):mixed
maxdb_result::fetch_fields(void):mixed
maxdb_fetch_lengths(resource $result):array
maxdb_result::lengths(resource $result):array
maxdb_fetch_object(object $result):object
maxdb_result::fetch_object(void):object
maxdb_fetch_row(resource $result):mixed
maxdb_result::fetch_row(void):mixed
maxdb_fetch_rowmaxdb_field_countMaxDB Functions
maxdb_field_count(resource $link):int
maxdb::field_count(void):int
maxdb_field_seek(resource $result, int $fieldnr):bool
maxdb_result::field_seek(int $fieldnr):bool
maxdb_field_tell(resource $result):int
maxdb_result::current_field(resource $result):int
maxdb_free_result(resource $result):void
maxdb_result::free(void):void
maxdb_get_client_info(void):string
maxdb_get_client_version(void):int
maxdb_get_host_info(resource $link):string
maxdb::get_host_info(resource $link):string
maxdb_get_metadata(resource $stmt):resource
maxdb_get_proto_info(resource $link):int
maxdb::protocol_version(resource $link):int
maxdb_get_server_info(resource $link):string
maxdb::server_info(resource $link):string
maxdb_get_server_version(resource $link):int
maxdb::server_version(resource $link):int
maxdb_info(resource $link):string
maxdb::info(resource $link):string
maxdb_init(void):resource
maxdb_insert_id(resource $link):mixed
maxdb::insert_id(resource $link):mixed
maxdb_kill(resource $link, int $processid):bool
maxdb::kill(int $processid):bool
maxdb_master_query(resource $link, string $query):bool
maxdb_more_results(resource $link):bool
maxdb::more_results(resource $link):bool
maxdb_multi_query(resource $link, string $query):bool
maxdb::multi_query(string $query):bool
maxdb_next_result(resource $link):bool
maxdb::next_result(resource $link):bool
maxdb_num_fields(resource $result):int
maxdb_result::field_count(resource $result):int
maxdb_num_rows(resource $result):int
maxdb::num_rows(resource $result):int
maxdb_options(resource $link, int $option, mixed $value):bool
maxdb::options(int $option, mixed $value):bool
maxdb_param_count(resource $stmt):int
maxdb_ping(resource $link):bool
maxdb::ping(void):bool
maxdb_prepare(resource $link, string $query):resource
maxdb::prepare(string $query):maxdb_stmt
maxdb_query(resource $link, string $query [, int $resultmode]):mixed
maxdb::query(string $query):mixed
maxdb_real_connect(resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]]):bool
maxdb::real_connect([string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]]):bool
maxdb_real_escape_string(resource $link, string $escapestr):string
maxdb::real_escape_string(string $escapestr):string
maxdb_real_query(resource $link, string $query):bool
maxdb::real_query(string $query):bool
maxdb_report(int $flags):bool
maxdb_rollback(resource $link):bool
maxdb::rollback(void):bool
maxdb_rpl_parse_enabled(resource $link):int
maxdb_rpl_probe(resource $link):bool
maxdb_rpl_query_type(resource $link):int
maxdb::rpl_query_type(void):int
maxdb_select_db(resource $link, string $dbname):bool
maxdb::select_db(resource $link, string $dbname):bool
maxdb_send_long_data(resource $stmt, int $param_nr, string $data):bool
maxdb_send_query(resource $link, string $query):bool
maxdb::send_query(string $query):bool
maxdb_server_end(void):void
maxdb_server_init([array $server [, array $groups]]):bool
maxdb_set_opt(resource $link, int $option, mixed $value):bool
maxdb_sqlstate(resource $link):string
maxdb::sqlstate(resource $link):string
maxdb_ssl_set(resource $link, string $key, string $cert, string $ca, string $capath, string $cipher):bool
maxdb::ssl_set(string $key, string $cert, string $ca, string $capath, string $cipher):bool
maxdb_stat(resource $link):string
maxdb::stat(void):string
maxdb_stmt_affected_rows(resource $stmt):int
maxdb_stmt::affected_rows(resource $stmt):int
maxdb_stmt_bind_param(resource $stmt, string $types, mixed &$var1 [, mixed &$...]):bool
maxdb_stmt::bind_param(string $types, mixed &$var1 [, mixed &$...]):bool
maxdb_stmt_bind_result(resource $stmt, mixed &$var1 [, mixed &$...]):bool
maxdb_stmt::bind_result(mixed &$var1 [, mixed &$...]):bool
maxdb_stmt_close_long_data(resource $stmt, int $param_nr):bool
maxdb_stmt::close_long_data(void):bool
maxdb_stmt_close(resource $stmt):bool
maxdb_stmt::close(void):bool
maxdb_stmt_data_seek(resource $statement, int $offset):bool
maxdb_stmt::data_seek(int $offset):bool
maxdb_stmt_errno(resource $stmt):int
maxdb_stmt::errno(resource $stmt):int
maxdb_stmt_error(resource $stmt):string
maxdb_stmt::error(resource $stmt):string
maxdb_stmt_execute(resource $stmt):bool
maxdb_stmt::execute(void):bool
maxdb_stmt_fetch(resource $stmt):bool
maxdb_stmt::fetch(void):bool
maxdb_stmt_free_result(resource $stmt):void
maxdb_stmt::free_result(void):void
maxdb_stmt_init(resource $link):resource
maxdb::stmt_init(void):object
maxdb_stmt_num_rows(resource $stmt):int
maxdb_stmt::num_rows(resource $stmt):int
maxdb_stmt_param_count(resource $stmt):int
maxdb_stmt::param_count(resource $stmt):int
maxdb_stmt_prepare(resource $stmt, string $query):bool
maxdb_stmt::prepare(string $query):mixed
maxdb_stmt_reset(resource $stmt):bool
maxdb_stmt::reset(void):bool
maxdb_stmt_result_metadata(resource $stmt):resource
maxdb_stmt::result_metadata(void):resource
maxdb_stmt_send_long_data(resource $stmt, int $param_nr, string $data):bool
maxdb_stmt::send_long_data(resource $stmt, int $param_nr, string $data):bool
maxdb_stmt_sqlstate(resource $stmt):string
maxdb_stmt_store_result(resource $stmt):bool
maxdb_stmt::store_result(void):object
maxdb_store_result(resource $link):resource
maxdb::store_result(void):object
maxdb_thread_id(resource $link):int
maxdb::thread_id(resource $link):int
maxdb_thread_safe(void):bool
maxdb_use_result(resource $link):resource
maxdb::use_result(void):resource
maxdb_warning_count(resource $link):int
maxdb::warning_count(resource $link):int
mb_check_encoding([string $var = NULL [, string $encoding = mb_internal_encoding()]]):bool
mb_chr(int $cp [, string $encoding]):string
mb_convert_case(string $str, int $mode [, string $encoding = mb_internal_encoding()]):string
mb_convert_encoding(string $str, string $to_encoding [, mixed $from_encoding = mb_internal_encoding()]):string
mb_convert_kana(string $str [, string $option = "KV" [, string $encoding = mb_internal_encoding()]]):string
mb_convert_variables(string $to_encoding, mixed $from_encoding, mixed &$vars [, mixed &$...]):string
mb_decode_mimeheader(string $str):string
mb_decode_numericentity(string $str, array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE]]):string
mb_detect_encoding(string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = FALSE]]):string
mb_detect_order([mixed $encoding_list = mb_detect_order()]):mixed
mb_encode_mimeheader(string $str [, string $charset = determined by mb_language() [, string $transfer_encoding = "B" [, string $linefeed = "\r\n" [, int $indent = 0]]]]):string
mb_encode_numericentity(string $str, array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE]]):string
mb_encoding_aliases(string $encoding):array
mb_ereg_match(string $pattern, string $string [, string $option = "msr"]):bool
mb_ereg_replace_callback(string $pattern, callable $callback, string $string [, string $option = "msr"]):string
mb_ereg_replace(string $pattern, string $replacement, string $string [, string $option = "msr"]):string
mb_ereg_search_getpos(void):int
mb_ereg_search_getregs(void):array
mb_ereg_search_init(string $string [, string $pattern [, string $option = "msr"]]):bool
mb_ereg_search_pos([string $pattern [, string $option = "ms"]]):array
mb_ereg_search_regs([string $pattern [, string $option = "ms"]]):array
mb_ereg_search_setpos(int $position):bool
mb_ereg_search([string $pattern [, string $option = "ms"]]):bool
mb_ereg(string $pattern, string $string [, array &$regs]):int
mb_eregi_replace(string $pattern, string $replace, string $string [, string $option = "msri"]):string
mb_eregi(string $pattern, string $string [, array &$regs]):int
mb_get_info([string $type = "all"]):mixed
mb_http_input([string $type = ""]):mixed
mb_http_output([string $encoding = mb_http_output()]):mixed
mb_internal_encoding([string $encoding = mb_internal_encoding()]):mixed
mb_language([string $language = mb_language()]):mixed
mb_list_encodings(void):array
mb_ord(string $str [, string $encoding]):int
mb_output_handler(string $contents, int $status):string
mb_parse_str(string $encoded_string [, array &$result]):bool
mb_preferred_mime_name(string $encoding):string
mb_regex_encoding([string $encoding = mb_regex_encoding()]):mixed
mb_regex_set_options([string $options = mb_regex_set_options()]):string
mb_scrub(string $str [, string $encoding]):string
mb_send_mail(string $to, string $subject, string $message [, mixed $additional_headers = NULL [, string $additional_parameter = NULL]]):bool
mb_split(string $pattern, string $string [, int $limit = -1]):array
mb_strcut(string $str, int $start [, int $length = NULL [, string $encoding = mb_internal_encoding()]]):string
mb_strimwidth(string $str, int $start, int $width [, string $trimmarker = "" [, string $encoding = mb_internal_encoding()]]):string
mb_stripos(string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]]):int
mb_stristr(string $haystack, string $needle [, bool $before_needle = FALSE [, string $encoding = mb_internal_encoding()]]):string
mb_strlen(string $str [, string $encoding = mb_internal_encoding()]):int
mb_strpos(string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]]):int
mb_strrchr(string $haystack, string $needle [, bool $part = FALSE [, string $encoding = mb_internal_encoding()]]):string
mb_strrichr(string $haystack, string $needle [, bool $part = FALSE [, string $encoding = mb_internal_encoding()]]):string
mb_strripos(string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]]):int
mb_strrpos(string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]]):int
mb_strstr(string $haystack, string $needle [, bool $before_needle = FALSE [, string $encoding = mb_internal_encoding()]]):string
mb_strtolower(string $str [, string $encoding = mb_internal_encoding()]):string
mb_strtoupper(string $str [, string $encoding = mb_internal_encoding()]):string
mb_strwidth(string $str [, string $encoding = mb_internal_encoding()]):int
mb_substitute_character([mixed $substchar = mb_substitute_character()]):mixed
mb_substr_count(string $haystack, string $needle [, string $encoding = mb_internal_encoding()]):int
mb_substr(string $str, int $start [, int $length = NULL [, string $encoding = mb_internal_encoding()]]):string
mcrypt_cbc(int $cipher, string $key, string $data, int $mode [, string $iv]):string
mcrypt_cfb(int $cipher, string $key, string $data, int $mode, string $iv):string
mcrypt_create_iv(int $size [, int $source = MCRYPT_DEV_URANDOM]):string
mcrypt_decrypt(string $cipher, string $key, string $data, string $mode [, string $iv]):string
mcrypt_ecb(int $cipher, string $key, string $data, int $mode):string
mcrypt_enc_get_algorithms_name(resource $td):string
mcrypt_enc_get_block_size(resource $td):int
mcrypt_enc_get_iv_size(resource $td):int
mcrypt_enc_get_key_size(resource $td):int
mcrypt_enc_get_modes_name(resource $td):string
mcrypt_enc_get_supported_key_sizes(resource $td):array
mcrypt_enc_is_block_algorithm_mode(resource $td):bool
mcrypt_enc_is_block_algorithm(resource $td):bool
mcrypt_enc_is_block_mode(resource $td):bool
mcrypt_enc_self_test(resource $td):int
mcrypt_encrypt(string $cipher, string $key, string $data, string $mode [, string $iv]):string
mcrypt_generic_deinit(resource $td):bool
mcrypt_generic_end(resource $td):bool
mcrypt_generic_init(resource $td, string $key, string $iv):int
mcrypt_generic(resource $td, string $data):string
mcrypt_get_block_size(int $cipher):int
mcrypt_get_cipher_name(int $cipher):string
mcrypt_get_iv_size(string $cipher, string $mode):int
mcrypt_get_key_size(int $cipher):int
mcrypt_list_algorithms([string $lib_dir = ini_get("mcrypt.algorithms_dir")]):array
mcrypt_list_modes([string $lib_dir = ini_get("mcrypt.modes_dir")]):array
mcrypt_module_close(resource $td):bool
mcrypt_module_get_algo_block_size(string $algorithm [, string $lib_dir]):int
mcrypt_module_get_algo_key_size(string $algorithm [, string $lib_dir]):int
mcrypt_module_get_supported_key_sizes(string $algorithm [, string $lib_dir]):array
mcrypt_module_is_block_algorithm_mode(string $mode [, string $lib_dir]):bool
mcrypt_module_is_block_algorithm(string $algorithm [, string $lib_dir]):bool
mcrypt_module_is_block_mode(string $mode [, string $lib_dir]):bool
mcrypt_module_open(string $algorithm, string $algorithm_directory, string $mode, string $mode_directory):resource
mcrypt_module_self_test(string $algorithm [, string $lib_dir]):bool
mcrypt_ofb(int $cipher, string $key, string $data, int $mode, string $iv):string
md5_file(string $filename [, bool $raw_output = FALSE]):string
md5(string $str [, bool $raw_output = FALSE]):string
mdecrypt_generic(resource $td, string $data):string
memcache_debug(bool $on_off):bool
memory_get_peak_usage([bool $real_usage = FALSE]):int
memory_get_usage([bool $real_usage = FALSE]):int
metaphone(string $str [, int $phonemes = 0]):string
method_exists(mixed $object, string $method_name):bool
mhash_count(void):int
mhash_get_block_size(int $hash):int
mhash_get_hash_name(int $hash):string
mhash_keygen_s2k(int $hash, string $password, string $salt, int $bytes):string
mhash(int $hash, string $data [, string $key]):string
microtime([bool $get_as_float = FALSE]):mixed
mime_content_type(string $filename):string
min(array $values):mixed
ming_keypress(string $char):int
ming_setcubicthreshold(int $threshold):void
ming_setscale(float $scale):void
ming_setswfcompression(int $level):void
ming_useconstants(int $use):void
ming_useswfversion(int $version):void
mkdir(string $pathname [, int $mode = 0777 [, bool $recursive = FALSE [, resource $context]]]):bool
mktime([int $hour = date("H") [, int $minute = date("i") [, int $second = date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date("Y") [, int $is_dst = -1]]]]]]]):int
money_format(string $format, float $number):string
MongoDB\BSON\fromJSON(string $json):string
MongoDB\BSON\fromPHP(array|object $value):string
MongoDB\BSON\toCanonicalExtendedJSON(string $bson):string
MongoDB\BSON\toJSON(string $bson):string
MongoDB\BSON\toPHP(string $bson [, array $typeMap = array()]):array|object
MongoDB\BSON\toRelaxedExtendedJSON(string $bson):string
MongoDB\Driver\Monitoring\addSubscriber(MongoDB\Driver\Monitoring\Subscriber $subscriber):void
MongoDB\Driver\Monitoring\removeSubscriber(MongoDB\Driver\Monitoring\Subscriber $subscriber):void
move_uploaded_file(string $filename, string $destination):bool
mqseries_back(resource $hconn, resource &$compCode, resource &$reason):void
mqseries_begin(resource $hconn, array $beginOptions, resource &$compCode, resource &$reason):void
mqseries_close(resource $hconn, resource $hobj, int $options, resource &$compCode, resource &$reason):void
mqseries_cmit(resource $hconn, resource &$compCode, resource &$reason):void
mqseries_conn(string $qManagerName, resource &$hconn, resource &$compCode, resource &$reason):void
mqseries_connx(string $qManagerName, array &$connOptions, resource &$hconn, resource &$compCode, resource &$reason):void
mqseries_disc(resource $hconn, resource &$compCode, resource &$reason):void
mqseries_get(resource $hConn, resource $hObj, array &$md, array &$gmo, int &$bufferLength, string &$msg, int &$data_length, resource &$compCode, resource &$reason):void
mqseries_inq(resource $hconn, resource $hobj, int $selectorCount, array $selectors, int $intAttrCount, resource &$intAttr, int $charAttrLength, resource &$charAttr, resource &$compCode, resource &$reason):void
mqseries_open(resource $hconn, array &$objDesc, int $option, resource &$hobj, resource &$compCode, resource &$reason):void
mqseries_put(resource $hConn, resource $hObj, array &$md, array &$pmo, string $message, resource &$compCode, resource &$reason):void
mqseries_put1(resource $hconn, resource &$objDesc, resource &$msgDesc, resource &$pmo, string $buffer, resource &$compCode, resource &$reason):void
mqseries_set(resource $hConn, resource $hObj, int $selectorCount, array $selectors, int $intAttrCount, array $intAttrs, int $charAttrLength, array $charAttrs, resource &$compCode, resource &$reason):void
mqseries_strerror(int $reason):string
msession_connect(string $host, string $port):bool
msession_count(void):int
msession_create(string $session [, string $classname [, string $data]]):bool
msession_destroy(string $name):bool
msession_disconnect(void):void
msession_find(string $name, string $value):array
msession_get_array(string $session):array
msession_get_data(string $session):string
msession_get(string $session, string $name, string $value):string
msession_inc(string $session, string $name):string
msession_list(void):array
msession_listvar(string $name):array
msession_lock(string $name):int
msession_plugin(string $session, string $val [, string $param]):string
msession_randstr(int $param):string
msession_set_array(string $session, array $tuples):void
msession_set_data(string $session, string $value):bool
msession_set(string $session, string $name, string $value):bool
msession_timeout(string $session [, int $param]):int
msession_uniq(int $param [, string $classname [, string $data]]):string
msession_unlock(string $session, int $key):int
msg_get_queue(int $key [, int $perms = 0666]):resource
msg_queue_exists(int $key):bool
msg_receive(resource $queue, int $desiredmsgtype, int &$msgtype, int $maxsize, mixed &$message [, bool $unserialize = TRUE [, int $flags = 0 [, int &$errorcode]]]):bool
msg_remove_queue(resource $queue):bool
msg_send(resource $queue, int $msgtype, mixed $message [, bool $serialize = TRUE [, bool $blocking = TRUE [, int &$errorcode]]]):bool
msg_set_queue(resource $queue, array $data):bool
msg_stat_queue(resource $queue):array
msql_affected_rows(resource $result):int
msql_close([resource $link_identifier]):bool
msql_connect([string $hostname]):resource
msql_create_db(string $database_name [, resource $link_identifier]):bool
msql_createdb(string $database_name [, resource $link_identifier]):bool
msql_data_seek(resource $result, int $row_number):bool
msql_db_query(string $database, string $query [, resource $link_identifier]):resource
msql_dbname(resource $result, int $row [, mixed $field]):string
msql_drop_db(string $database_name [, resource $link_identifier]):bool
msql_error(void):string
msql_fetch_array(resource $result [, int $result_type]):array
msql_fetch_field(resource $result [, int $field_offset = 0]):object
msql_fetch_object(resource $result):object
msql_fetch_row(resource $result):array
msql_field_flags(resource $result, int $field_offset):string
msql_field_len(resource $result, int $field_offset):int
msql_field_name(resource $result, int $field_offset):string
msql_field_seek(resource $result, int $field_offset):bool
msql_field_table(resource $result, int $field_offset):int
msql_field_type(resource $result, int $field_offset):string
msql_fieldflags(resource $result, int $field_offset):string
msql_fieldlen(resource $result, int $field_offset):int
msql_fieldname(resource $result, int $field_offset):string
msql_fieldtable(resource $result, int $field_offset):int
msql_fieldtype(resource $result, int $field_offset):string
msql_free_result(resource $result):bool
msql_list_dbs([resource $link_identifier]):resource
msql_list_fields(string $database, string $tablename [, resource $link_identifier]):resource
msql_list_tables(string $database [, resource $link_identifier]):resource
msql_num_fields(resource $result):int
msql_num_rows(resource $query_identifier):int
msql_numfields(resource $result):int
msql_numrows(resource $query_identifier):int
msql_pconnect([string $hostname]):resource
msql_query(string $query [, resource $link_identifier]):resource
msql_regcase(string $string):string
msql_result(resource $result, int $row [, mixed $field]):string
msql_select_db(string $database_name [, resource $link_identifier]):bool
msql_tablename(resource $result, int $row [, mixed $field]):string
msql_db_query().:This function is an alias of
mssql_bind(resource $stmt, string $param_name, mixed &$var, int $type [, bool $is_output = FALSE [, bool $is_null = FALSE [, int $maxlen = -1]]]):bool
mssql_close([resource $link_identifier]):bool
mssql_connect([string $servername [, string $username [, string $password [, bool $new_link = FALSE]]]]):resource
mssql_data_seek(resource $result_identifier, int $row_number):bool
mssql_execute(resource $stmt [, bool $skip_results = FALSE]):mixed
mssql_fetch_array(resource $result [, int $result_type = MSSQL_BOTH]):array
mssql_fetch_assoc(resource $result_id):array
mssql_fetch_batch(resource $result):int
mssql_fetch_field(resource $result [, int $field_offset = -1]):object
mssql_fetch_object(resource $result):object
mssql_fetch_row(resource $result):array
mssql_field_length(resource $result [, int $offset = -1]):int
mssql_field_name(resource $result [, int $offset = -1]):string
mssql_field_seek(resource $result, int $field_offset):bool
mssql_field_type(resource $result [, int $offset = -1]):string
mssql_free_result(resource $result):bool
mssql_free_statement(resource $stmt):bool
mssql_get_last_message(void):string
mssql_guid_string(string $binary [, bool $short_format = FALSE]):string
mssql_init(string $sp_name [, resource $link_identifier]):resource
mssql_min_error_severity(int $severity):void
mssql_min_message_severity(int $severity):void
mssql_next_result(resource $result_id):bool
mssql_num_fields(resource $result):int
mssql_num_rows(resource $result):int
mssql_pconnect([string $servername [, string $username [, string $password [, bool $new_link = FALSE]]]]):resource
mssql_query(string $query [, resource $link_identifier [, int $batch_size = 0]]):mixed
mssql_result(resource $result, int $row, mixed $field):string
mssql_rows_affected(resource $link_identifier):int
mssql_select_db(string $database_name [, resource $link_identifier]):bool
mt_getrandmax(void):int
mt_rand(void):int
mt_srand([int $seed [, int $mode = MT_RAND_MT19937]]):void
mysql_affected_rows([resource $link_identifier = NULL]):int
mysql_client_encoding([resource $link_identifier = NULL]):string
mysql_close([resource $link_identifier = NULL]):bool
mysql_connect([string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, bool $new_link = FALSE [, int $client_flags = 0]]]]]):resource
mysql_create_db(string $database_name [, resource $link_identifier = NULL]):bool
mysql_data_seek(resource $result, int $row_number):bool
mysql_db_name(resource $result, int $row [, mixed $field = NULL]):string
mysql_db_query(string $database, string $query [, resource $link_identifier = NULL]):resource
mysql_drop_db(string $database_name [, resource $link_identifier = NULL]):bool
mysql_errno([resource $link_identifier = NULL]):int
mysql_error([resource $link_identifier = NULL]):string
mysql_escape_string(string $unescaped_string):string
mysql_fetch_array(resource $result [, int $result_type = MYSQL_BOTH]):array
mysql_fetch_assoc(resource $result):array
mysql_fetch_field(resource $result [, int $field_offset = 0]):object
mysql_fetch_lengths(resource $result):array
mysql_fetch_object(resource $result [, string $class_name [, array $params]]):object
mysql_fetch_row(resource $result):array
mysql_field_flags(resource $result, int $field_offset):string
mysql_field_len(resource $result, int $field_offset):int
mysql_field_name(resource $result, int $field_offset):string
mysql_field_seek(resource $result, int $field_offset):bool
mysql_field_table(resource $result, int $field_offset):string
mysql_field_type(resource $result, int $field_offset):string
mysql_free_result(resource $result):bool
mysql_get_client_info(void):string
mysql_get_host_info([resource $link_identifier = NULL]):string
mysql_get_proto_info([resource $link_identifier = NULL]):int
mysql_get_server_info([resource $link_identifier = NULL]):string
mysql_info([resource $link_identifier = NULL]):string
mysql_insert_id([resource $link_identifier = NULL]):int
mysql_list_dbs([resource $link_identifier = NULL]):resource
mysql_list_fields(string $database_name, string $table_name [, resource $link_identifier = NULL]):resource
mysql_list_processes([resource $link_identifier = NULL]):resource
mysql_list_tables(string $database [, resource $link_identifier = NULL]):resource
mysql_num_fields(resource $result):int
mysql_num_rows(resource $result):int
mysql_pconnect([string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, int $client_flags = 0]]]]):resource
mysql_ping([resource $link_identifier = NULL]):bool
mysql_query(string $query [, resource $link_identifier = NULL]):mixed
mysql_real_escape_string(string $unescaped_string [, resource $link_identifier = NULL]):string
mysql_result(resource $result, int $row [, mixed $field = 0]):string
mysql_select_db(string $database_name [, resource $link_identifier = NULL]):bool
mysql_set_charset(string $charset [, resource $link_identifier = NULL]):bool
mysql_stat([resource $link_identifier = NULL]):string
mysql_tablename(resource $result, int $i):string
mysql_thread_id([resource $link_identifier = NULL]):int
mysql_unbuffered_query(string $query [, resource $link_identifier = NULL]):resource
expression(string $expression):object mysql_xdevapi\
getSession(string $uri):mysql_xdevapi\Session mysql_xdevapi\
mysqli_bind_param(mysqli_stmt $stmt, string $types, mixed &$var1 [, mixed &$...]):bool
mysqli_bind_result(mysqli_stmt $stmt, mixed &$var1 [, mixed &$...]):bool
mysqli_client_encoding(mysqli $link):string
mysqli_connect([string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, bool $new_link = FALSE [, int $client_flags = 0]]]]])|||||resource|||||
mysqli::disable_reads_from_master(void):void
mysqli_disable_reads_from_master(mysqli $link):bool
mysqli_disable_rpl_parse(mysqli $link):bool
mysqli_enable_reads_from_master(mysqli $link):bool
mysqli_enable_rpl_parse(mysqli $link):bool
mysqli_escape_string(mysqli $link, string $escapestr):string
mysqli_execute() is deprecated and will be removed.
mysqli_fetch(mysqli_stmt $stmt):bool
mysqli_get_cache_stats(void):array
mysqli_get_client_stats(void):array
mysqli_get_links_stats(void):array
mysqli_get_metadata(mysqli_stmt $stmt):mysqli_result
mysqli_master_query(mysqli $link, string $query):bool
mysqli_param_count(mysqli_stmt $stmt):int
mysqli_report(int $flags):bool
mysqli_rpl_parse_enabled(mysqli $link):int
mysqli_rpl_probe(mysqli $link):bool
mysqli_send_long_data(mysqli_stmt $stmt, int $param_nr, string $data):bool
mysqli::set_opt(mysqli $link, int $option, mixed $value):bool
mysqli_set_opt(mysqli $link, int $option, mixed $value):bool
mysqli_slave_query(mysqli $link, string $query):bool
mysqlnd_memcache_get_config(mixed $connection):array
mysqlnd_memcache_set(mixed $mysql_connection [, Memcached $memcache_connection [, string $pattern [, callback $callback]]]):bool
mysqlnd_ms_dump_servers(mixed $connection):array
mysqlnd_ms_fabric_select_global(mixed $connection, mixed $table_name):array
mysqlnd_ms_fabric_select_shard(mixed $connection, mixed $table_name, mixed $shard_key):array
mysqlnd_ms_get_last_gtid(mixed $connection):string
mysqlnd_ms_get_last_used_connection(mixed $connection):array
mysqlnd_ms_get_stats(void):array
mysqlnd_ms_match_wild(string $table_name, string $wildcard):bool
mysqlnd_ms_query_is_select(string $query):int
mysqlnd_ms_set_qos(mixed $connection, int $service_level [, int $service_level_option [, mixed $option_value]]):bool
mysqlnd_ms_set_user_pick_server(string $function):bool
mysqlnd_ms_xa_begin(mixed $connection, string $gtrid [, int $timeout]):int
mysqlnd_ms_xa_commit(mixed $connection, string $gtrid):int
mysqlnd_ms_xa_gc(mixed $connection [, string $gtrid [, bool $ignore_max_retries]]):int
mysqlnd_ms_xa_rollback(mixed $connection, string $gtrid):int
mysqlnd_qc_clear_cache(void):bool
mysqlnd_qc_get_available_handlers(void):array
mysqlnd_qc_get_cache_info(void):array
mysqlnd_qc_get_core_stats(void):array
mysqlnd_qc_get_normalized_query_trace_log(void):array
mysqlnd_qc_get_query_trace_log(void):array
mysqlnd_qc_set_cache_condition(int $condition_type, mixed $condition, mixed $condition_option):bool
mysqlnd_qc_set_is_select(string $callback):mixed
mysqlnd_qc_set_storage_handler(string $handler):bool
mysqlnd_qc_set_user_handlers(string $get_hash, string $find_query_in_cache, string $return_to_cache, string $add_query_to_cache_if_not_exists, string $query_is_select, string $update_query_run_time_stats, string $get_stats, string $clear_cache):bool
mysqlnd_uh_convert_to_mysqlnd(mysqli &$mysql_connection):resource
mysqlnd_uh_set_connection_proxy(MysqlndUhConnection &$connection_proxy [, mysqli &$mysqli_connection]):bool
mysqlnd_uh_set_statement_proxy(MysqlndUhStatement &$statement_proxy):bool
natcasesort(array &$array):bool
natsort(array &$array):bool
ncurses_addch(int $ch):int
ncurses_addchnstr(string $s, int $n):int
ncurses_addchstr(string $s):int
ncurses_addnstr(string $s, int $n):int
ncurses_addstr(string $text):int
ncurses_assume_default_colors(int $fg, int $bg):int
ncurses_attroff(int $attributes):int
ncurses_attron(int $attributes):int
ncurses_attrset(int $attributes):int
ncurses_baudrate(void):int
ncurses_beep(void):int
ncurses_bkgd(int $attrchar):int
ncurses_bkgdset(int $attrchar):void
ncurses_border(int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner):int
ncurses_bottom_panel(resource $panel):int
ncurses_can_change_color(void):bool
ncurses_cbreak(void):bool
ncurses_clear(void):bool
ncurses_clrtobot(void):bool
ncurses_clrtoeol(void):bool
ncurses_color_content(int $color, int &$r, int &$g, int &$b):int
ncurses_color_set(int $pair):int
ncurses_curs_set(int $visibility):int
ncurses_def_prog_mode(void):bool
ncurses_def_shell_mode(void):bool
ncurses_define_key(string $definition, int $keycode):int
ncurses_del_panel(resource $panel):bool
ncurses_delay_output(int $milliseconds):int
ncurses_delch(void):bool
ncurses_deleteln(void):bool
ncurses_delwin(resource $window):bool
ncurses_doupdate(void):bool
ncurses_echo(void):bool
ncurses_echochar(int $character):int
ncurses_end(void):int
ncurses_erase(void):bool
ncurses_erasechar(void):string
ncurses_filter(void):void
ncurses_flash(void):bool
ncurses_flushinp(void):bool
ncurses_getch(void):int
ncurses_getmaxyx(resource $window, int &$y, int &$x):void
ncurses_getmouse(array &$mevent):bool
ncurses_getyx(resource $window, int &$y, int &$x):void
ncurses_halfdelay(int $tenth):int
ncurses_has_colors(void):bool
ncurses_has_ic(void):bool
ncurses_has_il(void):bool
ncurses_has_key(int $keycode):int
ncurses_hide_panel(resource $panel):int
ncurses_hline(int $charattr, int $n):int
ncurses_inch(void):string
ncurses_init_color(int $color, int $r, int $g, int $b):int
ncurses_init_pair(int $pair, int $fg, int $bg):int
ncurses_init(void):void
ncurses_insch(int $character):int
ncurses_insdelln(int $count):int
ncurses_insertln(void):int
ncurses_insstr(string $text):int
ncurses_instr(string &$buffer):int
ncurses_isendwin(void):bool
ncurses_keyok(int $keycode, bool $enable):int
ncurses_keypad(resource $window, bool $bf):int
ncurses_killchar(void):string
ncurses_longname(void):string
ncurses_meta(resource $window, bool $8bit):int
ncurses_mouse_trafo(int &$y, int &$x, bool $toscreen):bool
ncurses_mouseinterval(int $milliseconds):int
ncurses_mousemask(int $newmask, int &$oldmask):int
ncurses_move_panel(resource $panel, int $startx, int $starty):int
ncurses_move(int $y, int $x):int
ncurses_mvaddch(int $y, int $x, int $c):int
ncurses_mvaddchnstr(int $y, int $x, string $s, int $n):int
ncurses_mvaddchstr(int $y, int $x, string $s):int
ncurses_mvaddnstr(int $y, int $x, string $s, int $n):int
ncurses_mvaddstr(int $y, int $x, string $s):int
ncurses_mvcur(int $old_y, int $old_x, int $new_y, int $new_x):int
ncurses_mvdelch(int $y, int $x):int
ncurses_mvgetch(int $y, int $x):int
ncurses_mvhline(int $y, int $x, int $attrchar, int $n):int
ncurses_mvinch(int $y, int $x):int
ncurses_mvvline(int $y, int $x, int $attrchar, int $n):int
ncurses_mvwaddstr(resource $window, int $y, int $x, string $text):int
ncurses_napms(int $milliseconds):int
ncurses_new_panel(resource $window):resource
ncurses_newpad(int $rows, int $cols):resource
ncurses_newwin(int $rows, int $cols, int $y, int $x):resource
ncurses_nl(void):bool
ncurses_nocbreak(void):bool
ncurses_noecho(void):bool
ncurses_nonl(void):bool
ncurses_noqiflush(void):void
ncurses_noraw(void):bool
ncurses_pair_content(int $pair, int &$f, int &$b):int
ncurses_panel_above(resource $panel):resource
ncurses_panel_below(resource $panel):resource
ncurses_panel_window(resource $panel):resource
ncurses_pnoutrefresh(resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol):int
ncurses_prefresh(resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol):int
ncurses_putp(string $text):int
ncurses_qiflush(void):void
ncurses_raw(void):bool
ncurses_refresh(int $ch):int
ncurses_replace_panel(resource $panel, resource $window):int
ncurses_reset_prog_mode(void):int
ncurses_reset_shell_mode(void):int
ncurses_resetty(void):bool
ncurses_savetty(void):bool
ncurses_scr_dump(string $filename):int
ncurses_scr_init(string $filename):int
ncurses_scr_restore(string $filename):int
ncurses_scr_set(string $filename):int
ncurses_scrl(int $count):int
ncurses_show_panel(resource $panel):int
ncurses_slk_attr(void):int
ncurses_slk_attroff(int $intarg):int
ncurses_slk_attron(int $intarg):int
ncurses_slk_attrset(int $intarg):int
ncurses_slk_clear(void):bool
ncurses_slk_color(int $intarg):int
ncurses_slk_init(int $format):bool
ncurses_slk_noutrefresh(void):bool
ncurses_slk_refresh(void):int
ncurses_slk_restore(void):int
ncurses_slk_set(int $labelnr, string $label, int $format):bool
ncurses_slk_touch(void):int
ncurses_standend(void):int
ncurses_standout(void):int
ncurses_start_color(void):int
ncurses_termattrs(void):bool
ncurses_termname(void):string
ncurses_timeout(int $millisec):void
ncurses_top_panel(resource $panel):int
ncurses_typeahead(int $fd):int
ncurses_ungetch(int $keycode):int
ncurses_ungetmouse(array $mevent):bool
ncurses_update_panels(void):void
ncurses_use_default_colors(void):bool
ncurses_use_env(bool $flag):void
ncurses_use_extended_names(bool $flag):int
ncurses_vidattr(int $intarg):int
ncurses_vline(int $charattr, int $n):int
ncurses_waddch(resource $window, int $ch):int
ncurses_waddstr(resource $window, string $str [, int $n]):int
ncurses_wattroff(resource $window, int $attrs):int
ncurses_wattron(resource $window, int $attrs):int
ncurses_wattrset(resource $window, int $attrs):int
ncurses_wborder(resource $window, int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner):int
ncurses_wclear(resource $window):int
ncurses_wcolor_set(resource $window, int $color_pair):int
ncurses_werase(resource $window):int
ncurses_wgetch(resource $window):int
ncurses_whline(resource $window, int $charattr, int $n):int
ncurses_wmouse_trafo(resource $window, int &$y, int &$x, bool $toscreen):bool
ncurses_wmove(resource $window, int $y, int $x):int
ncurses_wnoutrefresh(resource $window):int
ncurses_wrefresh(resource $window):int
ncurses_wstandend(resource $window):int
ncurses_wstandout(resource $window):int
ncurses_wvline(resource $window, int $charattr, int $n):int
newt_bell(void):void
newt_button_bar(array &$buttons):resource
newt_button(int $left, int $top, string $text):resource
newt_centered_window(int $width, int $height [, string $title]):int
newt_checkbox_get_value(resource $checkbox):string
newt_checkbox_set_flags(resource $checkbox, int $flags, int $sense):void
newt_checkbox_set_value(resource $checkbox, string $value):void
newt_checkbox_tree_add_item(resource $checkboxtree, string $text, mixed $data, int $flags, int $index [, int $...]):void
newt_checkbox_tree_find_item(resource $checkboxtree, mixed $data):array
newt_checkbox_tree_get_current(resource $checkboxtree):mixed
newt_checkbox_tree_get_entry_value(resource $checkboxtree, mixed $data):string
newt_checkbox_tree_get_multi_selection(resource $checkboxtree, string $seqnum):array
newt_checkbox_tree_get_selection(resource $checkboxtree):array
newt_checkbox_tree_multi(int $left, int $top, int $height, string $seq [, int $flags]):resource
newt_checkbox_tree_set_current(resource $checkboxtree, mixed $data):void
newt_checkbox_tree_set_entry_value(resource $checkboxtree, mixed $data, string $value):void
newt_checkbox_tree_set_entry(resource $checkboxtree, mixed $data, string $text):void
newt_checkbox_tree_set_width(resource $checkbox_tree, int $width):void
newt_checkbox_tree(int $left, int $top, int $height [, int $flags]):resource
newt_checkbox(int $left, int $top, string $text, string $def_value [, string $seq]):resource
newt_clear_key_buffer(void):void
newt_cls(void):void
newt_compact_button(int $left, int $top, string $text):resource
newt_component_add_callback(resource $component, mixed $func_name, mixed $data):void
newt_component_takes_focus(resource $component, bool $takes_focus):void
newt_create_grid(int $cols, int $rows):resource
newt_cursor_off(void):void
newt_cursor_on(void):void
newt_delay(int $microseconds):void
newt_draw_form(resource $form):void
newt_draw_root_text(int $left, int $top, string $text):void
newt_entry_get_value(resource $entry):string
newt_entry_set_filter(resource $entry, callable $filter, mixed $data):void
newt_entry_set_flags(resource $entry, int $flags, int $sense):void
newt_entry_set(resource $entry, string $value [, bool $cursor_at_end]):void
newt_entry(int $left, int $top, int $width [, string $init_value [, int $flags]]):resource
newt_finished(void):int
newt_form_add_component(resource $form, resource $component):void
newt_form_add_components(resource $form, array $components):void
newt_form_add_hot_key(resource $form, int $key):void
newt_form_destroy(resource $form):void
newt_form_get_current(resource $form):resource
newt_form_run(resource $form, array &$exit_struct):void
newt_form_set_background(resource $from, int $background):void
newt_form_set_height(resource $form, int $height):void
newt_form_set_size(resource $form):void
newt_form_set_timer(resource $form, int $milliseconds):void
newt_form_set_width(resource $form, int $width):void
newt_form_watch_fd(resource $form, resource $stream [, int $flags]):void
newt_form([resource $vert_bar [, string $help [, int $flags]]]):resource
newt_get_screen_size(int &$cols, int &$rows):void
newt_grid_add_components_to_form(resource $grid, resource $form, bool $recurse):void
newt_grid_basic_window(resource $text, resource $middle, resource $buttons):resource
newt_grid_free(resource $grid, bool $recurse):void
newt_grid_get_size(resouce $grid, int &$width, int &$height):void
newt_grid_h_close_stacked(int $element1_type, resource $element1 [, int $... [, resource $...]]):resource
newt_grid_h_stacked(int $element1_type, resource $element1 [, int $... [, resource $...]]):resource
newt_grid_place(resource $grid, int $left, int $top):void
newt_grid_set_field(resource $grid, int $col, int $row, int $type, resource $val, int $pad_left, int $pad_top, int $pad_right, int $pad_bottom, int $anchor [, int $flags]):void
newt_grid_simple_window(resource $text, resource $middle, resource $buttons):resource
newt_grid_v_close_stacked(int $element1_type, resource $element1 [, int $... [, resource $...]]):resource
newt_grid_v_stacked(int $element1_type, resource $element1 [, int $... [, resource $...]]):resource
newt_grid_wrapped_window_at(resource $grid, string $title, int $left, int $top):void
newt_grid_wrapped_window(resource $grid, string $title):void
newt_init(void):int
newt_label_set_text(resource $label, string $text):void
newt_label(int $left, int $top, string $text):resource
newt_listbox_append_entry(resource $listbox, string $text, mixed $data):void
newt_listbox_clear_selection(resource $listbox):void
newt_listbox_clear(resource $listobx):void
newt_listbox_delete_entry(resource $listbox, mixed $key):void
newt_listbox_get_current(resource $listbox):string
newt_listbox_get_selection(resource $listbox):array
newt_listbox_insert_entry(resource $listbox, string $text, mixed $data, mixed $key):void
newt_listbox_item_count(resource $listbox):int
newt_listbox_select_item(resource $listbox, mixed $key, int $sense):void
newt_listbox_set_current_by_key(resource $listbox, mixed $key):void
newt_listbox_set_current(resource $listbox, int $num):void
newt_listbox_set_data(resource $listbox, int $num, mixed $data):void
newt_listbox_set_entry(resource $listbox, int $num, string $text):void
newt_listbox_set_width(resource $listbox, int $width):void
newt_listbox(int $left, int $top, int $height [, int $flags]):resource
newt_listitem_get_data(resource $item):mixed
newt_listitem_set(resource $item, string $text):void
newt_listitem(int $left, int $top, string $text, bool $is_default, resouce $prev_item, mixed $data [, int $flags]):resource
newt_open_window(int $left, int $top, int $width, int $height [, string $title]):int
newt_pop_help_line(void):void
newt_pop_window(void):void
newt_push_help_line([string $text]):void
newt_radio_get_current(resource $set_member):resource
newt_radiobutton(int $left, int $top, string $text, bool $is_default [, resource $prev_button]):resource
newt_redraw_help_line(void):void
newt_reflow_text(string $text, int $width, int $flex_down, int $flex_up, int &$actual_width, int &$actual_height):string
newt_refresh(void):void
newt_resize_screen([bool $redraw]):void
newt_resume(void):void
newt_run_form(resource $form):resource
newt_scale_set(resource $scale, int $amount):void
newt_scale(int $left, int $top, int $width, int $full_value):resource
newt_scrollbar_set(resource $scrollbar, int $where, int $total):void
newt_set_help_callback(mixed $function):void
newt_set_suspend_callback(callable $function, mixed $data):void
newt_suspend(void):void
newt_textbox_get_num_lines(resource $textbox):int
newt_textbox_reflowed(int $left, int $top, char $*text, int $width, int $flex_down, int $flex_up [, int $flags]):resource
newt_textbox_set_height(resource $textbox, int $height):void
newt_textbox_set_text(resource $textbox, string $text):void
newt_textbox(int $left, int $top, int $width, int $height [, int $flags]):resource
newt_vertical_scrollbar(int $left, int $top, int $height [, int $normal_colorset [, int $thumb_colorset]]):resource
newt_wait_for_key(void):void
newt_win_choice(string $title, string $button1_text, string $button2_text, string $format [, mixed $args [, mixed $...]]):int
newt_win_entries(string $title, string $text, int $suggested_width, int $flex_down, int $flex_up, int $data_width, array &$items, string $button1 [, string $...]):int
newt_win_menu(string $title, string $text, int $suggestedWidth, int $flexDown, int $flexUp, int $maxListHeight, array $items, int &$listItem [, string $button1 [, string $...]]):int
newt_win_message(string $title, string $button_text, string $format [, mixed $args [, mixed $...]]):void
newt_win_messagev(string $title, string $button_text, string $format, array $args):void
newt_win_ternary(string $title, string $button1_text, string $button2_text, string $button3_text, string $format [, mixed $args [, mixed $...]]):int
next(array &$array):mixed
ngettext(string $msgid1, string $msgid2, int $n):string
nl_langinfo(int $item):string
nl2br(string $string [, bool $is_xhtml = TRUE]):string
nsapi_request_headers(void):array
nsapi_response_headers(void):array
nsapi_virtual(string $uri):bool
number_format(float $number [, int $decimals = 0]):string
oauth_get_sbs(string $http_method, string $uri [, array $request_parameters]):string
oauth_urlencode(string $uri):string
ob_clean(void):void
ob_end_clean(void):bool
ob_end_flush(void):bool
ob_flush(void):void
ob_get_clean(void):string
ob_get_contents(void):string
ob_get_flush(void):string
ob_get_length(void):int
ob_get_level(void):int
ob_get_status([bool $full_status = FALSE]):array
ob_gzhandler(string $buffer, int $mode):string
ob_iconv_handler(string $contents, int $status):string
ob_implicit_flush([int $flag = 1]):void
ob_list_handlers(void):array
ob_start([callable $output_callback = NULL [, int $chunk_size = 0 [, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS]]]):bool
ob_tidyhandler(string $input [, int $mode]):string
oci_bind_array_by_name(resource $statement, string $name, array &$var_array, int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC]]):bool
oci_bind_by_name(resource $statement, string $bv_name, mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR]]):bool
oci_cancel(resource $statement):bool
oci_client_version(void):string
oci_close(resource $connection):bool
oci_commit(resource $connection):bool
oci_connect(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
oci_define_by_name(resource $statement, string $column_name, mixed &$variable [, int $type = SQLT_CHR]):bool
oci_error([resource $resource]):array
oci_execute(resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS]):bool
oci_fetch_all(resource $statement, array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC]]]):int
oci_fetch_array(resource $statement [, int $mode]):array
oci_fetch_assoc(resource $statement):array
oci_fetch_object(resource $statement):object
oci_fetch_row(resource $statement):array
oci_fetch(resource $statement):bool
oci_field_is_null(resource $statement, mixed $field):bool
oci_field_name(resource $statement, mixed $field):string
oci_field_precision(resource $statement, mixed $field):int
oci_field_scale(resource $statement, mixed $field):int
oci_field_size(resource $statement, mixed $field):int
oci_field_type_raw(resource $statement, mixed $field):int
oci_field_type(resource $statement, mixed $field):mixed
oci_free_descriptor(resource $descriptor):bool
oci_free_statement(resource $statement):bool
oci_get_implicit_resultset(resource $statement):resource
oci_internal_debug(bool $onoff):void
oci_lob_copy(OCI-Lob $lob_to, OCI-Lob $lob_from [, int $length = 0]):bool
oci_lob_is_equal(OCI-Lob $lob1, OCI-Lob $lob2):bool
oci_new_collection(resource $connection, string $tdo [, string $schema = NULL]):OCI-Collection
oci_new_connect(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
oci_new_cursor(resource $connection):resource
oci_new_descriptor(resource $connection [, int $type = OCI_DTYPE_LOB]):OCI-Lob
oci_num_fields(resource $statement):int
oci_num_rows(resource $statement):int
oci_parse(resource $connection, string $sql_text):resource
oci_password_change(resource $connection, string $username, string $old_password, string $new_password):bool
oci_pconnect(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
oci_register_taf_callback(resource $connection [, mixed $callbackFn]):bool
oci_result(resource $statement, mixed $field):mixed
oci_rollback(resource $connection):bool
oci_server_version(resource $connection):string
oci_set_action(resource $connection, string $action_name):bool
oci_set_client_identifier(resource $connection, string $client_identifier):bool
oci_set_client_info(resource $connection, string $client_info):bool
oci_set_edition(string $edition):bool
oci_set_module_name(resource $connection, string $module_name):bool
oci_set_prefetch(resource $statement, int $rows):bool
oci_statement_type(resource $statement):string
oci_unregister_taf_callback(resource $connection):bool
ocibindbyname(resource $statement, string $bv_name, mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR]]):bool
ocicancel(resource $statement):bool
ocicloselob(void):bool
ocicollappend(mixed $value):bool
ocicollassign(OCI-Collection $from):bool
ocicollassignelem(int $index, mixed $value):bool
ocicollgetelem(int $index):mixed
ocicollmax(void):int
ocicollsize(void):int
ocicolltrim(int $num):bool
ocicolumnisnull(resource $statement, mixed $field):bool
ocicolumnname(resource $statement, mixed $field):string
ocicolumnprecision(resource $statement, mixed $field):int
ocicolumnscale(resource $statement, mixed $field):int
ocicolumnsize(resource $statement, mixed $field):int
ocicolumntype(resource $statement, mixed $field):mixed
ocicolumntyperaw(resource $statement, mixed $field):int
ocicommit(resource $connection):bool
ocidefinebyname(resource $statement, string $column_name, mixed &$variable [, int $type = SQLT_CHR]):bool
ocierror([resource $resource]):array
ociexecute(resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS]):bool
ocifetch(resource $statement):bool
ocifetchinto(resource $statement [, int $mode]):array
ocifetchstatement(resource $statement, array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC]]]):int
ocifreecollection(void):bool
ocifreecursor(resource $statement):bool
ocifreedesc(void):bool
ocifreestatement(resource $statement):bool
ociinternaldebug(bool $onoff):void
ociloadlob(void):string
ocilogoff(resource $connection):bool
ocilogon(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
ocinewcollection(resource $connection, string $tdo [, string $schema = NULL]):OCI-Collection
ocinewcursor(resource $connection):resource
ocinewdescriptor(resource $connection [, int $type = OCI_DTYPE_LOB]):OCI-Lob
ocinlogon(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
ocinumcols(resource $statement):int
ociparse(resource $connection, string $sql_text):resource
ociplogon(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
ociresult(resource $statement, mixed $field):mixed
ocirollback(resource $connection):bool
ocirowcount(resource $statement):int
ocisavelob(string $data [, int $offset]):bool
ocisavelobfile(string $filename):bool
ociserverversion(resource $connection):string
ocisetprefetch(resource $statement, int $rows):bool
ocistatementtype(resource $statement):string
ociwritelobtofile(string $filename [, int $start [, int $length]]):bool
ociwritetemporarylob(string $data [, int $lob_type = OCI_TEMP_CLOB]):bool
octdec(string $octal_string):number
odbc_autocommit(resource $connection_id [, bool $OnOff = FALSE]):mixed
odbc_binmode(resource $result_id, int $mode):bool
odbc_close_all(void):void
odbc_close(resource $connection_id):void
odbc_columnprivileges(resource $connection_id, string $qualifier, string $owner, string $table_name, string $column_name):resource
odbc_columns(resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name]]]]):resource
odbc_commit(resource $connection_id):bool
odbc_connect(string $dsn, string $user, string $password [, int $cursor_type]):resource
odbc_cursor(resource $result_id):string
odbc_data_source(resource $connection_id, int $fetch_type):array
odbc_do(resource $connection_id, string $query_string [, int $flags]):resource
odbc_error([resource $connection_id]):string
odbc_errormsg([resource $connection_id]):string
odbc_exec(resource $connection_id, string $query_string [, int $flags]):resource
odbc_execute(resource $result_id [, array $parameters_array]):bool
odbc_fetch_array(resource $result [, int $rownumber]):array
odbc_fetch_into(resource $result_id, array &$result_array [, int $rownumber]):int
odbc_fetch_object(resource $result [, int $rownumber]):object
odbc_fetch_row(resource $result_id [, int $row_number = 1]):bool
odbc_field_len(resource $result_id, int $field_number):int
odbc_field_name(resource $result_id, int $field_number):string
odbc_field_num(resource $result_id, string $field_name):int
odbc_field_precision(resource $result_id, int $field_number):int
odbc_field_scale(resource $result_id, int $field_number):int
odbc_field_type(resource $result_id, int $field_number):string
odbc_foreignkeys(resource $connection_id, string $pk_qualifier, string $pk_owner, string $pk_table, string $fk_qualifier, string $fk_owner, string $fk_table):resource
odbc_free_result(resource $result_id):bool
odbc_gettypeinfo(resource $connection_id [, int $data_type]):resource
odbc_longreadlen(resource $result_id, int $length):bool
odbc_next_result(resource $result_id):bool
odbc_num_fields(resource $result_id):int
odbc_num_rows(resource $result_id):int
odbc_pconnect(string $dsn, string $user, string $password [, int $cursor_type]):resource
odbc_prepare(resource $connection_id, string $query_string):resource
odbc_primarykeys(resource $connection_id, string $qualifier, string $owner, string $table):resource
odbc_procedurecolumns(resource $connection_id):resource
odbc_procedures(resource $connection_id):resource
odbc_result_all(resource $result_id [, string $format]):int
odbc_result(resource $result_id, mixed $field):mixed
odbc_rollback(resource $connection_id):bool
odbc_setoption(resource $id, int $function, int $option, int $param):bool
odbc_specialcolumns(resource $connection_id, int $type, string $qualifier, string $table, int $scope, int $nullable):resource
odbc_statistics(resource $connection_id, string $qualifier, string $owner, string $table_name, int $unique, int $accuracy):resource
odbc_tableprivileges(resource $connection_id, string $qualifier, string $owner, string $name):resource
odbc_tables(resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types]]]]):resource
opcache_compile_file(string $file):bool
opcache_get_configuration(void):array
opcache_get_status([bool $get_scripts = TRUE]):array
opcache_invalidate(string $script [, bool $force = FALSE]):bool
opcache_is_script_cached(string $file):bool
opcache_reset(void):bool
openal_buffer_create(void):resource
openal_buffer_data(resource $buffer, int $format, string $data, int $freq):bool
openal_buffer_destroy(resource $buffer):bool
openal_buffer_get(resource $buffer, int $property):int
openal_buffer_loadwav(resource $buffer, string $wavfile):bool
openal_context_create(resource $device):resource
openal_context_current(resource $context):bool
openal_context_destroy(resource $context):bool
openal_context_process(resource $context):bool
openal_context_suspend(resource $context):bool
openal_device_close(resource $device):bool
openal_device_open([string $device_desc]):resource
openal_listener_get(int $property):mixed
openal_listener_set(int $property, mixed $setting):bool
openal_source_create(void):resource
openal_source_destroy(resource $source):bool
openal_source_get(resource $source, int $property):mixed
openal_source_pause(resource $source):bool
openal_source_play(resource $source):bool
openal_source_rewind(resource $source):bool
openal_source_set(resource $source, int $property, mixed $setting):bool
openal_source_stop(resource $source):bool
openal_stream(resource $source, int $format, int $rate):resource
opendir(string $path [, resource $context]):resource
openlog(string $ident, int $option, int $facility):bool
openssl_cipher_iv_length(string $method):int
openssl_csr_export_to_file(mixed $csr, string $outfilename [, bool $notext = TRUE]):bool
openssl_csr_export(mixed $csr, string &$out [, bool $notext = TRUE]):bool
openssl_csr_get_public_key(mixed $csr [, bool $use_shortnames = TRUE]):resource
openssl_csr_get_subject(mixed $csr [, bool $use_shortnames = TRUE]):array
openssl_csr_new(array $dn, resource &$privkey [, array $configargs [, array $extraattribs]]):mixed
openssl_csr_sign(mixed $csr, mixed $cacert, mixed $priv_key, int $days [, array $configargs [, int $serial = 0]]):resource
openssl_decrypt(string $data, string $method, string $key [, int $options = 0 [, string $iv = "" [, string $tag = "" [, string $aad = ""]]]]):string
openssl_dh_compute_key(string $pub_key, resource $dh_key):string
openssl_digest(string $data, string $method [, bool $raw_output = FALSE]):string
openssl_encrypt(string $data, string $method, string $key [, int $options = 0 [, string $iv = "" [, string &$tag = NULL [, string $aad = "" [, int $tag_length = 16]]]]]):string
openssl_error_string(void):string
openssl_free_key(resource $key_identifier):void
openssl_get_cert_locations(void):array
openssl_get_cipher_methods([bool $aliases = FALSE]):array
openssl_get_curve_names(void):array
openssl_get_md_methods([bool $aliases = FALSE]):array
openssl_get_privatekey(mixed $key [, string $passphrase = ""]):resource
openssl_get_publickey(mixed $certificate):resource
openssl_open(string $sealed_data, string &$open_data, string $env_key, mixed $priv_key_id [, string $method = "RC4" [, string $iv]]):bool
openssl_pbkdf2(string $password, string $salt, int $key_length, int $iterations [, string $digest_algorithm = "sha1"]):string
openssl_pkcs12_export_to_file(mixed $x509, string $filename, mixed $priv_key, string $pass [, array $args]):bool
openssl_pkcs12_export(mixed $x509, string &$out, mixed $priv_key, string $pass [, array $args]):bool
openssl_pkcs12_read(string $pkcs12, array &$certs, string $pass):bool
openssl_pkcs7_decrypt(string $infilename, string $outfilename, mixed $recipcert [, mixed $recipkey]):bool
openssl_pkcs7_encrypt(string $infile, string $outfile, mixed $recipcerts, array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40]]):bool
openssl_pkcs7_read(string $infilename, array &$certs):bool
openssl_pkcs7_sign(string $infilename, string $outfilename, mixed $signcert, mixed $privkey, array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts]]):bool
openssl_pkcs7_verify(string $filename, int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content [, string $p7bfilename]]]]]):mixed
openssl_pkey_export_to_file(mixed $key, string $outfilename [, string $passphrase [, array $configargs]]):bool
openssl_pkey_export(mixed $key, string &$out [, string $passphrase [, array $configargs]]):bool
openssl_pkey_free(resource $key):void
openssl_pkey_get_details(resource $key):array
openssl_pkey_get_private(mixed $key [, string $passphrase = ""]):resource
openssl_pkey_get_public(mixed $certificate):resource
openssl_pkey_new([array $configargs]):resource
openssl_private_decrypt(string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING]):bool
openssl_private_encrypt(string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING]):bool
openssl_public_decrypt(string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING]):bool
openssl_public_encrypt(string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING]):bool
openssl_random_pseudo_bytes(int $length [, bool &$crypto_strong]):string
openssl_seal(string $data, string &$sealed_data, array &$env_keys, array $pub_key_ids [, string $method = "RC4" [, string &$iv]]):int
openssl_sign(string $data, string &$signature, mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1]):bool
openssl_spki_export_challenge(string &$spkac):string
openssl_spki_export(string &$spkac):string
openssl_spki_new(resource &$privkey, string &$challenge [, int $algorithm = 0]):string
openssl_spki_verify(string &$spkac):string
openssl_verify(string $data, string $signature, mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1]):int
openssl_x509_check_private_key(mixed $cert, mixed $key):bool
openssl_x509_checkpurpose(mixed $x509cert, int $purpose [, array $cainfo = array() [, string $untrustedfile]]):int
openssl_x509_export_to_file(mixed $x509, string $outfilename [, bool $notext = TRUE]):bool
openssl_x509_export(mixed $x509, string &$output [, bool $notext = TRUE]):bool
openssl_x509_fingerprint(mixed $x509 [, string $hash_algorithm = "sha1" [, bool $raw_output = FALSE]]):string
openssl_x509_free(resource $x509cert):void
openssl_x509_parse(mixed $x509cert [, bool $shortnames = TRUE]):array
openssl_x509_read(mixed $x509certdata):resource
ord(string $string):int
output_add_rewrite_var(string $name, string $value):bool
output_reset_rewrite_vars(void):bool
override_function(string $function_name, string $function_args, string $function_code):bool
pack(string $format [, mixed $args [, mixed $...]]):string
parse_ini_file(string $filename [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL]]):array
parse_ini_string(string $ini [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL]]):array
parse_str(string $encoded_string [, array &$result]):void
parse_url(string $url [, int $component = -1]):mixed
parsekit_compile_file(string $filename [, array &$errors [, int $options = PARSEKIT_QUIET]]):array
parsekit_compile_string(string $phpcode [, array &$errors [, int $options = PARSEKIT_QUIET]]):array
parsekit_func_arginfo(mixed $function):array
passthru(string $command [, int &$return_var]):void
password_get_info(string $hash):array
password_hash(string $password, int $algo [, array $options]):string
password_needs_rehash(string $hash, int $algo [, array $options]):bool
password_verify(string $password, string $hash):bool
pathinfo(string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME]):mixed
pclose(resource $handle):int
pcntl_alarm(int $seconds):int
pcntl_async_signals([bool $on = NULL]):bool
pcntl_errno(void):int
pcntl_exec(string $path [, array $args [, array $envs]]):void
pcntl_fork(void):int
pcntl_get_last_error(void):int
pcntl_getpriority([int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS]]):int
pcntl_setpriority(int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS]]):bool
pcntl_signal_dispatch(void):bool
pcntl_signal_get_handler(int $signo):mixed
pcntl_signal(int $signo, callable|int $handler [, bool $restart_syscalls = TRUE]):bool
pcntl_sigprocmask(int $how, array $set [, array &$oldset]):bool
pcntl_sigtimedwait(array $set [, array &$siginfo [, int $seconds = 0 [, int $nanoseconds = 0]]]):int
pcntl_sigwaitinfo(array $set [, array &$siginfo]):int
pcntl_strerror(int $errno):string
pcntl_wait(int &$status [, int $options = 0 [, array &$rusage]]):int
pcntl_waitpid(int $pid, int &$status [, int $options = 0 [, array &$rusage]]):int
pcntl_wexitstatus(int $status):int
pcntl_wifexited(int $status):bool
pcntl_wifsignaled(int $status):bool
pcntl_wifstopped(int $status):bool
pcntl_wstopsig(int $status):int
pcntl_wtermsig(int $status):int
PDF_activate_item(resource $pdfdoc, int $id):bool
PDF_add_annotation(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $type, string $optlist):bool
PDF_add_bookmark(resource $pdfdoc, string $text, string $optlist):int
PDF_add_launchlink(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename):bool
PDF_add_locallink(resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, int $page, string $dest):bool
PDF_add_nameddest(resource $pdfdoc, string $name, string $optlist):bool
PDF_add_note(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open):bool
PDF_add_outline(resource $pdfdoc, string $text, string $optlist):int
PDF_add_pdflink(resource $pdfdoc, float $bottom_left_x, float $bottom_left_y, float $up_right_x, float $up_right_y, string $filename, int $page, string $dest):bool
PDF_add_table_cell(resource $pdfdoc, int $table, int $column, int $row, string $text, string $optlist):int
PDF_add_textflow(resource $pdfdoc, int $textflow, string $text, string $optlist):int
PDF_add_thumbnail(resource $pdfdoc, int $image):bool
PDF_add_weblink(resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, string $url):bool
PDF_arc(resource $p, float $x, float $y, float $r, float $alpha, float $beta):bool
PDF_arcn(resource $p, float $x, float $y, float $r, float $alpha, float $beta):bool
PDF_attach_file(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename, string $description, string $author, string $mimetype, string $icon):bool
PDF_begin_document(resource $pdfdoc, string $filename, string $optlist):int
PDF_begin_font(resource $pdfdoc, string $filename, float $a, float $b, float $c, float $d, float $e, float $f, string $optlist):bool
PDF_begin_glyph(resource $pdfdoc, string $glyphname, float $wx, float $llx, float $lly, float $urx, float $ury):bool
PDF_begin_item(resource $pdfdoc, string $tag, string $optlist):int
PDF_begin_layer(resource $pdfdoc, int $layer):bool
PDF_begin_page_ext(resource $pdfdoc, float $width, float $height, string $optlist):bool
PDF_begin_page(resource $pdfdoc, float $width, float $height):bool
PDF_begin_pattern(resource $pdfdoc, float $width, float $height, float $xstep, float $ystep, int $painttype):int
PDF_begin_template_ext(resource $pdfdoc, float $width, float $height, string $optlist):int
PDF_begin_template(resource $pdfdoc, float $width, float $height):int
PDF_circle(resource $pdfdoc, float $x, float $y, float $r):bool
PDF_clip(resource $p):bool
PDF_close_image(resource $p, int $image):bool
PDF_close_pdi_page(resource $p, int $page):bool
PDF_close_pdi(resource $p, int $doc):bool
PDF_close(resource $p):bool
PDF_closepath_fill_stroke(resource $p):bool
PDF_closepath_stroke(resource $p):bool
PDF_closepath(resource $p):bool
PDF_concat(resource $p, float $a, float $b, float $c, float $d, float $e, float $f):bool
PDF_continue_text(resource $p, string $text):bool
PDF_create_3dview(resource $pdfdoc, string $username, string $optlist):int
PDF_create_action(resource $pdfdoc, string $type, string $optlist):int
PDF_create_annotation(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $type, string $optlist):bool
PDF_create_bookmark(resource $pdfdoc, string $text, string $optlist):int
PDF_create_field(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $name, string $type, string $optlist):bool
PDF_create_fieldgroup(resource $pdfdoc, string $name, string $optlist):bool
PDF_create_gstate(resource $pdfdoc, string $optlist):int
PDF_create_pvf(resource $pdfdoc, string $filename, string $data, string $optlist):bool
PDF_create_textflow(resource $pdfdoc, string $text, string $optlist):int
PDF_curveto(resource $p, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):bool
PDF_define_layer(resource $pdfdoc, string $name, string $optlist):int
PDF_delete_pvf(resource $pdfdoc, string $filename):int
PDF_delete_table(resource $pdfdoc, int $table, string $optlist):bool
PDF_delete_textflow(resource $pdfdoc, int $textflow):bool
PDF_delete(resource $pdfdoc):bool
PDF_encoding_set_char(resource $pdfdoc, string $encoding, int $slot, string $glyphname, int $uv):bool
PDF_end_document(resource $pdfdoc, string $optlist):bool
PDF_end_font(resource $pdfdoc):bool
PDF_end_glyph(resource $pdfdoc):bool
PDF_end_item(resource $pdfdoc, int $id):bool
PDF_end_layer(resource $pdfdoc):bool
PDF_end_page_ext(resource $pdfdoc, string $optlist):bool
PDF_end_page(resource $p):bool
PDF_end_pattern(resource $p):bool
PDF_end_template(resource $p):bool
PDF_endpath(resource $p):bool
PDF_fill_imageblock(resource $pdfdoc, int $page, string $blockname, int $image, string $optlist):int
PDF_fill_pdfblock(resource $pdfdoc, int $page, string $blockname, int $contents, string $optlist):int
PDF_fill_stroke(resource $p):bool
PDF_fill_textblock(resource $pdfdoc, int $page, string $blockname, string $text, string $optlist):int
PDF_fill(resource $p):bool
PDF_findfont(resource $p, string $fontname, string $encoding, int $embed):int
PDF_fit_image(resource $pdfdoc, int $image, float $x, float $y, string $optlist):bool
PDF_fit_pdi_page(resource $pdfdoc, int $page, float $x, float $y, string $optlist):bool
PDF_fit_table(resource $pdfdoc, int $table, float $llx, float $lly, float $urx, float $ury, string $optlist):string
PDF_fit_textflow(resource $pdfdoc, int $textflow, float $llx, float $lly, float $urx, float $ury, string $optlist):string
PDF_fit_textline(resource $pdfdoc, string $text, float $x, float $y, string $optlist):bool
PDF_get_apiname(resource $pdfdoc):string
PDF_get_buffer(resource $p):string
PDF_get_errmsg(resource $pdfdoc):string
PDF_get_errnum(resource $pdfdoc):int
PDF_get_fontnamePDF Functions:PDF_get_errnum
PDF_get_fontname(resource $p, string $key, float $modifier):string
PDF_get_fontsize(resource $p, string $key, float $modifier):float
PDF_get_image_height(resource $p, string $key, float $modifier):float
PDF_get_image_width(resource $p, string $key, float $modifier):float
PDF_get_majorversion(void):int
PDF_get_minorversion(void):int
PDF_get_parameter(resource $p, string $key, float $modifier):string
PDF_get_pdi_parameter(resource $p, string $key, int $doc, int $page, int $reserved):string
PDF_get_pdi_value(resource $p, string $key, int $doc, int $page, int $reserved):float
PDF_get_value(resource $p, string $key, float $modifier):float
PDF_info_font(resource $pdfdoc, int $font, string $keyword, string $optlist):float
PDF_info_matchbox(resource $pdfdoc, string $boxname, int $num, string $keyword):float
PDF_info_table(resource $pdfdoc, int $table, string $keyword):float
PDF_info_textflow(resource $pdfdoc, int $textflow, string $keyword):float
PDF_info_textline(resource $pdfdoc, string $text, string $keyword, string $optlist):float
PDF_initgraphics(resource $p):bool
PDF_lineto(resource $p, float $x, float $y):bool
PDF_load_3ddata(resource $pdfdoc, string $filename, string $optlist):int
PDF_load_font(resource $pdfdoc, string $fontname, string $encoding, string $optlist):int
PDF_load_iccprofile(resource $pdfdoc, string $profilename, string $optlist):int
PDF_load_image(resource $pdfdoc, string $imagetype, string $filename, string $optlist):int
PDF_makespotcolor(resource $p, string $spotname):int
PDF_moveto(resource $p, float $x, float $y):bool
PDF_new(void):resource
PDF_open_ccitt(resource $pdfdoc, string $filename, int $width, int $height, int $BitReverse, int $k, int $Blackls1):int
PDF_open_file(resource $p, string $filename):bool
PDF_open_gif(resource $pdfdoc, string $imagetype, string $filename, string $optlist):int
PDF_open_image_file(resource $p, string $imagetype, string $filename, string $stringparam, int $intparam):int
PDF_open_image(resource $p, string $imagetype, string $source, string $data, int $length, int $width, int $height, int $components, int $bpc, string $params):int
PDF_open_jpeg(resource $pdfdoc, string $imagetype, string $filename, string $optlist):int
PDF_open_memory_image(resource $p, resource $image):int
PDF_open_pdi_document(resource $p, string $filename, string $optlist):int
PDF_open_pdi_page(resource $p, int $doc, int $pagenumber, string $optlist):int
PDF_open_pdi(resource $pdfdoc, string $filename, string $optlist, int $len):int
PDF_open_tiff(resource $pdfdoc, string $imagetype, string $filename, string $optlist):int
PDF_pcos_get_number(resource $p, int $doc, string $path):float
PDF_pcos_get_stream(resource $p, int $doc, string $optlist, string $path):string
PDF_pcos_get_string(resource $p, int $doc, string $path):string
PDF_place_image(resource $pdfdoc, int $image, float $x, float $y, float $scale):bool
PDF_place_pdi_page(resource $pdfdoc, int $page, float $x, float $y, float $sx, float $sy):bool
PDF_process_pdi(resource $pdfdoc, int $doc, int $page, string $optlist):int
PDF_rect(resource $p, float $x, float $y, float $width, float $height):bool
PDF_restore(resource $p):bool
PDF_resume_page(resource $pdfdoc, string $optlist):bool
PDF_rotate(resource $p, float $phi):bool
PDF_save(resource $p):bool
PDF_scale(resource $p, float $sx, float $sy):bool
PDF_set_border_color(resource $p, float $red, float $green, float $blue):bool
PDF_set_border_dash(resource $pdfdoc, float $black, float $white):bool
PDF_set_border_style(resource $pdfdoc, string $style, float $width):bool
PDF_set_char_spacing(resource $p, string $key, float $value):bool
PDF_set_duration(resource $pdfdoc, float $width, float $height, string $optlist):bool
PDF_set_gstate(resource $pdfdoc, int $gstate):bool
PDF_set_info(resource $p, string $key, string $value):bool
PDF_set_layer_dependency(resource $pdfdoc, string $type, string $optlist):bool
PDF_set_parameter(resource $p, string $key, string $value):bool
PDF_set_text_pos(resource $p, float $x, float $y):bool
PDF_set_value(resource $p, string $key, float $value):bool
PDF_setcolor(resource $p, string $fstype, string $colorspace, float $c1, float $c2, float $c3, float $c4):bool
PDF_setdash(resource $pdfdoc, float $b, float $w):bool
PDF_setdashpattern(resource $pdfdoc, string $optlist):bool
PDF_setflat(resource $pdfdoc, float $flatness):bool
PDF_setfont(resource $pdfdoc, int $font, float $fontsize):bool
PDF_setgray_fill(resource $p, float $g):bool
PDF_setgray_stroke(resource $p, float $g):bool
PDF_setgray(resource $p, float $g):bool
PDF_setlinecap(resource $p, int $linecap):bool
PDF_setlinejoin(resource $p, int $value):bool
PDF_setlinewidth(resource $p, float $width):bool
PDF_setmatrix(resource $p, float $a, float $b, float $c, float $d, float $e, float $f):bool
PDF_setmiterlimit(resource $pdfdoc, float $miter):bool
PDF_setrgbcolor_fill(resource $p, float $red, float $green, float $blue):bool
PDF_setrgbcolor_stroke(resource $p, float $red, float $green, float $blue):bool
PDF_setrgbcolor(resource $p, float $red, float $green, float $blue):bool
PDF_shading_pattern(resource $pdfdoc, int $shading, string $optlist):int
PDF_shading(resource $pdfdoc, string $shtype, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist):int
PDF_shfill(resource $pdfdoc, int $shading):bool
PDF_show_boxed(resource $p, string $text, float $left, float $top, float $width, float $height, string $mode, string $feature):int
PDF_show_xy(resource $p, string $text, float $x, float $y):bool
PDF_show(resource $pdfdoc, string $text):bool
PDF_skew(resource $p, float $alpha, float $beta):bool
PDF_stringwidth(resource $p, string $text, int $font, float $fontsize):float
PDF_stroke(resource $p):bool
PDF_suspend_page(resource $pdfdoc, string $optlist):bool
PDF_translate(resource $p, float $tx, float $ty):bool
PDF_utf16_to_utf8(resource $pdfdoc, string $utf16string):string
PDF_utf32_to_utf16(resource $pdfdoc, string $utf32string, string $ordering):string
PDF_utf8_to_utf16(resource $pdfdoc, string $utf8string, string $ordering):string
pfsockopen(string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout")]]]]):resource
pg_affected_rows(resource $result):int
pg_cancel_query(resource $connection):bool
pg_client_encoding([resource $connection]):string
pg_close([resource $connection]):bool
pg_connect_poll(resource $connection):int
pg_connect(string $connection_string [, int $connect_type]):resource
pg_connection_busy(resource $connection):bool
pg_connection_reset(resource $connection):bool
pg_connection_status(resource $connection):int
pg_consume_input(resource $connection):bool
pg_convert(resource $connection, string $table_name, array $assoc_array [, int $options = 0]):array
pg_copy_from(resource $connection, string $table_name, array $rows [, string $delimiter [, string $null_as]]):bool
pg_copy_to(resource $connection, string $table_name [, string $delimiter [, string $null_as]]):array
pg_dbname([resource $connection]):string
pg_delete(resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC]):mixed
pg_end_copy([resource $connection]):bool
pg_escape_bytea([resource $connection], string $data):string
pg_escape_identifier([resource $connection], string $data):string
pg_escape_literal([resource $connection], string $data):string
pg_escape_string([resource $connection], string $data):string
pg_execute([resource $connection], string $stmtname, array $params):resource
pg_fetch_all_columns(resource $result [, int $column = 0]):array
pg_fetch_all(resource $result [, int $result_type = PGSQL_ASSOC]):array
pg_fetch_array(resource $result [, int $row [, int $result_type = PGSQL_BOTH]]):array
pg_fetch_assoc(resource $result [, int $row]):array
pg_fetch_object(resource $result [, int $row [, int $result_type = PGSQL_ASSOC]]):object
pg_fetch_result(resource $result, int $row, mixed $field):string
pg_fetch_row(resource $result [, int $row]):array
pg_field_is_null(resource $result, int $row, mixed $field):int
pg_field_name(resource $result, int $field_number):string
pg_field_num(resource $result, string $field_name):int
pg_field_prtlen(resource $result, int $row_number, mixed $field_name_or_number):int
pg_field_size(resource $result, int $field_number):int
pg_field_table(resource $result, int $field_number [, bool $oid_only = FALSE]):mixed
pg_field_type_oid(resource $result, int $field_number):int
pg_field_type(resource $result, int $field_number):string
pg_flush(resource $connection):mixed
pg_free_result(resource $result):bool
pg_get_notify(resource $connection [, int $result_type]):array
pg_get_pid(resource $connection):int
pg_get_result([resource $connection]):resource
pg_host([resource $connection]):string
pg_insert(resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC]):mixed
pg_last_error([resource $connection]):string
pg_last_notice(resource $connection [, int $option = PGSQL_NOTICE_LAST]):mixed
pg_last_oid(resource $result):string
pg_lo_close(resource $large_object):bool
pg_lo_create([resource $connection [, mixed $object_id]]):int
pg_lo_export([resource $connection], int $oid, string $pathname):bool
pg_lo_import([resource $connection], string $pathname [, mixed $object_id]):int
pg_lo_open(resource $connection, int $oid, string $mode):resource
pg_lo_read_all(resource $large_object):int
pg_lo_read(resource $large_object [, int $len = 8192]):string
pg_lo_seek(resource $large_object, int $offset [, int $whence = PGSQL_SEEK_CUR]):bool
pg_lo_tell(resource $large_object):int
pg_lo_truncate(resource $large_object, int $size):bool
pg_lo_unlink(resource $connection, int $oid):bool
pg_lo_write(resource $large_object, string $data [, int $len]):int
pg_meta_data(resource $connection, string $table_name [, bool $extended = FALSE]):array
pg_num_fields(resource $result):int
pg_num_rows(resource $result):int
pg_options([resource $connection]):string
pg_parameter_status([resource $connection], string $param_name):string
pg_pconnect(string $connection_string [, int $connect_type]):resource
pg_ping([resource $connection]):bool
pg_port([resource $connection]):int
pg_prepare([resource $connection], string $stmtname, string $query):resource
pg_put_line([resource $connection], string $data):bool
pg_query_params([resource $connection], string $query, array $params):resource
pg_query([resource $connection], string $query):resource
pg_result_error_field(resource $result, int $fieldcode):string
pg_result_error(resource $result):string
pg_result_seek(resource $result, int $offset):bool
pg_result_status(resource $result [, int $type = PGSQL_STATUS_LONG]):mixed
pg_select(resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC [, int $result_type = PGSQL_ASSOC]]):mixed
pg_send_execute(resource $connection, string $stmtname, array $params):bool
pg_send_prepare(resource $connection, string $stmtname, string $query):bool
pg_send_query_params(resource $connection, string $query, array $params):bool
pg_send_query(resource $connection, string $query):bool
pg_set_client_encoding([resource $connection], string $encoding):int
pg_set_error_verbosity([resource $connection], int $verbosity):int
pg_socket(resource $connection):resource
pg_trace(string $pathname [, string $mode = "w" [, resource $connection]]):bool
pg_transaction_status(resource $connection):int
pg_tty([resource $connection]):string
pg_unescape_bytea(string $data):string
pg_untrace([resource $connection]):bool
pg_update(resource $connection, string $table_name, array $data, array $condition [, int $options = PGSQL_DML_EXEC]):mixed
pg_version([resource $connection]):array
php_check_syntax(string $filename [, string &$error_message]):bool
php_ini_loaded_file(void):string
php_ini_scanned_files(void):string
php_logo_guid(void):string
php_sapi_name(void):string
php_strip_whitespace(string $filename):string
php_uname([string $mode = "a"]):string
phpcredits([int $flag = CREDITS_ALL]):bool
phpdbg_break_file(string $file, int $line):void
phpdbg_break_function(string $function):void
phpdbg_break_method(string $class, string $method):void
phpdbg_break_next(void):void
phpdbg_clear(void):void
phpdbg_color(int $element, string $color):void
phpdbg_end_oplog([array $options]):array
phpdbg_exec([string $context]):mixed
phpdbg_get_executable([array $options]):array
phpdbg_prompt(string $string):void
phpdbg_start_oplog(void):void
phpinfo([int $what = INFO_ALL]):bool
phpversion([string $extension]):string
pi(void):float
png2wbmp(string $pngname, string $wbmpname, int $dest_height, int $dest_width, int $threshold):bool
popen(string $command, string $mode):resource
pos(array $array):mixed
posix_access(string $file [, int $mode = POSIX_F_OK]):bool
posix_ctermid(void):string
posix_errno(void):int
posix_get_last_error(void):int
posix_getcwd(void):string
posix_getegid(void):int
posix_geteuid(void):int
posix_getgid(void):int
posix_getgrgid(int $gid):array
posix_getgrnam(string $name):array
posix_getgroups(void):array
posix_getlogin(void):string
posix_getpgid(int $pid):int
posix_getpgrp(void):int
posix_getpid(void):int
posix_getppid(void):int
posix_getpwnam(string $username):array
posix_getpwuid(int $uid):array
posix_getrlimit(void):array
posix_getsid(int $pid):int
posix_getuid(void):int
posix_initgroups(string $name, int $base_group_id):bool
posix_isatty(mixed $fd):bool
posix_kill(int $pid, int $sig):bool
posix_mkfifo(string $pathname, int $mode):bool
posix_mknod(string $pathname, int $mode [, int $major = 0 [, int $minor = 0]]):bool
posix_setegid(int $gid):bool
posix_seteuid(int $uid):bool
posix_setgid(int $gid):bool
posix_setpgid(int $pid, int $pgid):bool
posix_setrlimit(int $resource, int $softlimit, int $hardlimit):bool
posix_setsid(void):int
posix_setuid(int $uid):bool
posix_strerror(int $errno):string
posix_times(void):array
posix_ttyname(mixed $fd):string
posix_uname(void):array
pow(number $base, number $exp):number
preg_filter(mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count]]):mixed
preg_grep(string $pattern, array $input [, int $flags = 0]):array
preg_last_error(void):int
preg_match_all(string $pattern, string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0]]]):int
preg_match(string $pattern, string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0]]]):int
preg_quote(string $str [, string $delimiter = NULL]):string
preg_replace_callback_array(array $patterns_and_callbacks, mixed $subject [, int $limit = -1 [, int &$count]]):mixed
preg_replace_callback(mixed $pattern, callable $callback, mixed $subject [, int $limit = -1 [, int &$count]]):mixed
preg_replace(mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count]]):mixed
preg_split(string $pattern, string $subject [, int $limit = -1 [, int $flags = 0]]):array
prev(array &$array):mixed
print_r(mixed $expression [, bool $return = FALSE]):mixed
print(string $arg):int
printf(string $format [, mixed $args [, mixed $...]]):int
proc_close(resource $process):int
proc_get_status(resource $process):array
proc_nice(int $increment):bool
proc_open(string $cmd, array $descriptorspec, array &$pipes [, string $cwd [, array $env [, array $other_options]]]):resource
proc_terminate(resource $process [, int $signal = 15]):bool
property_exists(mixed $class, string $property):bool
ps_add_bookmark(resource $psdoc, string $text [, int $parent = 0 [, int $open = 0]]):int
ps_add_launchlink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename):bool
ps_add_locallink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, int $page, string $dest):bool
ps_add_note(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open):bool
ps_add_pdflink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename, int $page, string $dest):bool
ps_add_weblink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $url):bool
ps_arc(resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta):bool
ps_arcn(resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta):bool
ps_begin_page(resource $psdoc, float $width, float $height):bool
ps_begin_pattern(resource $psdoc, float $width, float $height, float $xstep, float $ystep, int $painttype):int
ps_begin_template(resource $psdoc, float $width, float $height):int
ps_circle(resource $psdoc, float $x, float $y, float $radius):bool
ps_clip(resource $psdoc):bool
ps_close_image(resource $psdoc, int $imageid):void
ps_close(resource $psdoc):bool
ps_closepath_stroke(resource $psdoc):bool
ps_closepath(resource $psdoc):bool
ps_continue_text(resource $psdoc, string $text):bool
ps_curveto(resource $psdoc, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):bool
ps_delete(resource $psdoc):bool
ps_end_page(resource $psdoc):bool
ps_end_pattern(resource $psdoc):bool
ps_end_template(resource $psdoc):bool
ps_fill_stroke(resource $psdoc):bool
ps_fill(resource $psdoc):bool
ps_findfont(resource $psdoc, string $fontname, string $encoding [, bool $embed = FALSE]):int
ps_get_buffer(resource $psdoc):string
ps_get_parameter(resource $psdoc, string $name [, float $modifier]):string
ps_get_value(resource $psdoc, string $name [, float $modifier]):float
ps_hyphenate(resource $psdoc, string $text):array
ps_include_file(resource $psdoc, string $file):bool
ps_lineto(resource $psdoc, float $x, float $y):bool
ps_makespotcolor(resource $psdoc, string $name [, int $reserved = 0]):int
ps_moveto(resource $psdoc, float $x, float $y):bool
ps_new(void):resource
ps_open_file(resource $psdoc [, string $filename]):bool
ps_open_image_file(resource $psdoc, string $type, string $filename [, string $stringparam [, int $intparam = 0]]):int
ps_open_image(resource $psdoc, string $type, string $source, string $data, int $lenght, int $width, int $height, int $components, int $bpc, string $params):int
ps_open_memory_image(resource $psdoc, int $gd):int
ps_place_image(resource $psdoc, int $imageid, float $x, float $y, float $scale):bool
ps_rect(resource $psdoc, float $x, float $y, float $width, float $height):bool
ps_restore(resource $psdoc):bool
ps_rotate(resource $psdoc, float $rot):bool
ps_save(resource $psdoc):bool
ps_scale(resource $psdoc, float $x, float $y):bool
ps_set_border_color(resource $psdoc, float $red, float $green, float $blue):bool
ps_set_border_dash(resource $psdoc, float $black, float $white):bool
ps_set_border_style(resource $psdoc, string $style, float $width):bool
ps_set_info(resource $p, string $key, string $val):bool
ps_set_parameter(resource $psdoc, string $name, string $value):bool
ps_set_text_pos(resource $psdoc, float $x, float $y):bool
ps_set_value(resource $psdoc, string $name, float $value):bool
ps_setcolor(resource $psdoc, string $type, string $colorspace, float $c1, float $c2, float $c3, float $c4):bool
ps_setdash(resource $psdoc, float $on, float $off):bool
ps_setflat(resource $psdoc, float $value):bool
ps_setfont(resource $psdoc, int $fontid, float $size):bool
ps_setgray(resource $psdoc, float $gray):bool
ps_setlinecap(resource $psdoc, int $type):bool
ps_setlinejoin(resource $psdoc, int $type):bool
ps_setlinewidth(resource $psdoc, float $width):bool
ps_setmiterlimit(resource $psdoc, float $value):bool
ps_setoverprintmode(resource $psdoc, int $mode):bool
ps_setpolydash(resource $psdoc, float $arr):bool
ps_shading_pattern(resource $psdoc, int $shadingid, string $optlist):int
ps_shading(resource $psdoc, string $type, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist):int
ps_shfill(resource $psdoc, int $shadingid):bool
ps_show_boxed(resource $psdoc, string $text, float $left, float $bottom, float $width, float $height, string $hmode [, string $feature]):int
ps_show_xy(resource $psdoc, string $text, float $x, float $y):bool
ps_show_xy2(resource $psdoc, string $text, int $len, float $xcoor, float $ycoor):bool
ps_show(resource $psdoc, string $text):bool
ps_show2(resource $psdoc, string $text, int $len):bool
ps_string_geometry(resource $psdoc, string $text [, int $fontid = 0 [, float $size = 0.0]]):array
ps_stringwidth(resource $psdoc, string $text [, int $fontid = 0 [, float $size = 0.0]]):float
ps_stroke(resource $psdoc):bool
ps_symbol_name(resource $psdoc, int $ord [, int $fontid = 0]):string
ps_symbol_width(resource $psdoc, int $ord [, int $fontid = 0 [, float $size = 0.0]]):float
ps_symbol(resource $psdoc, int $ord):bool
ps_translate(resource $psdoc, float $x, float $y):bool
pspell_add_to_personal(int $dictionary_link, string $word):bool
pspell_add_to_session(int $dictionary_link, string $word):bool
pspell_check(int $dictionary_link, string $word):bool
pspell_clear_session(int $dictionary_link):bool
pspell_config_create(string $language [, string $spelling [, string $jargon [, string $encoding]]]):int
pspell_config_data_dir(int $conf, string $directory):bool
pspell_config_dict_dir(int $conf, string $directory):bool
pspell_config_ignore(int $dictionary_link, int $n):bool
pspell_config_mode(int $dictionary_link, int $mode):bool
pspell_config_personal(int $dictionary_link, string $file):bool
pspell_config_repl(int $dictionary_link, string $file):bool
pspell_config_runtogether(int $dictionary_link, bool $flag):bool
pspell_config_save_repl(int $dictionary_link, bool $flag):bool
pspell_new_config(int $config):int
pspell_new_personal(string $personal, string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0]]]]):int
pspell_new(string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0]]]]):int
pspell_save_wordlist(int $dictionary_link):bool
pspell_store_replacement(int $dictionary_link, string $misspelled, string $correct):bool
pspell_suggest(int $dictionary_link, string $word):array
putenv(string $setting):bool
px_close(resource $pxdoc):bool
px_create_fp(resource $pxdoc, resource $file, array $fielddesc):bool
px_date2string(resource $pxdoc, int $value, string $format):string
px_delete_record(resource $pxdoc, int $num):bool
px_delete(resource $pxdoc):bool
px_get_field(resource $pxdoc, int $fieldno):array
px_get_info(resource $pxdoc):array
px_get_parameter(resource $pxdoc, string $name):string
px_get_record(resource $pxdoc, int $num [, int $mode = 0]):array
px_get_schema(resource $pxdoc [, int $mode = 0]):array
px_get_value(resource $pxdoc, string $name):float
px_insert_record(resource $pxdoc, array $data):int
px_new(void):resource
px_numfields(resource $pxdoc):int
px_numrecords(resource $pxdoc):int
px_open_fp(resource $pxdoc, resource $file):bool
px_put_record(resource $pxdoc, array $record [, int $recpos = -1]):bool
px_retrieve_record(resource $pxdoc, int $num [, int $mode = 0]):array
px_set_blob_file(resource $pxdoc, string $filename):bool
px_set_parameter(resource $pxdoc, string $name, string $value):bool
px_set_tablename(resource $pxdoc, string $name):void
px_set_targetencoding(resource $pxdoc, string $encoding):bool
px_set_value(resource $pxdoc, string $name, float $value):bool
px_timestamp2string(resource $pxdoc, float $value, string $format):string
px_update_record(resource $pxdoc, array $data, int $num):bool
quoted_printable_decode(string $str):string
quoted_printable_encode(string $str):string
quotemeta(string $str):string
rad2deg(float $number):float
radius_acct_open(void):resource
radius_add_server(resource $radius_handle, string $hostname, int $port, string $secret, int $timeout, int $max_tries):bool
radius_auth_open(void):resource
radius_close(resource $radius_handle):bool
radius_config(resource $radius_handle, string $file):bool
radius_create_request(resource $radius_handle, int $type):bool
radius_cvt_addr(string $data):string
radius_cvt_int(string $data):int
radius_cvt_string(string $data):string
radius_demangle_mppe_key(resource $radius_handle, string $mangled):string
radius_demangle(resource $radius_handle, string $mangled):string
radius_get_attr(resource $radius_handle):mixed
radius_get_tagged_attr_data(string $data):string
radius_get_tagged_attr_tag(string $data):int
radius_get_vendor_attr(string $data):array
radius_put_addr(resource $radius_handle, int $type, string $addr [, int $options = 0 [, int $tag]]):bool
radius_put_attr(resource $radius_handle, int $type, string $value [, int $options = 0 [, int $tag]]):bool
radius_put_int(resource $radius_handle, int $type, int $value [, int $options = 0 [, int $tag]]):bool
radius_put_string(resource $radius_handle, int $type, string $value [, int $options = 0 [, int $tag]]):bool
radius_put_vendor_addr(resource $radius_handle, int $vendor, int $type, string $addr):bool
radius_put_vendor_attr(resource $radius_handle, int $vendor, int $type, string $value [, int $options = 0 [, int $tag]]):bool
radius_put_vendor_int(resource $radius_handle, int $vendor, int $type, int $value [, int $options = 0 [, int $tag]]):bool
radius_put_vendor_string(resource $radius_handle, int $vendor, int $type, string $value [, int $options = 0 [, int $tag]]):bool
radius_request_authenticator(resource $radius_handle):string
radius_salt_encrypt_attr(resource $radius_handle, string $data):string
radius_send_request(resource $radius_handle):int
radius_server_secret(resource $radius_handle):string
radius_strerror(resource $radius_handle):string
rand(void):int
random_bytes(int $length):string
random_int(int $min, int $max):int
range(mixed $start, mixed $end [, number $step = 1]):array
rar_wrapper_cache_stats(void):string
rawurldecode(string $str):string
rawurlencode(string $str):string
read_exif_data(mixed $stream [, string $sections = NULL [, bool $arrays = FALSE [, bool $thumbnail = FALSE]]]):array
readdir([resource $dir_handle]):string
readfile(string $filename [, bool $use_include_path = FALSE [, resource $context]]):int
readgzfile(string $filename [, int $use_include_path = 0]):int
readline_add_history(string $line):bool
readline_callback_handler_install(string $prompt, callable $callback):bool
readline_callback_handler_remove(void):bool
readline_callback_read_char(void):void
readline_clear_history(void):bool
readline_completion_function(callable $function):bool
readline_info([string $varname [, string $newvalue]]):mixed
readline_list_history(void):array
readline_on_new_line(void):void
readline_read_history([string $filename]):bool
readline_redisplay(void):void
readline_write_history([string $filename]):bool
readline([string $prompt]):string
readlink(string $path):string
realpath_cache_get(void):array
realpath_cache_size(void):int
realpath(string $path):string
recode_file(string $request, resource $input, resource $output):bool
recode_string(string $request, string $string):string
recode_string().:This function is an alias of:
register_shutdown_function(callable $callback [, mixed $parameter [, mixed $...]]):void
register_tick_function(callable $function [, mixed $arg [, mixed $...]]):bool
rename_function(string $original_name, string $new_name):bool
rename(string $oldname, string $newname [, resource $context]):bool
reset(array &$array):mixed
restore_error_handler(void):bool
restore_exception_handler(void):bool
restore_include_path(void):void
rewind(resource $handle):bool
rewinddir([resource $dir_handle]):void
rmdir(string $dirname [, resource $context]):bool
round(float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP]]):float
rpm_close(resource $rpmr):bool
rpm_get_tag(resource $rpmr, int $tagnum):mixed
rpm_is_valid(string $filename):bool
rpm_open(string $filename):resource
rpm_version(void):string
rrd_create(string $filename, array $options):bool
rrd_error(void):string
rrd_fetch(string $filename, array $options):array
rrd_first(string $file [, int $raaindex = 0]):int
rrd_graph(string $filename, array $options):array
rrd_info(string $filename):array
rrd_last(string $filename):int
rrd_lastupdate(string $filename):array
rrd_restore(string $xml_file, string $rrd_file [, array $options]):bool
rrd_tune(string $filename, array $options):bool
rrd_update(string $filename, array $options):bool
rrd_version(void):string
rrd_xport(array $options):array
rrdc_disconnect(void):void
rsort(array &$array [, int $sort_flags = SORT_REGULAR]):bool
rtrim(string $str [, string $character_mask]):string
runkit_class_adopt(string $classname, string $parentname):bool
runkit_class_emancipate(string $classname):bool
runkit_constant_add(string $constname, mixed $value):bool
runkit_constant_redefine(string $constname, mixed $newvalue):bool
runkit_constant_remove(string $constname):bool
runkit_function_add(string $funcname, string $arglist, string $code [, bool $return_by_reference = NULL [, string $doc_comment = NULL]]):bool
runkit_function_copy(string $funcname, string $targetname):bool
runkit_function_redefine(string $funcname, string $arglist, string $code [, bool $return_by_reference = NULL [, string $doc_comment = NULL]]):bool
runkit_function_remove(string $funcname):bool
runkit_function_rename(string $funcname, string $newname):bool
runkit_import(string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS]):bool
runkit_lint_file(string $filename):bool
runkit_lint(string $code):bool
runkit_method_add(string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL]]):bool
runkit_method_copy(string $dClass, string $dMethod, string $sClass [, string $sMethod]):bool
runkit_method_redefine(string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL]]):bool
runkit_method_remove(string $classname, string $methodname):bool
runkit_method_rename(string $classname, string $methodname, string $newname):bool
runkit_return_value_used(void):bool
runkit_sandbox_output_handler(object $sandbox [, mixed $callback]):mixed
runkit_superglobals(void):array
sapi_windows_cp_conv(int|string $in_codepage, int|string $out_codepage, string $subject):string
sapi_windows_cp_get(string $kind):int
sapi_windows_cp_is_utf8(void):bool
sapi_windows_cp_set(int $cp):bool
sapi_windows_vt100_support(resource $stream [, bool $enable]):bool
scandir(string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context]]):array
seaslog_get_author(void):string
seaslog_get_version(void):string
sem_acquire(resource $sem_identifier [, bool $nowait = FALSE]):bool
sem_get(int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1]]]):resource
sem_release(resource $sem_identifier):bool
sem_remove(resource $sem_identifier):bool
serialize(mixed $value):string
session_abort(void):bool
session_cache_expire([string $new_cache_expire]):int
session_cache_limiter([string $cache_limiter]):string
session_commit(void):bool
session_create_id([string $prefix]):string
session_decode(string $data):bool
session_destroy(void):bool
session_encode(void):string
session_gc(void):int
session_get_cookie_params(void):array
session_id([string $id]):string
session_is_registered(string $name):bool
session_module_name([string $module]):string
session_name([string $name]):string
session_pgsql_add_error(int $error_level [, string $error_message]):bool
session_pgsql_get_error([bool $with_error_message = FALSE]):array
session_pgsql_get_field(void):string
session_pgsql_reset(void):bool
session_pgsql_set_field(string $value):bool
session_pgsql_status(void):array
session_regenerate_id([bool $delete_old_session = FALSE]):bool
session_register_shutdown(void):void
session_register(mixed $name [, mixed $...]):bool
session_reset(void):bool
session_save_path([string $path]):string
session_set_cookie_params(int $lifetime [, string $path [, string $domain [, bool $secure = FALSE [, bool $httponly = FALSE]]]]):bool
session_set_save_handler(callable $open, callable $close, callable $read, callable $write, callable $destroy, callable $gc [, callable $create_sid [, callable $validate_sid [, callable $update_timestamp]]]):bool
session_start([array $options = array()]):bool
session_status(void):int
session_unregister(string $name):bool
session_unset(void):bool
session_write_close(void):bool
set_error_handler(callable $error_handler [, int $error_types = E_ALL | E_STRICT]):mixed
set_exception_handler(callable $exception_handler):callable
set_file_buffer(resource $stream, int $buffer):int
set_include_path(string $new_include_path):string
set_magic_quotes_runtime(bool $new_setting):bool
set_socket_blocking(resource $stream, bool $mode):bool
set_time_limit(int $seconds):bool
setcookie(string $name [, string $value = "" [, int $expire = 0 [, string $path = "" [, string $domain = "" [, bool $secure = FALSE [, bool $httponly = FALSE]]]]]]):bool
setlocale(int $category, string $locale [, string $...]):string
setproctitle(string $title):void
setrawcookie(string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = FALSE [, bool $httponly = FALSE]]]]]]):bool
setthreadtitle(string $title):bool
settype(mixed &$var, string $type):bool
sha1_file(string $filename [, bool $raw_output = FALSE]):string
sha1(string $str [, bool $raw_output = FALSE]):string
shell_exec(string $cmd):string
shm_attach(int $key [, int $memsize [, int $perm = 0666]]):resource
shm_detach(resource $shm_identifier):bool
shm_get_var(resource $shm_identifier, int $variable_key):mixed
shm_has_var(resource $shm_identifier, int $variable_key):bool
shm_put_var(resource $shm_identifier, int $variable_key, mixed $variable):bool
shm_remove_var(resource $shm_identifier, int $variable_key):bool
shm_remove(resource $shm_identifier):bool
shmop_close(resource $shmid):void
shmop_delete(resource $shmid):bool
shmop_open(int $key, string $flags, int $mode, int $size):resource
shmop_read(resource $shmid, int $start, int $count):string
shmop_size(resource $shmid):int
shmop_write(resource $shmid, string $data, int $offset):int
show_source(string $filename [, bool $return = FALSE]):mixed
shuffle(array &$array):bool
similar_text(string $first, string $second [, float &$percent]):int
simplexml_import_dom(DOMNode $node [, string $class_name = "SimpleXMLElement"]):SimpleXMLElement
simplexml_load_file(string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE]]]]):SimpleXMLElement
simplexml_load_string(string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE]]]]):SimpleXMLElement
sin(float $arg):float
sinh(float $arg):float
sizeof(mixed $array_or_countable [, int $mode = COUNT_NORMAL]):int
sleep(int $seconds):int
snmp_get_quick_print(void):bool
snmp_get_valueretrieval(void):int
snmp_read_mib(string $filename):bool
snmp_set_enum_print(int $enum_print):bool
snmp_set_oid_numeric_print(int $oid_format):void
snmp_set_oid_output_format(int $oid_format = SNMP_OID_OUTPUT_MODULE):bool
snmp_set_quick_print(bool $quick_print):bool
snmp_set_valueretrieval(int $method = SNMP_VALUE_LIBRARY):bool
snmp2_get(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
snmp2_getnext(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
snmp2_real_walk(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
snmp2_set(string $host, string $community, string $object_id, string $type, string $value [, int $timeout = 1000000 [, int $retries = 5]]):bool
snmp2_walk(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
snmp3_get(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
snmp3_getnext(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
snmp3_real_walk(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
snmp3_set(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id, string $type, string $value [, int $timeout = 1000000 [, int $retries = 5]]):bool
snmp3_walk(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
snmpget(string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
snmpgetnext(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
snmprealwalk(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
snmpset(string $host, string $community, string $object_id, string $type, mixed $value [, int $timeout = 1000000 [, int $retries = 5]]):bool
snmpwalk(string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
snmpwalkoid(string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
socket_accept(resource $socket):resource
socket_addrinfo_bind(resource $addr):resource
socket_addrinfo_connect(resource $addr):resource
socket_addrinfo_explain(resource $addr):array
socket_addrinfo_lookup(string $host [, string $service [, array $hints]]):array
socket_bind(resource $socket, string $address [, int $port = 0]):bool
socket_clear_error([resource $socket]):void
socket_close(resource $socket):void
socket_cmsg_space(int $level, int $type [, int $n = 0]):int
socket_connect(resource $socket, string $address [, int $port = 0]):bool
socket_create_listen(int $port [, int $backlog = 128]):resource
socket_create_pair(int $domain, int $type, int $protocol, array &$fd):bool
socket_create(int $domain, int $type, int $protocol):resource
socket_export_stream(resource $socket):resource
socket_get_option(resource $socket, int $level, int $optname):mixed
socket_get_status(resource $stream):array
socket_getopt(resource $socket, int $level, int $optname):mixed
socket_getpeername(resource $socket, string &$address [, int &$port]):bool
socket_getsockname(resource $socket, string &$addr [, int &$port]):bool
socket_import_stream(resource $stream):resource
socket_last_error([resource $socket]):int
socket_listen(resource $socket [, int $backlog = 0]):bool
socket_read(resource $socket, int $length [, int $type = PHP_BINARY_READ]):string
socket_recv(resource $socket, string &$buf, int $len, int $flags):int
socket_recvfrom(resource $socket, string &$buf, int $len, int $flags, string &$name [, int &$port]):int
socket_recvmsg(resource $socket, array &$message [, int $flags = 0]):int
socket_select(array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0]):int
socket_send(resource $socket, string $buf, int $len, int $flags):int
socket_sendmsg(resource $socket, array $message [, int $flags = 0]):int
socket_sendto(resource $socket, string $buf, int $len, int $flags, string $addr [, int $port = 0]):int
socket_set_block(resource $socket):bool
socket_set_blocking(resource $stream, bool $mode):bool
socket_set_nonblock(resource $socket):bool
socket_set_option(resource $socket, int $level, int $optname, mixed $optval):bool
socket_set_timeout(resource $stream, int $seconds [, int $microseconds = 0]):bool
socket_setopt(resource $socket, int $level, int $optname, mixed $optval):bool
socket_shutdown(resource $socket [, int $how = 2]):bool
socket_strerror(int $errno):string
socket_write(resource $socket, string $buffer [, int $length = 0]):int
sodium_add(string &$val, string $addv):void
sodium_base642bin(string $b64, int $id [, string $ignore]):string
sodium_bin2base64(string $bin, int $id):string
sodium_bin2hex(string $bin):string
sodium_compare(string $buf1, string $buf2):int
sodium_crypto_aead_aes256gcm_decrypt(string $ciphertext, string $ad, string $nonce, string $key):string
sodium_crypto_aead_aes256gcm_encrypt(string $msg, string $ad, string $nonce, string $key):string
sodium_crypto_aead_aes256gcm_is_available(void):bool
sodium_crypto_aead_aes256gcm_keygen(void):string
sodium_crypto_aead_chacha20poly1305_decrypt(string $ciphertext, string $ad, string $nonce, string $key):string
sodium_crypto_aead_chacha20poly1305_encrypt(string $msg, string $ad, string $nonce, string $key):string
sodium_crypto_aead_chacha20poly1305_ietf_decrypt(string $ciphertext, string $ad, string $nonce, string $key):string
sodium_crypto_aead_chacha20poly1305_ietf_encrypt(string $msg, string $ad, string $nonce, string $key):string
sodium_crypto_aead_chacha20poly1305_ietf_keygen(void):string
sodium_crypto_aead_chacha20poly1305_keygen(void):string
sodium_crypto_aead_xchacha20poly1305_ietf_decrypt(string $ciphertext, string $ad, string $nonce, string $key):string
sodium_crypto_aead_xchacha20poly1305_ietf_encrypt(string $msg, string $ad, string $nonce, string $key):string
sodium_crypto_aead_xchacha20poly1305_ietf_keygen(void):string
sodium_crypto_auth_keygen(void):string
sodium_crypto_auth_verify(string $signature, string $msg, string $key):bool
sodium_crypto_auth(string $msg, string $key):string
sodium_crypto_box_keypair_from_secretkey_and_publickey(string $secret_key, string $public_key):string
sodium_crypto_box_keypair(void):string
sodium_crypto_box_open(string $ciphertext, string $nonce, string $key):string
sodium_crypto_box_publickey_from_secretkey(string $key):string
sodium_crypto_box_publickey(string $key):string
sodium_crypto_box_seal_open(string $ciphertext, string $key):string
sodium_crypto_box_seal(string $msg, string $key):string
sodium_crypto_box_secretkey(string $key):string
sodium_crypto_box_seed_keypair(string $key):string
sodium_crypto_box(string $msg, string $nonce, string $key):string
sodium_crypto_generichash_final(string &$state [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES]):string
sodium_crypto_generichash_init([string $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES]]):string
sodium_crypto_generichash_keygen(void):string
sodium_crypto_generichash_update(string &$state, string $msg):bool
sodium_crypto_generichash(string $msg [, string $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES]]):string
sodium_crypto_kdf_derive_from_key(int $subkey_len, int $subkey_id, string $context, string $key):string
sodium_crypto_kdf_keygen(void):string
sodium_crypto_kx_client_session_keys(string $client_keypair, string $server_key):array
sodium_crypto_kx_keypair(void):string
sodium_crypto_kx_publickey(string $key):string
sodium_crypto_kx_secretkey(string $key):string
sodium_crypto_kx_seed_keypair(string $string):string
sodium_crypto_kx_server_session_keys(string $server_keypair, string $client_key):array
sodium_crypto_pwhash_scryptsalsa208sha256_str_verify(string $hash, string $password):bool
sodium_crypto_pwhash_scryptsalsa208sha256_str(string $password, int $opslimit, int $memlimit):string
sodium_crypto_pwhash_scryptsalsa208sha256(int $length, string $password, string $salt, int $opslimit, int $memlimit):string
sodium_crypto_pwhash_str_needs_rehash(string $password, int $opslimit, int $memlimit):bool
sodium_crypto_pwhash_str_verify(string $hash, string $password):bool
sodium_crypto_pwhash_str(string $password, int $opslimit, int $memlimit):string
sodium_crypto_pwhash(int $length, string $password, string $salt, int $opslimit, int $memlimit [, int $alg]):string
sodium_crypto_scalarmult_base(string $key):string
sodium_crypto_scalarmult(string $n, string $p):string
sodium_crypto_secretbox_keygen(void):string
sodium_crypto_secretbox_open(string $ciphertext, string $nonce, string $key):string
sodium_crypto_secretbox(string $string, string $nonce, string $key):string
sodium_crypto_secretstream_xchacha20poly1305_init_pull(string $header, string $key):string
sodium_crypto_secretstream_xchacha20poly1305_init_push(string $key):array
sodium_crypto_secretstream_xchacha20poly1305_keygen(void):string
sodium_crypto_secretstream_xchacha20poly1305_pull(string &$state, string $c [, string $ad]):array
sodium_crypto_secretstream_xchacha20poly1305_push(string &$state, string $msg [, string $ad [, int $tag]]):string
sodium_crypto_secretstream_xchacha20poly1305_rekey(string &$state):void
sodium_crypto_shorthash_keygen(void):string
sodium_crypto_shorthash(string $msg, string $key):string
sodium_crypto_sign_detached(string $msg, string $keypair):string
sodium_crypto_sign_ed25519_pk_to_curve25519(string $key):string
sodium_crypto_sign_ed25519_sk_to_curve25519(string $key):string
sodium_crypto_sign_keypair_from_secretkey_and_publickey(string $secret_key, string $public_key):string
sodium_crypto_sign_keypair(void):string
sodium_crypto_sign_open(string $string, string $keypair):string
sodium_crypto_sign_publickey_from_secretkey(string $key):string
sodium_crypto_sign_publickey(string $keypair):string
sodium_crypto_sign_secretkey(string $key):string
sodium_crypto_sign_seed_keypair(string $key):string
sodium_crypto_sign_verify_detached(string $signature, string $msg, string $key):bool
sodium_crypto_sign(string $msg, string $secret_key):string
sodium_crypto_stream_keygen(void):string
sodium_crypto_stream_xor(string $msg, string $nonce, string $key):string
sodium_crypto_stream(int $length, string $nonce, string $key):string
sodium_hex2bin(string $hex [, string $ignore]):string
sodium_increment(string &$val):void
sodium_memcmp(string $buf1, string $buf2):int
sodium_memzero(string &$buf):void
sodium_pad(string $unpadded, int $length):string
sodium_unpad(string $padded, int $length):string
solr_get_version(void):string
sort(array &$array [, int $sort_flags = SORT_REGULAR]):bool
soundex(string $str):string
spl_autoload_call(string $class_name):void
spl_autoload_extensions([string $file_extensions]):string
spl_autoload_functions(void):array
spl_autoload_register([callable $autoload_function [, bool $throw = TRUE [, bool $prepend = FALSE]]]):bool
spl_autoload_unregister(mixed $autoload_function):bool
spl_autoload(string $class_name [, string $file_extensions = spl_autoload_extensions()]):void
spl_classes(void):array
spl_object_hash(object $obj):string
spl_object_id(object $obj):int
split(string $pattern, string $string [, int $limit = -1]):array
spliti(string $pattern, string $string [, int $limit = -1]):array
sprintf(string $format [, mixed $args [, mixed $...]]):string
sql_regcase(string $string):string
sqlite_array_query(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
SQLiteDatabase::arrayQuery(string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):public array
sqlite_busy_timeout(resource $dbhandle, int $milliseconds):void
SQLiteDatabase::busyTimeout(int $milliseconds):public void
sqlite_changes(resource $dbhandle):int
SQLiteDatabase::changes(void):public int
sqlite_close(resource $dbhandle):void
sqlite_column(resource $result, mixed $index_or_name [, bool $decode_binary = TRUE]):mixed
SQLiteResult::column(mixed $index_or_name [, bool $decode_binary = TRUE]):mixed
sqlite_create_aggregate(resource $dbhandle, string $function_name, callable $step_func, callable $finalize_func [, int $num_args = -1]):void
SQLiteDatabase::createAggregate(string $function_name, callable $step_func, callable $finalize_func [, int $num_args = -1]):public void
sqlite_create_function(resource $dbhandle, string $function_name, callable $callback [, int $num_args = -1]):void
SQLiteDatabase::createFunction(string $function_name, callable $callback [, int $num_args = -1]):public void
sqlite_current(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
SQLiteResult::current([int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
sqlite_error_string(int $error_code):string
sqlite_escape_string(string $item):string
sqlite_exec(resource $dbhandle, string $query [, string &$error_msg]):bool
SQLiteDatabase::exec(resource $dbhandle, string $query [, string &$error_msg]):bool
sqlite_factory(string $filename [, int $mode = 0666 [, string &$error_message]]):SQLiteDatabase
sqlite_fetch_all(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
SQLiteResult::fetchAll([int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
sqlite_fetch_array(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
SQLiteResult::fetch([int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
sqlite_fetch_column_types(string $table_name, resource $dbhandle [, int $result_type = SQLITE_ASSOC]):array
SQLiteDatabase::fetchColumnTypes(string $table_name [, int $result_type = SQLITE_ASSOC]):public array
sqlite_fetch_object(resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = TRUE]]]):object
SQLiteResult::fetchObject([string $class_name [, array $ctor_params [, bool $decode_binary = TRUE]]]):object
sqlite_fetch_single(resource $result [, bool $decode_binary = TRUE]):string
SQLiteResult::fetchSingle([bool $decode_binary = TRUE]):string
sqlite_fetch_string(resource $result [, bool $decode_binary = TRUE]):string
sqlite_field_name(resource $result, int $field_index):string
SQLiteResult::fieldName(int $field_index):string
sqlite_has_more(resource $result):bool
sqlite_has_prev(resource $result):bool
SQLiteResult::hasPrev(void):bool
sqlite_key(void):int
SQLiteResult::key(void):int
sqlite_last_error(resource $dbhandle):int
SQLiteDatabase::lastError(void):public int
sqlite_last_insert_rowid(resource $dbhandle):int
SQLiteDatabase::lastInsertRowid(void):public int
sqlite_libencoding(void):string
sqlite_libversion(void):string
sqlite_next(resource $result):bool
SQLiteResult::next(void):bool
sqlite_num_fields(resource $result):int
SQLiteResult::numFields(void):int
sqlite_num_rows(resource $result):int
SQLiteResult::numRows(void):int
sqlite_open(string $filename [, int $mode = 0666 [, string &$error_message]]):resource
sqlite_popen(string $filename [, int $mode = 0666 [, string &$error_message]]):resource
sqlite_prev(resource $result):bool
SQLiteResult::prev(void):bool
sqlite_query(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]]):resource
SQLiteDatabase::query(string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]]):public SQLiteResult
sqlite_rewind(resource $result):bool
SQLiteResult::rewind(void):bool
sqlite_seek(resource $result, int $rownum):bool
SQLiteResult::seek(int $rownum):bool
sqlite_single_query(resource $db, string $query [, bool $first_row_only [, bool $decode_binary]]):array
SQLiteDatabase::singleQuery(string $query [, bool $first_row_only [, bool $decode_binary]]):public array
sqlite_udf_decode_binary(string $data):string
sqlite_udf_encode_binary(string $data):string
sqlite_unbuffered_query(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]]):resource
SQLiteDatabase::unbufferedQuery(string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]]):public SQLiteUnbuffered
sqlite_valid(resource $result):bool
SQLiteResult::valid(void):bool
sqlsrv_begin_transaction(resource $conn):bool
sqlsrv_cancel(resource $stmt):bool
sqlsrv_client_info(resource $conn):array
sqlsrv_close(resource $conn):bool
sqlsrv_commit(resource $conn):bool
sqlsrv_configure(string $setting, mixed $value):bool
sqlsrv_connect(string $serverName [, array $connectionInfo]):resource
sqlsrv_errors([int $errorsOrWarnings]):mixed
sqlsrv_execute(resource $stmt):bool
sqlsrv_fetch_array(resource $stmt [, int $fetchType [, int $row [, int $offset]]]):array
sqlsrv_fetch_object(resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset]]]]):mixed
sqlsrv_fetch(resource $stmt [, int $row [, int $offset]]):mixed
sqlsrv_field_metadata(resource $stmt):mixed
sqlsrv_free_stmt(resource $stmt):bool
sqlsrv_get_config(string $setting):mixed
sqlsrv_get_field(resource $stmt, int $fieldIndex [, int $getAsType]):mixed
sqlsrv_has_rows(resource $stmt):bool
sqlsrv_next_result(resource $stmt):mixed
sqlsrv_num_fields(resource $stmt):mixed
sqlsrv_num_rows(resource $stmt):mixed
sqlsrv_prepare(resource $conn, string $sql [, array $params [, array $options]]):mixed
sqlsrv_query(resource $conn, string $sql [, array $params [, array $options]]):mixed
sqlsrv_rollback(resource $conn):bool
sqlsrv_rows_affected(resource $stmt):int
sqlsrv_send_stream_data(resource $stmt):bool
sqlsrv_server_info(resource $conn):array
sqrt(float $arg):float
srand([int $seed]):void
sscanf(string $str, string $format [, mixed &$...]):mixed
ssdeep_fuzzy_compare(string $signature1, string $signature2):int
ssdeep_fuzzy_hash_filename(string $file_name):string
ssdeep_fuzzy_hash(string $to_hash):string
ssh2_auth_agent(resource $session, string $username):bool
ssh2_auth_hostbased_file(resource $session, string $username, string $hostname, string $pubkeyfile, string $privkeyfile [, string $passphrase [, string $local_username]]):bool
ssh2_auth_none(resource $session, string $username):mixed
ssh2_auth_password(resource $session, string $username, string $password):bool
ssh2_auth_pubkey_file(resource $session, string $username, string $pubkeyfile, string $privkeyfile [, string $passphrase]):bool
ssh2_connect(string $host [, int $port = 22 [, array $methods [, array $callbacks]]]):resource
ssh2_disconnect(resource $session):bool
ssh2_exec(resource $session, string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS]]]]]):resource
ssh2_fetch_stream(resource $channel, int $streamid):resource
ssh2_fingerprint(resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX]):string
ssh2_methods_negotiated(resource $session):array
ssh2_publickey_add(resource $pkey, string $algoname, string $blob [, bool $overwrite = FALSE [, array $attributes]]):bool
ssh2_publickey_init(resource $session):resource
ssh2_publickey_list(resource $pkey):array
ssh2_publickey_remove(resource $pkey, string $algoname, string $blob):bool
ssh2_scp_recv(resource $session, string $remote_file, string $local_file):bool
ssh2_scp_send(resource $session, string $local_file, string $remote_file [, int $create_mode = 0644]):bool
ssh2_sftp_chmod(resource $sftp, string $filename, int $mode):bool
ssh2_sftp_lstat(resource $sftp, string $path):array
ssh2_sftp_mkdir(resource $sftp, string $dirname [, int $mode = 0777 [, bool $recursive = FALSE]]):bool
ssh2_sftp_readlink(resource $sftp, string $link):string
ssh2_sftp_realpath(resource $sftp, string $filename):string
ssh2_sftp_rename(resource $sftp, string $from, string $to):bool
ssh2_sftp_rmdir(resource $sftp, string $dirname):bool
ssh2_sftp_stat(resource $sftp, string $path):array
ssh2_sftp_symlink(resource $sftp, string $target, string $link):bool
ssh2_sftp_unlink(resource $sftp, string $filename):bool
ssh2_sftp(resource $session):resource
ssh2_shell(resource $session [, string $term_type = "vanilla" [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS]]]]]):resource
ssh2_tunnel(resource $session, string $host, int $port):resource
stat(string $filename):array
stats_absolute_deviation(array $a):float
stats_cdf_beta(float $par1, float $par2, float $par3, int $which):float
stats_cdf_binomial(float $par1, float $par2, float $par3, int $which):float
stats_cdf_cauchy(float $par1, float $par2, float $par3, int $which):float
stats_cdf_chisquare(float $par1, float $par2, int $which):float
stats_cdf_exponential(float $par1, float $par2, int $which):float
stats_cdf_f(float $par1, float $par2, float $par3, int $which):float
stats_cdf_gamma(float $par1, float $par2, float $par3, int $which):float
stats_cdf_laplace(float $par1, float $par2, float $par3, int $which):float
stats_cdf_logistic(float $par1, float $par2, float $par3, int $which):float
stats_cdf_negative_binomial(float $par1, float $par2, float $par3, int $which):float
stats_cdf_noncentral_chisquare(float $par1, float $par2, float $par3, int $which):float
stats_cdf_noncentral_f(float $par1, float $par2, float $par3, float $par4, int $which):float
stats_cdf_noncentral_t(float $par1, float $par2, float $par3, int $which):float
stats_cdf_normal(float $par1, float $par2, float $par3, int $which):float
stats_cdf_poisson(float $par1, float $par2, int $which):float
stats_cdf_t(float $par1, float $par2, int $which):float
stats_cdf_uniform(float $par1, float $par2, float $par3, int $which):float
stats_cdf_weibull(float $par1, float $par2, float $par3, int $which):float
stats_covariance(array $a, array $b):float
stats_dens_beta(float $x, float $a, float $b):float
stats_dens_cauchy(float $x, float $ave, float $stdev):float
stats_dens_chisquare(float $x, float $dfr):float
stats_dens_exponential(float $x, float $scale):float
stats_dens_f(float $x, float $dfr1, float $dfr2):float
stats_dens_gamma(float $x, float $shape, float $scale):float
stats_dens_laplace(float $x, float $ave, float $stdev):float
stats_dens_logistic(float $x, float $ave, float $stdev):float
stats_dens_normal(float $x, float $ave, float $stdev):float
stats_dens_pmf_binomial(float $x, float $n, float $pi):float
stats_dens_pmf_hypergeometric(float $n1, float $n2, float $N1, float $N2):float
stats_dens_pmf_negative_binomial(float $x, float $n, float $pi):float
stats_dens_pmf_poisson(float $x, float $lb):float
stats_dens_t(float $x, float $dfr):float
stats_dens_uniform(float $x, float $a, float $b):float
stats_dens_weibull(float $x, float $a, float $b):float
stats_harmonic_mean(array $a):number
stats_kurtosis(array $a):float
stats_rand_gen_beta(float $a, float $b):float
stats_rand_gen_chisquare(float $df):float
stats_rand_gen_exponential(float $av):float
stats_rand_gen_f(float $dfn, float $dfd):float
stats_rand_gen_funiform(float $low, float $high):float
stats_rand_gen_gamma(float $a, float $r):float
stats_rand_gen_ibinomial_negative(int $n, float $p):int
stats_rand_gen_ibinomial(int $n, float $pp):int
stats_rand_gen_int(void):int
stats_rand_gen_ipoisson(float $mu):int
stats_rand_gen_iuniform(int $low, int $high):int
stats_rand_gen_noncenral_chisquare(float $df, float $xnonc):float
stats_rand_gen_noncentral_chisquare(float $df, float $xnonc):float
stats_rand_gen_noncentral_f(float $dfn, float $dfd, float $xnonc):float
stats_rand_gen_noncentral_t(float $df, float $xnonc):float
stats_rand_gen_normal(float $av, float $sd):float
stats_rand_gen_t(float $df):float
stats_rand_get_seeds(void):array
stats_rand_phrase_to_seeds(string $phrase):array
stats_rand_ranf(void):float
stats_rand_setall(int $iseed1, int $iseed2):void
stats_skew(array $a):float
stats_standard_deviation(array $a [, bool $sample = FALSE]):float
stats_stat_binomial_coef(int $x, int $n):float
stats_stat_correlation(array $arr1, array $arr2):float
stats_stat_factorial(int $n):float
stats_stat_independent_t(array $arr1, array $arr2):float
stats_stat_innerproduct(array $arr1, array $arr2):float
stats_stat_paired_t(array $arr1, array $arr2):float
stats_stat_percentile(array $arr, float $perc):float
stats_stat_powersum(array $arr, float $power):float
stats_variance(array $a [, bool $sample = FALSE]):float
stomp_connect_error(void):string
stomp_version(void):string
str_getcsv(string $input [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\"]]]):array
str_ireplace(mixed $search, mixed $replace, mixed $subject [, int &$count]):mixed
str_pad(string $input, int $pad_length [, string $pad_string = " " [, int $pad_type = STR_PAD_RIGHT]]):string
str_repeat(string $input, int $multiplier):string
str_replace(mixed $search, mixed $replace, mixed $subject [, int &$count]):mixed
str_rot13(string $str):string
str_shuffle(string $str):string
str_split(string $string [, int $split_length = 1]):array
str_word_count(string $string [, int $format = 0 [, string $charlist]]):mixed
strcasecmp(string $str1, string $str2):int
strchr(string $haystack, mixed $needle [, bool $before_needle = FALSE]):string
strcmp(string $str1, string $str2):int
strcoll(string $str1, string $str2):int
strcspn(string $subject, string $mask [, int $start [, int $length]]):int
stream_bucket_append(resource $brigade, object $bucket):void
stream_bucket_make_writeable(resource $brigade):object
stream_bucket_new(resource $stream, string $buffer):object
stream_bucket_prepend(resource $brigade, object $bucket):void
stream_context_create([array $options [, array $params]]):resource
stream_context_get_default([array $options]):resource
stream_context_get_options(resource $stream_or_context):array
stream_context_get_params(resource $stream_or_context):array
stream_context_set_default(array $options):resource
stream_context_set_option(resource $stream_or_context, string $wrapper, string $option, mixed $value):bool
stream_context_set_params(resource $stream_or_context, array $params):bool
stream_copy_to_stream(resource $source, resource $dest [, int $maxlength = -1 [, int $offset = 0]]):int
stream_filter_append(resource $stream, string $filtername [, int $read_write [, mixed $params]]):resource
stream_filter_prepend(resource $stream, string $filtername [, int $read_write [, mixed $params]]):resource
stream_filter_register(string $filtername, string $classname):bool
stream_filter_remove(resource $stream_filter):bool
stream_get_contents(resource $handle [, int $maxlength = -1 [, int $offset = -1]]):string
stream_get_filters(void):array
stream_get_line(resource $handle, int $length [, string $ending]):string
stream_get_meta_data(resource $stream):array
stream_get_transports(void):array
stream_get_wrappers(void):array
stream_is_local(mixed $stream_or_url):bool
stream_isatty(resource $stream):bool
stream_notification_callback(int $notification_code, int $severity, string $message, int $message_code, int $bytes_transferred, int $bytes_max):void
stream_register_wrapper(string $protocol, string $classname [, int $flags = 0]):bool
stream_resolve_include_path(string $filename):string
stream_select(array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0]):int
stream_set_blocking(resource $stream, bool $mode):bool
stream_set_chunk_size(resource $fp, int $chunk_size):int
stream_set_read_buffer(resource $stream, int $buffer):int
stream_set_timeout(resource $stream, int $seconds [, int $microseconds = 0]):bool
stream_set_write_buffer(resource $stream, int $buffer):int
stream_socket_accept(resource $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername]]):resource
stream_socket_client(string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context]]]]]):resource
stream_socket_enable_crypto(resource $stream, bool $enable [, int $crypto_type [, resource $session_stream]]):mixed
stream_socket_get_name(resource $handle, bool $want_peer):string
stream_socket_pair(int $domain, int $type, int $protocol):array
stream_socket_recvfrom(resource $socket, int $length [, int $flags = 0 [, string &$address]]):string
stream_socket_sendto(resource $socket, string $data [, int $flags = 0 [, string $address]]):int
stream_socket_server(string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context]]]]):resource
stream_socket_shutdown(resource $stream, int $how):bool
stream_supports_lock(resource $stream):bool
stream_wrapper_register(string $protocol, string $classname [, int $flags = 0]):bool
stream_wrapper_restore(string $protocol):bool
stream_wrapper_unregister(string $protocol):bool
strftime(string $format [, int $timestamp = time()]):string
strip_tags(string $str [, string $allowable_tags]):string
stripcslashes(string $str):string
stripos(string $haystack, mixed $needle [, int $offset = 0]):int
stripslashes(string $str):string
stristr(string $haystack, mixed $needle [, bool $before_needle = FALSE]):string
strlen(string $string):int
strnatcasecmp(string $str1, string $str2):int
strnatcmp(string $str1, string $str2):int
strncasecmp(string $str1, string $str2, int $len):int
strncmp(string $str1, string $str2, int $len):int
strpbrk(string $haystack, string $char_list):string
strpos(string $haystack, mixed $needle [, int $offset = 0]):int
strptime(string $date, string $format):array
strrchr(string $haystack, mixed $needle):string
strrev(string $string):string
strripos(string $haystack, mixed $needle [, int $offset = 0]):int
strrpos(string $haystack, mixed $needle [, int $offset = 0]):int
strspn(string $subject, string $mask [, int $start [, int $length]]):int
strstr(string $haystack, mixed $needle [, bool $before_needle = FALSE]):string
strtok(string $str, string $token):string
strtolower(string $string):string
strtotime(string $time [, int $now = time()]):int
strtoupper(string $string):string
strtr(string $str, string $from, string $to):string
strval(mixed $var):string
substr_compare(string $main_str, string $str, int $offset [, int $length [, bool $case_insensitivity = FALSE]]):int
substr_count(string $haystack, string $needle [, int $offset = 0 [, int $length]]):int
substr_replace(mixed $string, mixed $replacement, mixed $start [, mixed $length]):mixed
substr(string $string, int $start [, int $length]):string
svn_add(string $path [, bool $recursive = TRUE [, bool $force = FALSE]]):bool
svn_auth_get_parameter(string $key):string
svn_auth_set_parameter(string $key, string $value):void
svn_blame(string $repository_url [, int $revision_no = SVN_REVISION_HEAD]):array
svn_cat(string $repos_url [, int $revision_no]):string
svn_checkout(string $repos, string $targetpath [, int $revision [, int $flags = 0]]):bool
svn_cleanup(string $workingdir):bool
svn_client_version(void):string
svn_commit(string $log, array $targets [, bool $recursive = TRUE]):array
svn_delete(string $path [, bool $force = FALSE]):bool
svn_diff(string $path1, int $rev1, string $path2, int $rev2):array
svn_export(string $frompath, string $topath [, bool $working_copy = TRUE [, int $revision_no = -1]]):bool
svn_fs_abort_txn(resource $txn):bool
svn_fs_apply_text(resource $root, string $path):resource
svn_fs_begin_txn2(resource $repos, int $rev):resource
svn_fs_change_node_prop(resource $root, string $path, string $name, string $value):bool
svn_fs_check_path(resource $fsroot, string $path):int
svn_fs_contents_changed(resource $root1, string $path1, resource $root2, string $path2):bool
svn_fs_copy(resource $from_root, string $from_path, resource $to_root, string $to_path):bool
svn_fs_delete(resource $root, string $path):bool
svn_fs_dir_entries(resource $fsroot, string $path):array
svn_fs_file_contents(resource $fsroot, string $path):resource
svn_fs_file_length(resource $fsroot, string $path):int
svn_fs_is_dir(resource $root, string $path):bool
svn_fs_is_file(resource $root, string $path):bool
svn_fs_make_dir(resource $root, string $path):bool
svn_fs_make_file(resource $root, string $path):bool
svn_fs_node_created_rev(resource $fsroot, string $path):int
svn_fs_node_prop(resource $fsroot, string $path, string $propname):string
svn_fs_props_changed(resource $root1, string $path1, resource $root2, string $path2):bool
svn_fs_revision_prop(resource $fs, int $revnum, string $propname):string
svn_fs_revision_root(resource $fs, int $revnum):resource
svn_fs_txn_root(resource $txn):resource
svn_fs_youngest_rev(resource $fs):int
svn_import(string $path, string $url, bool $nonrecursive):bool
svn_log(string $repos_url [, int $start_revision [, int $end_revision [, int $limit = 0 [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY]]]]):array
svn_ls(string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = FALSE [, bool $peg = FALSE]]]):array
svn_mkdir(string $path [, string $log_message]):bool
svn_repos_create(string $path [, array $config [, array $fsconfig]]):resource
svn_repos_fs_begin_txn_for_commit(resource $repos, int $rev, string $author, string $log_msg):resource
svn_repos_fs_commit_txn(resource $txn):int
svn_repos_fs(resource $repos):resource
svn_repos_hotcopy(string $repospath, string $destpath, bool $cleanlogs):bool
svn_repos_open(string $path):resource
svn_repos_recover(string $path):bool
svn_revert(string $path [, bool $recursive = FALSE]):bool
svn_status(string $path [, int $flags = 0]):array
svn_update(string $path [, int $revno = SVN_REVISION_HEAD [, bool $recurse = TRUE]]):int
swoole_async_dns_lookup(string $hostname, callable $callback):bool
swoole_async_read(string $filename, callable $callback [, int $chunk_size = 65536 [, int $offset = 0]]):bool
swoole_async_readfile(string $filename, callable $callback):bool
swoole_async_set(array $settings):void
swoole_async_write(string $filename, string $content [, integer $offset [, callable $callback]]):bool
swoole_async_writefile(string $filename, string $content [, callable $callback [, int $flags = 0]]):bool
swoole_client_select(array &$read_array, array &$write_array, array &$error_array [, float $timeout = 0.5]):int
swoole_cpu_num(void):int
swoole_errno(void):int
swoole_event_add(int $fd [, callable $read_callback [, callable $write_callback [, int $events = 0]]]):int
swoole_event_defer(callable $callback):bool
swoole_event_del(int $fd):bool
swoole_event_exit(void):void
swoole_event_set(int $fd [, callable $read_callback [, callable $write_callback [, int $events = 0]]]):bool
swoole_event_wait(void):void
swoole_event_write(int $fd, string $data):bool
swoole_get_local_ip(void):array
swoole_last_error(void):int
swoole_load_module(string $filename):mixed
swoole_select(array &$read_array, array &$write_array, array &$error_array [, float $timeout]):int
swoole_set_process_name(string $process_name [, int $size = 128]):void
swoole_strerror(int $errno [, int $error_type = 0]):string
swoole_timer_after(int $ms, callable $callback [, mixed $param]):int
swoole_timer_exists(int $timer_id):bool
swoole_timer_tick(int $ms, callable $callback [, mixed $param]):int
swoole_version(void):string
sybase_affected_rows([resource $link_identifier]):int
sybase_close([resource $link_identifier]):bool
sybase_connect([string $servername [, string $username [, string $password [, string $charset [, string $appname [, bool $new = FALSE]]]]]]):resource
sybase_data_seek(resource $result_identifier, int $row_number):bool
sybase_deadlock_retry_count(int $retry_count):void
sybase_fetch_array(resource $result):array
sybase_fetch_assoc(resource $result):array
sybase_fetch_field(resource $result [, int $field_offset = -1]):object
sybase_fetch_object(resource $result [, mixed $object]):object
sybase_fetch_row(resource $result):array
sybase_field_seek(resource $result, int $field_offset):bool
sybase_free_result(resource $result):bool
sybase_get_last_message(void):string
sybase_min_client_severity(int $severity):void
sybase_min_error_severity(int $severity):void
sybase_min_message_severity(int $severity):void
sybase_min_server_severity(int $severity):void
sybase_num_fields(resource $result):int
sybase_num_rows(resource $result):int
sybase_pconnect([string $servername [, string $username [, string $password [, string $charset [, string $appname]]]]]):resource
sybase_query(string $query [, resource $link_identifier]):mixed
sybase_result(resource $result, int $row, mixed $field):string
sybase_select_db(string $database_name [, resource $link_identifier]):bool
sybase_set_message_handler(callable $handler [, resource $link_identifier]):bool
sybase_unbuffered_query(string $query, resource $link_identifier [, bool $store_result]):resource
symlink(string $target, string $link):bool
sys_get_temp_dir(void):string
sys_getloadavg(void):array
syslog(int $priority, string $message):bool
system(string $command [, int &$return_var]):string
taint(string &$string [, string $...]):bool
tan(float $arg):float
tanh(float $arg):float
tcpwrap_check(string $daemon, string $address [, string $user [, bool $nodns = FALSE]]):bool
tempnam(string $dir, string $prefix):string
textdomain(string $text_domain = NULL):string
tidy_access_count(tidy $object):int
tidy_config_count(tidy $object):int
tidy_error_count(tidy $object):int
tidy_get_output(tidy $object):string
tidy_load_config(string $filename, string $encoding):void
tidy_reset_config(void):bool
tidy_save_config(string $filename):bool
tidy_set_encoding(string $encoding):bool
tidy_setopt(string $option, mixed $value):bool
tidy_warning_count(tidy $object):int
time_nanosleep(int $seconds, int $nanoseconds):mixed
time_sleep_until(float $timestamp):bool
time(void):int
timezone_name_from_abbr(string $abbr [, int $gmtOffset = -1 [, int $isdst = -1]]):string
timezone_version_get(void):string
tmpfile(void):resource
token_get_all(string $source [, int $flags = 0]):array
token_name(int $token):string
touch(string $filename [, int $time = time() [, int $atime]]):bool
trader_acos(array $real):array
trader_ad(array $high, array $low, array $close, array $volume):array
trader_add(array $real0, array $real1):array
trader_adosc(array $high, array $low, array $close, array $volume [, int $fastPeriod [, int $slowPeriod]]):array
trader_adx(array $high, array $low, array $close [, int $timePeriod]):array
trader_adxr(array $high, array $low, array $close [, int $timePeriod]):array
trader_apo(array $real [, int $fastPeriod [, int $slowPeriod [, int $mAType]]]):array
trader_aroon(array $high, array $low [, int $timePeriod]):array
trader_aroonosc(array $high, array $low [, int $timePeriod]):array
trader_asin(array $real):array
trader_atan(array $real):array
trader_atr(array $high, array $low, array $close [, int $timePeriod]):array
trader_avgprice(array $open, array $high, array $low, array $close):array
trader_bbands(array $real [, int $timePeriod [, float $nbDevUp [, float $nbDevDn [, int $mAType]]]]):array
trader_beta(array $real0, array $real1 [, int $timePeriod]):array
trader_bop(array $open, array $high, array $low, array $close):array
trader_cci(array $high, array $low, array $close [, int $timePeriod]):array
trader_cdl2crows(array $open, array $high, array $low, array $close):array
trader_cdl3blackcrows(array $open, array $high, array $low, array $close):array
trader_cdl3inside(array $open, array $high, array $low, array $close):array
trader_cdl3linestrike(array $open, array $high, array $low, array $close):array
trader_cdl3outside(array $open, array $high, array $low, array $close):array
trader_cdl3starsinsouth(array $open, array $high, array $low, array $close):array
trader_cdl3whitesoldiers(array $open, array $high, array $low, array $close):array
trader_cdlabandonedbaby(array $open, array $high, array $low, array $close [, float $penetration]):array
trader_cdladvanceblock(array $open, array $high, array $low, array $close):array
trader_cdlbelthold(array $open, array $high, array $low, array $close):array
trader_cdlbreakaway(array $open, array $high, array $low, array $close):array
trader_cdlclosingmarubozu(array $open, array $high, array $low, array $close):array
trader_cdlconcealbabyswall(array $open, array $high, array $low, array $close):array
trader_cdlcounterattack(array $open, array $high, array $low, array $close):array
trader_cdldarkcloudcover(array $open, array $high, array $low, array $close [, float $penetration]):array
trader_cdldoji(array $open, array $high, array $low, array $close):array
trader_cdldojistar(array $open, array $high, array $low, array $close):array
trader_cdldragonflydoji(array $open, array $high, array $low, array $close):array
trader_cdlengulfing(array $open, array $high, array $low, array $close):array
trader_cdleveningdojistar(array $open, array $high, array $low, array $close [, float $penetration]):array
trader_cdleveningstar(array $open, array $high, array $low, array $close [, float $penetration]):array
trader_cdlgapsidesidewhite(array $open, array $high, array $low, array $close):array
trader_cdlgravestonedoji(array $open, array $high, array $low, array $close):array
trader_cdlhammer(array $open, array $high, array $low, array $close):array
trader_cdlhangingman(array $open, array $high, array $low, array $close):array
trader_cdlharami(array $open, array $high, array $low, array $close):array
trader_cdlharamicross(array $open, array $high, array $low, array $close):array
trader_cdlhighwave(array $open, array $high, array $low, array $close):array
trader_cdlhikkake(array $open, array $high, array $low, array $close):array
trader_cdlhikkakemod(array $open, array $high, array $low, array $close):array
trader_cdlhomingpigeon(array $open, array $high, array $low, array $close):array
trader_cdlidentical3crows(array $open, array $high, array $low, array $close):array
trader_cdlinneck(array $open, array $high, array $low, array $close):array
trader_cdlinvertedhammer(array $open, array $high, array $low, array $close):array
trader_cdlkicking(array $open, array $high, array $low, array $close):array
trader_cdlkickingbylength(array $open, array $high, array $low, array $close):array
trader_cdlladderbottom(array $open, array $high, array $low, array $close):array
trader_cdllongleggeddoji(array $open, array $high, array $low, array $close):array
trader_cdllongline(array $open, array $high, array $low, array $close):array
trader_cdlmarubozu(array $open, array $high, array $low, array $close):array
trader_cdlmatchinglow(array $open, array $high, array $low, array $close):array
trader_cdlmathold(array $open, array $high, array $low, array $close [, float $penetration]):array
trader_cdlmorningdojistar(array $open, array $high, array $low, array $close [, float $penetration]):array
trader_cdlmorningstar(array $open, array $high, array $low, array $close [, float $penetration]):array
trader_cdlonneck(array $open, array $high, array $low, array $close):array
trader_cdlpiercing(array $open, array $high, array $low, array $close):array
trader_cdlrickshawman(array $open, array $high, array $low, array $close):array
trader_cdlrisefall3methods(array $open, array $high, array $low, array $close):array
trader_cdlseparatinglines(array $open, array $high, array $low, array $close):array
trader_cdlshootingstar(array $open, array $high, array $low, array $close):array
trader_cdlshortline(array $open, array $high, array $low, array $close):array
trader_cdlspinningtop(array $open, array $high, array $low, array $close):array
trader_cdlstalledpattern(array $open, array $high, array $low, array $close):array
trader_cdlsticksandwich(array $open, array $high, array $low, array $close):array
trader_cdltakuri(array $open, array $high, array $low, array $close):array
trader_cdltasukigap(array $open, array $high, array $low, array $close):array
trader_cdlthrusting(array $open, array $high, array $low, array $close):array
trader_cdltristar(array $open, array $high, array $low, array $close):array
trader_cdlunique3river(array $open, array $high, array $low, array $close):array
trader_cdlupsidegap2crows(array $open, array $high, array $low, array $close):array
trader_cdlxsidegap3methods(array $open, array $high, array $low, array $close):array
trader_ceil(array $real):array
trader_cmo(array $real [, int $timePeriod]):array
trader_correl(array $real0, array $real1 [, int $timePeriod]):array
trader_cos(array $real):array
trader_cosh(array $real):array
trader_dema(array $real [, int $timePeriod]):array
trader_div(array $real0, array $real1):array
trader_dx(array $high, array $low, array $close [, int $timePeriod]):array
trader_ema(array $real [, int $timePeriod]):array
trader_errno(void):int
trader_exp(array $real):array
trader_floor(array $real):array
trader_get_compat(void):int
trader_get_unstable_period(int $functionId):int
trader_ht_dcperiod(array $real):array
trader_ht_dcphase(array $real):array
trader_ht_phasor(array $real):array
trader_ht_sine(array $real):array
trader_ht_trendline(array $real):array
trader_ht_trendmode(array $real):array
trader_kama(array $real [, int $timePeriod]):array
trader_linearreg_angle(array $real [, int $timePeriod]):array
trader_linearreg_intercept(array $real [, int $timePeriod]):array
trader_linearreg_slope(array $real [, int $timePeriod]):array
trader_linearreg(array $real [, int $timePeriod]):array
trader_ln(array $real):array
trader_log10(array $real):array
trader_ma(array $real [, int $timePeriod [, int $mAType]]):array
trader_macd(array $real [, int $fastPeriod [, int $slowPeriod [, int $signalPeriod]]]):array
trader_macdext(array $real [, int $fastPeriod [, int $fastMAType [, int $slowPeriod [, int $slowMAType [, int $signalPeriod [, int $signalMAType]]]]]]):array
trader_macdfix(array $real [, int $signalPeriod]):array
trader_mama(array $real [, float $fastLimit [, float $slowLimit]]):array
trader_mavp(array $real, array $periods [, int $minPeriod [, int $maxPeriod [, int $mAType]]]):array
trader_max(array $real [, int $timePeriod]):array
trader_maxindex(array $real [, int $timePeriod]):array
trader_medprice(array $high, array $low):array
trader_mfi(array $high, array $low, array $close, array $volume [, int $timePeriod]):array
trader_midpoint(array $real [, int $timePeriod]):array
trader_midprice(array $high, array $low [, int $timePeriod]):array
trader_min(array $real [, int $timePeriod]):array
trader_minindex(array $real [, int $timePeriod]):array
trader_minmax(array $real [, int $timePeriod]):array
trader_minmaxindex(array $real [, int $timePeriod]):array
trader_minus_di(array $high, array $low, array $close [, int $timePeriod]):array
trader_minus_dm(array $high, array $low [, int $timePeriod]):array
trader_mom(array $real [, int $timePeriod]):array
trader_mult(array $real0, array $real1):array
trader_natr(array $high, array $low, array $close [, int $timePeriod]):array
trader_obv(array $real, array $volume):array
trader_plus_di(array $high, array $low, array $close [, int $timePeriod]):array
trader_plus_dm(array $high, array $low [, int $timePeriod]):array
trader_ppo(array $real [, int $fastPeriod [, int $slowPeriod [, int $mAType]]]):array
trader_roc(array $real [, int $timePeriod]):array
trader_rocp(array $real [, int $timePeriod]):array
trader_rocr(array $real [, int $timePeriod]):array
trader_rocr100(array $real [, int $timePeriod]):array
trader_rsi(array $real [, int $timePeriod]):array
trader_sar(array $high, array $low [, float $acceleration [, float $maximum]]):array
trader_sarext(array $high, array $low [, float $startValue [, float $offsetOnReverse [, float $accelerationInitLong [, float $accelerationLong [, float $accelerationMaxLong [, float $accelerationInitShort [, float $accelerationShort [, float $accelerationMaxShort]]]]]]]]):array
trader_set_compat(int $compatId):void
trader_set_unstable_period(int $functionId, int $timePeriod):void
trader_sin(array $real):array
trader_sinh(array $real):array
trader_sma(array $real [, int $timePeriod]):array
trader_sqrt(array $real):array
trader_stddev(array $real [, int $timePeriod [, float $nbDev]]):array
trader_stoch(array $high, array $low, array $close [, int $fastK_Period [, int $slowK_Period [, int $slowK_MAType [, int $slowD_Period [, int $slowD_MAType]]]]]):array
trader_stochf(array $high, array $low, array $close [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType]]]):array
trader_stochrsi(array $real [, int $timePeriod [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType]]]]):array
trader_sub(array $real0, array $real1):array
trader_sum(array $real [, int $timePeriod]):array
trader_t3(array $real [, int $timePeriod [, float $vFactor]]):array
trader_tan(array $real):array
trader_tanh(array $real):array
trader_tema(array $real [, int $timePeriod]):array
trader_trange(array $high, array $low, array $close):array
trader_trima(array $real [, int $timePeriod]):array
trader_trix(array $real [, int $timePeriod]):array
trader_tsf(array $real [, int $timePeriod]):array
trader_typprice(array $high, array $low, array $close):array
trader_ultosc(array $high, array $low, array $close [, int $timePeriod1 [, int $timePeriod2 [, int $timePeriod3]]]):array
trader_var(array $real [, int $timePeriod [, float $nbDev]]):array
trader_wclprice(array $high, array $low, array $close):array
trader_willr(array $high, array $low, array $close [, int $timePeriod]):array
trader_wma(array $real [, int $timePeriod]):array
trait_exists(string $traitname [, bool $autoload]):bool
trigger_error(string $error_msg [, int $error_type = E_USER_NOTICE]):bool
trim(string $str [, string $character_mask = " \t\n\r\0\x0B"]):string
uasort(array &$array, callable $value_compare_func):bool
ucfirst(string $str):string
ucwords(string $str [, string $delimiters = " \t\r\n\f\v"]):string
udm_add_search_limit(resource $agent, int $var, string $val):bool
udm_alloc_agent_array(array $databases):resource
udm_alloc_agent(string $dbaddr [, string $dbmode]):resource
udm_api_version(void):int
udm_cat_list(resource $agent, string $category):array
udm_cat_path(resource $agent, string $category):array
udm_check_charset(resource $agent, string $charset):bool
udm_clear_search_limits(resource $agent):bool
udm_crc32(resource $agent, string $str):int
udm_errno(resource $agent):int
udm_error(resource $agent):string
udm_find(resource $agent, string $query):resource
udm_free_agent(resource $agent):int
udm_free_ispell_data(int $agent):bool
udm_free_res(resource $res):bool
udm_get_doc_count(resource $agent):int
udm_get_res_field(resource $res, int $row, int $field):string
udm_get_res_param(resource $res, int $param):string
udm_hash32(resource $agent, string $str):int
udm_load_ispell_data(resource $agent, int $var, string $val1, string $val2, int $flag):bool
udm_set_agent_param(resource $agent, int $var, string $val):bool
UI\Draw\Text\Font\fontFamilies(void):array
UI\quit(void):void
UI\run([int $flags]):void
uksort(array &$array, callable $key_compare_func):bool
umask([int $mask]):int
uniqid([string $prefix = "" [, bool $more_entropy = FALSE]]):string
unixtojd([int $timestamp = time()]):int
unlink(string $filename [, resource $context]):bool
unpack(string $format, string $data [, int $offset = 0]):array
unregister_tick_function(string $function_name):void
unserialize(string $str [, array $options]):mixed
unset(mixed $var [, mixed $...]):void
untaint(string &$string [, string $...]):bool
uopz_add_function(string $function, Closure $handler [, int &$flags = ZEND_ACC_PUBLIC]):bool
uopz_allow_exit(bool $allow):void
uopz_backup(string $function):void
uopz_compose(string $name, array $classes [, array $methods [, array $properties [, int $flags]]]):void
uopz_copy(string $function):Closure
uopz_del_function(string $function):bool
uopz_delete(string $function):void
uopz_extend(string $class, string $parent):bool
uopz_flags(string $function, int $flags):int
uopz_function(string $function, Closure $handler [, int $modifiers]):void
uopz_get_exit_status(void):mixed
uopz_get_hook(string $function):Closure
uopz_get_mock(string $class):mixed
uopz_get_property(string $class, string $property):mixed
uopz_get_return(string $function):mixed
uopz_get_static(string $class, string $function):array
uopz_implement(string $class, string $interface):bool
uopz_overload(int $opcode, Callable $callable):void
uopz_redefine(string $constant, mixed $value):bool
uopz_rename(string $function, string $rename):void
uopz_restore(string $function):void
uopz_set_hook(string $function, Closure $hook):bool
uopz_set_mock(string $class, mixed $mock):void
uopz_set_property(string $class, string $property, mixed $value):void
uopz_set_return(string $function, mixed $value [, bool $execute = FALSE]):bool
uopz_set_static(string $function, array $static):void
uopz_undefine(string $constant):bool
uopz_unset_hook(string $function):bool
uopz_unset_mock(string $class):void
uopz_unset_return(string $function):bool
urldecode(string $str):string
urlencode(string $str):string
use_soap_error_handler([bool $handler = TRUE]):bool
user_error(string $error_msg [, int $error_type = E_USER_NOTICE]):bool
usleep(int $micro_seconds):void
usort(array &$array, callable $value_compare_func):bool
utf8_decode(string $data):string
utf8_encode(string $data):string
var_dump(mixed $expression [, mixed $...]):void
var_export(mixed $expression [, bool $return = FALSE]):mixed
variant_abs(mixed $val):mixed
variant_add(mixed $left, mixed $right):mixed
variant_and(mixed $left, mixed $right):mixed
variant_cast(variant $variant, int $type):variant
variant_cat(mixed $left, mixed $right):mixed
variant_cmp(mixed $left, mixed $right [, int $lcid [, int $flags]]):int
variant_date_from_timestamp(int $timestamp):variant
variant_date_to_timestamp(variant $variant):int
variant_div(mixed $left, mixed $right):mixed
variant_eqv(mixed $left, mixed $right):mixed
variant_fix(mixed $variant):mixed
variant_get_type(variant $variant):int
variant_idiv(mixed $left, mixed $right):mixed
variant_imp(mixed $left, mixed $right):mixed
variant_int(mixed $variant):mixed
variant_mod(mixed $left, mixed $right):mixed
variant_mul(mixed $left, mixed $right):mixed
variant_neg(mixed $variant):mixed
variant_not(mixed $variant):mixed
variant_or(mixed $left, mixed $right):mixed
variant_pow(mixed $left, mixed $right):mixed
variant_round(mixed $variant, int $decimals):mixed
variant_set_type(variant $variant, int $type):void
variant_set(variant $variant, mixed $value):void
variant_sub(mixed $left, mixed $right):mixed
variant_xor(mixed $left, mixed $right):mixed
version_compare(string $version1, string $version2):int
vfprintf(resource $handle, string $format, array $args):int
virtual(string $filename):bool
vpopmail_add_alias_domain_ex(string $olddomain, string $newdomain):bool
vpopmail_add_alias_domain(string $domain, string $aliasdomain):bool
vpopmail_add_domain_ex(string $domain, string $passwd [, string $quota [, string $bounce [, bool $apop]]]):bool
vpopmail_add_domain(string $domain, string $dir, int $uid, int $gid):bool
vpopmail_add_user(string $user, string $domain, string $password [, string $gecos [, bool $apop]]):bool
vpopmail_alias_add(string $user, string $domain, string $alias):bool
vpopmail_alias_del_domain(string $domain):bool
vpopmail_alias_del(string $user, string $domain):bool
vpopmail_alias_get_all(string $domain):array
vpopmail_alias_get(string $alias, string $domain):array
vpopmail_auth_user(string $user, string $domain, string $password [, string $apop]):bool
vpopmail_del_domain_ex(string $domain):bool
vpopmail_del_domain(string $domain):bool
vpopmail_del_user(string $user, string $domain):bool
vpopmail_error(void):string
vpopmail_passwd(string $user, string $domain, string $password [, bool $apop]):bool
vpopmail_set_user_quota(string $user, string $domain, string $quota):bool
vprintf(string $format, array $args):int
vsprintf(string $format, array $args):string
wddx_add_vars(resource $packet_id, mixed $var_name [, mixed $...]):bool
wddx_deserialize(string $packet):mixed
wddx_packet_end(resource $packet_id):string
wddx_packet_start([string $comment]):resource
wddx_serialize_value(mixed $var [, string $comment]):string
wddx_serialize_vars(mixed $var_name [, mixed $...]):string
win32_continue_service(string $servicename [, string $machine]):int
win32_create_service(array $details [, string $machine]):mixed
win32_delete_service(string $servicename [, string $machine]):mixed
win32_get_last_control_message(void):int
win32_pause_service(string $servicename [, string $machine]):int
win32_ps_list_procs(void):array
win32_ps_stat_mem(void):array
win32_ps_stat_proc([int $pid = 0]):array
win32_query_service_status(string $servicename [, string $machine]):mixed
win32_set_service_status(int $status [, int $checkpoint = 0]):bool
win32_start_service_ctrl_dispatcher(string $name):mixed
win32_start_service(string $servicename [, string $machine]):int
win32_stop_service(string $servicename [, string $machine]):int
wincache_fcache_fileinfo([bool $summaryonly = FALSE]):array
wincache_fcache_meminfo(void):array
wincache_lock(string $key [, bool $isglobal = FALSE]):bool
wincache_ocache_fileinfo([bool $summaryonly = FALSE]):array
wincache_ocache_meminfo(void):array
wincache_refresh_if_changed([array $files = NULL]):bool
wincache_rplist_fileinfo([bool $summaryonly = FALSE]):array
wincache_rplist_meminfo(void):array
wincache_scache_info([bool $summaryonly = FALSE]):array
wincache_scache_meminfo(void):array
wincache_ucache_add(string $key, mixed $value [, int $ttl = 0]):bool
wincache_ucache_cas(string $key, int $old_value, int $new_value):bool
wincache_ucache_clear(void):bool
wincache_ucache_dec(string $key [, int $dec_by = 1 [, bool &$success]]):mixed
wincache_ucache_delete(mixed $key):bool
wincache_ucache_exists(string $key):bool
wincache_ucache_get(mixed $key [, bool &$success]):mixed
wincache_ucache_inc(string $key [, int $inc_by = 1 [, bool &$success]]):mixed
wincache_ucache_info([bool $summaryonly = FALSE [, string $key = NULL]]):array
wincache_ucache_meminfo(void):array
wincache_ucache_set(mixed $key, mixed $value [, int $ttl = 0]):bool
wincache_unlock(string $key):bool
wordwrap(string $str [, int $width = 75 [, string $break = "\n" [, bool $cut = FALSE]]]):string
xattr_get(string $filename, string $name [, int $flags = 0]):string
xattr_list(string $filename [, int $flags = 0]):array
xattr_remove(string $filename, string $name [, int $flags = 0]):bool
xattr_set(string $filename, string $name, string $value [, int $flags = 0]):bool
xattr_supported(string $filename [, int $flags = 0]):bool
xdiff_file_bdiff_size(string $file):int
xdiff_file_bdiff(string $old_file, string $new_file, string $dest):bool
xdiff_file_bpatch(string $file, string $patch, string $dest):bool
xdiff_file_diff_binary(string $old_file, string $new_file, string $dest):bool
xdiff_file_diff(string $old_file, string $new_file, string $dest [, int $context = 3 [, bool $minimal = FALSE]]):bool
xdiff_file_merge3(string $old_file, string $new_file1, string $new_file2, string $dest):mixed
xdiff_file_patch_binary(string $file, string $patch, string $dest):bool
xdiff_file_patch(string $file, string $patch, string $dest [, int $flags = DIFF_PATCH_NORMAL]):mixed
xdiff_file_rabdiff(string $old_file, string $new_file, string $dest):bool
xdiff_string_bdiff_size(string $patch):int
xdiff_string_bdiff(string $old_data, string $new_data):string
xdiff_string_bpatch(string $str, string $patch):string
xdiff_string_diff_binary(string $old_data, string $new_data):string
xdiff_string_diff(string $old_data, string $new_data [, int $context = 3 [, bool $minimal = FALSE]]):string
xdiff_string_merge3(string $old_data, string $new_data1, string $new_data2 [, string &$error]):mixed
xdiff_string_patch_binary(string $str, string $patch):string
xdiff_string_patch(string $str, string $patch [, int $flags [, string &$error]]):string
xdiff_string_rabdiff(string $old_data, string $new_data):string
xhprof_disable(void):array
xhprof_enable([int $flags = 0 [, array $options]]):void
xhprof_sample_disable(void):array
xhprof_sample_enable(void):void
xml_error_string(int $code):string
xml_get_current_byte_index(resource $parser):int
xml_get_current_column_number(resource $parser):int
xml_get_current_line_number(resource $parser):int
xml_get_error_code(resource $parser):int
xml_parse_into_struct(resource $parser, string $data, array &$values [, array &$index]):int
xml_parse(resource $parser, string $data [, bool $is_final = FALSE]):int
xml_parser_create_ns([string $encoding [, string $separator = ":"]]):resource
xml_parser_create([string $encoding]):resource
xml_parser_free(resource $parser):bool
xml_parser_get_option(resource $parser, int $option):mixed
xml_parser_set_option(resource $parser, int $option, mixed $value):bool
xml_set_character_data_handler(resource $parser, callable $handler):bool
xml_set_default_handler(resource $parser, callable $handler):bool
xml_set_element_handler(resource $parser, callable $start_element_handler, callable $end_element_handler):bool
xml_set_end_namespace_decl_handler(resource $parser, callable $handler):bool
xml_set_external_entity_ref_handler(resource $parser, callable $handler):bool
xml_set_notation_decl_handler(resource $parser, callable $handler):bool
xml_set_object(resource $parser, object &$object):bool
xml_set_processing_instruction_handler(resource $parser, callable $handler):bool
xml_set_start_namespace_decl_handler(resource $parser, callable $handler):bool
xml_set_unparsed_entity_decl_handler(resource $parser, callable $handler):bool
xmlrpc_decode_request(string $xml, string &$method [, string $encoding]):mixed
xmlrpc_decode(string $xml [, string $encoding = "iso-8859-1"]):mixed
xmlrpc_encode_request(string $method, mixed $params [, array $output_options]):string
xmlrpc_encode(mixed $value):string
xmlrpc_get_type(mixed $value):string
xmlrpc_is_fault(array $arg):bool
xmlrpc_parse_method_descriptions(string $xml):array
xmlrpc_server_add_introspection_data(resource $server, array $desc):int
xmlrpc_server_call_method(resource $server, string $xml, mixed $user_data [, array $output_options]):string
xmlrpc_server_create(void):resource
xmlrpc_server_destroy(resource $server):bool
xmlrpc_server_register_introspection_callback(resource $server, string $function):bool
xmlrpc_server_register_method(resource $server, string $method_name, string $function):bool
xmlrpc_set_type(string &$value, string $type):bool
XMLWriter::endAttribute(void):bool
xmlwriter_end_attribute(resource $xmlwriter):bool
XMLWriter::endCdata(void):bool
xmlwriter_end_cdata(resource $xmlwriter):bool
XMLWriter::endComment(void):bool
xmlwriter_end_comment(resource $xmlwriter):bool
XMLWriter::endDocument(void):bool
xmlwriter_end_document(resource $xmlwriter):bool
XMLWriter::endDtdAttlist(void):bool
xmlwriter_end_dtd_attlist(resource $xmlwriter):bool
XMLWriter::endDtdElement(void):bool
xmlwriter_end_dtd_element(resource $xmlwriter):bool
XMLWriter::endDtdEntity(void):bool
xmlwriter_end_dtd_entity(resource $xmlwriter):bool
XMLWriter::endDtd(void):bool
xmlwriter_end_dtd(resource $xmlwriter):bool
XMLWriter::endElement(void):bool
xmlwriter_end_element(resource $xmlwriter):bool
XMLWriter::endPi(void):bool
xmlwriter_end_pi(resource $xmlwriter):bool
XMLWriter::flush([bool $empty = TRUE]):mixed
xmlwriter_flush(resource $xmlwriter [, bool $empty = TRUE]):mixed
XMLWriter::fullEndElement(void):bool
xmlwriter_full_end_element(resource $xmlwriter):bool
XMLWriter::openMemory(void):bool
xmlwriter_open_memory(void):resource
XMLWriter::openUri(string $uri):bool
xmlwriter_open_uri(string $uri):resource
XMLWriter::outputMemory([bool $flush = TRUE]):string
xmlwriter_output_memory(resource $xmlwriter [, bool $flush = TRUE]):string
XMLWriter::setIndentString(string $indentString):bool
xmlwriter_set_indent_string(resource $xmlwriter, string $indentString):bool
XMLWriter::setIndent(bool $indent):bool
xmlwriter_set_indent(resource $xmlwriter, bool $indent):bool
XMLWriter::startAttributeNs(string $prefix, string $name, string $uri):bool
xmlwriter_start_attribute_ns(resource $xmlwriter, string $prefix, string $name, string $uri):bool
XMLWriter::startAttribute(string $name):bool
xmlwriter_start_attribute(resource $xmlwriter, string $name):bool
XMLWriter::startCdata(void):bool
xmlwriter_start_cdata(resource $xmlwriter):bool
XMLWriter::startComment(void):bool
xmlwriter_start_comment(resource $xmlwriter):bool
XMLWriter::startDocument([string $version = 1.0 [, string $encoding = NULL [, string $standalone]]]):bool
xmlwriter_start_document(resource $xmlwriter [, string $version = 1.0 [, string $encoding = NULL [, string $standalone]]]):bool
XMLWriter::startDtdAttlist(string $name):bool
xmlwriter_start_dtd_attlist(resource $xmlwriter, string $name):bool
XMLWriter::startDtdElement(string $qualifiedName):bool
xmlwriter_start_dtd_element(resource $xmlwriter, string $qualifiedName):bool
XMLWriter::startDtdEntity(string $name, bool $isparam):bool
xmlwriter_start_dtd_entity(resource $xmlwriter, string $name, bool $isparam):bool
XMLWriter::startDtd(string $qualifiedName [, string $publicId [, string $systemId]]):bool
xmlwriter_start_dtd(resource $xmlwriter, string $qualifiedName [, string $publicId [, string $systemId]]):bool
XMLWriter::startElementNs(string $prefix, string $name, string $uri):bool
xmlwriter_start_element_ns(resource $xmlwriter, string $prefix, string $name, string $uri):bool
XMLWriter::startElement(string $name):bool
xmlwriter_start_element(resource $xmlwriter, string $name):bool
XMLWriter::startPi(string $target):bool
xmlwriter_start_pi(resource $xmlwriter, string $target):bool
XMLWriter::text(string $content):bool
xmlwriter_text(resource $xmlwriter, string $content):bool
XMLWriter::writeAttributeNs(string $prefix, string $name, string $uri, string $content):bool
xmlwriter_write_attribute_ns(resource $xmlwriter, string $prefix, string $name, string $uri, string $content):bool
XMLWriter::writeAttribute(string $name, string $value):bool
xmlwriter_write_attribute(resource $xmlwriter, string $name, string $value):bool
XMLWriter::writeCdata(string $content):bool
xmlwriter_write_cdata(resource $xmlwriter, string $content):bool
XMLWriter::writeComment(string $content):bool
xmlwriter_write_comment(resource $xmlwriter, string $content):bool
XMLWriter::writeDtdAttlist(string $name, string $content):bool
xmlwriter_write_dtd_attlist(resource $xmlwriter, string $name, string $content):bool
XMLWriter::writeDtdElement(string $name, string $content):bool
xmlwriter_write_dtd_element(resource $xmlwriter, string $name, string $content):bool
XMLWriter::writeDtdEntity(string $name, string $content, bool $pe, string $pubid, string $sysid, string $ndataid):bool
xmlwriter_write_dtd_entity(resource $xmlwriter, string $name, string $content, bool $pe, string $pubid, string $sysid, string $ndataid):bool
XMLWriter::writeDtd(string $name [, string $publicId [, string $systemId [, string $subset]]]):bool
xmlwriter_write_dtd(resource $xmlwriter, string $name [, string $publicId [, string $systemId [, string $subset]]]):bool
XMLWriter::writeElementNs(string $prefix, string $name, string $uri [, string $content]):bool
xmlwriter_write_element_ns(resource $xmlwriter, string $prefix, string $name, string $uri [, string $content]):bool
XMLWriter::writeElement(string $name [, string $content]):bool
xmlwriter_write_element(resource $xmlwriter, string $name [, string $content]):bool
XMLWriter::writePi(string $target, string $content):bool
xmlwriter_write_pi(resource $xmlwriter, string $target, string $content):bool
XMLWriter::writeRaw(string $content):bool
xmlwriter_write_raw(resource $xmlwriter, string $content):bool
yaml_emit_file(string $filename, mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL]]]):bool
yaml_emit(mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL]]]):string
yaml_parse_file(string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL]]]):mixed
yaml_parse_url(string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL]]]):mixed
yaml_parse(string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL]]]):mixed
yaz_addinfo(resource $id):string
yaz_ccl_conf(resource $id, array $config):void
yaz_ccl_parse(resource $id, string $query, array &$result):bool
yaz_close(resource $id):bool
yaz_connect(string $zurl [, mixed $options]):mixed
yaz_database(resource $id, string $databases):bool
yaz_element(resource $id, string $elementset):bool
yaz_errno(resource $id):int
yaz_error(resource $id):string
yaz_es_result(resource $id):array
yaz_es(resource $id, string $type, array $args):void
yaz_get_option(resource $id, string $name):string
yaz_hits(resource $id [, array &$searchresult]):int
yaz_itemorder(resource $id, array $args):void
yaz_present(resource $id):bool
yaz_range(resource $id, int $start, int $number):void
yaz_record(resource $id, int $pos, string $type):string
yaz_scan_result(resource $id [, array &$result]):array
yaz_scan(resource $id, string $type, string $startterm [, array $flags]):void
yaz_schema(resource $id, string $schema):void
yaz_search(resource $id, string $type, string $query):bool
yaz_set_option(resource $id, string $name, string $value):void
yaz_sort(resource $id, string $criteria):void
yaz_syntax(resource $id, string $syntax):void
yaz_wait([array &$options]):mixed
yp_all(string $domain, string $map, string $callback):void
yp_cat(string $domain, string $map):array
yp_err_string(int $errorcode):string
yp_errno(void):int
yp_first(string $domain, string $map):array
yp_get_default_domain(void):string
yp_master(string $domain, string $map):string
yp_match(string $domain, string $map, string $key):string
yp_next(string $domain, string $map, string $key):array
yp_order(string $domain, string $map):int
zend_logo_guid(void):string
zend_thread_id(void):int
zend_version(void):string
zip_close(resource $zip):void
zip_entry_close(resource $zip_entry):bool
zip_entry_compressedsize(resource $zip_entry):int
zip_entry_compressionmethod(resource $zip_entry):string
zip_entry_filesize(resource $zip_entry):int
zip_entry_name(resource $zip_entry):string
zip_entry_open(resource $zip, resource $zip_entry [, string $mode]):bool
zip_entry_read(resource $zip_entry [, int $length = 1024]):string
zip_open(string $filename):resource
zip_read(resource $zip):resource
zlib_decode(string $data [, string $max_decoded_len]):string
zlib_encode(string $data, int $encoding [, int $level = -1]):string
zlib_get_coding_type(void):string
GearmanClient::addOptions(int $options):public bool
GearmanClient::addServer([string $host = 127.0.0.1 [, int $port = 4730]]):public bool
GearmanClient::addServers([string $servers = 127.0.0.1:4730]):public bool
GearmanClient::addTask(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
GearmanClient::addTaskBackground(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
GearmanClient::addTaskHigh(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
GearmanClient::addTaskHighBackground(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
GearmanClient::addTaskLow(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
GearmanClient::addTaskLowBackground(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
GearmanClient::addTaskStatus(string $job_handle [, string &$context]):public GearmanTask
GearmanClient::clearCallbacks(void):public bool
GearmanClient::clone(void):public GearmanClient
GearmanClient::__construct(void):public
GearmanClient::context(void):public string
GearmanClient::data(void):public string
GearmanClient::do(string $function_name, string $workload [, string $unique]):public string
GearmanClient::doBackground(string $function_name, string $workload [, string $unique]):public string
GearmanClient::doHigh(string $function_name, string $workload [, string $unique]):public string
GearmanClient::doHighBackground(string $function_name, string $workload [, string $unique]):public string
GearmanClient::doJobHandle(void):public string
GearmanClient::doLow(string $function_name, string $workload [, string $unique]):public string
GearmanClient::doLowBackground(string $function_name, string $workload [, string $unique]):public string
GearmanClient::doNormal(string $function_name, string $workload [, string $unique]):public string
GearmanClient::doStatus(void):public array
GearmanClient::echo(string $workload):public bool
GearmanClient::error(void):public string
GearmanClient::getErrno(void):public int
GearmanClient::jobStatus(string $job_handle):public array
gearman_job_status(string $job_handle):array
GearmanClient::ping(string $workload):public bool
GearmanClient::removeOptions(int $options):public bool
GearmanClient::returnCode(void):public int
GearmanClient::runTasks(void):public bool
GearmanClient::setClientCallback(callable $callback):public void
GearmanClient::setCompleteCallback(callable $callback):public bool
GearmanClient::setContext(string $context):public bool
GearmanClient::setCreatedCallback(string $callback):public bool
GearmanClient::setData(string $data):public bool
GearmanClient::setDataCallback(callable $callback):public bool
GearmanClient::setExceptionCallback(callable $callback):public bool
GearmanClient::setFailCallback(callable $callback):public bool
GearmanClient::setOptions(int $options):public bool
GearmanClient::setStatusCallback(callable $callback):public bool
GearmanClient::setTimeout(int $timeout):public bool
GearmanClient::setWarningCallback(callable $callback):public bool
GearmanClient::setWorkloadCallback(callable $callback):public bool
GearmanClient::timeout(void):public int
GearmanJob::complete(string $result):public bool
GearmanJob::__construct(void):public
GearmanJob::data(string $data):public bool
GearmanJob::exception(string $exception):public bool
GearmanJob::fail(void):public bool
GearmanJob::functionName(void):public string
GearmanJob::handle(void):public string
GearmanJob::returnCode(void):public int
GearmanJob::sendComplete(string $result):public bool
GearmanJob::sendData(string $data):public bool
GearmanJob::sendException(string $exception):public bool
GearmanJob::sendFail(void):public bool
GearmanJob::sendStatus(int $numerator, int $denominator):public bool
GearmanJob::sendWarning(string $warning):public bool
GearmanJob::setReturn(int $gearman_return_t):public bool
GearmanJob::status(int $numerator, int $denominator):public bool
GearmanJob::unique(void):public string
GearmanJob::warning(string $warning):public bool
GearmanJob::workload(void):public string
GearmanJob::workloadSize(void):public int
GearmanTask::__construct(void):public
GearmanTask::create(void):public GearmanTask
GearmanTask::data(void):public string
GearmanTask::dataSize(void):public int
GearmanTask::function(void):public string
GearmanTask::functionName(void):public string
GearmanTask::isKnown(void):public bool
GearmanTask::isRunning(void):public bool
GearmanTask::jobHandle(void):public string
gearman_job_handle(void):string
GearmanTask::recvData(int $data_len):public array
GearmanTask::returnCode(void):public int
GearmanTask::sendData(string $data):public int
GearmanTask::sendWorkload(string $data):public int
GearmanTask::taskDenominator(void):public int
GearmanTask::taskNumerator(void):public int
GearmanTask::unique(void):public string
GearmanTask::uuid(void):public string
GearmanWorker::addFunction(string $function_name, callable $function [, mixed &$context [, int $timeout]]):public bool
GearmanWorker::addOptions(int $option):public bool
GearmanWorker::addServer([string $host = 127.0.0.1 [, int $port = 4730]]):public bool
GearmanWorker::addServers(string $servers = 127.0.0.1:4730):public bool
GearmanWorker::clone(void):public void
GearmanWorker::__construct(void):public
GearmanWorker::echo(string $workload):public bool
GearmanWorker::error(void):public string
GearmanWorker::getErrno(void):public int
GearmanWorker::options(void):public int
GearmanWorker::register(string $function_name [, int $timeout]):public bool
GearmanWorker::removeOptions(int $option):public bool
GearmanWorker::returnCode(void):public int
GearmanWorker::setId(string $id):public bool
GearmanWorker::setOptions(int $option):public bool
GearmanWorker::setTimeout(int $timeout):public bool
GearmanWorker::timeout(void):public int
GearmanWorker::unregister(string $function_name):public bool
GearmanWorker::unregisterAll(void):public bool
GearmanWorker::wait(void):public bool
GearmanWorker::work(void):public bool
Gender\Gender::connect(string $dsn):public bool
Gender\Gender::__construct([string $dsn]):public
Gender\Gender::country(int $country):public array
Gender\Gender::get(string $name [, int $country]):public int
Gender\Gender::isNick(string $name0, string $name1 [, int $country]):public array
Gender\Gender::similarNames(string $name [, int $country]):public array
Generator::current(void):public mixed
Generator::getReturn(void):public mixed
Generator::key(void):public mixed
Generator::next(void):public void
Generator::rewind(void):public void
Generator::send(mixed $value):public mixed
Generator::throw(Throwable $exception):public mixed
Generator::valid(void):public bool
Generator::__wakeup(void):public void
GlobIterator::__construct(string $pattern [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO]):public
GlobIterator::count(void):public int
Gmagick::addimage(Gmagick $source):public Gmagick
Gmagick::addnoiseimage(int $noise_type):public Gmagick
Gmagick::annotateimage(GmagickDraw $GmagickDraw, float $x, float $y, float $angle, string $text):public Gmagick
Gmagick::blurimage(float $radius, float $sigma [, int $channel]):public Gmagick
Gmagick::borderimage(GmagickPixel $color, int $width, int $height):public Gmagick
Gmagick::charcoalimage(float $radius, float $sigma):public Gmagick
Gmagick::chopimage(int $width, int $height, int $x, int $y):public Gmagick
Gmagick::clear(void):public Gmagick
Gmagick::commentimage(string $comment):public Gmagick
Gmagick::compositeimage(Gmagick $source, int $COMPOSE, int $x, int $y):public Gmagick
Gmagick::__construct([string $filename]):public
Gmagick::cropimage(int $width, int $height, int $x, int $y):public Gmagick
Gmagick::cropthumbnailimage(int $width, int $height):public Gmagick
Gmagick::current(void):public Gmagick
Gmagick::cyclecolormapimage(int $displace):public Gmagick
Gmagick::deconstructimages(void):public Gmagick
Gmagick::despeckleimage(void):public Gmagick
Gmagick::destroy(void):public bool
Gmagick::drawimage(GmagickDraw $GmagickDraw):public Gmagick
Gmagick::edgeimage(float $radius):public Gmagick
Gmagick::embossimage(float $radius, float $sigma):public Gmagick
Gmagick::enhanceimage(void):public Gmagick
Gmagick::equalizeimage(void):public Gmagick
Gmagick::flipimage(void):public Gmagick
Gmagick::flopimage(void):public Gmagick
Gmagick::frameimage(GmagickPixel $color, int $width, int $height, int $inner_bevel, int $outer_bevel):public Gmagick
Gmagick::gammaimage(float $gamma):public Gmagick
Gmagick::getcopyright(void):public string
Gmagick::getfilename(void):public string
Gmagick::getimagebackgroundcolor(void):public GmagickPixel
Gmagick::getimageblueprimary(void):public array
Gmagick::getimagebordercolor(void):public GmagickPixel
Gmagick::getimagechanneldepth(int $channel_type):public int
Gmagick::getimagecolors(void):public int
Gmagick::getimagecolorspace(void):public int
Gmagick::getimagecompose(void):public int
Gmagick::getimagedelay(void):public int
Gmagick::getimagedepth(void):public int
Gmagick::getimagedispose(void):public int
Gmagick::getimageextrema(void):public array
Gmagick::getimagefilename(void):public string
Gmagick::getimageformat(void):public string
Gmagick::getimagegamma(void):public float
Gmagick::getimagegreenprimary(void):public array
Gmagick::getimageheight(void):public int
Gmagick::getimagehistogram(void):public array
Gmagick::getimageindex(void):public int
Gmagick::getimageinterlacescheme(void):public int
Gmagick::getimageiterations(void):public int
Gmagick::getimagematte(void):public int
Gmagick::getimagemattecolor(void):public GmagickPixel
Gmagick::getimageprofile(string $name):public string
Gmagick::getimageredprimary(void):public array
Gmagick::getimagerenderingintent(void):public int
Gmagick::getimageresolution(void):public array
Gmagick::getimagescene(void):public int
Gmagick::getimagesignature(void):public string
Gmagick::getimagetype(void):public int
Gmagick::getimageunits(void):public int
Gmagick::getimagewhitepoint(void):public array
Gmagick::getimagewidth(void):public int
Gmagick::getpackagename(void):public string
Gmagick::getquantumdepth(void):public array
Gmagick::getreleasedate(void):public string
Gmagick::getsamplingfactors(void):public array
Gmagick::getsize(void):public array
Gmagick::getversion(void):public array
Gmagick::hasnextimage(void):public mixed
Gmagick::haspreviousimage(void):public mixed
Gmagick::implodeimage(float $radius):public mixed
Gmagick::labelimage(string $label):public mixed
Gmagick::levelimage(float $blackPoint, float $gamma, float $whitePoint [, int $channel = Gmagick::CHANNEL_DEFAULT]):public mixed
Gmagick::magnifyimage(void):public mixed
Gmagick::mapimage(gmagick $gmagick, bool $dither):public Gmagick
Gmagick::medianfilterimage(float $radius):public void
Gmagick::minifyimage(void):public Gmagick
Gmagick::modulateimage(float $brightness, float $saturation, float $hue):public Gmagick
Gmagick::motionblurimage(float $radius, float $sigma, float $angle):public Gmagick
Gmagick::newimage(int $width, int $height, string $background [, string $format]):public Gmagick
Gmagick::nextimage(void):public bool
Gmagick::normalizeimage([int $channel]):public Gmagick
Gmagick::oilpaintimage(float $radius):public Gmagick
Gmagick::previousimage(void):public bool
Gmagick::profileimage(string $name, string $profile):public Gmagick
Gmagick::quantizeimage(int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError):public Gmagick
Gmagick::quantizeimages(int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError):public Gmagick
Gmagick::queryfontmetrics(GmagickDraw $draw, string $text):public array
Gmagick::queryfonts([string $pattern = "*"]):public array
Gmagick::queryformats([string $pattern = "*"]):public array
Gmagick::radialblurimage(float $angle [, int $channel = Gmagick::CHANNEL_DEFAULT]):public Gmagick
Gmagick::raiseimage(int $width, int $height, int $x, int $y, bool $raise):public Gmagick
Gmagick::read(string $filename):public Gmagick
Gmagick::readimage(string $filename):public Gmagick
Gmagick::readimageblob(string $imageContents [, string $filename]):public Gmagick
Gmagick::readimagefile(resource $fp [, string $filename]):public Gmagick
Gmagick::reducenoiseimage(float $radius):public Gmagick
Gmagick::removeimage(void):public Gmagick
Gmagick::removeimageprofile(string $name):public string
Gmagick::resampleimage(float $xResolution, float $yResolution, int $filter, float $blur):public Gmagick
Gmagick::resizeimage(int $width, int $height, int $filter, float $blur [, bool $fit = FALSE]):public Gmagick
Gmagick::rollimage(int $x, int $y):public Gmagick
Gmagick::rotateimage(mixed $color, float $degrees):public Gmagick
Gmagick::scaleimage(int $width, int $height [, bool $fit = FALSE]):public Gmagick
Gmagick::separateimagechannel(int $channel):public Gmagick
Gmagick::setCompressionQuality(int $quality = 75):Gmagick
Gmagick::setfilename(string $filename):public Gmagick
Gmagick::setimagebackgroundcolor(GmagickPixel $color):public Gmagick
Gmagick::setimageblueprimary(float $x, float $y):public Gmagick
Gmagick::setimagebordercolor(GmagickPixel $color):public Gmagick
Gmagick::setimagechanneldepth(int $channel, int $depth):public Gmagick
Gmagick::setimagecolorspace(int $colorspace):public Gmagick
Gmagick::setimagecompose(int $composite):public Gmagick
Gmagick::setimagedelay(int $delay):public Gmagick
Gmagick::setimagedepth(int $depth):public Gmagick
Gmagick::setimagedispose(int $disposeType):public Gmagick
Gmagick::setimagefilename(string $filename):public Gmagick
Gmagick::setimageformat(string $imageFormat):public Gmagick
Gmagick::setimagegamma(float $gamma):public Gmagick
Gmagick::setimagegreenprimary(float $x, float $y):public Gmagick
Gmagick::setimageindex(int $index):public Gmagick
Gmagick::setimageinterlacescheme(int $interlace):public Gmagick
Gmagick::setimageiterations(int $iterations):public Gmagick
Gmagick::setimageprofile(string $name, string $profile):public Gmagick
Gmagick::setimageredprimary(float $x, float $y):public Gmagick
Gmagick::setimagerenderingintent(int $rendering_intent):public Gmagick
Gmagick::setimageresolution(float $xResolution, float $yResolution):public Gmagick
Gmagick::setimagescene(int $scene):public Gmagick
Gmagick::setimagetype(int $imgType):public Gmagick
Gmagick::setimageunits(int $resolution):public Gmagick
Gmagick::setimagewhitepoint(float $x, float $y):public Gmagick
Gmagick::setsamplingfactors(array $factors):public Gmagick
Gmagick::setsize(int $columns, int $rows):public Gmagick
Gmagick::shearimage(mixed $color, float $xShear, float $yShear):public Gmagick
Gmagick::solarizeimage(int $threshold):public Gmagick
Gmagick::spreadimage(float $radius):public Gmagick
Gmagick::stripimage(void):public Gmagick
Gmagick::swirlimage(float $degrees):public Gmagick
Gmagick::thumbnailimage(int $width, int $height [, bool $fit = FALSE]):public Gmagick
Gmagick::trimimage(float $fuzz):public Gmagick
Gmagick::writeimage().:This method is an alias of
Gmagick::writeimage(string $filename [, bool $all_frames = FALSE]):public Gmagick
GmagickDraw::annotate(float $x, float $y, string $text):public GmagickDraw
GmagickDraw::arc(float $sx, float $sy, float $ex, float $ey, float $sd, float $ed):public GmagickDraw
GmagickDraw::bezier(array $coordinate_array):public GmagickDraw
GmagickDraw::ellipse(float $ox, float $oy, float $rx, float $ry, float $start, float $end):public GmagickDraw
GmagickDraw::getfillcolor(void):public GmagickPixel
GmagickDraw::getfillopacity(void):public float
GmagickDraw::getfont(void):public mixed
GmagickDraw::getfontsize(void):public float
GmagickDraw::getfontstyle(void):public int
GmagickDraw::getfontweight(void):public int
GmagickDraw::getstrokecolor(void):public GmagickPixel
GmagickDraw::getstrokeopacity(void):public float
GmagickDraw::getstrokewidth(void):public float
GmagickDraw::gettextdecoration(void):public int
GmagickDraw::gettextencoding(void):public mixed
GmagickDraw::line(float $sx, float $sy, float $ex, float $ey):public GmagickDraw
GmagickDraw::point(float $x, float $y):public GmagickDraw
GmagickDraw::polygon(array $coordinates):public GmagickDraw
GmagickDraw::polyline(array $coordinate_array):public GmagickDraw
GmagickDraw::rectangle(float $x1, float $y1, float $x2, float $y2):public GmagickDraw
GmagickDraw::rotate(float $degrees):public GmagickDraw
GmagickDraw::roundrectangle(float $x1, float $y1, float $x2, float $y2, float $rx, float $ry):public GmagickDraw
GmagickDraw::scale(float $x, float $y):public GmagickDraw
GmagickDraw::setfillcolor(mixed $color):public GmagickDraw
GmagickDraw::setfillopacity(float $fill_opacity):public GmagickDraw
GmagickDraw::setfont(string $font):public GmagickDraw
GmagickDraw::setfontsize(float $pointsize):public GmagickDraw
GmagickDraw::setfontstyle(int $style):public GmagickDraw
GmagickDraw::setfontweight(int $weight):public GmagickDraw
GmagickDraw::setstrokecolor(mixed $color):public GmagickDraw
GmagickDraw::setstrokeopacity(float $stroke_opacity):public GmagickDraw
GmagickDraw::setstrokewidth(float $width):public GmagickDraw
GmagickDraw::settextdecoration(int $decoration):public GmagickDraw
GmagickDraw::settextencoding(string $encoding):public GmagickDraw
GmagickPixel::__construct([string $color]):public
GmagickPixel::getcolor([bool $as_array = FALSE [, bool $normalize_array = FALSE]]):public mixed
GmagickPixel::getcolorcount(void):public int
GmagickPixel::getcolorvalue(int $color):public float
GmagickPixel::setcolor(string $color):public GmagickPixel
GmagickPixel::setcolorvalue(int $color, float $value):public GmagickPixel
gupnp_service_proxy_send_action(resource $proxy, string $action, array $in_params, array $out_params):array
HaruAnnotation::setBorderStyle(float $width, int $dash_on, int $dash_off):bool
HaruAnnotation::setHighlightMode(int $mode):bool
HaruAnnotation::setIcon(int $icon):bool
HaruAnnotation::setOpened(bool $opened):bool
HaruDestination::setFit(void):bool
HaruDestination::setFitB(void):bool
HaruDestination::setFitBH(float $top):bool
HaruDestination::setFitBV(float $left):bool
HaruDestination::setFitH(float $top):bool
HaruDestination::setFitR(float $left, float $bottom, float $right, float $top):bool
HaruDestination::setFitV(float $left):bool
HaruDestination::setXYZ(float $left, float $top, float $zoom):bool
HaruDoc::addPage(void):object
HaruDoc::addPageLabel(int $first_page, int $style, int $first_num [, string $prefix = ""]):bool
HaruDoc::__construct(void)
HaruDoc::createOutline(string $title [, object $parent_outline [, object $encoder]]):object
HaruDoc::getCurrentEncoder(void):object
HaruDoc::getCurrentPage(void):object
HaruDoc::getEncoder(string $encoding):object
HaruDoc::getFont(string $fontname [, string $encoding]):object
HaruDoc::getInfoAttr(int $type):string
HaruDoc::getPageLayout(void):int
HaruDoc::getPageMode(void):int
HaruDoc::getStreamSize(void):int
HaruDoc::insertPage(object $page):object
HaruDoc::loadJPEG(string $filename):object
HaruDoc::loadPNG(string $filename [, bool $deferred = FALSE]):object
HaruDoc::loadRaw(string $filename, int $width, int $height, int $color_space):object
HaruDoc::loadTTC(string $fontfile, int $index [, bool $embed = FALSE]):string
HaruDoc::loadTTF(string $fontfile [, bool $embed = FALSE]):string
HaruDoc::loadType1(string $afmfile [, string $pfmfile]):string
HaruDoc::output(void):bool
HaruDoc::readFromStream(int $bytes):string
HaruDoc::resetError(void):bool
HaruDoc::resetStream(void):bool
HaruDoc::save(string $file):bool
HaruDoc::saveToStream(void):bool
HaruDoc::setCompressionMode(int $mode):bool
HaruDoc::setCurrentEncoder(string $encoding):bool
HaruDoc::setEncryptionMode(int $mode [, int $key_len = 5]):bool
HaruDoc::setInfoAttr(int $type, string $info):bool
HaruDoc::setInfoDateAttr(int $type, int $year, int $month, int $day, int $hour, int $min, int $sec, string $ind, int $off_hour, int $off_min):bool
HaruDoc::setOpenAction(object $destination):bool
HaruDoc::setPageLayout(int $layout):bool
HaruDoc::setPageMode(int $mode):bool
HaruDoc::setPagesConfiguration(int $page_per_pages):bool
HaruDoc::setPassword(string $owner_password, string $user_password):bool
HaruDoc::setPermission(int $permission):bool
HaruDoc::useCNSEncodings(void):bool
HaruDoc::useCNSFonts(void):bool
HaruDoc::useCNTEncodings(void):bool
HaruDoc::useCNTFonts(void):bool
HaruDoc::useJPEncodings(void):bool
HaruDoc::useJPFonts(void):bool
HaruDoc::useKREncodings(void):bool
HaruDoc::useKRFonts(void):bool
HaruEncoder::getByteType(string $text, int $index):int
HaruEncoder::getType(void):int
HaruEncoder::getUnicode(int $character):int
HaruEncoder::getWritingMode(void):int
HaruFont::getAscent(void):int
HaruFont::getCapHeight(void):int
HaruFont::getDescent(void):int
HaruFont::getEncodingName(void):string
HaruFont::getFontName(void):string
HaruFont::getTextWidth(string $text):array
HaruFont::getUnicodeWidth(int $character):int
HaruFont::getXHeight(void):int
HaruFont::measureText(string $text, float $width, float $font_size, float $char_space, float $word_space [, bool $word_wrap = FALSE]):int
HaruImage::getBitsPerComponent(void):int
HaruImage::getColorSpace(void):string
HaruImage::getHeight(void):int
HaruImage::getSize(void):array
HaruImage::getWidth(void):int
HaruImage::setColorMask(int $rmin, int $rmax, int $gmin, int $gmax, int $bmin, int $bmax):bool
HaruImage::setMaskImage(object $mask_image):bool
HaruOutline::setDestination(object $destination):bool
HaruOutline::setOpened(bool $opened):bool
HaruPage::arc(float $x, float $y, float $ray, float $ang1, float $ang2):bool
HaruPage::beginText(void):bool
HaruPage::circle(float $x, float $y, float $ray):bool
HaruPage::closePath(void):bool
HaruPage::concat(float $a, float $b, float $c, float $d, float $x, float $y):bool
HaruPage::createDestination(void):object
HaruPage::createLinkAnnotation(array $rectangle, object $destination):object
HaruPage::createTextAnnotation(array $rectangle, string $text [, object $encoder]):object
HaruPage::createURLAnnotation(array $rectangle, string $url):object
HaruPage::curveTo(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):bool
HaruPage::curveTo2(float $x2, float $y2, float $x3, float $y3):bool
HaruPage::curveTo3(float $x1, float $y1, float $x3, float $y3):bool
HaruPage::drawImage(object $image, float $x, float $y, float $width, float $height):bool
HaruPage::ellipse(float $x, float $y, float $xray, float $yray):bool
HaruPage::endPath(void):bool
HaruPage::endText(void):bool
HaruPage::eofill(void):bool
HaruPage::eoFillStroke([bool $close_path = FALSE]):bool
HaruPage::fill(void):bool
HaruPage::fillStroke([bool $close_path = FALSE]):bool
HaruPage::getCharSpace(void):float
HaruPage::getCMYKFill(void):array
HaruPage::getCMYKStroke(void):array
HaruPage::getCurrentFont(void):object
HaruPage::getCurrentFontSize(void):float
HaruPage::getCurrentPos(void):array
HaruPage::getCurrentTextPos(void):array
HaruPage::getDash(void):array
HaruPage::getFillingColorSpace(void):int
HaruPage::getFlatness(void):float
HaruPage::getGMode(void):int
HaruPage::getGrayFill(void):float
HaruPage::getGrayStroke(void):float
HaruPage::getHeight(void):float
HaruPage::getHorizontalScaling(void):float
HaruPage::getLineCap(void):int
HaruPage::getLineJoin(void):int
HaruPage::getLineWidth(void):float
HaruPage::getMiterLimit(void):float
HaruPage::getRGBFill(void):array
HaruPage::getRGBStroke(void):array
HaruPage::getStrokingColorSpace(void):int
HaruPage::getTextLeading(void):float
HaruPage::getTextMatrix(void):array
HaruPage::getTextRenderingMode(void):int
HaruPage::getTextRise(void):float
HaruPage::getTextWidth(string $text):float
HaruPage::getTransMatrix(void):array
HaruPage::getWidth(void):float
HaruPage::getWordSpace(void):float
HaruPage::lineTo(float $x, float $y):bool
HaruPage::measureText(string $text, float $width [, bool $wordwrap = FALSE]):int
HaruPage::moveTextPos(float $x, float $y [, bool $set_leading = FALSE]):bool
HaruPage::moveTo(float $x, float $y):bool
HaruPage::moveToNextLine(void):bool
HaruPage::rectangle(float $x, float $y, float $width, float $height):bool
HaruPage::setCharSpace(float $char_space):bool
HaruPage::setCMYKFill(float $c, float $m, float $y, float $k):bool
HaruPage::setCMYKStroke(float $c, float $m, float $y, float $k):bool
HaruPage::setDash(array $pattern, int $phase):bool
HaruPage::setFlatness(float $flatness):bool
HaruPage::setFontAndSize(object $font, float $size):bool
HaruPage::setGrayFill(float $value):bool
HaruPage::setGrayStroke(float $value):bool
HaruPage::setHeight(float $height):bool
HaruPage::setHorizontalScaling(float $scaling):bool
HaruPage::setLineCap(int $cap):bool
HaruPage::setLineJoin(int $join):bool
HaruPage::setLineWidth(float $width):bool
HaruPage::setMiterLimit(float $limit):bool
HaruPage::setRGBFill(float $r, float $g, float $b):bool
HaruPage::setRGBStroke(float $r, float $g, float $b):bool
HaruPage::setRotate(int $angle):bool
HaruPage::setSize(int $size, int $direction):bool
HaruPage::setSlideShow(int $type, float $disp_time, float $trans_time):bool
HaruPage::setTextLeading(float $text_leading):bool
HaruPage::setTextMatrix(float $a, float $b, float $c, float $d, float $x, float $y):bool
HaruPage::setTextRenderingMode(int $mode):bool
HaruPage::setTextRise(float $rise):bool
HaruPage::setWidth(float $width):bool
HaruPage::setWordSpace(float $word_space):bool
HaruPage::showText(string $text):bool
HaruPage::showTextNextLine(string $text [, float $word_space = 0 [, float $char_space = 0]]):bool
HaruPage::stroke([bool $close_path = FALSE]):bool
HaruPage::textOut(float $x, float $y, string $text):bool
HaruPage::textRect(float $left, float $top, float $right, float $bottom, string $text [, int $align = HaruPage::TALIGN_LEFT]):bool
HashContext::__construct(void):private
HRTime\PerformanceCounter::getFrequency(void):public static int
HRTime\PerformanceCounter::getTicks(void):public static int
HRTime\PerformanceCounter::getTicksSince(int $start):public static int
HRTime\StopWatch::getElapsedTicks(void):public int
HRTime\StopWatch::getElapsedTime([int $unit]):public float
HRTime\StopWatch::getLastElapsedTicks(void):public int
HRTime\StopWatch::getLastElapsedTime([int $unit]):public float
HRTime\StopWatch::isRunning(void):public bool
HRTime\StopWatch::start(void):public void
HRTime\StopWatch::stop(void):public void
hw_api_attribute::key(void):string
hw_api_attribute::langdepvalue(string $language):string
hw_api_attribute::value(void):string
hw_api_attribute::values(void):array
hw_api::checkin(array $parameter):bool
hw_api::checkout(array $parameter):bool
hw_api::children(array $parameter):array
hw_api_content::mimetype(void):string
hw_api_content::read(string $buffer, int $len):string
hw_api::content(array $parameter):HW_API_Content
hw_api::copy(array $parameter):hw_api_content
hw_api::dbstat(array $parameter):hw_api_object
hw_api::dcstat(array $parameter):hw_api_object
hw_api::dstanchors(array $parameter):array
hw_api::dstofsrcanchor(array $parameter):hw_api_object
hw_api_error::count(void):int
hw_api_error::reason(void):HW_API_Reason
hw_api::find(array $parameter):array
hw_api::ftstat(array $parameter):hw_api_object
hw_api::hwstat(array $parameter):hw_api_object
hw_api::identify(array $parameter):bool
hw_api::info(array $parameter):array
hw_api::insert(array $parameter):hw_api_object
hw_api::insertanchor(array $parameter):hw_api_object
hw_api::insertcollection(array $parameter):hw_api_object
hw_api::insertdocument(array $parameter):hw_api_object
hw_api::link(array $parameter):bool
hw_api::lock(array $parameter):bool
hw_api::move(array $parameter):bool
hw_api_object::assign(array $parameter):bool
hw_api_object::attreditable(array $parameter):bool
hw_api_object::count(array $parameter):int
hw_api_object::insert(HW_API_Attribute $attribute):bool
hw_api_object::remove(string $name):bool
hw_api_object::title(array $parameter):string
hw_api_object::value(string $name):string
hw_api::object(array $parameter):hw_api_object
hw_api::objectbyanchor(array $parameter):hw_api_object
hw_api::parents(array $parameter):array
hw_api_reason::description(void):string
hw_api_reason::type(void):HW_API_Reason
hw_api::remove(array $parameter):bool
hw_api::replace(array $parameter):hw_api_object
hw_api::setcommittedversion(array $parameter):hw_api_object
hw_api::srcanchors(array $parameter):array
hw_api::srcsofdst(array $parameter):array
hw_api::unlock(array $parameter):bool
hw_api::user(array $parameter):hw_api_object
hw_api::userlist(array $parameter):array
KTaglib_ID3v2_AttachedPictureFrame::getDescription(void):public string
KTaglib_ID3v2_AttachedPictureFrame::getMimeType(void):public string
KTaglib_ID3v2_AttachedPictureFrame::getType(void):public int
KTaglib_ID3v2_AttachedPictureFrame::savePicture(string $filename):public bool
KTaglib_ID3v2_AttachedPictureFrame::setMimeType(string $type):string
KTaglib_ID3v2_AttachedPictureFrame::setPicture(string $filename):public void
KTaglib_ID3v2_AttachedPictureFrame::setType(int $type):public void
KTaglib_ID3v2_Frame::getSize(void):public int
KTaglib_ID3v2_Frame::__toString(void):public string
KTaglib_ID3v2_Tag::addFrame(KTaglib_ID3v2_Frame $frame):public bool
KTaglib_ID3v2_Tag::getFrameList(void):public array
Imagick::adaptiveBlurImage(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::adaptiveResizeImage(int $columns, int $rows [, bool $bestfit = FALSE [, bool $legacy = FALSE]]):bool
Imagick::adaptiveSharpenImage(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::adaptiveThresholdImage(int $width, int $height, int $offset):bool
Imagick::addImage(Imagick $source):bool
Imagick::addNoiseImage(int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::affineTransformImage(ImagickDraw $matrix):bool
Imagick::animateImages(string $x_server):bool
Imagick::annotateImage(ImagickDraw $draw_settings, float $x, float $y, float $angle, string $text):bool
Imagick::appendImages(bool $stack = FALSE):Imagick
Imagick::autoLevelImage([int $channel = Imagick::CHANNEL_DEFAULT]):public bool
Imagick::averageImages(void):Imagick
Imagick::blackThresholdImage(mixed $threshold):bool
Imagick::blueShiftImage([float $factor = 1.5]):public bool
Imagick::blurImage(float $radius, float $sigma [, int $channel]):bool
Imagick::borderImage(mixed $bordercolor, int $width, int $height):bool
Imagick::brightnessContrastImage(float $brightness, float $contrast [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
Imagick::charcoalImage(float $radius, float $sigma):bool
Imagick::chopImage(int $width, int $height, int $x, int $y):bool
Imagick::clampImage([int $channel = Imagick::CHANNEL_DEFAULT]):public bool
Imagick::clear(void):bool
Imagick::clipImage(void):bool
Imagick::clipImagePath(string $pathname, string $inside):public void
Imagick::clipPathImage(string $pathname, bool $inside):bool
Imagick::clone(void):Imagick
Imagick::clutImage(Imagick $lookup_table [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::coalesceImages(void):Imagick
Imagick::colorFloodfillImage(mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y):bool
Imagick::colorizeImage(mixed $colorize, mixed $opacity [, bool $legacy = FALSE]):bool
Imagick::colorMatrixImage(array $color_matrix = Imagick::CHANNEL_DEFAULT):public bool
Imagick::combineImages(int $channelType):Imagick
Imagick::commentImage(string $comment):bool
Imagick::compareImageChannels(Imagick $image, int $channelType, int $metricType):array
Imagick::compareImageLayers(int $method):Imagick
Imagick::compareImages(Imagick $compare, int $metric):array
Imagick::compositeImage(Imagick $composite_object, int $composite, int $x, int $y [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::__construct([mixed $files])
Imagick::contrastImage(bool $sharpen):bool
Imagick::contrastStretchImage(float $black_point, float $white_point [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::convolveImage(array $kernel [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::count([int $mode = 0]):public int
Imagick::cropImage(int $width, int $height, int $x, int $y):bool
Imagick::cropThumbnailImage(int $width, int $height [, bool $legacy = FALSE]):bool
Imagick::current(void):Imagick
Imagick::cycleColormapImage(int $displace):bool
Imagick::decipherImage(string $passphrase):bool
Imagick::deconstructImages(void):Imagick
Imagick::deleteImageArtifact(string $artifact):bool
Imagick::deleteImageProperty(string $name):public bool
Imagick::deskewImage(float $threshold):public bool
Imagick::despeckleImage(void):bool
Imagick::destroy(void):bool
Imagick::displayImage(string $servername):bool
Imagick::displayImages(string $servername):bool
Imagick::distortImage(int $method, array $arguments, bool $bestfit):bool
Imagick::drawImage(ImagickDraw $draw):bool
Imagick::edgeImage(float $radius):bool
Imagick::embossImage(float $radius, float $sigma):bool
Imagick::encipherImage(string $passphrase):bool
Imagick::enhanceImage(void):bool
Imagick::equalizeImage(void):bool
Imagick::evaluateImage(int $op, float $constant [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::exportImagePixels(int $x, int $y, int $width, int $height, string $map, int $STORAGE):public array
Imagick::extentImage(int $width, int $height, int $x, int $y):bool
Imagick::filter(ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_UNDEFINED]):public bool
Imagick::flattenImages(void):Imagick
Imagick::flipImage(void):bool
Imagick::floodFillPaintImage(mixed $fill, float $fuzz, mixed $target, int $x, int $y, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::flopImage(void):bool
Imagick::forwardFourierTransformImage(bool $magnitude):bool
Imagick::frameImage(mixed $matte_color, int $width, int $height, int $inner_bevel, int $outer_bevel):bool
Imagick::functionImage(int $function, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
Imagick::fxImage(string $expression [, int $channel = Imagick::CHANNEL_DEFAULT]):Imagick
Imagick::gammaImage(float $gamma [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::gaussianBlurImage(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::getColorspace(void):int
Imagick::getCompression(void):int
Imagick::getCompressionQuality(void):int
Imagick::getCopyright(void):string
Imagick::getFilename(void):string
Imagick::getFont(void):string
Imagick::getFormat(void):string
Imagick::getGravity(void):int
Imagick::getHomeURL(void):string
Imagick::getImage(void):Imagick
Imagick::getImageAlphaChannel(void):int
Imagick::getImageArtifact(string $artifact):string
Imagick::getImageAttribute(string $key):public string
Imagick::getImageBackgroundColor(void):ImagickPixel
Imagick::getImageBlob(void):string
Imagick::getImageBluePrimary(void):array
Imagick::getImageBorderColor(void):ImagickPixel
Imagick::getImageChannelDepth(int $channel):int
Imagick::getImageChannelDistortion(Imagick $reference, int $channel, int $metric):float
Imagick::getImageChannelDistortions(Imagick $reference, int $metric [, int $channel = Imagick::CHANNEL_DEFAULT]):float
Imagick::getImageChannelExtrema(int $channel):array
Imagick::getImageChannelKurtosis([int $channel = Imagick::CHANNEL_DEFAULT]):public array
Imagick::getImageChannelMean(int $channel):array
Imagick::getImageChannelRange(int $channel):array
Imagick::getImageChannelStatistics(void):array
Imagick::getImageClipMask(void):Imagick
Imagick::getImageColormapColor(int $index):ImagickPixel
Imagick::getImageColors(void):int
Imagick::getImageColorspace(void):int
Imagick::getImageCompose(void):int
Imagick::getImageCompression(void):int
Imagick::getImageCompressionQuality(void):int
Imagick::getImageDelay(void):int
Imagick::getImageDepth(void):int
Imagick::getImageDispose(void):int
Imagick::getImageDistortion(MagickWand $reference, int $metric):float
Imagick::getImageExtrema(void):array
Imagick::getImageFilename(void):string
Imagick::getImageFormat(void):string
Imagick::getImageGamma(void):float
Imagick::getImageGeometry(void):array
Imagick::getImageGravity(void):int
Imagick::getImageGreenPrimary(void):array
Imagick::getImageHeight(void):int
Imagick::getImageHistogram(void):array
Imagick::getImageIndex(void):int
Imagick::getImageInterlaceScheme(void):int
Imagick::getImageInterpolateMethod(void):int
Imagick::getImageIterations(void):int
Imagick::getImageLength(void):int
Imagick::getImageMagickLicense(void):string
Imagick::getImageMatte(void):bool
Imagick::getImageMatteColor(void):ImagickPixel
Imagick::getImageMimeType(void):public string
Imagick::getImageOrientation(void):int
Imagick::getImagePage(void):array
Imagick::getImagePixelColor(int $x, int $y):ImagickPixel
Imagick::getImageProfile(string $name):string
Imagick::getImageProfiles([string $pattern = "*" [, bool $include_values = TRUE]]):array
Imagick::getImageProperties([string $pattern = "*" [, bool $include_values = TRUE]]):array
Imagick::getImageProperty(string $name):string
Imagick::getImageRedPrimary(void):array
Imagick::getImageRegion(int $width, int $height, int $x, int $y):Imagick
Imagick::getImageRenderingIntent(void):int
Imagick::getImageResolution(void):array
Imagick::getImagesBlob(void):string
Imagick::getImageScene(void):int
Imagick::getImageSignature(void):string
Imagick::getImageSize(void):int
Imagick::getImageTicksPerSecond(void):int
Imagick::getImageTotalInkDensity(void):float
Imagick::getImageType(void):int
Imagick::getImageUnits(void):int
Imagick::getImageVirtualPixelMethod(void):int
Imagick::getImageWhitePoint(void):array
Imagick::getImageWidth(void):int
Imagick::getInterlaceScheme(void):int
Imagick::getIteratorIndex(void):int
Imagick::getNumberImages(void):int
Imagick::getOption(string $key):string
Imagick::getPackageName(void):string
Imagick::getPage(void):array
Imagick::getPixelIterator(void):ImagickPixelIterator
Imagick::getPixelRegionIterator(int $x, int $y, int $columns, int $rows):ImagickPixelIterator
Imagick::getPointSize(void):float
Imagick::getQuantum(void):public static int
Imagick::getQuantumDepth(void):array
Imagick::getQuantumRange(void):array
Imagick::getRegistry(string $key):public static string
Imagick::getReleaseDate(void):string
Imagick::getResource(int $type):int
Imagick::getResourceLimit(int $type):int
Imagick::getSamplingFactors(void):array
Imagick::getSize(void):array
Imagick::getSizeOffset(void):int
Imagick::getVersion(void):array
Imagick::haldClutImage(Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
Imagick::hasNextImage(void):bool
Imagick::hasPreviousImage(void):bool
Imagick::identifyFormat(string $embedText):public string
Imagick::identifyImage([bool $appendRawOutput = FALSE]):array
Imagick::implodeImage(float $radius):bool
Imagick::importImagePixels(int $x, int $y, int $width, int $height, string $map, int $storage, array $pixels):public bool
Imagick::inverseFourierTransformImage(Imagick $complement, bool $magnitude):public bool
Imagick::labelImage(string $label):bool
Imagick::levelImage(float $blackPoint, float $gamma, float $whitePoint [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::linearStretchImage(float $blackPoint, float $whitePoint):bool
Imagick::liquidRescaleImage(int $width, int $height, float $delta_x, float $rigidity):bool
Imagick::listRegistry(void):public static array
Imagick::magnifyImage(void):bool
Imagick::mapImage(Imagick $map, bool $dither):bool
Imagick::matteFloodfillImage(float $alpha, float $fuzz, mixed $bordercolor, int $x, int $y):bool
Imagick::medianFilterImage(float $radius):bool
Imagick::mergeImageLayers(int $layer_method):Imagick
Imagick::minifyImage(void):bool
Imagick::modulateImage(float $brightness, float $saturation, float $hue):bool
Imagick::montageImage(ImagickDraw $draw, string $tile_geometry, string $thumbnail_geometry, int $mode, string $frame):Imagick
Imagick::morphImages(int $number_frames):Imagick
Imagick::morphology(int $morphologyMethod, int $iterations, ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
Imagick::mosaicImages(void):Imagick
Imagick::motionBlurImage(float $radius, float $sigma, float $angle [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::negateImage(bool $gray [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::newImage(int $cols, int $rows, mixed $background [, string $format]):bool
Imagick::newPseudoImage(int $columns, int $rows, string $pseudoString):bool
Imagick::nextImage(void):bool
Imagick::normalizeImage([int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::oilPaintImage(float $radius):bool
Imagick::opaquePaintImage(mixed $target, mixed $fill, float $fuzz, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::optimizeImageLayers(void):bool
Imagick::orderedPosterizeImage(string $threshold_map [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::paintFloodfillImage(mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::paintOpaqueImage(mixed $target, mixed $fill, float $fuzz [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::paintTransparentImage(mixed $target, float $alpha, float $fuzz):bool
Imagick::pingImage(string $filename):bool
Imagick::pingImageBlob(string $image):bool
Imagick::pingImageFile(resource $filehandle [, string $fileName]):bool
Imagick::polaroidImage(ImagickDraw $properties, float $angle):bool
Imagick::posterizeImage(int $levels, bool $dither):bool
Imagick::previewImages(int $preview):bool
Imagick::previousImage(void):bool
Imagick::profileImage(string $name, string $profile):bool
Imagick::quantizeImage(int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError):bool
Imagick::quantizeImages(int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError):bool
Imagick::queryFontMetrics(ImagickDraw $properties, string $text [, bool $multiline]):array
Imagick::queryFonts([string $pattern = "*"]):array
Imagick::queryFormats([string $pattern = "*"]):array
Imagick::radialBlurImage(float $angle [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::raiseImage(int $width, int $height, int $x, int $y, bool $raise):bool
Imagick::randomThresholdImage(float $low, float $high [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::readImage(string $filename):bool
Imagick::readImageBlob(string $image [, string $filename]):bool
Imagick::readImageFile(resource $filehandle [, string $fileName = NULL]):bool
Imagick::readimages(array $filenames):bool
Imagick::recolorImage(array $matrix):bool
Imagick::reduceNoiseImage(float $radius):bool
Imagick::remapImage(Imagick $replacement, int $DITHER):public bool
Imagick::removeImage(void):bool
Imagick::removeImageProfile(string $name):string
Imagick::render(void):bool
Imagick::resampleImage(float $x_resolution, float $y_resolution, int $filter, float $blur):bool
Imagick::resetImagePage(string $page):bool
Imagick::resizeImage(int $columns, int $rows, int $filter, float $blur [, bool $bestfit = FALSE [, bool $legacy = FALSE]]):bool
Imagick::rollImage(int $x, int $y):bool
Imagick::rotateImage(mixed $background, float $degrees):bool
Imagick::rotationalBlurImage(float $angle [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
Imagick::roundCorners(float $x_rounding, float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6]]]):bool
Imagick::sampleImage(int $columns, int $rows):bool
Imagick::scaleImage(int $cols, int $rows [, bool $bestfit = FALSE [, bool $legacy = FALSE]]):bool
Imagick::segmentImage(int $COLORSPACE, float $cluster_threshold, float $smooth_threshold [, bool $verbose = FALSE]):public bool
Imagick::selectiveBlurImage(float $radius, float $sigma, float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
Imagick::separateImageChannel(int $channel):bool
Imagick::sepiaToneImage(float $threshold):bool
Imagick::setBackgroundColor(mixed $background):bool
Imagick::setColorspace(int $COLORSPACE):bool
Imagick::setCompression(int $compression):bool
Imagick::setCompressionQuality(int $quality):bool
Imagick::setFilename(string $filename):bool
Imagick::setFirstIterator(void):bool
Imagick::setFont(string $font):bool
Imagick::setFormat(string $format):bool
Imagick::setGravity(int $gravity):bool
Imagick::setImage(Imagick $replace):bool
Imagick::setImageAlphaChannel(int $mode):bool
Imagick::setImageArtifact(string $artifact, string $value):bool
Imagick::setImageAttribute(string $key, string $value):public bool
Imagick::setImageBackgroundColor(mixed $background):bool
Imagick::setImageBias(float $bias):bool
Imagick::setImageBiasQuantum(string $bias):public void
Imagick::setImageBluePrimary(float $x, float $y):bool
Imagick::setImageBorderColor(mixed $border):bool
Imagick::setImageChannelDepth(int $channel, int $depth):bool
Imagick::setImageClipMask(Imagick $clip_mask):bool
Imagick::setImageColormapColor(int $index, ImagickPixel $color):bool
Imagick::setImageColorspace(int $colorspace):bool
Imagick::setImageCompose(int $compose):bool
Imagick::setImageCompression(int $compression):bool
Imagick::setImageCompressionQuality(int $quality):bool
Imagick::setImageDelay(int $delay):bool
Imagick::setImageDepth(int $depth):bool
Imagick::setImageDispose(int $dispose):bool
Imagick::setImageExtent(int $columns, int $rows):bool
Imagick::setImageFilename(string $filename):bool
Imagick::setImageFormat(string $format):bool
Imagick::setImageGamma(float $gamma):bool
Imagick::setImageGravity(int $gravity):bool
Imagick::setImageGreenPrimary(float $x, float $y):bool
Imagick::setImageIndex(int $index):bool
Imagick::setImageInterlaceScheme(int $interlace_scheme):bool
Imagick::setImageInterpolateMethod(int $method):bool
Imagick::setImageIterations(int $iterations):bool
Imagick::setImageMatte(bool $matte):bool
Imagick::setImageMatteColor(mixed $matte):bool
Imagick::setImageOpacity(float $opacity):bool
Imagick::setImageOrientation(int $orientation):bool
Imagick::setImagePage(int $width, int $height, int $x, int $y):bool
Imagick::setImageProfile(string $name, string $profile):bool
Imagick::setImageProperty(string $name, string $value):bool
Imagick::setImageRedPrimary(float $x, float $y):bool
Imagick::setImageRenderingIntent(int $rendering_intent):bool
Imagick::setImageResolution(float $x_resolution, float $y_resolution):bool
Imagick::setImageScene(int $scene):bool
Imagick::setImageTicksPerSecond(int $ticks_per_second):bool
Imagick::setImageType(int $image_type):bool
Imagick::setImageUnits(int $units):bool
Imagick::setImageVirtualPixelMethod(int $method):bool
Imagick::setImageWhitePoint(float $x, float $y):bool
Imagick::setInterlaceScheme(int $interlace_scheme):bool
Imagick::setIteratorIndex(int $index):bool
Imagick::setLastIterator(void):bool
Imagick::setOption(string $key, string $value):bool
Imagick::setPage(int $width, int $height, int $x, int $y):bool
Imagick::setPointSize(float $point_size):bool
Imagick::setProgressMonitor(callable $callback):public bool
Imagick::setRegistry(string $key, string $value):public static bool
Imagick::setResolution(float $x_resolution, float $y_resolution):bool
Imagick::setResourceLimit(int $type, int $limit):bool
Imagick::setSamplingFactors(array $factors):bool
Imagick::setSize(int $columns, int $rows):bool
Imagick::setSizeOffset(int $columns, int $rows, int $offset):bool
Imagick::setType(int $image_type):bool
Imagick::shadeImage(bool $gray, float $azimuth, float $elevation):bool
Imagick::shadowImage(float $opacity, float $sigma, int $x, int $y):bool
Imagick::sharpenImage(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::shaveImage(int $columns, int $rows):bool
Imagick::shearImage(mixed $background, float $x_shear, float $y_shear):bool
Imagick::sigmoidalContrastImage(bool $sharpen, float $alpha, float $beta [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::sketchImage(float $radius, float $sigma, float $angle):bool
Imagick::smushImages(bool $stack, int $offset):public Imagick
Imagick::solarizeImage(int $threshold):bool
Imagick::sparseColorImage(int $SPARSE_METHOD, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
Imagick::spliceImage(int $width, int $height, int $x, int $y):bool
Imagick::spreadImage(float $radius):bool
Imagick::statisticImage(int $type, int $width, int $height [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
Imagick::steganoImage(Imagick $watermark_wand, int $offset):Imagick
Imagick::stereoImage(Imagick $offset_wand):bool
Imagick::stripImage(void):bool
Imagick::subImageMatch(Imagick $Imagick [, array &$offset [, float &$similarity]]):public Imagick
Imagick::swirlImage(float $degrees):bool
Imagick::textureImage(Imagick $texture_wand):Imagick
Imagick::thresholdImage(float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::thumbnailImage(int $columns, int $rows [, bool $bestfit = FALSE [, bool $fill = FALSE [, bool $legacy = FALSE]]]):bool
Imagick::tintImage(mixed $tint, mixed $opacity [, bool $legacy = FALSE]):bool
Imagick::__toString(void):string
Imagick::transformImage(string $crop, string $geometry):Imagick
Imagick::transformImageColorspace(int $colorspace):bool
Imagick::transparentPaintImage(mixed $target, float $alpha, float $fuzz, bool $invert):bool
Imagick::transposeImage(void):bool
Imagick::transverseImage(void):bool
Imagick::trimImage(float $fuzz):bool
Imagick::uniqueImageColors(void):bool
Imagick::unsharpMaskImage(float $radius, float $sigma, float $amount, float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
Imagick::valid(void):bool
Imagick::vignetteImage(float $blackPoint, float $whitePoint, int $x, int $y):bool
Imagick::waveImage(float $amplitude, float $length):bool
Imagick::whiteThresholdImage(mixed $threshold):bool
Imagick::writeImage([string $filename = NULL]):bool
Imagick::writeImageFile(resource $filehandle [, string $format]):bool
Imagick::writeImages(string $filename, bool $adjoin):bool
Imagick::writeImagesFile(resource $filehandle [, string $format]):bool
ImagickDraw::affine(array $affine):bool
ImagickDraw::annotation(float $x, float $y, string $text):bool
ImagickDraw::arc(float $sx, float $sy, float $ex, float $ey, float $sd, float $ed):bool
ImagickDraw::bezier(array $coordinates):bool
ImagickDraw::circle(float $ox, float $oy, float $px, float $py):bool
ImagickDraw::clear(void):bool
ImagickDraw::clone(void):ImagickDraw
ImagickDraw::color(float $x, float $y, int $paintMethod):bool
ImagickDraw::comment(string $comment):bool
ImagickDraw::composite(int $compose, float $x, float $y, float $width, float $height, Imagick $compositeWand):bool
ImagickDraw::__construct(void)
ImagickDraw::destroy(void):bool
ImagickDraw::ellipse(float $ox, float $oy, float $rx, float $ry, float $start, float $end):bool
ImagickDraw::getClipPath(void):string
ImagickDraw::getClipRule(void):int
ImagickDraw::getClipUnits(void):int
ImagickDraw::getFillColor(void):ImagickPixel
ImagickDraw::getFillOpacity(void):float
ImagickDraw::getFillRule(void):int
ImagickDraw::getFont(void):string
ImagickDraw::getFontFamily(void):string
ImagickDraw::getFontSize(void):float
ImagickDraw::getFontStretch(void):public int
ImagickDraw::getFontStyle(void):int
ImagickDraw::getFontWeight(void):int
ImagickDraw::getGravity(void):int
ImagickDraw::getStrokeAntialias(void):bool
ImagickDraw::getStrokeColor(void):ImagickPixel
ImagickDraw::getStrokeDashArray(void):array
ImagickDraw::getStrokeDashOffset(void):float
ImagickDraw::getStrokeLineCap(void):int
ImagickDraw::getStrokeLineJoin(void):int
ImagickDraw::getStrokeMiterLimit(void):int
ImagickDraw::getStrokeOpacity(void):float
ImagickDraw::getStrokeWidth(void):float
ImagickDraw::getTextAlignment(void):int
ImagickDraw::getTextAntialias(void):bool
ImagickDraw::getTextDecoration(void):int
ImagickDraw::getTextEncoding(void):string
ImagickDraw::getTextInterlineSpacing(void):public float
ImagickDraw::getTextInterwordSpacing(void):public float
ImagickDraw::getTextKerning(void):public float
ImagickDraw::getTextUnderColor(void):ImagickPixel
ImagickDraw::getVectorGraphics(void):string
ImagickDraw::line(float $sx, float $sy, float $ex, float $ey):bool
ImagickDraw::matte(float $x, float $y, int $paintMethod):bool
ImagickDraw::pathClose(void):bool
ImagickDraw::pathCurveToAbsolute(float $x1, float $y1, float $x2, float $y2, float $x, float $y):bool
ImagickDraw::pathCurveToQuadraticBezierAbsolute(float $x1, float $y1, float $x, float $y):bool
ImagickDraw::pathCurveToQuadraticBezierRelative(float $x1, float $y1, float $x, float $y):bool
ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute(float $x, float $y):bool
ImagickDraw::pathCurveToQuadraticBezierSmoothRelative(float $x, float $y):bool
ImagickDraw::pathCurveToRelative(float $x1, float $y1, float $x2, float $y2, float $x, float $y):bool
ImagickDraw::pathCurveToSmoothAbsolute(float $x2, float $y2, float $x, float $y):bool
ImagickDraw::pathCurveToSmoothRelative(float $x2, float $y2, float $x, float $y):bool
ImagickDraw::pathEllipticArcAbsolute(float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y):bool
ImagickDraw::pathEllipticArcRelative(float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y):bool
ImagickDraw::pathFinish(void):bool
ImagickDraw::pathLineToAbsolute(float $x, float $y):bool
ImagickDraw::pathLineToHorizontalAbsolute(float $x):bool
ImagickDraw::pathLineToHorizontalRelative(float $x):bool
ImagickDraw::pathLineToRelative(float $x, float $y):bool
ImagickDraw::pathLineToVerticalAbsolute(float $y):bool
ImagickDraw::pathLineToVerticalRelative(float $y):bool
ImagickDraw::pathMoveToAbsolute(float $x, float $y):bool
ImagickDraw::pathMoveToRelative(float $x, float $y):bool
ImagickDraw::pathStart(void):bool
ImagickDraw::point(float $x, float $y):bool
ImagickDraw::polygon(array $coordinates):bool
ImagickDraw::polyline(array $coordinates):bool
ImagickDraw::pop(void):bool
ImagickDraw::popClipPath(void):bool
ImagickDraw::popDefs(void):bool
ImagickDraw::popPattern(void):bool
ImagickDraw::push(void):bool
ImagickDraw::pushClipPath(string $clip_mask_id):bool
ImagickDraw::pushDefs(void):bool
ImagickDraw::pushPattern(string $pattern_id, float $x, float $y, float $width, float $height):bool
ImagickDraw::rectangle(float $x1, float $y1, float $x2, float $y2):bool
ImagickDraw::render(void):bool
ImagickDraw::resetVectorGraphics(void):public bool
ImagickDraw::rotate(float $degrees):bool
ImagickDraw::roundRectangle(float $x1, float $y1, float $x2, float $y2, float $rx, float $ry):bool
ImagickDraw::scale(float $x, float $y):bool
ImagickDraw::setClipPath(string $clip_mask):bool
ImagickDraw::setClipRule(int $fill_rule):bool
ImagickDraw::setClipUnits(int $clip_units):bool
ImagickDraw::setFillAlpha(float $opacity):bool
ImagickDraw::setFillColor(ImagickPixel $fill_pixel):bool
ImagickDraw::setFillOpacity(float $fillOpacity):bool
ImagickDraw::setFillPatternURL(string $fill_url):bool
ImagickDraw::setFillRule(int $fill_rule):bool
ImagickDraw::setFont(string $font_name):bool
ImagickDraw::setFontFamily(string $font_family):bool
ImagickDraw::setFontSize(float $pointsize):bool
ImagickDraw::setFontStretch(int $fontStretch):bool
ImagickDraw::setFontStyle(int $style):bool
ImagickDraw::setFontWeight(int $font_weight):bool
ImagickDraw::setGravity(int $gravity):bool
ImagickDraw::setResolution(float $x_resolution, float $y_resolution):public bool
ImagickDraw::setStrokeAlpha(float $opacity):bool
ImagickDraw::setStrokeAntialias(bool $stroke_antialias):bool
ImagickDraw::setStrokeColor(ImagickPixel $stroke_pixel):bool
ImagickDraw::setStrokeDashArray(array $dashArray):bool
ImagickDraw::setStrokeDashOffset(float $dash_offset):bool
ImagickDraw::setStrokeLineCap(int $linecap):bool
ImagickDraw::setStrokeLineJoin(int $linejoin):bool
ImagickDraw::setStrokeMiterLimit(int $miterlimit):bool
ImagickDraw::setStrokeOpacity(float $stroke_opacity):bool
ImagickDraw::setStrokePatternURL(string $stroke_url):bool
ImagickDraw::setStrokeWidth(float $stroke_width):bool
ImagickDraw::setTextAlignment(int $alignment):bool
ImagickDraw::setTextAntialias(bool $antiAlias):bool
ImagickDraw::setTextDecoration(int $decoration):bool
ImagickDraw::setTextEncoding(string $encoding):bool
ImagickDraw::setTextInterlineSpacing(float $spacing):public bool
ImagickDraw::setTextInterwordSpacing(float $spacing):public bool
ImagickDraw::setTextKerning(float $kerning):public bool
ImagickDraw::setTextUnderColor(ImagickPixel $under_color):bool
ImagickDraw::setVectorGraphics(string $xml):bool
ImagickDraw::setViewbox(int $x1, int $y1, int $x2, int $y2):bool
ImagickDraw::skewX(float $degrees):bool
ImagickDraw::skewY(float $degrees):bool
ImagickDraw::translate(float $x, float $y):bool
ImagickKernel::addKernel(ImagickKernel $ImagickKernel):public void
ImagickKernel::addUnityKernel(float $scale):public void
ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DIAMOND, "2");:Create a kernel from a builtin in kernel. See http://www.imagemagick.org/Usage/morphology/#kernel for examples. Currently the 'rotation' symbols are not supported. Example: $diamondKernel =
ImagickKernel::fromMatrix(array $matrix [, array $origin]):public static ImagickKernel
ImagickKernel::getMatrix(void):public array
ImagickKernel::scale(float $scale [, int $normalizeFlag]):public void
ImagickKernel::separate(void):public array
ImagickPixel::clear(void):bool
ImagickPixel::__construct([string $color])
ImagickPixel::destroy(void):bool
ImagickPixel::getColor([int $normalized = 0]):array
ImagickPixel::getColorAsString(void):string
ImagickPixel::getColorCount(void):int
ImagickPixel::getColorQuantum(void):public array
ImagickPixel::getColorValue(int $color):float
ImagickPixel::getColorValueQuantum(int $color):public number
ImagickPixel::getHSL(void):array
ImagickPixel::getIndex(void):public int
ImagickPixel::isPixelSimilar(ImagickPixel $color, float $fuzz):public bool
ImagickPixel::isPixelSimilarQuantum(string $color [, string $fuzz]):public bool
ImagickPixel::isSimilar(ImagickPixel $color, float $fuzz):public bool
ImagickPixel::setColor(string $color):public bool
ImagickPixel::setColorCount(int $colorCount):public bool
ImagickPixel::setColorValue(int $color, float $value):bool
ImagickPixel::setColorValueQuantum(int $color, number $value):public bool
ImagickPixel::setHSL(float $hue, float $saturation, float $luminosity):bool
ImagickPixel::setIndex(int $index):public bool
ImagickPixelIterator::clear(void):bool
ImagickPixelIterator::__construct(Imagick $wand)
ImagickPixelIterator::destroy(void):bool
ImagickPixelIterator::getCurrentIteratorRow(void):array
ImagickPixelIterator::getIteratorRow(void):int
ImagickPixelIterator::getNextIteratorRow(void):array
ImagickPixelIterator::getPreviousIteratorRow(void):array
ImagickPixelIterator::newPixelIterator(Imagick $wand):bool
ImagickPixelIterator::newPixelRegionIterator(Imagick $wand, int $x, int $y, int $columns, int $rows):bool
ImagickPixelIterator::resetIterator(void):bool
ImagickPixelIterator::setIteratorFirstRow(void):bool
ImagickPixelIterator::setIteratorLastRow(void):bool
ImagickPixelIterator::setIteratorRow(int $row):bool
ImagickPixelIterator::syncIterator(void):bool
InfiniteIterator::__construct(Iterator $iterator):public
InfiniteIterator::next(void):public void
Counter::bumpValue(int $offset)
Counter::__construct(string $name [, int $initial_value [, int $flags]])
Counter::getMeta(int $attribute):mixed
Counter::getNamed(string $name):static Counter
Counter::getValue(void):int
Counter::resetValue(void):void
Counter::setCounterClass(string $name):static void
counter_bump_value(resource $counter, int $offset):void
counter_bump(int $offset):void
counter_create(string $name [, int $initial_value [, int $flags]]):resource
counter_get_meta(resource $counter, int $attribute):mixed
counter_get_named() returns an existing counter by name if that name exists, or NULL otherwise.
counter_get_value(resource $counter):int
counter_get(void):int
counter_reset_value(resource $counter):void
counter_reset(void):void
IntlBreakIterator::__construct(void):private
IntlBreakIterator::createCharacterInstance([string $locale]):public static IntlBreakIterator
IntlBreakIterator::createCodePointInstance(void):public static IntlBreakIterator
IntlBreakIterator::createLineInstance([string $locale]):public static IntlBreakIterator
IntlBreakIterator::createSentenceInstance([string $locale]):public static IntlBreakIterator
IntlBreakIterator::createTitleInstance([string $locale]):public static IntlBreakIterator
IntlBreakIterator::createWordInstance([string $locale]):public static IntlBreakIterator
IntlBreakIterator::current(void):public int
IntlBreakIterator::first(void):public int
IntlBreakIterator::following(int $offset):public int
IntlBreakIterator::getErrorCode(void):public int
IntlBreakIterator::getErrorMessage(void):public string
IntlBreakIterator::getLocale(string $locale_type):public string
IntlBreakIterator::getPartsIterator([int $key_type = IntlPartsIterator::KEY_SEQUENTIAL]):public IntlPartsIterator
IntlBreakIterator::getText(void):public string
IntlBreakIterator::isBoundary(int $offset):public bool
IntlBreakIterator::last(void):public int
IntlBreakIterator::next([int $offset]):public int
IntlBreakIterator::preceding(int $offset):public int
IntlBreakIterator::previous(void):public int
IntlBreakIterator::setText(string $text):public bool
IntlCalendar::add(int $field, int $amount):public bool
IntlCalendar::after(IntlCalendar $other):public bool
IntlCalendar::before(IntlCalendar $other):public bool
IntlCalendar::clear([int $field = NULL]):public bool
IntlCalendar::__construct(void):private
IntlCalendar::createInstance([mixed $timeZone = NULL [, string $locale = ""]]):public static IntlCalendar
IntlCalendar::equals(IntlCalendar $other):public bool
IntlCalendar::fieldDifference(float $when, int $field):public int
IntlCalendar::fromDateTime(mixed $dateTime):public static IntlCalendar
IntlCalendar::get(int $field):public int
IntlCalendar::getActualMaximum(int $field):public int
IntlCalendar::getActualMinimum(int $field):public int
IntlCalendar::getAvailableLocales(void):public static array
IntlCalendar::getDayOfWeekType(int $dayOfWeek):public int
IntlCalendar::getErrorCode(void):public int
intlcal_get_error_code(IntlCalendar $calendar):int
IntlCalendar::getErrorMessage(void):public string
intlcal_get_error_message(IntlCalendar $calendar):string
IntlCalendar::getFirstDayOfWeek(void):public int
IntlCalendar::getGreatestMinimum(int $field):public int
IntlCalendar::getKeywordValuesForLocale(string $key, string $locale, bool $commonlyUsed):public static Iterator
IntlCalendar::getLeastMaximum(int $field):public int
IntlCalendar::getLocale(int $localeType):public string
IntlCalendar::getMaximum(int $field):public int
IntlCalendar::getMinimalDaysInFirstWeek(void):public int
IntlCalendar::getMinimum(int $field):public int
IntlCalendar::getNow(void):public static float
IntlCalendar::getRepeatedWallTimeOption(void):public int
IntlCalendar::getSkippedWallTimeOption(void):public int
IntlCalendar::getTime(void):public float
IntlCalendar::getTimeZone(void):public IntlTimeZone
IntlCalendar::getType(void):public string
IntlCalendar::getWeekendTransition(string $dayOfWeek):public int
IntlCalendar::inDaylightTime(void):public bool
IntlCalendar::isEquivalentTo(IntlCalendar $other):public bool
IntlCalendar::isLenient(void):public bool
IntlCalendar::isSet(int $field):public bool
IntlCalendar::isWeekend([float $date = NULL]):public bool
IntlCalendar::roll(int $field, mixed $amountOrUpOrDown):public bool
IntlCalendar::set(int $field, int $value):public bool
IntlCalendar::setFirstDayOfWeek(int $dayOfWeek):public bool
IntlCalendar::setLenient(bool $isLenient):public bool
IntlCalendar::setMinimalDaysInFirstWeek(int $minimalDays):public bool
IntlCalendar::setRepeatedWallTimeOption(int $wallTimeOption):public bool
IntlCalendar::setSkippedWallTimeOption(int $wallTimeOption):public bool
IntlCalendar::setTime(float $date):public bool
IntlCalendar::setTimeZone(mixed $timeZone):public bool
IntlCalendar::toDateTime(void):public DateTime
IntlChar::charAge(mixed $codepoint):public static array
IntlChar::charDigitValue(mixed $codepoint):public static int
IntlChar::charDirection(mixed $codepoint):public static int
IntlChar::charFromName(string $characterName [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME]):public static int
IntlChar::charMirror(mixed $codepoint):public static mixed
IntlChar::charName(mixed $codepoint [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME]):public static string
IntlChar::charType(mixed $codepoint):public static int
IntlChar::chr(mixed $codepoint):public static string
IntlChar::digit(string $codepoint [, int $radix = 10]):public static int
IntlChar::enumCharNames(mixed $start, mixed $limit, callable $callback [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME]):public static void
IntlChar::enumCharTypes(callable $callback):public static void
IntlChar::foldCase(mixed $codepoint [, int $options = IntlChar::FOLD_CASE_DEFAULT]):public static mixed
IntlChar::forDigit(int $digit [, int $radix = 10]):public static int
IntlChar::getBidiPairedBracket(mixed $codepoint):public static mixed
IntlChar::getBlockCode(mixed $codepoint):public static int
IntlChar::getCombiningClass(mixed $codepoint):public static int
IntlChar::getFC_NFKC_Closure(mixed $codepoint):public static string
IntlChar::getIntPropertyMaxValue(int $property):public static int
IntlChar::getIntPropertyMinValue(int $property):public static int
IntlChar::getIntPropertyValue(mixed $codepoint, int $property):public static int
IntlChar::getNumericValue(mixed $codepoint):public static float
IntlChar::getPropertyEnum(string $alias):public static int
IntlChar::getPropertyName(int $property [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME]):public static string
IntlChar::getPropertyValueEnum(int $property, string $name):public static int
IntlChar::getPropertyValueName(int $property, int $value [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME]):public static string
IntlChar::getUnicodeVersion(void):public static array
IntlChar::hasBinaryProperty(mixed $codepoint, int $property):public static bool
IntlChar::isalnum(mixed $codepoint):public static bool
IntlChar::isalpha(mixed $codepoint):public static bool
IntlChar::isbase(mixed $codepoint):public static bool
IntlChar::isblank(mixed $codepoint):public static bool
IntlChar::iscntrl(mixed $codepoint):public static bool
IntlChar::isdefined(mixed $codepoint):public static bool
IntlChar::isdigit(mixed $codepoint):public static bool
IntlChar::isgraph(mixed $codepoint):public static bool
IntlChar::isIDIgnorable(mixed $codepoint):public static bool
IntlChar::isIDPart(mixed $codepoint):public static bool
IntlChar::isIDStart(mixed $codepoint):public static bool
IntlChar::isISOControl(mixed $codepoint):public static bool
IntlChar::isJavaIDPart(mixed $codepoint):public static bool
IntlChar::isJavaIDStart(mixed $codepoint):public static bool
IntlChar::isJavaSpaceChar(mixed $codepoint):public static bool
IntlChar::islower(mixed $codepoint):public static bool
IntlChar::isMirrored(mixed $codepoint):public static bool
IntlChar::isprint(mixed $codepoint):public static bool
IntlChar::ispunct(mixed $codepoint):public static bool
IntlChar::isspace(mixed $codepoint):public static bool
IntlChar::istitle(mixed $codepoint):public static bool
IntlChar::isUAlphabetic(mixed $codepoint):public static bool
IntlChar::isULowercase(mixed $codepoint):public static bool
IntlChar::isupper(mixed $codepoint):public static bool
IntlChar::isUUppercase(mixed $codepoint):public static bool
IntlChar::isUWhiteSpace(mixed $codepoint):public static bool
IntlChar::isWhitespace(mixed $codepoint):public static bool
IntlChar::isxdigit(mixed $codepoint):public static bool
IntlChar::ord(mixed $character):public static int
IntlChar::tolower(mixed $codepoint):public static mixed
IntlChar::totitle(mixed $codepoint):public static mixed
IntlChar::toupper(mixed $codepoint):public static mixed
IntlCodePointBreakIterator::getLastCodePoint(void):public int
IntlDateFormatter::create(string $locale, int $datetype, int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = ""]]]):public static IntlDateFormatter
datefmt_create(string $locale, int $datetype, int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = ""]]]):IntlDateFormatter
IntlDateFormatter::format(mixed $value):public string
datefmt_format(IntlDateFormatter $fmt, mixed $value):string
IntlDateFormatter::formatObject(object $object [, mixed $format = NULL [, string $locale = NULL]]):public static string
datefmt_format_object(object $object [, mixed $format = NULL [, string $locale = NULL]]):public static string
IntlDateFormatter::getCalendar(void):int
datefmt_get_calendar(IntlDateFormatter $fmt):int
IntlDateFormatter::getCalendarObject(void):public IntlCalendar
datefmt_get_calendar_object(void):IntlCalendar
IntlDateFormatter::getDateType(void):public int
datefmt_get_datetype(IntlDateFormatter $fmt):int
IntlDateFormatter::getErrorCode(void):public int
datefmt_get_error_code(IntlDateFormatter $fmt):int
IntlDateFormatter::getErrorMessage(void):public string
datefmt_get_error_message(IntlDateFormatter $fmt):string
IntlDateFormatter::getLocale([int $which]):public string
datefmt_get_locale(IntlDateFormatter $fmt [, int $which]):string
IntlDateFormatter::getPattern(void):public string
datefmt_get_pattern(IntlDateFormatter $fmt):string
IntlDateFormatter::getTimeType(void):public int
datefmt_get_timetype(IntlDateFormatter $fmt):int
IntlDateFormatter::getTimeZone(void):public IntlTimeZone
datefmt_get_timezone(void):IntlTimeZone
IntlDateFormatter::getTimeZoneId(void):public string
datefmt_get_timezone_id(IntlDateFormatter $fmt):string
IntlDateFormatter::isLenient(void):public bool
datefmt_is_lenient(IntlDateFormatter $fmt):bool
IntlDateFormatter::localtime(string $value [, int &$position]):public array
datefmt_localtime(IntlDateFormatter $fmt, string $value [, int &$position]):array
IntlDateFormatter::parse(string $value [, int &$position]):public int
datefmt_parse(IntlDateFormatter $fmt, string $value [, int &$position]):int
IntlDateFormatter::setCalendar(mixed $which):bool
datefmt_set_calendar(IntlDateFormatter $fmt, mixed $which):bool
IntlDateFormatter::setLenient(bool $lenient):public bool
datefmt_set_lenient(IntlDateFormatter $fmt, bool $lenient):bool
IntlDateFormatter::setPattern(string $pattern):public bool
datefmt_set_pattern(IntlDateFormatter $fmt, string $pattern):bool
IntlDateFormatter::setTimeZone(mixed $zone):public bool
datefmt_set_timezone(IntlDateFormatter $fmt, mixed $zone):bool
IntlDateFormatter::setTimeZoneId(string $zone):public bool
datefmt_set_timezone_id(IntlDateFormatter $fmt, string $zone):bool
IntlGregorianCalendar::__construct([IntlTimeZone $tz [, string $locale]]):public
IntlGregorianCalendar::getGregorianChange(void):public float
IntlGregorianCalendar::isLeapYear(int $year):public bool
IntlGregorianCalendar::setGregorianChange(float $date):public bool
IntlIterator::current(void):public mixed
IntlIterator::key(void):public string
IntlIterator::next(void):public void
IntlIterator::rewind(void):public void
IntlIterator::valid(void):public bool
IntlPartsIterator::getBreakIterator(void):public IntlBreakIterator
IntlRuleBasedBreakIterator::__construct(string $rules [, string $areCompiled]):public
IntlRuleBasedBreakIterator::getBinaryRules(void):public string
IntlRuleBasedBreakIterator::getRules(void):public string
IntlRuleBasedBreakIterator::getRuleStatus(void):public int
IntlRuleBasedBreakIterator::getRuleStatusVec(void):public array
IntlTimeZone::countEquivalentIDs(string $zoneId):public static int
IntlTimeZone::createDefault(void):public static IntlTimeZone
IntlTimeZone::createEnumeration([mixed $countryOrRawOffset]):public static IntlIterator
IntlTimeZone::createTimeZone(string $zoneId):public static IntlTimeZone
IntlTimeZone::createTimeZoneIDEnumeration(int $zoneType [, string $region [, int $rawOffset]]):public static IntlIterator
IntlTimeZone::fromDateTimeZone(DateTimeZone $zoneId):public static IntlTimeZone
IntlTimeZone::getCanonicalID(string $zoneId [, bool &$isSystemID]):public static string
IntlTimeZone::getDisplayName([bool $isDaylight [, int $style [, string $locale]]]):public string
IntlTimeZone::getDSTSavings(void):public int
IntlTimeZone::getEquivalentID(string $zoneId, int $index):public static string
IntlTimeZone::getErrorCode(void):public int
intltz_get_error_code(void):int
IntlTimeZone::getErrorMessage(void):public string
intltz_get_error_message(void):string
IntlTimeZone::getGMT(void):public static IntlTimeZone
IntlTimeZone::getID(void):public string
IntlTimeZone::getIDForWindowsID(string $timezone [, string $region]):public static string
IntlTimeZone::getOffset(float $date, bool $local, int &$rawOffset, int &$dstOffset):public int
IntlTimeZone::getRawOffset(void):public int
IntlTimeZone::getRegion(string $zoneId):public static string
IntlTimeZone::getTZDataVersion(void):public static string
IntlTimeZone::getUnknown(void):public static IntlTimeZone
IntlTimeZone::getWindowsID(string $timezone):public static string
IntlTimeZone::hasSameRules(IntlTimeZone $otherTimeZone):public bool
IntlTimeZone::toDateTimeZone(void):public DateTimeZone
IntlTimeZone::useDaylightTime(void):public bool
Iterator::current(void):abstract public mixed
Iterator::key(void):abstract public scalar
Iterator::next(void):abstract public void
Iterator::rewind(void):abstract public void
Iterator::valid(void):abstract public bool
IteratorAggregate::getIterator(void):abstract public Traversable
IteratorIterator::__construct(Traversable $iterator):public
IteratorIterator::current(void):public mixed
IteratorIterator::getInnerIterator(void):public Traversable
IteratorIterator::key(void):public scalar
IteratorIterator::next(void):public void
IteratorIterator::rewind(void):public void
IteratorIterator::valid(void):public bool
JsonSerializable::jsonSerialize(void):abstract public mixed
Judy::byCount(int $nth_index):public int
Judy::__construct(int $judy_type):public
Judy::count([int $index_start = 0 [, int $index_end = -1]]):public int
Judy::__destruct(void):public void
Judy::first([mixed $index]):public mixed
Judy::firstEmpty([mixed $index = 0]):public int
Judy::free(void):public int
Judy::getType(void):public int
Judy::last([string $index]):public void
Judy::lastEmpty([int $index = -1]):public int
Judy::memoryUsage(void):public int
Judy::next(mixed $index):public mixed
Judy::nextEmpty(int $index):public int
Judy::offsetExists(mixed $offset):public bool
Judy::offsetGet(mixed $offset):public mixed
Judy::offsetSet(mixed $offset, mixed $value):public bool
Judy::offsetUnset(mixed $offset):public bool
Judy::prev(mixed $index):public mixed
Judy::prevEmpty(mixed $index):public int
Judy::size(void):public void
Superglobalswere introduced to PHP.:4.1.0
Lapack::eigenValues(array $a [, array $left [, array $right]]):public static array
Lapack::identity(int $n):public static array
Lapack::leastSquaresByFactorisation(array $a, array $b):public static array
Lapack::leastSquaresBySVD(array $a, array $b):public static array
Lapack::pseudoInverse(array $a):public static array
Lapack::singularValues(array $a):public static array
Lapack::solveLinearEquation(array $a, array $b):public static array
LimitIterator::__construct(Iterator $iterator [, int $offset = 0 [, int $count = -1]]):public
LimitIterator::current(void):public mixed
LimitIterator::getInnerIterator(void):public Iterator
LimitIterator::getPosition(void):public int
LimitIterator::key(void):public mixed
LimitIterator::next(void):public void
LimitIterator::rewind(void):public void
LimitIterator::seek(int $position):public int
LimitIterator::valid(void):public bool
Locale::acceptFromHttp(string $header):public static string
locale_accept_from_http(string $header):string
Locale::canonicalize(string $locale):public static string
locale_canonicalize(string $locale):string
Locale::composeLocale(array $subtags):public static string
locale_compose(array $subtags):string
Locale::filterMatches(string $langtag, string $locale [, bool $canonicalize = FALSE]):public static bool
locale_filter_matches(string $langtag, string $locale [, bool $canonicalize = FALSE]):bool
Locale::getAllVariants(string $locale):public static array
locale_get_all_variants(string $locale):array
Locale::getDefault(void):public static string
locale_get_default(void):string
Locale::getDisplayLanguage(string $locale [, string $in_locale]):public static string
locale_get_display_language(string $locale [, string $in_locale]):string
Locale::getDisplayName(string $locale [, string $in_locale]):public static string
locale_get_display_name(string $locale [, string $in_locale]):string
Locale::getDisplayRegion(string $locale [, string $in_locale]):public static string
locale_get_display_region(string $locale [, string $in_locale]):string
Locale::getDisplayScript(string $locale [, string $in_locale]):public static string
locale_get_display_script(string $locale [, string $in_locale]):string
Locale::getDisplayVariant(string $locale [, string $in_locale]):public static string
locale_get_display_variant(string $locale [, string $in_locale]):string
Locale::getKeywords(string $locale):public static array
locale_get_keywords(string $locale):array
Locale::getPrimaryLanguage(string $locale):public static string
locale_get_primary_language(string $locale):string
Locale::getRegion(string $locale):public static string
locale_get_region(string $locale):string
Locale::getScript(string $locale):public static string
locale_get_script(string $locale):string
Locale::lookup(array $langtag, string $locale [, bool $canonicalize = FALSE [, string $default]]):public static string
locale_lookup(array $langtag, string $locale [, bool $canonicalize = FALSE [, string $default]]):string
Locale::parseLocale(string $locale):public static array
locale_parse(string $locale):array
Locale::setDefault(string $locale):public static bool
locale_set_default(string $locale):bool
Lua::assign(string $name, string $value):public mixed
Lua::call(callable $lua_func [, array $args [, int $use_self = 0]]):public mixed
Lua::__call(callable $lua_func [, array $args [, int $use_self = 0]]):public mixed
Lua::__construct(string $lua_script_file = NULL):public
Lua::eval(string $statements):public mixed
Lua::getVersion(void):public string
Lua::include(string $file):public mixed
Lua::registerCallback(string $name, callable $function):public mixed
LuaClosure::__invoke(mixed $arg [, mixed $...]):public void
Memcache::add(string $key, mixed $var [, int $flag [, int $expire]]):bool
Memcache::addServer(string $host [, int $port = 11211 [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callable $failure_callback [, int $timeoutms]]]]]]]]):bool
Memcache::close(void):bool
Memcache::connect(string $host [, int $port [, int $timeout]]):bool
Memcache::decrement(string $key [, int $value = 1]):int
Memcache::delete(string $key [, int $timeout = 0]):bool
Memcache::flush(void):bool
Memcache::get(string $key [, int &$flags]):string
Memcache::getExtendedStats([string $type [, int $slabid [, int $limit = 100]]]):array
Memcache::getServerStatus(string $host [, int $port = 11211]):int
Memcache::getStats([string $type [, int $slabid [, int $limit = 100]]]):array
Memcache::getVersion(void):string
Memcache::increment(string $key [, int $value = 1]):int
Memcache::pconnect(string $host [, int $port [, int $timeout]]):mixed
Memcache::replace(string $key, mixed $var [, int $flag [, int $expire]]):bool
Memcache::set(string $key, mixed $var [, int $flag [, int $expire]]):bool
Memcache::setCompressThreshold(int $threshold [, float $min_savings]):bool
Memcache::setServerParams(string $host [, int $port = 11211 [, int $timeout [, int $retry_interval = FALSE [, bool $status [, callable $failure_callback]]]]]):bool
Memcached::add(string $key, mixed $value [, int $expiration]):public bool
Memcached::addByKey(string $server_key, string $key, mixed $value [, int $expiration]):public bool
Memcached::addServer(string $host, int $port [, int $weight = 0]):public bool
Memcached::addServers(array $servers):public bool
Memcached::append(string $key, string $value):public bool
Memcached::appendByKey(string $server_key, string $key, string $value):public bool
Memcached::cas(float $cas_token, string $key, mixed $value [, int $expiration]):public bool
Memcached::casByKey(float $cas_token, string $server_key, string $key, mixed $value [, int $expiration]):public bool
Memcached::__construct([string $persistent_id]):public
Memcached::decrement(string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]]):public int
Memcached::decrementByKey(string $server_key, string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]]):public int
Memcached::delete(string $key [, int $time = 0]):public bool
Memcached::deleteByKey(string $server_key, string $key [, int $time = 0]):public bool
Memcached::deleteMulti(array $keys [, int $time = 0]):public array
Memcached::deleteMultiByKey(string $server_key, array $keys [, int $time = 0]):public bool
Memcached::fetch(void):public array
Memcached::fetchAll(void):public array
Memcached::flush([int $delay = 0]):public bool
Memcached::get(string $key [, callable $cache_cb [, int $$flags]]):public mixed
Memcached::getAllKeys(void):public array
Memcached::getByKey(string $server_key, string $key [, callable $cache_cb [, int $flags]]):public mixed
Memcached::getDelayed(array $keys [, bool $with_cas [, callable $value_cb]]):public bool
Memcached::getDelayedByKey(string $server_key, array $keys [, bool $with_cas [, callable $value_cb]]):public bool
Memcached::getMulti(array $keys [, int $flags]):public mixed
Memcached::getMultiByKey(string $server_key, array $keys [, int $flags]):public array
Memcached::getOption(int $option):public mixed
Memcached::getResultCode(void):public int
Memcached::getResultMessage(void):public string
Memcached::getServerByKey(string $server_key):public array
Memcached::getServerList(void):public array
Memcached::getStats(void):public array
Memcached::getVersion(void):public array
Memcached::increment(string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]]):public int
Memcached::incrementByKey(string $server_key, string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]]):public int
Memcached::isPersistent(void):public bool
Memcached::isPristine(void):public bool
Memcached::prepend(string $key, string $value):public bool
Memcached::prependByKey(string $server_key, string $key, string $value):public bool
Memcached::quit(void):public bool
Memcached::replace(string $key, mixed $value [, int $expiration]):public bool
Memcached::replaceByKey(string $server_key, string $key, mixed $value [, int $expiration]):public bool
Memcached::resetServerList(void):public bool
Memcached::set(string $key, mixed $value [, int $expiration]):public bool
Memcached::setByKey(string $server_key, string $key, mixed $value [, int $expiration]):public bool
Memcached::setMulti(array $items [, int $expiration]):public bool
Memcached::setMultiByKey(string $server_key, array $items [, int $expiration]):public bool
Memcached::setOption(int $option, mixed $value):public bool
Memcached::setOptions(array $options):public bool
Memcached::setSaslAuthData(string $username, string $password):public void
Memcached::touch(string $key, int $expiration):public bool
Memcached::touchByKey(string $server_key, string $key, int $expiration):public bool
MessageFormatter::create(string $locale, string $pattern):public static MessageFormatter
MessageFormatter::__construct(string $locale, string $pattern):public
MessageFormatter::format(array $args):public string
msgfmt_format(MessageFormatter $fmt, array $args):string
MessageFormatter::formatMessage(string $locale, string $pattern, array $args):public static string
msgfmt_format_message(string $locale, string $pattern, array $args):string
MessageFormatter::getErrorCode(void):public int
msgfmt_get_error_code(MessageFormatter $fmt):int
MessageFormatter::getErrorMessage(void):public string
msgfmt_get_error_message(MessageFormatter $fmt):string
MessageFormatter::getLocale(void):public string
msgfmt_get_locale(NumberFormatter $formatter):string
MessageFormatter::getPattern(void):public string
msgfmt_get_pattern(MessageFormatter $fmt):string
MessageFormatter::parse(string $value):public array
msgfmt_parse(MessageFormatter $fmt, string $value):array
MessageFormatter::parseMessage(string $locale, string $pattern, string $source):public static array
msgfmt_parse_message(string $locale, string $pattern, string $value):array
MessageFormatter::setPattern(string $pattern):public bool
msgfmt_set_pattern(MessageFormatter $fmt, string $pattern):bool
Mongo::connectUtil(void):protected bool
Mongo::__construct([string $server [, array $options]]):public
Mongo::getPoolSize(void):public static int
Mongo::getSlave(void):public string
Mongo::getSlaveOkay(void):public bool
Mongo::poolDebug(void):public array
Mongo::setPoolSize(int $size):public static bool
Mongo::setSlaveOkay([bool $ok = TRUE]):public bool
Mongo::switchSlave(void):public string
MongoBinData::__construct(string $data [, int $type = 0]):public
MongoBinData::__toString(void):public string
MongoClient::close([boolean|string $connection]):public bool
MongoClient::connect(void):public bool
MongoClient::__construct([string $server = "mongodb://localhost:27017" [, array $options = array("connect" => TRUE) [, array $driver_options]]]):public
MongoClient::dropDB(mixed $db):public array
MongoClient::__get(string $dbname):public MongoDB
MongoClient::getConnections(void):public static array
MongoClient::getHosts(void):public array
MongoClient::getReadPreference(void):public array
MongoClient::getWriteConcern(void):public array
MongoClient::killCursor(string $server_hash, int|MongoInt64 $id):public bool
MongoClient::listDBs(void):public array
MongoClient::selectCollection(string $db, string $collection):public MongoCollection
MongoClient::selectDB(string $name):public MongoDB
MongoClient::setReadPreference(string $read_preference [, array $tags]):public bool
MongoClient::setWriteConcern(mixed $w [, int $wtimeout]):public bool
MongoClient::__toString(void):public string
MongoCode::__construct(string $code [, array $scope = array()]):public
MongoCode::__toString(void):public string
MongoCollection::__toString(void):public string
MongoCollection::aggregate(array $pipeline [, array $options]):public array
MongoCollection::aggregateCursor(array $command [, array $options]):public MongoCommandCursor
MongoCollection::batchInsert(array $a [, array $options = array()]):public mixed
MongoCollection::__construct(MongoDB $db, string $name):public
MongoCollection::count([array $query = array() [, array $options = array()]]):public int
MongoCollection::createDBRef(mixed $document_or_id):public array
MongoCollection::createIndex(array $keys [, array $options = array()]):public bool
MongoCollection::deleteIndex(string|array $keys):public array
MongoCollection::deleteIndexes(void):public array
MongoCollection::distinct(string $key [, array $query]):public array
MongoCollection::drop(void):public array
MongoCollection::ensureIndex(string|array $key|keys [, array $options = array()]):public bool
MongoCollection::find([array $query = array() [, array $fields = array()]]):public MongoCursor
MongoCollection::findAndModify(array $query [, array $update [, array $fields [, array $options]]]):public array
MongoCollection::findOne([array $query = array() [, array $fields = array() [, array $options = array()]]]):public array
MongoCollection::__get(string $name):public MongoCollection
MongoCollection::getDBRef(array $ref):public array
MongoCollection::getIndexInfo(void):public array
MongoCollection::getName(void):public string
MongoCollection::getReadPreference(void):public array
MongoCollection::getSlaveOkay(void):public bool
MongoCollection::getWriteConcern(void):public array
MongoCollection::group(mixed $keys, array $initial, MongoCode $reduce [, array $options = array()]):public array
MongoCollection::insert(array|object $document [, array $options = array()]):public bool|array
MongoCollection::parallelCollectionScan(int $num_cursors):public array[MongoCommandCursor]
MongoCollection::remove([array $criteria = array() [, array $options = array()]]):public bool|array
MongoCollection::save(array|object $document [, array $options = array()]):public mixed
MongoCollection::setReadPreference(string $read_preference [, array $tags]):public bool
MongoCollection::setSlaveOkay([bool $ok = TRUE]):public bool
MongoCollection::setWriteConcern(mixed $w [, int $wtimeout]):public bool
MongoCollection::toIndexString(mixed $keys):static protected string
MongoCollection::update(array $criteria, array $new_object [, array $options = array()]):public bool|array
MongoCollection::validate([bool $scan_data = FALSE]):public array
MongoCommandCursor::batchSize(int $batchSize):public MongoCommandCursor
MongoCommandCursor::__construct(MongoClient $connection, string $ns, array $command = array()):public
MongoCommandCursor::createFromDocument(MongoClient $connection, string $hash, array $document):public static MongoCommandCursor
MongoCommandCursor::current(void):public array
MongoCommandCursor::dead(void):public bool
MongoCommandCursor::getReadPreference(void):public array
MongoCommandCursor::info(void):public array
MongoCommandCursor::key(void):public int
MongoCommandCursor::next(void):public void
MongoCommandCursor::rewind(void):public array
MongoCommandCursor::setReadPreference(string $read_preference [, array $tags]):public MongoCommandCursor
MongoCommandCursor::timeout(int $ms):public MongoCommandCursor
MongoCommandCursor::valid(void):public bool
MongoCursor::addOption(string $key, mixed $value):public MongoCursor
MongoCursor::awaitData([bool $wait = TRUE]):public MongoCursor
MongoCursor::batchSize(int $batchSize):public MongoCursor
MongoCursor::__construct(MongoClient $connection, string $ns [, array $query = array() [, array $fields = array()]]):public
MongoCursor::count([bool $foundOnly = FALSE]):public int
MongoCursor::current(void):public array
MongoCursor::dead(void):public bool
MongoCursor::doQuery(void):protected void
MongoCursor::explain(void):public array
MongoCursor::fields(array $f):public MongoCursor
MongoCursor::getNext(void):public array
MongoCursor::getReadPreference(void):public array
MongoCursor::hasNext(void):public bool
MongoCursor::hint(mixed $index):public MongoCursor
MongoCursor::immortal([bool $liveForever = TRUE]):public MongoCursor
MongoCursor::info(void):public array
MongoCursor::key(void):public string|int
MongoCursor::limit(int $num):public MongoCursor
MongoCursor::maxTimeMS(int $ms):public MongoCursor
MongoCursor::next(void):public array
MongoCursor::partial([bool $okay = TRUE]):public MongoCursor
MongoCursor::reset(void):public void
MongoCursor::rewind(void):public void
MongoCursor::setFlag(int $flag [, bool $set = TRUE]):public MongoCursor
MongoCursor::setReadPreference(string $read_preference [, array $tags]):public MongoCursor
MongoCursor::skip(int $num):public MongoCursor
MongoCursor::slaveOkay([bool $okay = TRUE]):public MongoCursor
MongoCursor::snapshot(void):public MongoCursor
MongoCursor::sort(array $fields):public MongoCursor
MongoCursor::tailable([bool $tail = TRUE]):public MongoCursor
MongoCursor::timeout(int $ms):public MongoCursor
MongoCursor::valid(void):public bool
MongoCursorException::getHost(void):public string
MongoCursorInterface::batchSize(int $batchSize):abstract public MongoCursorInterface
MongoCursorInterface::dead(void):abstract public bool
MongoCursorInterface::getReadPreference(void):abstract public array
MongoCursorInterface::info(void):abstract public array
MongoCursorInterface::setReadPreference(string $read_preference [, array $tags]):abstract public MongoCursorInterface
MongoCursorInterface::timeout(int $ms):abstract public MongoCursorInterface
MongoDate::__construct([int $sec = time() [, int $usec = 0]]):public
MongoDate::toDateTime(void):public DateTime
MongoDate::__toString(void):public string
MongoDB\BSON\Binary::__construct(string $data, int $type):final public
MongoDB\BSON\Binary::getData(void):final public string
MongoDB\BSON\Binary::getType(void):final public int
MongoDB\BSON\Binary::jsonSerialize(void):final public mixed
MongoDB\BSON\Binary::serialize(void):final public string
MongoDB\BSON\Binary::__toString(void):final public string
MongoDB\BSON\Binary::unserialize(string $serialized):final public void
MongoDB\BSON\BinaryInterface::getData(void):abstract public string
MongoDB\BSON\BinaryInterface::getType(void):abstract public int
MongoDB\BSON\BinaryInterface::__toString(void):abstract public string
MongoDB\BSON\DBPointer::__construct(void):final private
MongoDB\BSON\DBPointer::jsonSerialize(void):final public mixed
MongoDB\BSON\DBPointer::serialize(void):final public string
MongoDB\BSON\DBPointer::__toString(void):final public string
MongoDB\BSON\DBPointer::unserialize(string $serialized):final public void
MongoDB\BSON\Decimal128::__construct([string $value]):final public
MongoDB\BSON\Decimal128::jsonSerialize(void):final public mixed
MongoDB\BSON\Decimal128::serialize(void):final public string
MongoDB\BSON\Decimal128::__toString(void):final public string
MongoDB\BSON\Decimal128::unserialize(string $serialized):final public void
MongoDB\BSON\Decimal128Interface::__toString(void):abstract public string
MongoDB\BSON\Int64::__construct(void):final private
MongoDB\BSON\Int64::jsonSerialize(void):final public mixed
MongoDB\BSON\Int64::serialize(void):final public string
MongoDB\BSON\Int64::__toString(void):final public string
MongoDB\BSON\Int64::unserialize(string $serialized):final public void
MongoDB\BSON\Javascript::__construct(string $code [, array|object $scope]):final public
MongoDB\BSON\Javascript::getCode(void):final public string
MongoDB\BSON\Javascript::getScope(void):final public object|null
MongoDB\BSON\Javascript::jsonSerialize(void):final public mixed
MongoDB\BSON\Javascript::serialize(void):final public string
MongoDB\BSON\Javascript::__toString(void):final public string
MongoDB\BSON\Javascript::unserialize(string $serialized):final public void
MongoDB\BSON\JavascriptInterface::getCode(void):abstract public string
MongoDB\BSON\JavascriptInterface::getScope(void):abstract public object|null
MongoDB\BSON\JavascriptInterface::__toString(void):abstract public string
MongoDB\BSON\MaxKey::__construct(void):final public
MongoDB\BSON\MaxKey::jsonSerialize(void):final public mixed
MongoDB\BSON\MaxKey::serialize(void):final public string
MongoDB\BSON\MaxKey::unserialize(string $serialized):final public void
MongoDB\BSON\MinKey::__construct(void):final public
MongoDB\BSON\MinKey::jsonSerialize(void):final public mixed
MongoDB\BSON\MinKey::serialize(void):final public string
MongoDB\BSON\MinKey::unserialize(string $serialized):final public void
MongoDB\BSON\ObjectId::__construct([string $id]):final public
MongoDB\BSON\ObjectId::getTimestamp(void):final public int
MongoDB\BSON\ObjectId::jsonSerialize(void):final public mixed
MongoDB\BSON\ObjectId::serialize(void):final public string
MongoDB\BSON\ObjectId::__toString(void):final public string
MongoDB\BSON\ObjectId::unserialize(string $serialized):final public void
MongoDB\BSON\ObjectIdInterface::getTimestamp(void):abstract public int
MongoDB\BSON\ObjectIdInterface::__toString(void):abstract public string
MongoDB\BSON\Regex::__construct(string $pattern [, string $flags = ""]):final public
MongoDB\BSON\Regex::getFlags(void):final public string
MongoDB\BSON\Regex::getPattern(void):final public string
MongoDB\BSON\Regex::jsonSerialize(void):final public mixed
MongoDB\BSON\Regex::serialize(void):final public string
MongoDB\BSON\Regex::__toString(void):final public string
MongoDB\BSON\Regex::unserialize(string $serialized):final public void
MongoDB\BSON\RegexInterface::getFlags(void):abstract public string
MongoDB\BSON\RegexInterface::getPattern(void):abstract public string
MongoDB\BSON\RegexInterface::__toString(void):abstract public string
MongoDB\BSON\Serializable::bsonSerialize(void):abstract public array|object
MongoDB\BSON\Symbol::__construct(void):final private
MongoDB\BSON\Symbol::jsonSerialize(void):final public mixed
MongoDB\BSON\Symbol::serialize(void):final public string
MongoDB\BSON\Symbol::__toString(void):final public string
MongoDB\BSON\Symbol::unserialize(string $serialized):final public void
MongoDB\BSON\Timestamp::__construct(int $increment, int $timestamp):final public
MongoDB\BSON\Timestamp::getIncrement(void):final public int
MongoDB\BSON\Timestamp::getTimestamp(void):final public int
MongoDB\BSON\Timestamp::jsonSerialize(void):final public mixed
MongoDB\BSON\Timestamp::serialize(void):final public string
MongoDB\BSON\Timestamp::__toString(void):final public string
MongoDB\BSON\Timestamp::unserialize(string $serialized):final public void
MongoDB\BSON\TimestampInterface::getIncrement(void):abstract public int
MongoDB\BSON\TimestampInterface::getTimestamp(void):abstract public int
MongoDB\BSON\TimestampInterface::__toString(void):abstract public string
MongoDB\BSON\Undefined::__construct(void):final private
MongoDB\BSON\Undefined::jsonSerialize(void):final public mixed
MongoDB\BSON\Undefined::serialize(void):final public string
MongoDB\BSON\Undefined::__toString(void):final public string
MongoDB\BSON\Undefined::unserialize(string $serialized):final public void
MongoDB\BSON\Unserializable::bsonUnserialize(array $data):abstract public void
MongoDB\BSON\UTCDateTime::__construct([integer|float|string|DateTimeInterface $milliseconds = NULL]):final public
MongoDB\BSON\UTCDateTime::jsonSerialize(void):final public mixed
MongoDB\BSON\UTCDateTime::serialize(void):final public string
MongoDB\BSON\UTCDateTime::toDateTime(void):final public DateTime
MongoDB\BSON\UTCDateTime::__toString(void):final public string
MongoDB\BSON\UTCDateTime::unserialize(string $serialized):final public void
MongoDB\BSON\UTCDateTimeInterface::toDateTime(void):abstract public DateTime
MongoDB\BSON\UTCDateTimeInterface::__toString(void):abstract public string
MongoDB\Driver\BulkWrite::__construct([array $options]):public
MongoDB\Driver\BulkWrite::count(void):public int
MongoDB\Driver\BulkWrite::delete(array|object $filter [, array $deleteOptions]):public void
MongoDB\Driver\BulkWrite::insert(array|object $document):public mixed
MongoDB\Driver\BulkWrite::update(array|object $filter, array|object $newObj [, array $updateOptions]):public void
MongoDB\Driver\Command::__construct(array|object $document [, array $commandOptions]):final public
MongoDB\Driver\Exception\CommandException::getResultDocument(void):final public object
MongoDB\Driver\Cursor::__construct(void):final private
MongoDB\Driver\Cursor::getId(void):final public MongoDB\Driver\CursorId
MongoDB\Driver\Cursor::getServer(void):final public MongoDB\Driver\Server
MongoDB\Driver\Cursor::isDead(void):final public bool
MongoDB\Driver\Cursor::setTypeMap(array $typemap):final public void
MongoDB\Driver\Cursor::toArray(void):final public array
MongoDB\Driver\CursorId::__construct(void):final private
MongoDB\Driver\CursorId::__toString(void):final public string
MongoDB\Driver\Manager::__construct([string $uri = "mongodb://127.0.0.1/" [, array $uriOptions = array() [, array $driverOptions = array()]]]):final public
MongoDB\Driver\Manager::executeBulkWrite(string $namespace, MongoDB\Driver\BulkWrite $bulk [, array $options = array()]):final public MongoDB\Driver\WriteResult
MongoDB\Driver\Manager::executeCommand(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
MongoDB\Driver\Manager::executeQuery(string $namespace, MongoDB\Driver\Query $query [, array $options = array()]):final public MongoDB\Driver\Cursor
MongoDB\Driver\Manager::executeReadCommand(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
MongoDB\Driver\Manager::executeReadWriteCommand(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
MongoDB\Driver\Manager::executeWriteCommand(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
MongoDB\Driver\Manager::getReadConcern(void):final public MongoDB\Driver\ReadConcern
MongoDB\Driver\Manager::getReadPreference(void):final public MongoDB\Driver\ReadPreference
MongoDB\Driver\Manager::getServers(void):final public array
MongoDB\Driver\Manager::getWriteConcern(void):final public MongoDB\Driver\WriteConcern
MongoDB\Driver\Manager::selectServer(MongoDB\Driver\ReadPreference $readPreference):final public MongoDB\Driver\Server
MongoDB\Driver\Manager::startSession([array $options]):final public MongoDB\Driver\Session
MongoDB\Driver\Monitoring\CommandFailedEvent::getCommandName(void):final public string
MongoDB\Driver\Monitoring\CommandFailedEvent::getDurationMicros(void):final public int
MongoDB\Driver\Monitoring\CommandFailedEvent::getError(void):final public Exception
MongoDB\Driver\Monitoring\CommandFailedEvent::getOperationId(void):final public string
MongoDB\Driver\Monitoring\CommandFailedEvent::getReply(void):final public object
MongoDB\Driver\Monitoring\CommandFailedEvent::getRequestId(void):final public string
MongoDB\Driver\Monitoring\CommandFailedEvent::getServer(void):final public MongoDB\Driver\Server
MongoDB\Driver\Monitoring\CommandStartedEvent::getCommand(void):final public object
MongoDB\Driver\Monitoring\CommandStartedEvent::getCommandName(void):final public string
MongoDB\Driver\Monitoring\CommandStartedEvent::getDatabaseName(void):final public string
MongoDB\Driver\Monitoring\CommandStartedEvent::getOperationId(void):final public string
MongoDB\Driver\Monitoring\CommandStartedEvent::getRequestId(void):final public string
MongoDB\Driver\Monitoring\CommandStartedEvent::getServer(void):final public MongoDB\Driver\Server
MongoDB\Driver\Monitoring\CommandSubscriber::commandFailed(MongoDB\Driver\Monitoring\CommandFailedEvent $event):abstract public void
MongoDB\Driver\Monitoring\CommandSubscriber::commandStarted(MongoDB\Driver\Monitoring\CommandStartedEvent $event):abstract public void
MongoDB\Driver\Monitoring\CommandSubscriber::commandSucceeded(MongoDB\Driver\Monitoring\CommandSucceededEvent $event):abstract public void
MongoDB\Driver\Monitoring\CommandSucceededEvent::getCommandName(void):final public string
MongoDB\Driver\Monitoring\CommandSucceededEvent::getDurationMicros(void):final public int
MongoDB\Driver\Monitoring\CommandSucceededEvent::getOperationId(void):final public string
MongoDB\Driver\Monitoring\CommandSucceededEvent::getReply(void):final public object
MongoDB\Driver\Monitoring\CommandSucceededEvent::getRequestId(void):final public string
MongoDB\Driver\Monitoring\CommandSucceededEvent::getServer(void):final public MongoDB\Driver\Server
MongoDB\Driver\Query::__construct(array|object $filter [, array $queryOptions]):final public
MongoDB\Driver\ReadConcern::bsonSerialize(void):final public object
MongoDB\Driver\ReadConcern::__construct([string $level]):final public
MongoDB\Driver\ReadConcern::getLevel(void):final public string|null
MongoDB\Driver\ReadConcern::isDefault(void):final public bool
MongoDB\Driver\ReadPreference::bsonSerialize(void):final public object
MongoDB\Driver\ReadPreference::__construct(string|integer $mode [, array $tagSets = NULL [, array $options = array()]]):final public
MongoDB\Driver\ReadPreference::getMaxStalenessSeconds(void):final public int
MongoDB\Driver\ReadPreference::getMode(void):final public int
MongoDB\Driver\ReadPreference::getTagSets(void):final public array
MongoDB\Driver\Exception\RuntimeException::hasErrorLabel(string $errorLabel):final public bool
MongoDB\Driver\Server::__construct(void):final private
MongoDB\Driver\Server::executeBulkWrite(string $namespace, MongoDB\Driver\BulkWrite $bulk [, array $options = array()]):final public MongoDB\Driver\WriteResult
MongoDB\Driver\Server::executeCommand(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
MongoDB\Driver\Server::executeQuery(string $namespace, MongoDB\Driver\Query $query [, array $options = array()]):final public MongoDB\Driver\Cursor
MongoDB\Driver\Server::executeReadCommand(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
MongoDB\Driver\Server::executeReadWriteCommand(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
MongoDB\Driver\Server::executeWriteCommand(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
MongoDB\Driver\Server::getHost(void):final public string
MongoDB\Driver\Server::getInfo(void):final public array
MongoDB\Driver\Server::getLatency(void):final public string
MongoDB\Driver\Server::getPort(void):final public int
MongoDB\Driver\Server::getTags(void):final public array
MongoDB\Driver\Server::getType(void):final public int
MongoDB\Driver\Server::isArbiter(void):final public bool
MongoDB\Driver\Server::isHidden(void):final public bool
MongoDB\Driver\Server::isPassive(void):final public bool
MongoDB\Driver\Server::isPrimary(void):final public bool
MongoDB\Driver\Server::isSecondary(void):final public bool
MongoDB\Driver\Session::abortTransaction(void):final public void
MongoDB\Driver\Session::advanceClusterTime(array|object $clusterTime):final public void
MongoDB\Driver\Session::advanceOperationTime(MongoDB\BSON\TimestampInterface $operationTime):final public void
MongoDB\Driver\Session::commitTransaction(void):final public void
MongoDB\Driver\Session::__construct(void):final private
MongoDB\Driver\Session::endSession(void):final public void
MongoDB\Driver\Session::getClusterTime(void):final public object|null
MongoDB\Driver\Session::getLogicalSessionId(void):final public object
MongoDB\Driver\Session::getOperationTime(void):final public MongoDB\BSON\Timestamp|null
MongoDB\Driver\Session::startTransaction(array|object $options):final public void
MongoDB\Driver\WriteConcern::bsonSerialize(void):final public object
MongoDB\Driver\WriteConcern::__construct(string|integer $w [, int $wtimeout [, bool $journal]]):final public
MongoDB\Driver\WriteConcern::getJournal(void):final public boolean|null
MongoDB\Driver\WriteConcern::getW(void):final public string|integer|null
MongoDB\Driver\WriteConcern::getWtimeout(void):final public int
MongoDB\Driver\WriteConcern::isDefault(void):final public bool
MongoDB\Driver\WriteConcernError::getCode(void):final public int
MongoDB\Driver\WriteConcernError::getInfo(void):final public mixed
MongoDB\Driver\WriteConcernError::getMessage(void):final public string
MongoDB\Driver\WriteError::getCode(void):final public int
MongoDB\Driver\WriteError::getIndex(void):final public int
MongoDB\Driver\WriteError::getInfo(void):final public mixed
MongoDB\Driver\WriteError::getMessage(void):final public string
MongoDB\Driver\Exception\WriteException::getWriteResult(void):final public MongoDB\Driver\WriteResult
MongoDB\Driver\WriteResult::getDeletedCount(void):final public integer|null
MongoDB\Driver\WriteResult::getInsertedCount(void):final public integer|null
MongoDB\Driver\WriteResult::getMatchedCount(void):final public integer|null
MongoDB\Driver\WriteResult::getModifiedCount(void):final public integer|null
MongoDB\Driver\WriteResult::getServer(void):final public MongoDB\Driver\Server
MongoDB\Driver\WriteResult::getUpsertedCount(void):final public integer|null
MongoDB\Driver\WriteResult::getUpsertedIds(void):final public array
MongoDB\Driver\WriteResult::getWriteConcernError(void):final public MongoDB\Driver\WriteConcernError|null
MongoDB\Driver\WriteResult::getWriteErrors(void):final public array
MongoDB\Driver\WriteResult::isAcknowledged(void):final public bool
MongoDB::__toString(void):public string
MongoDB::authenticate(string $username, string $password):public array
MongoDB::command(array $command [, array $options = array() [, string &$hash]]):public array
MongoDB::__construct(MongoClient $conn, string $name):public
MongoDB::createCollection(string $name [, array $options]):public MongoCollection
MongoDB::createDBRef(string $collection, mixed $document_or_id):public array
MongoDB::drop(void):public array
MongoDB::dropCollection(mixed $coll):public array
MongoDB::execute(mixed $code [, array $args = array()]):public array
MongoDB::forceError(void):public bool
MongoDB::__get(string $name):public MongoCollection
MongoDB::getCollectionInfo([array $options = array()]):public array
MongoDB::getCollectionNames([array $options = array()]):public array
MongoDB::getDBRef(array $ref):public array
MongoDB::getGridFS([string $prefix = "fs"]):public MongoGridFS
MongoDB::getProfilingLevel(void):public int
MongoDB::getReadPreference(void):public array
MongoDB::getSlaveOkay(void):public bool
MongoDB::getWriteConcern(void):public array
MongoDB::lastError(void):public array
MongoDB::listCollections([array $options = array()]):public array
MongoDB::prevError(void):public array
MongoDB::repair([bool $preserve_cloned_files = FALSE [, bool $backup_original_files = FALSE]]):public array
MongoDB::resetError(void):public array
MongoDB::selectCollection(string $name):public MongoCollection
MongoDB::setProfilingLevel(int $level):public int
MongoDB::setReadPreference(string $read_preference [, array $tags]):public bool
MongoDB::setSlaveOkay([bool $ok = TRUE]):public bool
MongoDB::setWriteConcern(mixed $w [, int $wtimeout]):public bool
MongoDBRef::create(string $collection, mixed $id [, string $database]):public static array
MongoDBRef::get(MongoDB $db, array $ref):public static array
MongoDBRef::isRef(mixed $ref):public static bool
MongoDeleteBatch::__construct(MongoCollection $collection [, array $write_options]):public
MongoGridFS::__construct(MongoDB $db [, string $prefix = "fs" [, mixed $chunks = "fs"]]):public
MongoGridFS::delete(mixed $id):public bool|array
MongoGridFS::drop(void):public array
MongoGridFS::find([array $query = array() [, array $fields = array()]]):public MongoGridFSCursor
MongoGridFS::findOne([mixed $query = array() [, mixed $fields = array()]]):public MongoGridFSFile
MongoGridFS::get(mixed $id):public MongoGridFSFile
MongoGridFS::put(string $filename [, array $metadata = array() [, array $options = array()]]):public mixed
MongoGridFS::remove([array $criteria = array() [, array $options = array()]]):public bool|array
MongoGridFS::storeBytes(string $bytes [, array $metadata = array() [, array $options = array()]]):public mixed
MongoGridFS::storeFile(string|resource $filename [, array $metadata = array() [, array $options = array()]]):public mixed
MongoGridFS::storeUpload(string $name [, array $metadata]):public mixed
MongoGridFSCursor::__construct(MongoGridFS $gridfs, resource $connection, string $ns, array $query, array $fields):public
MongoGridFSCursor::current(void):public MongoGridFSFile
MongoGridFSCursor::getNext(void):public MongoGridFSFile
MongoGridFSCursor::key(void):public string
MongoGridfsFile::__construct(MongoGridFS $gridfs, array $file):public
MongoGridFSFile::getBytes(void):public string
MongoGridFSFile::getFilename(void):public string
MongoGridFSFile::getResource(void):public resource
MongoGridFSFile::getSize(void):public int
MongoGridFSFile::write([string $filename = NULL]):public int
MongoId::__construct([string|MongoId $id = NULL]):public
MongoId::getHostname(void):public static string
MongoId::getInc(void):public int
MongoId::getPID(void):public int
MongoId::getTimestamp(void):public int
MongoId::isValid(mixed $value):public static bool
MongoId::__set_state(array $props):public static MongoId
MongoId::__toString(void):public string
MongoInsertBatch::__construct(MongoCollection $collection [, array $write_options]):public
MongoInt32::__construct(string $value):public
MongoInt32::__toString(void):public string
MongoInt64::__construct(string $value):public
MongoInt64::__toString(void):public string
MongoLog::getCallback(void):public static callable
MongoLog::getLevel(void):public static int
MongoLog::getModule(void):public static int
MongoLog::setCallback(callable $log_function):public static void
MongoLog::setLevel(int $level):public static void
MongoLog::setModule(int $module):public static void
MongoPool::getSize(void):public static int
MongoPool::info(void):public array
MongoPool::setSize(int $size):public static bool
MongoRegex::__construct(string $regex):public
MongoRegex::__toString(void):public string
MongoResultException::getDocument(void):public array
MongoTimestamp::__construct([int $sec = time() [, int $inc]]):public
MongoTimestamp::__toString(void):public string
MongoUpdateBatch::__construct(MongoCollection $collection [, array $write_options]):public
MongoWriteBatch::add(array $item):public bool
MongoWriteBatch::__construct(MongoCollection $collection [, string $batch_type [, array $write_options]]):protected
MongoWriteBatch::execute(array $write_options):final public array
MongoWriteConcernException::getDocument(void):public array
KTaglib_MPEG_File::__construct(string $filename):public
KTaglib_MPEG_File::getAudioProperties(void):public KTaglib_MPEG_File
KTaglib_MPEG_File::getID3v1Tag([bool $create = FALSE]):public KTaglib_ID3v1_Tag
KTaglib_MPEG_File::getID3v2Tag([bool $create = FALSE]):public KTaglib_ID3v2_Tag
MultipleIterator::attachIterator(Iterator $iterator [, string $infos]):public void
MultipleIterator::__construct([int $flags = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC]):public
MultipleIterator::containsIterator(Iterator $iterator):public bool
MultipleIterator::countIterators(void):public int
MultipleIterator::current(void):public array
MultipleIterator::detachIterator(Iterator $iterator):public void
MultipleIterator::getFlags(void):public int
MultipleIterator::key(void):public array
MultipleIterator::next(void):public void
MultipleIterator::rewind(void):public void
MultipleIterator::setFlags(int $flags):public void
MultipleIterator::valid(void):public bool
Mutex::create([bool $lock]):final public static int
Mutex::destroy(int $mutex):final public static bool
Mutex::lock(int $mutex):final public static bool
Mutex::trylock(int $mutex):final public static bool
Mutex::unlock(int $mutex [, bool $destroy]):final public static bool
BaseResult::getWarnings(void):abstract public array mysql_xdevapi\
BaseResult::getWarningsCount(void):abstract public integer mysql_xdevapi\
Collection::add(mixed $document):public mysql_xdevapi\CollectionAdd mysql_xdevapi\
Collection::addOrReplaceOne(string $id, string $doc):public mysql_xdevapi\Result mysql_xdevapi\
Collection::__construct(void):private mysql_xdevapi\
Collection::count(void):public integer mysql_xdevapi\
Collection::createIndex(string $index_name, string $index_desc_json):public void mysql_xdevapi\
Collection::dropIndex(string $index_name):public bool mysql_xdevapi\
Collection::existsInDatabase(void):public bool mysql_xdevapi\
Collection::find([string $search_condition]):public mysql_xdevapi\CollectionFind mysql_xdevapi\
Collection::getName(void):public string mysql_xdevapi\
Collection::getOne(string $id):public Document mysql_xdevapi\
Collection::getSchema(void):public Schema Object mysql_xdevapi\
Collection::getSession(void):public Session mysql_xdevapi\
Collection::modify(string $search_condition):public mysql_xdevapi\CollectionModify mysql_xdevapi\
Collection::remove(string $search_condition):public mysql_xdevapi\CollectionRemove mysql_xdevapi\
Collection::removeOne(string $id):public mysql_xdevapi\Result mysql_xdevapi\
Collection::replaceOne(string $id, string $doc):public mysql_xdevapi\Result mysql_xdevapi\
CollectionAdd::__construct(void):private mysql_xdevapi\
CollectionAdd::execute(void):public mysql_xdevapi\Result mysql_xdevapi\
CollectionFind::bind(array $placeholder_values):public mysql_xdevapi\CollectionFind mysql_xdevapi\
CollectionFind::__construct(void):private mysql_xdevapi\
CollectionFind::execute(void):public mysql_xdevapi\DocResult mysql_xdevapi\
CollectionFind::fields(string $projection):public mysql_xdevapi\CollectionFind mysql_xdevapi\
CollectionFind::groupBy(string $sort_expr):public mysql_xdevapi\CollectionFind mysql_xdevapi\
CollectionFind::having(string $sort_expr):public mysql_xdevapi\CollectionFind mysql_xdevapi\
CollectionFind::limit(integer $rows):public mysql_xdevapi\CollectionFind mysql_xdevapi\
CollectionFind::lockExclusive([integer $lock_waiting_option]):public mysql_xdevapi\CollectionFind mysql_xdevapi\
CollectionFind::lockShared([integer $lock_waiting_option]):public mysql_xdevapi\CollectionFind mysql_xdevapi\
CollectionFind::offset(integer $position):public mysql_xdevapi\CollectionFind mysql_xdevapi\
CollectionFind::sort(string $sort_expr):public mysql_xdevapi\CollectionFind mysql_xdevapi\
CollectionModify::arrayAppend(string $collection_field, string $expression_or_literal):public mysql_xdevapi\CollectionModify mysql_xdevapi\
CollectionModify::arrayInsert(string $collection_field, string $expression_or_literal):public mysql_xdevapi\CollectionModify mysql_xdevapi\
CollectionModify::bind(array $placeholder_values):public mysql_xdevapi\CollectionModify mysql_xdevapi\
CollectionModify::__construct(void):private mysql_xdevapi\
CollectionModify::execute(void):public mysql_xdevapi\Result mysql_xdevapi\
CollectionModify::limit(integer $rows):public mysql_xdevapi\CollectionModify mysql_xdevapi\
CollectionModify::patch(string $document):public mysql_xdevapi\CollectionModify mysql_xdevapi\
CollectionModify::replace(string $collection_field, string $expression_or_literal):public mysql_xdevapi\CollectionModify mysql_xdevapi\
CollectionModify::set(string $collection_field, string $expression_or_literal):public mysql_xdevapi\CollectionModify mysql_xdevapi\
CollectionModify::skip(integer $position):public mysql_xdevapi\CollectionModify mysql_xdevapi\
CollectionModify::sort(string $sort_expr):public mysql_xdevapi\CollectionModify mysql_xdevapi\
CollectionModify::unset(array $fields):public mysql_xdevapi\CollectionModify mysql_xdevapi\
CollectionRemove::bind(array $placeholder_values):public mysql_xdevapi\CollectionRemove mysql_xdevapi\
CollectionRemove::__construct(void):private mysql_xdevapi\
CollectionRemove::execute(void):public mysql_xdevapi\Result mysql_xdevapi\
CollectionRemove::limit(integer $rows):public mysql_xdevapi\CollectionRemove mysql_xdevapi\
CollectionRemove::sort(string $sort_expr):public mysql_xdevapi\CollectionRemove mysql_xdevapi\
ColumnResult::__construct(void):private mysql_xdevapi\
ColumnResult::getCharacterSetName(void):public string mysql_xdevapi\
ColumnResult::getCollationName(void):public string mysql_xdevapi\
ColumnResult::getColumnLabel(void):public string mysql_xdevapi\
ColumnResult::getColumnName(void):public string mysql_xdevapi\
ColumnResult::getFractionalDigits(void):public integer mysql_xdevapi\
ColumnResult::getLength(void):public integer mysql_xdevapi\
ColumnResult::getSchemaName(void):public string mysql_xdevapi\
ColumnResult::getTableLabel(void):public string mysql_xdevapi\
ColumnResult::getTableName(void):public string mysql_xdevapi\
ColumnResult::getType(void):public integer mysql_xdevapi\
ColumnResult::isNumberSigned(void):public integer mysql_xdevapi\
ColumnResult::isPadded(void):public integer mysql_xdevapi\
CrudOperationBindable::bind(array $placeholder_values):abstract public mysql_xdevapi\CrudOperationBindable mysql_xdevapi\
CrudOperationLimitable::limit(integer $rows):abstract public mysql_xdevapi\CrudOperationLimitable mysql_xdevapi\
CrudOperationSkippable::skip(integer $skip):abstract public mysql_xdevapi\CrudOperationSkippable mysql_xdevapi\
CrudOperationSortable::sort(string $sort_expr):abstract public mysql_xdevapi\CrudOperationSortable mysql_xdevapi\
DatabaseObject::existsInDatabase(void):abstract public bool mysql_xdevapi\
DatabaseObject::getName(void):abstract public string mysql_xdevapi\
DatabaseObject::getSession(void):abstract public mysql_xdevapi\Session mysql_xdevapi\
DocResult::__construct(void):private mysql_xdevapi\
DocResult::fetchAll(void):public Array mysql_xdevapi\
DocResult::fetchOne(void):public Object mysql_xdevapi\
DocResult::getWarnings(void):public Array mysql_xdevapi\
DocResult::getWarningsCount(void):public integer mysql_xdevapi\
Driver::__construct(void):private mysql_xdevapi\
Executable::execute(void):abstract public mysql_xdevapi\Result mysql_xdevapi\
ExecutionStatus::__construct(void):private mysql_xdevapi\
Expression::__construct(string $expression):public mysql_xdevapi\
FieldMetadata::__construct(void):private mysql_xdevapi\
Result::__construct(void):private mysql_xdevapi\
Result::getAutoIncrementValue(void):public int mysql_xdevapi\
Result::getGeneratedIds(void):public ArrayOfInt mysql_xdevapi\
Result::getWarnings(void):public array mysql_xdevapi\
Result::getWarningsCount(void):public integer mysql_xdevapi\
RowResult::__construct(void):private mysql_xdevapi\
RowResult::fetchAll(void):public array mysql_xdevapi\
RowResult::fetchOne(void):public object mysql_xdevapi\
RowResult::getColumnCount(void):public integer mysql_xdevapi\
RowResult::getColumnNames(void):public array mysql_xdevapi\
RowResult::getColumns(void):public array mysql_xdevapi\
RowResult::getWarnings(void):public array mysql_xdevapi\
RowResult::getWarningsCount(void):public integer mysql_xdevapi\
Schema::__construct(void):private mysql_xdevapi\
Schema::createCollection(string $name):public mysql_xdevapi\Collection mysql_xdevapi\
Schema::dropCollection(string $collection_name):public bool mysql_xdevapi\
Schema::existsInDatabase(void):public bool mysql_xdevapi\
Schema::getCollection(string $name):public mysql_xdevapi\Collection mysql_xdevapi\
Schema::getCollectionAsTable(string $name):public mysql_xdevapi\Table mysql_xdevapi\
Schema::getCollections(void):public array mysql_xdevapi\
Schema::getName(void):public string mysql_xdevapi\
Schema::getSession(void):public mysql_xdevapi\Session mysql_xdevapi\
Schema::getTable(string $name):public mysql_xdevapi\Table mysql_xdevapi\
Schema::getTables(void):public array mysql_xdevapi\
SchemaObject::getSchema(void):abstract mysql_xdevapi\Schema mysql_xdevapi\
Session::close(void):public bool mysql_xdevapi\
Session::commit(void):public Object mysql_xdevapi\
Session::__construct(void):private mysql_xdevapi\
Session::createSchema(string $schema_name):public mysql_xdevapi\Schema mysql_xdevapi\
Session::dropSchema(string $schema_name):public bool mysql_xdevapi\
Session::executeSql(string $statement):public Object mysql_xdevapi\
Session::generateUUID(void):public string mysql_xdevapi\
Session::getClientId(void):public integer mysql_xdevapi\
Session::getSchema(string $schema_name):public mysql_xdevapi\Schema mysql_xdevapi\
Session::getSchemas(void):public array mysql_xdevapi\
Session::getServerVersion(void):public integer mysql_xdevapi\
Session::killClient(integer $client_id):public object mysql_xdevapi\
Session::listClients(void):public array mysql_xdevapi\
Session::quoteName(string $name):public string mysql_xdevapi\
Session::releaseSavepoint(string $name):public void mysql_xdevapi\
Session::rollback(void):public void mysql_xdevapi\
Session::rollbackTo(string $name):public void mysql_xdevapi\
Session::setSavepoint([string $name]):public string mysql_xdevapi\
Session::sql(string $query):public mysql_xdevapi\SqlStatement mysql_xdevapi\
Session::startTransaction(void):public void mysql_xdevapi\
SqlStatement::bind(string $param):public mysql_xdevapi\SqlStatement mysql_xdevapi\
SqlStatement::__construct(void):private mysql_xdevapi\
SqlStatement::execute(void):public mysql_xdevapi\Result mysql_xdevapi\
SqlStatement::getNextResult(void):public mysql_xdevapi\Result mysql_xdevapi\
SqlStatement::getResult(void):public mysql_xdevapi\Result mysql_xdevapi\
SqlStatement::hasMoreResults(void):public bool mysql_xdevapi\
SqlStatementResult::__construct(void):private mysql_xdevapi\
SqlStatementResult::fetchAll(void):public array mysql_xdevapi\
SqlStatementResult::fetchOne(void):public object mysql_xdevapi\
SqlStatementResult::getAffectedItemsCount(void):public integer mysql_xdevapi\
SqlStatementResult::getColumnCount(void):public integer mysql_xdevapi\
SqlStatementResult::getColumnNames(void):public array mysql_xdevapi\
SqlStatementResult::getColumns(void):public Array mysql_xdevapi\
SqlStatementResult::getGeneratedIds(void):public array mysql_xdevapi\
SqlStatementResult::getLastInsertId(void):public String mysql_xdevapi\
SqlStatementResult::getWarningsCount(void):int
SqlStatementResult::getWarnings(void):public array mysql_xdevapi\
SqlStatementResult::hasData(void):public bool mysql_xdevapi\
SqlStatementResult::nextResult(void):public mysql_xdevapi\Result mysql_xdevapi\
Statement::__construct(void):private mysql_xdevapi\
Statement::getNextResult(void):public mysql_xdevapi\Result mysql_xdevapi\
Statement::getResult(void):public mysql_xdevapi\Result mysql_xdevapi\
Statement::hasMoreResults(void):public bool mysql_xdevapi\
Table::__construct(void):private mysql_xdevapi\
Table::count(void):public integer mysql_xdevapi\
Table::delete(void):public mysql_xdevapi\TableDelete mysql_xdevapi\
Table::existsInDatabase(void):public bool mysql_xdevapi\
Table::getName(void):public string mysql_xdevapi\
Table::getSchema(void):public mysql_xdevapi\Schema mysql_xdevapi\
Table::getSession(void):public mysql_xdevapi\Session mysql_xdevapi\
Table::insert(mixed $columns [, mixed $...]):public mysql_xdevapi\TableInsert mysql_xdevapi\
Table::isView(void):public bool mysql_xdevapi\
Table::select(mixed $columns [, mixed $...]):public mysql_xdevapi\TableSelect mysql_xdevapi\
Table::update(void):public mysql_xdevapi\TableUpdate mysql_xdevapi\
TableDelete::bind(array $placeholder_values):public mysql_xdevapi\TableDelete mysql_xdevapi\
TableDelete::__construct(void):private mysql_xdevapi\
TableDelete::execute(void):public mysql_xdevapi\Result mysql_xdevapi\
TableDelete::limit(integer $rows):public mysql_xdevapi\TableDelete mysql_xdevapi\
TableDelete::offset(integer $position):public mysql_xdevapi\TableDelete mysql_xdevapi\
TableDelete::orderby(string $orderby_expr):public mysql_xdevapi\TableDelete mysql_xdevapi\
TableDelete::where(string $where_expr):public mysql_xdevapi\TableDelete mysql_xdevapi\
TableInsert::__construct(void):private mysql_xdevapi\
TableInsert::execute(void):public mysql_xdevapi\Result mysql_xdevapi\
TableInsert::values(array $row_values):public mysql_xdevapi\TableInsert mysql_xdevapi\
TableSelect::bind(array $placeholder_values):public mysql_xdevapi\TableSelect mysql_xdevapi\
TableSelect::__construct(void):private mysql_xdevapi\
TableSelect::execute(void):public mysql_xdevapi\RowResult mysql_xdevapi\
TableSelect::groupBy(mixed $sort_expr):public mysql_xdevapi\TableSelect mysql_xdevapi\
TableSelect::having(string $sort_expr):public mysql_xdevapi\TableSelect mysql_xdevapi\
TableSelect::limit(integer $rows):public mysql_xdevapi\TableSelect mysql_xdevapi\
TableSelect::lockExclusive([integer $lock_waiting_option]):public mysql_xdevapi\TableSelect mysql_xdevapi\
TableSelect::lockShared([integer $lock_waiting_option]):public mysql_xdevapi\TableSelect mysql_xdevapi\
TableSelect::offset(integer $position):public mysql_xdevapi\TableSelect mysql_xdevapi\
TableSelect::orderby(mixed $sort_expr [, mixed $...]):public mysql_xdevapi\TableSelect mysql_xdevapi\
TableSelect::where(string $where_expr):public mysql_xdevapi\TableSelect mysql_xdevapi\
TableUpdate::bind(array $placeholder_values):public mysql_xdevapi\TableUpdate mysql_xdevapi\
TableUpdate::__construct(void):private mysql_xdevapi\
TableUpdate::execute(void):public mysql_xdevapi\TableUpdate mysql_xdevapi\
TableUpdate::limit(integer $rows):public mysql_xdevapi\TableUpdate mysql_xdevapi\
TableUpdate::orderby(mixed $orderby_expr [, mixed $...]):public mysql_xdevapi\TableUpdate mysql_xdevapi\
TableUpdate::set(string $table_field, string $expression_or_literal):public mysql_xdevapi\TableUpdate mysql_xdevapi\
TableUpdate::where(string $where_expr):public mysql_xdevapi\TableUpdate mysql_xdevapi\
Warning::__construct(void):private mysql_xdevapi\
XSession::__construct(void):private mysql_xdevapi\
mysqli_driver::embedded_server_end(void):void
mysqli_embedded_server_end(void):void
mysqli_driver::embedded_server_start(int $start, array $arguments, array $groups):bool
mysqli_embedded_server_start(int $start, array $arguments, array $groups):bool
mysqli_driver::$report_mode(int $flags):bool
mysqli_result::$current_field(mysqli_result $result):int
mysqli_field_tell(mysqli_result $result):int
mysqli_result::data_seek(int $offset):bool
mysqli_data_seek(mysqli_result $result, int $offset):bool
mysqli_result::fetch_all([int $resulttype = MYSQLI_NUM]):mixed
mysqli_fetch_all(mysqli_result $result [, int $resulttype = MYSQLI_NUM]):mixed
mysqli_result::fetch_array([int $resulttype = MYSQLI_BOTH]):mixed
mysqli_fetch_array(mysqli_result $result [, int $resulttype = MYSQLI_BOTH]):mixed
mysqli_result::fetch_assoc(void):array
mysqli_fetch_assoc(mysqli_result $result):array
mysqli_result::fetch_field_direct(int $fieldnr):object
mysqli_fetch_field_direct(mysqli_result $result, int $fieldnr):object
mysqli_result::fetch_field(void):object
mysqli_fetch_field(mysqli_result $result):object
mysqli_result::fetch_fields(void):array
mysqli_fetch_fields(mysqli_result $result):array
mysqli_result::fetch_object([string $class_name = "stdClass" [, array $params]]):object
mysqli_fetch_object(mysqli_result $result [, string $class_name = "stdClass" [, array $params]]):object
mysqli_result::fetch_row(void):mixed
mysqli_fetch_row(mysqli_result $result):mixed
mysqli_result::$field_count(mysqli_result $result):int
mysqli_num_fields(mysqli_result $result):int
mysqli_result::field_seek(int $fieldnr):bool
mysqli_field_seek(mysqli_result $result, int $fieldnr):bool
mysqli_result::free(void):void
mysqli_result::close(void):void
mysqli_result::$lengths(mysqli_result $result):array
mysqli_fetch_lengths(mysqli_result $result):array
mysqli_result::$num_rows(mysqli_result $result):int
mysqli_num_rows(mysqli_result $result):int
mysqli_stmt::$affected_rows(mysqli_stmt $stmt):int
mysqli_stmt_affected_rows(mysqli_stmt $stmt):int
mysqli_stmt::attr_get(int $attr):int
mysqli_stmt_attr_get(mysqli_stmt $stmt, int $attr):int
mysqli_stmt::attr_set(int $attr, int $mode):bool
mysqli_stmt_attr_set(mysqli_stmt $stmt, int $attr, int $mode):bool
mysqli_stmt::bind_param(string $types, mixed &$var1 [, mixed &$...]):bool
mysqli_stmt_bind_param(mysqli_stmt $stmt, string $types, mixed &$var1 [, mixed &$...]):bool
mysqli_stmt::bind_result(mixed &$var1 [, mixed &$...]):bool
mysqli_stmt_bind_result(mysqli_stmt $stmt, mixed &$var1 [, mixed &$...]):bool
mysqli_stmt::close(void):bool
mysqli_stmt_close(mysqli_stmt $stmt):bool
mysqli_stmt::__construct(mysqli $link [, string $query])
mysqli_stmt::data_seek(int $offset):void
mysqli_stmt_data_seek(mysqli_stmt $stmt, int $offset):void
mysqli_stmt::$errno(mysqli_stmt $stmt):int
mysqli_stmt_errno(mysqli_stmt $stmt):int
mysqli_stmt::$error_list(mysqli_stmt $stmt):array
mysqli_stmt_error_list(mysqli_stmt $stmt):array
mysqli_stmt::$error(mysqli_stmt $stmt):string
mysqli_stmt_error(mysqli_stmt $stmt):string
mysqli_stmt::execute(void):bool
mysqli_stmt_execute(mysqli_stmt $stmt):bool
mysqli_stmt::fetch(void):bool
mysqli_stmt_fetch(mysqli_stmt $stmt):bool
mysqli_stmt::$field_count(mysqli_stmt $stmt):int
mysqli_stmt_field_count(mysqli_stmt $stmt):int
mysqli_stmt::free_result(void):void
mysqli_stmt_free_result(mysqli_stmt $stmt):void
mysqli_stmt::get_result(void):mysqli_result
mysqli_stmt_get_result(mysqli_stmt $stmt):mysqli_result
mysqli_stmt::get_warnings(mysqli_stmt $stmt):object
mysqli_stmt_get_warnings(mysqli_stmt $stmt):object
mysqli_stmt::$insert_id(mysqli_stmt $stmt):mixed
mysqli_stmt_insert_id(mysqli_stmt $stmt):mixed
mysqli_stmt::more_results(void):public bool
mysqli_stmt_more_results(mysql_stmt $stmt):bool
mysqli_stmt::next_result(void):public bool
mysqli_stmt_next_result(mysql_stmt $stmt):bool
mysqli_stmt::$num_rows(void):int
mysqli_stmt::num_rows(void):int
mysqli_stmt::$param_count(mysqli_stmt $stmt):int
mysqli_stmt_param_count(mysqli_stmt $stmt):int
mysqli_stmt::prepare(string $query):mixed
mysqli_stmt_prepare(mysqli_stmt $stmt, string $query):bool
mysqli_stmt::reset(void):bool
mysqli_stmt_reset(mysqli_stmt $stmt):bool
mysqli_stmt::result_metadata(void):mysqli_result
mysqli_stmt_result_metadata(mysqli_stmt $stmt):mysqli_result
mysqli_stmt::send_long_data(int $param_nr, string $data):bool
mysqli_stmt_send_long_data(mysqli_stmt $stmt, int $param_nr, string $data):bool
mysqli_stmt::$sqlstate(mysqli_stmt $stmt):string
mysqli_stmt_sqlstate(mysqli_stmt $stmt):string
mysqli_stmt::store_result(void):bool
mysqli_stmt_store_result(mysqli_stmt $stmt):bool
mysqli_warning::__construct(void):protected
mysqli_warning::next(void):public void
mysqli::$affected_rows(mysqli $link):int
mysqli_affected_rows(mysqli $link):int
mysqli::autocommit(bool $mode):bool
mysqli_autocommit(mysqli $link, bool $mode):bool
mysqli::begin_transaction([int $flags [, string $name]]):public bool
mysqli_begin_transaction(mysqli $link [, int $flags [, string $name]]):bool
mysqli::change_user(string $user, string $password, string $database):bool
mysqli_change_user(mysqli $link, string $user, string $password, string $database):bool
mysqli::character_set_name(void):string
mysqli_character_set_name(mysqli $link):string
mysqli::close(void):bool
mysqli_close(mysqli $link):bool
mysqli::commit([int $flags [, string $name]]):bool
mysqli_commit(mysqli $link [, int $flags [, string $name]]):bool
mysqli::$connect_errno(void):int
mysqli_connect_errno(void):int
mysqli::$connect_error(void):string
mysqli_connect_error(void):string
mysqli::__construct([string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket")]]]]]])
mysqli::connect([string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket")]]]]]]):void
mysqli::debug(string $message):bool
mysqli_debug(string $message):bool
mysqli::dump_debug_info(void):bool
mysqli_dump_debug_info(mysqli $link):bool
mysqli::$errno(void):int
mysqli_errno(mysqli $link):int
mysqli::$error_list(mysqli $link):array
mysqli_error_list(mysqli $link):array
mysqli::$error(void):string
mysqli_error(mysqli $link):string
mysqli::$field_count(void):int
mysqli_field_count(mysqli $link):int
mysqli::get_charset(void):object
mysqli_get_charset(mysqli $link):object
mysqli::$client_info(void):string
mysqli::get_client_info(void):string
mysqli::$client_version(void):int
mysqli_get_client_version(mysqli $link):int
mysqli::get_connection_stats(void):bool
mysqli_get_connection_stats(mysqli $link):array
mysqli::$host_info(void):string
mysqli_get_host_info(mysqli $link):string
mysqli::$protocol_version(void):int
mysqli_get_proto_info(mysqli $link):int
mysqli::$server_info(void):string
mysqli::get_server_info(void):string
mysqli::$server_version(void):int
mysqli_get_server_version(mysqli $link):int
mysqli::get_warnings(void):mysqli_warning
mysqli_get_warnings(mysqli $link):mysqli_warning
mysqli::$info(void):string
mysqli_info(mysqli $link):string
mysqli::init(void):mysqli
mysqli_init(void):mysqli
mysqli::$insert_id(void):mixed
mysqli_insert_id(mysqli $link):mixed
mysqli::kill(int $processid):bool
mysqli_kill(mysqli $link, int $processid):bool
mysqli::more_results(void):bool
mysqli_more_results(mysqli $link):bool
mysqli::multi_query(string $query):bool
mysqli_multi_query(mysqli $link, string $query):bool
mysqli::next_result(void):bool
mysqli_next_result(mysqli $link):bool
mysqli::options(int $option, mixed $value):bool
mysqli_options(mysqli $link, int $option, mixed $value):bool
mysqli::ping(void):bool
mysqli_ping(mysqli $link):bool
mysqli::poll(array &$read, array &$error, array &$reject, int $sec [, int $usec]):public static int
mysqli_poll(array &$read, array &$error, array &$reject, int $sec [, int $usec]):int
mysqli::prepare(string $query):mysqli_stmt
mysqli_prepare(mysqli $link, string $query):mysqli_stmt
mysqli::query(string $query [, int $resultmode = MYSQLI_STORE_RESULT]):mixed
mysqli_query(mysqli $link, string $query [, int $resultmode = MYSQLI_STORE_RESULT]):mixed
mysqli::real_connect([string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags]]]]]]]):bool
mysqli_real_connect(mysqli $link [, string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags]]]]]]]):bool
mysqli::real_escape_string(string $escapestr):string
mysqli::escape_string(string $escapestr):string
mysqli::real_query(string $query):bool
mysqli_real_query(mysqli $link, string $query):bool
mysqli::reap_async_query(void):public mysqli_result
mysqli_reap_async_query(mysqli $link):mysqli_result
mysqli::refresh(int $options):public bool
mysqli_refresh(resource $link, int $options):bool
mysqli::release_savepoint(string $name):public bool
mysqli_release_savepoint(mysqli $link, string $name):bool
mysqli::rollback([int $flags [, string $name]]):bool
mysqli_rollback(mysqli $link [, int $flags [, string $name]]):bool
mysqli::rpl_query_type(string $query):int
mysqli_rpl_query_type(mysqli $link, string $query):int
mysqli::savepoint(string $name):public bool
mysqli_savepoint(mysqli $link, string $name):bool
mysqli::select_db(string $dbname):bool
mysqli_select_db(mysqli $link, string $dbname):bool
mysqli::send_query(string $query):bool
mysqli_send_query(mysqli $link, string $query):bool
mysqli::set_charset(string $charset):bool
mysqli_set_charset(mysqli $link, string $charset):bool
mysqli::set_local_infile_default(void):void
mysqli_set_local_infile_default(mysqli $link):void
mysqli::set_local_infile_handler(mysqli $link, callable $read_func):bool
mysqli_set_local_infile_handler(mysqli $link, callable $read_func):bool
mysqli::$sqlstate(void):string
mysqli_sqlstate(mysqli $link):string
mysqli::ssl_set(string $key, string $cert, string $ca, string $capath, string $cipher):bool
mysqli_ssl_set(mysqli $link, string $key, string $cert, string $ca, string $capath, string $cipher):bool
mysqli::stat(void):string
mysqli_stat(mysqli $link):string
mysqli::stmt_init(void):mysqli_stmt
mysqli_stmt_init(mysqli $link):mysqli_stmt
mysqli::store_result([int $option]):mysqli_result
mysqli_store_result(mysqli $link [, int $option]):mysqli_result
mysqli::$thread_id(void):int
mysqli_thread_id(mysqli $link):int
mysqli::thread_safe(void):bool
mysqli_thread_safe(void):bool
mysqli::use_result(void):mysqli_result
mysqli_use_result(mysqli $link):mysqli_result
mysqli::$warning_count(void):int
mysqli_warning_count(mysqli $link):int
MysqlndUhConnection::changeUser(mysqlnd_connection $connection, string $user, string $password, string $database, bool $silent, int $passwd_len):public bool
MysqlndUhConnection::charsetName(mysqlnd_connection $connection):public string
MysqlndUhConnection::close(mysqlnd_connection $connection, int $close_type):public bool
MysqlndUhConnection::connect(mysqlnd_connection $connection, string $host, string $use", string $password, string $database, int $port, string $socket, int $mysql_flags):public bool
MysqlndUhConnection::__construct(void):public
MysqlndUhConnection::endPSession(mysqlnd_connection $connection):public bool
MysqlndUhConnection::escapeString(mysqlnd_connection $connection, string $escape_string):public string
MysqlndUhConnection::getAffectedRows(mysqlnd_connection $connection):public int
MysqlndUhConnection::getErrorNumber(mysqlnd_connection $connection):public int
MysqlndUhConnection::getErrorString(mysqlnd_connection $connection):public string
MysqlndUhConnection::getFieldCount(mysqlnd_connection $connection):public int
MysqlndUhConnection::getHostInformation(mysqlnd_connection $connection):public string
MysqlndUhConnection::getLastInsertId(mysqlnd_connection $connection):public int
MysqlndUhConnection::getLastMessage(mysqlnd_connection $connection):public void
MysqlndUhConnection::getProtocolInformation(mysqlnd_connection $connection):public string
MysqlndUhConnection::getServerInformation(mysqlnd_connection $connection):public string
MysqlndUhConnection::getServerStatistics(mysqlnd_connection $connection):public string
MysqlndUhConnection::getServerVersion(mysqlnd_connection $connection):public int
MysqlndUhConnection::getSqlstate(mysqlnd_connection $connection):public string
MysqlndUhConnection::getStatistics(mysqlnd_connection $connection):public array
MysqlndUhConnection::getThreadId(mysqlnd_connection $connection):public int
MysqlndUhConnection::getWarningCount(mysqlnd_connection $connection):public int
MysqlndUhConnection::init(mysqlnd_connection $connection):public bool
MysqlndUhConnection::killConnection(mysqlnd_connection $connection, int $pid):public bool
MysqlndUhConnection::listFields(mysqlnd_connection $connection, string $table, string $achtung_wild):public array
MysqlndUhConnection::listMethod(mysqlnd_connection $connection, string $query, string $achtung_wild, string $par1):public void
MysqlndUhConnection::moreResults(mysqlnd_connection $connection):public bool
MysqlndUhConnection::nextResult(mysqlnd_connection $connection):public bool
MysqlndUhConnection::ping(mysqlnd_connection $connection):public bool
MysqlndUhConnection::query(mysqlnd_connection $connection, string $query):public bool
MysqlndUhConnection::queryReadResultsetHeader(mysqlnd_connection $connection, mysqlnd_statement $mysqlnd_stmt):public bool
MysqlndUhConnection::reapQuery(mysqlnd_connection $connection):public bool
MysqlndUhConnection::refreshServer(mysqlnd_connection $connection, int $options):public bool
MysqlndUhConnection::restartPSession(mysqlnd_connection $connection):public bool
MysqlndUhConnection::selectDb(mysqlnd_connection $connection, string $database):public bool
MysqlndUhConnection::sendClose(mysqlnd_connection $connection):public bool
MysqlndUhConnection::sendQuery(mysqlnd_connection $connection, string $query):public bool
MysqlndUhConnection::serverDumpDebugInformation(mysqlnd_connection $connection):public bool
MysqlndUhConnection::setAutocommit(mysqlnd_connection $connection, int $mode):public bool
MysqlndUhConnection::setCharset(mysqlnd_connection $connection, string $charset):public bool
MysqlndUhConnection::setClientOption(mysqlnd_connection $connection, int $option, int $value):public bool
MysqlndUhConnection::setServerOption(mysqlnd_connection $connection, int $option):public void
MysqlndUhConnection::shutdownServer(string $MYSQLND_UH_RES_MYSQLND_NAME, string $level):public void
MysqlndUhConnection::simpleCommand(mysqlnd_connection $connection, int $command, string $arg, int $ok_packet, bool $silent, bool $ignore_upsert_status):public bool
MysqlndUhConnection::simpleCommandHandleResponse(mysqlnd_connection $connection, int $ok_packet, bool $silent, int $command, bool $ignore_upsert_status):public bool
MysqlndUhConnection::sslSet(mysqlnd_connection $connection, string $key, string $cert, string $ca, string $capath, string $cipher):public bool
MysqlndUhConnection::stmtInit(mysqlnd_connection $connection):public resource
MysqlndUhConnection::storeResult(mysqlnd_connection $connection):public resource
MysqlndUhConnection::txCommit(mysqlnd_connection $connection):public bool
MysqlndUhConnection::txRollback(mysqlnd_connection $connection):public bool
MysqlndUhConnection::useResult(mysqlnd_connection $connection):public resource
MysqlndUhPreparedStatement::__construct(void):public
MysqlndUhPreparedStatement::execute(mysqlnd_prepared_statement $statement):public bool
MysqlndUhPreparedStatement::prepare(mysqlnd_prepared_statement $statement, string $query):public bool
NoRewindIterator::__construct(Iterator $iterator):public
NoRewindIterator::current(void):public mixed
NoRewindIterator::getInnerIterator(void):public iterator
NoRewindIterator::key(void):public mixed
NoRewindIterator::next(void):public void
NoRewindIterator::rewind(void):public void
NoRewindIterator::valid(void):public bool
Normalizer::getRawDecomposition(string $input):public static string
normalizer_get_raw_decomposition(string $input):string
Normalizer::isNormalized(string $input [, int $form = Normalizer::FORM_C]):public static bool
normalizer_is_normalized(string $input [, int $form = Normalizer::FORM_C]):bool
Normalizer::normalize(string $input [, int $form = Normalizer::FORM_C]):public static string
normalizer_normalize(string $input [, int $form = Normalizer::FORM_C]):string
NumberFormatter::create(string $locale, int $style [, string $pattern]):public static NumberFormatter
numfmt_create(string $locale, int $style [, string $pattern]):NumberFormatter
NumberFormatter::format(number $value [, int $type]):public string
numfmt_format(NumberFormatter $fmt, number $value [, int $type]):string
NumberFormatter::formatCurrency(float $value, string $currency):public string
numfmt_format_currency(NumberFormatter $fmt, float $value, string $currency):string
NumberFormatter::getAttribute(int $attr):public int
numfmt_get_attribute(NumberFormatter $fmt, int $attr):int
NumberFormatter::getErrorCode(void):public int
numfmt_get_error_code(NumberFormatter $fmt):int
NumberFormatter::getErrorMessage(void):public string
numfmt_get_error_message(NumberFormatter $fmt):string
NumberFormatter::getLocale([int $type]):public string
numfmt_get_locale(NumberFormatter $fmt [, int $type]):string
NumberFormatter::getPattern(void):public string
numfmt_get_pattern(NumberFormatter $fmt):string
NumberFormatter::getSymbol(int $attr):public string
numfmt_get_symbol(NumberFormatter $fmt, int $attr):string
NumberFormatter::getTextAttribute(int $attr):public string
numfmt_get_text_attribute(NumberFormatter $fmt, int $attr):string
NumberFormatter::parse(string $value [, int $type [, int &$position]]):public mixed
numfmt_parse(NumberFormatter $fmt, string $value [, int $type [, int &$position]]):mixed
NumberFormatter::parseCurrency(string $value, string &$currency [, int &$position]):public float
numfmt_parse_currency(NumberFormatter $fmt, string $value, string &$currency [, int &$position]):float
NumberFormatter::setAttribute(int $attr, int $value):public bool
numfmt_set_attribute(NumberFormatter $fmt, int $attr, int $value):bool
NumberFormatter::setPattern(string $pattern):public bool
numfmt_set_pattern(NumberFormatter $fmt, string $pattern):bool
NumberFormatter::setSymbol(int $attr, string $value):public bool
numfmt_set_symbol(NumberFormatter $fmt, int $attr, string $value):bool
NumberFormatter::setTextAttribute(int $attr, string $value):public bool
numfmt_set_text_attribute(NumberFormatter $fmt, int $attr, string $value):bool
OAuth::__construct(string $consumer_key, string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0]]):public
OAuth::__destruct(void):public void
OAuth::disableDebug(void):public bool
OAuth::disableRedirects(void):public bool
OAuth::disableSSLChecks(void):public bool
OAuth::enableDebug(void):public bool
OAuth::enableRedirects(void):public bool
OAuth::enableSSLChecks(void):public bool
OAuth::fetch(string $protected_resource_url [, array $extra_parameters [, string $http_method [, array $http_headers]]]):public mixed
OAuth::generateSignature(string $http_method, string $url [, mixed $extra_parameters]):public string
OAuth::getAccessToken(string $access_token_url [, string $auth_session_handle [, string $verifier_token [, string $http_method]]]):public array
OAuth::getCAPath(void):public array
OAuth::getLastResponse(void):public string
OAuth::getLastResponseHeaders(void):public string
OAuth::getLastResponseInfo(void):public array
OAuth::getRequestHeader(string $http_method, string $url [, mixed $extra_parameters]):public string
OAuth::getRequestToken(string $request_token_url [, string $callback_url [, string $http_method]]):public array
OAuth::setAuthType(int $auth_type):public bool
OAuth::setCAPath([string $ca_path [, string $ca_info]]):public mixed
OAuth::setNonce(string $nonce):public mixed
OAuth::setRequestEngine(int $reqengine):public void
OAuth::setRSACertificate(string $cert):public mixed
OAuth::setSSLChecks(int $sslcheck):public bool
OAuth::setTimestamp(string $timestamp):public mixed
OAuth::setToken(string $token, string $token_secret):public bool
OAuth::setVersion(string $version):public bool
OAuthProvider::addRequiredParameter(string $req_params):final public bool
OAuthProvider::callconsumerHandler(void):public void
OAuthProvider::callTimestampNonceHandler(void):public void
OAuthProvider::calltokenHandler(void):public void
OAuthProvider::checkOAuthRequest([string $uri [, string $method]]):public void
OAuthProvider::__construct([array $params_array]):public
OAuthProvider::consumerHandler(callable $callback_function):public void
OAuthProvider::generateToken(int $size [, bool $strong = FALSE]):final public static string
OAuthProvider::is2LeggedEndpoint(mixed $params_array):public void
OAuthProvider::isRequestTokenEndpoint(bool $will_issue_request_token):public void
OAuthProvider::removeRequiredParameter(string $req_params):final public bool
OAuthProvider::reportProblem(string $oauthexception [, bool $send_headers = TRUE]):final public static string
OAuthProvider::setParam(string $param_key [, mixed $param_val]):final public bool
OAuthProvider::setRequestTokenPath(string $path):final public bool
OAuthProvider::timestampNonceHandler(callable $callback_function):public void
OAuthProvider::tokenHandler(callable $callback_function):public void
OCI-Collection::append(mixed $value):bool
OCI-Collection::assign(OCI-Collection $from):bool
OCI-Collection::assignElem(int $index, mixed $value):bool
OCI-Collection::free(void):bool
OCI-Collection::getElem(int $index):mixed
OCI-Collection::max(void):int
OCI-Collection::size(void):int
OCI-Collection::trim(int $num):bool
OCI-Lob::append(OCI-Lob $lob_from):bool
OCI-Lob::close(void):bool
OCI-Lob::eof(void):bool
OCI-Lob::erase([int $offset [, int $length]]):int
OCI-Lob::export(string $filename [, int $start [, int $length]]):bool
OCI-Lob::flush([int $flag]):bool
OCI-Lob::free(void):bool
OCI-Lob::getBuffering(void):bool
OCI-Lob::import(string $filename):bool
OCI-Lob::load(void):string
OCI-Lob::read(int $length):string
OCI-Lob::rewind(void):bool
OCI-Lob::save(string $data [, int $offset]):bool
OCI-Lob::saveFile(string $filename):bool
OCI-Lob::seek(int $offset [, int $whence = OCI_SEEK_SET]):bool
OCI-Lob::setBuffering(bool $on_off):bool
OCI-Lob::size(void):int
OCI-Lob::tell(void):int
OCI-Lob::truncate([int $length = 0]):bool
OCI-Lob::write(string $data [, int $length]):int
OCI-Lob::writeTemporary(string $data [, int $lob_type = OCI_TEMP_CLOB]):bool
OCI-Lob::writeToFile(string $filename [, int $start [, int $length]]):bool
OuterIterator::getInnerIterator(void):public Iterator
ParentIterator::accept(void):public bool
ParentIterator::__construct(RecursiveIterator $iterator):public
ParentIterator::getChildren(void):public ParentIterator
ParentIterator::hasChildren(void):public bool
ParentIterator::next(void):public void
ParentIterator::rewind(void):public void
Parle\Lexer::advance(void):public void
Parle\Lexer::build(void):public void
Parle\Lexer::callout(int $id, callable $callback):public void
Parle\Lexer::consume(string $data):public void
Parle\Lexer::dump(void):public void
Parle\Lexer::getToken(void):public Parle\Token
Parle\Lexer::insertMacro(string $name, string $regex):public void
Parle\Lexer::push(string $regex, int $id):public void
Parle\Lexer::reset(int $pos):public void
Parle\Parser::advance(void):public void
Parle\Parser::build(void):public void
Parle\Parser::consume(string $data, Parle\Lexer $lexer):public void
Parle\Parser::dump(void):public void
Parle\Parser::errorInfo(void):public Parle\ErrorInfo
Parle\Parser::left(string $tok):public void
Parle\Parser::nonassoc(string $tok):public void
Parle\Parser::precedence(string $tok):public void
Parle\Parser::push(string $name, string $rule):public int
Parle\Parser::reset([int $tokenId]):public void
Parle\Parser::right(string $tok):public void
Parle\Parser::sigil([int $idx]):public string
Parle\Parser::token(string $tok):public void
Parle\Parser::tokenId(string $tok):public int
Parle\Parser::trace(void):public string
Parle\Parser::validate(string $data, Parle\Lexer $lexer):public bool
Parle\RLexer::advance(void):public void
Parle\RLexer::build(void):public void
Parle\RLexer::callout(int $id, callable $callback):public void
Parle\RLexer::consume(string $data):public void
Parle\RLexer::dump(void):public void
Parle\RLexer::getToken(void):public Parle\Token
Parle\RLexer::insertMacro(string $name, string $regex):public void
Parle\RLexer::push(string $regex, int $id):public void
Parle\RLexer::pushState(string $state):public int
Parle\RLexer::reset(int $pos):public void
Parle\RParser::advance(void):public void
Parle\RParser::build(void):public void
Parle\RParser::consume(string $data, Parle\RLexer $rlexer):public void
Parle\RParser::dump(void):public void
Parle\RParser::errorInfo(void):public Parle\ErrorInfo
Parle\RParser::left(string $tok):public void
Parle\RParser::nonassoc(string $tok):public void
Parle\RParser::precedence(string $tok):public void
Parle\RParser::push(string $name, string $rule):public int
Parle\RParser::reset([int $tokenId]):public void
Parle\RParser::right(string $tok):public void
Parle\RParser::sigil([int $idx]):public string
Parle\RParser::token(string $tok):public void
Parle\RParser::tokenId(string $tok):public int
Parle\RParser::trace(void):public string
Parle\RParser::validate(string $data, Parle\RLexer $lexer):public bool
Parle\Stack::pop(void):public void
Parle\Stack::push(mixed $item):public void
PDO::beginTransaction(void):public bool
PDO::commit(void):public bool
PDO::__construct(string $dsn [, string $username [, string $passwd [, array $options]]]):public
PDO::cubrid_schema(int $schema_type [, string $table_name [, string $col_name]]):public array
PDO::errorCode(void):public string
PDO::errorInfo(void):public array
PDO::exec(string $statement):public int
PDO::getAttribute(int $attribute):public mixed
PDO::getAvailableDrivers(void):public static array
pdo_drivers(void):array
PDO::inTransaction(void):public bool
PDO::lastInsertId([string $name = NULL]):public string
PDO::pgsqlCopyFromArray(string $table_name, array $rows [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields]]]):public bool
PDO::pgsqlCopyFromFile(string $table_name, string $filename [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields]]]):public bool
PDO::pgsqlCopyToArray(string $table_name [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields]]]):public array
PDO::pgsqlCopyToFile(string $table_name, string $filename [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields]]]):public bool
PDO::pgsqlGetNotify([int $result_type = PDO::FETCH_USE_DEFAULT [, int $ms_timeout = 0]]):public array
PDO::pgsqlGetPid(void):public int
PDO::pgsqlLOBCreate(void):public string
PDO::pgsqlLOBOpen(string $oid [, string $mode = "rb"]):public resource
PDO::pgsqlLOBUnlink(string $oid):public bool
PDO::prepare(string $statement [, array $driver_options = array()]):public PDOStatement
PDO::query(string $statement):public PDOStatement
PDO::quote(string $string [, int $parameter_type = PDO::PARAM_STR]):public string
PDO::rollBack(void):public bool
PDO::setAttribute(int $attribute, mixed $value):public bool
PDO::sqliteCreateAggregate(string $function_name, callable $step_func, callable $finalize_func [, int $num_args]):public bool
PDO::sqliteCreateCollation(string $name, callable $callback):public bool
PDO::sqliteCreateFunction(string $function_name, callable $callback [, int $num_args = -1 [, int $flags = 0]]):public bool
PDOStatement::bindColumn(mixed $column, mixed &$param [, int $type [, int $maxlen [, mixed $driverdata]]]):public bool
PDOStatement::bindParam(mixed $parameter, mixed &$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options]]]):public bool
PDOStatement::bindValue(mixed $parameter, mixed $value [, int $data_type = PDO::PARAM_STR]):public bool
PDOStatement::closeCursor(void):public bool
PDOStatement::columnCount(void):public int
PDOStatement::debugDumpParams(void):public void
PDOStatement::errorCode(void):public string
PDOStatement::errorInfo(void):public array
PDOStatement::execute([array $input_parameters]):public bool
PDOStatement::fetch([int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0]]]):public mixed
PDOStatement::fetchAll([int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array()]]]):public array
PDOStatement::fetchColumn([int $column_number = 0]):public mixed
PDOStatement::fetchObject([string $class_name = "stdClass" [, array $ctor_args]]):public mixed
PDOStatement::getAttribute(int $attribute):public mixed
PDOStatement::getColumnMeta(int $column):public array
PDOStatement::nextRowset(void):public bool
PDOStatement::rowCount(void):public int
PDOStatement::setAttribute(int $attribute, mixed $value):public bool
PDOStatement::setFetchMode(int $mode):public bool
Phar::addEmptyDir(string $dirname):public void
Phar::addFile(string $file [, string $localname]):public void
Phar::addFromString(string $localname, string $contents):public void
Phar::apiVersion(void):final public static string
Phar::buildFromDirectory(string $base_dir [, string $regex]):public array
Phar::buildFromIterator(Iterator $iter [, string $base_directory]):public array
Phar::canCompress([int $type = 0]):final public static bool
Phar::canWrite(void):final public static bool
Phar::compress(int $compression [, string $extension]):public object
Phar::compressAllFilesBZIP2(void):public bool
Phar::compressAllFilesGZ(void):public bool
Phar::compressFiles(int $compression):public void
Phar::__construct(string $fname [, int $flags [, string $alias]]):public
Phar::convertToData([int $format = 9021976 [, int $compression = 9021976 [, string $extension]]]):public PharData
Phar::convertToExecutable([int $format = 9021976 [, int $compression = 9021976 [, string $extension]]]):public Phar
Phar::copy(string $oldfile, string $newfile):public bool
Phar::count(void):public int
Phar::createDefaultStub([string $indexfile [, string $webindexfile]]):final public static string
Phar::decompress([string $extension]):public object
Phar::decompressFiles(void):public bool
Phar::delete(string $entry):public bool
Phar::delMetadata(void):public bool
Phar::extractTo(string $pathto [, string|array $files [, bool $overwrite = FALSE]]):public bool
Phar::getAlias(void):public string
Phar::getMetadata(void):public mixed
Phar::getModified(void):public bool
Phar::getPath(void):public string
Phar::getSignature(void):public array
Phar::getStub(void):public string
Phar::getSupportedCompression(void):final public static array
Phar::getSupportedSignatures(void):final public static array
Phar::getVersion(void):public string
Phar::hasMetadata(void):public bool
Phar::interceptFileFuncs(void):final public static void
Phar::isBuffering(void):public bool
Phar::isCompressed(void):public mixed
Phar::isFileFormat(int $format):public bool
Phar::isValidPharFilename(string $filename [, bool $executable = TRUE]):final public static bool
Phar::isWritable(void):public bool
Phar::loadPhar(string $filename [, string $alias]):final public static bool
Phar::mapPhar([string $alias [, int $dataoffset = 0]]):final public static bool
Phar::mount(string $pharpath, string $externalpath):final public static void
Phar::mungServer(array $munglist):final public static void
Phar::offsetExists(string $offset):public bool
Phar::offsetGet(string $offset):public int
Phar::offsetSet(string $offset, string $value):public void
Phar::offsetUnset(string $offset):public bool
Phar::running([bool $retphar = TRUE]):final public static string
Phar::setAlias(string $alias):public bool
Phar::setDefaultStub([string $index [, string $webindex]]):public bool
Phar::setMetadata(mixed $metadata):public void
Phar::setSignatureAlgorithm(int $sigtype [, string $privatekey]):public void
Phar::setStub(string $stub [, int $len = -1]):public bool
Phar::startBuffering(void):public void
Phar::stopBuffering(void):public void
Phar::uncompressAllFiles(void):public bool
Phar::unlinkArchive(string $archive):final public static bool
Phar::webPhar([string $alias [, string $index = "index.php" [, string $f404 [, array $mimetypes [, callable $rewrites]]]]]):final public static void
PharData::addEmptyDir(string $dirname):void
PharData::addFile(string $file [, string $localname]):public void
PharData::addFromString(string $localname, string $contents):void
PharData::buildFromDirectory(string $base_dir [, string $regex]):public array
PharData::buildFromIterator(Iterator $iter [, string $base_directory]):array
PharData::compress(int $compression [, string $extension]):object
PharData::compressFiles(int $compression):void
PharData::__construct(string $fname [, int $flags [, string $alias [, int $format = Phar::TAR]]])
PharData::convertToData([int $format [, int $compression [, string $extension]]]):PharData
PharData::convertToExecutable([int $format [, int $compression [, string $extension]]]):Phar
PharData::copy(string $oldfile, string $newfile):bool
PharData::decompress([string $extension]):object
PharData::decompressFiles(void):bool
PharData::delete(string $entry):bool
PharData::delMetadata(void):bool
PharData::extractTo(string $pathto [, string|array $files [, bool $overwrite = FALSE]]):bool
PharData::isWritable(void):bool
PharData::offsetSet(string $offset, string $value):void
PharData::offsetUnset(string $offset):bool
PharData::setAlias(string $alias):bool
PharData::setDefaultStub([string $index [, string $webindex]]):bool
PharData::setStub(string $stub [, int $len = -1]):bool
PharExceptionRarPharException
PharFileInfo::chmod(int $permissions):public void
PharFileInfo::compress(int $compression):public bool
PharFileInfo::__construct(string $entry):public
PharFileInfo::decompress(void):public bool
PharFileInfo::delMetadata(void):public bool
PharFileInfo::getCompressedSize(void):public int
PharFileInfo::getContent(void):public string
PharFileInfo::getCRC32(void):public int
PharFileInfo::getMetadata(void):public mixed
PharFileInfo::getPharFlags(void):public int
PharFileInfo::hasMetadata(void):public bool
PharFileInfo::isCompressed([int $compression_type = 9021976]):public bool
PharFileInfo::isCompressedBZIP2(void):public bool
PharFileInfo::isCompressedGZ(void):public bool
PharFileInfo::isCRCChecked(void):public bool
PharFileInfo::setCompressedBZIP2(void):public bool
PharFileInfo::setCompressedGZ(void):public bool
PharFileInfo::setMetadata(mixed $metadata):public void
PharFileInfo::setUncompressed(void):public bool
phdfs::connect(void):public bool
phdfs::__construct(string $ip, string $port):public
phdfs::copy(string $source_file, string $destination_file):public bool
phdfs::create_directory(string $path):public bool
phdfs::delete(string $path):public bool
phdfs::__destruct(void):public void
phdfs::disconnect(void):public bool
phdfs::exists(string $path):public bool
phdfs::file_info(string $path):public array
phdfs::list_directory(string $path [, int $level = 0]):public array
phdfs::read(string $path [, int $length = 0]):public string
phdfs::rename(string $old_path, string $new_path):public bool
phdfs::tell(string $path [, int $read_length = 1024]):public int
phdfs::write(string $path, string $buffer [, int $mode = 0]):public bool
php_user_filter::filter(resource $in, resource $out, int &$consumed, bool $closing):public int
php_user_filter::onClose(void):public void
php_user_filter::onCreate(void):public bool
pht\AtomicInteger::__construct([int $value = 0]):public AtomicInteger
pht\AtomicInteger::dec(void):public void
pht\AtomicInteger::get(void):public int
pht\AtomicInteger::inc(void):public void
pht\AtomicInteger::lock(void):public void
pht\AtomicInteger::set(int $value):public void
pht\AtomicInteger::unlock(void):public void
pht\HashTable::lock(void):public void
pht\HashTable::size(void):public int
pht\HashTable::unlock(void):public void
pht\Queue::front(void):public mixed
pht\Queue::lock(void):public void
pht\Queue::pop(void):public mixed
pht\Queue::push(mixed $value):public void
pht\Queue::size(void):public int
pht\Queue::unlock(void):public void
pht\Runnable::run(void):public void
pht\Thread::addClassTask(string $className [, mixed $...ctorArgs]):public void
pht\Thread::addFileTask(string $fileName [, mixed $...globals]):public void
pht\Thread::addFunctionTask(callable $func [, mixed $...funcArgs]):public void
pht\Thread::join(void):public void
pht\Thread::start(void):public void
pht\Thread::taskCount(void):public int
pht\Threaded::lock(void):public void
pht\Threaded::unlock(void):public void
pht\Vector::__construct([int $size = 0 [, mixed $value = 0]]):public Vector
pht\Vector::deleteAt(int $offset):public void
pht\Vector::insertAt(mixed $value, int $offset):public void
pht\Vector::lock(void):public void
pht\Vector::pop(void):public mixed
pht\Vector::push(mixed $value):public void
pht\Vector::resize(int $size [, mixed $value = 0]):public void
pht\Vector::shift(void):public mixed
pht\Vector::size(void):public int
pht\Vector::unlock(void):public void
pht\Vector::unshift(mixed $value):public void
pht\Vector::updateAt(mixed $value, int $offset):public void
Pool::collect([Callable $collector]):public int
Pool::__construct(int $size [, string $class [, array $ctor]]):public Pool
Pool::resize(int $size):public void
Pool::shutdown(void):public void
Pool::submit(Threaded $task):public int
Pool::submitTo(int $worker, Threaded $task):public int
QuickHashIntHash::add(int $key [, int $value]):public bool
QuickHashIntHash::__construct(int $size [, int $options]):public
QuickHashIntHash::delete(int $key):public bool
QuickHashIntHash::exists(int $key):public bool
QuickHashIntHash::get(int $key):public int
QuickHashIntHash::getSize(void):public int
QuickHashIntHash::loadFromFile(string $filename [, int $options]):public static QuickHashIntHash
QuickHashIntHash::loadFromString(string $contents [, int $options]):public static QuickHashIntHash
QuickHashIntHash::saveToFile(string $filename):public void
QuickHashIntHash::saveToString(void):public string
QuickHashIntHash::set(int $key, int $value):public bool
QuickHashIntHash::update(int $key, int $value):public bool
QuickHashIntSet::add(int $key):public bool
QuickHashIntSet::__construct(int $size [, int $options]):public
QuickHashIntSet::delete(int $key):public bool
QuickHashIntSet::exists(int $key):public bool
QuickHashIntSet::getSize(void):publicint
QuickHashIntSet::loadFromFile(string $filename [, int $size [, int $options]]):public static QuickHashIntSet
QuickHashIntSet::loadFromString(string $contents [, int $size [, int $options]]):public static QuickHashIntSet
QuickHashIntSet::saveToFile(string $filename):public void
QuickHashIntSet::saveToString(void):public string
QuickHashIntStringHash::add(int $key, string $value):public bool
QuickHashIntStringHash::__construct(int $size [, int $options = 0]):public
QuickHashIntStringHash::delete(int $key):public bool
QuickHashIntStringHash::exists(int $key):public bool
QuickHashIntStringHash::get(int $key):public mixed
QuickHashIntStringHash::getSize(void):public int
QuickHashIntStringHash::loadFromFile(string $filename [, int $size = 0 [, int $options = 0]]):public static QuickHashIntStringHash
QuickHashIntStringHash::loadFromString(string $contents [, int $size = 0 [, int $options = 0]]):public static QuickHashIntStringHash
QuickHashIntStringHash::saveToFile(string $filename):public void
QuickHashIntStringHash::saveToString(void):public string
QuickHashIntStringHash::set(int $key, string $value):public int
QuickHashIntStringHash::update(int $key, string $value):public bool
QuickHashStringIntHash::add(string $key, int $value):public bool
QuickHashStringIntHash::__construct(int $size [, int $options = 0]):public
QuickHashStringIntHash::delete(string $key):public bool
QuickHashStringIntHash::exists(string $key):public bool
QuickHashStringIntHash::get(string $key):public mixed
QuickHashStringIntHash::getSize(void):public int
QuickHashStringIntHash::loadFromFile(string $filename [, int $size = 0 [, int $options = 0]]):public static QuickHashStringIntHash
QuickHashStringIntHash::loadFromString(string $contents [, int $size = 0 [, int $options = 0]]):public static QuickHashStringIntHash
QuickHashStringIntHash::saveToFile(string $filename):public void
QuickHashStringIntHash::saveToString(void):public string
QuickHashStringIntHash::set(string $key, int $value):public int
QuickHashStringIntHash::update(string $key, int $value):public bool
RarArchive::close(void):public bool
rar_close(RarArchive $rarfile):bool
RarArchive::getComment(void):public string
rar_comment_get(RarArchive $rarfile):string
RarArchive::getEntries(void):public array
rar_list(RarArchive $rarfile):array
RarArchive::getEntry(string $entryname):public RarEntry
rar_entry_get(RarArchive $rarfile, string $entryname):RarEntry
RarArchive::isBroken(void):public bool
rar_broken_is(RarArchive $rarfile):bool
RarArchive::isSolid(void):public bool
rar_solid_is(RarArchive $rarfile):bool
RarArchive::open(string $filename [, string $password = NULL [, callable $volume_callback = NULL]]):public static RarArchive
rar_open(string $filename [, string $password = NULL [, callable $volume_callback = NULL]]):RarArchive
RarArchive::setAllowBroken(bool $allow_broken):public bool
RarArchive::__toString(void):public string
RarEntry::extract(string $dir [, string $filepath = "" [, string $password = NULL [, bool $extended_data = FALSE]]]):public bool
RarEntry::getAttr(void):public int
RarEntry::getCrc(void):public string
RarEntry::getFileTime(void):public string
RarEntry::getHostOs(void):public int
RarEntry::getMethod(void):public int
RarEntry::getName(void):public string
RarEntry::getPackedSize(void):public int
RarEntry::getStream([string $password]):public resource
RarEntry::getUnpackedSize(void):public int
RarEntry::getVersion(void):public int
RarEntry::isDirectory(void):public bool
RarEntry::isEncrypted(void):public bool
RarEntry::__toString(void):public string
RarException::isUsingExceptions(void):public static bool
RarException::setUsingExceptions(bool $using_exceptions):public static void
RecursiveArrayIterator::getChildren(void):public RecursiveArrayIterator
RecursiveArrayIterator::hasChildren(void):public bool
RecursiveCachingIterator::__construct(Iterator $iterator [, int $flags = self::CALL_TOSTRING]):public
RecursiveCachingIterator::getChildren(void):public RecursiveCachingIterator
RecursiveCachingIterator::hasChildren(void):public bool
RecursiveCallbackFilterIterator::__construct(RecursiveIterator $iterator, string $callback):public
RecursiveCallbackFilterIterator::getChildren(void):public RecursiveCallbackFilterIterator
RecursiveCallbackFilterIterator::hasChildren(void):public bool
RecursiveDirectoryIterator::__construct(string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO]):public
RecursiveDirectoryIterator::getChildren(void):public mixed
RecursiveDirectoryIterator::getSubPath(void):public string
RecursiveDirectoryIterator::getSubPathname(void):public string
RecursiveDirectoryIterator::hasChildren([bool $allow_links = FALSE]):public bool
RecursiveDirectoryIterator::key(void):public string
RecursiveDirectoryIterator::next(void):public void
RecursiveDirectoryIterator::rewind(void):public void
RecursiveFilterIterator::__construct(RecursiveIterator $iterator):public
RecursiveFilterIterator::getChildren(void):public RecursiveFilterIterator
RecursiveFilterIterator::hasChildren(void):public bool
RecursiveIterator::getChildren(void):public RecursiveIterator
RecursiveIterator::hasChildren(void):public bool
RecursiveIteratorIterator::beginChildren(void):public void
RecursiveIteratorIterator::beginIteration(void):public void
RecursiveIteratorIterator::callGetChildren(void):public RecursiveIterator
RecursiveIteratorIterator::callHasChildren(void):public bool
RecursiveIteratorIterator::__construct(Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0]]):public
RecursiveIteratorIterator::current(void):public mixed
RecursiveIteratorIterator::endChildren(void):public void
RecursiveIteratorIterator::endIteration(void):public void
RecursiveIteratorIterator::getDepth(void):public int
RecursiveIteratorIterator::getInnerIterator(void):public iterator
RecursiveIteratorIterator::getMaxDepth(void):public mixed
RecursiveIteratorIterator::getSubIterator([int $level]):public RecursiveIterator
RecursiveIteratorIterator::key(void):public mixed
RecursiveIteratorIterator::next(void):public void
RecursiveIteratorIterator::nextElement(void):public void
RecursiveIteratorIterator::rewind(void):public void
RecursiveIteratorIterator::setMaxDepth([int $max_depth = -1]):public void
RecursiveIteratorIterator::valid(void):public bool
RecursiveRegexIterator::__construct(RecursiveIterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0]]]):public
RecursiveRegexIterator::getChildren(void):public RecursiveRegexIterator
RecursiveRegexIterator::hasChildren(void):public bool
RecursiveTreeIterator::beginChildren(void):public void
RecursiveTreeIterator::beginIteration(void):public RecursiveIterator
RecursiveTreeIterator::callGetChildren(void):public RecursiveIterator
RecursiveTreeIterator::callHasChildren(void):public bool
RecursiveTreeIterator::__construct(RecursiveIterator|IteratorAggregate $it [, int $flags = RecursiveTreeIterator::BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST]]]):public
RecursiveTreeIterator::current(void):public string
RecursiveTreeIterator::endChildren(void):public void
RecursiveTreeIterator::endIteration(void):public void
RecursiveTreeIterator::getEntry(void):public string
RecursiveTreeIterator::getPostfix(void):public string
RecursiveTreeIterator::getPrefix(void):public string
RecursiveTreeIterator::key(void):public string
RecursiveTreeIterator::next(void):public void
RecursiveTreeIterator::nextElement(void):public void
RecursiveTreeIterator::rewind(void):public void
RecursiveTreeIterator::setPostfix(string $postfix):public void
RecursiveTreeIterator::setPrefixPart(int $part, string $value):public void
RecursiveTreeIterator::valid(void):public bool
Reflection::export(Reflector $reflector [, bool $return = FALSE]):public static string
Reflection::getModifierNames(int $modifiers):public static array
ReflectionClass::__construct(mixed $argument):public
ReflectionClass::export(mixed $argument [, bool $return = FALSE]):public static string
ReflectionClass::getConstant(string $name):public mixed
ReflectionClass::getConstants(void):public array
ReflectionClass::getConstructor(void):public ReflectionMethod
ReflectionClass::getDefaultProperties(void):public array
ReflectionClass::getDocComment(void):public string
ReflectionClass::getEndLine(void):public int
ReflectionClass::getExtension(void):public ReflectionExtension
ReflectionClass::getExtensionName(void):public string
ReflectionClass::getFileName(void):public string
ReflectionClass::getInterfaceNames(void):public array
ReflectionClass::getInterfaces(void):public array
ReflectionClass::getMethod(string $name):public ReflectionMethod
ReflectionClass::getMethods([int $filter]):public array
ReflectionClass::getModifiers(void):public int
ReflectionClass::getName(void):public string
ReflectionClass::getNamespaceName(void):public string
ReflectionClass::getParentClass(void):public ReflectionClass
ReflectionClass::getProperties([int $filter]):public array
ReflectionClass::getProperty(string $name):public ReflectionProperty
ReflectionClass::getReflectionConstant(string $name):public ReflectionClassConstant
ReflectionClass::getReflectionConstants(void):public array
ReflectionClass::getShortName(void):public string
ReflectionClass::getStartLine(void):public int
ReflectionClass::getStaticProperties(void):public array
ReflectionClass::getStaticPropertyValue(string $name [, mixed &$def_value]):public mixed
ReflectionClass::getTraitAliases(void):public array
ReflectionClass::getTraitNames(void):public array
ReflectionClass::getTraits(void):public array
ReflectionClass::hasConstant(string $name):public bool
ReflectionClass::hasMethod(string $name):public bool
ReflectionClass::hasProperty(string $name):public bool
ReflectionClass::implementsInterface(string $interface):public bool
ReflectionClass::inNamespace(void):public bool
ReflectionClass::isAbstract(void):public bool
ReflectionClass::isAnonymous(void):public bool
ReflectionClass::isCloneable(void):public bool
ReflectionClass::isFinal(void):public bool
ReflectionClass::isInstance(object $object):public bool
ReflectionClass::isInstantiable(void):public bool
ReflectionClass::isInterface(void):public bool
ReflectionClass::isInternal(void):public bool
ReflectionClass::isIterable(void):public bool
ReflectionClass::isIterateable(void):public bool
ReflectionClass::isSubclassOf(string $class):public bool
ReflectionClass::isTrait(void):public bool
ReflectionClass::isUserDefined(void):public bool
ReflectionClass::newInstance(mixed $args [, mixed $...]):public object
ReflectionClass::newInstanceArgs([array $args]):public object
ReflectionClass::newInstanceWithoutConstructor(void):public object
ReflectionClass::setStaticPropertyValue(string $name, mixed $value):public void
ReflectionClass::__toString(void):public string
ReflectionClassConstant::__construct(mixed $class, string $name):public
ReflectionClassConstant::export(mixed $class, string $name [, bool $return]):public static string
ReflectionClassConstant::getDeclaringClass(void):public ReflectionClass
ReflectionClassConstant::getDocComment(void):public string
ReflectionClassConstant::getModifiers(void):public int
ReflectionClassConstant::getName(void):public string
ReflectionClassConstant::getValue(void):public mixed
ReflectionClassConstant::isPrivate(void):public bool
ReflectionClassConstant::isProtected(void):public bool
ReflectionClassConstant::isPublic(void):public bool
ReflectionClassConstant::__toString(void):public string
ReflectionExtension::__clone(void):final private void
ReflectionExtension::__construct(string $name):public
ReflectionExtension::export(string $name [, string $return = FALSE]):public static string
ReflectionExtension::getClasses(void):public array
ReflectionExtension::getClassNames(void):public array
ReflectionExtension::getConstants(void):public array
ReflectionExtension::getDependencies(void):public array
ReflectionExtension::getFunctions(void):public array
ReflectionExtension::getINIEntries(void):public array
ReflectionExtension::getName(void):public string
ReflectionExtension::getVersion(void):public string
ReflectionExtension::info(void):public void
ReflectionExtension::isPersistent(void):public void
ReflectionExtension::isTemporary(void):public void
ReflectionExtension::__toString(void):public string
ReflectionFunction::__construct(mixed $name):public
ReflectionFunction::export(string $name [, string $return]):public static string
ReflectionFunction::getClosure(void):public Closure
ReflectionFunction::invoke([mixed $parameter [, mixed $...]]):public mixed
ReflectionFunction::invokeArgs(array $args):public mixed
ReflectionFunction::isDisabled(void):public bool
ReflectionFunction::__toString(void):public string
ReflectionFunctionAbstract::__clone(void):final private void
ReflectionFunctionAbstract::getClosureScopeClass(void):public ReflectionClass
ReflectionFunctionAbstract::getClosureThis(void):public object
ReflectionFunctionAbstract::getDocComment(void):public string
ReflectionFunctionAbstract::getEndLine(void):public int
ReflectionFunctionAbstract::getExtension(void):public ReflectionExtension
ReflectionFunctionAbstract::getExtensionName(void):public string
ReflectionFunctionAbstract::getFileName(void):public string
ReflectionFunctionAbstract::getName(void):public string
ReflectionFunctionAbstract::getNamespaceName(void):public string
ReflectionFunctionAbstract::getNumberOfParameters(void):int
ReflectionFunctionAbstract::getNumberOfRequiredParameters(void):int
ReflectionFunctionAbstract::getParameters(void):public array
ReflectionFunctionAbstract::getReturnType(void):public ReflectionType
ReflectionFunctionAbstract::getShortName(void):public string
ReflectionFunctionAbstract::getStartLine(void):public int
ReflectionFunctionAbstract::getStaticVariables(void):public array
ReflectionFunctionAbstract::hasReturnType(void):public bool
ReflectionFunctionAbstract::inNamespace(void):public bool
ReflectionFunctionAbstract::isClosure(void):public bool
ReflectionFunctionAbstract::isDeprecated(void):public bool
ReflectionFunctionAbstract::isGenerator(void):public bool
ReflectionFunctionAbstract::isInternal(void):public bool
ReflectionFunctionAbstract::isUserDefined(void):public bool
ReflectionFunctionAbstract::isVariadic(void):public bool
ReflectionFunctionAbstract::returnsReference(void):public bool
ReflectionFunctionAbstract::__toString(void):abstract public void
ReflectionGenerator::__construct(Generator $generator):public
ReflectionGenerator::getExecutingFile(void):public string
ReflectionGenerator::getExecutingGenerator(void):public Generator
ReflectionGenerator::getExecutingLine(void):public int
ReflectionGenerator::getFunction(void):public ReflectionFunctionAbstract
ReflectionGenerator::getThis(void):public object
ReflectionGenerator::getTrace([int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT]):public array
ReflectionMethod::__construct(mixed $class, string $name):public
ReflectionMethod::export(string $class, string $name [, bool $return = FALSE]):public static string
ReflectionMethod::getClosure(object $object):public Closure
ReflectionMethod::getDeclaringClass(void):public ReflectionClass
ReflectionMethod::getModifiers(void):public int
ReflectionMethod::getPrototype(void):public ReflectionMethod
ReflectionMethod::invoke(object $object [, mixed $parameter [, mixed $...]]):public mixed
ReflectionMethod::invokeArgs(object $object, array $args):public mixed
ReflectionMethod::isAbstract(void):public bool
ReflectionMethod::isConstructor(void):public bool
ReflectionMethod::isDestructor(void):public bool
ReflectionMethod::isFinal(void):public bool
ReflectionMethod::isPrivate(void):public bool
ReflectionMethod::isProtected(void):public bool
ReflectionMethod::isPublic(void):public bool
ReflectionMethod::isStatic(void):public bool
ReflectionMethod::setAccessible(bool $accessible):public void
ReflectionMethod::__toString(void):public string
ReflectionNamedType::getName(void):public string
ReflectionObject::__construct(object $argument):public
ReflectionObject::export(string $argument [, bool $return]):public static string
ReflectionParameter::allowsNull(void):public bool
ReflectionParameter::canBePassedByValue(void):public bool
ReflectionParameter::__clone(void):final private void
ReflectionParameter::__construct(string $function, string $parameter):public
ReflectionParameter::export(string $function, string $parameter [, bool $return]):public static string
ReflectionParameter::getClass(void):public ReflectionClass
ReflectionParameter::getDeclaringClass(void):public ReflectionClass
ReflectionParameter::getDeclaringFunction(void):public ReflectionFunctionAbstract
ReflectionParameter::getDefaultValue(void):public mixed
ReflectionParameter::getDefaultValueConstantName(void):public string
ReflectionParameter::getName(void):public string
ReflectionParameter::getPosition(void):public int
ReflectionParameter::getType(void):public ReflectionType
ReflectionParameter::hasType(void):public bool
ReflectionParameter::isArray(void):public bool
ReflectionParameter::isCallable(void):public bool
ReflectionParameter::isDefaultValueAvailable(void):public bool
ReflectionParameter::isDefaultValueConstant(void):public bool
ReflectionParameter::isOptional(void):public bool
ReflectionParameter::isPassedByReference(void):public bool
ReflectionParameter::isVariadic(void):public bool
ReflectionParameter::__toString(void):public string
ReflectionProperty::__clone(void):final private void
ReflectionProperty::__construct(mixed $class, string $name):public
ReflectionProperty::export(mixed $class, string $name [, bool $return]):public static string
ReflectionProperty::getDeclaringClass(void):public ReflectionClass
ReflectionProperty::getDocComment(void):public string
ReflectionProperty::getModifiers(void):public int
ReflectionProperty::getName(void):public string
ReflectionProperty::getValue([object $object]):public mixed
ReflectionProperty::isDefault(void):public bool
ReflectionProperty::isPrivate(void):public bool
ReflectionProperty::isProtected(void):public bool
ReflectionProperty::isPublic(void):public bool
ReflectionProperty::isStatic(void):public bool
ReflectionProperty::setAccessible(bool $accessible):public void
ReflectionProperty::setValue(object $object, mixed $value):public void
ReflectionProperty::__toString(void):public string
ReflectionType::allowsNull(void):public bool
ReflectionType::isBuiltin(void):public bool
ReflectionType::__toString(void):public string
ReflectionZendExtension::__clone(void):final private void
ReflectionZendExtension::__construct(string $name):public
ReflectionZendExtension::export(string $name [, bool $return]):public static string
ReflectionZendExtension::getAuthor(void):public string
ReflectionZendExtension::getCopyright(void):public string
ReflectionZendExtension::getName(void):public string
ReflectionZendExtension::getURL(void):public string
ReflectionZendExtension::getVersion(void):public string
ReflectionZendExtension::__toString(void):public string
Reflector::export(void):public static string
Reflector::__toString(void):public string
RegexIterator::accept(void):public bool
RegexIterator::__construct(Iterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0]]]):public
RegexIterator::getFlags(void):public int
RegexIterator::getMode(void):public int
RegexIterator::getPregFlags(void):public int
RegexIterator::getRegex(void):public string
RegexIterator::setFlags(int $flags):public void
RegexIterator::setMode(int $mode):public void
RegexIterator::setPregFlags(int $preg_flags):public void
ResourceBundle::count(void):public int
resourcebundle_count(ResourceBundle $r):int
ResourceBundle::create(string $locale, string $bundlename [, bool $fallback]):public static ResourceBundle
resourcebundle_create(string $locale, string $bundlename [, bool $fallback]):ResourceBundle
ResourceBundle::get(string|int $index [, bool $fallback = TRUE]):public mixed
resourcebundle_get(ResourceBundle $r, string|int $index [, bool $fallback = TRUE]):mixed
ResourceBundle::getErrorCode(void):public int
resourcebundle_get_error_code(ResourceBundle $r):int
ResourceBundle::getErrorMessage(void):public string
resourcebundle_get_error_message(ResourceBundle $r):string
ResourceBundle::getLocales(string $bundlename):public array
resourcebundle_locales(string $bundlename):array
RRDCreator::addArchive(string $description):public void
RRDCreator::addDataSource(string $description):public void
RRDCreator::__construct(string $path [, string $startTime [, int $step = 0]]):public
RRDCreator::save(void):public bool
RRDGraph::__construct(string $path):public
RRDGraph::save(void):public array
RRDGraph::saveVerbose(void):public array
RRDGraph::setOptions(array $options):public void
RRDUpdater::__construct(string $path):public
RRDUpdater::update(array $values [, string $time = time()]):public bool
Runkit_Sandbox_Parent::__construct (void):void
Runkit_Sandboxclass creates a new thread with its own scope and program stack. Using a set of options passed to the constructor, this environment may be restricted to a subset of what the primary interpreter can do and provide a safer environment for executing user supplied code.:Instantiating the
SAMConnection::commit(void):bool
SAMConnection::connect(string $protocol [, array $properties]):bool
SAMConnection::__construct(void)
SAMConnection::disconnect(void):bool
SAMConnection::errno(void):int
SAMConnection::error(void):string
SAMConnection::isConnected(void):bool
SAMConnection::peek(string $target [, array $properties]):SAMMessage
SAMConnection::peekAll(string $target [, array $properties]):array
SAMConnection::receive(string $target [, array $properties]):SAMMessage
SAMConnection::remove(string $target [, array $properties]):SAMMessage
SAMConnection::rollback(void):bool
SAMConnection::send(string $target, SAMMessage $msg [, array $properties]):string
SAMConnection::setDebug(bool $switch):void
SAMConnection::subscribe(string $targetTopic):string
SAMConnection::unsubscribe(string $subscriptionId [, string $targetTopic]):bool
SAMMessage::body(void):string
SAMMessage::__construct([mixed $body])
SAMMessage::header(void):object
SCA_LocalProxy::createDataObject(string $type_namespace_uri, string $type_name):SDO_DataObject
SCA_SoapProxy::createDataObject(string $type_namespace_uri, string $type_name):SDO_DataObject
SCA::createDataObject(string $type_namespace_uri, string $type_name):SDO_DataObject
SCA::getService(string $target [, string $binding [, array $config]]):mixed
SDO_DAS_ChangeSummary::beginLogging(void):void
SDO_DAS_ChangeSummary::endLogging(void):void
SDO_DAS_ChangeSummary::getChangedDataObjects(void):SDO_List
SDO_DAS_ChangeSummary::getChangeType(SDO_DataObject $dataObject):int
SDO_DAS_ChangeSummary::getOldContainer(SDO_DataObject $data_object):SDO_DataObject
SDO_DAS_ChangeSummary::getOldValues(SDO_DataObject $data_object):SDO_List
SDO_DAS_ChangeSummary::isLogging(void):bool
SDO_DAS_DataFactory::addPropertyToType(string $parent_type_namespace_uri, string $parent_type_name, string $property_name, string $type_namespace_uri, string $type_name [, array $options]):void
SDO_DAS_DataFactory::addType(string $type_namespace_uri, string $type_name [, array $options]):void
SDO_DAS_DataFactory::getDataFactory(void):SDO_DAS_DataFactory
SDO_DAS_DataObject::getChangeSummary(void):SDO_DAS_ChangeSummary
SDO_DAS_Relational::applyChanges(PDO $database_handle, SDODataObject $root_data_object):void
SDO_DAS_Relational::__construct(array $database_metadata [, string $application_root_type [, array $SDO_containment_references_metadata]])
SDO_DAS_Relational::createRootDataObject(void):SDODataObject
SDO_DAS_Relational::executePreparedQuery(PDO $database_handle, PDOStatement $prepared_statement, array $value_list [, array $column_specifier]):SDODataObject
SDO_DAS_Relational::executeQuery(PDO $database_handle, string $SQL_statement [, array $column_specifier]):SDODataObject
SDO_DAS_Setting::getListIndex(void):int
SDO_DAS_Setting::getPropertyIndex(void):int
SDO_DAS_Setting::getPropertyName(void):string
SDO_DAS_Setting::getValue(void):mixed
SDO_DAS_Setting::isSet(void):bool
SDO_DAS_XML_Document::getRootDataObject(void):SDO_DataObject
SDO_DAS_XML_Document::getRootElementName(void):string
SDO_DAS_XML_Document::getRootElementURI(void):string
SDO_DAS_XML_Document::setEncoding(string $encoding):void
SDO_DAS_XML_Document::setXMLDeclaration(bool $xmlDeclatation):void
SDO_DAS_XML_Document::setXMLVersion(string $xmlVersion):void
SDO_DAS_XML::addTypes(string $xsd_file):void
SDO_DAS_XML::create([mixed $xsd_file [, string $key]]):SDO_DAS_XML
SDO_DAS_XML::createDataObject(string $namespace_uri, string $type_name):SDO_DataObject
SDO_DAS_XML::createDocument([string $document_element_name]):SDO_DAS_XML_Document
SDO_DAS_XML::loadFile(string $xml_file):SDO_XMLDocument
SDO_DAS_XML::loadString(string $xml_string):SDO_DAS_XML_Document
SDO_DAS_XML::saveFile(SDO_XMLDocument $xdoc, string $xml_file [, int $indent]):void
SDO_DAS_XML::saveString(SDO_XMLDocument $xdoc [, int $indent]):string
SDO_DataFactory::create(string $type_namespace_uri, string $type_name):void
SDO_DataObject::clear(void):void
SDO_DataObject::createDataObject(mixed $identifier):SDO_DataObject
SDO_DataObject::getContainer(void):SDO_DataObject
SDO_DataObject::getSequence(void):SDO_Sequence
SDO_DataObject::getTypeName(void):string
SDO_DataObject::getTypeNamespaceURI(void):string
SDO_Exception::getCause(void):mixed
SDO_List::insert(mixed $value [, int $index]):void
SDO_Model_Property::getContainingType(void):SDO_Model_Type
SDO_Model_Property::getDefault(void):mixed
SDO_Model_Property::getName(void):string
SDO_Model_Property::getType(void):SDO_Model_Type
SDO_Model_Property::isContainment(void):bool
SDO_Model_Property::isMany(void):bool
SDO_Model_ReflectionDataObject::__construct(SDO_DataObject $data_object)
SDO_Model_ReflectionDataObject::export(SDO_Model_ReflectionDataObject $rdo [, bool $return]):mixed
SDO_Model_ReflectionDataObject::getContainmentProperty(void):SDO_Model_Property
SDO_Model_ReflectionDataObject::getInstanceProperties(void):array
SDO_Model_ReflectionDataObject::getType(void):SDO_Model_Type
SDO_Model_Type::getBaseType(void):SDO_Model_Type
SDO_Model_Type::getName(void):string
SDO_Model_Type::getNamespaceURI(void):string
SDO_Model_Type::getProperties(void):array
SDO_Model_Type::getProperty(mixed $identifier):SDO_Model_Property
SDO_Model_Type::isAbstractType(void):bool
SDO_Model_Type::isDataType(void):bool
SDO_Model_Type::isInstance(SDO_DataObject $data_object):bool
SDO_Model_Type::isOpenType(void):bool
SDO_Model_Type::isSequencedType(void):bool
SDO_Sequence::getProperty(int $sequence_index):SDO_Model_Property
SDO_Sequence::insert(mixed $value [, int $sequenceIndex [, mixed $propertyIdentifier]]):void
SDO_Sequence::move(int $toIndex, int $fromIndex):void
SeasLog::analyzerCount(string $level [, string $log_path [, string $key_word]]):public static mixed
SeasLog::analyzerDetail(string $level [, string $log_path [, string $key_word [, int $start [, int $limit [, int $order]]]]]):public static mixed
SeasLog::__construct(void):public
SeasLog::critical(string $message [, array $content [, string $logger]]):public static bool
SeasLog::debug(string $message [, array $content [, string $logger]]):public static bool
SeasLog::__destruct(void):public
SeasLog::emergency(string $message [, array $content [, string $logger]]):public static bool
SeasLog::error(string $message [, array $content [, string $logger]]):public static bool
SeasLog::flushBuffer(void):public static bool
SeasLog::getBasePath() will get the value of seaslog.default_basepath what configured in php.ini(seaslog.ini).:Use the Function
SeasLog::getBuffer(void):public static array
SeasLog::getBufferEnabled(void):public static bool
SeasLog::getDatetimeFormat(void):public static string
SeasLog::getLastLogger(void):public static string
SeasLog::getRequestID(void):public static string
SeasLog::info(string $message [, array $content [, string $logger]]):public static bool
SeasLog::log(string $level [, string $message [, array $content [, string $logger]]]):public static bool
SeasLog::notice(string $message [, array $content [, string $logger]]):public static bool
SeasLog::setBasePath(string $base_path):public static bool
SeasLog::setDatetimeFormat(string $format):public static bool
SeasLog::setLogger(string $logger):public static bool
SeasLog::setRequestID(string $request_id):public static bool
SeasLog::warning(string $message [, array $content [, string $logger]]):public static bool
SeekableIterator::seek(int $position):abstract public void
Serializable::serialize(void):abstract public string
Serializable::unserialize(string $serialized):abstract public void
SessionHandler::close(void):public bool
SessionHandler::create_sid(void):public string
SessionHandler::destroy(string $session_id):public bool
SessionHandler::gc(int $maxlifetime):public int
SessionHandler::open(string $save_path, string $session_name):public bool
SessionHandler::read(string $session_id):public string
SessionHandler::write(string $session_id, string $session_data):public bool
SessionHandlerInterface::close(void):abstract public bool
SessionHandlerInterface::destroy(string $session_id):abstract public bool
SessionHandlerInterface::gc(int $maxlifetime):abstract public int
SessionHandlerInterface::open(string $save_path, string $session_name):abstract public bool
SessionHandlerInterface::read(string $session_id):abstract public string
SessionHandlerInterface::write(string $session_id, string $session_data):abstract public bool
SessionIdInterface::create_sid(void):abstract public string
SessionUpdateTimestampHandlerInterface::updateTimestamp(string $key, string $val):abstract public bool
SessionUpdateTimestampHandlerInterface::validateId(string $key):abstract public bool
SimpleXMLElement::addAttribute(string $name [, string $value [, string $namespace]]):public void
SimpleXMLElement::addChild(string $name [, string $value [, string $namespace]]):public SimpleXMLElement
SimpleXMLElement::asXML([string $filename]):public mixed
SimpleXMLElement::attributes([string $ns = NULL [, bool $is_prefix = FALSE]]):public SimpleXMLElement
SimpleXMLElement::children([string $ns [, bool $is_prefix = FALSE]]):public SimpleXMLElement
SimpleXMLElement::__construct(string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = "" [, bool $is_prefix = FALSE]]]]):final public
SimpleXMLElement::count(void):public int
SimpleXMLElement::getDocNamespaces([bool $recursive = FALSE [, bool $from_root = TRUE]]):public array
SimpleXMLElement::getName(void):public string
SimpleXMLElement::getNamespaces([bool $recursive = FALSE]):public array
SimpleXMLElement::registerXPathNamespace(string $prefix, string $ns):public bool
SimpleXMLElement::saveXML([string $filename]):public mixed
SimpleXMLElement::__toString(void):public string
SimpleXMLElement::xpath(string $path):public array
SimpleXMLIterator::current(void):public mixed
SimpleXMLIterator::getChildren(void):public SimpleXMLIterator
SimpleXMLIterator::hasChildren(void):public bool
SimpleXMLIterator::key(void):public mixed
SimpleXMLIterator::next(void):public void
SimpleXMLIterator::rewind(void):public void
SimpleXMLIterator::valid(void):public bool
SNMP::close(void):public bool
SNMP::__construct(int $version, string $hostname, string $community [, int $timeout = 1000000 [, int $retries = 5]]):public
SNMP::get(mixed $object_id [, bool $preserve_keys = FALSE]):public mixed
SNMP::getErrno(void):public int
SNMP::getError(void):public string
SNMP::getnext(mixed $object_id):public mixed
SNMP::set(mixed $object_id, mixed $type, mixed $value):public bool
SNMP::setSecurity(string $sec_level [, string $auth_protocol = [, string $auth_passphrase = [, string $priv_protocol = [, string $priv_passphrase = [, string $contextName = [, string $contextEngineID =]]]]]]):public bool
SNMP::walk(string $object_id [, bool $suffix_as_key = FALSE [, int $max_repetitions [, int $non_repeaters]]]):public array
SoapClient::__call(string $function_name, array $arguments):public mixed
SoapClient::__construct(mixed $wsdl [, array $options]):public
SoapClient::__doRequest(string $request, string $location, string $action, int $version [, int $one_way = 0]):public string
SoapClient::__getCookies(void):public array
SoapClient::__getFunctions(void):public array
SoapClient::__getLastRequest(void):public string
SoapClient::__getLastRequestHeaders(void):public string
SoapClient::__getLastResponse(void):public string
SoapClient::__getLastResponseHeaders(void):public string
SoapClient::__getTypes(void):public array
SoapClient::__setCookie(string $name [, string $value]):public void
SoapClient::__setLocation([string $new_location]):public string
SoapClient::__setSoapHeaders([mixed $soapheaders]):public bool
SoapClient::__soapCall(string $function_name, array $arguments [, array $options [, mixed $input_headers [, array &$output_headers]]]):public mixed
SoapClient::SoapClient(mixed $wsdl [, array $options]):public
SoapFault::__construct(string $faultcode, string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault]]]])
SoapFault::SoapFault(string $faultcode, string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault]]]])
SoapFault::__toString(void):public string
SoapHeader::__construct(string $namespace, string $name [, mixed $data [, bool $mustunderstand [, string $actor]]])
SoapHeader::SoapHeader(string $namespace, string $name [, mixed $data [, bool $mustunderstand = FALSE [, string $actor]]])
SoapParam::__construct(mixed $data, string $name)
SoapParam::SoapParam(mixed $data, string $name)
SoapServer::addFunction(mixed $functions):public void
SoapServer::addSoapHeader(SoapHeader $object):public void
SoapServer::__construct(mixed $wsdl [, array $options]):public
SoapServer::fault(string $code, string $string [, string $actor [, string $details [, string $name]]]):public void
SoapServer::getFunctions(void):public array
SoapServer::handle([string $soap_request]):public void
SoapServer::setClass(string $class_name [, mixed $args [, mixed $...]]):public void
SoapServer::setObject(object $object):public void
SoapServer::setPersistence(int $mode):public void
SoapServer::SoapServer(mixed $wsdl [, array $options]):public
SoapVar::__construct(mixed $data, string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace]]]])
SoapVar::SoapVar(mixed $data, string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace]]]])
SolrClient::addDocument(SolrInputDocument $doc [, bool $overwrite = TRUE [, int $commitWithin = 0]]):public SolrUpdateResponse
SolrClient::addDocuments(array $docs [, bool $overwrite = TRUE [, int $commitWithin = 0]]):public void
SolrClient::commit([bool $softCommit = FALSE [, bool $waitSearcher = TRUE [, bool $expungeDeletes = FALSE]]]):public SolrUpdateResponse
SolrClient::__construct(array $clientOptions):public
SolrClient::deleteById(string $id):public SolrUpdateResponse
SolrClient::deleteByIds(array $ids):public SolrUpdateResponse
SolrClient::deleteByQueries(array $queries):public SolrUpdateResponse
SolrClient::deleteByQuery(string $query):public SolrUpdateResponse
SolrClient::__destruct(void):public void
SolrClient::getById(string $id):public SolrQueryResponse
SolrClient::getByIds(array $ids):public SolrQueryResponse
SolrClient::getDebug(void):public string
SolrClient::getOptions(void):public array
SolrClient::optimize([int $maxSegments = 1 [, bool $softCommit = TRUE [, bool $waitSearcher = TRUE]]]):public SolrUpdateResponse
SolrClient::ping(void):public SolrPingResponse
SolrClient::query(SolrParams $query):public SolrQueryResponse
SolrClient::request(string $raw_request):public SolrUpdateResponse
SolrClient::rollback(void):public SolrUpdateResponse
SolrClient::setResponseWriter(string $responseWriter):public void
SolrClient::setServlet(int $type, string $value):public bool
SolrClient::system(void):public void
SolrClient::threads(void):public void
SolrClientException::getInternalInfo(void):public array
SolrCollapseFunction::__construct([string $field]):public
SolrCollapseFunction::getField(void):public string
SolrCollapseFunction::getHint(void):public string
SolrCollapseFunction::getMax(void):public string
SolrCollapseFunction::getMin(void):public string
SolrCollapseFunction::getNullPolicy(void):public string
SolrCollapseFunction::getSize(void):public int
SolrCollapseFunction::setField(string $fieldName):public SolrCollapseFunction
SolrCollapseFunction::setHint(string $hint):public SolrCollapseFunction
SolrCollapseFunction::setMax(string $max):public SolrCollapseFunction
SolrCollapseFunction::setMin(string $min):public SolrCollapseFunction
SolrCollapseFunction::setNullPolicy(string $nullPolicy):public SolrCollapseFunction
SolrCollapseFunction::setSize(int $size):public SolrCollapseFunction
SolrCollapseFunction::__toString(void):public string
SolrDisMaxQuery::addBigramPhraseField(string $field, string $boost [, string $slop]):public SolrDisMaxQuery
SolrDisMaxQuery::addBoostQuery(string $field, string $value [, string $boost]):public SolrDisMaxQuery
SolrDisMaxQuery::addPhraseField(string $field, string $boost [, string $slop]):public SolrDisMaxQuery
SolrDisMaxQuery::addQueryField(string $field [, string $boost]):public SolrDisMaxQuery
SolrDisMaxQuery::addTrigramPhraseField(string $field, string $boost [, string $slop]):public SolrDisMaxQuery
SolrDisMaxQuery::addUserField(string $field):public SolrDisMaxQuery
SolrDisMaxQuery::__construct([string $q]):public
SolrDisMaxQuery::removeBigramPhraseField(string $field):public SolrDisMaxQuery
SolrDisMaxQuery::removeBoostQuery(string $field):public SolrDisMaxQuery
SolrDisMaxQuery::removePhraseField(string $field):public SolrDisMaxQuery
SolrDisMaxQuery::removeQueryField(string $field):public SolrDisMaxQuery
SolrDisMaxQuery::removeTrigramPhraseField(string $field):public SolrDisMaxQuery
SolrDisMaxQuery::removeUserField(string $field):public SolrDisMaxQuery
SolrDisMaxQuery::setBigramPhraseFields(string $fields):public SolrDisMaxQuery
SolrDisMaxQuery::setBigramPhraseSlop(string $slop):public SolrDisMaxQuery
SolrDisMaxQuery::setBoostFunction(string $function):public SolrDisMaxQuery
SolrDisMaxQuery::setBoostQuery(string $q):public SolrDisMaxQuery
SolrDisMaxQuery::setMinimumMatch(string $value):public SolrDisMaxQuery
SolrDisMaxQuery::setPhraseFields(string $fields):public SolrDisMaxQuery
SolrDisMaxQuery::setPhraseSlop(string $slop):public SolrDisMaxQuery
SolrDisMaxQuery::setQueryAlt(string $q):public SolrDisMaxQuery
SolrDisMaxQuery::setQueryPhraseSlop(string $slop):public SolrDisMaxQuery
SolrDisMaxQuery::setTieBreaker(string $tieBreaker):public SolrDisMaxQuery
SolrDisMaxQuery::setTrigramPhraseFields(string $fields):public SolrDisMaxQuery
SolrDisMaxQuery::setTrigramPhraseSlop(string $slop):public SolrDisMaxQuery
SolrDisMaxQuery::setUserFields(string $fields):public SolrDisMaxQuery
SolrDisMaxQuery::useDisMaxQueryParser(void):public SolrDisMaxQuery
SolrDisMaxQuery::useEDisMaxQueryParser(void):public SolrDisMaxQuery
SolrDocument::addField(string $fieldName, string $fieldValue):public bool
SolrDocument::clear(void):public bool
SolrDocument::__clone(void):public void
SolrDocument::__construct(void):public
SolrDocument::current(void):public SolrDocumentField
SolrDocument::deleteField(string $fieldName):public bool
SolrDocument::__destruct(void):public void
SolrDocument::fieldExists(string $fieldName):public bool
SolrDocument::__get(string $fieldName):public SolrDocumentField
SolrDocument::getChildDocuments(void):public array
SolrDocument::getChildDocumentsCount(void):public int
SolrDocument::getField(string $fieldName):public SolrDocumentField
SolrDocument::getFieldCount(void):public int
SolrDocument::getFieldNames(void):public array
SolrDocument::getInputDocument(void):public SolrInputDocument
SolrDocument::hasChildDocuments(void):public bool
SolrDocument::__isset(string $fieldName):public bool
SolrDocument::key(void):public string
SolrDocument::merge(SolrDocument $sourceDoc [, bool $overwrite = TRUE]):public bool
SolrDocument::next(void):public void
SolrDocument::offsetExists(string $fieldName):public bool
SolrDocument::offsetGet(string $fieldName):public SolrDocumentField
SolrDocument::offsetSet(string $fieldName, string $fieldValue):public void
SolrDocument::offsetUnset(string $fieldName):public void
SolrDocument::reset(void):public bool
SolrDocument::rewind(void):public void
SolrDocument::serialize(void):public string
SolrDocument::__set(string $fieldName, string $fieldValue):public bool
SolrDocument::sort(int $sortOrderBy [, int $sortDirection = SolrDocument::SORT_ASC]):public bool
SolrDocument::toArray(void):public array
SolrDocument::unserialize(string $serialized):public void
SolrDocument::__unset(string $fieldName):public bool
SolrDocument::valid(void):public bool
SolrDocumentField::__construct(void):public
SolrDocumentField::__destruct(void):public void
SolrException::getInternalInfo(void):public array
SolrGenericResponse::__construct(void):public
SolrGenericResponse::__destruct(void):public void
SolrIllegalArgumentException::getInternalInfo(void):public array
SolrIllegalOperationException::getInternalInfo(void):public array
SolrInputDocument::addChildDocument(SolrInputDocument $child):public void
SolrInputDocument::addChildDocuments(array &$docs):public void
SolrInputDocument::addField(string $fieldName, string $fieldValue [, float $fieldBoostValue = 0.0]):public bool
SolrInputDocument::clear(void):public bool
SolrInputDocument::__clone(void):public void
SolrInputDocument::__construct(void):public
SolrInputDocument::deleteField(string $fieldName):public bool
SolrInputDocument::__destruct(void):public void
SolrInputDocument::fieldExists(string $fieldName):public bool
SolrInputDocument::getBoost(void):public float
SolrInputDocument::getChildDocuments(void):public array
SolrInputDocument::getChildDocumentsCount(void):public int
SolrInputDocument::getField(string $fieldName):public SolrDocumentField
SolrInputDocument::getFieldBoost(string $fieldName):public float
SolrInputDocument::getFieldCount(void):public int
SolrInputDocument::getFieldNames(void):public array
SolrInputDocument::hasChildDocuments(void):public bool
SolrInputDocument::merge(SolrInputDocument $sourceDoc [, bool $overwrite = TRUE]):public bool
SolrInputDocument::reset(void):public bool
SolrInputDocument::setBoost(float $documentBoostValue):public bool
SolrInputDocument::setFieldBoost(string $fieldName, float $fieldBoostValue):public bool
SolrInputDocument::sort(int $sortOrderBy [, int $sortDirection = SolrInputDocument::SORT_ASC]):public bool
SolrInputDocument::toArray(void):public array
SolrModifiableParams::__construct(void):public
SolrModifiableParams::__destruct(void):public void
SolrObject::__construct(void):public
SolrObject::__destruct(void):public void
SolrObject::getPropertyNames(void):public array
SolrObject::offsetExists(string $property_name):public bool
SolrObject::offsetGet(string $property_name):public mixed
SolrObject::offsetSet(string $property_name, string $property_value):public void
SolrObject::offsetUnset(string $property_name):public void
SolrParams::add(string $name, string $value):final public SolrParams
SolrParams::addParam(string $name, string $value):public SolrParams
SolrParams::get(string $param_name):final public mixed
SolrParams::getParam([string $param_name]):final public mixed
SolrParams::getParams(void):final public array
SolrParams::getPreparedParams(void):final public array
SolrParams::serialize(void):final public string
SolrParams::set(string $name, string $value):final public void
SolrParams::setParam(string $name, string $value):public SolrParams
SolrParams::toString([bool $url_encode = FALSE]):final public string
SolrParams::unserialize(string $serialized):final public void
SolrPingResponse::__construct(void):public
SolrPingResponse::__destruct(void):public void
SolrPingResponse::getResponse(void):public string
SolrQuery::addExpandFilterQuery(string $fq):public SolrQuery
SolrQuery::addExpandSortField(string $field [, string $order]):public SolrQuery
SolrQuery::addFacetDateField(string $dateField):public SolrQuery
SolrQuery::addFacetDateOther(string $value [, string $field_override]):public SolrQuery
SolrQuery::addFacetField(string $field):public SolrQuery
SolrQuery::addFacetQuery(string $facetQuery):public SolrQuery
SolrQuery::addField(string $field):public SolrQuery
SolrQuery::addFilterQuery(string $fq):public SolrQuery
SolrQuery::addGroupField(string $value):public SolrQuery
SolrQuery::addGroupFunction(string $value):public SolrQuery
SolrQuery::addGroupQuery(string $value):public SolrQuery
SolrQuery::addGroupSortField(string $field [, int $order]):public SolrQuery
SolrQuery::addHighlightField(string $field):public SolrQuery
SolrQuery::addMltField(string $field):public SolrQuery
SolrQuery::addMltQueryField(string $field, float $boost):public SolrQuery
SolrQuery::addSortField(string $field [, int $order = SolrQuery::ORDER_DESC]):public SolrQuery
SolrQuery::addStatsFacet(string $field):public SolrQuery
SolrQuery::addStatsField(string $field):public SolrQuery
SolrQuery::collapse(SolrCollapseFunction $collapseFunction):public SolrQuery
SolrQuery::__construct([string $q]):public
SolrQuery::__destruct(void):public void
SolrQuery::getExpand(void):public bool
SolrQuery::getExpandFilterQueries(void):public array
SolrQuery::getExpandQuery(void):public array
SolrQuery::getExpandRows(void):public int
SolrQuery::getExpandSortFields(void):public array
SolrQuery::getFacet(void):public bool
SolrQuery::getFacetDateEnd([string $field_override]):public string
SolrQuery::getFacetDateFields(void):public array
SolrQuery::getFacetDateGap([string $field_override]):public string
SolrQuery::getFacetDateHardEnd([string $field_override]):public string
SolrQuery::getFacetDateOther([string $field_override]):public array
SolrQuery::getFacetDateStart([string $field_override]):public string
SolrQuery::getFacetFields(void):public array
SolrQuery::getFacetLimit([string $field_override]):public int
SolrQuery::getFacetMethod([string $field_override]):public string
SolrQuery::getFacetMinCount([string $field_override]):public int
SolrQuery::getFacetMissing([string $field_override]):public bool
SolrQuery::getFacetOffset([string $field_override]):public int
SolrQuery::getFacetPrefix([string $field_override]):public string
SolrQuery::getFacetQueries(void):public array
SolrQuery::getFacetSort([string $field_override]):public int
SolrQuery::getFields(void):public array
SolrQuery::getFilterQueries(void):public array
SolrQuery::getGroup(void):public bool
SolrQuery::getGroupCachePercent(void):public int
SolrQuery::getGroupFacet(void):public bool
SolrQuery::getGroupFields(void):public array
SolrQuery::getGroupFormat(void):public string
SolrQuery::getGroupFunctions(void):public array
SolrQuery::getGroupLimit(void):public int
SolrQuery::getGroupMain(void):public bool
SolrQuery::getGroupNGroups(void):public bool
SolrQuery::getGroupOffset(void):public int
SolrQuery::getGroupQueries(void):public array
SolrQuery::getGroupSortFields(void):public array
SolrQuery::getGroupTruncate(void):public bool
SolrQuery::getHighlight(void):public bool
SolrQuery::getHighlightAlternateField([string $field_override]):public string
SolrQuery::getHighlightFields(void):public array
SolrQuery::getHighlightFormatter([string $field_override]):public string
SolrQuery::getHighlightFragmenter([string $field_override]):public string
SolrQuery::getHighlightFragsize([string $field_override]):public int
SolrQuery::getHighlightHighlightMultiTerm(void):public bool
SolrQuery::getHighlightMaxAlternateFieldLength([string $field_override]):public int
SolrQuery::getHighlightMaxAnalyzedChars(void):public int
SolrQuery::getHighlightMergeContiguous([string $field_override]):public bool
SolrQuery::getHighlightRegexMaxAnalyzedChars(void):public int
SolrQuery::getHighlightRegexPattern(void):public string
SolrQuery::getHighlightRegexSlop(void):public float
SolrQuery::getHighlightRequireFieldMatch(void):public bool
SolrQuery::getHighlightSimplePost([string $field_override]):public string
SolrQuery::getHighlightSimplePre([string $field_override]):public string
SolrQuery::getHighlightSnippets([string $field_override]):public int
SolrQuery::getHighlightUsePhraseHighlighter(void):public bool
SolrQuery::getMlt(void):public bool
SolrQuery::getMltBoost(void):public bool
SolrQuery::getMltCount(void):public int
SolrQuery::getMltFields(void):public array
SolrQuery::getMltMaxNumQueryTerms(void):public int
SolrQuery::getMltMaxNumTokens(void):public int
SolrQuery::getMltMaxWordLength(void):public int
SolrQuery::getMltMinDocFrequency(void):public int
SolrQuery::getMltMinTermFrequency(void):public int
SolrQuery::getMltMinWordLength(void):public int
SolrQuery::getMltQueryFields(void):public array
SolrQuery::getQuery(void):public string
SolrQuery::getRows(void):public int
SolrQuery::getSortFields(void):public array
SolrQuery::getStart(void):public int
SolrQuery::getStats(void):public bool
SolrQuery::getStatsFacets(void):public array
SolrQuery::getStatsFields(void):public array
SolrQuery::getTerms(void):public bool
SolrQuery::getTermsField(void):public string
SolrQuery::getTermsIncludeLowerBound(void):public bool
SolrQuery::getTermsIncludeUpperBound(void):public bool
SolrQuery::getTermsLimit(void):public int
SolrQuery::getTermsLowerBound(void):public string
SolrQuery::getTermsMaxCount(void):public int
SolrQuery::getTermsMinCount(void):public int
SolrQuery::getTermsPrefix(void):public string
SolrQuery::getTermsReturnRaw(void):public bool
SolrQuery::getTermsSort(void):public int
SolrQuery::getTermsUpperBound(void):public string
SolrQuery::getTimeAllowed(void):public int
SolrQuery::removeExpandFilterQuery(string $fq):public SolrQuery
SolrQuery::removeExpandSortField(string $field):public SolrQuery
SolrQuery::removeFacetDateField(string $field):public SolrQuery
SolrQuery::removeFacetDateOther(string $value [, string $field_override]):public SolrQuery
SolrQuery::removeFacetField(string $field):public SolrQuery
SolrQuery::removeFacetQuery(string $value):public SolrQuery
SolrQuery::removeField(string $field):public SolrQuery
SolrQuery::removeFilterQuery(string $fq):public SolrQuery
SolrQuery::removeHighlightField(string $field):public SolrQuery
SolrQuery::removeMltField(string $field):public SolrQuery
SolrQuery::removeMltQueryField(string $queryField):public SolrQuery
SolrQuery::removeSortField(string $field):public SolrQuery
SolrQuery::removeStatsFacet(string $value):public SolrQuery
SolrQuery::removeStatsField(string $field):public SolrQuery
SolrQuery::setEchoHandler(bool $flag):public SolrQuery
SolrQuery::setEchoParams(string $type):public SolrQuery
SolrQuery::setExpand(bool $value):public SolrQuery
SolrQuery::setExpandQuery(string $q):public SolrQuery
SolrQuery::setExpandRows(int $value):public SolrQuery
SolrQuery::setExplainOther(string $query):public SolrQuery
SolrQuery::setFacet(bool $flag):public SolrQuery
SolrQuery::setFacetDateEnd(string $value [, string $field_override]):public SolrQuery
SolrQuery::setFacetDateGap(string $value [, string $field_override]):public SolrQuery
SolrQuery::setFacetDateHardEnd(bool $value [, string $field_override]):public SolrQuery
SolrQuery::setFacetDateStart(string $value [, string $field_override]):public SolrQuery
SolrQuery::setFacetEnumCacheMinDefaultFrequency(int $frequency [, string $field_override]):public SolrQuery
SolrQuery::setFacetLimit(int $limit [, string $field_override]):public SolrQuery
SolrQuery::setFacetMethod(string $method [, string $field_override]):public SolrQuery
SolrQuery::setFacetMinCount(int $mincount [, string $field_override]):public SolrQuery
SolrQuery::setFacetMissing(bool $flag [, string $field_override]):public SolrQuery
SolrQuery::setFacetOffset(int $offset [, string $field_override]):public SolrQuery
SolrQuery::setFacetPrefix(string $prefix [, string $field_override]):public SolrQuery
SolrQuery::setFacetSort(int $facetSort [, string $field_override]):public SolrQuery
SolrQuery::setGroup(bool $value):public SolrQuery
SolrQuery::setGroupCachePercent(int $percent):public SolrQuery
SolrQuery::setGroupFacet(bool $value):public SolrQuery
SolrQuery::setGroupFormat(string $value):public SolrQuery
SolrQuery::setGroupLimit(int $value):public SolrQuery
SolrQuery::setGroupMain(string $value):public SolrQuery
SolrQuery::setGroupNGroups(bool $value):public SolrQuery
SolrQuery::setGroupOffset(int $value):public SolrQuery
SolrQuery::setGroupTruncate(bool $value):public SolrQuery
SolrQuery::setHighlight(bool $flag):public SolrQuery
SolrQuery::setHighlightAlternateField(string $field [, string $field_override]):public SolrQuery
SolrQuery::setHighlightFormatter(string $formatter [, string $field_override]):public SolrQuery
SolrQuery::setHighlightFragmenter(string $fragmenter [, string $field_override]):public SolrQuery
SolrQuery::setHighlightFragsize(int $size [, string $field_override]):public SolrQuery
SolrQuery::setHighlightHighlightMultiTerm(bool $flag):public SolrQuery
SolrQuery::setHighlightMaxAlternateFieldLength(int $fieldLength [, string $field_override]):public SolrQuery
SolrQuery::setHighlightMaxAnalyzedChars(int $value):public SolrQuery
SolrQuery::setHighlightMergeContiguous(bool $flag [, string $field_override]):public SolrQuery
SolrQuery::setHighlightRegexMaxAnalyzedChars(int $maxAnalyzedChars):public SolrQuery
SolrQuery::setHighlightRegexPattern(string $value):public SolrQuery
SolrQuery::setHighlightRegexSlop(float $factor):public SolrQuery
SolrQuery::setHighlightRequireFieldMatch(bool $flag):public SolrQuery
SolrQuery::setHighlightSimplePost(string $simplePost [, string $field_override]):public SolrQuery
SolrQuery::setHighlightSimplePre(string $simplePre [, string $field_override]):public SolrQuery
SolrQuery::setHighlightSnippets(int $value [, string $field_override]):public SolrQuery
SolrQuery::setHighlightUsePhraseHighlighter(bool $flag):public SolrQuery
SolrQuery::setMlt(bool $flag):public SolrQuery
SolrQuery::setMltBoost(bool $flag):public SolrQuery
SolrQuery::setMltCount(int $count):public SolrQuery
SolrQuery::setMltMaxNumQueryTerms(int $value):public SolrQuery
SolrQuery::setMltMaxNumTokens(int $value):public SolrQuery
SolrQuery::setMltMaxWordLength(int $maxWordLength):public SolrQuery
SolrQuery::setMltMinDocFrequency(int $minDocFrequency):public SolrQuery
SolrQuery::setMltMinTermFrequency(int $minTermFrequency):public SolrQuery
SolrQuery::setMltMinWordLength(int $minWordLength):public SolrQuery
SolrQuery::setOmitHeader(bool $flag):public SolrQuery
SolrQuery::setQuery(string $query):public SolrQuery
SolrQuery::setRows(int $rows):public SolrQuery
SolrQuery::setShowDebugInfo(bool $flag):public SolrQuery
SolrQuery::setStart(int $start):public SolrQuery
SolrQuery::setStats(bool $flag):public SolrQuery
SolrQuery::setTerms(bool $flag):public SolrQuery
SolrQuery::setTermsField(string $fieldname):public SolrQuery
SolrQuery::setTermsIncludeLowerBound(bool $flag):public SolrQuery
SolrQuery::setTermsIncludeUpperBound(bool $flag):public SolrQuery
SolrQuery::setTermsLimit(int $limit):public SolrQuery
SolrQuery::setTermsLowerBound(string $lowerBound):public SolrQuery
SolrQuery::setTermsMaxCount(int $frequency):public SolrQuery
SolrQuery::setTermsMinCount(int $frequency):public SolrQuery
SolrQuery::setTermsPrefix(string $prefix):public SolrQuery
SolrQuery::setTermsReturnRaw(bool $flag):public SolrQuery
SolrQuery::setTermsSort(int $sortType):public SolrQuery
SolrQuery::setTermsUpperBound(string $upperBound):public SolrQuery
SolrQuery::setTimeAllowed(int $timeAllowed):public SolrQuery
SolrQueryResponse::__construct(void):public
SolrQueryResponse::__destruct(void):public void
SolrResponse::getDigestedResponse(void):public string
SolrResponse::getHttpStatus(void):public int
SolrResponse::getHttpStatusMessage(void):public string
SolrResponse::getRawRequest(void):public string
SolrResponse::getRawRequestHeaders(void):public string
SolrResponse::getRawResponse(void):public string
SolrResponse::getRawResponseHeaders(void):public string
SolrResponse::getRequestUrl(void):public string
SolrResponse::getResponse(void):public SolrObject
SolrResponse::setParseMode([int $parser_mode = 0]):public bool
SolrResponse::success(void):public bool
SolrServerException::getInternalInfo(void):public array
SolrUpdateResponse::__construct(void):public
SolrUpdateResponse::__destruct(void):public void
SolrUtils::digestXmlResponse(string $xmlresponse [, int $parse_mode = 0]):public static SolrObject
SolrUtils::escapeQueryChars(string $str):public static string
SolrUtils::getSolrVersion(void):public static string
SolrUtils::queryPhrase(string $str):public static string
SphinxClient::addQuery(string $query [, string $index = "*" [, string $comment = ""]]):public int
SphinxClient::buildExcerpts(array $docs, string $index, string $words [, array $opts]):public array
SphinxClient::buildKeywords(string $query, string $index, bool $hits):public array
SphinxClient::close(void):public bool
SphinxClient::__construct(void):public
SphinxClient::escapeString(string $string):public string
SphinxClient::getLastError(void):public string
SphinxClient::getLastWarning(void):public string
SphinxClient::open(void):public bool
SphinxClient::query(string $query [, string $index = "*" [, string $comment = ""]]):public array
SphinxClient::resetFilters(void):public void
SphinxClient::resetGroupBy(void):public void
SphinxClient::runQueries(void):public array
SphinxClient::setArrayResult(bool $array_result = FALSE):public bool
SphinxClient::setConnectTimeout(float $timeout):public bool
SphinxClient::setFieldWeights(array $weights):public bool
SphinxClient::setFilter(string $attribute, array $values [, bool $exclude = FALSE]):public bool
SphinxClient::setFilterFloatRange(string $attribute, float $min, float $max [, bool $exclude = FALSE]):public bool
SphinxClient::setFilterRange(string $attribute, int $min, int $max [, bool $exclude = FALSE]):public bool
SphinxClient::setGeoAnchor(string $attrlat, string $attrlong, float $latitude, float $longitude):public bool
SphinxClient::setGroupBy(string $attribute, int $func [, string $groupsort = "@group desc"]):public bool
SphinxClient::setGroupDistinct(string $attribute):public bool
SphinxClient::setIDRange(int $min, int $max):public bool
SphinxClient::setIndexWeights(array $weights):public bool
SphinxClient::setLimits(int $offset, int $limit [, int $max_matches = 0 [, int $cutoff = 0]]):public bool
SphinxClient::setMatchMode(int $mode):public bool
SphinxClient::setMaxQueryTime(int $qtime):public bool
SphinxClient::setOverride(string $attribute, int $type, array $values):public bool
SphinxClient::setRankingMode(int $ranker):public bool
SphinxClient::setRetries(int $count [, int $delay = 0]):public bool
SphinxClient::setSelect(string $clause):public bool
SphinxClient::setServer(string $server, int $port):public bool
SphinxClient::setSortMode(int $mode [, string $sortby]):public bool
SphinxClient::status(void):public array
SphinxClient::updateAttributes(string $index, array $attributes, array $values [, bool $mva = FALSE]):public int
SplDoublyLinkedList::add(mixed $index, mixed $newval):public void
SplDoublyLinkedList::bottom(void):public mixed
SplDoublyLinkedList::__construct(void):public
SplDoublyLinkedList::count(void):public int
SplDoublyLinkedList::current(void):public mixed
SplDoublyLinkedList::getIteratorMode(void):public int
SplDoublyLinkedList::isEmpty(void):public bool
SplDoublyLinkedList::key(void):public mixed
SplDoublyLinkedList::next(void):public void
SplDoublyLinkedList::offsetExists(mixed $index):public bool
SplDoublyLinkedList::offsetGet(mixed $index):public mixed
SplDoublyLinkedList::offsetSet(mixed $index, mixed $newval):public void
SplDoublyLinkedList::offsetUnset(mixed $index):public void
SplDoublyLinkedList::pop(void):public mixed
SplDoublyLinkedList::prev(void):public void
SplDoublyLinkedList::push(mixed $value):public void
SplDoublyLinkedList::rewind(void):public void
SplDoublyLinkedList::serialize(void):public string
SplDoublyLinkedList::setIteratorMode(int $mode):public void
SplDoublyLinkedList::shift(void):public mixed
SplDoublyLinkedList::top(void):public mixed
SplDoublyLinkedList::unserialize(string $serialized):public void
SplDoublyLinkedList::unshift(mixed $value):public void
SplDoublyLinkedList::valid(void):public bool
SplEnum::getConstList([bool $include_default = FALSE]):public array
SplFileInfo::__construct(string $file_name):public
SplFileInfo::getATime(void):public int
SplFileInfo::getBasename([string $suffix]):public string
SplFileInfo::getCTime(void):public int
SplFileInfo::getExtension(void):public string
SplFileInfo::getFileInfo([string $class_name]):public SplFileInfo
SplFileInfo::getFilename(void):public string
SplFileInfo::getGroup(void):public int
SplFileInfo::getInode(void):public int
SplFileInfo::getLinkTarget(void):public string
SplFileInfo::getMTime(void):public int
SplFileInfo::getOwner(void):public int
SplFileInfo::getPath(void):public string
SplFileInfo::getPathInfo([string $class_name]):public SplFileInfo
SplFileInfo::getPathname(void):public string
SplFileInfo::getPerms(void):public int
SplFileInfo::getRealPath(void):public string
SplFileInfo::getSize(void):public int
SplFileInfo::getType(void):public string
SplFileInfo::isDir(void):public bool
SplFileInfo::isExecutable(void):public bool
SplFileInfo::isFile(void):public bool
SplFileInfo::isLink(void):public bool
SplFileInfo::isReadable(void):public bool
SplFileInfo::isWritable(void):public bool
SplFileInfo::openFile([string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context = NULL]]]):public SplFileObject
SplFileInfo::setFileClass([string $class_name = "SplFileObject"]):public void
SplFileInfo::setInfoClass([string $class_name = "SplFileInfo"]):public void
SplFileInfo::__toString(void):public void
SplFileObject::__construct(string $filename [, string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context]]]):public
SplFileObject::current(void):public string|array
SplFileObject::eof(void):public bool
SplFileObject::fflush(void):public bool
SplFileObject::fgetc(void):public string
SplFileObject::fgetcsv([string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]]):public array
SplFileObject::fgets(void):public string
SplFileObject::fgetss([string $allowable_tags]):public string
SplFileObject::flock(int $operation [, int &$wouldblock]):public bool
SplFileObject::fpassthru(void):public int
SplFileObject::fputcsv(array $fields [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\"]]]):public int
SplFileObject::fread(int $length):public string
SplFileObject::fscanf(string $format [, mixed &$...]):public mixed
SplFileObject::fseek(int $offset [, int $whence = SEEK_SET]):public int
SplFileObject::fstat(void):public array
SplFileObject::ftell(void):public int
SplFileObject::ftruncate(int $size):public bool
SplFileObject::fwrite(string $str [, int $length]):public int
SplFileObject::getChildren(void):public void
SplFileObject::getCsvControl(void):public array
SplFileObject::getCurrentLine(void):public string
SplFileObject::getFlags(void):public int
SplFileObject::getMaxLineLen(void):public int
SplFileObject::hasChildren(void):public bool
SplFileObject::key(void):public int
SplFileObject::next(void):public void
SplFileObject::rewind(void):public void
SplFileObject::seek(int $line_pos):public void
SplFileObject::setCsvControl([string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]]):public void
SplFileObject::setFlags(int $flags):public void
SplFileObject::setMaxLineLen(int $max_len):public void
SplFileObject::__toString(void):public void
SplFileObject::valid(void):public bool
SplFixedArray::__construct([int $size = 0]):public
SplFixedArray::count(void):public int
SplFixedArray::current(void):public mixed
SplFixedArray::fromArray(array $array [, bool $save_indexes = TRUE]):public static SplFixedArray
SplFixedArray::getSize(void):public int
SplFixedArray::key(void):public int
SplFixedArray::next(void):public void
SplFixedArray::offsetExists(int $index):public bool
SplFixedArray::offsetGet(int $index):public mixed
SplFixedArray::offsetSet(int $index, mixed $newval):public void
SplFixedArray::offsetUnset(int $index):public void
SplFixedArray::rewind(void):public void
SplFixedArray::setSize(int $size):public bool
SplFixedArray::toArray(void):public array
SplFixedArray::valid(void):public bool
SplFixedArray::__wakeup(void):public void
SplHeap::compare(mixed $value1, mixed $value2):abstract protected int
SplHeap::__construct(void):public
SplHeap::count(void):public int
SplHeap::current(void):public mixed
SplHeap::extract(void):public mixed
SplHeap::insert(mixed $value):public void
SplHeap::isCorrupted(void):public bool
SplHeap::isEmpty(void):public bool
SplHeap::key(void):public mixed
SplHeap::next(void):public void
SplHeap::recoverFromCorruption(void):public void
SplHeap::rewind(void):public void
SplHeap::top(void):public mixed
SplHeap::valid(void):public bool
SplMaxHeap::compare(mixed $value1, mixed $value2):protected int
SplMinHeap::compare(mixed $value1, mixed $value2):protected int
SplObjectStorage::addAll(SplObjectStorage $storage):public void
SplObjectStorage::attach(object $object [, mixed $data = NULL]):public void
SplObjectStorage::contains(object $object):public bool
SplObjectStorage::count(void):public int
SplObjectStorage::current(void):public object
SplObjectStorage::detach(object $object):public void
SplObjectStorage::getHash(object $object):public string
SplObjectStorage::getInfo(void):public mixed
SplObjectStorage::key(void):public int
SplObjectStorage::next(void):public void
SplObjectStorage::offsetExists(object $object):public bool
SplObjectStorage::offsetGet(object $object):public mixed
SplObjectStorage::offsetSet(object $object [, mixed $data = NULL]):public void
SplObjectStorage::offsetUnset(object $object):public void
SplObjectStorage::removeAll(SplObjectStorage $storage):public void
SplObjectStorage::removeAllExcept(SplObjectStorage $storage):public void
SplObjectStorage::rewind(void):public void
SplObjectStorage::serialize(void):public string
SplObjectStorage::setInfo(mixed $data):public void
SplObjectStorage::unserialize(string $serialized):public void
SplObjectStorage::valid(void):public bool
SplObserver::update(SplSubject $subject):abstract public void
SplPriorityQueue::compare(mixed $priority1, mixed $priority2):public int
SplPriorityQueue::__construct(void):public
SplPriorityQueue::count(void):public int
SplPriorityQueue::current(void):public mixed
SplPriorityQueue::extract(void):public mixed
SplPriorityQueue::getExtractFlags(void):public int
SplPriorityQueue::insert(mixed $value, mixed $priority):public void
SplPriorityQueue::isCorrupted(void):public bool
SplPriorityQueue::isEmpty(void):public bool
SplPriorityQueue::key(void):public mixed
SplPriorityQueue::next(void):public void
SplPriorityQueue::recoverFromCorruption(void):public void
SplPriorityQueue::rewind(void):public void
SplPriorityQueue::setExtractFlags(int $flags):public void
SplPriorityQueue::top(void):public mixed
SplPriorityQueue::valid(void):public bool
SplQueue::__construct(void)
SplQueue::dequeue(void):mixed
SplQueue::enqueue(mixed $value):void
SplQueue::setIteratorMode(int $mode):void
SplStack::__construct(void)
SplStack::setIteratorMode(int $mode):void
SplSubject::attach(SplObserver $observer):abstract public void
SplSubject::detach(SplObserver $observer):abstract public void
SplSubject::notify(void):abstract public void
SplTempFileObject::__construct([int $max_memory]):public
SplType::__construct([mixed $initial_value [, bool $strict]])
Spoofchecker::areConfusable(string $str1, string $str2 [, string &$error]):public bool
Spoofchecker::__construct(void):public
Spoofchecker::isSuspicious(string $text [, string &$error]):public bool
Spoofchecker::setAllowedLocales(string $locale_list):public void
Spoofchecker::setChecks(int $checks):public void
SQLite3::busyTimeout(int $msecs):public bool
SQLite3::changes(void):public int
SQLite3::close(void):public bool
SQLite3::__construct(string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = NULL]]):public
SQLite3::createAggregate(string $name, mixed $step_callback, mixed $final_callback [, int $argument_count = -1]):public bool
SQLite3::createCollation(string $name, callable $callback):public bool
SQLite3::createFunction(string $name, mixed $callback [, int $argument_count = -1 [, int $flags = 0]]):public bool
SQLite3::enableExceptions([bool $enableExceptions = FALSE]):bool
SQLite3::escapeString(string $value):public static string
SQLite3::exec(string $query):public bool
SQLite3::lastErrorCode(void):public int
SQLite3::lastErrorMsg(void):public string
SQLite3::lastInsertRowID(void):public int
SQLite3::loadExtension(string $shared_library):public bool
SQLite3::open(string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = NULL]]):public void
SQLite3::openBlob(string $table, string $column, int $rowid [, string $dbname = "main" [, int $flags = SQLITE3_OPEN_READONLY]]):public resource
SQLite3::prepare(string $query):public SQLite3Stmt
SQLite3::query(string $query):public SQLite3Result
SQLite3::querySingle(string $query [, bool $entire_row = FALSE]):public mixed
SQLite3::version(void):public static array
SQLite3Result::columnName(int $column_number):public string
SQLite3Result::columnType(int $column_number):public int
SQLite3Result::fetchArray([int $mode = SQLITE3_BOTH]):public array
SQLite3Result::finalize(void):public bool
SQLite3Result::numColumns(void):public int
SQLite3Result::reset(void):public bool
SQLite3Stmt::bindParam(mixed $sql_param, mixed &$param [, int $type]):public bool
SQLite3Stmt::bindValue(mixed $sql_param, mixed $value [, int $type]):public bool
SQLite3Stmt::clear(void):public bool
SQLite3Stmt::close(void):public bool
SQLite3Stmt::execute(void):public SQLite3Result
SQLite3Stmt::paramCount(void):public int
SQLite3Stmt::readOnly(void):public bool
SQLite3Stmt::reset(void):public bool
Stomp::abort(string $transaction_id [, array $headers]):public bool
stomp_abort(resource $link, string $transaction_id [, array $headers]):bool
Stomp::ack(mixed $msg [, array $headers]):public bool
stomp_ack(resource $link, mixed $msg [, array $headers]):bool
Stomp::begin(string $transaction_id [, array $headers]):public bool
stomp_begin(resource $link, string $transaction_id [, array $headers]):bool
Stomp::commit(string $transaction_id [, array $headers]):public bool
stomp_commit(resource $link, string $transaction_id [, array $headers]):bool
Stomp::__construct([string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers]]]]):public
stomp_connect([string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers]]]]):resource
Stomp::__destruct(void):public bool
stomp_close(resource $link):bool
Stomp::error(void):public string
stomp_error(resource $link):string
StompException::getDetails(void):public string
Stomp::getReadTimeout(void):public array
stomp_get_read_timeout(resource $link):array
Stomp::getSessionId(void):public string
stomp_get_session_id(resource $link):string
Stomp::hasFrame(void):public bool
stomp_has_frame(resource $link):bool
Stomp::readFrame([string $class_name = "stompFrame"]):public stompframe
stomp_read_frame(resource $link):array
Stomp::send(string $destination, mixed $msg [, array $headers]):public bool
stomp_send(resource $link, string $destination, mixed $msg [, array $headers]):bool
Stomp::setReadTimeout(int $seconds [, int $microseconds]):public void
stomp_set_read_timeout(resource $link, int $seconds [, int $microseconds]):void
Stomp::subscribe(string $destination [, array $headers]):public bool
stomp_subscribe(resource $link, string $destination [, array $headers]):bool
Stomp::unsubscribe(string $destination [, array $headers]):public bool
stomp_unsubscribe(resource $link, string $destination [, array $headers]):bool
StompFrame::__construct([string $command [, array $headers [, string $body]]])
streamWrapper::__construct(void)
streamWrapper::__destruct(void)
streamWrapper::dir_closedir(void):public bool
streamWrapper::dir_opendir(string $path, int $options):public bool
streamWrapper::dir_readdir(void):public string
streamWrapper::dir_rewinddir(void):public bool
streamWrapper::mkdir(string $path, int $mode, int $options):public bool
streamWrapper::rename(string $path_from, string $path_to):public bool
streamWrapper::rmdir(string $path, int $options):public bool
streamWrapper::stream_cast(int $cast_as):public resource
streamWrapper::stream_close(void):public void
streamWrapper::stream_eof(void):public bool
streamWrapper::stream_flush(void):public bool
streamWrapper::stream_lock(int $operation):public bool
streamWrapper::stream_metadata(string $path, int $option, mixed $value):public bool
streamWrapper::stream_open(string $path, string $mode, int $options, string &$opened_path):public bool
streamWrapper::stream_read(int $count):public string
streamWrapper::stream_seek(int $offset, int $whence = SEEK_SET):public bool
streamWrapper::stream_set_option(int $option, int $arg1, int $arg2):public bool
streamWrapper::stream_stat(void):public array
streamWrapper::stream_tell(void):public int
streamWrapper::stream_truncate(int $new_size):public bool
streamWrapper::stream_write(string $data):public int
streamWrapper::unlink(string $path):public bool
streamWrapper::url_stat(string $path, int $flags):public array
SVM::__construct(void):public
SVM::crossvalidate(array $problem, int $number_of_folds):public float
SVM::getOptions(void):public array
SVM::setOptions(array $params):public bool
SVM::train(array $problem [, array $weights]):public SVMModel
SVMModel::checkProbabilityModel(void):public bool
SVMModel::__construct([string $filename]):public
SVMModel::getLabels(void):public array
SVMModel::getNrClass(void):public int
SVMModel::getSvmType(void):public int
SVMModel::getSvrProbability(void):public float
SVMModel::load(string $filename):public bool
SVMModel::predict_probability(array $data):public float
SVMModel::predict(array $data):public float
SVMModel::save(string $filename):public bool
SWFAction::__construct(string $script)
SWFBitmap::__construct(mixed $file [, mixed $alphafile])
SWFBitmap::getHeight(void):float
SWFBitmap::getWidth(void):float
SWFButton::addAction(SWFAction $action, int $flags):void
SWFButton::addASound(SWFSound $sound, int $flags):SWFSoundInstance
SWFButton::addShape(SWFShape $shape, int $flags):void
SWFButton::__construct(void)
SWFButton::setAction(SWFAction $action):void
SWFButton::setDown(SWFShape $shape):void
SWFButton::setHit(SWFShape $shape):void
SWFButton::setMenu(int $flag):void
SWFButton::setOver(SWFShape $shape):void
SWFButton::setUp(SWFShape $shape):void
SWFDisplayItem::addAction(SWFAction $action, int $flags):void
SWFDisplayItem::addColor(int $red, int $green, int $blue [, int $a]):void
SWFDisplayItem::endMask(void):void
SWFDisplayItem::getRot(void):float
SWFDisplayItem::getX(void):float
SWFDisplayItem::getXScale(void):float
SWFDisplayItem::getXSkew(void):float
SWFDisplayItem::getY(void):float
SWFDisplayItem::getYScale(void):float
SWFDisplayItem::getYSkew(void):float
SWFDisplayItem::move(float $dx, float $dy):void
SWFDisplayItem::moveTo(float $x, float $y):void
SWFDisplayItem::multColor(float $red, float $green, float $blue [, float $a]):void
SWFDisplayItem::remove(void):void
SWFDisplayItem::rotate(float $angle):void
SWFDisplayItem::rotateTo(float $angle):void
SWFDisplayItem::scale(float $dx, float $dy):void
SWFDisplayItem::scaleTo(float $x [, float $y]):void
SWFDisplayItem::setDepth(int $depth):void
SWFDisplayItem::setMaskLevel(int $level):void
SWFDisplayItem::setMatrix(float $a, float $b, float $c, float $d, float $x, float $y):void
SWFDisplayItem::setName(string $name):void
SWFDisplayItem::setRatio(float $ratio):void
SWFDisplayItem::skewX(float $ddegrees):void
SWFDisplayItem::skewXTo(float $degrees):void
SWFDisplayItem::skewY(float $ddegrees):void
SWFDisplayItem::skewYTo(float $degrees):void
SWFFill::moveTo(float $x, float $y):void
SWFFill::rotateTo(float $angle):void
SWFFill::scaleTo(float $x [, float $y]):void
SWFFill::skewXTo(float $x):void
SWFFill::skewYTo(float $y):void
SWFFont::__construct(string $filename)
SWFFont::getAscent(void):float
SWFFont::getDescent(void):float
SWFFont::getLeading(void):float
SWFFont::getShape(int $code):string
SWFFont::getUTF8Width(string $string):float
SWFFont::getWidth(string $string):float
SWFFontChar::addChars(string $char):void
SWFFontChar::addUTF8Chars(string $char):void
SWFGradient::addEntry(float $ratio, int $red, int $green, int $blue [, int $alpha = 255]):void
SWFGradient::__construct(void)
SWFMorph::__construct(void)
SWFMorph::getShape1(void):SWFShape
SWFMorph::getShape2(void):SWFShape
SWFMovie::add(object $instance):mixed
SWFMovie::addExport(SWFCharacter $char, string $name):void
SWFMovie::addFont(SWFFont $font):mixed
SWFMovie::__construct([int $version])
SWFMovie::importChar(string $libswf, string $name):SWFSprite
SWFMovie::importFont(string $libswf, string $name):SWFFontChar
SWFMovie::labelFrame(string $label):void
SWFMovie::nextFrame(void):void
SWFMovie::output([int $compression]):int
SWFMovie::remove(object $instance):void
SWFMovie::save(string $filename [, int $compression = -1]):int
SWFMovie::saveToFile(resource $x [, int $compression = -1]):int
SWFMovie::setbackground(int $red, int $green, int $blue):void
SWFMovie::setDimension(float $width, float $height):void
SWFMovie::setFrames(int $number):void
SWFMovie::setRate(float $rate):void
SWFMovie::startSound(SWFSound $sound):SWFSoundInstance
SWFMovie::stopSound(SWFSound $sound):void
SWFMovie::streamMP3(mixed $mp3file [, float $skip = 0]):int
SWFMovie::writeExports(void):void
SWFPrebuiltClip::__construct(mixed $file)
SWFShape::addFill(int $red, int $green, int $blue [, int $alpha = 255]):SWFFill
SWFShape::__construct(void)
SWFShape::drawArc(float $r, float $startAngle, float $endAngle):void
SWFShape::drawCircle(float $r):void
SWFShape::drawCubic(float $bx, float $by, float $cx, float $cy, float $dx, float $dy):int
SWFShape::drawCubicTo(float $bx, float $by, float $cx, float $cy, float $dx, float $dy):int
SWFShape::drawCurve(float $controldx, float $controldy, float $anchordx, float $anchordy [, float $targetdx], float $targetdy):int
SWFShape::drawCurveTo(float $controlx, float $controly, float $anchorx, float $anchory [, float $targetx], float $targety):int
SWFShape::drawGlyph(SWFFont $font, string $character [, int $size]):void
SWFShape::drawLine(float $dx, float $dy):void
SWFShape::drawLineTo(float $x, float $y):void
SWFShape::movePen(float $dx, float $dy):void
SWFShape::movePenTo(float $x, float $y):void
SWFShape::setLeftFill(SWFGradient $fill):void
SWFShape::setLine(SWFShape $shape):void
SWFShape::setRightFill(SWFGradient $fill):void
SWFSound::__construct(string $filename [, int $flags = 0])
SWFSoundInstance::loopCount(int $point):void
SWFSoundInstance::loopInPoint(int $point):void
SWFSoundInstance::loopOutPoint(int $point):void
SWFSoundInstance::noMultiple(void):void
SWFSprite::add(object $object):void
SWFSprite::__construct(void)
SWFSprite::labelFrame(string $label):void
SWFSprite::nextFrame(void):void
SWFSprite::remove(object $object):void
SWFSprite::setFrames(int $number):void
SWFSprite::startSound(SWFSound $sount):SWFSoundInstance
SWFSprite::stopSound(SWFSound $sount):void
SWFText::addString(string $string):void
SWFText::addUTF8String(string $text):void
SWFText::__construct(void)
SWFText::getAscent(void):float
SWFText::getDescent(void):float
SWFText::getLeading(void):float
SWFText::getUTF8Width(string $string):float
SWFText::getWidth(string $string):float
SWFText::moveTo(float $x, float $y):void
SWFText::setColor(int $red, int $green, int $blue [, int $a = 255]):void
SWFText::setFont(SWFFont $font):void
SWFText::setHeight(float $height):void
SWFText::setSpacing(float $spacing):void
SWFTextField::addChars(string $chars):void
SWFTextField::addString(string $string):void
SWFTextField::align(int $alignement):void
SWFTextField::__construct([int $flags])
SWFTextField::setBounds(float $width, float $height):void
SWFTextField::setColor(int $red, int $green, int $blue [, int $a = 255]):void
SWFTextField::setFont(SWFFont $font):void
SWFTextField::setHeight(float $height):void
SWFTextField::setIndentation(float $width):void
SWFTextField::setLeftMargin(float $width):void
SWFTextField::setLineSpacing(float $height):void
SWFTextField::setMargins(float $left, float $right):void
SWFTextField::setName(string $name):void
SWFTextField::setPadding(float $padding):void
SWFTextField::setRightMargin(float $width):void
SWFVideoStream::__construct([string $file])
SWFVideoStream::getNumFrames(void):int
SWFVideoStream::setDimension(int $x, int $y):void
Swish::__construct(string $index_names):void
Swish::getMetaList(string $index_name):array
Swish::getPropertyList(string $index_name):array
Swish::prepare([string $query]):object
Swish::query(string $query):object
SwishResult::getMetaList(void):array
SwishResult::stem(string $word):array
SwishResults::getParsedWords(string $index_name):array
SwishResults::getRemovedStopwords(string $index_name):array
SwishResults::nextResult(void):object
SwishResults::seekResult(int $position):int
SwishSearch::execute([string $query]):object
SwishSearch::resetLimit(void):void
SwishSearch::setLimit(string $property, string $low, string $high):void
SwishSearch::setPhraseDelimiter(string $delimiter):void
SwishSearch::setSort(string $sort):void
SwishSearch::setStructure(int $structure):void
Swoole\Async::dnsLookup(string $hostname, callable $callback):public static void
Swoole\Async::read(string $filename, callable $callback [, integer $chunk_size [, integer $offset]]):public static bool
Swoole\Async::readFile(string $filename, callable $callback):public static void
Swoole\Async::set(array $settings):public static void
Swoole\Async::write(string $filename, string $content [, integer $offset [, callable $callback]]):public static void
Swoole\Async::writeFile(string $filename, string $content [, callable $callback [, string $flags]]):public static void
Swoole\Atomic::add([integer $add_value]):public integer
Swoole\Atomic::cmpset(integer $cmp_value, integer $new_value):public integer
Swoole\Atomic::__construct([integer $value]):public
Swoole\Atomic::get(void):public integer
Swoole\Atomic::set(integer $value):public integer
Swoole\Atomic::sub([integer $sub_value]):public integer
Swoole\Buffer::append(string $data):public integer
Swoole\Buffer::clear(void):public void
Swoole\Buffer::__construct([integer $size]):public
Swoole\Buffer::__destruct(void):public void
Swoole\Buffer::expand(integer $size):public integer
Swoole\Buffer::read(integer $offset, integer $length):public string
Swoole\Buffer::recycle(void):public void
Swoole\Buffer::substr(integer $offset [, integer $length [, bool $remove]]):public string
Swoole\Buffer::__toString(void):public string
Swoole\Buffer::write(integer $offset, string $data):public void
Swoole\Channel::__construct(string $size):public
Swoole\Channel::__destruct(void):public void
Swoole\Channel::pop(void):public mixed
Swoole\Channel::push(string $data):public bool
Swoole\Channel::stats(void):public array
Swoole\Client::close([bool $force]):public bool
Swoole\Client::connect(string $host [, integer $port [, integer $timeout [, integer $flag]]]):public bool
Swoole\Client::__construct(int $sock_type [, integer $is_async]):public
Swoole\Client::__destruct(void):public void
Swoole\Client::getpeername(void):public array
Swoole\Client::getsockname(void):public array
Swoole\Client::isConnected(void):public bool
Swoole\Client::on(string $event, callable $callback):public void
Swoole\Client::pause(void):public void
Swoole\Client::pipe(string $socket):public void
Swoole\Client::recv([string $size [, string $flag]]):public void
Swoole\Client::resume(void):public void
Swoole\Client::send(string $data [, string $flag]):public integer
Swoole\Client::sendfile(string $filename [, int $offset]):public boolean
Swoole\Client::sendto(string $ip, integer $port, string $data):public boolean
Swoole\Client::set(array $settings):public void
Swoole\Client::sleep(void):public void
Swoole\Client::wakeup(void):public void
Swoole\Connection\Iterator::count(void):public int
Swoole\Connection\Iterator::current(void):public Connection
Swoole\Connection\Iterator::key(void):public int
Swoole\Connection\Iterator::next(void):public Connection
Swoole\Connection\Iterator::offsetExists(int $index):public boolean
Swoole\Connection\Iterator::offsetGet(string $index):public Connection
Swoole\Connection\Iterator::offsetSet(int $offset, mixed $connection):public void
Swoole\Connection\Iterator::offsetUnset(int $offset):public void
Swoole\Connection\Iterator::rewind(void):public void
Swoole\Connection\Iterator::valid(void):public boolean
Swoole\Coroutine\Client::close(void):public ReturnType
Swoole\Coroutine\Client::connect(void):public ReturnType
Swoole\Coroutine\Client::__construct(void):public
Swoole\Coroutine\Client::__destruct(void):public ReturnType
Swoole\Coroutine\Client::getpeername(void):public ReturnType
Swoole\Coroutine\Client::getsockname(void):public ReturnType
Swoole\Coroutine\Client::isConnected(void):public ReturnType
Swoole\Coroutine\Client::recv(void):public ReturnType
Swoole\Coroutine\Client::send(void):public ReturnType
Swoole\Coroutine\Client::sendfile(void):public ReturnType
Swoole\Coroutine\Client::sendto(void):public ReturnType
Swoole\Coroutine\Client::set(void):public ReturnType
Swoole\Coroutine\Http\Client::addFile(void):public ReturnType
Swoole\Coroutine\Http\Client::close(void):public ReturnType
Swoole\Coroutine\Http\Client::__construct(void):public
Swoole\Coroutine\Http\Client::__destruct(void):public ReturnType
Swoole\Coroutine\Http\Client::execute(void):public ReturnType
Swoole\Coroutine\Http\Client::get(void):public ReturnType
Swoole\Coroutine\Http\Client::getDefer(void):public ReturnType
Swoole\Coroutine\Http\Client::isConnected(void):public ReturnType
Swoole\Coroutine\Http\Client::post(void):public ReturnType
Swoole\Coroutine\Http\Client::recv(void):public ReturnType
Swoole\Coroutine\Http\Client::set(void):public ReturnType
Swoole\Coroutine\Http\Client::setCookies(void):public ReturnType
Swoole\Coroutine\Http\Client::setData(void):public ReturnType
Swoole\Coroutine\Http\Client::setDefer(void):public ReturnType
Swoole\Coroutine\Http\Client::setHeaders(void):public ReturnType
Swoole\Coroutine\Http\Client::setMethod(void):public ReturnType
Swoole\Coroutine\MySQL::close(void):public ReturnType
Swoole\Coroutine\MySQL::connect(void):public ReturnType
Swoole\Coroutine\MySQL::__construct(void):public
Swoole\Coroutine\MySQL::__destruct(void):public ReturnType
Swoole\Coroutine\MySQL::getDefer(void):public ReturnType
Swoole\Coroutine\MySQL::query(void):public ReturnType
Swoole\Coroutine\MySQL::recv(void):public ReturnType
Swoole\Coroutine\MySQL::setDefer(void):public ReturnType
Swoole\Coroutine::call_user_func_array(callable $callback, array $param_array):public static mixed
Swoole\Coroutine::call_user_func(callable $callback [, mixed $parameter [, mixed $...]]):public static mixed
Swoole\Coroutine::cli_wait(void):public static ReturnType
Swoole\Coroutine::create(void):public static ReturnType
Swoole\Coroutine::getuid(void):public static ReturnType
Swoole\Coroutine::resume(void):public static ReturnType
Swoole\Coroutine::suspend(void):public static ReturnType
Swoole\Event::add(int $fd, callable $read_callback [, callable $write_callback [, string $events]]):public static boolean
Swoole\Event::defer(mixed $callback):public static void
Swoole\Event::del(string $fd):public static boolean
Swoole\Event::exit(void):public static void
Swoole\Event::set(int $fd [, string $read_callback [, string $write_callback [, string $events]]]):public static boolean
Swoole\Event::wait(void):public static void
Swoole\Event::write(string $fd, string $data):public static void
Swoole\Http\Client::addFile(string $path, string $name [, string $type [, string $filename [, string $offset]]]):public void
Swoole\Http\Client::close(void):public void
Swoole\Http\Client::__construct(string $host [, string $port [, boolean $ssl]]):public
Swoole\Http\Client::__destruct(void):public void
Swoole\Http\Client::download(string $path, string $file, callable $callback [, integer $offset]):public void
Swoole\Http\Client::execute(string $path, string $callback):public void
Swoole\Http\Client::get(string $path, callable $callback):public void
Swoole\Http\Client::isConnected(void):public boolean
Swoole\Http\Client::on(string $event_name, callable $callback):public void
Swoole\Http\Client::post(string $path, string $data, callable $callback):public void
Swoole\Http\Client::push(string $data [, string $opcode [, string $finish]]):public void
Swoole\Http\Client::set(array $settings):public void
Swoole\Http\Client::setCookies(array $cookies):public void
Swoole\Http\Client::setData(string $data):public ReturnType
Swoole\Http\Client::setHeaders(array $headers):public void
Swoole\Http\Client::setMethod(string $method):public void
Swoole\Http\Client::upgrade(string $path, string $callback):public void
Swoole\Http\Request::__destruct(void):public void
Swoole\Http\Request::rawcontent(void):public string
Swoole\Http\Response::cookie(string $name [, string $value [, string $expires [, string $path [, string $domain [, string $secure [, string $httponly]]]]]]):public string
Swoole\Http\Response::__destruct(void):public void
Swoole\Http\Response::end([string $content]):public void
Swoole\Http\Response::gzip([string $compress_level]):public ReturnType
Swoole\Http\Response::header(string $key, string $value [, string $ucwords]):public void
Swoole\Http\Response::initHeader(void):public ReturnType
Swoole\Http\Response::rawcookie(string $name [, string $value [, string $expires [, string $path [, string $domain [, string $secure [, string $httponly]]]]]]):public ReturnType
Swoole\Http\Response::sendfile(string $filename [, int $offset]):public ReturnType
Swoole\Http\Response::status(string $http_code):public ReturnType
Swoole\Http\Response::write(string $content):public void
Swoole\Http\Server::on(string $event_name, callable $callback):public void
Swoole\Http\Server::start(void):public void
Swoole\Lock::__construct([string $type [, string $file_lock_location]]):public
Swoole\Lock::__destruct(void):public void
Swoole\Lock::lock_read(void):public void
Swoole\Lock::lock(void):public void
Swoole\Lock::trylock_read(void):public void
Swoole\Lock::trylock(void):public void
Swoole\Lock::unlock(void):public void
Swoole\Mmap::open(string $filename [, string $size [, string $offset]]):public static ReturnType
Swoole\MySQL::close(void):public void
Swoole\MySQL::connect(array $server_config, callable $callback):public void
Swoole\MySQL::__construct(void):public
Swoole\MySQL::__destruct(void):public void
Swoole\MySQL::getBuffer(void):public ReturnType
Swoole\MySQL::on(string $event_name, callable $callback):public void
Swoole\MySQL::query(string $sql, callable $callback):public ReturnType
Swoole\Process::alarm(integer $interval_usec):public static void
Swoole\Process::close(void):public void
Swoole\Process::__construct(callable $callback [, boolean $redirect_stdin_and_stdout [, integer $pipe_type]]):public
Swoole\Process::daemon([boolean $nochdir [, boolean $noclose]]):public static void
Swoole\Process::__destruct(void):public void
Swoole\Process::exec(string $exec_file, string $args):public ReturnType
Swoole\Process::exit([string $exit_code]):public void
Swoole\Process::freeQueue(void):public void
Swoole\Process::kill(integer $pid [, string $signal_no]):public static void
Swoole\Process::name(string $process_name):public void
Swoole\Process::pop([integer $maxsize]):public mixed
Swoole\Process::push(string $data):public boolean
Swoole\Process::read([integer $maxsize]):public string
Swoole\Process::signal(string $signal_no, callable $callback):public static void
Swoole\Process::start(void):public void
Swoole\Process::statQueue(void):public array
Swoole\Process::useQueue(integer $key [, integer $mode]):public boolean
Swoole\Process::wait([boolean $blocking]):public static array
Swoole\Process::write(string $data):public integer
Swoole\Redis\Server::format(string $type [, string $value]):public static ReturnType
Swoole\Redis\Server::setHandler(string $command, string $callback [, string $number_of_string_param [, string $type_of_array_param]]):public ReturnType
Swoole\Redis\Server::start(void):public ReturnType
Swoole\Serialize::pack(string $data [, int $is_fast]):public static ReturnType
Swoole\Serialize::unpack(string $data [, string $args]):public static ReturnType
Swoole\Server\Port::__construct(void):private
Swoole\Server\Port::__destruct(void):public void
Swoole\Server\Port::on(string $event_name, callable $callback):public ReturnType
Swoole\Server\Port::set(array $settings):public void
Swoole\Server::addlistener(string $host, integer $port, string $socket_type):public void
Swoole\Server::addProcess(swoole_process $process):public boolean
Swoole\Server::after(integer $after_time_ms, callable $callback [, string $param]):public ReturnType
Swoole\Server::bind(integer $fd, integer $uid):public boolean
Swoole\Server::clearTimer(integer $timer_id):public void
swoole_timer_clear(integer $timer_id):void
Swoole\Server::close(integer $fd [, boolean $reset]):public boolean
Swoole\Server::confirm(integer $fd):public boolean
Swoole\Server::connection_info(integer $fd [, integer $reactor_id]):public array
Swoole\Server::connection_list(integer $start_fd [, integer $pagesize]):public array
Swoole\Server::__construct(string $host [, integer $port [, integr $mode [, integer $sock_type]]]):public
Swoole\Server::defer(callable $callback):public void
Swoole\Server::exist(integer $fd):public boolean
Swoole\Server::finish(string $data):public void
Swoole\Server::getClientInfo(integer $fd [, integer $reactor_id]):public ReturnType
Swoole\Server::getClientList(integer $start_fd [, integer $pagesize]):public array
Swoole\Server::getLastError(void):public integer
Swoole\Server::heartbeat(boolean $if_close_connection):public mixed
Swoole\Server::listen(string $host, integer $port, string $socket_type):public boolean
Swoole\Server::on(string $event_name, callable $callback):public void
Swoole\Server::pause(integer $fd):public void
Swoole\Server::protect(integer $fd [, boolean $is_protected]):public void
Swoole\Server::reload(void):public boolean
Swoole\Server::resume(integer $fd):public void
Swoole\Server::send(integer $fd, string $data [, integer $reactor_id]):public boolean
Swoole\Server::sendfile(integer $fd, string $filename [, integer $offset]):public boolean
Swoole\Server::sendMessage(integer $worker_id, string $data):public boolean
Swoole\Server::sendto(string $ip, integer $port, string $data [, string $server_socket]):public boolean
Swoole\Server::sendwait(integer $fd, string $data):public boolean
Swoole\Server::set(array $settings):public ReturnType
Swoole\Server::shutdown(void):public void
Swoole\Server::start(void):public void
Swoole\Server::stats(void):public array
Swoole\Server::stop([integer $worker_id]):public boolean
Swoole\Server::task(string $data [, integer $dst_worker_id [, callable $callback]]):public mixed
Swoole\Server::taskwait(string $data [, float $timeout [, integer $worker_id]]):public void
Swoole\Server::taskWaitMulti(array $tasks [, double $timeout_ms]):public void
Swoole\Server::tick(integer $interval_ms, callable $callback):public void
Swoole\Table::column(string $name, string $type [, integer $size]):public ReturnType
Swoole\Table::__construct(integer $table_size):public
Swoole\Table::count(void):public integer
Swoole\Table::create(void):public void
Swoole\Table::current(void):public array
Swoole\Table::decr(string $key, string $column [, integer $decrby]):public ReturnType
Swoole\Table::del(string $key):public void
Swoole\Table::destroy(void):public void
Swoole\Table::exist(string $key):public boolean
Swoole\Table::get(string $row_key, string $column_key):public integer
Swoole\Table::incr(string $key, string $column [, integer $incrby]):public void
Swoole\Table::key(void):public string
Swoole\Table::next(void):public ReturnType
Swoole\Table::rewind(void):public void
Swoole\Table::set(string $key, array $value):public VOID
Swoole\Table::valid(void):public boolean
Swoole\Timer::after(int $after_time_ms, callable $callback):public static void
Swoole\Timer::clear(integer $timer_id):public static void
Swoole\Timer::exists(integer $timer_id):public static boolean
Swoole\Timer::tick(integer $interval_ms, callable $callback [, string $param]):public static void
Swoole\WebSocket\Server::exist(integer $fd):public boolean
Swoole\WebSocket\Server::on(string $event_name, callable $callback):public ReturnType
Swoole\WebSocket\Server::pack(string $data [, string $opcode [, string $finish [, string $mask]]]):public static binary
Swoole\WebSocket\Server::push(string $fd, string $data [, string $opcode [, string $finish]]):public void
Swoole\WebSocket\Server::unpack(binary $data):public static string
SyncEvent::__construct([string $name [, bool $manual = FALSE [, bool $prefire = FALSE]]]):public
SyncEvent::fire(void):public bool
SyncEvent::reset(void):public bool
SyncEvent::wait([int $wait = -1]):public bool
SyncMutex::__construct([string $name]):public
SyncMutex::lock([int $wait = -1]):public bool
SyncMutex::unlock([bool $all = FALSE]):public bool
SyncReaderWriter::__construct([string $name [, bool $autounlock = TRUE]]):public
SyncReaderWriter::readlock([int $wait = -1]):public bool
SyncReaderWriter::readunlock(void):public bool
SyncReaderWriter::writelock([int $wait = -1]):public bool
SyncReaderWriter::writeunlock(void):public bool
SyncSemaphore::__construct([string $name [, int $initialval = 1 [, bool $autounlock = TRUE]]]):public
SyncSemaphore::lock([int $wait = -1]):public bool
SyncSemaphore::unlock([int &$prevcount]):public bool
SyncSharedMemory::__construct(string $name, int $size):public
SyncSharedMemory::first(void):public bool
SyncSharedMemory::read([int $start = 0 [, int $length]]):public
SyncSharedMemory::size(void):public bool
SyncSharedMemory::write([string $string [, int $start = 0]]):public
KTaglib_Tag::getAlbum(void):public string
KTaglib_Tag::getArtist(void):public string
KTaglib_Tag::getComment(void):public string
KTaglib_Tag::getGenre(void):public string
KTaglib_Tag::getTitle(void):public string
KTaglib_Tag::getTrack(void):public int
KTaglib_Tag::getYear(void):public int
KTaglib_Tag::isEmpty(void):public bool
Thread::detach(void):public void
Thread::getCreatorId(void):public int
Thread::getCurrentThread(void):public static Thread
Thread::getCurrentThreadId(void):public static int
Thread::getThreadId(void):public int
Thread::globally(void):public static mixed
Thread::isJoined(void):public bool
Threaded::isRunning(void):public bool
Thread::isStarted(void):public bool
Thread::join(void):public bool
Thread::kill(void):public void
Thread::start([int $options]):public bool
Threaded::chunk(int $size, bool $preserve):public array
Threaded::count(void):public int
Threaded::extend(string $class):public bool
Threaded::from(Closure $run [, Closure $construct [, array $args]]):public Threaded
Threaded::getTerminationInfo(void):public array
Threaded::isTerminated(void):public bool
Threaded::isWaiting(void):public bool
Threaded::lock(void):public bool
Threaded::merge(mixed $from [, bool $overwrite]):public bool
Threaded::notify(void):public bool
Threaded::notifyOne(void):public bool
Threaded::pop(void):public bool
Threaded::run(void):public void
Threaded::shift(void):public mixed
Threaded::synchronized(Closure $block [, mixed $...]):public mixed
Threaded::unlock(void):public bool
Threaded::wait([int $timeout]):public bool
Throwable::getCode(void):abstract public int
Throwable::getFile(void):abstract public string
Throwable::getLine(void):abstract public int
Throwable::getMessage(void):abstract public string
Throwable::getPrevious(void):abstract public Throwable
Throwable::getTrace(void):abstract public array
Throwable::getTraceAsString(void):abstract public string
Throwable::__toString(void):abstract public string
tidy::body(void):tidyNode
tidy_get_body(tidy $object):tidyNode
tidy::cleanRepair(void):bool
tidy_clean_repair(tidy $object):bool
tidy::__construct([string $filename [, mixed $config [, string $encoding [, bool $use_include_path]]]])
tidy::diagnose(void):bool
tidy_diagnose(tidy $object):bool
tidy::getConfig(void):array
tidy_get_config(tidy $object):array
tidy::getHtmlVer(void):int
tidy_get_html_ver(tidy $object):int
tidy::getOpt(string $option):mixed
tidy_getopt(tidy $object, string $option):mixed
tidy::getOptDoc(string $optname):string
tidy_get_opt_doc(tidy $object, string $optname):string
tidy::getRelease(void):string
tidy_get_release(void):string
tidy::getStatus(void):int
tidy_get_status(tidy $object):int
tidy::head(void):tidyNode
tidy_get_head(tidy $object):tidyNode
tidy::html(void):tidyNode
tidy_get_html(tidy $object):tidyNode
tidy::isXhtml(void):bool
tidy_is_xhtml(tidy $object):bool
tidy::isXml(void):bool
tidy_is_xml(tidy $object):bool
tidy::parseFile(string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]]):bool
tidy_parse_file(string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]]):tidy
tidy::parseString(string $input [, mixed $config [, string $encoding]]):bool
tidy_parse_string(string $input [, mixed $config [, string $encoding]]):tidy
tidy::$errorBuffer(tidy $tidy):string
tidy_get_error_buffer(tidy $tidy):string
tidy::repairFile(string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]]):string
tidy_repair_file(string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]]):string
tidy::repairString(string $data [, mixed $config [, string $encoding]]):string
tidy_repair_string(string $data [, mixed $config [, string $encoding]]):string
tidy::root(void):tidyNode
tidy_get_root(tidy $object):tidyNode
tidyNode::getParent(void):tidyNode
tidyNode::hasChildren(void):bool
tidyNode::hasSiblings(void):bool
tidyNode::isAsp(void):bool
tidyNode::isComment(void):bool
tidyNode::isHtml(void):bool
tidyNode::isJste(void):bool
tidyNode::isPhp(void):bool
tidyNode::isText(void):bool
TokyoTyrant::add(string $key, number $increment [, int $type = 0]):public number
TokyoTyrant::connect(string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]]):public TokyoTyrant
TokyoTyrant::connectUri(string $uri):public TokyoTyrant
TokyoTyrant::__construct([string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]]]):public
TokyoTyrant::copy(string $path):public TokyoTyrant
TokyoTyrant::ext(string $name, int $options, string $key, string $value):public string
TokyoTyrant::fwmKeys(string $prefix, int $max_recs):public array
TokyoTyrant::get(mixed $keys):public mixed
TokyoTyrant::getIterator(void):public TokyoTyrantIterator
TokyoTyrant::num(void):public int
TokyoTyrant::out(mixed $keys):public TokyoTyrant
TokyoTyrant::put(mixed $keys [, string $value = NULL]):public TokyoTyrant
TokyoTyrant::putCat(mixed $keys [, string $value]):public TokyoTyrant
TokyoTyrant::putKeep(mixed $keys [, string $value]):public TokyoTyrant
TokyoTyrant::putNr(mixed $keys [, string $value = NULL]):public TokyoTyrant
TokyoTyrant::putShl(string $key, string $value, int $width):public mixed
TokyoTyrant::restore(string $log_dir, int $timestamp [, bool $check_consistency = TRUE]):public mixed
TokyoTyrant::setMaster(string $host, int $port, int $timestamp [, bool $check_consistency = TRUE]):public mixed
TokyoTyrant::size(string $key):public int
TokyoTyrant::stat(void):public array
TokyoTyrant::sync(void):public mixed
TokyoTyrant::tune(float $timeout [, int $options = TokyoTyrant::RDBT_RECON]):public TokyoTyrant
TokyoTyrant::vanish(void):public mixed
TokyoTyrantIterator::__construct(mixed $object):public
TokyoTyrantIterator::current(void):public mixed
TokyoTyrantIterator::key(void):public mixed
TokyoTyrantIterator::next(void):public mixed
TokyoTyrantIterator::rewind(void):public void
TokyoTyrantIterator::valid(void):public bool
TokyoTyrantQuery::addCond(string $name, int $op, string $expr):public mixed
TokyoTyrantQuery::__construct(TokyoTyrantTable $table):public
TokyoTyrantQuery::count(void):public int
TokyoTyrantQuery::current(void):public array
TokyoTyrantQuery::hint(void):public string
TokyoTyrantQuery::key(void):public string
TokyoTyrantQuery::metaSearch(array $queries, int $type):public array
TokyoTyrantQuery::next(void):public array
TokyoTyrantQuery::out(void):public TokyoTyrantQuery
TokyoTyrantQuery::rewind(void):public bool
TokyoTyrantQuery::search(void):public array
TokyoTyrantQuery::setLimit([int $max [, int $skip]]):public mixed
TokyoTyrantQuery::setOrder(string $name, int $type):public mixed
TokyoTyrantQuery::valid(void):public bool
TokyoTyrantTable::add(string $key, mixed $increment [, string $type]):public void
TokyoTyrantTable::genUid(void):public int
TokyoTyrantTable::get(mixed $keys):public array
TokyoTyrantTable::getIterator(void):public TokyoTyrantIterator
TokyoTyrantTable::getQuery(void):public TokyoTyrantQuery
TokyoTyrantTable::out(mixed $keys):public void
TokyoTyrantTable::put(string $key, array $columns):public int
TokyoTyrantTable::putCat(string $key, array $columns):public void
TokyoTyrantTable::putKeep(string $key, array $columns):public void
TokyoTyrantTable::putNr(mixed $keys [, string $value]):public void
TokyoTyrantTable::putShl(string $key, string $value, int $width):public void
TokyoTyrantTable::setIndex(string $column, int $type):public mixed
Transliterator::__construct(void)
Transliterator::create(string $id [, int $direction]):public static Transliterator
transliterator_create(string $id [, int $direction]):Transliterator
Transliterator::createFromRules(string $rules [, string $direction]):public static Transliterator
transliterator_create_from_rules(string $id [, int $direction]):Transliterator
Transliterator::createInverse(void):public Transliterator
transliterator_create_inverse(void):Transliterator
Transliterator::getErrorCode(void):public int
transliterator_get_error_code(void):int
Transliterator::getErrorMessage(void):public string
transliterator_get_error_message(void):string
Transliterator::listIDs(void):public static array
transliterator_list_ids(void):array
Transliterator::transliterate(string $subject [, int $start [, int $end]]):public string
transliterator_transliterate(mixed $transliterator, string $subject [, int $start [, int $end]])
UConverter::__construct([string $destination_encoding [, string $source_encoding]]):public
UConverter::convert(string $str [, bool $reverse]):public string
UConverter::fromUCallback(int $reason, string $source, string $codePoint, int &$error):public mixed
UConverter::getAliases(string $name):public static array
UConverter::getAvailable(void):public static array
UConverter::getDestinationEncoding(void):public string
UConverter::getDestinationType(void):public int
UConverter::getErrorCode(void):public int
UConverter::getErrorMessage(void):public string
UConverter::getSourceEncoding(void):public string
UConverter::getSourceType(void):public int
UConverter::getStandards(void):public static array
UConverter::getSubstChars(void):public string
UConverter::reasonText([int $reason]):public static string
UConverter::setDestinationEncoding(string $encoding):public void
UConverter::setSourceEncoding(string $encoding):public void
UConverter::setSubstChars(string $chars):public void
UConverter::toUCallback(int $reason, string $source, string $codeUnits, int &$error):public mixed
UConverter::transcode(string $str, string $toEncoding, string $fromEncoding [, array $options]):public static string
UI\Area::onDraw(UI\Draw\Pen $pen, UI\Size $areaSize, UI\Point $clipPoint, UI\Size $clipSize):protected
UI\Area::onKey(string $key, int $ext, int $flags):protected
UI\Area::onMouse(UI\Point $areaPoint, UI\Size $areaSize, int $flags):protected
UI\Area::redraw(void):public
UI\Area::scrollTo(UI\Point $point, UI\Size $size):public
UI\Area::setSize(UI\Size $size):public
UI\Control::destroy(void):public
UI\Control::disable(void):public
UI\Control::enable(void):public
UI\Control::getParent(void):public UI\Control
UI\Control::getTopLevel(void):public int
UI\Control::hide(void):public
UI\Control::isEnabled(void):public bool
UI\Control::isVisible(void):public bool
UI\Control::setParent(UI\Control $parent):public
UI\Control::show(void):public
UI\Controls\Box::append(Control $control [, bool $stretchy = FALSE]):public int
UI\Controls\Box::__construct([int $orientation = UI\Controls\Box::Horizontal]):public
UI\Controls\Box::delete(int $index):public bool
UI\Controls\Box::getOrientation(void):public int
UI\Controls\Box::isPadded(void):public bool
UI\Controls\Box::setPadded(bool $padded):public
UI\Controls\Button::__construct(string $text):public
UI\Controls\Button::getText(void):public string
UI\Controls\Button::onClick(void):protected
UI\Controls\Button::setText(string $text):public
UI\Controls\Check::__construct(string $text):public
UI\Controls\Check::getText(void):public string
UI\Controls\Check::isChecked(void):public bool
UI\Controls\Check::onToggle(void):protected
UI\Controls\Check::setChecked(bool $checked):public
UI\Controls\Check::setText(string $text):public
UI\Controls\ColorButton::getColor(void):public UI\Color
UI\Controls\ColorButton::onChange(void):protected
UI\Controls\ColorButton::setColor(UI\Draw\Color $color):public
UI\Controls\Combo::append(string $text):public
UI\Controls\Combo::getSelected(void):public int
UI\Controls\Combo::onSelected(void):protected
UI\Controls\Combo::setSelected(int $index):public
UI\Controls\EditableCombo::append(string $text):public
UI\Controls\EditableCombo::getText(void):public string
UI\Controls\EditableCombo::onChange(void):protected
UI\Controls\EditableCombo::setText(string $text):public
UI\Controls\Entry::__construct([int $type = UI\Controls\Entry::Normal]):public
UI\Controls\Entry::getText(void):public string
UI\Controls\Entry::isReadOnly(void):public bool
UI\Controls\Entry::onChange(void):protected
UI\Controls\Entry::setReadOnly(bool $readOnly):public
UI\Controls\Entry::setText(string $text):public
UI\Controls\Form::append(string $label, UI\Control $control [, bool $stretchy = FALSE]):public int
UI\Controls\Form::delete(int $index):public bool
UI\Controls\Form::isPadded(void):public bool
UI\Controls\Form::setPadded(bool $padded):public
UI\Controls\Grid::append(UI\Control $control, int $left, int $top, int $xspan, int $yspan, bool $hexpand, int $halign, bool $vexpand, int $valign):public
UI\Controls\Grid::isPadded(void):public bool
UI\Controls\Grid::setPadded(bool $padding):public
UI\Controls\Group::append(UI\Control $control):public
UI\Controls\Group::__construct(string $title):public
UI\Controls\Group::getTitle(void):public string
UI\Controls\Group::hasMargin(void):public bool
UI\Controls\Group::setMargin(bool $margin):public
UI\Controls\Group::setTitle(string $title):public
UI\Controls\Label::__construct(string $text):public
UI\Controls\Label::getText(void):public string
UI\Controls\Label::setText(string $text):public
UI\Controls\MultilineEntry::append(string $text):public
UI\Controls\MultilineEntry::__construct([int $type]):public
UI\Controls\MultilineEntry::getText(void):public string
UI\Controls\MultilineEntry::isReadOnly(void):public bool
UI\Controls\MultilineEntry::onChange(void):protected
UI\Controls\MultilineEntry::setReadOnly(bool $readOnly):public
UI\Controls\MultilineEntry::setText(string $text):public
UI\Controls\Picker::__construct([int $type = UI\Controls\Picker::Date]):public
UI\Controls\Progress::getValue(void):public int
UI\Controls\Progress::setValue(int $value):public
UI\Controls\Radio::append(string $text):public
UI\Controls\Radio::getSelected(void):public int
UI\Controls\Radio::onSelected(void):protected
UI\Controls\Radio::setSelected(int $index):public
UI\Controls\Separator::__construct([int $type = UI\Controls\Separator::Horizontal]):public
UI\Controls\Slider::__construct(int $min, int $max):public
UI\Controls\Slider::getValue(void):public int
UI\Controls\Slider::onChange(void):protected
UI\Controls\Slider::setValue(int $value):public
UI\Controls\Spin::__construct(int $min, int $max):public
UI\Controls\Spin::getValue(void):public int
UI\Controls\Spin::onChange(void):protected
UI\Controls\Spin::setValue(int $value):public
UI\Controls\Tab::append(string $name, UI\Control $control):public int
UI\Controls\Tab::delete(int $index):public bool
UI\Controls\Tab::hasMargin(int $page):public bool
UI\Controls\Tab::insertAt(string $name, int $page, UI\Control $control):public
UI\Controls\Tab::pages(void):public int
UI\Controls\Tab::setMargin(int $page, bool $margin):public
UI\Draw\Brush\Gradient::addStop(float $position, UI\Draw\Color $color):public int
UI\Draw\Brush\Gradient::delStop(int $index):public int
UI\Draw\Brush\Gradient::setStop(int $index, float $position, UI\Draw\Color $color):public bool
UI\Draw\Brush\LinearGradient::__construct(UI\Point $start, UI\Point $end):public
UI\Draw\Brush\RadialGradient::__construct(UI\Point $start, UI\Point $outer, float $radius):public
UI\Draw\Brush::__construct(UI\Draw\Color $color):public
UI\Draw\Brush::getColor(void):public UI\Draw\Color
UI\Draw\Brush::setColor(UI\Draw\Color $color):public void
UI\Draw\Color::__construct([UI\Draw\Color $color]):public
UI\Draw\Color::getChannel(int $channel):public float
UI\Draw\Color::setChannel(int $channel, float $value):public void
UI\Draw\Matrix::invert(void):public
UI\Draw\Matrix::isInvertible(void):public bool
UI\Draw\Matrix::multiply(UI\Draw\Matrix $matrix):public UI\Draw\Matrix
UI\Draw\Matrix::rotate(UI\Point $point, float $amount):public
UI\Draw\Matrix::scale(UI\Point $center, UI\Point $point):public
UI\Draw\Matrix::skew(UI\Point $point, UI\Point $amount):public
UI\Draw\Matrix::translate(UI\Point $point):public
UI\Draw\Path::addRectangle(UI\Point $point, UI\Size $size):public
UI\Draw\Path::arcTo(UI\Point $point, float $radius, float $angle, float $sweep, float $negative):public
UI\Draw\Path::bezierTo(UI\Point $point, float $radius, float $angle, float $sweep, float $negative):public
UI\Draw\Path::closeFigure(void):public
UI\Draw\Path::__construct([int $mode = UI\Draw\Path::Winding]):public
UI\Draw\Path::end(void):public
UI\Draw\Path::lineTo(UI\Point $point, float $radius, float $angle, float $sweep, float $negative):public
UI\Draw\Path::newFigure(UI\Point $point):public
UI\Draw\Path::newFigureWithArc(UI\Point $point, float $radius, float $angle, float $sweep, float $negative):public
UI\Draw\Pen::clip(UI\Draw\Path $path):public
UI\Draw\Pen::fill(UI\Draw\Path $path, UI\Draw\Brush $with):public
UI\Draw\Pen::restore(void):public
UI\Draw\Pen::save(void):public
UI\Draw\Pen::stroke(UI\Draw\Path $path, UI\Draw\Brush $with, UI\Draw\Stroke $stroke):public
UI\Draw\Pen::transform(UI\Draw\Matrix $matrix):public
UI\Draw\Pen::write(UI\Point $point, UI\Draw\Text\Layout $layout):public
UI\Draw\Stroke::__construct([int $cap = UI\Draw\Line\Cap::Flat [, int $join = UI\Draw\Line\Join::Miter [, float $thickness = 1 [, float $miterLimit = 10]]]]):public
UI\Draw\Stroke::getCap(void):public int
UI\Draw\Stroke::getJoin(void):public int
UI\Draw\Stroke::getMiterLimit(void):public float
UI\Draw\Stroke::getThickness(void):public float
UI\Draw\Stroke::setCap(int $cap):public
UI\Draw\Stroke::setJoin(int $join):public
UI\Draw\Stroke::setMiterLimit(float $limit):public
UI\Draw\Stroke::setThickness(float $thickness):public
UI\Draw\Text\Font\Descriptor::__construct(string $family, float $size [, int $weight = UI\Draw\Text\Font\Weight::Normal [, int $italic = UI\Draw\Text\Font\Italic::Normal [, int $stretch = UI\Draw\Text\Font\Stretch::Normal]]]):public
UI\Draw\Text\Font\Descriptor::getFamily(void):public string
UI\Draw\Text\Font\Descriptor::getItalic(void):public int
UI\Draw\Text\Font\Descriptor::getSize(void):public float
UI\Draw\Text\Font\Descriptor::getStretch(void):public int
UI\Draw\Text\Font\Descriptor::getWeight(void):public int
UI\Draw\Text\Font::__construct(UI\Draw\Text\Font\Descriptor $descriptor):public
UI\Draw\Text\Font::getAscent(void):public float
UI\Draw\Text\Font::getDescent(void):public float
UI\Draw\Text\Font::getLeading(void):public float
UI\Draw\Text\Font::getUnderlinePosition(void):public float
UI\Draw\Text\Font::getUnderlineThickness(void):public float
UI\Draw\Text\Layout::__construct(string $text, UI\Draw\Text\Font $font, float $width):public
UI\Draw\Text\Layout::setColor(UI\Draw\Color $color [, int $start = 0 [, int $end]]):public
UI\Draw\Text\Layout::setWidth(float $width):public
UI\Executor::__construct(void):public
UI\Executor::kill(void):public void
UI\Executor::onExecute(void):abstract protected void
UI\Executor::setInterval(int $microseconds):public bool
UI\Menu::append(string $name [, string $type = UI\MenuItem::class]):public UI\MenuItem
UI\Menu::appendAbout([string $type = UI\MenuItem::class]):public UI\MenuItem
UI\Menu::appendCheck(string $name [, string $type = UI\MenuItem::class]):public UI\MenuItem
UI\Menu::appendPreferences([string $type = UI\MenuItem::class]):public UI\MenuItem
UI\Menu::appendQuit([string $type = UI\MenuItem::class]):public UI\MenuItem
UI\Menu::appendSeparator(void):public
UI\Menu::__construct(string $name):public
UI\MenuItem::disable(void):public
UI\MenuItem::enable(void):public
UI\MenuItem::isChecked(void):public bool
UI\MenuItem::onClick(void):protected
UI\MenuItem::setChecked(bool $checked):public
UI\Point::at(float $point):public static UI\Point
UI\Point::__construct(float $x, float $y):public
UI\Point::getX(void):public float
UI\Point::getY(void):public float
UI\Point::setX(float $point):public
UI\Point::setY(float $point):public
UI\Size::__construct(float $width, float $height):public
UI\Size::getHeight(void):public float
UI\Size::getWidth(void):public float
UI\Size::of(float $size):public static UI\Size
UI\Size::setHeight(float $size):public
UI\Size::setWidth(float $size):public
UI\Window::add(UI\Control $control):public
UI\Window::__construct(string $title, Size $size [, bool $menu = FALSE]):public
UI\Window::error(string $title, string $msg):public
UI\Window::getSize(void):public UI\Size
UI\Window::getTitle(void):public string
UI\Window::hasBorders(void):public bool
UI\Window::hasMargin(void):public bool
UI\Window::isFullScreen(void):public bool
UI\Window::msg(string $title, string $msg):public
UI\Window::onClosing(void):protected int
UI\Window::open(void):public string
UI\Window::save(void):public string
UI\Window::setBorders(bool $borders):public
UI\Window::setFullScreen(bool $full):public
UI\Window::setMargin(bool $margin):public
UI\Window::setSize(UI\Size $size):public
UI\Window::setTitle(string $title):public
V8Js::__construct([string $object_name = "PHP" [, array $variables = array() [, array $extensions = array() [, bool $report_uncaught_exceptions = TRUE]]]]):public
V8Js::executeString(string $script [, string $identifier = "V8Js::executeString()" [, int $flags = V8Js::FLAG_NONE]]):public mixed
V8Js::getExtensions(void):public static array
V8Js::getPendingException(void):public V8JsException
V8Js::registerExtension(string $extension_name, string $script [, array $dependencies = array() [, bool $auto_enable = FALSE]]):public static bool
V8JsException::getJsFileName(void):final public string
V8JsException::getJsLineNumber(void):final public int
V8JsException::getJsSourceLine(void):final public string
V8JsException::getJsTrace(void):final public string
VarnishAdmin::auth(void):public bool
VarnishAdmin::ban(string $vcl_regex):public int
VarnishAdmin::banUrl(string $vcl_regex):public int
VarnishAdmin::clearPanic(void):public int
VarnishAdmin::connect(void):public bool
VarnishAdmin::__construct([array $args]):public
VarnishAdmin::disconnect(void):public bool
VarnishAdmin::getPanic(void):public string
VarnishAdmin::getParams(void):public array
VarnishAdmin::isRunning(void):public bool
VarnishAdmin::setCompat(int $compat):public void
VarnishAdmin::setHost(string $host):public void
VarnishAdmin::setIdent(string $ident):public void
VarnishAdmin::setParam(string $name, string|integer $value):public int
VarnishAdmin::setPort(int $port):public void
VarnishAdmin::setSecret(string $secret):public void
VarnishAdmin::setTimeout(int $timeout):public void
VarnishAdmin::start(void):public int
VarnishAdmin::stop(void):public int
VarnishLog::__construct([array $args]):public
VarnishLog::getLine(void):public array
VarnishLog::getTagName(int $index):public static string
VarnishStat::__construct([array $args]):public
VarnishStat::getSnapshot(void):public array
Vtiful\Kernel\Excel::addSheet(string $sheetName):public
Vtiful\Kernel\Excel::autoFilter(string $scope):public
Vtiful\Kernel\Excel::constMemory(string $fileName [, string $sheetName]):public
Vtiful\Kernel\Excel::__construct(array $config):public
Vtiful\Kernel\Excel::data(array $data):public
Vtiful\Kernel\Excel::fileName(string $fileName [, string $sheetName]):public
Vtiful\Kernel\Excel::getHandle(void):public
Vtiful\Kernel\Excel::header(array $headerData):public
Vtiful\Kernel\Excel::insertFormula(int $row, int $column, string $formula):public
Vtiful\Kernel\Excel::insertImage(int $row, int $column, string $localImagePath):public
Vtiful\Kernel\Excel::insertText(int $row, int $column, stringintdouble $data [, string $format]):public
Vtiful\Kernel\Excel::mergeCells(string $scope, string $data):public
Vtiful\Kernel\Excel::output(void):public
Vtiful\Kernel\Excel::setColumn(string $range, float $width [, resource $format]):public
Vtiful\Kernel\Excel::setRow(string $range, float $height [, resource $format]):public
Vtiful\Kernel\Format::align(resource $handle, int $style):public
Vtiful\Kernel\Format::bold(resource $handle):public
Vtiful\Kernel\Format::italic(resource $handle):public
Vtiful\Kernel\Format::underline(resource $handle, int $style):public
WeakMap::__construct(void):public
WeakMap::count(void):public int
WeakMap::current(void):public mixed
WeakMap::key(void):public object
WeakMap::next(void):public void
WeakMap::offsetExists(object $object):public bool
WeakMap::offsetGet(object $object):public mixed
WeakMap::offsetSet(object $object, mixed $value):public void
WeakMap::offsetUnset(object $object):public void
WeakMap::rewind(void):public void
WeakMap::valid(void):public bool
Weakref::acquire(void):public bool
Weakref::__construct(object $object):public
Weakref::get(void):public object
Weakref::release(void):public bool
Weakref::valid(void):public bool
wkhtmltox\Image\Converter::__construct([string $buffer [, array $settings]]):public
wkhtmltox\Image\Converter::convert(void):public ?string
wkhtmltox\Image\Converter::getVersion(void):public string
wkhtmltox\PDF\Converter::add(wkhtmltox\PDF\Object $object):public void
wkhtmltox\PDF\Converter::__construct([array $settings]):public
wkhtmltox\PDF\Converter::convert(void):public ?string
wkhtmltox\PDF\Converter::getVersion(void):public string
wkhtmltox\PDF\Object::__construct(string $buffer [, array $settings]):public
Worker::collect([Callable $collector]):public int
Worker::getStacked(void):public int
Worker::isShutdown(void):public bool
Worker::isWorking(void):public bool
Worker::shutdown(void):public bool
Worker::stack(Threaded &$work):public int
Worker::unstack(void):public int
XMLDiff\Base::__construct(string $nsname):public
XMLDiff\Base::diff(mixed $from, mixed $to):abstract public mixed
XMLDiff\Base::merge(mixed $src, mixed $diff):abstract public mixed
XMLDiff\DOM::diff(DOMDocument $from, DOMDocument $to):public DOMDocument
XMLDiff\DOM::merge(DOMDocument $src, DOMDocument $diff):public DOMDocument
XMLDiff\File::diff(string $from, string $to):public string
XMLDiff\File::merge(string $src, string $diff):public string
XMLDiff\Memory::diff(string $from, string $to):public string
XMLDiff\Memory::merge(string $src, string $diff):public string
XMLReader::close(void):public bool
XMLReader::expand([DOMNode $basenode]):public DOMNode
XMLReader::getAttribute(string $name):public string
XMLReader::getAttributeNo(int $index):public string
XMLReader::getAttributeNs(string $localName, string $namespaceURI):public string
XMLReader::getParserProperty(int $property):public bool
XMLReader::isValid(void):public bool
XMLReader::lookupNamespace(string $prefix):public string
XMLReader::moveToAttribute(string $name):public bool
XMLReader::moveToAttributeNo(int $index):public bool
XMLReader::moveToAttributeNs(string $localName, string $namespaceURI):public bool
XMLReader::moveToElement(void):public bool
XMLReader::moveToFirstAttribute(void):public bool
XMLReader::moveToNextAttribute(void):public bool
XMLReader::next([string $localname]):public bool
XMLReader::open(string $URI [, string $encoding [, int $options = 0]]):public bool
XMLReader::read(void):public bool
XMLReader::readInnerXml(void):public string
XMLReader::readOuterXml(void):public string
XMLReader::readString(void):public string
XMLReader::setParserProperty(int $property, bool $value):public bool
XMLReader::setRelaxNGSchema(string $filename):public bool
XMLReader::setRelaxNGSchemaSource(string $source):public bool
XMLReader::setSchema(string $filename):public bool
XMLReader::XML(string $source [, string $encoding [, int $options = 0]]):public bool
XSLTProcessor::__construct(void)
XSLTProcessor::getParameter(string $namespaceURI, string $localName):string
XSLTProcessor::getSecurityPrefs(void):public int
XSLTProcessor::hasExsltSupport(void):bool
XSLTProcessor::importStylesheet(object $stylesheet):public bool
XSLTProcessor::registerPHPFunctions([mixed $restrict]):void
XSLTProcessor::removeParameter(string $namespaceURI, string $localName):bool
XSLTProcessor::setParameter(string $namespace, string $name, string $value):bool
XSLTProcessor::setProfiling(string $filename):bool
XSLTProcessor::setSecurityPrefs(int $securityPrefs):public int
XSLTProcessor::transformToDoc(DOMNode $doc):DOMDocument
XSLTProcessor::transformToUri(DOMDocument $doc, string $uri):int
XSLTProcessor::transformToXml(object $doc):string
Yaconf::get(string $name [, mixed $default_value = NULL]):public static mixed
Yaconf::has(string $name):public static bool
Yaf_Action_Abstract::execute([mixed $arg [, mixed $...]]):abstract publicmixed
Yaf_Action_Abstract::getController(void):publicYaf_Controller_Abstract
Yaf_Application::app(void):public staticmixed
Yaf_Application::bootstrap([Yaf_Bootstrap_Abstract $bootstrap]):public void
Yaf_Application::clearLastError(void):public Yaf_Application
Yaf_Application::__clone(void):private void
Yaf_Application::__construct(mixed $config [, string $envrion]):public
Yaf_Application::__destruct(void):public void
Yaf_Application::environ(void):public void
Yaf_Application::execute(callable $entry, string $...):public void
Yaf_Application::getAppDirectory(void):public Yaf_Application
Yaf_Application::getConfig(void):public Yaf_Config_Abstract
Yaf_Application::getDispatcher(void):public Yaf_Dispatcher
Yaf_Application::getLastErrorMsg(void):public string
Yaf_Application::getLastErrorNo(void):public int
Yaf_Application::getModules(void):public array
Yaf_Application::run(void):public void
Yaf_Application::setAppDirectory(string $directory):public Yaf_Application
Yaf_Application::__sleep(void):private void
Yaf_Application::__wakeup(void):private void
Yaf_Config_Abstract::get(string $name, mixed $value):abstract public mixed
Yaf_Config_Abstract::readonly(void):abstract public bool
Yaf_Config_Abstract::set(void):abstract public Yaf_Config_Abstract
Yaf_Config_Abstract::toArray(void):abstract public array
Yaf_Config_Ini::__construct(string $config_file [, string $section]):public
Yaf_Config_Ini::count(void):public void
Yaf_Config_Ini::current(void):public void
Yaf_Config_Ini::__get([string $name]):public void
Yaf_Config_Ini::__isset(string $name):public void
Yaf_Config_Ini::key(void):public void
Yaf_Config_Ini::next(void):public void
Yaf_Config_Ini::offsetExists(string $name):public void
Yaf_Config_Ini::offsetGet(string $name):public void
Yaf_Config_Ini::offsetSet(string $name, string $value):public void
Yaf_Config_Ini::offsetUnset(string $name):public void
Yaf_Config_Ini::readonly(void):public void
Yaf_Config_Ini::rewind(void):public void
Yaf_Config_Ini::__set(string $name, mixed $value):public void
Yaf_Config_Ini::toArray(void):public array
Yaf_Config_Ini::valid(void):public void
Yaf_Config_Simple::__construct(string $config_file [, string $section]):public
Yaf_Config_Simple::count(void):public void
Yaf_Config_Simple::current(void):public void
Yaf_Config_Simple::__get([string $name]):public void
Yaf_Config_Simple::__isset(string $name):public void
Yaf_Config_Simple::key(void):public void
Yaf_Config_Simple::next(void):public void
Yaf_Config_Simple::offsetExists(string $name):public void
Yaf_Config_Simple::offsetGet(string $name):public void
Yaf_Config_Simple::offsetSet(string $name, string $value):public void
Yaf_Config_Simple::offsetUnset(string $name):public void
Yaf_Config_Simple::readonly(void):public void
Yaf_Config_Simple::rewind(void):public void
Yaf_Config_Simple::__set(string $name, string $value):public void
Yaf_Config_Simple::toArray(void):public array
Yaf_Config_Simple::valid(void):public void
Yaf_Controller_Abstract::__clone(void):final private void
Yaf_Controller_Abstract::__construct(void):final private
Yaf_Controller_Abstract::display(string $tpl [, array $parameters]):protected bool
Yaf_Controller_Abstract::forward(string $action [, array $paramters]):public void
Yaf_Controller_Abstract::getInvokeArg(string $name):public void
Yaf_Controller_Abstract::getInvokeArgs(void):public void
Yaf_Controller_Abstract::getModuleName(void):public string
Yaf_Controller_Abstract::getRequest(void):public Yaf_Request_Abstract
Yaf_Controller_Abstract::getResponse(void):public Yaf_Response_Abstract
Yaf_Controller_Abstract::getView(void):public Yaf_View_Interface
Yaf_Controller_Abstract::getViewpath(void):public string
Yaf_Controller_Abstract::init(void):public void
Yaf_Controller_Abstract::initView([array $options]):public void
Yaf_Controller_Abstract::redirect(string $url):public bool
Yaf_Controller_Abstract::render(string $tpl [, array $parameters]):protected string
Yaf_Controller_Abstract::setViewpath(string $view_directory):public void
Yaf_Dispatcher::autoRender([bool $flag]):public Yaf_Dispatcher
Yaf_Dispatcher::catchException([bool $flag]):public Yaf_Dispatcher
Yaf_Dispatcher::__clone(void):private void
Yaf_Dispatcher::__construct(void):public
Yaf_Dispatcher::disableView(void):public bool
Yaf_Dispatcher::dispatch(Yaf_Request_Abstract $request):public Yaf_Response_Abstract
Yaf_Dispatcher::enableView(void):public Yaf_Dispatcher
Yaf_Dispatcher::flushInstantly([bool $flag]):public Yaf_Dispatcher
Yaf_Dispatcher::getApplication(void):public Yaf_Application
Yaf_Dispatcher::getInstance(void):public static Yaf_Dispatcher
Yaf_Dispatcher::getRequest(void):public Yaf_Request_Abstract
Yaf_Dispatcher::getRouter(void):public Yaf_Router
Yaf_Dispatcher::initView(string $templates_dir [, array $options]):public Yaf_View_Interface
Yaf_Dispatcher::registerPlugin(Yaf_Plugin_Abstract $plugin):public Yaf_Dispatcher
Yaf_Dispatcher::returnResponse(bool $flag):public Yaf_Dispatcher
Yaf_Dispatcher::setDefaultAction(string $action):public Yaf_Dispatcher
Yaf_Dispatcher::setDefaultController(string $controller):public Yaf_Dispatcher
Yaf_Dispatcher::setDefaultModule(string $module):public Yaf_Dispatcher
Yaf_Dispatcher::setErrorHandler(call $callback, int $error_types):public Yaf_Dispatcher
Yaf_Dispatcher::setRequest(Yaf_Request_Abstract $request):public Yaf_Dispatcher
Yaf_Dispatcher::setView(Yaf_View_Interface $view):public Yaf_Dispatcher
Yaf_Dispatcher::__sleep(void):private void
Yaf_Dispatcher::throwException([bool $flag]):public Yaf_Dispatcher
Yaf_Dispatcher::__wakeup(void):private void
Yaf_Exception::__construct(void):public
Yaf_Exception::getPrevious(void):public void
Yaf_Loader::autoload(void):public void
Yaf_Loader::clearLocalNamespace(void):public void
Yaf_Loader::__clone(void):private void
Yaf_Loader::__construct(void):private
Yaf_Loader::getInstance(void):public static void
Yaf_Loader::getLibraryPath([bool $is_global = FALSE]):public Yaf_Loader
Yaf_Loader::getLocalNamespace(void):public void
Yaf_Loader::import(void):public static void
Yaf_Loader::isLocalName(void):public void
Yaf_Loader::registerLocalNamespace(mixed $prefix):public void
Yaf_Loader::setLibraryPath(string $directory [, bool $is_global = FALSE]):public Yaf_Loader
Yaf_Loader::__sleep(void):private void
Yaf_Loader::__wakeup(void):private void
Yaf_Plugin_Abstract::dispatchLoopShutdown(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
Yaf_Plugin_Abstract::dispatchLoopStartup(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
Yaf_Plugin_Abstract::postDispatch(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
Yaf_Plugin_Abstract::preDispatch(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
Yaf_Plugin_Abstract::preResponse(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
Yaf_Plugin_Abstract::routerShutdown(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
Yaf_Plugin_Abstract::routerStartup(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
Yaf_Registry::__clone(void):private void
Yaf_Registry::__construct(void):private
Yaf_Registry::del(string $name):public static void
Yaf_Registry::get(string $name):public static mixed
Yaf_Registry::has(string $name):public static bool
Yaf_Registry::set(string $name, string $value):public static bool
Yaf_Request_Abstract::getActionName(void):public void
Yaf_Request_Abstract::getBaseUri(void):public void
Yaf_Request_Abstract::getControllerName(void):public void
Yaf_Request_Abstract::getEnv(string $name [, string $default]):public void
Yaf_Request_Abstract::getException(void):public void
Yaf_Request_Abstract::getLanguage(void):public void
Yaf_Request_Abstract::getMethod(void):public string
Yaf_Request_Abstract::getModuleName(void):public void
Yaf_Request_Abstract::getParam(string $name [, string $default]):public mixed
Yaf_Request_Abstract::getParams(void):public array
Yaf_Request_Abstract::getRequestUri(void):public void
Yaf_Request_Abstract::getServer(string $name [, string $default]):public void
Yaf_Request_Abstract::isCli(void):public bool
Yaf_Request_Abstract::isDispatched(void):public bool
Yaf_Request_Abstract::isGet(void):public bool
Yaf_Request_Abstract::isHead(void):public bool
Yaf_Request_Abstract::isOptions(void):public bool
Yaf_Request_Abstract::isPost(void):public bool
Yaf_Request_Abstract::isPut(void):public bool
Yaf_Request_Abstract::isRouted(void):public bool
Yaf_Request_Abstract::isXmlHttpRequest(void):public bool
Yaf_Request_Abstract::setActionName(string $action):public void
Yaf_Request_Abstract::setBaseUri(string $uir):public bool
Yaf_Request_Abstract::setControllerName(string $controller):public void
Yaf_Request_Abstract::setDispatched(void):public void
Yaf_Request_Abstract::setModuleName(string $module):public void
Yaf_Request_Abstract::setParam(string $name [, string $value]):public bool
Yaf_Request_Abstract::setRequestUri(string $uir):public void
Yaf_Request_Abstract::setRouted([string $flag]):public void
Yaf_Request_Http::__clone(void):private void
Yaf_Request_Http::__construct([string $request_uri [, string $base_uri]]):public
Yaf_Request_Http::get(string $name [, string $default]):public mixed
Yaf_Request_Http::getCookie(string $name [, string $default]):public mixed
Yaf_Request_Http::getFiles(void):public void
Yaf_Request_Http::getPost(string $name [, string $default]):public mixed
Yaf_Request_Http::getQuery(string $name [, string $default]):public mixed
Yaf_Request_Http::getRaw(void):public mixed
Yaf_Request_Http::getRequest(void):public void
Yaf_Request_Http::isXmlHttpRequest(void):public bool
Yaf_Request_Simple::__clone(void):private void
Yaf_Request_Simple::__construct([string $method [, string $module [, string $controller [, string $action [, array $params]]]]]):public
Yaf_Request_Simple::get(void):public void
Yaf_Request_Simple::getCookie(void):public void
Yaf_Request_Simple::getFiles(void):public void
Yaf_Request_Simple::getPost(void):public void
Yaf_Request_Simple::getQuery(void):public void
Yaf_Request_Simple::getRequest(void):public void
Yaf_Request_Simple::isXmlHttpRequest(void):public void
Yaf_Response_Abstract::appendBody(string $content [, string $key]):public bool
Yaf_Response_Abstract::clearBody([string $key]):public bool
Yaf_Response_Abstract::clearHeaders(void):public void
Yaf_Response_Abstract::__clone(void):private void
Yaf_Response_Abstract::__construct(void):public
Yaf_Response_Abstract::__destruct(void):public void
Yaf_Response_Abstract::getBody([string $key]):public mixed
Yaf_Response_Abstract::getHeader(void):public void
Yaf_Response_Abstract::prependBody(string $content [, string $key]):public bool
Yaf_Response_Abstract::response(void):public void
Yaf_Response_Abstract::setAllHeaders(void):protected void
Yaf_Response_Abstract::setBody(string $content [, string $key]):public bool
Yaf_Response_Abstract::setHeader(string $name, string $value [, bool $replace]):public bool
Yaf_Response_Abstract::setRedirect(void):public void
Yaf_Response_Abstract::__toString(void):private string
Yaf_Route_Interface::assemble(array $info [, array $query]):abstract public string
Yaf_Route_Interface::route(Yaf_Request_Abstract $request):abstract public bool
Yaf_Route_Map::assemble(array $info [, array $query]):public string
Yaf_Route_Map::__construct([string $controller_prefer = FALSE [, string $delimiter = ""]]):public
Yaf_Route_Map::route(Yaf_Request_Abstract $request):public bool
Yaf_Route_Regex::assemble(array $info [, array $query]):public string
Yaf_Route_Regex::__construct(string $match, array $route [, array $map [, array $verify [, string $reverse]]]):public
Yaf_Route_Regex::route(Yaf_Request_Abstract $request):public bool
Yaf_Route_Rewrite::assemble(array $info [, array $query]):public string
Yaf_Route_Rewrite::__construct(string $match, array $route [, array $verify]):public
Yaf_Route_Rewrite::route(Yaf_Request_Abstract $request):public bool
Yaf_Route_Simple::assemble(array $info [, array $query]):public string
Yaf_Route_Simple::__construct(string $module_name, string $controller_name, string $action_name):public
Yaf_Route_Simple::route(Yaf_Request_Abstract $request):public bool
Yaf_Route_Static::assemble(array $info [, array $query]):public string
Yaf_Route_Static::match(string $uri):public void
Yaf_Route_Static::route(Yaf_Request_Abstract $request):public bool
Yaf_Route_Supervar::assemble(array $info [, array $query]):public string
Yaf_Route_Supervar::__construct(string $supervar_name):public
Yaf_Route_Supervar::route(Yaf_Request_Abstract $request):public bool
Yaf_Router::addConfig(Yaf_Config_Abstract $config):public bool
Yaf_Router::addRoute(string $name, Yaf_Route_Abstract $route):public bool
Yaf_Router::__construct(void):public
Yaf_Router::getCurrentRoute(void):public string
Yaf_Router::getRoute(string $name):public Yaf_Route_Interface
Yaf_Router::getRoutes(void):public mixed
Yaf_Router::route(Yaf_Request_Abstract $request):public bool
Yaf_Session::__clone(void):private void
Yaf_Session::__construct(void):private
Yaf_Session::count(void):public void
Yaf_Session::current(void):public void
Yaf_Session::del(string $name):public void
Yaf_Session::__get(string $name):public void
Yaf_Session::getInstance(void):public static void
Yaf_Session::has(string $name):public void
Yaf_Session::__isset(string $name):public void
Yaf_Session::key(void):public void
Yaf_Session::next(void):public void
Yaf_Session::offsetExists(string $name):public void
Yaf_Session::offsetGet(string $name):public void
Yaf_Session::offsetSet(string $name, string $value):public void
Yaf_Session::offsetUnset(string $name):public void
Yaf_Session::rewind(void):public void
Yaf_Session::__set(string $name, string $value):public void
Yaf_Session::__sleep(void):private void
Yaf_Session::start(void):public void
Yaf_Session::__unset(string $name):public void
Yaf_Session::valid(void):public void
Yaf_Session::__wakeup(void):private void
Yaf_View_Interface::assign(string $name [, string $value]):abstract public bool
Yaf_View_Interface::display(string $tpl [, array $tpl_vars]):abstract public bool
Yaf_View_Interface::getScriptPath(void):abstract public void
Yaf_View_Interface::render(string $tpl [, array $tpl_vars]):abstract public string
Yaf_View_Interface::setScriptPath(string $template_dir):abstract public void
Yaf_View_Simple::assign(string $name [, mixed $value]):public bool
Yaf_View_Simple::assignRef(string $name, mixed &$value):public bool
Yaf_View_Simple::clear([string $name]):public bool
Yaf_View_Simple::__construct(string $template_dir [, array $options]):final public
Yaf_View_Simple::display(string $tpl [, array $tpl_vars]):public bool
Yaf_View_Simple::eval(string $tpl_content [, array $tpl_vars]):public string
Yaf_View_Simple::__get([string $name]):public void
Yaf_View_Simple::getScriptPath(void):public string
Yaf_View_Simple::__isset(string $name):public void
Yaf_View_Simple::render(string $tpl [, array $tpl_vars]):public string
Yaf_View_Simple::__set(string $name, mixed $value):public void
Yaf_View_Simple::setScriptPath(string $template_dir):public bool
Yar_Client_Exception::getType(void):public string
Yar_Client::__call(string $method, array $parameters):public void
Yar_Client::__construct(string $url [, array $options]):final public
Yar_Client::setOpt(int $name, mixed $value):public Yar_Client
Yar_Concurrent_Client::call(string $uri, string $method [, array $parameters [, callable $callback [, callable $error_callback [, array $options]]]]):public static int
Yar_Concurrent_Client::loop([callable $callback [, callable $error_callback]]):public static bool
Yar_Concurrent_Client::reset(void):public static bool
Yar_Server_Exception::getType(void):public string
Yar_Server::__construct(Object $obj):final public
Yar_Server::handle(void):public bool
ZipArchive::addEmptyDir(string $dirname):bool
ZipArchive::addFile(string $filename [, string $localname = NULL [, int $start = 0 [, int $length = 0]]]):bool
ZipArchive::addFromString(string $localname, string $contents):bool
ZipArchive::addGlob(string $pattern [, int $flags = 0 [, array $options = array()]]):bool
ZipArchive::addPattern(string $pattern [, string $path = "." [, array $options = array()]]):bool
ZipArchive::close(void):bool
ZipArchive::count(void):public int
ZipArchive::deleteIndex(int $index):bool
ZipArchive::deleteName(string $name):bool
ZipArchive::extractTo(string $destination [, mixed $entries]):bool
ZipArchive::getArchiveComment([int $flags]):string
ZipArchive::getCommentIndex(int $index [, int $flags]):string
ZipArchive::getCommentName(string $name [, int $flags]):string
ZipArchive::getExternalAttributesIndex(int $index, int &$opsys, int &$attr [, int $flags]):bool
ZipArchive::getExternalAttributesName(string $name, int &$opsys, int &$attr [, int $flags]):bool
ZipArchive::getFromIndex(int $index [, int $length = 0 [, int $flags]]):string
ZipArchive::getFromName(string $name [, int $length = 0 [, int $flags]]):string
ZipArchive::getNameIndex(int $index [, int $flags]):string
ZipArchive::getStatusString(void):string
ZipArchive::getStream(string $name):resource
ZipArchive::locateName(string $name [, int $flags]):int
ZipArchive::open(string $filename [, int $flags]):mixed
ZipArchive::renameIndex(int $index, string $newname):bool
ZipArchive::renameName(string $name, string $newname):bool
ZipArchive::setArchiveComment(string $comment):bool
ZipArchive::setCommentIndex(int $index, string $comment):bool
ZipArchive::setCommentName(string $name, string $comment):bool
ZipArchive::setCompressionIndex(int $index, int $comp_method [, int $comp_flags = 0]):bool
ZipArchive::setCompressionName(string $name, int $comp_method [, int $comp_flags = 0]):bool
ZipArchive::setEncryptionIndex(int $index, string $method [, string $password]):bool
ZipArchive::setEncryptionName(string $name, int $method [, string $password]):bool
ZipArchive::setExternalAttributesIndex(int $index, int $opsys, int $attr [, int $flags]):bool
ZipArchive::setExternalAttributesName(string $name, int $opsys, int $attr [, int $flags]):bool
ZipArchive::setPassword(string $password):public bool
ZipArchive::statIndex(int $index [, int $flags]):array
ZipArchive::statName(string $name [, int $flags]):array
ZipArchive::unchangeAll(void):bool
ZipArchive::unchangeArchive(void):bool
ZipArchive::unchangeIndex(int $index):bool
ZipArchive::unchangeName(string $name):bool
ZMQ::__construct(void):private
ZMQContext::__construct([int $io_threads = 1 [, bool $is_persistent = TRUE]])
ZMQContext::getOpt(string $key):public mixed
ZMQContext::getSocket(int $type [, string $persistent_id = NULL [, callback $on_new_socket = NULL]]):public ZMQSocket
ZMQContext::isPersistent(void):public bool
ZMQContext::setOpt(int $key, mixed $value):public ZMQContext
ZMQDevice::__construct(ZMQSocket $frontend, ZMQSocket $backend [, ZMQSocket $listener])
ZMQDevice::getIdleTimeout(void):public ZMQDevice
ZMQDevice::getTimerTimeout(void):public ZMQDevice
ZMQDevice::run(void):public void
ZMQDevice::setIdleCallback(callable $cb_func, int $timeout [, mixed $user_data]):public ZMQDevice
ZMQDevice::setIdleTimeout(int $timeout):public ZMQDevice
ZMQDevice::setTimerCallback(callable $cb_func, int $timeout [, mixed $user_data]):public ZMQDevice
ZMQDevice::setTimerTimeout(int $timeout):public ZMQDevice
ZMQPoll::add(mixed $entry, int $type):public string
ZMQPoll::clear(void):public ZMQPoll
ZMQPoll::count(void):public int
ZMQPoll::getLastErrors(void):public array
ZMQPoll::poll(array &$readable, array &$writable [, int $timeout = -1]):public int
ZMQPoll::remove(mixed $item):public bool
ZMQSocket::bind(string $dsn [, bool $force = FALSE]):public ZMQSocket
ZMQSocket::connect(string $dsn [, bool $force = FALSE]):public ZMQSocket
ZMQSocket::__construct(ZMQContext $context, int $type [, string $persistent_id = NULL [, callback $on_new_socket = NULL]])
ZMQSocket::disconnect(string $dsn):public ZMQSocket
ZMQSocket::getEndpoints(void):public array
ZMQSocket::getPersistentId(void):public string
ZMQSocket::getSocketType(void):public int
ZMQSocket::getSockOpt(string $key):public mixed
ZMQSocket::isPersistent(void):public bool
ZMQSocket::recv([int $mode = 0]):public string
ZMQSocket::recvMulti([int $mode = 0]):public string
ZMQSocket::send(string $message [, int $mode = 0]):public ZMQSocket
ZMQSocket::sendmulti(array $message [, int $mode = 0]):public ZMQSocket
ZMQSocket::setSockOpt(int $key, mixed $value):public ZMQSocket
ZMQSocket::unbind(string $dsn):public ZMQSocket
Zookeeper::addAuth(string $scheme, string $cert [, callable $completion_cb = NULL]):public bool
Zookeeper::close(void):public void
Zookeeper::connect(string $host [, callable $watcher_cb = NULL [, int $recv_timeout = 10000]]):public void
Zookeeper::__construct([string $host = '' [, callable $watcher_cb = NULL [, int $recv_timeout = 10000]]]):public
Zookeeper::create(string $path, string $value, array $acls [, int $flags = NULL]):public string
Zookeeper::delete(string $path [, int $version = -1]):public bool
Zookeeper::exists(string $path [, callable $watcher_cb = NULL]):public bool
Zookeeper::get(string $path [, callable $watcher_cb = NULL [, array &$stat = NULL [, int $max_size = 0]]]):public string
Zookeeper::getAcl(string $path):public array
Zookeeper::getChildren(string $path [, callable $watcher_cb = NULL]):public array
Zookeeper::getClientId(void):public int
Zookeeper::getConfig(void):public ZookeeperConfig
Zookeeper::getRecvTimeout(void):public int
Zookeeper::getState(void):public int
Zookeeper::isRecoverable(void):public bool
Zookeeper::set(string $path, string $value [, int $version = -1 [, array &$stat = NULL]]):public bool
Zookeeper::setAcl(string $path, int $version, array $acl):public bool
Zookeeper::setDebugLevel(int $logLevel):public static bool
Zookeeper::setDeterministicConnOrder(bool $yesOrNo):public static bool
Zookeeper::setLogStream(resource $stream):public bool
Zookeeper::setWatcher(callable $watcher_cb):public bool
mysqli_driver
mysqli_result
mysqli_stmt
mysqli
mysqli::
mysqli_driver::
mysqli_result::
mysqli_stmt::
mysqli::
