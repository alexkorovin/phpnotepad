(string $cache [, mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE]]]]):public
(void):public mixed
(void):public int
(void):public int
(void):public int
(void):public string
(void):public void
(void):public void
(void):public void
([mixed $search = NULL [, int $format = APC_ITER_ALL [, int $chunk_size = 100 [, int $list = APC_LIST_ACTIVE]]]]):public
(void):public mixed
(void):public int
(void):public int
(void):public int
(void):public string
(void):public void
(void):public void
(void):public void
(Iterator $iterator):public void
(void):public
(void):public mixed
(void):public ArrayIterator
(void):public Iterator
(void):public int
(void):public scalar
(void):public void
(void):public void
(void):public bool
(mixed $offset):abstract public bool
(mixed $offset):abstract public mixed
(mixed $offset, mixed $value):abstract public void
(mixed $offset):abstract public void
(mixed $value):public void
(void):public void
([mixed $array = array() [, int $flags = 0]]):public
(void):public int
(void):public mixed
(void):public array
(void):public void
(void):public mixed
(void):public void
(void):public void
(void):public void
(void):public void
(mixed $index):public bool
(mixed $index):public mixed
(mixed $index, mixed $newval):public void
(mixed $index):public void
(void):public void
(int $position):public void
(void):public string
(string $flags):public void
(callable $cmp_function):public void
(callable $cmp_function):public void
(string $serialized):public string
(void):public bool
(mixed $value):public void
(void):public void
([mixed $input = array() [, int $flags = 0 [, string $iterator_class = "ArrayIterator"]]]):public
(void):public int
(mixed $input):public array
(void):public array
(void):public int
(void):public ArrayIterator
(void):public string
(void):public void
(void):public void
(void):public void
(mixed $index):public bool
(mixed $index):public mixed
(mixed $index, mixed $newval):public void
(mixed $index):public void
(void):public string
(int $flags):public void
(string $iterator_class):public void
(callable $cmp_function):public void
(callable $cmp_function):public void
(string $serialized):public void
(void):public int
(void):public int
(void):public int
(void):public int
(void):public int
(void):public int
(void):public bool
(void):public bool
(void):public bool
(Iterator $iterator [, int $flags = self::CALL_TOSTRING]):public
(void):public int
(void):public void
(void):public array
(void):public int
(void):public Iterator
(void):public void
(void):public scalar
(void):public void
(mixed $index):public void
(string $index):public void
(mixed $index, mixed $newval):public void
(string $index):public void
(void):public void
(int $flags):public void
(void):public void
(void):public void
(void):public static array
(void):array
(void):public static array
(void):array
(int $status):public static string
(int $status):string
(void):public static int
(void):int
(void):public static string
(void):string
(CairoPath $path):public void
(CairoContext $context, CairoPath $path):void
(float $x, float $y, float $radius, float $angle1, float $angle2):public void
(CairoContext $context, float $x, float $y, float $radius, float $angle1, float $angle2):void
(float $x, float $y, float $radius, float $angle1, float $angle2):public void
(CairoContext $context, float $x, float $y, float $radius, float $angle1, float $angle2):void
(void):public void
(CairoContext $context):void
(void):public array
(CairoContext $context):array
(void):public void
(CairoContext $context):void
(void):public array
(CairoContext $context):array
(void):public void
(CairoContext $context):void
(CairoSurface $surface):public
(void):public void
(CairoContext $context):void
(void):public CairoPath
(CairoContext $context):CairoPath
(void):public CairoPath
(CairoContext $context):CairoPath
(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):public void
(CairoContext $context, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):void
(float $x, float $y):public array
(CairoContext $context, float $x, float $y):array
(float $x, float $y):public array
(CairoContext $context, float $x, float $y):array
(void):public void
(CairoContext $context):void
(void):public array
(CairoContext $context):array
(void):public void
(CairoContext $context):void
(void):public array
(CairoContext $context):array
(void):public int
(CairoContext $context):int
(void):public array
(CairoContext $context):array
(void):public array
(CairoContext $context):array
(void):public int
(CairoContext $context):int
(void):public int
(CairoContext $context):int
(void):public void
(CairoContext $context):void
(void):public void
(CairoContext $context):void
(void):public void
(CairoContext $context):void
(void):public void
(CairoContext $context):void
(void):public int
(CairoContext $context):int
(void):public int
(CairoContext $context):int
(void):public float
(CairoContext $context):float
(void):public void
(CairoContext $context):void
(void):public float
(CairoContext $context):float
(void):public int
(CairoContext $context):int
(void):public void
(CairoContext $context):void
(void):public void
(CairoContext $context):void
(void):public void
(CairoContext $context):void
(void):public float
(CairoContext $context):float
(array $glyphs):public void
(CairoContext $context, array $glyphs):void
(void):public bool
(CairoContext $context):bool
(void):public void
(CairoContext $context):void
(float $x, float $y):public bool
(CairoContext $context, float $x, float $y):bool
(float $x, float $y):public bool
(CairoContext $context, float $x, float $y):bool
(float $x, float $y):public void
(CairoContext $context, float $x, float $y):void
(CairoPattern $pattern):public void
(CairoContext $context, CairoPattern $pattern):void
(CairoSurface $surface [, float $x [, float $y]]):public void
(CairoContext $context, CairoSurface $surface [, float $x [, float $y]]):void
(float $x, float $y):public void
(CairoContext $context, float $x, float $y):void
(void):public void
(CairoContext $context):void
(void):public void
(CairoContext $context):void
(void):public void
(CairoContext $context):void
(float $alpha):public void
(CairoContext $context, float $alpha):void
(void):public array
(CairoContext $context):array
(void):public void
(CairoContext $context):void
(void):public void
(CairoContext $context):void
(void):public void
(CairoContext $context):void
(int $content):public void
(CairoContext $context, int $content):void
(float $x, float $y, float $width, float $height):public void
(CairoContext $context, float $x, float $y, float $width, float $height):void
(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):public void
(CairoContext $context, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):void
(float $x, float $y):public void
(CairoContext $context, float $x, float $y):void
(float $x, float $y):public void
(CairoContext $context, float $x, float $y):void
(void):public void
(CairoContext $context):void
(void):public void
(CairoContext $context):void
(float $angle):public void
(CairoContext $context, float $angle):void
(void):public void
(CairoContext $context):void
(float $x, float $y):public void
(CairoContext $context, float $x, float $y):void
(string $family [, int $slant [, int $weight]]):public void
(CairoContext $context, string $family [, int $slant [, int $weight]]):void
([int $antialias]):public void
(CairoContext $context [, int $antialias]):void
(array $dashes [, float $offset]):public void
(CairoContext $context, array $dashes [, float $offset]):void
(int $setting):public void
(CairoContext $context, int $setting):void
(CairoFontFace $fontface):public void
(CairoContext $context, CairoFontFace $fontface):void
(CairoMatrix $matrix):public void
(CairoContext $context, CairoMatrix $matrix):void
(CairoFontOptions $fontoptions):public void
(CairoContext $context, CairoFontOptions $fontoptions):void
(float $size):public void
(CairoContext $context, float $size):void
(int $setting):public void
(CairoContext $context, int $setting):void
(int $setting):public void
(CairoContext $context, int $setting):void
(float $width):public void
(CairoContext $context, float $width):void
(CairoMatrix $matrix):public void
(CairoContext $context, CairoMatrix $matrix):void
(float $limit):public void
(CairoContext $context, float $limit):void
(int $setting):public void
(CairoContext $context, int $setting):void
(CairoScaledFont $scaledfont):public void
(CairoContext $context, CairoScaledFont $scaledfont):void
(CairoPattern $pattern):public void
(CairoContext $context, CairoPattern $pattern):void
(float $red, float $green, float $blue):public void
(float $red, float $green, float $blue, float $alpha):public void
(CairoSurface $surface [, float $x [, float $y]]):public void
(CairoContext $context, CairoSurface $surface [, float $x [, float $y]]):void
(float $tolerance):public void
(CairoContext $context, float $tolerance):void
(void):public void
(CairoContext $context):void
(string $text):public void
(CairoContext $context, string $text):void
(void):public int
(CairoContext $context):int
(void):public void
(CairoContext $context):void
(void):public array
(CairoContext $context):array
(void):public void
(CairoContext $context):void
(string $text):public array
(CairoContext $context):array
(string $string):public void
(CairoContext $context, string $text):void
(CairoMatrix $matrix):public void
(CairoContext $context, CairoMatrix $matrix):void
(float $x, float $y):public void
(CairoContext $context, float $x, float $y):void
(float $x, float $y):public array
(CairoContext $context, float $x, float $y):array
(float $x, float $y):public array
(CairoContext $context, float $x, float $y):array
(void):public
(void):public int
(CairoFontFace $fontface):int
(void):public int
(CairoFontFace $fontface):int
(void):public
(CairoFontOptions $other):public bool
(void):public int
(void):public int
(void):public int
(void):public int
(void):public int
(CairoFontOptions $other):public void
(int $antialias):public void
(int $hint_metrics):public void
(int $hint_style):public void
(int $subpixel_order):public void
(void):public int
(int $format, int $width):public static int
(float $offset, float $red, float $green, float $blue):public void
(float $offset, float $red, float $green, float $blue, float $alpha):public void
(void):public int
(int $index):public array
(void):public int
(int $extend):public void
(int $format, int $width, int $height):public
(string $data, int $format, int $width, int $height):public static void
(string $file):public static CairoImageSurface
(void):public string
(void):public int
(void):public int
(void):public int
(void):public int
(float $x0, float $y0, float $x1, float $y1):public
(void):public array
([float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0]]]]]]):public
([float $xx = 1.0 [, float $yx = 0.0 [, float $xy = 0.0 [, float $yy = 1.0 [, float $x0 = 0.0 [, float $y0 = 0.0]]]]]]):object
(void):public static void
(void):object
(float $radians):public static void
(float $radians):object
(float $sx, float $sy):public static void
(float $sx, float $sy):object
(float $tx, float $ty):public static void
(float $tx, float $ty):object
(void):public void
(CairoMatrix $matrix1, CairoMatrix $matrix2):public static CairoMatrix
(float $radians):public void
(CairoContext $context, string $radians):void
(float $sx, float $sy):public void
(CairoContext $context, float $sx, float $sy):void
(float $dx, float $dy):public array
(float $dx, float $dy):public array
(float $tx, float $ty):public void
(void):public
(void):public void
(void):public int
(CairoMatrix $matrix):public void
(void):public int
(string $file, float $width, float $height):public
(float $width, float $height):public void
(string $file, float $width, float $height):public
(void):public void
(void):public void
(string $comment):public void
(void):public bool
(void):public static array
(int $level):public static string
(int $level):public void
(bool $level):public void
(float $width, float $height):public void
(float $x0, float $y0, float $r0, float $x1, float $y1, float $r1):public
(void):public array
(CairoFontFace $font_face, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $options):public
(void):public array
(void):public CairoMatrix
(void):public void
(void):public void
(void):public void
(void):public void
(void):public int
(array $glyphs):public array
(void):public int
(string $text):public array
(float $red, float $green, float $blue [, float $alpha = 0]):public
(void):public array
(void):public
(void):public void
(CairoSurface $other, int $content, string $width, string $height):public void
(void):public void
(void):public void
(void):public int
(void):public array
(void):public void
(void):public int
(void):public void
(float $x, float $y, float $width, float $height):public void
(float $x, float $y):public void
(float $x, float $y):public void
(void):public void
(void):public int
(string $file):public void
(CairoSurface $surface):public
(void):public int
(void):public int
(void):public void
(int $extend):public void
(int $filter):public void
(string $file, float $width, float $height):public
(void):public static array
(void):array
(int $version):public void
(int $version):public static string
(void):public string
(Iterator $iterator, callable $callback):public
(string $pathname):public
(string $key):public string
(Closure $closure, object $newthis [, mixed $newscope = "static"]):public static Closure
(object $newthis [, mixed $newscope = "static"]):public Closure
(object $newthis [, mixed $...]):public mixed
(void):private
(callable $callable):public static Closure
(array &$arr [, int $sort_flag]):public bool
(Collator $coll, array &$arr [, int $sort_flag]):bool
(string $str1, string $str2):public int
(Collator $coll, string $str1, string $str2):int
(string $locale):public
(string $locale):public static Collator
(string $locale):Collator
(int $attr):public int
(Collator $coll, int $attr):int
(void):public int
(Collator $coll):int
(void):public string
(Collator $coll):string
(int $type):public string
(Collator $coll, int $type):string
(string $str):public string
(Collator $coll, string $str):string
(void):public int
(Collator $coll):int
(int $attr, int $val):public bool
(Collator $coll, int $attr, int $val):bool
(int $strength):public bool
(Collator $coll, int $strength):bool
(array &$arr [, int $sort_flag]):public bool
(Collator $coll, array &$arr [, int $sort_flag]):bool
(array &$arr):public bool
(Collator $coll, array &$arr):bool
(void):public bool
(void):public void
(string $query):public
(\CommonMark\Node $root, callable $handler):public
(CommonMark\Interfaces\IVisitor $visitor):abstract public void
(IVisitable $visitable):abstract public ?int|IVisitable
(IVisitable $visitable):abstract public ?int|IVisitable
(void):public
(string $fence, string $literal):public
(void):public
(void):public
(void):public
(void):public
(void):public
(CommonMark\Interfaces\IVisitor $visitor):public void
(CommonMark\Node $child):public CommonMark\Node
(CommonMark\Node $sibling):public CommonMark\Node
(CommonMark\Node $sibling):public CommonMark\Node
(CommonMark\Node $child):public CommonMark\Node
(CommonMark\Node $target):public CommonMark\Node
(void):public void
([int $options]):public
(void):public CommonMark\Node
(string $buffer):public void
(string $interface):public Definition
(string $name, \Componere\Method $method):public Definition
(string $trait):public Definition
(void):public \ReflectionClass
(string $name, \Componere\Value $value):public Definition
(string $name, \Componere\Value $value):public Definition
(string $name):public
(string $name):public \Closure
(void):public array
(void):public bool
(void):public void
(\Closure $closure):public
(void):public \ReflectionMethod
(void):public Method
(void):public Method
(void):public Method
(void):public void
(object $instance):public
(object $instance):public Patch
(string $name):public \Closure
(void):public array
(void):public bool
(void):public void
([$default]):public
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public Value
(void):public Value
(void):public Value
(Type, $object):Type
(Type, $object):Type
(int $condition):final public static bool
(void):final public static int
(int $condition):final public static bool
(int $condition):final public static bool
(int $condition, int $mutex [, int $timeout]):final public static bool
(void):abstract public int
(string $filename [, string $mimetype [, string $postname]]):public
(string $filename [, string $mimetype [, string $postname]]):CURLFile
(void):public string
(void):public string
(void):public string
(string $mime):public void
(string $postname):public void
(void):public void
(string $interval_spec):public
(string $time):public static DateInterval
(string $format):public string
(DateTimeInterface $start, DateInterval $interval, int $recurrences [, int $options]):public
(void):public DateInterval
(void):public DateTimeInterface
(void):public DateTimeInterface
(DateInterval $interval):public DateTime
(DateTime $object, DateInterval $interval):DateTime
([string $time = "now" [, DateTimeZone $timezone = NULL]]):public
([string $time = "now" [, DateTimeZone $timezone = NULL]]):DateTime
(string $format, string $time [, DateTimeZone $timezone]):public static DateTime
(string $format, string $time [, DateTimeZone $timezone]):DateTime
(DateTimeInterface $datetime2 [, bool $absolute = FALSE]):public DateInterval
(DateTimeInterface $datetime2 [, bool $absolute = FALSE]):public DateInterval
(string $format):public string
(string $format):public string
(void):public static array
(void):array
(void):public int
(void):public int
(void):public int
(void):public int
(void):public DateTimeZone
(void):public DateTimeZone
(string $modify):public DateTime
(DateTime $object, string $modify):DateTime
(array $array):public static DateTime
(int $year, int $month, int $day):public DateTime
(DateTime $object, int $year, int $month, int $day):DateTime
(int $year, int $week [, int $day = 1]):public DateTime
(DateTime $object, int $year, int $week [, int $day = 1]):DateTime
(int $hour, int $minute [, int $second = 0 [, int $microseconds = 0]]):public DateTime
(DateTime $object, int $hour, int $minute [, int $second = 0 [, int $microseconds = 0]]):DateTime
(int $unixtimestamp):public DateTime
(DateTime $object, int $unixtimestamp):DateTime
(DateTimeZone $timezone):public DateTime
(DateTime $object, DateTimeZone $timezone):DateTime
(DateInterval $interval):public DateTime
(DateTime $object, DateInterval $interval):DateTime
(void):public
(void):public
(DateInterval $interval):public DateTimeImmutable
([string $time = "now" [, DateTimeZone $timezone = NULL]]):public
([string $time = "now" [, DateTimeZone $timezone = NULL]]):DateTimeImmutable
(string $format, string $time [, DateTimeZone $timezone]):public static DateTimeImmutable
(string $format, string $time [, DateTimeZone $timezone]):DateTimeImmutable
(DateTime $datetime):public static DateTimeImmutable
(void):public static array
(string $modify):public DateTimeImmutable
(array $array):public static DateTimeImmutable
(int $year, int $month, int $day):public DateTimeImmutable
(int $year, int $week [, int $day = 1]):public DateTimeImmutable
(int $hour, int $minute [, int $second = 0 [, int $microseconds = 0]]):public DateTimeImmutable
(int $unixtimestamp):public DateTimeImmutable
(DateTimeZone $timezone):public DateTimeImmutable
(DateInterval $interval):public DateTimeImmutable
(string $timezone):public
(string $timezone):DateTimeZone
(void):public array
(DateTimeZone $object):array
(void):public string
(DateTimeZone $object):string
(DateTime $datetime):public int
(DateTimeZone $object, DateTime $datetime):int
([int $timestamp_begin [, int $timestamp_end]]):public array
(DateTimeZone $object [, int $timestamp_begin [, int $timestamp_end]]):array
(void):public static array
(void):array
([int $what = DateTimeZone::ALL [, string $country = NULL]]):public static array
([int $what = DateTimeZone::ALL [, string $country = NULL]]):array
([resource $dir_handle]):public void
([resource $dir_handle]):public string
([resource $dir_handle]):public void
(string $path):public
(void):public DirectoryIterator
(void):public int
([string $suffix]):public string
(void):public int
(void):public string
(void):public string
(void):public int
(void):public int
(void):public int
(void):public int
(void):public string
(void):public string
(void):public int
(void):public int
(void):public string
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public string
(void):public void
(void):public void
(int $position):public void
(void):public string
(void):public bool
(string $name [, string $value]):public
(void):public bool
(string $value):public
(string $data):public void
(int $offset, int $count):public void
(int $offset, string $data):public void
(int $offset, int $count, string $data):public void
(int $offset, int $count):public string
([string $value]):public
([string $version [, string $encoding]]):public
(string $name):public DOMAttr
(string $namespaceURI, string $qualifiedName):public DOMAttr
(string $data):public DOMCDATASection
(string $data):public DOMComment
(void):public DOMDocumentFragment
(string $name [, string $value]):public DOMElement
(string $namespaceURI, string $qualifiedName [, string $value]):public DOMElement
(string $name):public DOMEntityReference
(string $target [, string $data]):public DOMProcessingInstruction
(string $content):public DOMText
(string $elementId):public DOMElement
(string $name):public DOMNodeList
(string $namespaceURI, string $localName):public DOMNodeList
(DOMNode $importedNode [, bool $deep]):public DOMNode
(string $filename [, int $options = 0]):public mixed
(string $source [, int $options = 0]):public bool
(string $filename [, int $options = 0]):public bool
(string $source [, int $options = 0]):public mixed
(void):public void
(string $baseclass, string $extendedclass):public bool
(string $filename):public bool
(string $source):public bool
(string $filename [, int $options]):public int
([DOMNode $node = NULL]):public string
(string $filename):public int
([DOMNode $node [, int $options]]):public string
(string $filename [, int $flags]):public bool
(string $source [, int $flags]):public bool
(void):public bool
([int $options]):public int
(string $data):public bool
(string $name [, string $value [, string $namespaceURI]]):public
(string $name):public string
(string $name):public DOMAttr
(string $namespaceURI, string $localName):public DOMAttr
(string $namespaceURI, string $localName):public string
(string $name):public DOMNodeList
(string $namespaceURI, string $localName):public DOMNodeList
(string $name):public bool
(string $namespaceURI, string $localName):public bool
(string $name):public bool
(DOMAttr $oldnode):public bool
(string $namespaceURI, string $localName):public bool
(string $name, string $value):public DOMAttr
(DOMAttr $attr):public DOMAttr
(DOMAttr $attr):public DOMAttr
(string $namespaceURI, string $qualifiedName, string $value):public void
(string $name, bool $isId):public void
(DOMAttr $attr, bool $isId):public void
(string $namespaceURI, string $localName, bool $isId):public void
(string $name):public
(void)
([string $namespaceURI = NULL [, string $qualifiedName = NULL [, DOMDocumentType $doctype = NULL]]]):public DOMDocument
([string $qualifiedName = NULL [, string $publicId = NULL [, string $systemId = NULL]]]):public DOMDocumentType
(string $feature, string $version):public bool
(string $name):DOMNode
(string $namespaceURI, string $localName):DOMNode
(int $index):DOMNode
(DOMNode $newnode):public DOMNode
([bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes]]]]):public string
(string $uri [, bool $exclusive = FALSE [, bool $with_comments = FALSE [, array $xpath [, array $ns_prefixes]]]]):public int
([bool $deep]):public DOMNode
(void):public int
(void):public string
(void):public bool
(void):public bool
(DOMNode $newnode [, DOMNode $refnode]):public DOMNode
(string $namespaceURI):public bool
(DOMNode $node):public bool
(string $feature, string $version):public bool
(string $prefix):public string
(string $namespaceURI):public string
(void):public void
(DOMNode $oldnode):public DOMNode
(DOMNode $newnode, DOMNode $oldnode):public DOMNode
(void):public int
(int $index):DOMNode
(string $name [, string $value]):public
([string $value]):public
(void):public bool
(void):public bool
(int $offset):public DOMText
(DOMDocument $doc):public
(string $expression [, DOMNode $contextnode [, bool $registerNodeNS = TRUE]]):public mixed
(string $expression [, DOMNode $contextnode [, bool $registerNodeNS = TRUE]]):public DOMNodeList
(string $prefix, string $namespaceURI):public bool
([mixed $restrict]):public void
(void):abstract public void
(void):abstract public Ds\Collection
(void):abstract public bool
(void):abstract public array
(int $capacity):public void
(callable $callback):public void
(void):public int
(void):public void
([mixed $values]):public
([mixed $...values]):public bool
(void):public Ds\Deque
([callable $callback]):public Ds\Deque
(mixed $value):public mixed
(void):public mixed
(int $index):public mixed
(int $index [, mixed $...values]):public void
(void):public bool
([string $glue]):public string
(void):public mixed
(callable $callback):public Ds\Deque
(mixed $values):public Ds\Deque
(void):public mixed
([mixed $...values]):public void
(callable $callback [, mixed $initial]):public mixed
(int $index):public mixed
(void):public void
(void):public Ds\Deque
(int $rotations):public void
(int $index, mixed $value):public void
(void):public mixed
(int $index [, int $length]):public Ds\Deque
([callable $comparator]):public void
([callable $comparator]):public Ds\Deque
(void):public number
(void):public array
([mixed $values]):public void
(object $obj):abstract public bool
(void):abstract public mixed
(int $capacity):public void
(callable $callback):public void
(void):public int
(void):public void
([mixed $...values]):public
(void):public Ds\Map
(Ds\Map $map):public Ds\Map
([callable $callback]):public Ds\Map
(void):public Ds\Pair
(mixed $key [, mixed $default]):public mixed
(mixed $key):public bool
(mixed $value):public bool
(Ds\Map $map):public Ds\Map
(void):public bool
(void):public Ds\Set
([callable $comparator]):public void
([callable $comparator]):public Ds\Map
(void):public Ds\Pair
(callable $callback):public Ds\Map
(mixed $values):public Ds\Map
(void):public Ds\Sequence
(mixed $key, mixed $value):public void
(mixed $pairs):public void
(callable $callback [, mixed $initial]):public mixed
(mixed $key [, mixed $default]):public mixed
(void):public void
(void):public Ds\Map
(int $position):public Ds\Pair
(int $index [, int $length]):public Ds\Map
([callable $comparator]):public void
([callable $comparator]):public Ds\Map
(void):public number
(void):public array
(Ds\Map $map):public Ds\Map
(void):public Ds\Sequence
(Ds\Map $map):public Ds\Map
(void):public void
([mixed $key [, mixed $value]]):public
(void):public Ds\Pair
(void):public bool
(void):public array
(int $capacity):public void
(void):public int
(void):public void
(void):public
(void):public Ds\PriorityQueue
(void):public bool
(void):public mixed
(void):public mixed
(mixed $value, int $priority):public void
(void):public array
(int $capacity):public void
(void):public int
(void):public void
([mixed $values]):public
(void):public Ds\Queue
(void):public bool
(void):public mixed
(void):public mixed
([mixed $...values]):public void
(void):public array
(int $capacity):abstract public void
(callable $callback):abstract public void
(void):abstract public int
([mixed $...values]):abstract public bool
([callable $callback]):abstract public Ds\Sequence
(mixed $value):abstract public mixed
(void):abstract public mixed
(int $index):abstract public mixed
(int $index [, mixed $...values]):abstract public void
([string $glue]):abstract public string
(void):abstract public mixed
(callable $callback):abstract public Ds\Sequence
(mixed $values):abstract public Ds\Sequence
(void):abstract public mixed
([mixed $...values]):abstract public void
(callable $callback [, mixed $initial]):abstract public mixed
(int $index):abstract public mixed
(void):abstract public void
(void):abstract public Ds\Sequence
(int $rotations):abstract public void
(int $index, mixed $value):abstract public void
(void):abstract public mixed
(int $index [, int $length]):abstract public Ds\Sequence
([callable $comparator]):abstract public void
([callable $comparator]):abstract public Ds\Sequence
(void):abstract public number
([mixed $values]):abstract public void
([mixed $...values]):public void
(int $capacity):public void
(void):public int
(void):public void
([mixed $...values]):public
([mixed $...values]):public bool
(void):public Ds\Set
(Ds\Set $set):public Ds\Set
([callable $callback]):public Ds\Set
(void):public void
(int $index):public mixed
(Ds\Set $set):public Ds\Set
(void):public bool
([string $glue]):public string
(void):public void
(mixed $values):public Ds\Set
(callable $callback [, mixed $initial]):public mixed
([mixed $...values]):public void
(void):public void
(void):public Ds\Set
(int $index [, int $length]):public Ds\Set
([callable $comparator]):public void
([callable $comparator]):public Ds\Set
(void):public number
(void):public array
(Ds\Set $set):public Ds\Set
(Ds\Set $set):public Ds\Set
(int $capacity):public void
(void):public int
(void):public void
([mixed $values]):public
(void):public Ds\Stack
(void):public bool
(void):public mixed
(void):public mixed
([mixed $...values]):public void
(void):public array
(int $capacity):public void
(callable $callback):public void
(void):public int
(void):public void
([mixed $values]):public
([mixed $...values]):public bool
(void):public Ds\Vector
([callable $callback]):public Ds\Vector
(mixed $value):public mixed
(void):public mixed
(int $index):public mixed
(int $index [, mixed $...values]):public void
(void):public bool
([string $glue]):public string
(void):public mixed
(callable $callback):public Ds\Vector
(mixed $values):public Ds\Vector
(void):public mixed
([mixed $...values]):public void
(callable $callback [, mixed $initial]):public mixed
(int $index):public mixed
(void):public void
(void):public Ds\Vector
(int $rotations):public void
(int $index, mixed $value):public void
(void):public mixed
(int $index [, int $length]):public Ds\Vector
([callable $comparator]):public void
([callable $comparator]):public Ds\Vector
(void):public number
(void):public array
([mixed $values]):public void
(void):public mixed
(void):public scalar
(void):public void
(void):public void
(void):public bool
(void):final private void
([string $message = "" [, int $code = 0 [, Throwable $previous = NULL]]]):public
(void):final public mixed
(void):final public string
(void):final public int
(void):final public string
(void):final public Throwable
(void):final public array
(void):final public string
(void):public string
([string $message = "" [, int $code = 0 [, int $severity = E_ERROR [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL]]]]]]):public
(void):final public int
(void):final public static int
(void):final public static int
(void):final public static void
(int $signum):final public static void
(int $signum):final public static void
(void):final public static int
(void):final public static float
(void):final public static void
(void):final public static void
(void):final public static void
([int $flags]):final public static void
(float $seconds):final public static void
([int $how]):final public static void
(void):final public static void
(void):final public static void
(void):final public static float
(void):final public static void
(callable $callback [, mixed $data [, int $priority]]):public
(string $callback [, string $data [, string $priority]]):final public static object
(int $pid, bool $trace, callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
(int $pid, bool $trace, callable $callback [, mixed $data [, int $priority]]):final public static object
(int $pid, bool $trace):public void
(object $other [, callable $callback [, mixed $data [, int $priority]]]):public
(object $other [, callable $callback [, mixed $data [, int $priority]]]):final public static void
(object $other):public void
(void):public void
([float $timeout]):public bool
([float $timeout]):public bool
([float $timeout]):public bool
(EventBase $base, mixed $fd, int $what, callable $cb [, mixed $arg = NULL]):public
(void):public bool
(void):public bool
(void):public bool
(void):public void
(void):public static array
(int $flags):public bool
(EventBase $base, mixed $fd [, int $what [, callable $cb [, mixed $arg]]]):public bool
(int $priority):public bool
(EventBase $base, callable $cb [, mixed $arg]):public bool
(EventBase $base, int $signum, callable $cb [, mixed $arg]):public static Event
(EventBase $base, callable $cb [, mixed $arg]):public static Event
([EventConfig $cfg]):public
(void):public void
([float $timeout]):public bool
(void):public void
(void):public int
(void):public string
(void):public float
(void):public bool
(void):public bool
([int $flags]):public bool
(int $n_priorities):public bool
(void):public bool
(void):public bool
(string $data):public bool
(EventBuffer $buf):public bool
(EventBuffer $buf, int $len):public int
(void):public
(string &$data, int $max_bytes):public int
(int $len):public bool
(void):public void
(int $len):public bool
(bool $at_front):public bool
(void):public void
(string $data):public bool
(EventBuffer $buf):public bool
(int $size):public string
(int $max_bytes):public string
(mixed $fd, int $howmuch):public int
(int $eol_style):public string
(string $what [, int $start = -1 [, int $end = -1]]):public mixed
([int $start = -1 [, int $eol_style = EventBuffer::EOL_ANY]]):public mixed
(int $start [, int $length]):public string
(bool $at_front):public bool
(void):public bool
(mixed $fd [, int $howmuch]):public int
(void):public void
(string $addr):public bool
(EventDnsBase $dns_base, string $hostname, int $port [, int $family = EventUtil::AF_UNSPEC]):public bool
(EventBase $base [, mixed $socket = NULL [, int $options = 0 [, callable $readcb = NULL [, callable $writecb = NULL [, callable $eventcb = NULL]]]]]):public
(EventBase $base [, int $options = 0]):public static array
(int $events):public bool
(int $events):public bool
(void):public void
(void):public string
(void):public int
(void):public EventBuffer
(void):public EventBuffer
(int $size):public string
(EventBuffer $buf):public bool
(callable $readcb, callable $writecb, callable $eventcb [, string $arg]):public void
(int $priority):public bool
(float $timeout_read, float $timeout_write):public bool
(int $events, int $lowmark, int $highmark):public void
(void):public string
(EventBase $base, EventBufferEvent $underlying, EventSslContext $ctx, int $state [, int $options = 0]):public static EventBufferEvent
(void):public string
(void):public string
(void):public string
(void):public string
(void):public void
(EventBase $base, mixed $socket, EventSslContext $ctx, int $state [, int $options]):public static EventBufferEvent
(string $data):public bool
(EventBuffer $buf):public bool
(string $method):public bool
(void):public
(int $feature):public bool
(int $max_interval, int $max_callbacks, int $min_priority):public void
(string $ip):public bool
(string $domain):public void
(void):public void
(EventBase $base, bool $initialize):public
(void):public int
(string $hosts):public bool
(int $flags, string $filename):public bool
(string $option, string $value):public bool
(int $ndots):public bool
(mixed $socket):public bool
(string $alias):public bool
(string $address, int $port):public void
(EventBase $base [, EventSslContext $ctx = NULL]):public
(string $alias):public bool
(int $methods):public void
(string $path, string $cb [, string $arg]):public void
(string $cb [, string $arg]):public void
(int $value):public void
(int $value):public void
(int $value):public void
(EventBase $base, EventDnsBase $dns_base, string $address, int $port [, EventSslContext $ctx = NULL]):public
(void):public EventBase
(string &$address, int &$port):public void
(EventHttpRequest $req, int $type, string $uri):public bool
(callable $callback [, mixed $data]):public void
(string $address):public void
(int $port):public void
(string $max_size):public void
(string $max_size):public void
(int $retries):public void
(int $timeout):public void
(string $key, string $value, int $type):public bool
(void):public void
(void):public void
(void):public void
(callable $callback [, mixed $data = NULL]):public
(string $key, string $type):public void
(void):public void
(void):public EventBufferEvent
(void):public void
() method is usually useful when we need to set up a callback on connection close. See EventHttpConnection::setCloseCallback() .
(void):public string
(void):public EventBuffer
(void):public array
(void):public EventBuffer
(void):public void
(void):public int
(void):public string
(string $key, string $type):public void
(int $error [, string $reason = NULL]):public void
(int $code, string $reason [, EventBuffer $buf]):public void
(EventBuffer $buf):public void
(void):public void
(int $code, string $reason):public void
(EventBase $base, callable $cb, mixed $data, int $flags, int $backlog, mixed $target):public
(void):public bool
(void):public bool
(void):public void
(string &$address [, mixed &$port]):public static bool
(callable $cb [, mixed $arg = NULL]):public void
(string $cb):public void
(string $method, string $options):public
(void):abstract public
([mixed $socket = NULL]):public static int
([mixed $socket]):public static string
(mixed $socket):public static int
(mixed $socket, string &$address [, mixed &$port]):public static bool
(mixed $socket, int $level, int $optname, mixed $optval):public static bool
(void):public static void
(callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
(string $callback [, string $data [, string $priority]]):final public static object
(callable $callback [, mixed $data [, int $priority]]):public
(string $callback [, mixed $data [, int $priority]]):final public static object
(mixed $fd, int $events, callable $callback [, mixed $data [, int $priority]]):public
(mixed $fd, int $events, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static EvIo
(mixed $fd, int $events):public void
(void):public int
(string $callback [, string $data [, string $priority]]):final public EvCheck
(string $pid, string $trace, string $callback [, string $data [, string $priority]]):final public EvChild
([int $flags [, mixed $data = NULL [, float $io_interval = 0.0 [, float $timeout_interval = 0.0]]]]):public
([int $flags = Ev::FLAG_AUTO [, mixed $data = NULL [, float $io_interval = 0. [, float $timeout_interval = 0.]]]]):public static EvLoop
(string $other [, string $callback [, string $data [, string $priority]]]):final public EvEmbed
(callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvFork
(callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvIdle
(void):public void
(mixed $fd, int $events, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvIo
(void):public void
(void):public float
(void):public void
(float $offset, float $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvPeriodic
(callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvPrepare
(void):public void
([int $flags = 0]):public void
(int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvSignal
(string $path, float $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvStat
([int $how]):public void
(void):public void
(float $after, float $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public EvTimer
(void):public void
(void):public void
(void):public float
(float $offset, string $interval, callable $reschedule_cb, callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
(float $offset, float $interval, callable $reschedule_cb, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static EvPeriodic
(float $offset, float $interval):public void
(string $callback [, string $data [, string $priority]]):public
(callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static EvPrepare
(int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
(int $signum, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static EvSignal
(int $signum):public void
(void):public array
(string $path, float $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
(string $path, float $interval, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static void
(void):public void
(string $path, float $interval):public void
(void):public bool
(void):public void
(float $after, float $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0]]):public
(float $after, float $repeat, callable $callback [, mixed $data = NULL [, int $priority = 0]]):final public static EvTimer
(float $after, float $repeat):public void
(void):public int
(void):abstract public
(int $revents):public void
(void):public EvLoop
(int $revents):public void
([bool $value]):public bool
(callable $callback):public void
(void):public void
(void):public void
(void):final private void
([string $message = "" [, int $code = 0 [, Throwable $previous = NULL]]]):public
(void):final public mixed
(void):final public string
(void):final public int
(void):final public string
(void):final public Throwable
(void):final public array
(void):final public string
(void):public string
(int $from_neuron, int $to_neuron, float $weight):public
(void):public int
(void):public int
(void):public void
(float $weight):public void
(string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS]):public
(void):public mixed
(void):public int
(void):public string
(void):public void
(void):public void
([int $flags]):public void
(void):public abstract bool
(Iterator $iterator):public
(void):public mixed
(void):public Iterator
(void):public mixed
(void):public void
(void):public void
(void):public bool
(string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL]]):public string
([int $options = FILEINFO_NONE [, string $magic_file = NULL]]):public
(string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL]]):public string
(int $options):public bool
(mixed $number):number
(float $arg):float
(float $arg):float
(string $str, string $charlist):string
(string $str):string
(void):bool
(void):array
(void):string
(string $variable [, bool $walk_to_top = FALSE]):string
(string $filename):object
(string $note_name [, string $note_value = ""]):string
(void):array
(void):bool
(void):array
(string $variable, string $value [, bool $walk_to_top = FALSE]):bool
(string $key, mixed $var [, int $ttl = 0]):bool
([array $files = NULL [, array $user_vars = NULL]]):string
(array $files, array $user_vars, string $filename [, int $flags = 0 [, resource $context = NULL]]):int
(string $data [, int $flags = 0]):bool
(string $filename [, resource $context = NULL [, int $flags = 0]]):bool
([string $cache_type = "" [, bool $limited = FALSE]]):array
(string $key, int $old, int $new):bool
([string $cache_type = ""]):bool
(string $filename [, bool $atomic = TRUE]):mixed
(string $key [, int $step = 1 [, bool &$success]]):int
(string $key, array $constants [, bool $case_sensitive = TRUE]):bool
(mixed $keys):mixed
(string $key):mixed
(mixed $keys):mixed
(mixed $key [, bool &$success]):mixed
(string $key [, int $step = 1 [, bool &$success]]):int
(string $key [, bool $case_sensitive = TRUE]):bool
([bool $limited = FALSE]):array
(string $key, mixed $var [, int $ttl = 0]):bool
(string $key, mixed $var [, int $ttl = 0]):bool
([bool $limited = FALSE]):array
(string $key, int $old, int $new):bool
(void):bool
(string $key [, int $step = 1 [, bool &$success]]):int
(mixed $key):bool
(string $key, callable $generator [, int $ttl = 0]):mixed
(mixed $keys):mixed
(mixed $key [, bool &$success]):mixed
(string $key [, int $step = 1 [, bool &$success]]):int
([bool $limited = FALSE]):array
(string $key, mixed $var [, int $ttl = 0]):bool
(int $debug_level):bool
(void):array
(string $warning [, string $delimiter = "<BR />"]):void
(int $debug_level):bool
(string $warning [, string $delimiter = "<BR />"]):void
(void):void
(void):array
(void):array
(string $output):bool
(void):array
([string $dump_directory = ini_get("apd.dumpdir") [, string $fragment = "pprof"]]):string
(string $tcp_server, int $socket_type, int $port, int $debug_level):bool
(int $debug_level [, string $dump_directory = ini_get("apd.dumpdir")]):void
(int $debug_level):void
(array $array [, int $case = CASE_LOWER]):array
(array $array, int $size [, bool $preserve_keys = FALSE]):array
(array $input, mixed $column_key [, mixed $index_key = NULL]):array
(array $keys, array $values):array
(array $array):array
(array $array1, array $array2 [, array $...]):array
(array $array1, array $array2 [, array $...]):array
(array $array1, array $array2 [, array $...], callable $key_compare_func):array
(array $array1, array $array2 [, array $...], callable $key_compare_func):array
(array $array1, array $array2 [, array $...]):array
(array $keys, mixed $value):array
(int $start_index, int $num, mixed $value):array
(array $array [, callable $callback [, int $flag = 0]]):array
(array $array):array
(array $array1, array $array2 [, array $...]):array
(array $array1, array $array2 [, array $...]):array
(array $array1, array $array2 [, array $...], callable $key_compare_func):array
(array $array1, array $array2 [, array $...], callable $key_compare_func):array
(array $array1, array $array2 [, array $...]):array
(mixed $key, array $array):bool
(array $array):mixed
(array $array):mixed
(array $array [, mixed $search_value [, bool $strict = FALSE]]):array
(callable $callback, array $array1 [, array $...]):array
(array $array1 [, array $...]):array
(array $array1 [, array $...]):array
(array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $...]]]):bool
(array $array, int $size, mixed $value):array
(array &$array):mixed
(array $array):number
(array &$array [, mixed $...]):int
(array $array [, int $num = 1]):mixed
(array $array, callable $callback [, mixed $initial = NULL]):mixed
(array $array1 [, array $...]):array
(array $array1 [, array $...]):array
(array $array [, bool $preserve_keys = FALSE]):array
(mixed $needle, array $haystack [, bool $strict = FALSE]):mixed
(array &$array):mixed
(array $array, int $offset [, int $length = NULL [, bool $preserve_keys = FALSE]]):array
(array &$input, int $offset [, int $length = count($input) [, mixed $replacement = array()]]):array
(array $array):number
(array $array1, array $array2 [, array $...], callable $value_compare_func):array
(array $array1, array $array2 [, array $...], callable $value_compare_func, callable $key_compare_func):array
(array $array1, array $array2 [, array $...], callable $value_compare_func):array
(array $array1, array $array2 [, array $...], callable $value_compare_func):array
(array $array1, array $array2 [, array $...], callable $value_compare_func, callable $key_compare_func):array
(array $array1, array $array2 [, array $...], callable $value_compare_func):array
(array $array [, int $sort_flags = SORT_STRING]):array
(array &$array [, mixed $...]):int
(array $array):array
(array &$array, callable $callback [, mixed $userdata = NULL]):bool
(array &$array, callable $callback [, mixed $userdata = NULL]):bool
array ([mixed $...])
(array &$array [, int $sort_flags = SORT_REGULAR]):bool
(float $arg):float
(float $arg):float
(array &$array [, int $sort_flags = SORT_REGULAR]):bool
(int $what [, mixed $value]):mixed
(mixed $assertion [, string $description]):bool
(float $arg):float
(float $y, float $x):float
(float $arg):float
(string $class):void
(string $number, int $frombase, int $tobase):string
(string $data [, bool $strict = FALSE]):string
(string $data):string
(string $path [, string $suffix]):string
(resource $bbcode_container, string $tag_name, array $tag_rules):bool
(resource $bbcode_container, string $smiley, string $replace_by):bool
([array $bbcode_initial_tags = NULL]):resource
(resource $bbcode_container):bool
(resource $bbcode_container, string $to_parse):string
(resource $bbcode_container, resource $bbcode_arg_parser):bool
(resource $bbcode_container, int $flags [, int $mode = BBCODE_SET_FLAGS_SET]):bool
(string $left_operand, string $right_operand [, int $scale = 0]):string
(string $left_operand, string $right_operand [, int $scale = 0]):int
(string $dividend, string $divisor [, int $scale = 0]):string
(string $dividend, string $divisor [, int $scale]):string
(string $left_operand, string $right_operand [, int $scale = 0]):string
(string $filename):bool
(string $filename):bool
(string $class, string $callback):bool
(resource $filehandle):bool
(resource $filehandle, string $className [, string $extends]):bool
(resource $filehandle, string $constantName):bool
(resource $filehandle, int $startpos):bool
(resource $filehandle, string $filename):bool
(resource $filehandle):bool
(resource $filehandle, string $functionName):bool
(resource $filehandle, string $fileName):bool
(resource $filehandle [, string $write_ver]):bool
(resource $filehandle, string $filename):bool
(string $base, string $exponent [, int $scale = 0]):string
(string $base, string $exponent, string $modulus [, int $scale = 0]):string
([int $scale]):int
(string $operand [, int $scale = 0]):string
(string $left_operand, string $right_operand [, int $scale = 0]):string
(string $str):string
(string $domain, string $codeset):string
(string $binary_string):number
(string $domain, string $directory):string
(string $plaintext, string $encodedfile [, string $encryption_key]):string
(mixed $var):bool
(string $bson):array
(mixed $anything):string
(resource $bz):int
(string $source [, int $blocksize = 4 [, int $workfactor = 0]]):mixed
(string $source [, int $small = 0]):mixed
(resource $bz):int
(resource $bz):array
(resource $bz):string
(resource $bz):bool
(mixed $file, string $mode):resource
(resource $bz [, int $length = 1024]):string
(resource $bz, string $data [, int $length]):int
(CairoSurface $surface):CairoContext
(void):CairoFontOptions
(CairoFontOptions $options, CairoFontOptions $other):bool
(CairoFontOptions $options):int
(CairoFontOptions $options):int
(CairoFontOptions $options):int
(CairoFontOptions $options):int
(CairoFontOptions $options):int
(CairoFontOptions $options, CairoFontOptions $other):void
(CairoFontOptions $options, int $antialias):void
(CairoFontOptions $options, int $hint_metrics):void
(CairoFontOptions $options, int $hint_style):void
(CairoFontOptions $options, int $subpixel_order):void
(CairoFontOptions $options):int
(int $format, int $width):int
(string $data, int $format, int $width, int $height [, int $stride = -1]):CairoImageSurface
(mixed $file):CairoImageSurface
(int $format, int $width, int $height):CairoImageSurface
(CairoImageSurface $surface):string
(CairoImageSurface $surface):int
(CairoImageSurface $surface):int
(CairoImageSurface $surface):int
(CairoImageSurface $surface):int
(float $sx, float $sy):void
(float $tx, float $ty):void
(CairoMatrix $matrix):void
(CairoMatrix $matrix1, CairoMatrix $matrix2):CairoMatrix
(CairoMatrix $matrix, float $dx, float $dy):array
(CairoMatrix $matrix, float $dx, float $dy):array
(CairoMatrix $matrix, float $tx, float $ty):void
(CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue):void
(CairoGradientPattern $pattern, float $offset, float $red, float $green, float $blue, float $alpha):void
(CairoSurface $surface):CairoPattern
(float $x0, float $y0, float $x1, float $y1):CairoPattern
(float $x0, float $y0, float $r0, float $x1, float $y1, float $r1):CairoPattern
(float $red, float $green, float $blue):CairoPattern
(float $red, float $green, float $blue, float $alpha):CairoPattern
(CairoGradientPattern $pattern):int
(CairoGradientPattern $pattern, int $index):array
(string $pattern):int
(CairoSurfacePattern $pattern):int
(CairoLinearGradient $pattern):array
(CairoPattern $pattern):CairoMatrix
(CairoRadialGradient $pattern):array
(CairoSolidPattern $pattern):array
(CairoSurfacePattern $pattern):CairoSurface
(CairoPattern $pattern):int
(string $pattern, string $extend):void
(CairoSurfacePattern $pattern, int $filter):void
(CairoPattern $pattern, CairoMatrix $matrix):void
(CairoPattern $pattern):int
(string $file, float $width, float $height):CairoPdfSurface
(CairoPdfSurface $surface, float $width, float $height):void
(void):array
(int $level):string
(string $file, float $width, float $height):CairoPsSurface
(CairoPsSurface $surface):void
(CairoPsSurface $surface):void
(CairoPsSurface $surface, string $comment):void
(CairoPsSurface $surface):bool
(CairoPsSurface $surface, int $level):void
(CairoPsSurface $surface, bool $level):void
(CairoPsSurface $surface, float $width, float $height):void
(CairoFontFace $fontface, CairoMatrix $matrix, CairoMatrix $ctm, CairoFontOptions $fontoptions):CairoScaledFont
(CairoScaledFont $scaledfont):array
(CairoScaledFont $scaledfont):CairoMatrix
(CairoScaledFont $scaledfont):CairoFontFace
(CairoScaledFont $scaledfont):CairoFontOptions
(CairoScaledFont $scaledfont):CairoFontOptions
(CairoScaledFont $scaledfont):CairoMatrix
(CairoScaledFont $scaledfont):int
(CairoScaledFont $scaledfont, array $glyphs):array
(CairoScaledFont $scaledfont):int
(CairoScaledFont $scaledfont, string $text):array
(CairoSurface $surface):void
(CairoSurface $surface, int $content, float $width, float $height):CairoSurface
(CairoSurface $surface):void
(CairoSurface $surface):void
(CairoSurface $surface):int
(CairoSurface $surface):array
(CairoSurface $surface):CairoFontOptions
(CairoSurface $surface):int
(CairoSurface $surface, float $x, float $y, float $width, float $height):void
(CairoSurface $surface):void
(CairoSurface $surface, float $x, float $y):void
(CairoSurface $surface, float $x, float $y):void
(CairoSurface $surface):void
(CairoSurface $surface):int
(CairoSurface $surface, resource $stream):void
(string $file, float $width, float $height):CairoSvgSurface
(CairoSvgSurface $surface, int $version):void
(int $version):string
(int $calendar, int $month, int $year):int
(int $jd, int $calendar):array
([int $calendar = -1]):array
(int $calendar, int $month, int $day, int $year):int
(callable $callback, array $param_arr):mixed
(callable $callback [, mixed $parameter [, mixed $...]]):mixed
(string $method_name, object &$obj, array $params):mixed
(string $method_name, object &$obj [, mixed $parameter [, mixed $...]]):mixed
(float $value):float
(string $pathname, array $data):bool
(string $directory):bool
(int $month, int $day, int $year):bool
(string $host [, string $type = "MX"]):bool
(string $filename, mixed $group):bool
(string $filename, int $mode):bool
() is different than the Perl chop() function, which removes the last character in the string.
(string $filename, mixed $user):bool
(int $bytevalue):string
(string $directory):bool
(string $body [, int $chunklen = 76 [, string $end = "\r\n"]]):string
(string $original, string $alias [, bool $autoload = TRUE]):bool
(string $class_name [, bool $autoload = TRUE]):bool
(mixed $class [, bool $autoload = TRUE]):array
(mixed $class [, bool $autoload = TRUE]):array
(mixed $class [, bool $autoload = TRUE]):array
(string $filename):array
(string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC]):bool
(string $dClass, string $dMethod, string $sClass [, string $sMethod]):bool
(string $classname, string $methodname, string $args, string $code [, int $flags = CLASSKIT_ACC_PUBLIC]):bool
(string $classname, string $methodname):bool
(string $classname, string $methodname, string $newname):bool
([bool $clear_realpath_cache = FALSE [, string $filename]]):void
(void):string
(string $title):bool
([resource $dir_handle]):void
(void):bool
(void):string
(variant $comobject, object $sinkobject [, mixed $sinkinterface]):bool
(string $progid [, int $code_page]):variant
(string $typelib_name [, bool $case_insensitive = TRUE]):bool
([int $timeoutms = 0]):bool
(object $comobject [, string $dispinterface [, bool $wantsink = FALSE]]):bool
(string $content [, int $options]):CommonMark\Node
(CommonMark\Node $node [, int $options]):string
(CommonMark\Node $node [, int $options [, int $width]]):string
(CommonMark\Node $node [, int $options [, int $width]]):string
(CommonMark\Node $node [, int $options]):string
(CommonMark\Node $node [, int $options [, int $width]]):string
(mixed $varname1 [, mixed $...]):array
(void):int
(void):int
(string $name):mixed
(string $str, string $from, string $to):string
(string $data):string
(string $data):string
(string $source, string $dest [, resource $context]):bool
(float $arg):float
(float $arg):float
(string $string [, int $mode = 0]):mixed
(mixed $array_or_countable [, int $mode = COUNT_NORMAL]):int
(resource $dictionary, string $password):bool
([resource $dictionary]):bool
(void):string
(string $dictionary):resource
(string $str):int
(string $args, string $code):string
(string $str [, string $salt]):string
(string $text):bool
(string $text):bool
(string $text):bool
(string $text):bool
(string $text):bool
(string $text):bool
(string $text):bool
(string $text):bool
(string $text):bool
(string $text):bool
(string $text):bool
([resource $conn_identifier]):int
(resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type]):bool
([resource $conn_identifier]):string
(resource $req_identifier):bool
(resource $req_identifier):bool
([resource $conn_identifier]):bool
(resource $conn_identifier, string $oid, string $attr_name):array
(resource $conn_identifier, string $oid, string $attr_name):int
(resource $req_identifier):array
(resource $req_identifier):array
(resource $conn_identifier):bool
(string $conn_url [, string $userid [, string $passwd [, bool $new_link = FALSE]]]):resource
(string $host, int $port, string $dbname [, string $userid [, string $passwd [, bool $new_link = FALSE]]]):resource
(resource $req_identifier):string
(resource $result, int $row_number):bool
(array $result, int $index):string
([resource $conn_identifier]):bool
(resource $conn_identifier, string $oid):bool
([resource $conn_identifier]):int
(void):int
(void):int
(void):string
([resource $connection]):string
(resource $conn_identifier, string $sql [, int $option = 0]):resource
(resource $result [, int $type = CUBRID_BOTH]):array
(resource $result [, int $type]):array
(resource $result [, int $field_offset = 0]):object
(resource $result):array
(resource $result [, string $class_name [, array $params [, int $type]]]):object
(resource $result [, int $type]):array
(resource $result [, int $type = CUBRID_BOTH]):mixed
(resource $result, int $field_offset):string
(resource $result, int $field_offset):int
(resource $result, int $field_offset):string
(resource $result [, int $field_offset = 0]):bool
(resource $result, int $field_offset):string
(resource $result, int $field_offset):string
(resource $req_identifier):bool
(resource $conn_identifier):bool
(resource $conn_identifier):string
(resource $conn_identifier, string $oid):string
(void):string
(resource $conn_identifier):array
(resource $req_identifier):int
(resource $conn_identifier):string
(resource $conn_identifier, string $oid [, mixed $attr]):mixed
([resource $conn_identifier]):string
(resource $conn_identifier, string $oid):int
([resource $conn_identifier]):array
(resource $conn_identifier, string $oid, string $file_name):int
(array $lob_identifier_array):bool
(resource $conn_identifier, resource $lob_identifier, string $path_name):bool
(resource $conn_identifier, string $sql):array
(resource $conn_identifier, resource $lob_identifier):bool
(resource $lob_identifier):string
(resource $req_identifier, int $bind_index, mixed $bind_value [, string $bind_value_type]):bool
(resource $lob_identifier):bool
(resource $lob_identifier, string $file_name):bool
(resource $lob_identifier, string $file_name):bool
([resource $conn_identifier [, string $type = "BLOB"]]):resource
(resource $lob_identifier, int $len):string
(resource $lob_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT]):bool
(resource $lob_identifier, string $offset [, int $origin = CUBRID_CURSOR_CURRENT]):bool
(resource $lob_identifier):int
(resource $lob_identifier):string
(resource $lob_identifier):int
(resource $lob_identifier):string
(resource $lob_identifier, string $buf):bool
(resource $conn_identifier, string $oid):bool
(resource $conn_identifier, string $oid):bool
(resource $req_identifier, int $offset [, int $origin = CUBRID_CURSOR_CURRENT]):bool
(resource $conn_identifier, string $class_name, string $file_name):string
(resource $result):bool
(resource $result):int
(resource $result):int
(resource $result):int
(string $conn_url [, string $userid [, string $passwd]]):resource
(string $host, int $port, string $dbname [, string $userid [, string $passwd]]):resource
([resource $conn_identifier]):bool
(resource $conn_identifier, string $prepare_stmt [, int $option = 0]):resource
(resource $conn_identifier, string $oid [, string $attr], mixed $value):bool
(string $query [, resource $conn_identifier]):resource
(string $unescaped_string [, resource $conn_identifier]):string
(resource $result, int $row [, mixed $field = 0]):string
(resource $conn_identifier):bool
(resource $conn_identifier, string $oid, string $file_name):int
(resource $conn_identifier, int $schema_type [, string $class_name [, string $attr_name]]):array
(resource $conn_identifier, string $oid):int
(resource $conn_identifier, string $oid, string $attr_name, int $index):bool
(resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element):bool
(resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element):bool
(resource $conn_identifier, string $oid, string $attr_name, string $set_element):bool
(resource $conn_identifier, bool $mode):bool
(resource $conn_identifier, int $param_type, int $param_value):bool
(resource $conn_identifier, string $oid, string $attr_name, string $set_element):bool
(resource $req_identifier, int $timeout):bool
(string $query [, resource $conn_identifier]):resource
(void):string
(resource $ch):void
(resource $ch):resource
(resource $ch):int
(resource $ch):string
(resource $ch, string $str):string
(resource $ch):mixed
(resource $ch [, int $opt]):mixed
([string $url = NULL]):resource
(resource $mh, resource $ch):int
(resource $mh):void
(resource $mh):int
(resource $mh, int &$still_running):int
(resource $ch):string
(resource $mh [, int &$msgs_in_queue = NULL]):array
(void):resource
(resource $mh, resource $ch):int
(resource $mh [, float $timeout = 1.0]):int
(resource $mh, int $option, mixed $value):bool
(int $errornum):string
(resource $ch, int $bitmask):int
(resource $ch):void
(resource $ch, array $options):bool
(resource $ch, int $option, mixed $value):bool
(resource $sh):void
(resource $sh):int
(void):resource
(resource $sh, int $option, string $value):bool
(int $errornum):string
(int $errornum):string
(resource $ch, string $str):string
([int $age = CURLVERSION_NOW]):array
(array $array):mixed
(resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password]]]]]]]):void
(resource $connection, array $callbacks):bool
(resource $connection):bool
([string $host [, string $port [, int $flags]]]):resource
(resource $connection, string $query):array
(resource $connection, string $trigger_name):bool
(void):string
(string $timezone_identifier):bool
(DateTimeInterface $datetime1, DateTimeInterface $datetime2 [, bool $absolute = FALSE]):DateInterval
(string $format):string
(string $time):DateInterval
(string $format):string
(DateTimeInterface $object):int
(string $format, string $date):array
(string $date):array
(int $time, float $latitude, float $longitude):array
(int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunrise_zenith") [, float $gmt_offset = 0]]]]]):mixed
(int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunset_zenith") [, float $gmt_offset = 0]]]]]):mixed
(DateTimeInterface $object):int
(DateTimeInterface $object):DateTimeZone
(string $format [, int $timestamp = time()]):string
(resource $connection [, bool $value]):mixed
(resource $stmt, int $parameter_number, string $variable_name [, int $parameter_type [, int $data_type = 0 [, int $precision = -1 [, int $scale = 0]]]]):bool
(resource $connection):object
(resource $connection):bool
(resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name]]]]):resource
(resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name]]]]):resource
(resource $connection):bool
([resource $connection]):string
([resource $connection]):string
(string $database, string $username, string $password [, array $options]):resource
(resource $stmt):int
(string $string_literal):string
(resource $connection, string $statement [, array $options]):resource
(resource $stmt [, array $parameters]):bool
(resource $stmt [, int $row_number = -1]):array
(resource $stmt [, int $row_number = -1]):array
(resource $stmt [, int $row_number = -1]):array
(resource $stmt [, int $row_number = -1]):object
(resource $stmt [, int $row_number]):bool
(resource $stmt, mixed $column):int
(resource $stmt, mixed $column):string
(resource $stmt, mixed $column):int
(resource $stmt, mixed $column):int
(resource $stmt, mixed $column):int
(resource $stmt, mixed $column):string
(resource $stmt, mixed $column):int
(resource $connection, string $qualifier, string $schema, string $table-name):resource
(resource $stmt):bool
(resource $stmt):bool
(resource $resource, string $option):string
(resource $resource):string
(resource $stmt, int $colnum, int $length):string
(resource $stmt):resource
(resource $stmt):int
(resource $stmt):int
(resource $resource):bool
(string $database, string $username, string $password [, array $options]):resource
(resource $connection, string $statement [, array $options]):resource
(resource $connection, string $qualifier, string $schema, string $table-name):resource
(resource $connection, string $qualifier, string $schema, string $procedure, string $parameter):resource
(resource $connection, string $qualifier, string $schema, string $procedure):resource
(resource $stmt, mixed $column):mixed
(resource $connection):bool
(resource $connection):object
(resource $resource, array $options, int $type):bool
(resource $connection, string $qualifier, string $schema, string $table_name, int $scope):resource
(resource $connection, string $qualifier, string $schema, string $table-name, bool $unique):resource
([resource $stmt]):string
([resource $stmt]):string
(resource $connection [, string $qualifier [, string $schema [, string $table_name]]]):resource
(resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type]]]]):resource
(resource $handle):void
(string $key, resource $handle):bool
(string $key, resource $handle):bool
(string $key, resource $handle):string
(resource $handle):string
([bool $full_info = FALSE]):array
(string $key, string $value, resource $handle):bool
(mixed $key):mixed
(void):array
(resource $handle):string
(string $path, string $mode [, string $handler [, mixed $...]]):resource
(resource $handle):bool
(string $path, string $mode [, string $handler [, mixed $...]]):resource
(string $key, string $value, resource $handle):bool
(resource $handle):bool
(resource $dbase_identifier, array $record):bool
(resource $dbase_identifier):bool
(string $filename, array $fields [, int $type = DBASE_TYPE_DBASE]):resource
(resource $dbase_identifier, int $record_number):bool
(resource $dbase_identifier):array
(resource $dbase_identifier, int $record_number):array
(resource $dbase_identifier, int $record_number):array
(resource $dbase_identifier):int
(resource $dbase_identifier):int
(string $filename, int $mode):resource
(resource $dbase_identifier):bool
(resource $dbase_identifier, array $record, int $record_number):bool
(resource $relation, array $tuple):int
(string $query [, string $server [, string $dbpath]]):resource
([string $newdir]):string
(resource $relation):mixed
(resource $relation, array &$tuple):int
([int $errno]):string
(void):int
(resource $relation, array $constraints, mixed $tuple):int
(resource $relation, array &$tuple):int
(resource $relation):int
(void):int
(resource $relation, string $tuple):int
(resource $relation):int
(resource $relation, string $tuple):int
(resource $relation, int $uniqueid):int
(resource $relation, string $key, array &$result):int
(resource $relation, array &$tuple):int
(resource $relation):int
(resource $relation, array &$tuple):int
(string $name):resource
(resource $relation, array &$tuple):int
(resource $relation, int $mask, string $user, string $group):int
(string $name, mixed $domlist [, bool $overwrite]):resource
(string $name, resource $relation [, bool $overwrite]):mixed
(string $name, resource $relation [, int $overwrite]):mixed
(string $relation_name):array
(resource $relation, array $tuple):int
(resource $relation, mixed $domlist):mixed
(string $name):resource
(string $query [, string $dbpath]):resource
(resource $relation, string $name):int
(resource $relation, mixed $domlist, int $type):mixed
(resource $relation):int
(resource $relation):int
(resource $relation):int
(resource $relation, string $idx_name):int
(resource $relation, int $idx_number):int
(string $query [, string $server [, string $dbpath]]):resource
(int $sid, string $script):string
(resource $relation, array $tuple [, array &$current]):int
(resource $relation):int
(resource $relation):int
(resource $relation):int
(resource $relation):int
(resource $relation, array $old, array $new):int
(resource $relation):int
(resource $relation):int
(object $link_identifier):int
(array $row_a, array $row_b, string $column_key [, int $flags = DBX_CMP_ASC | DBX_CMP_NATIVE]):int
(mixed $module, string $host, string $database, string $username, string $password [, int $persistent]):object
(object $link_identifier):string
(object $link_identifier, string $text):string
(object $result_identifier):mixed
(object $link_identifier, string $sql_statement [, int $flags]):mixed
(object $result, string $user_compare_function):bool
(string $domain, string $message, int $category):string
(string $domain, string $msgid1, string $msgid2, int $n, int $category):string
([int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0]]):array
([int $options = 0 [, int $limit = 0]]):void
(mixed $variable [, mixed $...]):void
(int $number):string
(int $number):string
(int $number):string
(void):void
(string $name, mixed $value [, bool $case_insensitive = FALSE]):bool
(string $name):bool
(resource $context, string $data [, int $flush_mode = ZLIB_SYNC_FLUSH]):string
(int $encoding [, array $options = array()]):resource
(float $number):float

(string $domain, string $message):string
(resource $fd):void
(resource $fd, int $cmd [, mixed $args]):mixed
(string $filename, int $flags [, int $mode = 0]):resource
(resource $fd [, int $len = 1024]):string
(resource $fd, int $pos [, int $whence = SEEK_SET]):int
(resource $fd):array
(resource $fd, array $options):bool
(resource $fd, int $offset):bool
(resource $fd, string $data [, int $len = 0]):int
(string $directory [, resource $context]):Directory
(string $path [, int $levels = 1]):string
(string $directory):float
(string $directory):float
(string $directory):float
(string $library):bool
(string $domain, string $msgid1, string $msgid2, int $n):string
(string $host [, string $type = "MX"]):bool
(void):int
(string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl [, bool $raw = FALSE]]]]):array
(SimpleXMLElement $node):DOMElement
(mixed $var):float
(array &$array):array
([int $year = date("Y")]):int
([int $year = date("Y") [, int $method = CAL_EASTER_DEFAULT]]):int
(string $arg1 [, string $...]):void
(int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(resource $req):void
(string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(string $path, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]):resource
(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(callable $execute, int $pri, callable $callback [, mixed $data = NULL]):resource
(mixed $fd, mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(void):bool
(mixed $fd, int $mode, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(mixed $fd, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(mixed $fd, int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]):resource
(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(mixed $fd, int $pri, callable $callback [, mixed $data]):resource
(mixed $fd, int $pri, callable $callback [, mixed $data]):resource
(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]):resource
(mixed $fd, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(void):mixed
(resource $req):string
(resource $grp, resource $req):void
(resource $grp):void
(resource $grp, int $limit):void
(callable $callback [, string $data = NULL]):resource
(void):void
(string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(string $path, int $pri, callable $callback [, mixed $data = NULL]):resource
(string $path, int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(string $path, int $mode, int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
([int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(void):int
(void):int
(void):int
(void):int
(string $path, int $flags, int $mode, int $pri, callable $callback [, mixed $data = NULL]):resource
(void):int
(mixed $fd, int $length, int $offset, int $pri, callable $callback [, mixed $data = NULL]):resource
(mixed $fd, int $offset, int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(string $path, int $flags, int $pri, callable $callback [, string $data = NULL]):resource
(string $path, int $pri, callable $callback [, string $data = NULL]):resource
(string $path, int $pri, callable $callback [, string $data = NULL]):resource
(string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(mixed $fd, int $offset, int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(mixed $out_fd, mixed $in_fd, int $offset, int $length [, int $pri [, callable $callback [, string $data]]]):resource
(int $nthreads):void
(int $nthreads):void
(int $nreqs):void
(float $nseconds):void
(string $nthreads):void
(string $path, int $pri, callable $callback [, mixed $data = NULL]):resource
(string $path, int $pri, callable $callback [, mixed $data]):resource
(string $path, string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(mixed $fd, int $offset, int $nbytes, int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
([int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]):resource
(string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(string $path, float $atime, float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]):resource
(mixed $fd, string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL]]]]]):resource
(mixed $var):bool
(resource $broker):array
(resource $broker, string $tag):bool
(resource $dict):bool
(resource $broker):bool
(resource $broker, int $dict_type):bool
(resource $broker):string
(void):resource
(resource $broker):mixed
(resource $broker, string $tag):resource
(resource $broker, string $filename):resource
(resource $broker, int $dict_type, string $value):bool
(resource $broker, string $tag, string $ordering):bool
(resource $dict, string $word):void
(resource $dict, string $word):void
(resource $dict, string $word):bool
(resource $dict):mixed
(resource $dict):string
(resource $dict, string $word):bool
(resource $dict, string $word [, array &$suggestions]):bool
(resource $dict, string $mis, string $cor):void
(resource $dict, string $word):array
(array &$array):mixed
(string $pattern, string $replacement, string $string):string
(string $pattern, string $string [, array &$regs]):int
(string $pattern, string $replacement, string $string):string
(string $pattern, string $string [, array &$regs]):int
(void):void
(void):array
(string $message [, int $message_type = 0 [, string $destination [, string $extra_headers]]]):bool
([int $level]):int
(string $arg):string
(string $command):string
(string $code):mixed
(resource $event [, int $timeout = -1]):bool
(resource $event_base):void
(resource $event_base [, int $flags = 0]):int
(resource $event_base):bool
(resource $event_base [, int $timeout = -1]):bool
(void):resource
(resource $event_base, int $npriorities):bool
(resource $event_base):bool
(resource $event, resource $event_base):bool
(resource $bevent, resource $event_base):bool
(resource $bevent, int $events):bool
(resource $bevent, int $events):bool
(resource $bevent, resource $fd):void
(resource $bevent):void
(resource $stream, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg]):resource
(resource $bevent, int $priority):bool
(resource $bevent, int $data_size):string
(resource $event, mixed $readcb, mixed $writecb, mixed $errorcb [, mixed $arg]):bool
(resource $bevent, int $read_timeout, int $write_timeout):void
(resource $bevent, int $events, int $lowmark, int $highmark):void
(resource $bevent, string $data [, int $data_size = -1]):bool
(resource $event):bool
(resource $event):void
(void):resource
(resource $event, int $priority):bool
(resource $event, mixed $fd, int $events, mixed $callback [, mixed $arg]):bool
(resource $event [, int $timeout = -1]):bool
(resource $event):bool
(void):resource
(resource $event, callable $callback [, mixed $arg]):bool
(string $command [, array &$output [, int &$return_var]]):string
(string $filename):int
(mixed $stream [, string $sections = NULL [, bool $arrays = FALSE [, bool $thumbnail = FALSE]]]):array
(int $index):string
(mixed $stream [, int &$width [, int &$height [, int &$imagetype]]]):string
([string $status]):void
(float $arg):float
(resource $expect, array $cases [, array &$match]):int
(string $command):resource
(string $delimiter, string $string [, int $limit = PHP_INT_MAX]):array
(float $arg):float
(string $name):bool
(array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL]]):int
(string $addr):int
(resource $fam, resource $fam_monitor):bool
(resource $fam):void
(resource $fam, string $dirname, int $depth, string $mask):resource
(resource $fam, string $dirname):resource
(resource $fam, string $filename):resource
(resource $fam):array
([string $appname]):resource
(resource $fam):int
(resource $fam, resource $fam_monitor):bool
(resource $fam, resource $fam_monitor):bool
(resource $ann, resource $data, int $max_neurons, int $neurons_between_reports, float $desired_error):bool
(resource $ann, string $filename, int $max_neurons, int $neurons_between_reports, float $desired_error):bool
(resource $ann):bool
(resource $ann):resource
(string $configuration_file):resource
(int $num_layers, array $layers):resource
(int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...]):resource
(float $connection_rate, int $num_layers, array $layers):resource
(float $connection_rate, int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...]):resource
(int $num_layers, array $layers):resource
(int $num_layers, int $num_neurons1, int $num_neurons2 [, int $...]):resource
(int $num_data, int $num_input, int $num_output, callable $user_function):resource
(int $num_data, int $num_input, int $num_output):resource
(resource $ann, array $input_vector):bool
(resource $ann, array $output_vector):bool
(resource $ann, resource $train_data):bool
(resource $train_data):bool
(resource $ann):bool
(resource $data):resource
(resource $ann, int $layer, int $neuron):int
(resource $ann, int $layer, int $neuron):float
(resource $ann):array
(resource $ann):float
(resource $ann):int
(resource $ann):int
(resource $ann):array
(resource $ann):int
(resource $ann):array
(resource $ann):float
(resource $ann):float
(resource $ann):int
(resource $ann):int
(resource $ann):int
(resource $ann):int
(resource $ann):int
(resource $ann):int
(resource $ann):int
(resource $ann):float
(resource $ann):int
(resource $ann):float
(resource $ann):array
(resource $ann):float
(resource $errdat):int
(resource $errdat):string
(resource $ann):array
(resource $ann):float
(resource $ann):float
(resource $ann):float
(resource $ann):int
(resource $ann):int
(resource $ann):int
(resource $ann):int
(resource $ann):float
(resource $ann):float
(resource $ann):float
(resource $ann):float
(resource $ann):float
(resource $ann):int
(resource $ann):float
(resource $ann):float
(resource $ann):float
(resource $ann):float
(resource $ann):float
(resource $ann):int
(resource $ann):int
(resource $ann):int
(resource $ann):int
(resource $ann):int
(resource $ann, resource $train_data):bool
(resource $data):int
(resource $data1, resource $data2):resource
(resource $data):int
(resource $data):int
(resource $errdat):void
(resource $ann, float $min_weight, float $max_weight):bool
(string $filename):resource
(resource $errdat):void
(resource $errdat):void
(string $ann):bool
(resource $ann, array $input):array
(resource $data, string $file_name):bool
(resource $ann, string $configuration_file):bool
(resource $train_data, float $new_min, float $new_max):bool
(resource $ann, array $input_vector):bool
(resource $train_data, float $new_min, float $new_max):bool
(resource $ann, array $output_vector):bool
(resource $train_data, float $new_min, float $new_max):bool
(resource $ann, resource $train_data):bool
(resource $ann, int $activation_function):bool
(resource $ann, int $activation_function, int $layer):bool
(resource $ann, int $activation_function):bool
(resource $ann, int $activation_function, int $layer, int $neuron):bool
(resource $ann, float $activation_steepness):bool
(resource $ann, float $activation_steepness, int $layer):bool
(resource $ann, float $activation_steepness):bool
(resource $ann, float $activation_steepness, int $layer, int $neuron):bool
(resource $ann, float $bit_fail_limit):bool
(resource $ann, collable $callback):bool
(resource $ann, array $cascade_activation_functions):bool
(resource $ann, array $cascade_activation_steepnesses_count):bool
(resource $ann, float $cascade_candidate_change_fraction):bool
(resource $ann, float $cascade_candidate_limit):bool
(resource $ann, int $cascade_candidate_stagnation_epochs):bool
(resource $ann, int $cascade_max_cand_epochs):bool
(resource $ann, int $cascade_max_out_epochs):bool
(resource $ann, int $cascade_min_cand_epochs):bool
(resource $ann, int $cascade_min_out_epochs):bool
(resource $ann, int $cascade_num_candidate_groups):bool
(resource $ann, float $cascade_output_change_fraction):bool
(resource $ann, int $cascade_output_stagnation_epochs):bool
(resource $ann, float $cascade_weight_multiplier):bool
(resource $errdat, string $log_file):void
(resource $ann, resource $train_data, float $new_input_min, float $new_input_max):bool
(resource $ann, float $learning_momentum):bool
(resource $ann, float $learning_rate):bool
(resource $ann, resource $train_data, float $new_output_min, float $new_output_max):bool
(resource $ann, float $quickprop_decay):bool
(resource $ann, float $quickprop_mu):bool
(resource $ann, float $rprop_decrease_factor):bool
(resource $ann, float $rprop_delta_max):bool
(resource $ann, float $rprop_delta_min):bool
(resource $ann, float $rprop_delta_zero):bool
(resource $ann, float $rprop_increase_factor):bool
(resource $ann, float $sarprop_step_error_shift):bool
(resource $ann, float $sarprop_step_error_threshold_factor):bool
(resource $ann, float $sarprop_temperature):bool
(resource $ann, float $sarprop_weight_decay_shift):bool
(resource $ann, resource $train_data, float $new_input_min, float $new_input_max, float $new_output_min, float $new_output_max):bool
(resource $ann, int $error_function):bool
(resource $ann, int $stop_function):bool
(resource $ann, int $training_algorithm):bool
(resource $ann, array $connections):bool
(resource $ann, int $from_neuron, int $to_neuron, float $weight):bool
(resource $train_data):bool
(resource $data, int $pos, int $length):resource
(resource $ann, resource $data):float
(resource $ann, array $input, array $desired_output):array
(resource $ann, resource $data):float
(resource $ann, resource $data, int $max_epochs, int $epochs_between_reports, float $desired_error):bool
(resource $ann, string $filename, int $max_epochs, int $epochs_between_reports, float $desired_error):bool
(resource $ann, array $input, array $desired_output):bool
(void):bool
([resource $link_identifier]):int
(resource $link_identifier [, bool $OnOff]):bool
(string $blob_handle [, resource $link_identifier]):int
(string $user, string $password [, string $database [, resource $link_identifier]]):bool
(string $clob_handle [, resource $link_identifier]):int
([resource $link_identifier]):bool
([resource $link_identifier]):bool
([string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password")]]]):resource
(string $blob_data [, resource $link_identifier]):string
(string $clob_data [, resource $link_identifier]):string
(string $database_name [, resource $link_identifier [, string $database_options]]):bool
(resource $result, int $row_number):bool
(resource $link_identifier [, string $database_password]):string
(resource $link_identifier [, string $database]):string
(string $database, string $query [, resource $link_identifier]):resource
(string $database_name [, resource $link_identifier]):int
(string $database_name [, resource $link_identifier]):bool
([resource $link_identifier]):int
([resource $link_identifier]):string
(resource $result [, int $result_type]):array
(resource $result):array
(resource $result [, int $field_offset]):object
(resource $result):array
(resource $result):object
(resource $result):array
(resource $result [, int $field_offset]):string
(resource $result [, int $field_offset]):int
(resource $result [, int $field_index]):string
(resource $result [, int $field_offset]):bool
(resource $result [, int $field_offset]):string
(resource $result [, int $field_offset]):string
(resource $result):bool
([resource $link_identifier]):array
(resource $link_identifier [, string $host_name]):string
([resource $link_identifier]):int
([resource $link_identifier]):resource
(string $database_name, string $table_name [, resource $link_identifier]):resource
(string $database [, resource $link_identifier]):resource
(resource $result):bool
(resource $result):int
(resource $result):int
(resource $link_identifier [, string $password]):string
([string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password")]]]):resource
(string $query [, resource $link_identifier [, int $batch_size]]):resource
(string $blob_handle [, resource $link_identifier]):string
(string $clob_handle [, resource $link_identifier]):string
(resource $result [, int $row [, mixed $field]]):mixed
([resource $link_identifier]):bool
(resource $result):int
([string $database_name [, resource $link_identifier]]):bool
(resource $link_identifier, int $characterset [, int $in_out_both]):void
(resource $result, int $lob_mode):bool
(resource $link_identifier, string $user, string $password, string $old_password):bool
(resource $link_identifier, int $locking, int $isolation):void
(string $database_name [, resource $link_identifier [, string $database_options]]):bool
(string $database_name [, resource $link_identifier]):bool
(resource $result, int $index):string
(resource $result, int $index):string
(resource $link_identifier [, string $username]):string
([bool $OnOff]):bool
(resource $handle):bool
(resource $fdf_document, string $script_name, string $script_code):bool
(resource $fdf_document, int $newpage, string $filename, string $template, int $rename):bool
(resource $fdf_document):void
(void):resource
(resource $fdf_document, callable $function [, mixed $userdata]):bool
(void):int
([int $error_code = -1]):string
(resource $fdf_document, string $field, int $face, string $filename):bool
(resource $fdf_document, string $fieldname, string $savepath):array
(resource $fdf_document):string
(resource $fdf_document):string
(resource $fdf_document, string $fieldname, int $whichflags):int
(resource $fdf_document, string $fieldname [, int $element = -1]):mixed
(resource $fdf_document):string
(resource $fdf_document, string $fieldname [, int $which = -1]):mixed
([resource $fdf_document]):string
(void):void
(resource $fdf_document [, string $fieldname]):string
(string $fdf_data):resource
(string $filename):resource
(resource $fdf_document, string $fieldname, int $item):bool
(resource $fdf_document):string
(resource $fdf_document [, string $filename]):bool
(resource $fdf_document, string $field_name, int $face, string $filename, int $page_number):bool
(resource $fdf_document, string $encoding):bool
(resource $fdf_document, string $url [, string $target_frame]):bool
(resource $fdf_document, string $fieldname, int $whichFlags, int $newFlags):bool
(resource $fdf_document, string $fieldname, int $trigger, string $script):bool
(resource $fdf_document, string $script, bool $before_data_import):bool
(resource $fdf_document, string $fieldname, int $element, string $str1, string $str2):bool
(resource $fdf_document, string $status):bool
(resource $fdf_document, string $fieldname, int $trigger, string $script, int $flags):bool
(resource $fdf_document, string $frame_name):bool
(resource $fdf_document, string $fieldname, mixed $value [, int $isName]):bool
(resource $fdf_document, string $version):bool
(resource $handle):bool
(resource $handle):bool
(resource $handle):string
(resource $handle [, int $length = 0 [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\"]]]]):array
(resource $handle [, int $length]):string
(resource $handle [, int $length [, string $allowable_tags]]):string
(string $filename):bool
(string $filename [, bool $use_include_path = FALSE [, resource $context [, int $offset = 0 [, int $maxlen]]]]):string
(string $filename, mixed $data [, int $flags = 0 [, resource $context]]):int
(string $filename [, int $flags = 0 [, resource $context]]):array
(string $filename):int
(string $filename):int
(string $filename):int
(string $filename):int
(string $filename):int
(string $filename):int
(string $filename):int
(void):int
(int $field_number):string
(int $field_number):string
(int $field_number):int
(int $row_number, int $field_number):string
(void):int
(string $directory):bool
(string $filename):int
(string $filename):string
(int $type, string $variable_name):bool
(string $filtername):int
(int $type [, mixed $definition [, bool $add_empty = TRUE]]):mixed
(int $type, string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options]]):mixed
(void):array
(array $data [, mixed $definition [, bool $add_empty = TRUE]]):mixed
(mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options]]):mixed
(resource $finfo, string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL]]):string
(resource $finfo):bool
(resource $finfo, string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL]]):string
([int $options = FILEINFO_NONE [, string $magic_file = NULL]]):resource
(resource $finfo, int $options):bool
(mixed $var):float
(resource $handle, int $operation [, int &$wouldblock]):bool
(float $value):float
(void):void
(float $x, float $y):float
(string $pattern, string $string [, int $flags = 0]):bool
(string $filename, string $mode [, bool $use_include_path = FALSE [, resource $context]]):resource
(callable $function, array $parameters):mixed
(callable $function [, mixed $parameter [, mixed $...]]):mixed
(resource $handle):int
(resource $handle, string $format [, mixed $args [, mixed $...]]):int
(resource $handle, array $fields [, string $delimiter = "," [, string $enclosure = '"' [, string $escape_char = "\\"]]]):int
(resource $handle, string $string [, int $length]):int
(resource $handle, int $length):string
(int $month, int $day, int $year):int
(string $str, string $direction, int $charset):string
(resource $handle, string $format [, mixed &$...]):mixed
(resource $handle, int $offset [, int $whence = SEEK_SET]):int
(string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout")]]]]):resource
(resource $handle):array
(resource $handle):int
(string $pathname, string $proj):int
(resource $ftp_stream, int $filesize [, string &$result]):bool
(resource $ftp, string $remote_file, string $local_file [, int $mode = FTP_IMAGE]):bool
(resource $ftp_stream):bool
(resource $ftp_stream, string $directory):bool
(resource $ftp_stream, int $mode, string $filename):int
(resource $ftp_stream):bool
(string $host [, int $port = 21 [, int $timeout = 90]]):resource
(resource $ftp_stream, string $path):bool
(resource $ftp_stream, string $command):bool
(resource $ftp_stream, resource $handle, string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0]]):bool
(resource $ftp_stream, string $remote_file, resource $handle [, int $mode = FTP_IMAGE [, int $startpos = 0]]):bool
(resource $ftp_stream, int $option):mixed
(resource $ftp_stream, string $local_file, string $remote_file [, int $mode = FTP_BINARY [, int $resumepos = 0]]):bool
(resource $ftp_stream, string $username, string $password):bool
(resource $ftp_stream, string $remote_file):int
(resource $ftp_stream, string $directory):string
(resource $ftp_stream, string $directory):array
(resource $ftp_stream):int
(resource $ftp_stream, resource $handle, string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0]]):int
(resource $ftp_stream, string $remote_file, resource $handle [, int $mode = FTP_IMAGE [, int $startpos = 0]]):int
(resource $ftp_stream, string $local_file, string $remote_file [, int $mode = FTP_IMAGE [, int $resumepos = 0]]):int
(resource $ftp_stream, string $remote_file, string $local_file [, int $mode = FTP_IMAGE [, int $startpos = 0]]):int
(resource $ftp_stream, string $directory):array
(resource $ftp_stream, bool $pasv):bool
(resource $ftp_stream, string $remote_file, string $local_file [, int $mode = FTP_IMAGE [, int $startpos = 0]]):bool
(resource $ftp_stream):string
(resource $ftp_stream):bool
(resource $ftp_stream, string $command):array
(resource $ftp_stream, string $directory [, bool $recursive = FALSE]):array
(resource $ftp_stream, string $oldname, string $newname):bool
(resource $ftp_stream, string $directory):bool
(resource $ftp_stream, int $option, mixed $value):bool
(resource $ftp_stream, string $command):bool
(resource $ftp_stream, string $remote_file):int
(string $host [, int $port = 21 [, int $timeout = 90]]):resource
(resource $ftp_stream):string
(resource $handle, int $size):bool
(int $arg_num):mixed
(void):array
(void):int
(string $function_name):bool
(resource $handle, string $string [, int $length]):int
(void):int
(void):void
(void):void
(void):bool
(void):int
(void):array
(string $hostname):string
(string $hostname):string
(string $hostname):string
(string $hostname):string
(string $hostname):string
([int $database = GEOIP_COUNTRY_EDITION]):string
(int $database):bool
(int $database):string
(void):array
(string $hostname):string
(string $hostname):int
(string $hostname):string
(string $hostname):string
(string $hostname):string
(string $hostname):array
(string $hostname):array
(string $country_code, string $region_code):string
(string $path):void
(string $country_code [, string $region_code]):string
([string $user_agent [, bool $return_array = FALSE]]):mixed
(void):string
(string $option):mixed
(mixed $class_name):array
(string $class_name):array
([object $object]):string
(void):string
(void):array
(void):array
(void):array
([bool $categorize = FALSE]):array
([bool $exclude_disabled = FALSE]):array
(void):array
(string $module_name):array
(string $url [, int $format = 0 [, resource $context]]):array
([int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = "UTF-8"]]]):array
(void):string
(void):array
([bool $zend_extensions = FALSE]):array
(void):bool
(void):bool
(string $filename [, bool $use_include_path = FALSE]):array
(object $object):array
([mixed $object]):string
(void):array
(resource $handle):string
([string $type]):array
(void):array
(void):string
([int $timestamp = time()]):array
(string $varname [, bool $local_only = FALSE]):string
(string $ip_address):string
(string $hostname):string
(string $hostname):array
(void):string
(string $filename [, array &$imageinfo]):array
(string $imagedata [, array &$imageinfo]):array
(void):int
(string $hostname, array &$mxhosts [, array &$weight]):bool
(void):int
(void):int
(void):int
(void):int
(string $options [, array $longopts [, int &$optind]]):array
(string $name):int
(int $number):string
(void):int
([int $who = 0]):array
(string $service, string $protocol):int
(int $port, string $protocol):string
(string $message):string
([bool $return_float = FALSE]):mixed
(mixed $var):string
(string $pattern [, int $flags = 0]):array
(string $format [, int $timestamp = time()]):string
([int $hour = gmdate("H") [, int $minute = gmdate("i") [, int $second = gmdate("s") [, int $month = gmdate("n") [, int $day = gmdate("j") [, int $year = gmdate("Y") [, int $is_dst = -1]]]]]]]):int
(GMP $a):GMP
(GMP $a, GMP $b):GMP
(GMP $a, GMP $b):GMP
(GMP $a, int $index):void
(GMP $a, GMP $b):int
(GMP $a):GMP
(GMP $a, GMP $b [, int $round = GMP_ROUND_ZERO]):GMP
(GMP $n, GMP $d [, int $round = GMP_ROUND_ZERO]):array
(GMP $n, GMP $d [, int $round = GMP_ROUND_ZERO]):GMP
_q().:This function is an alias of:
(GMP $n, GMP $d):GMP
(GMP $gmpnumber [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN]]):string
(mixed $a):GMP
(GMP $a, GMP $b):GMP
(GMP $a, GMP $b):array
(GMP $a, GMP $b):int
(string $data [, int $word_size = 1 [, int $options = GMP_MSW_FIRST | GMP_NATIVE_ENDIAN]]):GMP
(mixed $number [, int $base = 0]):GMP
(GMP $gmpnumber):int
(GMP $a, GMP $b):GMP
(GMP $a, GMP $p):int
(GMP $a, GMP $p):int
(GMP $n, GMP $d):GMP
(GMP $a, GMP $b):GMP
(GMP $a):GMP
(int $a):GMP
(GMP $a, GMP $b):GMP
(GMP $a):bool
(GMP $a):int
(GMP $base, int $exp):GMP
(GMP $base, GMP $exp, GMP $mod):GMP
(GMP $a [, int $reps = 10]):int
(int $bits):GMP
(GMP $min, GMP $max):GMP
(mixed $seed):void
([int $limiter = 20]):GMP
(GMP $a, int $nth):GMP
(GMP $a, int $nth):array
(GMP $a, int $start):int
(GMP $a, int $start):int
(GMP $a, int $index [, bool $bit_on = TRUE]):void
(GMP $a):int
(GMP $a):GMP
(GMP $a):array
(GMP $gmpnumber [, int $base = 10]):string
(GMP $a, GMP $b):GMP
(GMP $a, int $index):bool
(GMP $a, GMP $b):GMP
(string $format [, int $timestamp = time()]):string
(resource $identifier, string $fingerprint, string $passphrase):bool
(resource $identifier, string $fingerprint):bool
(resource $identifier, string $fingerprint [, string $passphrase]):bool
(resource $identifier):bool
(resource $identifier):bool
(resource $identifier):bool
(resource $identifier, string $text):string
(resource $identifier, string $text, string &$plaintext):array
(resource $identifier, string $plaintext):string
(resource $identifier, string $plaintext):string
(resource $identifier, string $fingerprint):string
(resource $identifier):string
(resource $identifier):int
(resource $identifier, string $keydata):array
(void):resource
(resource $identifier, string $pattern):array
(resource $identifier, int $armor):bool
(resource $identifier, int $errormode):void
(resource $identifier, int $signmode):bool
(resource $identifier, string $plaintext):string
(resource $identifier, string $signed_text, string $signature [, string &$plaintext]):array
(string $dirent):array
(string $haystack, int $size [, int $extract_type [, int $start = 0 [, int &$next]]]):string
(string $haystack, string $needle [, int $offset = 0]):int
(string $haystack, string $needle [, bool $before_needle = FALSE]):string
(string $input):int
(string $haystack, string $needle [, int $offset = 0]):int
(string $haystack, string $needle [, int $offset = 0]):int
(string $haystack, string $needle [, int $offset = 0]):int
(string $haystack, string $needle [, bool $before_needle = FALSE]):string
(string $string, int $start [, int $length]):string
(int $month, int $day, int $year):int
(resource $context):string
(resource $context):int
(resource $context):int
(resource $context, string $local_path, string $server_path):bool
([string $host_ip [, int $port = 0]]):resource
(resource $context, int $timeout):void
(resource $context, int $timeout, mixed $callback [, mixed $arg]):bool
(resource $context, string $server_path):bool
(resource $cpoint):bool
(resource $cpoint):bool
(resource $cpoint, int $signal, mixed $callback [, mixed $arg]):bool
(resource $context, string $target):resource
(resource $root_device, int $signal, string $action_name, mixed $callback [, mixed $arg]):bool
(resource $root_device, string $type):resource
(resource $root_device):array
(resource $root_device):bool
(resource $root_device):string
(resource $context, string $location, string $description_dir):resource
(resource $root_device, bool $available):bool
(resource $root_device):bool
(resource $root_device):bool
(resource $action, string $name, int $type):mixed
(resource $action, int $error_code [, string $error_description]):bool
(resource $action):bool
(resource $action, string $name, int $type, mixed $value):bool
(resource $service):bool
(resource $proxy [, mixed $callback [, mixed $arg]]):mixed
(resource $proxy):array
(resource $introspection, string $variable_name):array
(resource $service, string $name, int $type, mixed $value):bool
(resource $proxy, string $action, string $name, int $type):mixed
(resource $proxy, string $action, string $name, mixed $value, int $type):bool
(resource $proxy, string $value, int $type, mixed $callback [, mixed $arg]):bool
(resource $proxy, int $signal, mixed $callback [, mixed $arg]):bool
(resource $proxy):bool
(resource $proxy, string $value):bool
(resource $proxy, bool $subscribed):bool
(resource $service):bool
(resource $zp):bool
(string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE]]):string
(string $data [, int $length]):string
(string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW]]):string
(string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP]]):string
(resource $zp):int
(string $filename [, int $use_include_path = 0]):array
(resource $zp):string
(resource $zp [, int $length]):string
(resource $zp, int $length [, string $allowable_tags]):string
(string $data [, int $length = 0]):string
(string $filename, string $mode [, int $use_include_path = 0]):resource
(resource $zp):int
(resource $zp, string $string [, int $length]):int
(resource $zp, int $length):string
(resource $zp):bool
(resource $zp, int $offset [, int $whence = SEEK_SET]):int
(resource $zp):int
(string $data [, int $length = 0]):string
(resource $zp, string $string [, int $length]):int
(void):void
(void):array
(HashContext $context):HashContext
(string $known_string, string $user_string):bool
(string $algo, string $filename [, bool $raw_output = FALSE]):string
(HashContext $context [, bool $raw_output = FALSE]):string
(string $algo, string $ikm [, int $length = 0 [, string $info = '' [, string $salt = '']]]):string
(void):array
(string $algo, string $filename, string $key [, bool $raw_output = FALSE]):string
(string $algo, string $data, string $key [, bool $raw_output = FALSE]):string
(string $algo [, int $options = 0 [, string $key = NULL]]):HashContext
(string $algo, string $password, string $salt, int $iterations [, int $length = 0 [, bool $raw_output = FALSE]]):string
(HashContext $hcontext, string $filename [, resource $scontext = NULL]):bool
(HashContext $context, resource $handle [, int $length = -1]):int
(HashContext $context, string $data):bool
(string $algo, string $data [, bool $raw_output = FALSE]):string
(callable $callback):bool
([string $name]):void
(string $header [, bool $replace = TRUE [, int $http_response_code]]):void
(void):array
([string &$file [, int &$line]]):bool
(string $hebrew_text [, int $max_chars_per_line = 0]):string
(string $hebrew_text [, int $max_chars_per_line = 0]):string
(string $data):string
(string $hex_string):number
(string $filename [, bool $return = FALSE]):mixed
(string $str [, bool $return = FALSE]):mixed
([bool $get_as_number = FALSE]):mixed
(string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset")]]):string
(string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset") [, bool $double_encode = TRUE]]]):string
(string $string [, int $flags = ENT_COMPAT | ENT_HTML401]):string
(string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset") [, bool $double_encode = TRUE]]]):string
(mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738]]]):string
([int $response_code]):mixed
([string $name [, string $value]]):HW_API_Attribute
(string $content, string $mimetype):HW_API_Content
(string $hostname [, int $port]):HW_API
(array $parameter):hw_api_object
(float $x, float $y):float
(resource $service_handle, string $user_name, string $password [, string $first_name [, string $middle_name [, string $last_name]]]):bool
([resource $link_identifier]):int
(resource $service_handle, string $source_db, string $dest_file [, int $options = 0 [, bool $verbose = FALSE]]):mixed
(resource $blob_handle, string $data):void
(resource $blob_handle):bool
(resource $blob_handle):mixed
([resource $link_identifier = NULL]):resource
(string $blob_id):bool
(resource $blob_handle, int $len):string
(resource $link_identifier, resource $file_handle):string
(resource $link_identifier, string $blob_id):array
(resource $link_identifier, string $blob_id):resource
([resource $connection_id = NULL]):bool
([resource $link_or_trans_identifier = NULL]):bool
([resource $link_or_trans_identifier = NULL]):bool
([string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync]]]]]]]]):resource
(resource $service_handle, string $db, int $action [, int $argument = 0]):string
(resource $service_handle, string $user_name):bool
([resource $connection = NULL]):bool
(void):int
(void):string
(resource $query [, mixed $bind_arg [, mixed $...]]):resource
(resource $result [, int $fetch_flag = 0]):array
(resource $result_id [, int $fetch_flag = 0]):object
(resource $result_identifier [, int $fetch_flag = 0]):array
(resource $result, int $field_number):array
(resource $event):bool
(resource $query):bool
(resource $result_identifier):bool
(string $generator [, int $increment = 1 [, resource $link_identifier = NULL]]):mixed
(resource $service_handle, string $db, int $action [, int $argument = 0]):bool
(resource $service_handle, string $user_name, string $password [, string $first_name [, string $middle_name [, string $last_name]]]):bool
(resource $result, string $name):bool
(resource $result_id):int
(resource $query):int
(resource $query, int $param_number):array
([string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync]]]]]]]]):resource
(string $query):resource
([resource $link_identifier], string $query [, int $bind_args]):resource
(resource $service_handle, string $source_file, string $dest_db [, int $options = 0 [, bool $verbose = FALSE]]):mixed
([resource $link_or_trans_identifier = NULL]):bool
([resource $link_or_trans_identifier = NULL]):bool
(resource $service_handle, int $action):string
(string $host, string $dba_username, string $dba_password):resource
(resource $service_handle):bool
(callable $event_handler, string $event_name1 [, string $event_name2 [, string $...]]):resource
([int $trans_args [, resource $link_identifier]]):resource
(string $event_name1 [, string $event_name2 [, string $...]]):string
([string $type = "all"]):mixed
(string $encoded_headers [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding")]]):array
(string $encoded_header [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding")]]):string
(string $field_name, string $field_value [, array $preferences = NULL]):string
(string $type, string $charset):bool
(string $str [, string $charset = ini_get("iconv.internal_encoding")]):int
(string $haystack, string $needle [, int $offset = 0 [, string $charset = ini_get("iconv.internal_encoding")]]):int
(string $haystack, string $needle [, string $charset = ini_get("iconv.internal_encoding")]):int
(string $str, int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get("iconv.internal_encoding")]]):string
(string $in_charset, string $out_charset, string $str):string
(string $frameId):string
(string $frameId):string
(string $genre):int
(void):array
(int $genre_id):string
(string $filename [, int $version = ID3_BEST]):array
(string $filename):int
(string $filename [, int $version = ID3_V1_0]):bool
(string $filename, array $tag [, int $version = ID3_V1_0]):bool
(string $format [, int $timestamp = time()]):int
(string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_UTS46 [, array &$idna_info]]]):string
(string $domain [, int $options = IDNA_DEFAULT [, int $variant = INTL_IDNA_VARIANT_UTS46 [, array &$idna_info]]]):string
(resource $result_id):int
(int $mode):bool
(int $mode):bool
([resource $link_identifier]):bool
([string $database [, string $userid [, string $password]]]):resource
(int $bid):int
(int $type, int $mode, string $param):int
(string $param):int
(resource $result_id):bool
([resource $link_identifier]):string
([int $errorcode]):string
(resource $result_id [, mixed $position]):array
(resource $result_id):array
(resource $result_id):array
(int $bid):bool
(int $bid):bool
(resource $result_id):bool
(int $bid):string
(int $bid):string
(resource $result_id):array
(resource $result_id [, string $html_table_options]):int
(int $mode):bool
(resource $result_id):int
(resource $result_id):int
([string $database [, string $userid [, string $password]]]):resource
(string $query, resource $link_identifier [, int $cursor_def], mixed $blobidarray):resource
(string $query, resource $link_identifier [, int $cursor_type [, mixed $blobidarray]]):resource
(int $mode):bool
(int $bid, string $content):bool
(int $bid, string $content):bool
(int $bid):bool
(int $mode):int
(int $bid):bool
(int $bid, int $mode):int
(int $bid, int $nbytes):string
(int $bid, int $mode, int $offset):int
(int $bid):int
(int $bid, string $content):int
([bool $value]):int
(string $path, string $comment, string $server_ip, int $port, string $host_name, int $rights, int $start_server):int
(int $server_instance, string $virtual_path):int
(int $server_instance, string $virtual_path, string $script_extension):string
(string $comment):int
(string $path):int
(int $server_instance, string $virtual_path):int
(string $service_id):int
(int $server_instance):int
(int $server_instance, string $virtual_path, string $application_scope):int
(int $server_instance, string $virtual_path, int $directory_flags):int
(int $server_instance, string $virtual_path, string $script_extension, string $engine_path, int $allow_scripting):int
(int $server_instance, string $virtual_path, int $directory_flags):int
(int $server_instance):int
(string $service_id):int
(int $server_instance):int
(string $service_id):int
(int $imagetype [, bool $include_dot = TRUE]):string
(int $imagetype):string
(resource $image [, string $filename [, int $foreground]]):bool
(resource $image, array $affine [, array $clip]):resource
(array $m1, array $m2):array
(int $type [, mixed $options]):array
(resource $image, bool $blendmode):bool
(resource $image, bool $enabled):bool
(resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color):bool
(resource $image [, mixed $to = NULL [, bool $compressed = TRUE]]):bool
(resource $image, int $font, int $x, int $y, string $c, int $color):bool
(resource $image, int $font, int $x, int $y, string $c, int $color):bool
(resource $image, int $red, int $green, int $blue):int
(resource $image, int $red, int $green, int $blue, int $alpha):int
(resource $image, int $x, int $y):int
(resource $image, int $red, int $green, int $blue):int
(resource $image, int $red, int $green, int $blue, int $alpha):int
(resource $image, int $red, int $green, int $blue):int
(resource $image, int $color):bool
(resource $image, int $red, int $green, int $blue):int
(resource $image, int $red, int $green, int $blue, int $alpha):int
(resource $image1, resource $image2):bool
(resource $image, int $red, int $green, int $blue):int
(resource $image, int $red, int $green, int $blue, int $alpha):int
(resource $image, int $index, int $red, int $green, int $blue [, int $alpha = 0]):void
(resource $image, int $index):array
(resource $image):int
(resource $image [, int $color]):int
(resource $image, array $matrix, float $div, float $offset):bool
(resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h):bool
(resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct):bool
(resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct):bool
(resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h):bool
(resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h):bool
(int $width, int $height):resource
(string $filename):resource
(string $filename):resource
(string $filename):resource
(string $filename, int $srcX, int $srcY, int $width, int $height):resource
(string $filename):resource
(string $filename):resource
(string $filename):resource
(string $image):resource
(string $filename):resource
(string $filename):resource
(string $filename):resource
(string $filename):resource
(int $width, int $height):resource
(resource $image, array $rect):resource
(resource $image [, int $mode = -1 [, float $threshold = .5 [, int $color = -1]]]):resource
(resource $image, int $x1, int $y1, int $x2, int $y2, int $color):bool
(resource $image):bool
(resource $image, int $cx, int $cy, int $width, int $height, int $color):bool
(resource $image, int $x, int $y, int $color):bool
(resource $image, int $cx, int $cy, int $width, int $height, int $start, int $end, int $color, int $style):bool
(resource $image, int $cx, int $cy, int $width, int $height, int $color):bool
(resource $image, array $points, int $num_points, int $color):bool
(resource $image, int $x1, int $y1, int $x2, int $y2, int $color):bool
(resource $image, int $x, int $y, int $border, int $color):bool
(resource $image, int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4]]]]):bool
(resource $image, int $mode):bool
(int $font):int
(int $font):int
(float $size, float $angle, string $fontfile, string $text [, array $extrainfo]):array
(resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text [, array $extrainfo]):array
(resource $image, float $inputgamma, float $outputgamma):bool
(resource $image [, mixed $to = NULL]):bool
(resource $image [, mixed $to = NULL [, int $chunk_size = 128 [, int $type = IMG_GD2_RAW]]]):bool
(resource $im):array
(resource $image [, mixed $to]):bool
(void):resource
(int $window_handle [, int $client_area = 0]):resource
(resource $image [, int $interlace = 0]):int
(resource $image):bool
(resource $image [, mixed $to [, int $quality]]):bool
(resource $image, int $effect):bool
(resource $image, int $x1, int $y1, int $x2, int $y2, int $color):bool
(string $file):int
(resource $image, array $points, int $num_points, int $color):bool
(resource $destination, resource $source):void
(resource $src):bool
(resource $image [, mixed $to [, int $quality [, int $filters]]]):bool
(resource $image, array $points, int $num_points, int $color):bool
(string $text, resource $font, int $size):array
(resource $font_index, string $encodingfile):bool
(resource $font_index, float $extend):bool
(resource $font_index):bool
(string $filename):resource
(resource $font_index, float $slant):bool
(resource $image, string $text, resource $font_index, int $size, int $foreground, int $background, int $x, int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4]]]]):array
(resource $image, int $x1, int $y1, int $x2, int $y2, int $color):bool
(resource $image [, int $res_x [, int $res_y]]):mixed
(resource $image, float $angle, int $bgd_color [, int $ignore_transparent = 0]):resource
(resource $image, bool $saveflag):bool
(resource $image, int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED]]):resource
(resource $image, resource $brush):bool
(resource $im, int $x1, int $y1, int $x2, int $y2):bool
(resource $image [, int $method = IMG_BILINEAR_FIXED]):bool
(resource $image, int $x, int $y, int $color):bool
(resource $image, array $style):bool
(resource $image, int $thickness):bool
(resource $image, resource $tile):bool
(resource $image, int $font, int $x, int $y, string $string, int $color):bool
(resource $image, int $font, int $x, int $y, string $string, int $color):bool
(resource $image):int
(resource $image):int
(resource $image, bool $dither, int $ncolors):bool
(float $size, float $angle, string $fontfile, string $text):array
(resource $image, float $size, float $angle, int $x, int $y, int $color, string $fontfile, string $text):array
(void):int
(resource $image [, mixed $to [, int $foreground]]):bool
(resource $image [, mixed $to = NULL [, int $quality = 80]]):bool
(resource $image, string $filename [, int $foreground]):bool
(string $string):string
(void):array
(resource $imap_stream, string $mailbox, string $message [, string $options = NULL [, string $internal_date = NULL]]):bool
(string $text):string
(string $string):string
(resource $imap_stream, int $msg_number [, int $options = 0]):string
(resource $imap_stream, int $msg_number, string $section):object
(resource $imap_stream):object
(resource $imap_stream, string $sequence, string $flag [, int $options = 0]):bool
(resource $imap_stream [, int $flag = 0]):bool
mailbox().:This function is an alias of:
(resource $imap_stream, string $mailbox):bool
(resource $imap_stream, int $msg_number [, int $options = 0]):bool
(resource $imap_stream, string $mailbox):bool
(void):array
(resource $imap_stream):bool
(resource $imap_stream, string $sequence [, int $options = 0]):array
(resource $imap_stream, int $msg_number, string $section [, int $options = 0]):string
(resource $imap_stream, int $msg_number [, int $options = 0]):string
(resource $imap_stream, int $msg_number, string $section [, int $options = 0]):string
(resource $imap_stream, int $msg_number [, int $options = 0]):object
(resource $imap_stream, int $msg_number [, int $options = 0]):string
(resource $imap_stream, int $caches):bool
(resource $imap_stream, string $quota_root):array
(resource $imap_stream, string $quota_root):array
(resource $imap_stream, string $mailbox):array
(resource $imap_stream, string $ref, string $pattern):array
(resource $imap_stream, string $ref, string $pattern):array
info().:This function is an alias of:
(resource $imap_stream, int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL]]]):object
(resource $imap_stream):array
(void):string
(resource $imap_stream, string $ref, string $pattern):array
(resource $imap_stream, string $ref, string $pattern):array
(resource $imap_stream, string $ref, string $pattern, string $content):array
(resource $imap_stream, string $ref, string $pattern):array
(resource $imap_stream, string $ref, string $pattern):array
(array $envelope, array $body):string
(resource $imap_stream, string $msglist, string $mailbox [, int $options = 0]):bool
(resource $imap_stream, string $msglist, string $mailbox [, int $options = 0]):bool
(string $to, string $subject, string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL]]]]):bool
(resource $imap_stream):object
(string $text):array
(resource $imap_stream, int $uid):int
(string $in):string
(resource $imap_stream):int
(resource $imap_stream):int
(string $mailbox, string $username, string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL]]]):resource
(resource $imap_stream):bool
(string $string):string
mailbox().:This function is an alias of:
(resource $imap_stream, string $old_mbox, string $new_mbox):bool
(resource $imap_stream, string $mailbox [, int $options = 0 [, int $n_retries = 0]]):bool
(string $address, string $default_host):array
(string $headers [, string $defaulthost = "UNKNOWN"]):object
(string $mailbox, string $host, string $personal):string
(resource $imap_stream, mixed $file, int $msg_number [, string $part_number = "" [, int $options = 0]]):bool
mailboxIMAP Functions:imap_savebody
(resource $imap_stream, string $ref, string $pattern, string $content):array
(resource $imap_stream, string $criteria [, int $options = SE_FREE [, string $charset = NULL]]):array
(resource $imap_stream, string $quota_root, int $quota_limit):bool
(resource $imap_stream, string $mailbox, string $id, string $rights):bool
(resource $imap_stream, string $sequence, string $flag [, int $options = NIL]):bool
(resource $imap_stream, int $criteria, int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NULL]]]):array
(resource $imap_stream, string $mailbox, int $options):object
(resource $imap_stream, string $mailbox):bool
(resource $imap_stream [, int $options = SE_FREE]):array
(int $timeout_type [, int $timeout = -1]):mixed
(resource $imap_stream, int $msg_number):int
(resource $imap_stream, int $msg_number [, int $flags = 0]):bool
(resource $imap_stream, string $mailbox):bool
(string $text):string
(string $data):string
(string $in):string
(string $mime_encoded_text):string
(string $glue, array $pieces):string
(string $types [, string $prefix]):bool
(mixed $needle, array $haystack [, bool $strict = FALSE]):bool
(void):array
(string $in_addr):string
(string $address):string
(resource $context, string $encoded_data [, int $flush_mode = ZLIB_SYNC_FLUSH]):string
(resource $resource):int
(resource $resource):int
(int $encoding [, array $options = array()]):resource
(resource $link):bool
(resource $link):bool
(resource $link):string
(resource $link):bool
(resource $link):bool
([string $database [, string $username [, string $password [, array $options]]]]):resource
(resource $result):string
([resource $link]):int
([resource $link]):string
([resource $link]):string
(resource $link, string $source_string):string
(resource $result [, array $params [, string $types]]):bool
(resource $result [, int $result_type]):array
(resource $result):array
(resource $result [, int $result_type]):object
(resource $result):int
(resource $result):array
(resource $result, int $index):int
(resource $result, int $index):string
(resource $result, int $index):bool
(resource $result, int $index):int
(resource $result, int $index):int
(resource $result, int $index):string
(resource $result):bool
([resource $link]):bool
(resource $result):int
(resource $result):int
([string $database [, string $username [, string $password [, array $options]]]]):resource
(resource $link, string $query):mixed
(resource $link, string $query [, array $params [, string $types]]):mixed
(resource $result, int $position):bool
(resource $link):bool
(resource $link, array $options):bool
(resource $link, string $query [, array $params [, string $types]]):mixed
(string $varname, string $newvalue):string
([string $extension [, bool $details = TRUE]]):array
(string $varname):string
(string $varname):void
(string $varname, string $newvalue):string
(resource $inotify_instance, string $pathname, int $mask):int
(void):resource
(resource $inotify_instance):int
(resource $inotify_instance):array
(resource $inotify_instance, int $watch_descriptor):bool
(int $dividend, int $divisor):int
(string $interface_name [, bool $autoload = TRUE]):bool
(int $error_code):string
(void):int
(void):string
(int $error_code):bool
(mixed $var [, int $base = 10]):int
(string $ip_address):int
(string $iptcdata, string $jpeg_file_name [, int $spool = 0]):mixed
(string $iptcblock):array
(object $object, string $class_name [, bool $allow_string = FALSE]):bool
(mixed $var):bool
(mixed $var):bool
(mixed $var [, bool $syntax_only = FALSE [, string &$callable_name]]):bool
(mixed $var):bool
(string $filename):bool
(mixed $var):bool
(string $filename):bool
(string $filename):bool
(float $val):bool
(mixed $var):bool
(float $val):bool
(mixed $var):bool
(mixed $var):bool
(mixed $var):bool
(string $filename):bool
(mixed $var):bool
(float $val):bool
(mixed $var):bool
(mixed $var):bool
(mixed $var):bool
(string $filename):bool
(mixed $var):bool
(mixed $var):bool
(mixed $var):bool
(mixed $object):bool
(mixed $var):bool
(mixed $object, string $class_name [, bool $allow_string = TRUE]):bool
(string $string):bool
(string $filename):bool
(string $filename):bool
(string $filename):bool
(mixed $var [, mixed $...]):bool
(Traversable $iterator, callable $function [, array $args = NULL]):int
(Traversable $iterator):int
(Traversable $iterator [, bool $use_keys = TRUE]):array
(int $julianday [, int $mode = CAL_DOW_DAYNO]):mixed
(int $julianday, int $mode):string
(int $juliandaycount):string
(int $julianday):string
(int $juliandaycount [, bool $hebrew = FALSE [, int $fl = 0]]):string
(int $julianday):string
(int $jday):int
(int $month, int $day, int $year):int
(string $glue, array $pieces):string
(string $jpegname, string $wbmpname, int $dest_height, int $dest_width, int $threshold):bool
(string $json [, bool $assoc = FALSE [, int $depth = 512 [, int $options = 0]]]):mixed
(mixed $value [, int $options = 0 [, int $depth = 512]]):string
(void):string
(void):int
(Judy $array):int
(void):string
(int $month, int $day, int $year):int
(resource $handle, string $principal, string $password):bool
(resource $handle, string $principal [, string $password [, array $options]]):bool
(resource $handle, string $principal):bool
(resource $handle):bool
(resource $handle):bool
(resource $handle):array
(resource $handle, string $principal):array
(resource $handle):array
(string $admin_server, string $realm, string $principal, string $password):resource
(resource $handle, string $principal, array $options):bool
().:This function is an alias of: array_
(array $array):mixed
(array &$array [, int $sort_flags = SORT_REGULAR]):bool
(array &$array [, int $sort_flags = SORT_REGULAR]):bool
(string $str):string
(void):float
(string $filename, mixed $group):bool
(string $filename, mixed $user):bool
(string $value):string
(resource $link_identifier, string $dn, array $entry [, array $serverctrls]):bool
(resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL]]):bool
(resource $link_identifier):bool
(resource $link_identifier, string $dn, string $attribute, string $value [, array $serverctrls]):mixed
([string $host = NULL [, int $port = 389]]):resource
(resource $link, resource $result [, string &$cookie [, int &$estimated]]):bool
(resource $link, int $pagesize [, bool $iscritical = FALSE [, string $cookie = ""]]):bool
(resource $link_identifier, resource $result_identifier):int
(resource $link_identifier, string $dn [, array $serverctrls]):bool
(string $dn):string
(int $errno):string
(resource $link_identifier):int
(resource $link_identifier):string
(string $value [, string $ignore [, int $flags]]):string
(resource $link [, string $user [, string $oldpw [, string $newpw [, array &$serverctrls]]]]):mixed
(resource $link, string $dn, int $ttl):int
(resource $link):string
(resource $link, string $reqoid [, string $reqdata [, array $servercontrols [, string &$retdata [, string &$retoid]]]]):mixed
(string $dn, int $with_attrib):array
(resource $link_identifier, resource $result_entry_identifier):string
(resource $link_identifier, resource $result_identifier):resource
(resource $link, resource $result):resource
(resource $result_identifier):bool
(resource $link_identifier, resource $result_entry_identifier):array
(resource $link_identifier, resource $result_entry_identifier):string
(resource $link_identifier, resource $result_identifier):array
(resource $link_identifier, int $option, mixed &$retval):bool
(resource $link_identifier, resource $result_entry_identifier, string $attribute):array
(resource $link_identifier, resource $result_entry_identifier, string $attribute):array
(resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls]]]]]]):resource
(resource $link_identifier, string $dn, array $entry [, array $serverctrls]):bool
(resource $link_identifier, string $dn, array $entry [, array $serverctrls]):bool
(resource $link_identifier, string $dn, array $entry [, array $serverctrls]):bool
(resource $link_identifier, string $dn, array $entry [, array $serverctrls]):bool
_batchldap_next_attributeLDAP Functions
(resource $link_identifier, resource $result_entry_identifier):string
(resource $link_identifier, resource $result_entry_identifier):resource
(resource $link, resource $entry):resource
(resource $link, resource $result [, string &$retdata [, string &$retoid]]):bool
(resource $link, resource $entry, array &$referrals):bool
(resource $link, resource $result, int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals [, array &$serverctrls]]]]):bool
(resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls]]]]]]):resource
(resource $link_identifier, string $dn, string $newrdn, string $newparent, bool $deleteoldrdn [, array $serverctrls]):bool
(resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL]]]]]]]):bool
(resource $link_identifier, string $base_dn, string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref [, array $serverctrls]]]]]]):resource
(resource $link_identifier, int $option, mixed $newval):bool
(resource $link, callable $callback):bool
(resource $link, resource $result, string $sortfilter):bool
(resource $link):bool
(string $value):string
(resource $link_identifier):bool
(string $str1, string $str2):int
(void):void
([bool $disable = TRUE]):bool
(void):array
(void):LibXMLError
(callable $resolver_function):bool
(resource $streams_context):void
([bool $use_errors = FALSE]):bool
(string $target, string $link):bool
(string $path):int
(mixed $var1 [, mixed $...]):array
(void):array
([int $timestamp = time() [, bool $is_associative = FALSE]]):array
(array $server, array $writeOptions, array $deleteOptions, array $protocolOptions)
(array $server, array $document, array $writeOptions, array $protocolOptions)
(array $server, array $writeOptions, array $updateOptions, array $protocolOptions)
(array $server, array $info)
(array $server, array $info)
(array $server, array $messageHeaders, array $operationHeaders)
(array $server, array $writeOptions, array $batch, array $protocolOptions)
(float $arg [, float $base = M_E]):float
(float $arg):float
(float $number):float
(int $proper_address):string
(string $filename):array
(string $str [, string $character_mask]):string
(string $data):string
(string $data):string
(void):int
(resource $conn, int $identifier):int
(resource $conn, int &$array):int
(resource $conn):int
(resource $conn):string
(resource $conn, int $identifier):bool
(resource $conn):bool
(void):void
(resource $conn, int $identifier, string $column, int $row):string
(resource $conn, int $identifier, int $column, int $row):string
(resource $conn, int $identifier):string
(resource $conn, int $identifier, int $column_num):string
(void):resource
(string $location):int
(resource $conn, int $identifier):int
(resource $conn, int $secs):bool
(resource $conn):int
(resource $conn, int $identifier):int
(resource $conn, int $identifier):int
(resource $conn, int $identifier):int
(resource $conn, int $identifier):array
(resource $conn, int $identifier, string $key):string
(resource $conn, int $identifier):int
(resource $conn, int $tf):int
(resource $conn, string $directory):int
(resource $conn, string $host, int $port):int
(resource $conn, string $cafile):int
(resource $conn, string $sslkeyfile, string $sslcertfile):int
(resource $conn, string $host, int $port):int
(resource $conn, int $seconds):int
(string $filename):string
(resource $conn):int
(resource $conn):int
(resource $conn, int $identifier, string $key, string $value):int
(resource $conn):int
(resource $conn, int $identifier):int
(int $microsecs):int
(resource $conn, int $tf):int
(resource $conn, int $tf):bool
(resource $conn, int $tf):bool
():This function is an alias of: set_
(string $to, string $subject, string $message [, mixed $additional_headers [, string $additional_parameters]]):bool
(resource $fp):string
(void):resource
(resource $mimemail, mixed $filename [, callable $callbackfunc]):string
(resource $mimemail, string $msgbody [, callable $callbackfunc]):void
(resource $mimemail, string $filename [, callable $callbackfunc]):string
(resource $mimemail):bool
(resource $mimemail):array
(resource $mimemail, string $mimesection):resource
(resource $mimemail):array
(string $filename):resource
(resource $mimemail, string $data):bool
(string $addresses):array
(resource $sourcefp, resource $destfp, string $encoding):bool
(resource $fp):array

(array $values):mixed
(resource $link):int
(resource $link):int
(resource $link, bool $mode):bool
(bool $mode):bool
(resource $stmt, string $types, mixed &$var1 [, mixed &$...]):bool
(resource $stmt, mixed &$var1 [, mixed &$...]):bool
(resource $link, string $user, string $password, string $database):bool
(string $user, string $password, string $database):bool
(resource $link):string
(void):string
(resource $link):string
(resource $stmt, int $param_nr):bool
(resource $stmt, int $param_nr):bool
(resource $link):bool
(void):bool
(resource $link):bool
(void):bool
(void):int
(void):string
([string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]]):resource
([string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]])
(resource $result, int $offset):bool
(int $offset):bool
(string $debug):void
(resource $link):bool
(void):void
(resource $link):bool
(resource $link):bool
([string $dbname]):resource
(resource $link):bool
(resource $link):bool
(resource $link):int
(resource $link):int
(resource $link):string
(resource $link):string
(resource $link, string $escapestr):string
(resource $stmt):bool
(resource $result [, int $resulttype]):mixed
([int $resulttype]):mixed
(resource $result):array
(void):array
(resource $result, int $fieldnr):mixed
(int $fieldnr):mixed
(resource $result):mixed
(void):mixed
(resource $result):mixed
(void):mixed
(resource $result):array
(resource $result):array
(object $result):object
(void):object
(resource $result):mixed
(void):mixed
_rowmaxdb_field_countMaxDB Functions
(resource $link):int
(void):int
(resource $result, int $fieldnr):bool
(int $fieldnr):bool
(resource $result):int
(resource $result):int
(resource $result):void
(void):void
(void):string
(void):int
(resource $link):string
(resource $link):string
(resource $stmt):resource
(resource $link):int
(resource $link):int
(resource $link):string
(resource $link):string
(resource $link):int
(resource $link):int
(resource $link):string
(resource $link):string
(void):resource
(resource $link):mixed
(resource $link):mixed
(resource $link, int $processid):bool
(int $processid):bool
(resource $link, string $query):bool
(resource $link):bool
(resource $link):bool
(resource $link, string $query):bool
(string $query):bool
(resource $link):bool
(resource $link):bool
(resource $result):int
(resource $result):int
(resource $result):int
(resource $result):int
(resource $link, int $option, mixed $value):bool
(int $option, mixed $value):bool
(resource $stmt):int
(resource $link):bool
(void):bool
(resource $link, string $query):resource
(string $query):maxdb_stmt
(resource $link, string $query [, int $resultmode]):mixed
(string $query):mixed
(resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]]):bool
([string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket]]]]]]):bool
(resource $link, string $escapestr):string
(string $escapestr):string
(resource $link, string $query):bool
(string $query):bool
(int $flags):bool
(resource $link):bool
(void):bool
(resource $link):int
(resource $link):bool
(resource $link):int
(void):int
(resource $link, string $dbname):bool
(resource $link, string $dbname):bool
(resource $stmt, int $param_nr, string $data):bool
(resource $link, string $query):bool
(string $query):bool
(void):void
([array $server [, array $groups]]):bool
(resource $link, int $option, mixed $value):bool
(resource $link):string
(resource $link):string
(resource $link, string $key, string $cert, string $ca, string $capath, string $cipher):bool
(string $key, string $cert, string $ca, string $capath, string $cipher):bool
(resource $link):string
(void):string
(resource $stmt):int
(resource $stmt):int
(resource $stmt, string $types, mixed &$var1 [, mixed &$...]):bool
(string $types, mixed &$var1 [, mixed &$...]):bool
(resource $stmt, mixed &$var1 [, mixed &$...]):bool
(mixed &$var1 [, mixed &$...]):bool
(resource $stmt, int $param_nr):bool
(void):bool
(resource $stmt):bool
(void):bool
(resource $statement, int $offset):bool
(int $offset):bool
(resource $stmt):int
(resource $stmt):int
(resource $stmt):string
(resource $stmt):string
(resource $stmt):bool
(void):bool
(resource $stmt):bool
(void):bool
(resource $stmt):void
(void):void
(resource $link):resource
(void):object
(resource $stmt):int
(resource $stmt):int
(resource $stmt):int
(resource $stmt):int
(resource $stmt, string $query):bool
(string $query):mixed
(resource $stmt):bool
(void):bool
(resource $stmt):resource
(void):resource
(resource $stmt, int $param_nr, string $data):bool
(resource $stmt, int $param_nr, string $data):bool
(resource $stmt):string
(resource $stmt):bool
(void):object
(resource $link):resource
(void):object
(resource $link):int
(resource $link):int
(void):bool
(resource $link):resource
(void):resource
(resource $link):int
(resource $link):int
([string $var = NULL [, string $encoding = mb_internal_encoding()]]):bool
(int $cp [, string $encoding]):string
(string $str, int $mode [, string $encoding = mb_internal_encoding()]):string
(string $str, string $to_encoding [, mixed $from_encoding = mb_internal_encoding()]):string
(string $str [, string $option = "KV" [, string $encoding = mb_internal_encoding()]]):string
(string $to_encoding, mixed $from_encoding, mixed &$vars [, mixed &$...]):string
(string $str):string
(string $str, array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE]]):string
(string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = FALSE]]):string
([mixed $encoding_list = mb_detect_order()]):mixed
(string $str [, string $charset = determined by mb_language() [, string $transfer_encoding = "B" [, string $linefeed = "\r\n" [, int $indent = 0]]]]):string
(string $str, array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE]]):string
(string $encoding):array
(string $pattern, string $string [, string $option = "msr"]):bool
(string $pattern, callable $callback, string $string [, string $option = "msr"]):string
(string $pattern, string $replacement, string $string [, string $option = "msr"]):string
(void):int
(void):array
(string $string [, string $pattern [, string $option = "msr"]]):bool
([string $pattern [, string $option = "ms"]]):array
([string $pattern [, string $option = "ms"]]):array
(int $position):bool
([string $pattern [, string $option = "ms"]]):bool
(string $pattern, string $string [, array &$regs]):int
(string $pattern, string $replace, string $string [, string $option = "msri"]):string
(string $pattern, string $string [, array &$regs]):int
([string $type = "all"]):mixed
([string $type = ""]):mixed
([string $encoding = mb_http_output()]):mixed
([string $encoding = mb_internal_encoding()]):mixed
([string $language = mb_language()]):mixed
(void):array
(string $str [, string $encoding]):int
(string $contents, int $status):string
(string $encoded_string [, array &$result]):bool
(string $encoding):string
([string $encoding = mb_regex_encoding()]):mixed
([string $options = mb_regex_set_options()]):string
(string $str [, string $encoding]):string
(string $to, string $subject, string $message [, mixed $additional_headers = NULL [, string $additional_parameter = NULL]]):bool
(string $pattern, string $string [, int $limit = -1]):array
(string $str, int $start [, int $length = NULL [, string $encoding = mb_internal_encoding()]]):string
(string $str, int $start, int $width [, string $trimmarker = "" [, string $encoding = mb_internal_encoding()]]):string
(string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]]):int
(string $haystack, string $needle [, bool $before_needle = FALSE [, string $encoding = mb_internal_encoding()]]):string
(string $str [, string $encoding = mb_internal_encoding()]):int
(string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]]):int
(string $haystack, string $needle [, bool $part = FALSE [, string $encoding = mb_internal_encoding()]]):string
(string $haystack, string $needle [, bool $part = FALSE [, string $encoding = mb_internal_encoding()]]):string
(string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]]):int
(string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding()]]):int
(string $haystack, string $needle [, bool $before_needle = FALSE [, string $encoding = mb_internal_encoding()]]):string
(string $str [, string $encoding = mb_internal_encoding()]):string
(string $str [, string $encoding = mb_internal_encoding()]):string
(string $str [, string $encoding = mb_internal_encoding()]):int
([mixed $substchar = mb_substitute_character()]):mixed
(string $haystack, string $needle [, string $encoding = mb_internal_encoding()]):int
(string $str, int $start [, int $length = NULL [, string $encoding = mb_internal_encoding()]]):string
(int $cipher, string $key, string $data, int $mode [, string $iv]):string
(int $cipher, string $key, string $data, int $mode, string $iv):string
(int $size [, int $source = MCRYPT_DEV_URANDOM]):string
(string $cipher, string $key, string $data, string $mode [, string $iv]):string
(int $cipher, string $key, string $data, int $mode):string
(resource $td):string
(resource $td):int
(resource $td):int
(resource $td):int
(resource $td):string
(resource $td):array
(resource $td):bool
(resource $td):bool
(resource $td):bool
(resource $td):int
(string $cipher, string $key, string $data, string $mode [, string $iv]):string
(resource $td):bool
(resource $td):bool
(resource $td, string $key, string $iv):int
(resource $td, string $data):string
(int $cipher):int
(int $cipher):string
(string $cipher, string $mode):int
(int $cipher):int
([string $lib_dir = ini_get("mcrypt.algorithms_dir")]):array
([string $lib_dir = ini_get("mcrypt.modes_dir")]):array
(resource $td):bool
(string $algorithm [, string $lib_dir]):int
(string $algorithm [, string $lib_dir]):int
(string $algorithm [, string $lib_dir]):array
(string $mode [, string $lib_dir]):bool
(string $algorithm [, string $lib_dir]):bool
(string $mode [, string $lib_dir]):bool
(string $algorithm, string $algorithm_directory, string $mode, string $mode_directory):resource
(string $algorithm [, string $lib_dir]):bool
(int $cipher, string $key, string $data, int $mode, string $iv):string
(string $filename [, bool $raw_output = FALSE]):string
(string $str [, bool $raw_output = FALSE]):string
(resource $td, string $data):string
(bool $on_off):bool
([bool $real_usage = FALSE]):int
([bool $real_usage = FALSE]):int
(string $str [, int $phonemes = 0]):string
(mixed $object, string $method_name):bool
(void):int
(int $hash):int
(int $hash):string
(int $hash, string $password, string $salt, int $bytes):string
(int $hash, string $data [, string $key]):string
([bool $get_as_float = FALSE]):mixed
(string $filename):string
(array $values):mixed
(string $char):int
(int $threshold):void
(float $scale):void
(int $level):void
(int $use):void
(int $version):void
(string $pathname [, int $mode = 0777 [, bool $recursive = FALSE [, resource $context]]]):bool
([int $hour = date("H") [, int $minute = date("i") [, int $second = date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date("Y") [, int $is_dst = -1]]]]]]]):int
(string $format, float $number):string
(string $json):string
(array|object $value):string
(string $bson):string
(string $bson):string
(string $bson [, array $typeMap = array()]):array|object
(string $bson):string
(MongoDB\Driver\Monitoring\Subscriber $subscriber):void
(MongoDB\Driver\Monitoring\Subscriber $subscriber):void
(string $filename, string $destination):bool
(resource $hconn, resource &$compCode, resource &$reason):void
(resource $hconn, array $beginOptions, resource &$compCode, resource &$reason):void
(resource $hconn, resource $hobj, int $options, resource &$compCode, resource &$reason):void
(resource $hconn, resource &$compCode, resource &$reason):void
(string $qManagerName, resource &$hconn, resource &$compCode, resource &$reason):void
(string $qManagerName, array &$connOptions, resource &$hconn, resource &$compCode, resource &$reason):void
(resource $hconn, resource &$compCode, resource &$reason):void
(resource $hConn, resource $hObj, array &$md, array &$gmo, int &$bufferLength, string &$msg, int &$data_length, resource &$compCode, resource &$reason):void
(resource $hconn, resource $hobj, int $selectorCount, array $selectors, int $intAttrCount, resource &$intAttr, int $charAttrLength, resource &$charAttr, resource &$compCode, resource &$reason):void
(resource $hconn, array &$objDesc, int $option, resource &$hobj, resource &$compCode, resource &$reason):void
(resource $hConn, resource $hObj, array &$md, array &$pmo, string $message, resource &$compCode, resource &$reason):void
(resource $hconn, resource &$objDesc, resource &$msgDesc, resource &$pmo, string $buffer, resource &$compCode, resource &$reason):void
(resource $hConn, resource $hObj, int $selectorCount, array $selectors, int $intAttrCount, array $intAttrs, int $charAttrLength, array $charAttrs, resource &$compCode, resource &$reason):void
(int $reason):string
(string $host, string $port):bool
(void):int
(string $session [, string $classname [, string $data]]):bool
(string $name):bool
(void):void
(string $name, string $value):array
(string $session):array
(string $session):string
(string $session, string $name, string $value):string
(string $session, string $name):string
(void):array
(string $name):array
(string $name):int
(string $session, string $val [, string $param]):string
(int $param):string
(string $session, array $tuples):void
(string $session, string $value):bool
(string $session, string $name, string $value):bool
(string $session [, int $param]):int
(int $param [, string $classname [, string $data]]):string
(string $session, int $key):int
(int $key [, int $perms = 0666]):resource
(int $key):bool
(resource $queue, int $desiredmsgtype, int &$msgtype, int $maxsize, mixed &$message [, bool $unserialize = TRUE [, int $flags = 0 [, int &$errorcode]]]):bool
(resource $queue):bool
(resource $queue, int $msgtype, mixed $message [, bool $serialize = TRUE [, bool $blocking = TRUE [, int &$errorcode]]]):bool
(resource $queue, array $data):bool
(resource $queue):array
(resource $result):int
([resource $link_identifier]):bool
([string $hostname]):resource
(string $database_name [, resource $link_identifier]):bool
(string $database_name [, resource $link_identifier]):bool
(resource $result, int $row_number):bool
(string $database, string $query [, resource $link_identifier]):resource
(resource $result, int $row [, mixed $field]):string
(string $database_name [, resource $link_identifier]):bool
(void):string
(resource $result [, int $result_type]):array
(resource $result [, int $field_offset = 0]):object
(resource $result):object
(resource $result):array
(resource $result, int $field_offset):string
(resource $result, int $field_offset):int
(resource $result, int $field_offset):string
(resource $result, int $field_offset):bool
(resource $result, int $field_offset):int
(resource $result, int $field_offset):string
(resource $result, int $field_offset):string
(resource $result, int $field_offset):int
(resource $result, int $field_offset):string
(resource $result, int $field_offset):int
(resource $result, int $field_offset):string
(resource $result):bool
([resource $link_identifier]):resource
(string $database, string $tablename [, resource $link_identifier]):resource
(string $database [, resource $link_identifier]):resource
(resource $result):int
(resource $query_identifier):int
(resource $result):int
(resource $query_identifier):int
([string $hostname]):resource
(string $query [, resource $link_identifier]):resource
(string $string):string
(resource $result, int $row [, mixed $field]):string
(string $database_name [, resource $link_identifier]):bool
(resource $result, int $row [, mixed $field]):string
_db_query().:This function is an alias of
(resource $stmt, string $param_name, mixed &$var, int $type [, bool $is_output = FALSE [, bool $is_null = FALSE [, int $maxlen = -1]]]):bool
([resource $link_identifier]):bool
([string $servername [, string $username [, string $password [, bool $new_link = FALSE]]]]):resource
(resource $result_identifier, int $row_number):bool
(resource $stmt [, bool $skip_results = FALSE]):mixed
(resource $result [, int $result_type = MSSQL_BOTH]):array
(resource $result_id):array
(resource $result):int
(resource $result [, int $field_offset = -1]):object
(resource $result):object
(resource $result):array
(resource $result [, int $offset = -1]):int
(resource $result [, int $offset = -1]):string
(resource $result, int $field_offset):bool
(resource $result [, int $offset = -1]):string
(resource $result):bool
(resource $stmt):bool
(void):string
(string $binary [, bool $short_format = FALSE]):string
(string $sp_name [, resource $link_identifier]):resource
(int $severity):void
(int $severity):void
(resource $result_id):bool
(resource $result):int
(resource $result):int
([string $servername [, string $username [, string $password [, bool $new_link = FALSE]]]]):resource
(string $query [, resource $link_identifier [, int $batch_size = 0]]):mixed
(resource $result, int $row, mixed $field):string
(resource $link_identifier):int
(string $database_name [, resource $link_identifier]):bool
(void):int
(void):int
([int $seed [, int $mode = MT_RAND_MT19937]]):void
([resource $link_identifier = NULL]):int
([resource $link_identifier = NULL]):string
([resource $link_identifier = NULL]):bool
([string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, bool $new_link = FALSE [, int $client_flags = 0]]]]]):resource
(string $database_name [, resource $link_identifier = NULL]):bool
(resource $result, int $row_number):bool
(resource $result, int $row [, mixed $field = NULL]):string
(string $database, string $query [, resource $link_identifier = NULL]):resource
(string $database_name [, resource $link_identifier = NULL]):bool
([resource $link_identifier = NULL]):int
([resource $link_identifier = NULL]):string
(string $unescaped_string):string
(resource $result [, int $result_type = MYSQL_BOTH]):array
(resource $result):array
(resource $result [, int $field_offset = 0]):object
(resource $result):array
(resource $result [, string $class_name [, array $params]]):object
(resource $result):array
(resource $result, int $field_offset):string
(resource $result, int $field_offset):int
(resource $result, int $field_offset):string
(resource $result, int $field_offset):bool
(resource $result, int $field_offset):string
(resource $result, int $field_offset):string
(resource $result):bool
(void):string
([resource $link_identifier = NULL]):string
([resource $link_identifier = NULL]):int
([resource $link_identifier = NULL]):string
([resource $link_identifier = NULL]):string
([resource $link_identifier = NULL]):int
([resource $link_identifier = NULL]):resource
(string $database_name, string $table_name [, resource $link_identifier = NULL]):resource
([resource $link_identifier = NULL]):resource
(string $database [, resource $link_identifier = NULL]):resource
(resource $result):int
(resource $result):int
([string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, int $client_flags = 0]]]]):resource
([resource $link_identifier = NULL]):bool
(string $query [, resource $link_identifier = NULL]):mixed
(string $unescaped_string [, resource $link_identifier = NULL]):string
(resource $result, int $row [, mixed $field = 0]):string
(string $database_name [, resource $link_identifier = NULL]):bool
(string $charset [, resource $link_identifier = NULL]):bool
([resource $link_identifier = NULL]):string
(resource $result, int $i):string
([resource $link_identifier = NULL]):int
(string $query [, resource $link_identifier = NULL]):resource
(string $expression):object mysql_xdevapi\
(string $uri):mysql_xdevapi\Session mysql_xdevapi\
(mysqli_stmt $stmt, string $types, mixed &$var1 [, mixed &$...]):bool
(mysqli_stmt $stmt, mixed &$var1 [, mixed &$...]):bool
(mysqli $link):string
() function, here is a short example::Although the mysqli::__construct() documentation also includes procedural examples that use the
(void):void
(mysqli $link):bool
(mysqli $link):bool
(mysqli $link):bool
(mysqli $link):bool
(mysqli $link, string $escapestr):string
() is deprecated and will be removed.
(mysqli_stmt $stmt):bool
(void):array
(void):array
(void):array
(mysqli_stmt $stmt):mysqli_result
(mysqli $link, string $query):bool
(mysqli_stmt $stmt):int
(int $flags):bool
(mysqli $link):int
(mysqli $link):bool
(mysqli_stmt $stmt, int $param_nr, string $data):bool
(mysqli $link, int $option, mixed $value):bool
(mysqli $link, int $option, mixed $value):bool
(mysqli $link, string $query):bool
(mixed $connection):array
(mixed $mysql_connection [, Memcached $memcache_connection [, string $pattern [, callback $callback]]]):bool
(mixed $connection):array
(mixed $connection, mixed $table_name):array
(mixed $connection, mixed $table_name, mixed $shard_key):array
(mixed $connection):string
(mixed $connection):array
(void):array
(string $table_name, string $wildcard):bool
(string $query):int
(mixed $connection, int $service_level [, int $service_level_option [, mixed $option_value]]):bool
(string $function):bool
(mixed $connection, string $gtrid [, int $timeout]):int
(mixed $connection, string $gtrid):int
(mixed $connection [, string $gtrid [, bool $ignore_max_retries]]):int
(mixed $connection, string $gtrid):int
(void):bool
(void):array
(void):array
(void):array
(void):array
(void):array
(int $condition_type, mixed $condition, mixed $condition_option):bool
(string $callback):mixed
(string $handler):bool
(string $get_hash, string $find_query_in_cache, string $return_to_cache, string $add_query_to_cache_if_not_exists, string $query_is_select, string $update_query_run_time_stats, string $get_stats, string $clear_cache):bool
(mysqli &$mysql_connection):resource
(MysqlndUhConnection &$connection_proxy [, mysqli &$mysqli_connection]):bool
(MysqlndUhStatement &$statement_proxy):bool
(array &$array):bool
(array &$array):bool
(int $ch):int
(string $s, int $n):int
(string $s):int
(string $s, int $n):int
(string $text):int
(int $fg, int $bg):int
(int $attributes):int
(int $attributes):int
(int $attributes):int
(void):int
(void):int
(int $attrchar):int
(int $attrchar):void
(int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner):int
(resource $panel):int
(void):bool
(void):bool
(void):bool
(void):bool
(void):bool
(int $color, int &$r, int &$g, int &$b):int
(int $pair):int
(int $visibility):int
(void):bool
(void):bool
(string $definition, int $keycode):int
(resource $panel):bool
(int $milliseconds):int
(void):bool
(void):bool
(resource $window):bool
(void):bool
(void):bool
(int $character):int
(void):int
(void):bool
(void):string
(void):void
(void):bool
(void):bool
(void):int
(resource $window, int &$y, int &$x):void
(array &$mevent):bool
(resource $window, int &$y, int &$x):void
(int $tenth):int
(void):bool
(void):bool
(void):bool
(int $keycode):int
(resource $panel):int
(int $charattr, int $n):int
(void):string
(int $color, int $r, int $g, int $b):int
(int $pair, int $fg, int $bg):int
(void):void
(int $character):int
(int $count):int
(void):int
(string $text):int
(string &$buffer):int
(void):bool
(int $keycode, bool $enable):int
(resource $window, bool $bf):int
(void):string
(void):string
(resource $window, bool $8bit):int
(int &$y, int &$x, bool $toscreen):bool
(int $milliseconds):int
(int $newmask, int &$oldmask):int
(resource $panel, int $startx, int $starty):int
(int $y, int $x):int
(int $y, int $x, int $c):int
(int $y, int $x, string $s, int $n):int
(int $y, int $x, string $s):int
(int $y, int $x, string $s, int $n):int
(int $y, int $x, string $s):int
(int $old_y, int $old_x, int $new_y, int $new_x):int
(int $y, int $x):int
(int $y, int $x):int
(int $y, int $x, int $attrchar, int $n):int
(int $y, int $x):int
(int $y, int $x, int $attrchar, int $n):int
(resource $window, int $y, int $x, string $text):int
(int $milliseconds):int
(resource $window):resource
(int $rows, int $cols):resource
(int $rows, int $cols, int $y, int $x):resource
(void):bool
(void):bool
(void):bool
(void):bool
(void):void
(void):bool
(int $pair, int &$f, int &$b):int
(resource $panel):resource
(resource $panel):resource
(resource $panel):resource
(resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol):int
(resource $pad, int $pminrow, int $pmincol, int $sminrow, int $smincol, int $smaxrow, int $smaxcol):int
(string $text):int
(void):void
(void):bool
(int $ch):int
(resource $panel, resource $window):int
(void):int
(void):int
(void):bool
(void):bool
(string $filename):int
(string $filename):int
(string $filename):int
(string $filename):int
(int $count):int
(resource $panel):int
(void):int
(int $intarg):int
(int $intarg):int
(int $intarg):int
(void):bool
(int $intarg):int
(int $format):bool
(void):bool
(void):int
(void):int
(int $labelnr, string $label, int $format):bool
(void):int
(void):int
(void):int
(void):int
(void):bool
(void):string
(int $millisec):void
(resource $panel):int
(int $fd):int
(int $keycode):int
(array $mevent):bool
(void):void
(void):bool
(bool $flag):void
(bool $flag):int
(int $intarg):int
(int $charattr, int $n):int
(resource $window, int $ch):int
(resource $window, string $str [, int $n]):int
(resource $window, int $attrs):int
(resource $window, int $attrs):int
(resource $window, int $attrs):int
(resource $window, int $left, int $right, int $top, int $bottom, int $tl_corner, int $tr_corner, int $bl_corner, int $br_corner):int
(resource $window):int
(resource $window, int $color_pair):int
(resource $window):int
(resource $window):int
(resource $window, int $charattr, int $n):int
(resource $window, int &$y, int &$x, bool $toscreen):bool
(resource $window, int $y, int $x):int
(resource $window):int
(resource $window):int
(resource $window):int
(resource $window):int
(resource $window, int $charattr, int $n):int
(void):void
(array &$buttons):resource
(int $left, int $top, string $text):resource
(int $width, int $height [, string $title]):int
(resource $checkbox):string
(resource $checkbox, int $flags, int $sense):void
(resource $checkbox, string $value):void
(resource $checkboxtree, string $text, mixed $data, int $flags, int $index [, int $...]):void
(resource $checkboxtree, mixed $data):array
(resource $checkboxtree):mixed
(resource $checkboxtree, mixed $data):string
(resource $checkboxtree, string $seqnum):array
(resource $checkboxtree):array
(int $left, int $top, int $height, string $seq [, int $flags]):resource
(resource $checkboxtree, mixed $data):void
(resource $checkboxtree, mixed $data, string $value):void
(resource $checkboxtree, mixed $data, string $text):void
(resource $checkbox_tree, int $width):void
(int $left, int $top, int $height [, int $flags]):resource
(int $left, int $top, string $text, string $def_value [, string $seq]):resource
(void):void
(void):void
(int $left, int $top, string $text):resource
(resource $component, mixed $func_name, mixed $data):void
(resource $component, bool $takes_focus):void
(int $cols, int $rows):resource
(void):void
(void):void
(int $microseconds):void
(resource $form):void
(int $left, int $top, string $text):void
(resource $entry):string
(resource $entry, callable $filter, mixed $data):void
(resource $entry, int $flags, int $sense):void
(resource $entry, string $value [, bool $cursor_at_end]):void
(int $left, int $top, int $width [, string $init_value [, int $flags]]):resource
(void):int
(resource $form, resource $component):void
(resource $form, array $components):void
(resource $form, int $key):void
(resource $form):void
(resource $form):resource
(resource $form, array &$exit_struct):void
(resource $from, int $background):void
(resource $form, int $height):void
(resource $form):void
(resource $form, int $milliseconds):void
(resource $form, int $width):void
(resource $form, resource $stream [, int $flags]):void
([resource $vert_bar [, string $help [, int $flags]]]):resource
(int &$cols, int &$rows):void
(resource $grid, resource $form, bool $recurse):void
(resource $text, resource $middle, resource $buttons):resource
(resource $grid, bool $recurse):void
(resouce $grid, int &$width, int &$height):void
(int $element1_type, resource $element1 [, int $... [, resource $...]]):resource
(int $element1_type, resource $element1 [, int $... [, resource $...]]):resource
(resource $grid, int $left, int $top):void
(resource $grid, int $col, int $row, int $type, resource $val, int $pad_left, int $pad_top, int $pad_right, int $pad_bottom, int $anchor [, int $flags]):void
(resource $text, resource $middle, resource $buttons):resource
(int $element1_type, resource $element1 [, int $... [, resource $...]]):resource
(int $element1_type, resource $element1 [, int $... [, resource $...]]):resource
(resource $grid, string $title, int $left, int $top):void
(resource $grid, string $title):void
(void):int
(resource $label, string $text):void
(int $left, int $top, string $text):resource
(resource $listbox, string $text, mixed $data):void
(resource $listbox):void
(resource $listobx):void
(resource $listbox, mixed $key):void
(resource $listbox):string
(resource $listbox):array
(resource $listbox, string $text, mixed $data, mixed $key):void
(resource $listbox):int
(resource $listbox, mixed $key, int $sense):void
(resource $listbox, mixed $key):void
(resource $listbox, int $num):void
(resource $listbox, int $num, mixed $data):void
(resource $listbox, int $num, string $text):void
(resource $listbox, int $width):void
(int $left, int $top, int $height [, int $flags]):resource
(resource $item):mixed
(resource $item, string $text):void
(int $left, int $top, string $text, bool $is_default, resouce $prev_item, mixed $data [, int $flags]):resource
(int $left, int $top, int $width, int $height [, string $title]):int
(void):void
(void):void
([string $text]):void
(resource $set_member):resource
(int $left, int $top, string $text, bool $is_default [, resource $prev_button]):resource
(void):void
(string $text, int $width, int $flex_down, int $flex_up, int &$actual_width, int &$actual_height):string
(void):void
([bool $redraw]):void
(void):void
(resource $form):resource
(resource $scale, int $amount):void
(int $left, int $top, int $width, int $full_value):resource
(resource $scrollbar, int $where, int $total):void
(mixed $function):void
(callable $function, mixed $data):void
(void):void
(resource $textbox):int
(int $left, int $top, char $*text, int $width, int $flex_down, int $flex_up [, int $flags]):resource
(resource $textbox, int $height):void
(resource $textbox, string $text):void
(int $left, int $top, int $width, int $height [, int $flags]):resource
(int $left, int $top, int $height [, int $normal_colorset [, int $thumb_colorset]]):resource
(void):void
(string $title, string $button1_text, string $button2_text, string $format [, mixed $args [, mixed $...]]):int
(string $title, string $text, int $suggested_width, int $flex_down, int $flex_up, int $data_width, array &$items, string $button1 [, string $...]):int
(string $title, string $text, int $suggestedWidth, int $flexDown, int $flexUp, int $maxListHeight, array $items, int &$listItem [, string $button1 [, string $...]]):int
(string $title, string $button_text, string $format [, mixed $args [, mixed $...]]):void
(string $title, string $button_text, string $format, array $args):void
(string $title, string $button1_text, string $button2_text, string $button3_text, string $format [, mixed $args [, mixed $...]]):int
(array &$array):mixed
(string $msgid1, string $msgid2, int $n):string
(int $item):string
(string $string [, bool $is_xhtml = TRUE]):string
(void):array
(void):array
(string $uri):bool
(float $number [, int $decimals = 0]):string
(string $http_method, string $uri [, array $request_parameters]):string
(string $uri):string
(void):void
(void):bool
(void):bool
(void):void
(void):string
(void):string
(void):string
(void):int
(void):int
([bool $full_status = FALSE]):array
(string $buffer, int $mode):string
(string $contents, int $status):string
([int $flag = 1]):void
(void):array
([callable $output_callback = NULL [, int $chunk_size = 0 [, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS]]]):bool
(string $input [, int $mode]):string
(resource $statement, string $name, array &$var_array, int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC]]):bool
(resource $statement, string $bv_name, mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR]]):bool
(resource $statement):bool
(void):string
(resource $connection):bool
(resource $connection):bool
(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
(resource $statement, string $column_name, mixed &$variable [, int $type = SQLT_CHR]):bool
([resource $resource]):array
(resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS]):bool
(resource $statement, array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC]]]):int
(resource $statement [, int $mode]):array
(resource $statement):array
(resource $statement):object
(resource $statement):array
(resource $statement):bool
(resource $statement, mixed $field):bool
(resource $statement, mixed $field):string
(resource $statement, mixed $field):int
(resource $statement, mixed $field):int
(resource $statement, mixed $field):int
(resource $statement, mixed $field):int
(resource $statement, mixed $field):mixed
(resource $descriptor):bool
(resource $statement):bool
(resource $statement):resource
(bool $onoff):void
(OCI-Lob $lob_to, OCI-Lob $lob_from [, int $length = 0]):bool
(OCI-Lob $lob1, OCI-Lob $lob2):bool
(resource $connection, string $tdo [, string $schema = NULL]):OCI-Collection
(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
(resource $connection):resource
(resource $connection [, int $type = OCI_DTYPE_LOB]):OCI-Lob
(resource $statement):int
(resource $statement):int
(resource $connection, string $sql_text):resource
(resource $connection, string $username, string $old_password, string $new_password):bool
(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
(resource $connection [, mixed $callbackFn]):bool
(resource $statement, mixed $field):mixed
(resource $connection):bool
(resource $connection):string
(resource $connection, string $action_name):bool
(resource $connection, string $client_identifier):bool
(resource $connection, string $client_info):bool
(string $edition):bool
(resource $connection, string $module_name):bool
(resource $statement, int $rows):bool
(resource $statement):string
(resource $connection):bool
(resource $statement, string $bv_name, mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR]]):bool
(resource $statement):bool
(void):bool
(mixed $value):bool
(OCI-Collection $from):bool
(int $index, mixed $value):bool
(int $index):mixed
(void):int
(void):int
(int $num):bool
(resource $statement, mixed $field):bool
(resource $statement, mixed $field):string
(resource $statement, mixed $field):int
(resource $statement, mixed $field):int
(resource $statement, mixed $field):int
(resource $statement, mixed $field):mixed
(resource $statement, mixed $field):int
(resource $connection):bool
(resource $statement, string $column_name, mixed &$variable [, int $type = SQLT_CHR]):bool
([resource $resource]):array
(resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS]):bool
(resource $statement):bool
(resource $statement [, int $mode]):array
(resource $statement, array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC]]]):int
(void):bool
(resource $statement):bool
(void):bool
(resource $statement):bool
(bool $onoff):void
(void):string
(resource $connection):bool
(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
(resource $connection, string $tdo [, string $schema = NULL]):OCI-Collection
(resource $connection):resource
(resource $connection [, int $type = OCI_DTYPE_LOB]):OCI-Lob
(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
(resource $statement):int
(resource $connection, string $sql_text):resource
(string $username, string $password [, string $connection_string [, string $character_set [, int $session_mode]]]):resource
(resource $statement, mixed $field):mixed
(resource $connection):bool
(resource $statement):int
(string $data [, int $offset]):bool
(string $filename):bool
(resource $connection):string
(resource $statement, int $rows):bool
(resource $statement):string
(string $filename [, int $start [, int $length]]):bool
(string $data [, int $lob_type = OCI_TEMP_CLOB]):bool
(string $octal_string):number
(resource $connection_id [, bool $OnOff = FALSE]):mixed
(resource $result_id, int $mode):bool
(void):void
(resource $connection_id):void
(resource $connection_id, string $qualifier, string $owner, string $table_name, string $column_name):resource
(resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name]]]]):resource
(resource $connection_id):bool
(string $dsn, string $user, string $password [, int $cursor_type]):resource
(resource $result_id):string
(resource $connection_id, int $fetch_type):array
(resource $connection_id, string $query_string [, int $flags]):resource
([resource $connection_id]):string
([resource $connection_id]):string
(resource $connection_id, string $query_string [, int $flags]):resource
(resource $result_id [, array $parameters_array]):bool
(resource $result [, int $rownumber]):array
(resource $result_id, array &$result_array [, int $rownumber]):int
(resource $result [, int $rownumber]):object
(resource $result_id [, int $row_number = 1]):bool
(resource $result_id, int $field_number):int
(resource $result_id, int $field_number):string
(resource $result_id, string $field_name):int
(resource $result_id, int $field_number):int
(resource $result_id, int $field_number):int
(resource $result_id, int $field_number):string
(resource $connection_id, string $pk_qualifier, string $pk_owner, string $pk_table, string $fk_qualifier, string $fk_owner, string $fk_table):resource
(resource $result_id):bool
(resource $connection_id [, int $data_type]):resource
(resource $result_id, int $length):bool
(resource $result_id):bool
(resource $result_id):int
(resource $result_id):int
(string $dsn, string $user, string $password [, int $cursor_type]):resource
(resource $connection_id, string $query_string):resource
(resource $connection_id, string $qualifier, string $owner, string $table):resource
(resource $connection_id):resource
(resource $connection_id):resource
(resource $result_id [, string $format]):int
(resource $result_id, mixed $field):mixed
(resource $connection_id):bool
(resource $id, int $function, int $option, int $param):bool
(resource $connection_id, int $type, string $qualifier, string $table, int $scope, int $nullable):resource
(resource $connection_id, string $qualifier, string $owner, string $table_name, int $unique, int $accuracy):resource
(resource $connection_id, string $qualifier, string $owner, string $name):resource
(resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types]]]]):resource
(string $file):bool
(void):array
([bool $get_scripts = TRUE]):array
(string $script [, bool $force = FALSE]):bool
(string $file):bool
(void):bool
(void):resource
(resource $buffer, int $format, string $data, int $freq):bool
(resource $buffer):bool
(resource $buffer, int $property):int
(resource $buffer, string $wavfile):bool
(resource $device):resource
(resource $context):bool
(resource $context):bool
(resource $context):bool
(resource $context):bool
(resource $device):bool
([string $device_desc]):resource
(int $property):mixed
(int $property, mixed $setting):bool
(void):resource
(resource $source):bool
(resource $source, int $property):mixed
(resource $source):bool
(resource $source):bool
(resource $source):bool
(resource $source, int $property, mixed $setting):bool
(resource $source):bool
(resource $source, int $format, int $rate):resource
(string $path [, resource $context]):resource
(string $ident, int $option, int $facility):bool
(string $method):int
(mixed $csr, string $outfilename [, bool $notext = TRUE]):bool
(mixed $csr, string &$out [, bool $notext = TRUE]):bool
(mixed $csr [, bool $use_shortnames = TRUE]):resource
(mixed $csr [, bool $use_shortnames = TRUE]):array
(array $dn, resource &$privkey [, array $configargs [, array $extraattribs]]):mixed
(mixed $csr, mixed $cacert, mixed $priv_key, int $days [, array $configargs [, int $serial = 0]]):resource
(string $data, string $method, string $key [, int $options = 0 [, string $iv = "" [, string $tag = "" [, string $aad = ""]]]]):string
(string $pub_key, resource $dh_key):string
(string $data, string $method [, bool $raw_output = FALSE]):string
(string $data, string $method, string $key [, int $options = 0 [, string $iv = "" [, string &$tag = NULL [, string $aad = "" [, int $tag_length = 16]]]]]):string
(void):string
(resource $key_identifier):void
(void):array
([bool $aliases = FALSE]):array
(void):array
([bool $aliases = FALSE]):array
(mixed $key [, string $passphrase = ""]):resource
(mixed $certificate):resource
(string $sealed_data, string &$open_data, string $env_key, mixed $priv_key_id [, string $method = "RC4" [, string $iv]]):bool
(string $password, string $salt, int $key_length, int $iterations [, string $digest_algorithm = "sha1"]):string
(mixed $x509, string $filename, mixed $priv_key, string $pass [, array $args]):bool
(mixed $x509, string &$out, mixed $priv_key, string $pass [, array $args]):bool
(string $pkcs12, array &$certs, string $pass):bool
(string $infilename, string $outfilename, mixed $recipcert [, mixed $recipkey]):bool
(string $infile, string $outfile, mixed $recipcerts, array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40]]):bool
(string $infilename, array &$certs):bool
(string $infilename, string $outfilename, mixed $signcert, mixed $privkey, array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts]]):bool
(string $filename, int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content [, string $p7bfilename]]]]]):mixed
(mixed $key, string $outfilename [, string $passphrase [, array $configargs]]):bool
(mixed $key, string &$out [, string $passphrase [, array $configargs]]):bool
(resource $key):void
(resource $key):array
(mixed $key [, string $passphrase = ""]):resource
(mixed $certificate):resource
([array $configargs]):resource
(string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING]):bool
(string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING]):bool
(string $data, string &$decrypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING]):bool
(string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING]):bool
(int $length [, bool &$crypto_strong]):string
(string $data, string &$sealed_data, array &$env_keys, array $pub_key_ids [, string $method = "RC4" [, string &$iv]]):int
(string $data, string &$signature, mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1]):bool
(string &$spkac):string
(string &$spkac):string
(resource &$privkey, string &$challenge [, int $algorithm = 0]):string
(string &$spkac):string
(string $data, string $signature, mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1]):int
(mixed $cert, mixed $key):bool
(mixed $x509cert, int $purpose [, array $cainfo = array() [, string $untrustedfile]]):int
(mixed $x509, string $outfilename [, bool $notext = TRUE]):bool
(mixed $x509, string &$output [, bool $notext = TRUE]):bool
(mixed $x509 [, string $hash_algorithm = "sha1" [, bool $raw_output = FALSE]]):string
(resource $x509cert):void
(mixed $x509cert [, bool $shortnames = TRUE]):array
(mixed $x509certdata):resource
(string $string):int
(string $name, string $value):bool
(void):bool
(string $function_name, string $function_args, string $function_code):bool
(string $format [, mixed $args [, mixed $...]]):string
(string $filename [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL]]):array
(string $ini [, bool $process_sections = FALSE [, int $scanner_mode = INI_SCANNER_NORMAL]]):array
(string $encoded_string [, array &$result]):void
(string $url [, int $component = -1]):mixed
(string $filename [, array &$errors [, int $options = PARSEKIT_QUIET]]):array
(string $phpcode [, array &$errors [, int $options = PARSEKIT_QUIET]]):array
(mixed $function):array
(string $command [, int &$return_var]):void
(string $hash):array
(string $password, int $algo [, array $options]):string
(string $hash, int $algo [, array $options]):bool
(string $password, string $hash):bool
(string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME]):mixed
(resource $handle):int
(int $seconds):int
([bool $on = NULL]):bool
(void):int
(string $path [, array $args [, array $envs]]):void
(void):int
(void):int
([int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS]]):int
(int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS]]):bool
(void):bool
(int $signo):mixed
(int $signo, callable|int $handler [, bool $restart_syscalls = TRUE]):bool
(int $how, array $set [, array &$oldset]):bool
(array $set [, array &$siginfo [, int $seconds = 0 [, int $nanoseconds = 0]]]):int
(array $set [, array &$siginfo]):int
(int $errno):string
(int &$status [, int $options = 0 [, array &$rusage]]):int
(int $pid, int &$status [, int $options = 0 [, array &$rusage]]):int
(int $status):int
(int $status):bool
(int $status):bool
(int $status):bool
(int $status):int
(int $status):int
(resource $pdfdoc, int $id):bool
(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $type, string $optlist):bool
(resource $pdfdoc, string $text, string $optlist):int
(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename):bool
(resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, int $page, string $dest):bool
(resource $pdfdoc, string $name, string $optlist):bool
(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open):bool
(resource $pdfdoc, string $text, string $optlist):int
(resource $pdfdoc, float $bottom_left_x, float $bottom_left_y, float $up_right_x, float $up_right_y, string $filename, int $page, string $dest):bool
(resource $pdfdoc, int $table, int $column, int $row, string $text, string $optlist):int
(resource $pdfdoc, int $textflow, string $text, string $optlist):int
(resource $pdfdoc, int $image):bool
(resource $pdfdoc, float $lowerleftx, float $lowerlefty, float $upperrightx, float $upperrighty, string $url):bool
(resource $p, float $x, float $y, float $r, float $alpha, float $beta):bool
(resource $p, float $x, float $y, float $r, float $alpha, float $beta):bool
(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $filename, string $description, string $author, string $mimetype, string $icon):bool
(resource $pdfdoc, string $filename, string $optlist):int
(resource $pdfdoc, string $filename, float $a, float $b, float $c, float $d, float $e, float $f, string $optlist):bool
(resource $pdfdoc, string $glyphname, float $wx, float $llx, float $lly, float $urx, float $ury):bool
(resource $pdfdoc, string $tag, string $optlist):int
(resource $pdfdoc, int $layer):bool
(resource $pdfdoc, float $width, float $height, string $optlist):bool
(resource $pdfdoc, float $width, float $height):bool
(resource $pdfdoc, float $width, float $height, float $xstep, float $ystep, int $painttype):int
(resource $pdfdoc, float $width, float $height, string $optlist):int
(resource $pdfdoc, float $width, float $height):int
(resource $pdfdoc, float $x, float $y, float $r):bool
(resource $p):bool
(resource $p, int $image):bool
(resource $p, int $page):bool
(resource $p, int $doc):bool
(resource $p):bool
(resource $p):bool
(resource $p):bool
(resource $p):bool
(resource $p, float $a, float $b, float $c, float $d, float $e, float $f):bool
(resource $p, string $text):bool
(resource $pdfdoc, string $username, string $optlist):int
(resource $pdfdoc, string $type, string $optlist):int
(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $type, string $optlist):bool
(resource $pdfdoc, string $text, string $optlist):int
(resource $pdfdoc, float $llx, float $lly, float $urx, float $ury, string $name, string $type, string $optlist):bool
(resource $pdfdoc, string $name, string $optlist):bool
(resource $pdfdoc, string $optlist):int
(resource $pdfdoc, string $filename, string $data, string $optlist):bool
(resource $pdfdoc, string $text, string $optlist):int
(resource $p, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):bool
(resource $pdfdoc, string $name, string $optlist):int
(resource $pdfdoc, string $filename):int
(resource $pdfdoc, int $table, string $optlist):bool
(resource $pdfdoc, int $textflow):bool
(resource $pdfdoc):bool
(resource $pdfdoc, string $encoding, int $slot, string $glyphname, int $uv):bool
(resource $pdfdoc, string $optlist):bool
(resource $pdfdoc):bool
(resource $pdfdoc):bool
(resource $pdfdoc, int $id):bool
(resource $pdfdoc):bool
(resource $pdfdoc, string $optlist):bool
(resource $p):bool
(resource $p):bool
(resource $p):bool
(resource $p):bool
(resource $pdfdoc, int $page, string $blockname, int $image, string $optlist):int
(resource $pdfdoc, int $page, string $blockname, int $contents, string $optlist):int
(resource $p):bool
(resource $pdfdoc, int $page, string $blockname, string $text, string $optlist):int
(resource $p):bool
(resource $p, string $fontname, string $encoding, int $embed):int
(resource $pdfdoc, int $image, float $x, float $y, string $optlist):bool
(resource $pdfdoc, int $page, float $x, float $y, string $optlist):bool
(resource $pdfdoc, int $table, float $llx, float $lly, float $urx, float $ury, string $optlist):string
(resource $pdfdoc, int $textflow, float $llx, float $lly, float $urx, float $ury, string $optlist):string
(resource $pdfdoc, string $text, float $x, float $y, string $optlist):bool
(resource $pdfdoc):string
(resource $p):string
(resource $pdfdoc):string
(resource $pdfdoc):int
namePDF Functions:PDF_get_errnum
(resource $p, string $key, float $modifier):string
(resource $p, string $key, float $modifier):float
(resource $p, string $key, float $modifier):float
(resource $p, string $key, float $modifier):float
(void):int
(void):int
(resource $p, string $key, float $modifier):string
(resource $p, string $key, int $doc, int $page, int $reserved):string
(resource $p, string $key, int $doc, int $page, int $reserved):float
(resource $p, string $key, float $modifier):float
(resource $pdfdoc, int $font, string $keyword, string $optlist):float
(resource $pdfdoc, string $boxname, int $num, string $keyword):float
(resource $pdfdoc, int $table, string $keyword):float
(resource $pdfdoc, int $textflow, string $keyword):float
(resource $pdfdoc, string $text, string $keyword, string $optlist):float
(resource $p):bool
(resource $p, float $x, float $y):bool
(resource $pdfdoc, string $filename, string $optlist):int
(resource $pdfdoc, string $fontname, string $encoding, string $optlist):int
(resource $pdfdoc, string $profilename, string $optlist):int
(resource $pdfdoc, string $imagetype, string $filename, string $optlist):int
(resource $p, string $spotname):int
(resource $p, float $x, float $y):bool
(void):resource
(resource $pdfdoc, string $filename, int $width, int $height, int $BitReverse, int $k, int $Blackls1):int
(resource $p, string $filename):bool
(resource $pdfdoc, string $imagetype, string $filename, string $optlist):int
(resource $p, string $imagetype, string $filename, string $stringparam, int $intparam):int
(resource $p, string $imagetype, string $source, string $data, int $length, int $width, int $height, int $components, int $bpc, string $params):int
(resource $pdfdoc, string $imagetype, string $filename, string $optlist):int
(resource $p, resource $image):int
(resource $p, string $filename, string $optlist):int
(resource $p, int $doc, int $pagenumber, string $optlist):int
(resource $pdfdoc, string $filename, string $optlist, int $len):int
(resource $pdfdoc, string $imagetype, string $filename, string $optlist):int
(resource $p, int $doc, string $path):float
(resource $p, int $doc, string $optlist, string $path):string
(resource $p, int $doc, string $path):string
(resource $pdfdoc, int $image, float $x, float $y, float $scale):bool
(resource $pdfdoc, int $page, float $x, float $y, float $sx, float $sy):bool
(resource $pdfdoc, int $doc, int $page, string $optlist):int
(resource $p, float $x, float $y, float $width, float $height):bool
(resource $p):bool
(resource $pdfdoc, string $optlist):bool
(resource $p, float $phi):bool
(resource $p):bool
(resource $p, float $sx, float $sy):bool
(resource $p, float $red, float $green, float $blue):bool
(resource $pdfdoc, float $black, float $white):bool
(resource $pdfdoc, string $style, float $width):bool
(resource $p, string $key, float $value):bool
(resource $pdfdoc, float $width, float $height, string $optlist):bool
(resource $pdfdoc, int $gstate):bool
(resource $p, string $key, string $value):bool
(resource $pdfdoc, string $type, string $optlist):bool
(resource $p, string $key, string $value):bool
(resource $p, float $x, float $y):bool
(resource $p, string $key, float $value):bool
(resource $p, string $fstype, string $colorspace, float $c1, float $c2, float $c3, float $c4):bool
(resource $pdfdoc, float $b, float $w):bool
(resource $pdfdoc, string $optlist):bool
(resource $pdfdoc, float $flatness):bool
(resource $pdfdoc, int $font, float $fontsize):bool
(resource $p, float $g):bool
(resource $p, float $g):bool
(resource $p, float $g):bool
(resource $p, int $linecap):bool
(resource $p, int $value):bool
(resource $p, float $width):bool
(resource $p, float $a, float $b, float $c, float $d, float $e, float $f):bool
(resource $pdfdoc, float $miter):bool
(resource $p, float $red, float $green, float $blue):bool
(resource $p, float $red, float $green, float $blue):bool
(resource $p, float $red, float $green, float $blue):bool
(resource $pdfdoc, int $shading, string $optlist):int
(resource $pdfdoc, string $shtype, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist):int
(resource $pdfdoc, int $shading):bool
(resource $p, string $text, float $left, float $top, float $width, float $height, string $mode, string $feature):int
(resource $p, string $text, float $x, float $y):bool
(resource $pdfdoc, string $text):bool
(resource $p, float $alpha, float $beta):bool
(resource $p, string $text, int $font, float $fontsize):float
(resource $p):bool
(resource $pdfdoc, string $optlist):bool
(resource $p, float $tx, float $ty):bool
(resource $pdfdoc, string $utf16string):string
(resource $pdfdoc, string $utf32string, string $ordering):string
(resource $pdfdoc, string $utf8string, string $ordering):string
(string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout")]]]]):resource
(resource $result):int
(resource $connection):bool
([resource $connection]):string
([resource $connection]):bool
(resource $connection):int
(string $connection_string [, int $connect_type]):resource
(resource $connection):bool
(resource $connection):bool
(resource $connection):int
(resource $connection):bool
(resource $connection, string $table_name, array $assoc_array [, int $options = 0]):array
(resource $connection, string $table_name, array $rows [, string $delimiter [, string $null_as]]):bool
(resource $connection, string $table_name [, string $delimiter [, string $null_as]]):array
([resource $connection]):string
(resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC]):mixed
([resource $connection]):bool
([resource $connection], string $data):string
([resource $connection], string $data):string
([resource $connection], string $data):string
([resource $connection], string $data):string
([resource $connection], string $stmtname, array $params):resource
(resource $result [, int $column = 0]):array
(resource $result [, int $result_type = PGSQL_ASSOC]):array
(resource $result [, int $row [, int $result_type = PGSQL_BOTH]]):array
(resource $result [, int $row]):array
(resource $result [, int $row [, int $result_type = PGSQL_ASSOC]]):object
(resource $result, int $row, mixed $field):string
(resource $result [, int $row]):array
(resource $result, int $row, mixed $field):int
(resource $result, int $field_number):string
(resource $result, string $field_name):int
(resource $result, int $row_number, mixed $field_name_or_number):int
(resource $result, int $field_number):int
(resource $result, int $field_number [, bool $oid_only = FALSE]):mixed
(resource $result, int $field_number):int
(resource $result, int $field_number):string
(resource $connection):mixed
(resource $result):bool
(resource $connection [, int $result_type]):array
(resource $connection):int
([resource $connection]):resource
([resource $connection]):string
(resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC]):mixed
([resource $connection]):string
(resource $connection [, int $option = PGSQL_NOTICE_LAST]):mixed
(resource $result):string
(resource $large_object):bool
([resource $connection [, mixed $object_id]]):int
([resource $connection], int $oid, string $pathname):bool
([resource $connection], string $pathname [, mixed $object_id]):int
(resource $connection, int $oid, string $mode):resource
(resource $large_object):int
(resource $large_object [, int $len = 8192]):string
(resource $large_object, int $offset [, int $whence = PGSQL_SEEK_CUR]):bool
(resource $large_object):int
(resource $large_object, int $size):bool
(resource $connection, int $oid):bool
(resource $large_object, string $data [, int $len]):int
(resource $connection, string $table_name [, bool $extended = FALSE]):array
(resource $result):int
(resource $result):int
([resource $connection]):string
([resource $connection], string $param_name):string
(string $connection_string [, int $connect_type]):resource
([resource $connection]):bool
([resource $connection]):int
([resource $connection], string $stmtname, string $query):resource
([resource $connection], string $data):bool
([resource $connection], string $query, array $params):resource
([resource $connection], string $query):resource
(resource $result, int $fieldcode):string
(resource $result):string
(resource $result, int $offset):bool
(resource $result [, int $type = PGSQL_STATUS_LONG]):mixed
(resource $connection, string $table_name, array $assoc_array [, int $options = PGSQL_DML_EXEC [, int $result_type = PGSQL_ASSOC]]):mixed
(resource $connection, string $stmtname, array $params):bool
(resource $connection, string $stmtname, string $query):bool
(resource $connection, string $query, array $params):bool
(resource $connection, string $query):bool
([resource $connection], string $encoding):int
([resource $connection], int $verbosity):int
(resource $connection):resource
(string $pathname [, string $mode = "w" [, resource $connection]]):bool
(resource $connection):int
([resource $connection]):string
(string $data):string
([resource $connection]):bool
(resource $connection, string $table_name, array $data, array $condition [, int $options = PGSQL_DML_EXEC]):mixed
([resource $connection]):array
(string $filename [, string &$error_message]):bool
(void):string
(void):string
(void):string
(void):string
(string $filename):string
([string $mode = "a"]):string
([int $flag = CREDITS_ALL]):bool
(string $file, int $line):void
(string $function):void
(string $class, string $method):void
(void):void
(void):void
(int $element, string $color):void
([array $options]):array
([string $context]):mixed
([array $options]):array
(string $string):void
(void):void
([int $what = INFO_ALL]):bool
([string $extension]):string
(void):float
(string $pngname, string $wbmpname, int $dest_height, int $dest_width, int $threshold):bool
(string $command, string $mode):resource
(array $array):mixed
(string $file [, int $mode = POSIX_F_OK]):bool
(void):string
(void):int
(void):int
(void):string
(void):int
(void):int
(void):int
(int $gid):array
(string $name):array
(void):array
(void):string
(int $pid):int
(void):int
(void):int
(void):int
(string $username):array
(int $uid):array
(void):array
(int $pid):int
(void):int
(string $name, int $base_group_id):bool
(mixed $fd):bool
(int $pid, int $sig):bool
(string $pathname, int $mode):bool
(string $pathname, int $mode [, int $major = 0 [, int $minor = 0]]):bool
(int $gid):bool
(int $uid):bool
(int $gid):bool
(int $pid, int $pgid):bool
(int $resource, int $softlimit, int $hardlimit):bool
(void):int
(int $uid):bool
(int $errno):string
(void):array
(mixed $fd):string
(void):array
(number $base, number $exp):number
(mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count]]):mixed
(string $pattern, array $input [, int $flags = 0]):array
(void):int
(string $pattern, string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0]]]):int
(string $pattern, string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0]]]):int
(string $str [, string $delimiter = NULL]):string
(array $patterns_and_callbacks, mixed $subject [, int $limit = -1 [, int &$count]]):mixed
(mixed $pattern, callable $callback, mixed $subject [, int $limit = -1 [, int &$count]]):mixed
(mixed $pattern, mixed $replacement, mixed $subject [, int $limit = -1 [, int &$count]]):mixed
(string $pattern, string $subject [, int $limit = -1 [, int $flags = 0]]):array
(array &$array):mixed
(mixed $expression [, bool $return = FALSE]):mixed
(string $arg):int
(string $format [, mixed $args [, mixed $...]]):int
(resource $process):int
(resource $process):array
(int $increment):bool
(string $cmd, array $descriptorspec, array &$pipes [, string $cwd [, array $env [, array $other_options]]]):resource
(resource $process [, int $signal = 15]):bool
(mixed $class, string $property):bool
(resource $psdoc, string $text [, int $parent = 0 [, int $open = 0]]):int
(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename):bool
(resource $psdoc, float $llx, float $lly, float $urx, float $ury, int $page, string $dest):bool
(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open):bool
(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename, int $page, string $dest):bool
(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $url):bool
(resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta):bool
(resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta):bool
(resource $psdoc, float $width, float $height):bool
(resource $psdoc, float $width, float $height, float $xstep, float $ystep, int $painttype):int
(resource $psdoc, float $width, float $height):int
(resource $psdoc, float $x, float $y, float $radius):bool
(resource $psdoc):bool
(resource $psdoc, int $imageid):void
(resource $psdoc):bool
(resource $psdoc):bool
(resource $psdoc):bool
(resource $psdoc, string $text):bool
(resource $psdoc, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):bool
(resource $psdoc):bool
(resource $psdoc):bool
(resource $psdoc):bool
(resource $psdoc):bool
(resource $psdoc):bool
(resource $psdoc):bool
(resource $psdoc, string $fontname, string $encoding [, bool $embed = FALSE]):int
(resource $psdoc):string
(resource $psdoc, string $name [, float $modifier]):string
(resource $psdoc, string $name [, float $modifier]):float
(resource $psdoc, string $text):array
(resource $psdoc, string $file):bool
(resource $psdoc, float $x, float $y):bool
(resource $psdoc, string $name [, int $reserved = 0]):int
(resource $psdoc, float $x, float $y):bool
(void):resource
(resource $psdoc [, string $filename]):bool
(resource $psdoc, string $type, string $filename [, string $stringparam [, int $intparam = 0]]):int
(resource $psdoc, string $type, string $source, string $data, int $lenght, int $width, int $height, int $components, int $bpc, string $params):int
(resource $psdoc, int $gd):int
(resource $psdoc, int $imageid, float $x, float $y, float $scale):bool
(resource $psdoc, float $x, float $y, float $width, float $height):bool
(resource $psdoc):bool
(resource $psdoc, float $rot):bool
(resource $psdoc):bool
(resource $psdoc, float $x, float $y):bool
(resource $psdoc, float $red, float $green, float $blue):bool
(resource $psdoc, float $black, float $white):bool
(resource $psdoc, string $style, float $width):bool
(resource $p, string $key, string $val):bool
(resource $psdoc, string $name, string $value):bool
(resource $psdoc, float $x, float $y):bool
(resource $psdoc, string $name, float $value):bool
(resource $psdoc, string $type, string $colorspace, float $c1, float $c2, float $c3, float $c4):bool
(resource $psdoc, float $on, float $off):bool
(resource $psdoc, float $value):bool
(resource $psdoc, int $fontid, float $size):bool
(resource $psdoc, float $gray):bool
(resource $psdoc, int $type):bool
(resource $psdoc, int $type):bool
(resource $psdoc, float $width):bool
(resource $psdoc, float $value):bool
(resource $psdoc, int $mode):bool
(resource $psdoc, float $arr):bool
(resource $psdoc, int $shadingid, string $optlist):int
(resource $psdoc, string $type, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist):int
(resource $psdoc, int $shadingid):bool
(resource $psdoc, string $text, float $left, float $bottom, float $width, float $height, string $hmode [, string $feature]):int
(resource $psdoc, string $text, float $x, float $y):bool
(resource $psdoc, string $text, int $len, float $xcoor, float $ycoor):bool
(resource $psdoc, string $text):bool
(resource $psdoc, string $text, int $len):bool
(resource $psdoc, string $text [, int $fontid = 0 [, float $size = 0.0]]):array
(resource $psdoc, string $text [, int $fontid = 0 [, float $size = 0.0]]):float
(resource $psdoc):bool
(resource $psdoc, int $ord [, int $fontid = 0]):string
(resource $psdoc, int $ord [, int $fontid = 0 [, float $size = 0.0]]):float
(resource $psdoc, int $ord):bool
(resource $psdoc, float $x, float $y):bool
(int $dictionary_link, string $word):bool
(int $dictionary_link, string $word):bool
(int $dictionary_link, string $word):bool
(int $dictionary_link):bool
(string $language [, string $spelling [, string $jargon [, string $encoding]]]):int
(int $conf, string $directory):bool
(int $conf, string $directory):bool
(int $dictionary_link, int $n):bool
(int $dictionary_link, int $mode):bool
(int $dictionary_link, string $file):bool
(int $dictionary_link, string $file):bool
(int $dictionary_link, bool $flag):bool
(int $dictionary_link, bool $flag):bool
(int $config):int
(string $personal, string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0]]]]):int
(string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0]]]]):int
(int $dictionary_link):bool
(int $dictionary_link, string $misspelled, string $correct):bool
(int $dictionary_link, string $word):array
(string $setting):bool
(resource $pxdoc):bool
(resource $pxdoc, resource $file, array $fielddesc):bool
(resource $pxdoc, int $value, string $format):string
(resource $pxdoc, int $num):bool
(resource $pxdoc):bool
(resource $pxdoc, int $fieldno):array
(resource $pxdoc):array
(resource $pxdoc, string $name):string
(resource $pxdoc, int $num [, int $mode = 0]):array
(resource $pxdoc [, int $mode = 0]):array
(resource $pxdoc, string $name):float
(resource $pxdoc, array $data):int
(void):resource
(resource $pxdoc):int
(resource $pxdoc):int
(resource $pxdoc, resource $file):bool
(resource $pxdoc, array $record [, int $recpos = -1]):bool
(resource $pxdoc, int $num [, int $mode = 0]):array
(resource $pxdoc, string $filename):bool
(resource $pxdoc, string $name, string $value):bool
(resource $pxdoc, string $name):void
(resource $pxdoc, string $encoding):bool
(resource $pxdoc, string $name, float $value):bool
(resource $pxdoc, float $value, string $format):string
(resource $pxdoc, array $data, int $num):bool
(string $str):string
(string $str):string
(string $str):string
(float $number):float
(void):resource
(resource $radius_handle, string $hostname, int $port, string $secret, int $timeout, int $max_tries):bool
(void):resource
(resource $radius_handle):bool
(resource $radius_handle, string $file):bool
(resource $radius_handle, int $type):bool
(string $data):string
(string $data):int
(string $data):string
(resource $radius_handle, string $mangled):string
(resource $radius_handle, string $mangled):string
(resource $radius_handle):mixed
(string $data):string
(string $data):int
(string $data):array
(resource $radius_handle, int $type, string $addr [, int $options = 0 [, int $tag]]):bool
(resource $radius_handle, int $type, string $value [, int $options = 0 [, int $tag]]):bool
(resource $radius_handle, int $type, int $value [, int $options = 0 [, int $tag]]):bool
(resource $radius_handle, int $type, string $value [, int $options = 0 [, int $tag]]):bool
(resource $radius_handle, int $vendor, int $type, string $addr):bool
(resource $radius_handle, int $vendor, int $type, string $value [, int $options = 0 [, int $tag]]):bool
(resource $radius_handle, int $vendor, int $type, int $value [, int $options = 0 [, int $tag]]):bool
(resource $radius_handle, int $vendor, int $type, string $value [, int $options = 0 [, int $tag]]):bool
(resource $radius_handle):string
(resource $radius_handle, string $data):string
(resource $radius_handle):int
(resource $radius_handle):string
(resource $radius_handle):string
(void):int
(int $length):string
(int $min, int $max):int
(mixed $start, mixed $end [, number $step = 1]):array
(void):string
(string $str):string
(string $str):string
(mixed $stream [, string $sections = NULL [, bool $arrays = FALSE [, bool $thumbnail = FALSE]]]):array
([resource $dir_handle]):string
(string $filename [, bool $use_include_path = FALSE [, resource $context]]):int
(string $filename [, int $use_include_path = 0]):int
(string $line):bool
(string $prompt, callable $callback):bool
(void):bool
(void):void
(void):bool
(callable $function):bool
([string $varname [, string $newvalue]]):mixed
(void):array
(void):void
([string $filename]):bool
(void):void
([string $filename]):bool
([string $prompt]):string
(string $path):string
(void):array
(void):int
(string $path):string
(string $request, resource $input, resource $output):bool
(string $request, string $string):string
_string().:This function is an alias of:
(callable $callback [, mixed $parameter [, mixed $...]]):void
(callable $function [, mixed $arg [, mixed $...]]):bool
(string $original_name, string $new_name):bool
(string $oldname, string $newname [, resource $context]):bool
(array &$array):mixed
(void):bool
(void):bool
(void):void
(resource $handle):bool
([resource $dir_handle]):void
(string $dirname [, resource $context]):bool
(float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP]]):float
(resource $rpmr):bool
(resource $rpmr, int $tagnum):mixed
(string $filename):bool
(string $filename):resource
(void):string
(string $filename, array $options):bool
(void):string
(string $filename, array $options):array
(string $file [, int $raaindex = 0]):int
(string $filename, array $options):array
(string $filename):array
(string $filename):int
(string $filename):array
(string $xml_file, string $rrd_file [, array $options]):bool
(string $filename, array $options):bool
(string $filename, array $options):bool
(void):string
(array $options):array
(void):void
(array &$array [, int $sort_flags = SORT_REGULAR]):bool
(string $str [, string $character_mask]):string
(string $classname, string $parentname):bool
(string $classname):bool
(string $constname, mixed $value):bool
(string $constname, mixed $newvalue):bool
(string $constname):bool
(string $funcname, string $arglist, string $code [, bool $return_by_reference = NULL [, string $doc_comment = NULL]]):bool
(string $funcname, string $targetname):bool
(string $funcname, string $arglist, string $code [, bool $return_by_reference = NULL [, string $doc_comment = NULL]]):bool
(string $funcname):bool
(string $funcname, string $newname):bool
(string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS]):bool
(string $filename):bool
(string $code):bool
(string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL]]):bool
(string $dClass, string $dMethod, string $sClass [, string $sMethod]):bool
(string $classname, string $methodname, string $args, string $code [, int $flags = RUNKIT_ACC_PUBLIC [, string $doc_comment = NULL]]):bool
(string $classname, string $methodname):bool
(string $classname, string $methodname, string $newname):bool
(void):bool
(object $sandbox [, mixed $callback]):mixed
(void):array
(int|string $in_codepage, int|string $out_codepage, string $subject):string
(string $kind):int
(void):bool
(int $cp):bool
(resource $stream [, bool $enable]):bool
(string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context]]):array
(void):string
(void):string
(resource $sem_identifier [, bool $nowait = FALSE]):bool
(int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1]]]):resource
(resource $sem_identifier):bool
(resource $sem_identifier):bool
(mixed $value):string
(void):bool
([string $new_cache_expire]):int
([string $cache_limiter]):string
(void):bool
([string $prefix]):string
(string $data):bool
(void):bool
(void):string
(void):int
(void):array
([string $id]):string
(string $name):bool
([string $module]):string
([string $name]):string
(int $error_level [, string $error_message]):bool
([bool $with_error_message = FALSE]):array
(void):string
(void):bool
(string $value):bool
(void):array
([bool $delete_old_session = FALSE]):bool
(void):void
(mixed $name [, mixed $...]):bool
(void):bool
([string $path]):string
(int $lifetime [, string $path [, string $domain [, bool $secure = FALSE [, bool $httponly = FALSE]]]]):bool
(callable $open, callable $close, callable $read, callable $write, callable $destroy, callable $gc [, callable $create_sid [, callable $validate_sid [, callable $update_timestamp]]]):bool
([array $options = array()]):bool
(void):int
(string $name):bool
(void):bool
(void):bool
(callable $error_handler [, int $error_types = E_ALL | E_STRICT]):mixed
(callable $exception_handler):callable
(resource $stream, int $buffer):int
(string $new_include_path):string
(bool $new_setting):bool
(resource $stream, bool $mode):bool
(int $seconds):bool
(string $name [, string $value = "" [, int $expire = 0 [, string $path = "" [, string $domain = "" [, bool $secure = FALSE [, bool $httponly = FALSE]]]]]]):bool
(int $category, string $locale [, string $...]):string
(string $title):void
(string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = FALSE [, bool $httponly = FALSE]]]]]]):bool
(string $title):bool
(mixed &$var, string $type):bool
(string $filename [, bool $raw_output = FALSE]):string
(string $str [, bool $raw_output = FALSE]):string
(string $cmd):string
(int $key [, int $memsize [, int $perm = 0666]]):resource
(resource $shm_identifier):bool
(resource $shm_identifier, int $variable_key):mixed
(resource $shm_identifier, int $variable_key):bool
(resource $shm_identifier, int $variable_key, mixed $variable):bool
(resource $shm_identifier, int $variable_key):bool
(resource $shm_identifier):bool
(resource $shmid):void
(resource $shmid):bool
(int $key, string $flags, int $mode, int $size):resource
(resource $shmid, int $start, int $count):string
(resource $shmid):int
(resource $shmid, string $data, int $offset):int
(string $filename [, bool $return = FALSE]):mixed
(array &$array):bool
(string $first, string $second [, float &$percent]):int
(DOMNode $node [, string $class_name = "SimpleXMLElement"]):SimpleXMLElement
(string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE]]]]):SimpleXMLElement
(string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = FALSE]]]]):SimpleXMLElement
(float $arg):float
(float $arg):float
(mixed $array_or_countable [, int $mode = COUNT_NORMAL]):int
(int $seconds):int
(void):bool
(void):int
(string $filename):bool
(int $enum_print):bool
(int $oid_format):void
(int $oid_format = SNMP_OID_OUTPUT_MODULE):bool
(bool $quick_print):bool
(int $method = SNMP_VALUE_LIBRARY):bool
(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
(string $host, string $community, string $object_id, string $type, string $value [, int $timeout = 1000000 [, int $retries = 5]]):bool
(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id, string $type, string $value [, int $timeout = 1000000 [, int $retries = 5]]):bool
(string $host, string $sec_name, string $sec_level, string $auth_protocol, string $auth_passphrase, string $priv_protocol, string $priv_passphrase, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
(string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):string
(string $host, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
(string $host, string $community, string $object_id, string $type, mixed $value [, int $timeout = 1000000 [, int $retries = 5]]):bool
(string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
(string $hostname, string $community, string $object_id [, int $timeout = 1000000 [, int $retries = 5]]):array
(resource $socket):resource
(resource $addr):resource
(resource $addr):resource
(resource $addr):array
(string $host [, string $service [, array $hints]]):array
(resource $socket, string $address [, int $port = 0]):bool
([resource $socket]):void
(resource $socket):void
(int $level, int $type [, int $n = 0]):int
(resource $socket, string $address [, int $port = 0]):bool
(int $port [, int $backlog = 128]):resource
(int $domain, int $type, int $protocol, array &$fd):bool
(int $domain, int $type, int $protocol):resource
(resource $socket):resource
(resource $socket, int $level, int $optname):mixed
(resource $stream):array
(resource $socket, int $level, int $optname):mixed
(resource $socket, string &$address [, int &$port]):bool
(resource $socket, string &$addr [, int &$port]):bool
(resource $stream):resource
([resource $socket]):int
(resource $socket [, int $backlog = 0]):bool
(resource $socket, int $length [, int $type = PHP_BINARY_READ]):string
(resource $socket, string &$buf, int $len, int $flags):int
(resource $socket, string &$buf, int $len, int $flags, string &$name [, int &$port]):int
(resource $socket, array &$message [, int $flags = 0]):int
(array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0]):int
(resource $socket, string $buf, int $len, int $flags):int
(resource $socket, array $message [, int $flags = 0]):int
(resource $socket, string $buf, int $len, int $flags, string $addr [, int $port = 0]):int
(resource $socket):bool
(resource $stream, bool $mode):bool
(resource $socket):bool
(resource $socket, int $level, int $optname, mixed $optval):bool
(resource $stream, int $seconds [, int $microseconds = 0]):bool
(resource $socket, int $level, int $optname, mixed $optval):bool
(resource $socket [, int $how = 2]):bool
(int $errno):string
(resource $socket, string $buffer [, int $length = 0]):int
(string &$val, string $addv):void
(string $b64, int $id [, string $ignore]):string
(string $bin, int $id):string
(string $bin):string
(string $buf1, string $buf2):int
(string $ciphertext, string $ad, string $nonce, string $key):string
(string $msg, string $ad, string $nonce, string $key):string
(void):bool
(void):string
(string $ciphertext, string $ad, string $nonce, string $key):string
(string $msg, string $ad, string $nonce, string $key):string
(string $ciphertext, string $ad, string $nonce, string $key):string
(string $msg, string $ad, string $nonce, string $key):string
(void):string
(void):string
(string $ciphertext, string $ad, string $nonce, string $key):string
(string $msg, string $ad, string $nonce, string $key):string
(void):string
(void):string
(string $signature, string $msg, string $key):bool
(string $msg, string $key):string
(string $secret_key, string $public_key):string
(void):string
(string $ciphertext, string $nonce, string $key):string
(string $key):string
(string $key):string
(string $ciphertext, string $key):string
(string $msg, string $key):string
(string $key):string
(string $key):string
(string $msg, string $nonce, string $key):string
(string &$state [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES]):string
([string $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES]]):string
(void):string
(string &$state, string $msg):bool
(string $msg [, string $key [, int $length = SODIUM_CRYPTO_GENERICHASH_BYTES]]):string
(int $subkey_len, int $subkey_id, string $context, string $key):string
(void):string
(string $client_keypair, string $server_key):array
(void):string
(string $key):string
(string $key):string
(string $string):string
(string $server_keypair, string $client_key):array
(string $hash, string $password):bool
(string $password, int $opslimit, int $memlimit):string
(int $length, string $password, string $salt, int $opslimit, int $memlimit):string
(string $password, int $opslimit, int $memlimit):bool
(string $hash, string $password):bool
(string $password, int $opslimit, int $memlimit):string
(int $length, string $password, string $salt, int $opslimit, int $memlimit [, int $alg]):string
(string $key):string
(string $n, string $p):string
(void):string
(string $ciphertext, string $nonce, string $key):string
(string $string, string $nonce, string $key):string
(string $header, string $key):string
(string $key):array
(void):string
(string &$state, string $c [, string $ad]):array
(string &$state, string $msg [, string $ad [, int $tag]]):string
(string &$state):void
(void):string
(string $msg, string $key):string
(string $msg, string $keypair):string
(string $key):string
(string $key):string
(string $secret_key, string $public_key):string
(void):string
(string $string, string $keypair):string
(string $key):string
(string $keypair):string
(string $key):string
(string $key):string
(string $signature, string $msg, string $key):bool
(string $msg, string $secret_key):string
(void):string
(string $msg, string $nonce, string $key):string
(int $length, string $nonce, string $key):string
(string $hex [, string $ignore]):string
(string &$val):void
(string $buf1, string $buf2):int
(string &$buf):void
(string $unpadded, int $length):string
(string $padded, int $length):string
(void):string
(array &$array [, int $sort_flags = SORT_REGULAR]):bool
(string $str):string
(string $class_name):void
([string $file_extensions]):string
(void):array
([callable $autoload_function [, bool $throw = TRUE [, bool $prepend = FALSE]]]):bool
(mixed $autoload_function):bool
(string $class_name [, string $file_extensions = spl_autoload_extensions()]):void
(void):array
(object $obj):string
(object $obj):int
(string $pattern, string $string [, int $limit = -1]):array
(string $pattern, string $string [, int $limit = -1]):array
(string $format [, mixed $args [, mixed $...]]):string
(string $string):string
(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
(string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):public array
(resource $dbhandle, int $milliseconds):void
(int $milliseconds):public void
(resource $dbhandle):int
(void):public int
(resource $dbhandle):void
(resource $result, mixed $index_or_name [, bool $decode_binary = TRUE]):mixed
(mixed $index_or_name [, bool $decode_binary = TRUE]):mixed
(resource $dbhandle, string $function_name, callable $step_func, callable $finalize_func [, int $num_args = -1]):void
(string $function_name, callable $step_func, callable $finalize_func [, int $num_args = -1]):public void
(resource $dbhandle, string $function_name, callable $callback [, int $num_args = -1]):void
(string $function_name, callable $callback [, int $num_args = -1]):public void
(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
([int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
(int $error_code):string
(string $item):string
(resource $dbhandle, string $query [, string &$error_msg]):bool
(resource $dbhandle, string $query [, string &$error_msg]):bool
(string $filename [, int $mode = 0666 [, string &$error_message]]):SQLiteDatabase
(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
([int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
(resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
([int $result_type = SQLITE_BOTH [, bool $decode_binary = TRUE]]):array
(string $table_name, resource $dbhandle [, int $result_type = SQLITE_ASSOC]):array
(string $table_name [, int $result_type = SQLITE_ASSOC]):public array
(resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = TRUE]]]):object
([string $class_name [, array $ctor_params [, bool $decode_binary = TRUE]]]):object
(resource $result [, bool $decode_binary = TRUE]):string
([bool $decode_binary = TRUE]):string
(resource $result [, bool $decode_binary = TRUE]):string
(resource $result, int $field_index):string
(int $field_index):string
(resource $result):bool
(resource $result):bool
(void):bool
(void):int
(void):int
(resource $dbhandle):int
(void):public int
(resource $dbhandle):int
(void):public int
(void):string
(void):string
(resource $result):bool
(void):bool
(resource $result):int
(void):int
(resource $result):int
(void):int
(string $filename [, int $mode = 0666 [, string &$error_message]]):resource
(string $filename [, int $mode = 0666 [, string &$error_message]]):resource
(resource $result):bool
(void):bool
(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]]):resource
(string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]]):public SQLiteResult
(resource $result):bool
(void):bool
(resource $result, int $rownum):bool
(int $rownum):bool
(resource $db, string $query [, bool $first_row_only [, bool $decode_binary]]):array
(string $query [, bool $first_row_only [, bool $decode_binary]]):public array
(string $data):string
(string $data):string
(resource $dbhandle, string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]]):resource
(string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg]]):public SQLiteUnbuffered
(resource $result):bool
(void):bool
(resource $conn):bool
(resource $stmt):bool
(resource $conn):array
(resource $conn):bool
(resource $conn):bool
(string $setting, mixed $value):bool
(string $serverName [, array $connectionInfo]):resource
([int $errorsOrWarnings]):mixed
(resource $stmt):bool
(resource $stmt [, int $fetchType [, int $row [, int $offset]]]):array
(resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset]]]]):mixed
(resource $stmt [, int $row [, int $offset]]):mixed
(resource $stmt):mixed
(resource $stmt):bool
(string $setting):mixed
(resource $stmt, int $fieldIndex [, int $getAsType]):mixed
(resource $stmt):bool
(resource $stmt):mixed
(resource $stmt):mixed
(resource $stmt):mixed
(resource $conn, string $sql [, array $params [, array $options]]):mixed
(resource $conn, string $sql [, array $params [, array $options]]):mixed
(resource $conn):bool
(resource $stmt):int
(resource $stmt):bool
(resource $conn):array
(float $arg):float
([int $seed]):void
(string $str, string $format [, mixed &$...]):mixed
(string $signature1, string $signature2):int
(string $file_name):string
(string $to_hash):string
(resource $session, string $username):bool
(resource $session, string $username, string $hostname, string $pubkeyfile, string $privkeyfile [, string $passphrase [, string $local_username]]):bool
(resource $session, string $username):mixed
(resource $session, string $username, string $password):bool
(resource $session, string $username, string $pubkeyfile, string $privkeyfile [, string $passphrase]):bool
(string $host [, int $port = 22 [, array $methods [, array $callbacks]]]):resource
(resource $session):bool
(resource $session, string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS]]]]]):resource
(resource $channel, int $streamid):resource
(resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX]):string
(resource $session):array
(resource $pkey, string $algoname, string $blob [, bool $overwrite = FALSE [, array $attributes]]):bool
(resource $session):resource
(resource $pkey):array
(resource $pkey, string $algoname, string $blob):bool
(resource $session, string $remote_file, string $local_file):bool
(resource $session, string $local_file, string $remote_file [, int $create_mode = 0644]):bool
(resource $sftp, string $filename, int $mode):bool
(resource $sftp, string $path):array
(resource $sftp, string $dirname [, int $mode = 0777 [, bool $recursive = FALSE]]):bool
(resource $sftp, string $link):string
(resource $sftp, string $filename):string
(resource $sftp, string $from, string $to):bool
(resource $sftp, string $dirname):bool
(resource $sftp, string $path):array
(resource $sftp, string $target, string $link):bool
(resource $sftp, string $filename):bool
(resource $session):resource
(resource $session [, string $term_type = "vanilla" [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS]]]]]):resource
(resource $session, string $host, int $port):resource
(string $filename):array
(array $a):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, int $which):float
(float $par1, float $par2, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, float $par3, float $par4, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, int $which):float
(float $par1, float $par2, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(float $par1, float $par2, float $par3, int $which):float
(array $a, array $b):float
(float $x, float $a, float $b):float
(float $x, float $ave, float $stdev):float
(float $x, float $dfr):float
(float $x, float $scale):float
(float $x, float $dfr1, float $dfr2):float
(float $x, float $shape, float $scale):float
(float $x, float $ave, float $stdev):float
(float $x, float $ave, float $stdev):float
(float $x, float $ave, float $stdev):float
(float $x, float $n, float $pi):float
(float $n1, float $n2, float $N1, float $N2):float
(float $x, float $n, float $pi):float
(float $x, float $lb):float
(float $x, float $dfr):float
(float $x, float $a, float $b):float
(float $x, float $a, float $b):float
(array $a):number
(array $a):float
(float $a, float $b):float
(float $df):float
(float $av):float
(float $dfn, float $dfd):float
(float $low, float $high):float
(float $a, float $r):float
(int $n, float $p):int
(int $n, float $pp):int
(void):int
(float $mu):int
(int $low, int $high):int
(float $df, float $xnonc):float
(float $df, float $xnonc):float
(float $dfn, float $dfd, float $xnonc):float
(float $df, float $xnonc):float
(float $av, float $sd):float
(float $df):float
(void):array
(string $phrase):array
(void):float
(int $iseed1, int $iseed2):void
(array $a):float
(array $a [, bool $sample = FALSE]):float
(int $x, int $n):float
(array $arr1, array $arr2):float
(int $n):float
(array $arr1, array $arr2):float
(array $arr1, array $arr2):float
(array $arr1, array $arr2):float
(array $arr, float $perc):float
(array $arr, float $power):float
(array $a [, bool $sample = FALSE]):float
(void):string
(void):string
(string $input [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\"]]]):array
(mixed $search, mixed $replace, mixed $subject [, int &$count]):mixed
(string $input, int $pad_length [, string $pad_string = " " [, int $pad_type = STR_PAD_RIGHT]]):string
(string $input, int $multiplier):string
(mixed $search, mixed $replace, mixed $subject [, int &$count]):mixed
(string $str):string
(string $str):string
(string $string [, int $split_length = 1]):array
(string $string [, int $format = 0 [, string $charlist]]):mixed
(string $str1, string $str2):int
(string $haystack, mixed $needle [, bool $before_needle = FALSE]):string
(string $str1, string $str2):int
(string $str1, string $str2):int
(string $subject, string $mask [, int $start [, int $length]]):int
(resource $brigade, object $bucket):void
(resource $brigade):object
(resource $stream, string $buffer):object
(resource $brigade, object $bucket):void
([array $options [, array $params]]):resource
([array $options]):resource
(resource $stream_or_context):array
(resource $stream_or_context):array
(array $options):resource
(resource $stream_or_context, string $wrapper, string $option, mixed $value):bool
(resource $stream_or_context, array $params):bool
(resource $source, resource $dest [, int $maxlength = -1 [, int $offset = 0]]):int
(resource $stream, string $filtername [, int $read_write [, mixed $params]]):resource
(resource $stream, string $filtername [, int $read_write [, mixed $params]]):resource
(string $filtername, string $classname):bool
(resource $stream_filter):bool
(resource $handle [, int $maxlength = -1 [, int $offset = -1]]):string
(void):array
(resource $handle, int $length [, string $ending]):string
(resource $stream):array
(void):array
(void):array
(mixed $stream_or_url):bool
(resource $stream):bool
(int $notification_code, int $severity, string $message, int $message_code, int $bytes_transferred, int $bytes_max):void
(string $protocol, string $classname [, int $flags = 0]):bool
(string $filename):string
(array &$read, array &$write, array &$except, int $tv_sec [, int $tv_usec = 0]):int
(resource $stream, bool $mode):bool
(resource $fp, int $chunk_size):int
(resource $stream, int $buffer):int
(resource $stream, int $seconds [, int $microseconds = 0]):bool
(resource $stream, int $buffer):int
(resource $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername]]):resource
(string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context]]]]]):resource
(resource $stream, bool $enable [, int $crypto_type [, resource $session_stream]]):mixed
(resource $handle, bool $want_peer):string
(int $domain, int $type, int $protocol):array
(resource $socket, int $length [, int $flags = 0 [, string &$address]]):string
(resource $socket, string $data [, int $flags = 0 [, string $address]]):int
(string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context]]]]):resource
(resource $stream, int $how):bool
(resource $stream):bool
(string $protocol, string $classname [, int $flags = 0]):bool
(string $protocol):bool
(string $protocol):bool
(string $format [, int $timestamp = time()]):string
(string $str [, string $allowable_tags]):string
(string $str):string
(string $haystack, mixed $needle [, int $offset = 0]):int
(string $str):string
(string $haystack, mixed $needle [, bool $before_needle = FALSE]):string
(string $string):int
(string $str1, string $str2):int
(string $str1, string $str2):int
(string $str1, string $str2, int $len):int
(string $str1, string $str2, int $len):int
(string $haystack, string $char_list):string
(string $haystack, mixed $needle [, int $offset = 0]):int
(string $date, string $format):array
(string $haystack, mixed $needle):string
(string $string):string
(string $haystack, mixed $needle [, int $offset = 0]):int
(string $haystack, mixed $needle [, int $offset = 0]):int
(string $subject, string $mask [, int $start [, int $length]]):int
(string $haystack, mixed $needle [, bool $before_needle = FALSE]):string
(string $str, string $token):string
(string $string):string
(string $time [, int $now = time()]):int
(string $string):string
(string $str, string $from, string $to):string
(mixed $var):string
(string $main_str, string $str, int $offset [, int $length [, bool $case_insensitivity = FALSE]]):int
(string $haystack, string $needle [, int $offset = 0 [, int $length]]):int
(mixed $string, mixed $replacement, mixed $start [, mixed $length]):mixed
(string $string, int $start [, int $length]):string
(string $path [, bool $recursive = TRUE [, bool $force = FALSE]]):bool
(string $key):string
(string $key, string $value):void
(string $repository_url [, int $revision_no = SVN_REVISION_HEAD]):array
(string $repos_url [, int $revision_no]):string
(string $repos, string $targetpath [, int $revision [, int $flags = 0]]):bool
(string $workingdir):bool
(void):string
(string $log, array $targets [, bool $recursive = TRUE]):array
(string $path [, bool $force = FALSE]):bool
(string $path1, int $rev1, string $path2, int $rev2):array
(string $frompath, string $topath [, bool $working_copy = TRUE [, int $revision_no = -1]]):bool
(resource $txn):bool
(resource $root, string $path):resource
(resource $repos, int $rev):resource
(resource $root, string $path, string $name, string $value):bool
(resource $fsroot, string $path):int
(resource $root1, string $path1, resource $root2, string $path2):bool
(resource $from_root, string $from_path, resource $to_root, string $to_path):bool
(resource $root, string $path):bool
(resource $fsroot, string $path):array
(resource $fsroot, string $path):resource
(resource $fsroot, string $path):int
(resource $root, string $path):bool
(resource $root, string $path):bool
(resource $root, string $path):bool
(resource $root, string $path):bool
(resource $fsroot, string $path):int
(resource $fsroot, string $path, string $propname):string
(resource $root1, string $path1, resource $root2, string $path2):bool
(resource $fs, int $revnum, string $propname):string
(resource $fs, int $revnum):resource
(resource $txn):resource
(resource $fs):int
(string $path, string $url, bool $nonrecursive):bool
(string $repos_url [, int $start_revision [, int $end_revision [, int $limit = 0 [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY]]]]):array
(string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = FALSE [, bool $peg = FALSE]]]):array
(string $path [, string $log_message]):bool
(string $path [, array $config [, array $fsconfig]]):resource
(resource $repos, int $rev, string $author, string $log_msg):resource
(resource $txn):int
(resource $repos):resource
(string $repospath, string $destpath, bool $cleanlogs):bool
(string $path):resource
(string $path):bool
(string $path [, bool $recursive = FALSE]):bool
(string $path [, int $flags = 0]):array
(string $path [, int $revno = SVN_REVISION_HEAD [, bool $recurse = TRUE]]):int
(string $hostname, callable $callback):bool
(string $filename, callable $callback [, int $chunk_size = 65536 [, int $offset = 0]]):bool
(string $filename, callable $callback):bool
(array $settings):void
(string $filename, string $content [, integer $offset [, callable $callback]]):bool
(string $filename, string $content [, callable $callback [, int $flags = 0]]):bool
(array &$read_array, array &$write_array, array &$error_array [, float $timeout = 0.5]):int
(void):int
(void):int
(int $fd [, callable $read_callback [, callable $write_callback [, int $events = 0]]]):int
(callable $callback):bool
(int $fd):bool
(void):void
(int $fd [, callable $read_callback [, callable $write_callback [, int $events = 0]]]):bool
(void):void
(int $fd, string $data):bool
(void):array
(void):int
(string $filename):mixed
(array &$read_array, array &$write_array, array &$error_array [, float $timeout]):int
(string $process_name [, int $size = 128]):void
(int $errno [, int $error_type = 0]):string
(int $ms, callable $callback [, mixed $param]):int
(int $timer_id):bool
(int $ms, callable $callback [, mixed $param]):int
(void):string
([resource $link_identifier]):int
([resource $link_identifier]):bool
([string $servername [, string $username [, string $password [, string $charset [, string $appname [, bool $new = FALSE]]]]]]):resource
(resource $result_identifier, int $row_number):bool
(int $retry_count):void
(resource $result):array
(resource $result):array
(resource $result [, int $field_offset = -1]):object
(resource $result [, mixed $object]):object
(resource $result):array
(resource $result, int $field_offset):bool
(resource $result):bool
(void):string
(int $severity):void
(int $severity):void
(int $severity):void
(int $severity):void
(resource $result):int
(resource $result):int
([string $servername [, string $username [, string $password [, string $charset [, string $appname]]]]]):resource
(string $query [, resource $link_identifier]):mixed
(resource $result, int $row, mixed $field):string
(string $database_name [, resource $link_identifier]):bool
(callable $handler [, resource $link_identifier]):bool
(string $query, resource $link_identifier [, bool $store_result]):resource
(string $target, string $link):bool
(void):string
(void):array
(int $priority, string $message):bool
(string $command [, int &$return_var]):string
(string &$string [, string $...]):bool
(float $arg):float
(float $arg):float
(string $daemon, string $address [, string $user [, bool $nodns = FALSE]]):bool
(string $dir, string $prefix):string
(string $text_domain = NULL):string
(tidy $object):int
(tidy $object):int
(tidy $object):int
(tidy $object):string
(string $filename, string $encoding):void
(void):bool
(string $filename):bool
(string $encoding):bool
(string $option, mixed $value):bool
(tidy $object):int
(int $seconds, int $nanoseconds):mixed
(float $timestamp):bool
(void):int
(string $abbr [, int $gmtOffset = -1 [, int $isdst = -1]]):string
(void):string
(void):resource
(string $source [, int $flags = 0]):array
(int $token):string
(string $filename [, int $time = time() [, int $atime]]):bool
(array $real):array
(array $high, array $low, array $close, array $volume):array
(array $real0, array $real1):array
(array $high, array $low, array $close, array $volume [, int $fastPeriod [, int $slowPeriod]]):array
(array $high, array $low, array $close [, int $timePeriod]):array
(array $high, array $low, array $close [, int $timePeriod]):array
(array $real [, int $fastPeriod [, int $slowPeriod [, int $mAType]]]):array
(array $high, array $low [, int $timePeriod]):array
(array $high, array $low [, int $timePeriod]):array
(array $real):array
(array $real):array
(array $high, array $low, array $close [, int $timePeriod]):array
(array $open, array $high, array $low, array $close):array
(array $real [, int $timePeriod [, float $nbDevUp [, float $nbDevDn [, int $mAType]]]]):array
(array $real0, array $real1 [, int $timePeriod]):array
(array $open, array $high, array $low, array $close):array
(array $high, array $low, array $close [, int $timePeriod]):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close [, float $penetration]):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close [, float $penetration]):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close [, float $penetration]):array
(array $open, array $high, array $low, array $close [, float $penetration]):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close [, float $penetration]):array
(array $open, array $high, array $low, array $close [, float $penetration]):array
(array $open, array $high, array $low, array $close [, float $penetration]):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $open, array $high, array $low, array $close):array
(array $real):array
(array $real [, int $timePeriod]):array
(array $real0, array $real1 [, int $timePeriod]):array
(array $real):array
(array $real):array
(array $real [, int $timePeriod]):array
(array $real0, array $real1):array
(array $high, array $low, array $close [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(void):int
(array $real):array
(array $real):array
(void):int
(int $functionId):int
(array $real):array
(array $real):array
(array $real):array
(array $real):array
(array $real):array
(array $real):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real):array
(array $real):array
(array $real [, int $timePeriod [, int $mAType]]):array
(array $real [, int $fastPeriod [, int $slowPeriod [, int $signalPeriod]]]):array
(array $real [, int $fastPeriod [, int $fastMAType [, int $slowPeriod [, int $slowMAType [, int $signalPeriod [, int $signalMAType]]]]]]):array
(array $real [, int $signalPeriod]):array
(array $real [, float $fastLimit [, float $slowLimit]]):array
(array $real, array $periods [, int $minPeriod [, int $maxPeriod [, int $mAType]]]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $high, array $low):array
(array $high, array $low, array $close, array $volume [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $high, array $low [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $high, array $low, array $close [, int $timePeriod]):array
(array $high, array $low [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real0, array $real1):array
(array $high, array $low, array $close [, int $timePeriod]):array
(array $real, array $volume):array
(array $high, array $low, array $close [, int $timePeriod]):array
(array $high, array $low [, int $timePeriod]):array
(array $real [, int $fastPeriod [, int $slowPeriod [, int $mAType]]]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $high, array $low [, float $acceleration [, float $maximum]]):array
(array $high, array $low [, float $startValue [, float $offsetOnReverse [, float $accelerationInitLong [, float $accelerationLong [, float $accelerationMaxLong [, float $accelerationInitShort [, float $accelerationShort [, float $accelerationMaxShort]]]]]]]]):array
(int $compatId):void
(int $functionId, int $timePeriod):void
(array $real):array
(array $real):array
(array $real [, int $timePeriod]):array
(array $real):array
(array $real [, int $timePeriod [, float $nbDev]]):array
(array $high, array $low, array $close [, int $fastK_Period [, int $slowK_Period [, int $slowK_MAType [, int $slowD_Period [, int $slowD_MAType]]]]]):array
(array $high, array $low, array $close [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType]]]):array
(array $real [, int $timePeriod [, int $fastK_Period [, int $fastD_Period [, int $fastD_MAType]]]]):array
(array $real0, array $real1):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod [, float $vFactor]]):array
(array $real):array
(array $real):array
(array $real [, int $timePeriod]):array
(array $high, array $low, array $close):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(array $high, array $low, array $close):array
(array $high, array $low, array $close [, int $timePeriod1 [, int $timePeriod2 [, int $timePeriod3]]]):array
(array $real [, int $timePeriod [, float $nbDev]]):array
(array $high, array $low, array $close):array
(array $high, array $low, array $close [, int $timePeriod]):array
(array $real [, int $timePeriod]):array
(string $traitname [, bool $autoload]):bool
(string $error_msg [, int $error_type = E_USER_NOTICE]):bool
(string $str [, string $character_mask = " \t\n\r\0\x0B"]):string
(array &$array, callable $value_compare_func):bool
(string $str):string
(string $str [, string $delimiters = " \t\r\n\f\v"]):string
(resource $agent, int $var, string $val):bool
(array $databases):resource
(string $dbaddr [, string $dbmode]):resource
(void):int
(resource $agent, string $category):array
(resource $agent, string $category):array
(resource $agent, string $charset):bool
(resource $agent):bool
(resource $agent, string $str):int
(resource $agent):int
(resource $agent):string
(resource $agent, string $query):resource
(resource $agent):int
(int $agent):bool
(resource $res):bool
(resource $agent):int
(resource $res, int $row, int $field):string
(resource $res, int $param):string
(resource $agent, string $str):int
(resource $agent, int $var, string $val1, string $val2, int $flag):bool
(resource $agent, int $var, string $val):bool
(void):array
(void):void
([int $flags]):void
(array &$array, callable $key_compare_func):bool
([int $mask]):int
([string $prefix = "" [, bool $more_entropy = FALSE]]):string
([int $timestamp = time()]):int
(string $filename [, resource $context]):bool
(string $format, string $data [, int $offset = 0]):array
(string $function_name):void
(string $str [, array $options]):mixed
(mixed $var [, mixed $...]):void
(string &$string [, string $...]):bool
(string $function, Closure $handler [, int &$flags = ZEND_ACC_PUBLIC]):bool
(bool $allow):void
(string $function):void
(string $name, array $classes [, array $methods [, array $properties [, int $flags]]]):void
(string $function):Closure
(string $function):bool
(string $function):void
(string $class, string $parent):bool
(string $function, int $flags):int
(string $function, Closure $handler [, int $modifiers]):void
(void):mixed
(string $function):Closure
(string $class):mixed
(string $class, string $property):mixed
(string $function):mixed
(string $class, string $function):array
(string $class, string $interface):bool
(int $opcode, Callable $callable):void
(string $constant, mixed $value):bool
(string $function, string $rename):void
(string $function):void
(string $function, Closure $hook):bool
(string $class, mixed $mock):void
(string $class, string $property, mixed $value):void
(string $function, mixed $value [, bool $execute = FALSE]):bool
(string $function, array $static):void
(string $constant):bool
(string $function):bool
(string $class):void
(string $function):bool
(string $str):string
(string $str):string
([bool $handler = TRUE]):bool
(string $error_msg [, int $error_type = E_USER_NOTICE]):bool
(int $micro_seconds):void
(array &$array, callable $value_compare_func):bool
(string $data):string
(string $data):string
(mixed $expression [, mixed $...]):void
(mixed $expression [, bool $return = FALSE]):mixed
(mixed $val):mixed
(mixed $left, mixed $right):mixed
(mixed $left, mixed $right):mixed
(variant $variant, int $type):variant
(mixed $left, mixed $right):mixed
(mixed $left, mixed $right [, int $lcid [, int $flags]]):int
(int $timestamp):variant
(variant $variant):int
(mixed $left, mixed $right):mixed
(mixed $left, mixed $right):mixed
(mixed $variant):mixed
(variant $variant):int
(mixed $left, mixed $right):mixed
(mixed $left, mixed $right):mixed
(mixed $variant):mixed
(mixed $left, mixed $right):mixed
(mixed $left, mixed $right):mixed
(mixed $variant):mixed
(mixed $variant):mixed
(mixed $left, mixed $right):mixed
(mixed $left, mixed $right):mixed
(mixed $variant, int $decimals):mixed
(variant $variant, int $type):void
(variant $variant, mixed $value):void
(mixed $left, mixed $right):mixed
(mixed $left, mixed $right):mixed
(string $version1, string $version2):int
(resource $handle, string $format, array $args):int
(string $filename):bool
(string $olddomain, string $newdomain):bool
(string $domain, string $aliasdomain):bool
(string $domain, string $passwd [, string $quota [, string $bounce [, bool $apop]]]):bool
(string $domain, string $dir, int $uid, int $gid):bool
(string $user, string $domain, string $password [, string $gecos [, bool $apop]]):bool
(string $user, string $domain, string $alias):bool
(string $domain):bool
(string $user, string $domain):bool
(string $domain):array
(string $alias, string $domain):array
(string $user, string $domain, string $password [, string $apop]):bool
(string $domain):bool
(string $domain):bool
(string $user, string $domain):bool
(void):string
(string $user, string $domain, string $password [, bool $apop]):bool
(string $user, string $domain, string $quota):bool
(string $format, array $args):int
(string $format, array $args):string
(resource $packet_id, mixed $var_name [, mixed $...]):bool
(string $packet):mixed
(resource $packet_id):string
([string $comment]):resource
(mixed $var [, string $comment]):string
(mixed $var_name [, mixed $...]):string
(string $servicename [, string $machine]):int
(array $details [, string $machine]):mixed
(string $servicename [, string $machine]):mixed
(void):int
(string $servicename [, string $machine]):int
(void):array
(void):array
([int $pid = 0]):array
(string $servicename [, string $machine]):mixed
(int $status [, int $checkpoint = 0]):bool
(string $name):mixed
(string $servicename [, string $machine]):int
(string $servicename [, string $machine]):int
([bool $summaryonly = FALSE]):array
(void):array
(string $key [, bool $isglobal = FALSE]):bool
([bool $summaryonly = FALSE]):array
(void):array
([array $files = NULL]):bool
([bool $summaryonly = FALSE]):array
(void):array
([bool $summaryonly = FALSE]):array
(void):array
(string $key, mixed $value [, int $ttl = 0]):bool
(string $key, int $old_value, int $new_value):bool
(void):bool
(string $key [, int $dec_by = 1 [, bool &$success]]):mixed
(mixed $key):bool
(string $key):bool
(mixed $key [, bool &$success]):mixed
(string $key [, int $inc_by = 1 [, bool &$success]]):mixed
([bool $summaryonly = FALSE [, string $key = NULL]]):array
(void):array
(mixed $key, mixed $value [, int $ttl = 0]):bool
(string $key):bool
(string $str [, int $width = 75 [, string $break = "\n" [, bool $cut = FALSE]]]):string
(string $filename, string $name [, int $flags = 0]):string
(string $filename [, int $flags = 0]):array
(string $filename, string $name [, int $flags = 0]):bool
(string $filename, string $name, string $value [, int $flags = 0]):bool
(string $filename [, int $flags = 0]):bool
(string $file):int
(string $old_file, string $new_file, string $dest):bool
(string $file, string $patch, string $dest):bool
(string $old_file, string $new_file, string $dest):bool
(string $old_file, string $new_file, string $dest [, int $context = 3 [, bool $minimal = FALSE]]):bool
(string $old_file, string $new_file1, string $new_file2, string $dest):mixed
(string $file, string $patch, string $dest):bool
(string $file, string $patch, string $dest [, int $flags = DIFF_PATCH_NORMAL]):mixed
(string $old_file, string $new_file, string $dest):bool
(string $patch):int
(string $old_data, string $new_data):string
(string $str, string $patch):string
(string $old_data, string $new_data):string
(string $old_data, string $new_data [, int $context = 3 [, bool $minimal = FALSE]]):string
(string $old_data, string $new_data1, string $new_data2 [, string &$error]):mixed
(string $str, string $patch):string
(string $str, string $patch [, int $flags [, string &$error]]):string
(string $old_data, string $new_data):string
(void):array
([int $flags = 0 [, array $options]]):void
(void):array
(void):void
(int $code):string
(resource $parser):int
(resource $parser):int
(resource $parser):int
(resource $parser):int
(resource $parser, string $data, array &$values [, array &$index]):int
(resource $parser, string $data [, bool $is_final = FALSE]):int
([string $encoding [, string $separator = ":"]]):resource
([string $encoding]):resource
(resource $parser):bool
(resource $parser, int $option):mixed
(resource $parser, int $option, mixed $value):bool
(resource $parser, callable $handler):bool
(resource $parser, callable $handler):bool
(resource $parser, callable $start_element_handler, callable $end_element_handler):bool
(resource $parser, callable $handler):bool
(resource $parser, callable $handler):bool
(resource $parser, callable $handler):bool
(resource $parser, object &$object):bool
(resource $parser, callable $handler):bool
(resource $parser, callable $handler):bool
(resource $parser, callable $handler):bool
(string $xml, string &$method [, string $encoding]):mixed
(string $xml [, string $encoding = "iso-8859-1"]):mixed
(string $method, mixed $params [, array $output_options]):string
(mixed $value):string
(mixed $value):string
(array $arg):bool
(string $xml):array
(resource $server, array $desc):int
(resource $server, string $xml, mixed $user_data [, array $output_options]):string
(void):resource
(resource $server):bool
(resource $server, string $function):bool
(resource $server, string $method_name, string $function):bool
(string &$value, string $type):bool
(void):bool
(resource $xmlwriter):bool
(void):bool
(resource $xmlwriter):bool
(void):bool
(resource $xmlwriter):bool
(void):bool
(resource $xmlwriter):bool
(void):bool
(resource $xmlwriter):bool
(void):bool
(resource $xmlwriter):bool
(void):bool
(resource $xmlwriter):bool
(void):bool
(resource $xmlwriter):bool
(void):bool
(resource $xmlwriter):bool
(void):bool
(resource $xmlwriter):bool
([bool $empty = TRUE]):mixed
(resource $xmlwriter [, bool $empty = TRUE]):mixed
(void):bool
(resource $xmlwriter):bool
(void):bool
(void):resource
(string $uri):bool
(string $uri):resource
([bool $flush = TRUE]):string
(resource $xmlwriter [, bool $flush = TRUE]):string
(string $indentString):bool
(resource $xmlwriter, string $indentString):bool
(bool $indent):bool
(resource $xmlwriter, bool $indent):bool
(string $prefix, string $name, string $uri):bool
(resource $xmlwriter, string $prefix, string $name, string $uri):bool
(string $name):bool
(resource $xmlwriter, string $name):bool
(void):bool
(resource $xmlwriter):bool
(void):bool
(resource $xmlwriter):bool
([string $version = 1.0 [, string $encoding = NULL [, string $standalone]]]):bool
(resource $xmlwriter [, string $version = 1.0 [, string $encoding = NULL [, string $standalone]]]):bool
(string $name):bool
(resource $xmlwriter, string $name):bool
(string $qualifiedName):bool
(resource $xmlwriter, string $qualifiedName):bool
(string $name, bool $isparam):bool
(resource $xmlwriter, string $name, bool $isparam):bool
(string $qualifiedName [, string $publicId [, string $systemId]]):bool
(resource $xmlwriter, string $qualifiedName [, string $publicId [, string $systemId]]):bool
(string $prefix, string $name, string $uri):bool
(resource $xmlwriter, string $prefix, string $name, string $uri):bool
(string $name):bool
(resource $xmlwriter, string $name):bool
(string $target):bool
(resource $xmlwriter, string $target):bool
(string $content):bool
(resource $xmlwriter, string $content):bool
(string $prefix, string $name, string $uri, string $content):bool
(resource $xmlwriter, string $prefix, string $name, string $uri, string $content):bool
(string $name, string $value):bool
(resource $xmlwriter, string $name, string $value):bool
(string $content):bool
(resource $xmlwriter, string $content):bool
(string $content):bool
(resource $xmlwriter, string $content):bool
(string $name, string $content):bool
(resource $xmlwriter, string $name, string $content):bool
(string $name, string $content):bool
(resource $xmlwriter, string $name, string $content):bool
(string $name, string $content, bool $pe, string $pubid, string $sysid, string $ndataid):bool
(resource $xmlwriter, string $name, string $content, bool $pe, string $pubid, string $sysid, string $ndataid):bool
(string $name [, string $publicId [, string $systemId [, string $subset]]]):bool
(resource $xmlwriter, string $name [, string $publicId [, string $systemId [, string $subset]]]):bool
(string $prefix, string $name, string $uri [, string $content]):bool
(resource $xmlwriter, string $prefix, string $name, string $uri [, string $content]):bool
(string $name [, string $content]):bool
(resource $xmlwriter, string $name [, string $content]):bool
(string $target, string $content):bool
(resource $xmlwriter, string $target, string $content):bool
(string $content):bool
(resource $xmlwriter, string $content):bool
(string $filename, mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL]]]):bool
(mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks = NULL]]]):string
(string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL]]]):mixed
(string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL]]]):mixed
(string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks = NULL]]]):mixed
(resource $id):string
(resource $id, array $config):void
(resource $id, string $query, array &$result):bool
(resource $id):bool
(string $zurl [, mixed $options]):mixed
(resource $id, string $databases):bool
(resource $id, string $elementset):bool
(resource $id):int
(resource $id):string
(resource $id):array
(resource $id, string $type, array $args):void
(resource $id, string $name):string
(resource $id [, array &$searchresult]):int
(resource $id, array $args):void
(resource $id):bool
(resource $id, int $start, int $number):void
(resource $id, int $pos, string $type):string
(resource $id [, array &$result]):array
(resource $id, string $type, string $startterm [, array $flags]):void
(resource $id, string $schema):void
(resource $id, string $type, string $query):bool
(resource $id, string $name, string $value):void
(resource $id, string $criteria):void
(resource $id, string $syntax):void
([array &$options]):mixed
(string $domain, string $map, string $callback):void
(string $domain, string $map):array
(int $errorcode):string
(void):int
(string $domain, string $map):array
(void):string
(string $domain, string $map):string
(string $domain, string $map, string $key):string
(string $domain, string $map, string $key):array
(string $domain, string $map):int
(void):string
(void):int
(void):string
(resource $zip):void
(resource $zip_entry):bool
(resource $zip_entry):int
(resource $zip_entry):string
(resource $zip_entry):int
(resource $zip_entry):string
(resource $zip, resource $zip_entry [, string $mode]):bool
(resource $zip_entry [, int $length = 1024]):string
(string $filename):resource
(resource $zip):resource
(string $data [, string $max_decoded_len]):string
(string $data, int $encoding [, int $level = -1]):string
(void):string
(int $options):public bool
([string $host = 127.0.0.1 [, int $port = 4730]]):public bool
([string $servers = 127.0.0.1:4730]):public bool
(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
(string $function_name, string $workload [, mixed &$context [, string $unique]]):public GearmanTask
(string $job_handle [, string &$context]):public GearmanTask
(void):public bool
(void):public GearmanClient
(void):public
(void):public string
(void):public string
(string $function_name, string $workload [, string $unique]):public string
(string $function_name, string $workload [, string $unique]):public string
(string $function_name, string $workload [, string $unique]):public string
(string $function_name, string $workload [, string $unique]):public string
(void):public string
(string $function_name, string $workload [, string $unique]):public string
(string $function_name, string $workload [, string $unique]):public string
(string $function_name, string $workload [, string $unique]):public string
(void):public array
(string $workload):public bool
(void):public string
(void):public int
(string $job_handle):public array
(string $job_handle):array
(string $workload):public bool
(int $options):public bool
(void):public int
(void):public bool
(callable $callback):public void
(callable $callback):public bool
(string $context):public bool
(string $callback):public bool
(string $data):public bool
(callable $callback):public bool
(callable $callback):public bool
(callable $callback):public bool
(int $options):public bool
(callable $callback):public bool
(int $timeout):public bool
(callable $callback):public bool
(callable $callback):public bool
(void):public int
(string $result):public bool
(void):public
(string $data):public bool
(string $exception):public bool
(void):public bool
(void):public string
(void):public string
(void):public int
(string $result):public bool
(string $data):public bool
(string $exception):public bool
(void):public bool
(int $numerator, int $denominator):public bool
(string $warning):public bool
(int $gearman_return_t):public bool
(int $numerator, int $denominator):public bool
(void):public string
(string $warning):public bool
(void):public string
(void):public int
(void):public
(void):public GearmanTask
(void):public string
(void):public int
(void):public string
(void):public string
(void):public bool
(void):public bool
(void):public string
(void):string
(int $data_len):public array
(void):public int
(string $data):public int
(string $data):public int
(void):public int
(void):public int
(void):public string
(void):public string
(string $function_name, callable $function [, mixed &$context [, int $timeout]]):public bool
(int $option):public bool
([string $host = 127.0.0.1 [, int $port = 4730]]):public bool
(string $servers = 127.0.0.1:4730):public bool
(void):public void
(void):public
(string $workload):public bool
(void):public string
(void):public int
(void):public int
(string $function_name [, int $timeout]):public bool
(int $option):public bool
(void):public int
(string $id):public bool
(int $option):public bool
(int $timeout):public bool
(void):public int
(string $function_name):public bool
(void):public bool
(void):public bool
(void):public bool
(string $dsn):public bool
([string $dsn]):public
(int $country):public array
(string $name [, int $country]):public int
(string $name0, string $name1 [, int $country]):public array
(string $name [, int $country]):public array
(void):public mixed
(void):public mixed
(void):public mixed
(void):public void
(void):public void
(mixed $value):public mixed
(Throwable $exception):public mixed
(void):public bool
(void):public void
(string $pattern [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO]):public
(void):public int
(Gmagick $source):public Gmagick
(int $noise_type):public Gmagick
(GmagickDraw $GmagickDraw, float $x, float $y, float $angle, string $text):public Gmagick
(float $radius, float $sigma [, int $channel]):public Gmagick
(GmagickPixel $color, int $width, int $height):public Gmagick
(float $radius, float $sigma):public Gmagick
(int $width, int $height, int $x, int $y):public Gmagick
(void):public Gmagick
(string $comment):public Gmagick
(Gmagick $source, int $COMPOSE, int $x, int $y):public Gmagick
([string $filename]):public
(int $width, int $height, int $x, int $y):public Gmagick
(int $width, int $height):public Gmagick
(void):public Gmagick
(int $displace):public Gmagick
(void):public Gmagick
(void):public Gmagick
(void):public bool
(GmagickDraw $GmagickDraw):public Gmagick
(float $radius):public Gmagick
(float $radius, float $sigma):public Gmagick
(void):public Gmagick
(void):public Gmagick
(void):public Gmagick
(void):public Gmagick
(GmagickPixel $color, int $width, int $height, int $inner_bevel, int $outer_bevel):public Gmagick
(float $gamma):public Gmagick
(void):public string
(void):public string
(void):public GmagickPixel
(void):public array
(void):public GmagickPixel
(int $channel_type):public int
(void):public int
(void):public int
(void):public int
(void):public int
(void):public int
(void):public int
(void):public array
(void):public string
(void):public string
(void):public float
(void):public array
(void):public int
(void):public array
(void):public int
(void):public int
(void):public int
(void):public int
(void):public GmagickPixel
(string $name):public string
(void):public array
(void):public int
(void):public array
(void):public int
(void):public string
(void):public int
(void):public int
(void):public array
(void):public int
(void):public string
(void):public array
(void):public string
(void):public array
(void):public array
(void):public array
(void):public mixed
(void):public mixed
(float $radius):public mixed
(string $label):public mixed
(float $blackPoint, float $gamma, float $whitePoint [, int $channel = Gmagick::CHANNEL_DEFAULT]):public mixed
(void):public mixed
(gmagick $gmagick, bool $dither):public Gmagick
(float $radius):public void
(void):public Gmagick
(float $brightness, float $saturation, float $hue):public Gmagick
(float $radius, float $sigma, float $angle):public Gmagick
(int $width, int $height, string $background [, string $format]):public Gmagick
(void):public bool
([int $channel]):public Gmagick
(float $radius):public Gmagick
(void):public bool
(string $name, string $profile):public Gmagick
(int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError):public Gmagick
(int $numColors, int $colorspace, int $treeDepth, bool $dither, bool $measureError):public Gmagick
(GmagickDraw $draw, string $text):public array
([string $pattern = "*"]):public array
([string $pattern = "*"]):public array
(float $angle [, int $channel = Gmagick::CHANNEL_DEFAULT]):public Gmagick
(int $width, int $height, int $x, int $y, bool $raise):public Gmagick
(string $filename):public Gmagick
(string $filename):public Gmagick
(string $imageContents [, string $filename]):public Gmagick
(resource $fp [, string $filename]):public Gmagick
(float $radius):public Gmagick
(void):public Gmagick
(string $name):public string
(float $xResolution, float $yResolution, int $filter, float $blur):public Gmagick
(int $width, int $height, int $filter, float $blur [, bool $fit = FALSE]):public Gmagick
(int $x, int $y):public Gmagick
(mixed $color, float $degrees):public Gmagick
(int $width, int $height [, bool $fit = FALSE]):public Gmagick
(int $channel):public Gmagick
(int $quality = 75):Gmagick
(string $filename):public Gmagick
(GmagickPixel $color):public Gmagick
(float $x, float $y):public Gmagick
(GmagickPixel $color):public Gmagick
(int $channel, int $depth):public Gmagick
(int $colorspace):public Gmagick
(int $composite):public Gmagick
(int $delay):public Gmagick
(int $depth):public Gmagick
(int $disposeType):public Gmagick
(string $filename):public Gmagick
(string $imageFormat):public Gmagick
(float $gamma):public Gmagick
(float $x, float $y):public Gmagick
(int $index):public Gmagick
(int $interlace):public Gmagick
(int $iterations):public Gmagick
(string $name, string $profile):public Gmagick
(float $x, float $y):public Gmagick
(int $rendering_intent):public Gmagick
(float $xResolution, float $yResolution):public Gmagick
(int $scene):public Gmagick
(int $imgType):public Gmagick
(int $resolution):public Gmagick
(float $x, float $y):public Gmagick
(array $factors):public Gmagick
(int $columns, int $rows):public Gmagick
(mixed $color, float $xShear, float $yShear):public Gmagick
(int $threshold):public Gmagick
(float $radius):public Gmagick
(void):public Gmagick
(float $degrees):public Gmagick
(int $width, int $height [, bool $fit = FALSE]):public Gmagick
(float $fuzz):public Gmagick
image().:This method is an alias of
(string $filename [, bool $all_frames = FALSE]):public Gmagick
(float $x, float $y, string $text):public GmagickDraw
(float $sx, float $sy, float $ex, float $ey, float $sd, float $ed):public GmagickDraw
(array $coordinate_array):public GmagickDraw
(float $ox, float $oy, float $rx, float $ry, float $start, float $end):public GmagickDraw
(void):public GmagickPixel
(void):public float
(void):public mixed
(void):public float
(void):public int
(void):public int
(void):public GmagickPixel
(void):public float
(void):public float
(void):public int
(void):public mixed
(float $sx, float $sy, float $ex, float $ey):public GmagickDraw
(float $x, float $y):public GmagickDraw
(array $coordinates):public GmagickDraw
(array $coordinate_array):public GmagickDraw
(float $x1, float $y1, float $x2, float $y2):public GmagickDraw
(float $degrees):public GmagickDraw
(float $x1, float $y1, float $x2, float $y2, float $rx, float $ry):public GmagickDraw
(float $x, float $y):public GmagickDraw
(mixed $color):public GmagickDraw
(float $fill_opacity):public GmagickDraw
(string $font):public GmagickDraw
(float $pointsize):public GmagickDraw
(int $style):public GmagickDraw
(int $weight):public GmagickDraw
(mixed $color):public GmagickDraw
(float $stroke_opacity):public GmagickDraw
(float $width):public GmagickDraw
(int $decoration):public GmagickDraw
(string $encoding):public GmagickDraw
([string $color]):public
([bool $as_array = FALSE [, bool $normalize_array = FALSE]]):public mixed
(void):public int
(int $color):public float
(string $color):public GmagickPixel
(int $color, float $value):public GmagickPixel
(resource $proxy, string $action, array $in_params, array $out_params):array
(float $width, int $dash_on, int $dash_off):bool
(int $mode):bool
(int $icon):bool
(bool $opened):bool
(void):bool
(void):bool
(float $top):bool
(float $left):bool
(float $top):bool
(float $left, float $bottom, float $right, float $top):bool
(float $left):bool
(float $left, float $top, float $zoom):bool
(void):object
(int $first_page, int $style, int $first_num [, string $prefix = ""]):bool
(void)
(string $title [, object $parent_outline [, object $encoder]]):object
(void):object
(void):object
(string $encoding):object
(string $fontname [, string $encoding]):object
(int $type):string
(void):int
(void):int
(void):int
(object $page):object
(string $filename):object
(string $filename [, bool $deferred = FALSE]):object
(string $filename, int $width, int $height, int $color_space):object
(string $fontfile, int $index [, bool $embed = FALSE]):string
(string $fontfile [, bool $embed = FALSE]):string
(string $afmfile [, string $pfmfile]):string
(void):bool
(int $bytes):string
(void):bool
(void):bool
(string $file):bool
(void):bool
(int $mode):bool
(string $encoding):bool
(int $mode [, int $key_len = 5]):bool
(int $type, string $info):bool
(int $type, int $year, int $month, int $day, int $hour, int $min, int $sec, string $ind, int $off_hour, int $off_min):bool
(object $destination):bool
(int $layout):bool
(int $mode):bool
(int $page_per_pages):bool
(string $owner_password, string $user_password):bool
(int $permission):bool
(void):bool
(void):bool
(void):bool
(void):bool
(void):bool
(void):bool
(void):bool
(void):bool
(string $text, int $index):int
(void):int
(int $character):int
(void):int
(void):int
(void):int
(void):int
(void):string
(void):string
(string $text):array
(int $character):int
(void):int
(string $text, float $width, float $font_size, float $char_space, float $word_space [, bool $word_wrap = FALSE]):int
(void):int
(void):string
(void):int
(void):array
(void):int
(int $rmin, int $rmax, int $gmin, int $gmax, int $bmin, int $bmax):bool
(object $mask_image):bool
(object $destination):bool
(bool $opened):bool
(float $x, float $y, float $ray, float $ang1, float $ang2):bool
(void):bool
(float $x, float $y, float $ray):bool
(void):bool
(float $a, float $b, float $c, float $d, float $x, float $y):bool
(void):object
(array $rectangle, object $destination):object
(array $rectangle, string $text [, object $encoder]):object
(array $rectangle, string $url):object
(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3):bool
(float $x2, float $y2, float $x3, float $y3):bool
(float $x1, float $y1, float $x3, float $y3):bool
(object $image, float $x, float $y, float $width, float $height):bool
(float $x, float $y, float $xray, float $yray):bool
(void):bool
(void):bool
(void):bool
([bool $close_path = FALSE]):bool
(void):bool
([bool $close_path = FALSE]):bool
(void):float
(void):array
(void):array
(void):object
(void):float
(void):array
(void):array
(void):array
(void):int
(void):float
(void):int
(void):float
(void):float
(void):float
(void):float
(void):int
(void):int
(void):float
(void):float
(void):array
(void):array
(void):int
(void):float
(void):array
(void):int
(void):float
(string $text):float
(void):array
(void):float
(void):float
(float $x, float $y):bool
(string $text, float $width [, bool $wordwrap = FALSE]):int
(float $x, float $y [, bool $set_leading = FALSE]):bool
(float $x, float $y):bool
(void):bool
(float $x, float $y, float $width, float $height):bool
(float $char_space):bool
(float $c, float $m, float $y, float $k):bool
(float $c, float $m, float $y, float $k):bool
(array $pattern, int $phase):bool
(float $flatness):bool
(object $font, float $size):bool
(float $value):bool
(float $value):bool
(float $height):bool
(float $scaling):bool
(int $cap):bool
(int $join):bool
(float $width):bool
(float $limit):bool
(float $r, float $g, float $b):bool
(float $r, float $g, float $b):bool
(int $angle):bool
(int $size, int $direction):bool
(int $type, float $disp_time, float $trans_time):bool
(float $text_leading):bool
(float $a, float $b, float $c, float $d, float $x, float $y):bool
(int $mode):bool
(float $rise):bool
(float $width):bool
(float $word_space):bool
(string $text):bool
(string $text [, float $word_space = 0 [, float $char_space = 0]]):bool
([bool $close_path = FALSE]):bool
(float $x, float $y, string $text):bool
(float $left, float $top, float $right, float $bottom, string $text [, int $align = HaruPage::TALIGN_LEFT]):bool
(void):private
(void):public static int
(void):public static int
(int $start):public static int
(void):public int
([int $unit]):public float
(void):public int
([int $unit]):public float
(void):public bool
(void):public void
(void):public void
(void):string
(string $language):string
(void):string
(void):array
(array $parameter):bool
(array $parameter):bool
(array $parameter):array
(void):string
(string $buffer, int $len):string
(array $parameter):HW_API_Content
(array $parameter):hw_api_content
(array $parameter):hw_api_object
(array $parameter):hw_api_object
(array $parameter):array
(array $parameter):hw_api_object
(void):int
(void):HW_API_Reason
(array $parameter):array
(array $parameter):hw_api_object
(array $parameter):hw_api_object
(array $parameter):bool
(array $parameter):array
(array $parameter):hw_api_object
(array $parameter):hw_api_object
(array $parameter):hw_api_object
(array $parameter):hw_api_object
(array $parameter):bool
(array $parameter):bool
(array $parameter):bool
(array $parameter):bool
(array $parameter):bool
(array $parameter):int
(HW_API_Attribute $attribute):bool
(string $name):bool
(array $parameter):string
(string $name):string
(array $parameter):hw_api_object
(array $parameter):hw_api_object
(array $parameter):array
(void):string
(void):HW_API_Reason
(array $parameter):bool
(array $parameter):hw_api_object
(array $parameter):hw_api_object
(array $parameter):array
(array $parameter):array
(array $parameter):bool
(array $parameter):hw_api_object
(array $parameter):array
(void):public string
(void):public string
(void):public int
(string $filename):public bool
(string $type):string
(string $filename):public void
(int $type):public void
(void):public int
(void):public string
(KTaglib_ID3v2_Frame $frame):public bool
(void):public array
(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(int $columns, int $rows [, bool $bestfit = FALSE [, bool $legacy = FALSE]]):bool
(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(int $width, int $height, int $offset):bool
(Imagick $source):bool
(int $noise_type [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(ImagickDraw $matrix):bool
(string $x_server):bool
(ImagickDraw $draw_settings, float $x, float $y, float $angle, string $text):bool
(bool $stack = FALSE):Imagick
([int $channel = Imagick::CHANNEL_DEFAULT]):public bool
(void):Imagick
(mixed $threshold):bool
([float $factor = 1.5]):public bool
(float $radius, float $sigma [, int $channel]):bool
(mixed $bordercolor, int $width, int $height):bool
(float $brightness, float $contrast [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
(float $radius, float $sigma):bool
(int $width, int $height, int $x, int $y):bool
([int $channel = Imagick::CHANNEL_DEFAULT]):public bool
(void):bool
(void):bool
(string $pathname, string $inside):public void
(string $pathname, bool $inside):bool
(void):Imagick
(Imagick $lookup_table [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(void):Imagick
(mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y):bool
(mixed $colorize, mixed $opacity [, bool $legacy = FALSE]):bool
(array $color_matrix = Imagick::CHANNEL_DEFAULT):public bool
(int $channelType):Imagick
(string $comment):bool
(Imagick $image, int $channelType, int $metricType):array
(int $method):Imagick
(Imagick $compare, int $metric):array
(Imagick $composite_object, int $composite, int $x, int $y [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
([mixed $files])
(bool $sharpen):bool
(float $black_point, float $white_point [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(array $kernel [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
([int $mode = 0]):public int
(int $width, int $height, int $x, int $y):bool
(int $width, int $height [, bool $legacy = FALSE]):bool
(void):Imagick
(int $displace):bool
(string $passphrase):bool
(void):Imagick
(string $artifact):bool
(string $name):public bool
(float $threshold):public bool
(void):bool
(void):bool
(string $servername):bool
(string $servername):bool
(int $method, array $arguments, bool $bestfit):bool
(ImagickDraw $draw):bool
(float $radius):bool
(float $radius, float $sigma):bool
(string $passphrase):bool
(void):bool
(void):bool
(int $op, float $constant [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(int $x, int $y, int $width, int $height, string $map, int $STORAGE):public array
(int $width, int $height, int $x, int $y):bool
(ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_UNDEFINED]):public bool
(void):Imagick
(void):bool
(mixed $fill, float $fuzz, mixed $target, int $x, int $y, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(void):bool
(bool $magnitude):bool
(mixed $matte_color, int $width, int $height, int $inner_bevel, int $outer_bevel):bool
(int $function, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
(string $expression [, int $channel = Imagick::CHANNEL_DEFAULT]):Imagick
(float $gamma [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(void):int
(void):int
(void):int
(void):string
(void):string
(void):string
(void):string
(void):int
(void):string
(void):Imagick
(void):int
(string $artifact):string
(string $key):public string
(void):ImagickPixel
(void):string
(void):array
(void):ImagickPixel
(int $channel):int
(Imagick $reference, int $channel, int $metric):float
(Imagick $reference, int $metric [, int $channel = Imagick::CHANNEL_DEFAULT]):float
(int $channel):array
([int $channel = Imagick::CHANNEL_DEFAULT]):public array
(int $channel):array
(int $channel):array
(void):array
(void):Imagick
(int $index):ImagickPixel
(void):int
(void):int
(void):int
(void):int
(void):int
(void):int
(void):int
(void):int
(MagickWand $reference, int $metric):float
(void):array
(void):string
(void):string
(void):float
(void):array
(void):int
(void):array
(void):int
(void):array
(void):int
(void):int
(void):int
(void):int
(void):int
(void):string
(void):bool
(void):ImagickPixel
(void):public string
(void):int
(void):array
(int $x, int $y):ImagickPixel
(string $name):string
([string $pattern = "*" [, bool $include_values = TRUE]]):array
([string $pattern = "*" [, bool $include_values = TRUE]]):array
(string $name):string
(void):array
(int $width, int $height, int $x, int $y):Imagick
(void):int
(void):array
(void):string
(void):int
(void):string
(void):int
(void):int
(void):float
(void):int
(void):int
(void):int
(void):array
(void):int
(void):int
(void):int
(void):int
(string $key):string
(void):string
(void):array
(void):ImagickPixelIterator
(int $x, int $y, int $columns, int $rows):ImagickPixelIterator
(void):float
(void):public static int
(void):array
(void):array
(string $key):public static string
(void):string
(int $type):int
(int $type):int
(void):array
(void):array
(void):int
(void):array
(Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
(void):bool
(void):bool
(string $embedText):public string
([bool $appendRawOutput = FALSE]):array
(float $radius):bool
(int $x, int $y, int $width, int $height, string $map, int $storage, array $pixels):public bool
(Imagick $complement, bool $magnitude):public bool
(string $label):bool
(float $blackPoint, float $gamma, float $whitePoint [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(float $blackPoint, float $whitePoint):bool
(int $width, int $height, float $delta_x, float $rigidity):bool
(void):public static array
(void):bool
(Imagick $map, bool $dither):bool
(float $alpha, float $fuzz, mixed $bordercolor, int $x, int $y):bool
(float $radius):bool
(int $layer_method):Imagick
(void):bool
(float $brightness, float $saturation, float $hue):bool
(ImagickDraw $draw, string $tile_geometry, string $thumbnail_geometry, int $mode, string $frame):Imagick
(int $number_frames):Imagick
(int $morphologyMethod, int $iterations, ImagickKernel $ImagickKernel [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
(void):Imagick
(float $radius, float $sigma, float $angle [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(bool $gray [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(int $cols, int $rows, mixed $background [, string $format]):bool
(int $columns, int $rows, string $pseudoString):bool
(void):bool
([int $channel = Imagick::CHANNEL_DEFAULT]):bool
(float $radius):bool
(mixed $target, mixed $fill, float $fuzz, bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(void):bool
(string $threshold_map [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(mixed $fill, float $fuzz, mixed $bordercolor, int $x, int $y [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(mixed $target, mixed $fill, float $fuzz [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(mixed $target, float $alpha, float $fuzz):bool
(string $filename):bool
(string $image):bool
(resource $filehandle [, string $fileName]):bool
(ImagickDraw $properties, float $angle):bool
(int $levels, bool $dither):bool
(int $preview):bool
(void):bool
(string $name, string $profile):bool
(int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError):bool
(int $numberColors, int $colorspace, int $treedepth, bool $dither, bool $measureError):bool
(ImagickDraw $properties, string $text [, bool $multiline]):array
([string $pattern = "*"]):array
([string $pattern = "*"]):array
(float $angle [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(int $width, int $height, int $x, int $y, bool $raise):bool
(float $low, float $high [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(string $filename):bool
(string $image [, string $filename]):bool
(resource $filehandle [, string $fileName = NULL]):bool
(array $filenames):bool
(array $matrix):bool
(float $radius):bool
(Imagick $replacement, int $DITHER):public bool
(void):bool
(string $name):string
(void):bool
(float $x_resolution, float $y_resolution, int $filter, float $blur):bool
(string $page):bool
(int $columns, int $rows, int $filter, float $blur [, bool $bestfit = FALSE [, bool $legacy = FALSE]]):bool
(int $x, int $y):bool
(mixed $background, float $degrees):bool
(float $angle [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
(float $x_rounding, float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6]]]):bool
(int $columns, int $rows):bool
(int $cols, int $rows [, bool $bestfit = FALSE [, bool $legacy = FALSE]]):bool
(int $COLORSPACE, float $cluster_threshold, float $smooth_threshold [, bool $verbose = FALSE]):public bool
(float $radius, float $sigma, float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
(int $channel):bool
(float $threshold):bool
(mixed $background):bool
(int $COLORSPACE):bool
(int $compression):bool
(int $quality):bool
(string $filename):bool
(void):bool
(string $font):bool
(string $format):bool
(int $gravity):bool
(Imagick $replace):bool
(int $mode):bool
(string $artifact, string $value):bool
(string $key, string $value):public bool
(mixed $background):bool
(float $bias):bool
(string $bias):public void
(float $x, float $y):bool
(mixed $border):bool
(int $channel, int $depth):bool
(Imagick $clip_mask):bool
(int $index, ImagickPixel $color):bool
(int $colorspace):bool
(int $compose):bool
(int $compression):bool
(int $quality):bool
(int $delay):bool
(int $depth):bool
(int $dispose):bool
(int $columns, int $rows):bool
(string $filename):bool
(string $format):bool
(float $gamma):bool
(int $gravity):bool
(float $x, float $y):bool
(int $index):bool
(int $interlace_scheme):bool
(int $method):bool
(int $iterations):bool
(bool $matte):bool
(mixed $matte):bool
(float $opacity):bool
(int $orientation):bool
(int $width, int $height, int $x, int $y):bool
(string $name, string $profile):bool
(string $name, string $value):bool
(float $x, float $y):bool
(int $rendering_intent):bool
(float $x_resolution, float $y_resolution):bool
(int $scene):bool
(int $ticks_per_second):bool
(int $image_type):bool
(int $units):bool
(int $method):bool
(float $x, float $y):bool
(int $interlace_scheme):bool
(int $index):bool
(void):bool
(string $key, string $value):bool
(int $width, int $height, int $x, int $y):bool
(float $point_size):bool
(callable $callback):public bool
(string $key, string $value):public static bool
(float $x_resolution, float $y_resolution):bool
(int $type, int $limit):bool
(array $factors):bool
(int $columns, int $rows):bool
(int $columns, int $rows, int $offset):bool
(int $image_type):bool
(bool $gray, float $azimuth, float $elevation):bool
(float $opacity, float $sigma, int $x, int $y):bool
(float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(int $columns, int $rows):bool
(mixed $background, float $x_shear, float $y_shear):bool
(bool $sharpen, float $alpha, float $beta [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(float $radius, float $sigma, float $angle):bool
(bool $stack, int $offset):public Imagick
(int $threshold):bool
(int $SPARSE_METHOD, array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
(int $width, int $height, int $x, int $y):bool
(float $radius):bool
(int $type, int $width, int $height [, int $channel = Imagick::CHANNEL_DEFAULT]):public bool
(Imagick $watermark_wand, int $offset):Imagick
(Imagick $offset_wand):bool
(void):bool
(Imagick $Imagick [, array &$offset [, float &$similarity]]):public Imagick
(float $degrees):bool
(Imagick $texture_wand):Imagick
(float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(int $columns, int $rows [, bool $bestfit = FALSE [, bool $fill = FALSE [, bool $legacy = FALSE]]]):bool
(mixed $tint, mixed $opacity [, bool $legacy = FALSE]):bool
(void):string
(string $crop, string $geometry):Imagick
(int $colorspace):bool
(mixed $target, float $alpha, float $fuzz, bool $invert):bool
(void):bool
(void):bool
(float $fuzz):bool
(void):bool
(float $radius, float $sigma, float $amount, float $threshold [, int $channel = Imagick::CHANNEL_DEFAULT]):bool
(void):bool
(float $blackPoint, float $whitePoint, int $x, int $y):bool
(float $amplitude, float $length):bool
(mixed $threshold):bool
([string $filename = NULL]):bool
(resource $filehandle [, string $format]):bool
(string $filename, bool $adjoin):bool
(resource $filehandle [, string $format]):bool
(array $affine):bool
(float $x, float $y, string $text):bool
(float $sx, float $sy, float $ex, float $ey, float $sd, float $ed):bool
(array $coordinates):bool
(float $ox, float $oy, float $px, float $py):bool
(void):bool
(void):ImagickDraw
(float $x, float $y, int $paintMethod):bool
(string $comment):bool
(int $compose, float $x, float $y, float $width, float $height, Imagick $compositeWand):bool
(void)
(void):bool
(float $ox, float $oy, float $rx, float $ry, float $start, float $end):bool
(void):string
(void):int
(void):int
(void):ImagickPixel
(void):float
(void):int
(void):string
(void):string
(void):float
(void):public int
(void):int
(void):int
(void):int
(void):bool
(void):ImagickPixel
(void):array
(void):float
(void):int
(void):int
(void):int
(void):float
(void):float
(void):int
(void):bool
(void):int
(void):string
(void):public float
(void):public float
(void):public float
(void):ImagickPixel
(void):string
(float $sx, float $sy, float $ex, float $ey):bool
(float $x, float $y, int $paintMethod):bool
(void):bool
(float $x1, float $y1, float $x2, float $y2, float $x, float $y):bool
(float $x1, float $y1, float $x, float $y):bool
(float $x1, float $y1, float $x, float $y):bool
(float $x, float $y):bool
(float $x, float $y):bool
(float $x1, float $y1, float $x2, float $y2, float $x, float $y):bool
(float $x2, float $y2, float $x, float $y):bool
(float $x2, float $y2, float $x, float $y):bool
(float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y):bool
(float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag, float $x, float $y):bool
(void):bool
(float $x, float $y):bool
(float $x):bool
(float $x):bool
(float $x, float $y):bool
(float $y):bool
(float $y):bool
(float $x, float $y):bool
(float $x, float $y):bool
(void):bool
(float $x, float $y):bool
(array $coordinates):bool
(array $coordinates):bool
(void):bool
(void):bool
(void):bool
(void):bool
(void):bool
(string $clip_mask_id):bool
(void):bool
(string $pattern_id, float $x, float $y, float $width, float $height):bool
(float $x1, float $y1, float $x2, float $y2):bool
(void):bool
(void):public bool
(float $degrees):bool
(float $x1, float $y1, float $x2, float $y2, float $rx, float $ry):bool
(float $x, float $y):bool
(string $clip_mask):bool
(int $fill_rule):bool
(int $clip_units):bool
(float $opacity):bool
(ImagickPixel $fill_pixel):bool
(float $fillOpacity):bool
(string $fill_url):bool
(int $fill_rule):bool
(string $font_name):bool
(string $font_family):bool
(float $pointsize):bool
(int $fontStretch):bool
(int $style):bool
(int $font_weight):bool
(int $gravity):bool
(float $x_resolution, float $y_resolution):public bool
(float $opacity):bool
(bool $stroke_antialias):bool
(ImagickPixel $stroke_pixel):bool
(array $dashArray):bool
(float $dash_offset):bool
(int $linecap):bool
(int $linejoin):bool
(int $miterlimit):bool
(float $stroke_opacity):bool
(string $stroke_url):bool
(float $stroke_width):bool
(int $alignment):bool
(bool $antiAlias):bool
(int $decoration):bool
(string $encoding):bool
(float $spacing):public bool
(float $spacing):public bool
(float $kerning):public bool
(ImagickPixel $under_color):bool
(string $xml):bool
(int $x1, int $y1, int $x2, int $y2):bool
(float $degrees):bool
(float $degrees):bool
(float $x, float $y):bool
(ImagickKernel $ImagickKernel):public void
(float $scale):public void
(\Imagick::KERNEL_DIAMOND, "2");:Create a kernel from a builtin in kernel. See http://www.imagemagick.org/Usage/morphology/#kernel for examples. Currently the 'rotation' symbols are not supported. Example: $diamondKernel =
(array $matrix [, array $origin]):public static ImagickKernel
(void):public array
(float $scale [, int $normalizeFlag]):public void
(void):public array
(void):bool
([string $color])
(void):bool
([int $normalized = 0]):array
(void):string
(void):int
(void):public array
(int $color):float
(int $color):public number
(void):array
(void):public int
(ImagickPixel $color, float $fuzz):public bool
(string $color [, string $fuzz]):public bool
(ImagickPixel $color, float $fuzz):public bool
(string $color):public bool
(int $colorCount):public bool
(int $color, float $value):bool
(int $color, number $value):public bool
(float $hue, float $saturation, float $luminosity):bool
(int $index):public bool
(void):bool
(Imagick $wand)
(void):bool
(void):array
(void):int
(void):array
(void):array
(Imagick $wand):bool
(Imagick $wand, int $x, int $y, int $columns, int $rows):bool
(void):bool
(void):bool
(void):bool
(int $row):bool
(void):bool
(Iterator $iterator):public
(void):public void
(int $offset)
(string $name [, int $initial_value [, int $flags]])
(int $attribute):mixed
(string $name):static Counter
(void):int
(void):void
(string $name):static void
(resource $counter, int $offset):void
(int $offset):void
(string $name [, int $initial_value [, int $flags]]):resource
(resource $counter, int $attribute):mixed
() returns an existing counter by name if that name exists, or NULL otherwise.
(resource $counter):int
(void):int
(resource $counter):void
(void):void
(void):private
([string $locale]):public static IntlBreakIterator
(void):public static IntlBreakIterator
([string $locale]):public static IntlBreakIterator
([string $locale]):public static IntlBreakIterator
([string $locale]):public static IntlBreakIterator
([string $locale]):public static IntlBreakIterator
(void):public int
(void):public int
(int $offset):public int
(void):public int
(void):public string
(string $locale_type):public string
([int $key_type = IntlPartsIterator::KEY_SEQUENTIAL]):public IntlPartsIterator
(void):public string
(int $offset):public bool
(void):public int
([int $offset]):public int
(int $offset):public int
(void):public int
(string $text):public bool
(int $field, int $amount):public bool
(IntlCalendar $other):public bool
(IntlCalendar $other):public bool
([int $field = NULL]):public bool
(void):private
([mixed $timeZone = NULL [, string $locale = ""]]):public static IntlCalendar
(IntlCalendar $other):public bool
(float $when, int $field):public int
(mixed $dateTime):public static IntlCalendar
(int $field):public int
(int $field):public int
(int $field):public int
(void):public static array
(int $dayOfWeek):public int
(void):public int
(IntlCalendar $calendar):int
(void):public string
(IntlCalendar $calendar):string
(void):public int
(int $field):public int
(string $key, string $locale, bool $commonlyUsed):public static Iterator
(int $field):public int
(int $localeType):public string
(int $field):public int
(void):public int
(int $field):public int
(void):public static float
(void):public int
(void):public int
(void):public float
(void):public IntlTimeZone
(void):public string
(string $dayOfWeek):public int
(void):public bool
(IntlCalendar $other):public bool
(void):public bool
(int $field):public bool
([float $date = NULL]):public bool
(int $field, mixed $amountOrUpOrDown):public bool
(int $field, int $value):public bool
(int $dayOfWeek):public bool
(bool $isLenient):public bool
(int $minimalDays):public bool
(int $wallTimeOption):public bool
(int $wallTimeOption):public bool
(float $date):public bool
(mixed $timeZone):public bool
(void):public DateTime
(mixed $codepoint):public static array
(mixed $codepoint):public static int
(mixed $codepoint):public static int
(string $characterName [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME]):public static int
(mixed $codepoint):public static mixed
(mixed $codepoint [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME]):public static string
(mixed $codepoint):public static int
(mixed $codepoint):public static string
(string $codepoint [, int $radix = 10]):public static int
(mixed $start, mixed $limit, callable $callback [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME]):public static void
(callable $callback):public static void
(mixed $codepoint [, int $options = IntlChar::FOLD_CASE_DEFAULT]):public static mixed
(int $digit [, int $radix = 10]):public static int
(mixed $codepoint):public static mixed
(mixed $codepoint):public static int
(mixed $codepoint):public static int
(mixed $codepoint):public static string
(int $property):public static int
(int $property):public static int
(mixed $codepoint, int $property):public static int
(mixed $codepoint):public static float
(string $alias):public static int
(int $property [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME]):public static string
(int $property, string $name):public static int
(int $property, int $value [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME]):public static string
(void):public static array
(mixed $codepoint, int $property):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $codepoint):public static bool
(mixed $character):public static int
(mixed $codepoint):public static mixed
(mixed $codepoint):public static mixed
(mixed $codepoint):public static mixed
(void):public int
(string $locale, int $datetype, int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = ""]]]):public static IntlDateFormatter
(string $locale, int $datetype, int $timetype [, mixed $timezone = NULL [, mixed $calendar = NULL [, string $pattern = ""]]]):IntlDateFormatter
(mixed $value):public string
(IntlDateFormatter $fmt, mixed $value):string
(object $object [, mixed $format = NULL [, string $locale = NULL]]):public static string
(object $object [, mixed $format = NULL [, string $locale = NULL]]):public static string
(void):int
(IntlDateFormatter $fmt):int
(void):public IntlCalendar
(void):IntlCalendar
(void):public int
(IntlDateFormatter $fmt):int
(void):public int
(IntlDateFormatter $fmt):int
(void):public string
(IntlDateFormatter $fmt):string
([int $which]):public string
(IntlDateFormatter $fmt [, int $which]):string
(void):public string
(IntlDateFormatter $fmt):string
(void):public int
(IntlDateFormatter $fmt):int
(void):public IntlTimeZone
(void):IntlTimeZone
(void):public string
(IntlDateFormatter $fmt):string
(void):public bool
(IntlDateFormatter $fmt):bool
(string $value [, int &$position]):public array
(IntlDateFormatter $fmt, string $value [, int &$position]):array
(string $value [, int &$position]):public int
(IntlDateFormatter $fmt, string $value [, int &$position]):int
(mixed $which):bool
(IntlDateFormatter $fmt, mixed $which):bool
(bool $lenient):public bool
(IntlDateFormatter $fmt, bool $lenient):bool
(string $pattern):public bool
(IntlDateFormatter $fmt, string $pattern):bool
(mixed $zone):public bool
(IntlDateFormatter $fmt, mixed $zone):bool
(string $zone):public bool
(IntlDateFormatter $fmt, string $zone):bool
([IntlTimeZone $tz [, string $locale]]):public
(void):public float
(int $year):public bool
(float $date):public bool
(void):public mixed
(void):public string
(void):public void
(void):public void
(void):public bool
(void):public IntlBreakIterator
(string $rules [, string $areCompiled]):public
(void):public string
(void):public string
(void):public int
(void):public array
(string $zoneId):public static int
(void):public static IntlTimeZone
([mixed $countryOrRawOffset]):public static IntlIterator
(string $zoneId):public static IntlTimeZone
(int $zoneType [, string $region [, int $rawOffset]]):public static IntlIterator
(DateTimeZone $zoneId):public static IntlTimeZone
(string $zoneId [, bool &$isSystemID]):public static string
([bool $isDaylight [, int $style [, string $locale]]]):public string
(void):public int
(string $zoneId, int $index):public static string
(void):public int
(void):int
(void):public string
(void):string
(void):public static IntlTimeZone
(void):public string
(string $timezone [, string $region]):public static string
(float $date, bool $local, int &$rawOffset, int &$dstOffset):public int
(void):public int
(string $zoneId):public static string
(void):public static string
(void):public static IntlTimeZone
(string $timezone):public static string
(IntlTimeZone $otherTimeZone):public bool
(void):public DateTimeZone
(void):public bool
(void):abstract public mixed
(void):abstract public scalar
(void):abstract public void
(void):abstract public void
(void):abstract public bool
(void):abstract public Traversable
(Traversable $iterator):public
(void):public mixed
(void):public Traversable
(void):public scalar
(void):public void
(void):public void
(void):public bool
(void):abstract public mixed
(int $nth_index):public int
(int $judy_type):public
([int $index_start = 0 [, int $index_end = -1]]):public int
(void):public void
([mixed $index]):public mixed
([mixed $index = 0]):public int
(void):public int
(void):public int
([string $index]):public void
([int $index = -1]):public int
(void):public int
(mixed $index):public mixed
(int $index):public int
(mixed $offset):public bool
(mixed $offset):public mixed
(mixed $offset, mixed $value):public bool
(mixed $offset):public bool
(mixed $index):public mixed
(mixed $index):public int
(void):public void
were introduced to PHP.:4.1.0
(array $a [, array $left [, array $right]]):public static array
(int $n):public static array
(array $a, array $b):public static array
(array $a, array $b):public static array
(array $a):public static array
(array $a):public static array
(array $a, array $b):public static array
(Iterator $iterator [, int $offset = 0 [, int $count = -1]]):public
(void):public mixed
(void):public Iterator
(void):public int
(void):public mixed
(void):public void
(void):public void
(int $position):public int
(void):public bool
(string $header):public static string
(string $header):string
(string $locale):public static string
(string $locale):string
(array $subtags):public static string
(array $subtags):string
(string $langtag, string $locale [, bool $canonicalize = FALSE]):public static bool
(string $langtag, string $locale [, bool $canonicalize = FALSE]):bool
(string $locale):public static array
(string $locale):array
(void):public static string
(void):string
(string $locale [, string $in_locale]):public static string
(string $locale [, string $in_locale]):string
(string $locale [, string $in_locale]):public static string
(string $locale [, string $in_locale]):string
(string $locale [, string $in_locale]):public static string
(string $locale [, string $in_locale]):string
(string $locale [, string $in_locale]):public static string
(string $locale [, string $in_locale]):string
(string $locale [, string $in_locale]):public static string
(string $locale [, string $in_locale]):string
(string $locale):public static array
(string $locale):array
(string $locale):public static string
(string $locale):string
(string $locale):public static string
(string $locale):string
(string $locale):public static string
(string $locale):string
(array $langtag, string $locale [, bool $canonicalize = FALSE [, string $default]]):public static string
(array $langtag, string $locale [, bool $canonicalize = FALSE [, string $default]]):string
(string $locale):public static array
(string $locale):array
(string $locale):public static bool
(string $locale):bool
(string $name, string $value):public mixed
(callable $lua_func [, array $args [, int $use_self = 0]]):public mixed
(callable $lua_func [, array $args [, int $use_self = 0]]):public mixed
(string $lua_script_file = NULL):public
(string $statements):public mixed
(void):public string
(string $file):public mixed
(string $name, callable $function):public mixed
(mixed $arg [, mixed $...]):public void
(string $key, mixed $var [, int $flag [, int $expire]]):bool
(string $host [, int $port = 11211 [, bool $persistent [, int $weight [, int $timeout [, int $retry_interval [, bool $status [, callable $failure_callback [, int $timeoutms]]]]]]]]):bool
(void):bool
(string $host [, int $port [, int $timeout]]):bool
(string $key [, int $value = 1]):int
(string $key [, int $timeout = 0]):bool
(void):bool
(string $key [, int &$flags]):string
([string $type [, int $slabid [, int $limit = 100]]]):array
(string $host [, int $port = 11211]):int
([string $type [, int $slabid [, int $limit = 100]]]):array
(void):string
(string $key [, int $value = 1]):int
(string $host [, int $port [, int $timeout]]):mixed
(string $key, mixed $var [, int $flag [, int $expire]]):bool
(string $key, mixed $var [, int $flag [, int $expire]]):bool
(int $threshold [, float $min_savings]):bool
(string $host [, int $port = 11211 [, int $timeout [, int $retry_interval = FALSE [, bool $status [, callable $failure_callback]]]]]):bool
(string $key, mixed $value [, int $expiration]):public bool
(string $server_key, string $key, mixed $value [, int $expiration]):public bool
(string $host, int $port [, int $weight = 0]):public bool
(array $servers):public bool
(string $key, string $value):public bool
(string $server_key, string $key, string $value):public bool
(float $cas_token, string $key, mixed $value [, int $expiration]):public bool
(float $cas_token, string $server_key, string $key, mixed $value [, int $expiration]):public bool
([string $persistent_id]):public
(string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]]):public int
(string $server_key, string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]]):public int
(string $key [, int $time = 0]):public bool
(string $server_key, string $key [, int $time = 0]):public bool
(array $keys [, int $time = 0]):public array
(string $server_key, array $keys [, int $time = 0]):public bool
(void):public array
(void):public array
([int $delay = 0]):public bool
(string $key [, callable $cache_cb [, int $$flags]]):public mixed
(void):public array
(string $server_key, string $key [, callable $cache_cb [, int $flags]]):public mixed
(array $keys [, bool $with_cas [, callable $value_cb]]):public bool
(string $server_key, array $keys [, bool $with_cas [, callable $value_cb]]):public bool
(array $keys [, int $flags]):public mixed
(string $server_key, array $keys [, int $flags]):public array
(int $option):public mixed
(void):public int
(void):public string
(string $server_key):public array
(void):public array
(void):public array
(void):public array
(string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]]):public int
(string $server_key, string $key [, int $offset = 1 [, int $initial_value = 0 [, int $expiry = 0]]]):public int
(void):public bool
(void):public bool
(string $key, string $value):public bool
(string $server_key, string $key, string $value):public bool
(void):public bool
(string $key, mixed $value [, int $expiration]):public bool
(string $server_key, string $key, mixed $value [, int $expiration]):public bool
(void):public bool
(string $key, mixed $value [, int $expiration]):public bool
(string $server_key, string $key, mixed $value [, int $expiration]):public bool
(array $items [, int $expiration]):public bool
(string $server_key, array $items [, int $expiration]):public bool
(int $option, mixed $value):public bool
(array $options):public bool
(string $username, string $password):public void
(string $key, int $expiration):public bool
(string $server_key, string $key, int $expiration):public bool
(string $locale, string $pattern):public static MessageFormatter
(string $locale, string $pattern):public
(array $args):public string
(MessageFormatter $fmt, array $args):string
(string $locale, string $pattern, array $args):public static string
(string $locale, string $pattern, array $args):string
(void):public int
(MessageFormatter $fmt):int
(void):public string
(MessageFormatter $fmt):string
(void):public string
(NumberFormatter $formatter):string
(void):public string
(MessageFormatter $fmt):string
(string $value):public array
(MessageFormatter $fmt, string $value):array
(string $locale, string $pattern, string $source):public static array
(string $locale, string $pattern, string $value):array
(string $pattern):public bool
(MessageFormatter $fmt, string $pattern):bool
(void):protected bool
([string $server [, array $options]]):public
(void):public static int
(void):public string
(void):public bool
(void):public array
(int $size):public static bool
([bool $ok = TRUE]):public bool
(void):public string
(string $data [, int $type = 0]):public
(void):public string
([boolean|string $connection]):public bool
(void):public bool
([string $server = "mongodb://localhost:27017" [, array $options = array("connect" => TRUE) [, array $driver_options]]]):public
(mixed $db):public array
(string $dbname):public MongoDB
(void):public static array
(void):public array
(void):public array
(void):public array
(string $server_hash, int|MongoInt64 $id):public bool
(void):public array
(string $db, string $collection):public MongoCollection
(string $name):public MongoDB
(string $read_preference [, array $tags]):public bool
(mixed $w [, int $wtimeout]):public bool
(void):public string
(string $code [, array $scope = array()]):public
(void):public string
(void):public string
(array $pipeline [, array $options]):public array
(array $command [, array $options]):public MongoCommandCursor
(array $a [, array $options = array()]):public mixed
(MongoDB $db, string $name):public
([array $query = array() [, array $options = array()]]):public int
(mixed $document_or_id):public array
(array $keys [, array $options = array()]):public bool
(string|array $keys):public array
(void):public array
(string $key [, array $query]):public array
(void):public array
(string|array $key|keys [, array $options = array()]):public bool
([array $query = array() [, array $fields = array()]]):public MongoCursor
(array $query [, array $update [, array $fields [, array $options]]]):public array
([array $query = array() [, array $fields = array() [, array $options = array()]]]):public array
(string $name):public MongoCollection
(array $ref):public array
(void):public array
(void):public string
(void):public array
(void):public bool
(void):public array
(mixed $keys, array $initial, MongoCode $reduce [, array $options = array()]):public array
(array|object $document [, array $options = array()]):public bool|array
(int $num_cursors):public array[MongoCommandCursor]
([array $criteria = array() [, array $options = array()]]):public bool|array
(array|object $document [, array $options = array()]):public mixed
(string $read_preference [, array $tags]):public bool
([bool $ok = TRUE]):public bool
(mixed $w [, int $wtimeout]):public bool
(mixed $keys):static protected string
(array $criteria, array $new_object [, array $options = array()]):public bool|array
([bool $scan_data = FALSE]):public array
(int $batchSize):public MongoCommandCursor
(MongoClient $connection, string $ns, array $command = array()):public
(MongoClient $connection, string $hash, array $document):public static MongoCommandCursor
(void):public array
(void):public bool
(void):public array
(void):public array
(void):public int
(void):public void
(void):public array
(string $read_preference [, array $tags]):public MongoCommandCursor
(int $ms):public MongoCommandCursor
(void):public bool
(string $key, mixed $value):public MongoCursor
([bool $wait = TRUE]):public MongoCursor
(int $batchSize):public MongoCursor
(MongoClient $connection, string $ns [, array $query = array() [, array $fields = array()]]):public
([bool $foundOnly = FALSE]):public int
(void):public array
(void):public bool
(void):protected void
(void):public array
(array $f):public MongoCursor
(void):public array
(void):public array
(void):public bool
(mixed $index):public MongoCursor
([bool $liveForever = TRUE]):public MongoCursor
(void):public array
(void):public string|int
(int $num):public MongoCursor
(int $ms):public MongoCursor
(void):public array
([bool $okay = TRUE]):public MongoCursor
(void):public void
(void):public void
(int $flag [, bool $set = TRUE]):public MongoCursor
(string $read_preference [, array $tags]):public MongoCursor
(int $num):public MongoCursor
([bool $okay = TRUE]):public MongoCursor
(void):public MongoCursor
(array $fields):public MongoCursor
([bool $tail = TRUE]):public MongoCursor
(int $ms):public MongoCursor
(void):public bool
(void):public string
(int $batchSize):abstract public MongoCursorInterface
(void):abstract public bool
(void):abstract public array
(void):abstract public array
(string $read_preference [, array $tags]):abstract public MongoCursorInterface
(int $ms):abstract public MongoCursorInterface
([int $sec = time() [, int $usec = 0]]):public
(void):public DateTime
(void):public string
(string $data, int $type):final public
(void):final public string
(void):final public int
(void):final public mixed
(void):final public string
(void):final public string
(string $serialized):final public void
(void):abstract public string
(void):abstract public int
(void):abstract public string
(void):final private
(void):final public mixed
(void):final public string
(void):final public string
(string $serialized):final public void
([string $value]):final public
(void):final public mixed
(void):final public string
(void):final public string
(string $serialized):final public void
(void):abstract public string
(void):final private
(void):final public mixed
(void):final public string
(void):final public string
(string $serialized):final public void
(string $code [, array|object $scope]):final public
(void):final public string
(void):final public object|null
(void):final public mixed
(void):final public string
(void):final public string
(string $serialized):final public void
(void):abstract public string
(void):abstract public object|null
(void):abstract public string
(void):final public
(void):final public mixed
(void):final public string
(string $serialized):final public void
(void):final public
(void):final public mixed
(void):final public string
(string $serialized):final public void
([string $id]):final public
(void):final public int
(void):final public mixed
(void):final public string
(void):final public string
(string $serialized):final public void
(void):abstract public int
(void):abstract public string
(string $pattern [, string $flags = ""]):final public
(void):final public string
(void):final public string
(void):final public mixed
(void):final public string
(void):final public string
(string $serialized):final public void
(void):abstract public string
(void):abstract public string
(void):abstract public string
(void):abstract public array|object
(void):final private
(void):final public mixed
(void):final public string
(void):final public string
(string $serialized):final public void
(int $increment, int $timestamp):final public
(void):final public int
(void):final public int
(void):final public mixed
(void):final public string
(void):final public string
(string $serialized):final public void
(void):abstract public int
(void):abstract public int
(void):abstract public string
(void):final private
(void):final public mixed
(void):final public string
(void):final public string
(string $serialized):final public void
(array $data):abstract public void
([integer|float|string|DateTimeInterface $milliseconds = NULL]):final public
(void):final public mixed
(void):final public string
(void):final public DateTime
(void):final public string
(string $serialized):final public void
(void):abstract public DateTime
(void):abstract public string
([array $options]):public
(void):public int
(array|object $filter [, array $deleteOptions]):public void
(array|object $document):public mixed
(array|object $filter, array|object $newObj [, array $updateOptions]):public void
(array|object $document [, array $commandOptions]):final public
(void):final public object
(void):final private
(void):final public MongoDB\Driver\CursorId
(void):final public MongoDB\Driver\Server
(void):final public bool
(array $typemap):final public void
(void):final public array
(void):final private
(void):final public string
([string $uri = "mongodb://127.0.0.1/" [, array $uriOptions = array() [, array $driverOptions = array()]]]):final public
(string $namespace, MongoDB\Driver\BulkWrite $bulk [, array $options = array()]):final public MongoDB\Driver\WriteResult
(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
(string $namespace, MongoDB\Driver\Query $query [, array $options = array()]):final public MongoDB\Driver\Cursor
(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
(void):final public MongoDB\Driver\ReadConcern
(void):final public MongoDB\Driver\ReadPreference
(void):final public array
(void):final public MongoDB\Driver\WriteConcern
(MongoDB\Driver\ReadPreference $readPreference):final public MongoDB\Driver\Server
([array $options]):final public MongoDB\Driver\Session
(void):final public string
(void):final public int
(void):final public Exception
(void):final public string
(void):final public object
(void):final public string
(void):final public MongoDB\Driver\Server
(void):final public object
(void):final public string
(void):final public string
(void):final public string
(void):final public string
(void):final public MongoDB\Driver\Server
(MongoDB\Driver\Monitoring\CommandFailedEvent $event):abstract public void
(MongoDB\Driver\Monitoring\CommandStartedEvent $event):abstract public void
(MongoDB\Driver\Monitoring\CommandSucceededEvent $event):abstract public void
(void):final public string
(void):final public int
(void):final public string
(void):final public object
(void):final public string
(void):final public MongoDB\Driver\Server
(array|object $filter [, array $queryOptions]):final public
(void):final public object
([string $level]):final public
(void):final public string|null
(void):final public bool
(void):final public object
(string|integer $mode [, array $tagSets = NULL [, array $options = array()]]):final public
(void):final public int
(void):final public int
(void):final public array
(string $errorLabel):final public bool
(void):final private
(string $namespace, MongoDB\Driver\BulkWrite $bulk [, array $options = array()]):final public MongoDB\Driver\WriteResult
(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
(string $namespace, MongoDB\Driver\Query $query [, array $options = array()]):final public MongoDB\Driver\Cursor
(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
(string $db, MongoDB\Driver\Command $command [, array $options = array()]):final public MongoDB\Driver\Cursor
(void):final public string
(void):final public array
(void):final public string
(void):final public int
(void):final public array
(void):final public int
(void):final public bool
(void):final public bool
(void):final public bool
(void):final public bool
(void):final public bool
(void):final public void
(array|object $clusterTime):final public void
(MongoDB\BSON\TimestampInterface $operationTime):final public void
(void):final public void
(void):final private
(void):final public void
(void):final public object|null
(void):final public object
(void):final public MongoDB\BSON\Timestamp|null
(array|object $options):final public void
(void):final public object
(string|integer $w [, int $wtimeout [, bool $journal]]):final public
(void):final public boolean|null
(void):final public string|integer|null
(void):final public int
(void):final public bool
(void):final public int
(void):final public mixed
(void):final public string
(void):final public int
(void):final public int
(void):final public mixed
(void):final public string
(void):final public MongoDB\Driver\WriteResult
(void):final public integer|null
(void):final public integer|null
(void):final public integer|null
(void):final public integer|null
(void):final public MongoDB\Driver\Server
(void):final public integer|null
(void):final public array
(void):final public MongoDB\Driver\WriteConcernError|null
(void):final public array
(void):final public bool
(void):public string
(string $username, string $password):public array
(array $command [, array $options = array() [, string &$hash]]):public array
(MongoClient $conn, string $name):public
(string $name [, array $options]):public MongoCollection
(string $collection, mixed $document_or_id):public array
(void):public array
(mixed $coll):public array
(mixed $code [, array $args = array()]):public array
(void):public bool
(string $name):public MongoCollection
([array $options = array()]):public array
([array $options = array()]):public array
(array $ref):public array
([string $prefix = "fs"]):public MongoGridFS
(void):public int
(void):public array
(void):public bool
(void):public array
(void):public array
([array $options = array()]):public array
(void):public array
([bool $preserve_cloned_files = FALSE [, bool $backup_original_files = FALSE]]):public array
(void):public array
(string $name):public MongoCollection
(int $level):public int
(string $read_preference [, array $tags]):public bool
([bool $ok = TRUE]):public bool
(mixed $w [, int $wtimeout]):public bool
(string $collection, mixed $id [, string $database]):public static array
(MongoDB $db, array $ref):public static array
(mixed $ref):public static bool
(MongoCollection $collection [, array $write_options]):public
(MongoDB $db [, string $prefix = "fs" [, mixed $chunks = "fs"]]):public
(mixed $id):public bool|array
(void):public array
([array $query = array() [, array $fields = array()]]):public MongoGridFSCursor
([mixed $query = array() [, mixed $fields = array()]]):public MongoGridFSFile
(mixed $id):public MongoGridFSFile
(string $filename [, array $metadata = array() [, array $options = array()]]):public mixed
([array $criteria = array() [, array $options = array()]]):public bool|array
(string $bytes [, array $metadata = array() [, array $options = array()]]):public mixed
(string|resource $filename [, array $metadata = array() [, array $options = array()]]):public mixed
(string $name [, array $metadata]):public mixed
(MongoGridFS $gridfs, resource $connection, string $ns, array $query, array $fields):public
(void):public MongoGridFSFile
(void):public MongoGridFSFile
(void):public string
(MongoGridFS $gridfs, array $file):public
(void):public string
(void):public string
(void):public resource
(void):public int
([string $filename = NULL]):public int
([string|MongoId $id = NULL]):public
(void):public static string
(void):public int
(void):public int
(void):public int
(mixed $value):public static bool
(array $props):public static MongoId
(void):public string
(MongoCollection $collection [, array $write_options]):public
(string $value):public
(void):public string
(string $value):public
(void):public string
(void):public static callable
(void):public static int
(void):public static int
(callable $log_function):public static void
(int $level):public static void
(int $module):public static void
(void):public static int
(void):public array
(int $size):public static bool
(string $regex):public
(void):public string
(void):public array
([int $sec = time() [, int $inc]]):public
(void):public string
(MongoCollection $collection [, array $write_options]):public
(array $item):public bool
(MongoCollection $collection [, string $batch_type [, array $write_options]]):protected
(array $write_options):final public array
(void):public array
(string $filename):public
(void):public KTaglib_MPEG_File
([bool $create = FALSE]):public KTaglib_ID3v1_Tag
([bool $create = FALSE]):public KTaglib_ID3v2_Tag
(Iterator $iterator [, string $infos]):public void
([int $flags = MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC]):public
(Iterator $iterator):public bool
(void):public int
(void):public array
(Iterator $iterator):public void
(void):public int
(void):public array
(void):public void
(void):public void
(int $flags):public void
(void):public bool
([bool $lock]):final public static int
(int $mutex):final public static bool
(int $mutex):final public static bool
(int $mutex):final public static bool
(int $mutex [, bool $destroy]):final public static bool
(void):abstract public array mysql_xdevapi\
(void):abstract public integer mysql_xdevapi\
(mixed $document):public mysql_xdevapi\CollectionAdd mysql_xdevapi\
(string $id, string $doc):public mysql_xdevapi\Result mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public integer mysql_xdevapi\
(string $index_name, string $index_desc_json):public void mysql_xdevapi\
(string $index_name):public bool mysql_xdevapi\
(void):public bool mysql_xdevapi\
([string $search_condition]):public mysql_xdevapi\CollectionFind mysql_xdevapi\
(void):public string mysql_xdevapi\
(string $id):public Document mysql_xdevapi\
(void):public Schema Object mysql_xdevapi\
(void):public Session mysql_xdevapi\
(string $search_condition):public mysql_xdevapi\CollectionModify mysql_xdevapi\
(string $search_condition):public mysql_xdevapi\CollectionRemove mysql_xdevapi\
(string $id):public mysql_xdevapi\Result mysql_xdevapi\
(string $id, string $doc):public mysql_xdevapi\Result mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public mysql_xdevapi\Result mysql_xdevapi\
(array $placeholder_values):public mysql_xdevapi\CollectionFind mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public mysql_xdevapi\DocResult mysql_xdevapi\
(string $projection):public mysql_xdevapi\CollectionFind mysql_xdevapi\
(string $sort_expr):public mysql_xdevapi\CollectionFind mysql_xdevapi\
(string $sort_expr):public mysql_xdevapi\CollectionFind mysql_xdevapi\
(integer $rows):public mysql_xdevapi\CollectionFind mysql_xdevapi\
([integer $lock_waiting_option]):public mysql_xdevapi\CollectionFind mysql_xdevapi\
([integer $lock_waiting_option]):public mysql_xdevapi\CollectionFind mysql_xdevapi\
(integer $position):public mysql_xdevapi\CollectionFind mysql_xdevapi\
(string $sort_expr):public mysql_xdevapi\CollectionFind mysql_xdevapi\
(string $collection_field, string $expression_or_literal):public mysql_xdevapi\CollectionModify mysql_xdevapi\
(string $collection_field, string $expression_or_literal):public mysql_xdevapi\CollectionModify mysql_xdevapi\
(array $placeholder_values):public mysql_xdevapi\CollectionModify mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public mysql_xdevapi\Result mysql_xdevapi\
(integer $rows):public mysql_xdevapi\CollectionModify mysql_xdevapi\
(string $document):public mysql_xdevapi\CollectionModify mysql_xdevapi\
(string $collection_field, string $expression_or_literal):public mysql_xdevapi\CollectionModify mysql_xdevapi\
(string $collection_field, string $expression_or_literal):public mysql_xdevapi\CollectionModify mysql_xdevapi\
(integer $position):public mysql_xdevapi\CollectionModify mysql_xdevapi\
(string $sort_expr):public mysql_xdevapi\CollectionModify mysql_xdevapi\
(array $fields):public mysql_xdevapi\CollectionModify mysql_xdevapi\
(array $placeholder_values):public mysql_xdevapi\CollectionRemove mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public mysql_xdevapi\Result mysql_xdevapi\
(integer $rows):public mysql_xdevapi\CollectionRemove mysql_xdevapi\
(string $sort_expr):public mysql_xdevapi\CollectionRemove mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public string mysql_xdevapi\
(void):public string mysql_xdevapi\
(void):public string mysql_xdevapi\
(void):public string mysql_xdevapi\
(void):public integer mysql_xdevapi\
(void):public integer mysql_xdevapi\
(void):public string mysql_xdevapi\
(void):public string mysql_xdevapi\
(void):public string mysql_xdevapi\
(void):public integer mysql_xdevapi\
(void):public integer mysql_xdevapi\
(void):public integer mysql_xdevapi\
(array $placeholder_values):abstract public mysql_xdevapi\CrudOperationBindable mysql_xdevapi\
(integer $rows):abstract public mysql_xdevapi\CrudOperationLimitable mysql_xdevapi\
(integer $skip):abstract public mysql_xdevapi\CrudOperationSkippable mysql_xdevapi\
(string $sort_expr):abstract public mysql_xdevapi\CrudOperationSortable mysql_xdevapi\
(void):abstract public bool mysql_xdevapi\
(void):abstract public string mysql_xdevapi\
(void):abstract public mysql_xdevapi\Session mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public Array mysql_xdevapi\
(void):public Object mysql_xdevapi\
(void):public Array mysql_xdevapi\
(void):public integer mysql_xdevapi\
(void):private mysql_xdevapi\
(void):abstract public mysql_xdevapi\Result mysql_xdevapi\
(void):private mysql_xdevapi\
(string $expression):public mysql_xdevapi\
(void):private mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public int mysql_xdevapi\
(void):public ArrayOfInt mysql_xdevapi\
(void):public array mysql_xdevapi\
(void):public integer mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public array mysql_xdevapi\
(void):public object mysql_xdevapi\
(void):public integer mysql_xdevapi\
(void):public array mysql_xdevapi\
(void):public array mysql_xdevapi\
(void):public array mysql_xdevapi\
(void):public integer mysql_xdevapi\
(void):private mysql_xdevapi\
(string $name):public mysql_xdevapi\Collection mysql_xdevapi\
(string $collection_name):public bool mysql_xdevapi\
(void):public bool mysql_xdevapi\
(string $name):public mysql_xdevapi\Collection mysql_xdevapi\
(string $name):public mysql_xdevapi\Table mysql_xdevapi\
(void):public array mysql_xdevapi\
(void):public string mysql_xdevapi\
(void):public mysql_xdevapi\Session mysql_xdevapi\
(string $name):public mysql_xdevapi\Table mysql_xdevapi\
(void):public array mysql_xdevapi\
(void):abstract mysql_xdevapi\Schema mysql_xdevapi\
(void):public bool mysql_xdevapi\
(void):public Object mysql_xdevapi\
(void):private mysql_xdevapi\
(string $schema_name):public mysql_xdevapi\Schema mysql_xdevapi\
(string $schema_name):public bool mysql_xdevapi\
(string $statement):public Object mysql_xdevapi\
(void):public string mysql_xdevapi\
(void):public integer mysql_xdevapi\
(string $schema_name):public mysql_xdevapi\Schema mysql_xdevapi\
(void):public array mysql_xdevapi\
(void):public integer mysql_xdevapi\
(integer $client_id):public object mysql_xdevapi\
(void):public array mysql_xdevapi\
(string $name):public string mysql_xdevapi\
(string $name):public void mysql_xdevapi\
(void):public void mysql_xdevapi\
(string $name):public void mysql_xdevapi\
([string $name]):public string mysql_xdevapi\
(string $query):public mysql_xdevapi\SqlStatement mysql_xdevapi\
(void):public void mysql_xdevapi\
(string $param):public mysql_xdevapi\SqlStatement mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public mysql_xdevapi\Result mysql_xdevapi\
(void):public mysql_xdevapi\Result mysql_xdevapi\
(void):public mysql_xdevapi\Result mysql_xdevapi\
(void):public bool mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public array mysql_xdevapi\
(void):public object mysql_xdevapi\
(void):public integer mysql_xdevapi\
(void):public integer mysql_xdevapi\
(void):public array mysql_xdevapi\
(void):public Array mysql_xdevapi\
(void):public array mysql_xdevapi\
(void):public String mysql_xdevapi\
(void):int
(void):public array mysql_xdevapi\
(void):public bool mysql_xdevapi\
(void):public mysql_xdevapi\Result mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public mysql_xdevapi\Result mysql_xdevapi\
(void):public mysql_xdevapi\Result mysql_xdevapi\
(void):public bool mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public integer mysql_xdevapi\
(void):public mysql_xdevapi\TableDelete mysql_xdevapi\
(void):public bool mysql_xdevapi\
(void):public string mysql_xdevapi\
(void):public mysql_xdevapi\Schema mysql_xdevapi\
(void):public mysql_xdevapi\Session mysql_xdevapi\
(mixed $columns [, mixed $...]):public mysql_xdevapi\TableInsert mysql_xdevapi\
(void):public bool mysql_xdevapi\
(mixed $columns [, mixed $...]):public mysql_xdevapi\TableSelect mysql_xdevapi\
(void):public mysql_xdevapi\TableUpdate mysql_xdevapi\
(array $placeholder_values):public mysql_xdevapi\TableDelete mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public mysql_xdevapi\Result mysql_xdevapi\
(integer $rows):public mysql_xdevapi\TableDelete mysql_xdevapi\
(integer $position):public mysql_xdevapi\TableDelete mysql_xdevapi\
(string $orderby_expr):public mysql_xdevapi\TableDelete mysql_xdevapi\
(string $where_expr):public mysql_xdevapi\TableDelete mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public mysql_xdevapi\Result mysql_xdevapi\
(array $row_values):public mysql_xdevapi\TableInsert mysql_xdevapi\
(array $placeholder_values):public mysql_xdevapi\TableSelect mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public mysql_xdevapi\RowResult mysql_xdevapi\
(mixed $sort_expr):public mysql_xdevapi\TableSelect mysql_xdevapi\
(string $sort_expr):public mysql_xdevapi\TableSelect mysql_xdevapi\
(integer $rows):public mysql_xdevapi\TableSelect mysql_xdevapi\
([integer $lock_waiting_option]):public mysql_xdevapi\TableSelect mysql_xdevapi\
([integer $lock_waiting_option]):public mysql_xdevapi\TableSelect mysql_xdevapi\
(integer $position):public mysql_xdevapi\TableSelect mysql_xdevapi\
(mixed $sort_expr [, mixed $...]):public mysql_xdevapi\TableSelect mysql_xdevapi\
(string $where_expr):public mysql_xdevapi\TableSelect mysql_xdevapi\
(array $placeholder_values):public mysql_xdevapi\TableUpdate mysql_xdevapi\
(void):private mysql_xdevapi\
(void):public mysql_xdevapi\TableUpdate mysql_xdevapi\
(integer $rows):public mysql_xdevapi\TableUpdate mysql_xdevapi\
(mixed $orderby_expr [, mixed $...]):public mysql_xdevapi\TableUpdate mysql_xdevapi\
(string $table_field, string $expression_or_literal):public mysql_xdevapi\TableUpdate mysql_xdevapi\
(string $where_expr):public mysql_xdevapi\TableUpdate mysql_xdevapi\
(void):private mysql_xdevapi\
(void):private mysql_xdevapi\
(void):void
(void):void
(int $start, array $arguments, array $groups):bool
(int $start, array $arguments, array $groups):bool
(int $flags):bool
(mysqli_result $result):int
(mysqli_result $result):int
(int $offset):bool
(mysqli_result $result, int $offset):bool
([int $resulttype = MYSQLI_NUM]):mixed
(mysqli_result $result [, int $resulttype = MYSQLI_NUM]):mixed
([int $resulttype = MYSQLI_BOTH]):mixed
(mysqli_result $result [, int $resulttype = MYSQLI_BOTH]):mixed
(void):array
(mysqli_result $result):array
(int $fieldnr):object
(mysqli_result $result, int $fieldnr):object
(void):object
(mysqli_result $result):object
(void):array
(mysqli_result $result):array
([string $class_name = "stdClass" [, array $params]]):object
(mysqli_result $result [, string $class_name = "stdClass" [, array $params]]):object
(void):mixed
(mysqli_result $result):mixed
(mysqli_result $result):int
(mysqli_result $result):int
(int $fieldnr):bool
(mysqli_result $result, int $fieldnr):bool
(void):void
(void):void
(mysqli_result $result):array
(mysqli_result $result):array
(mysqli_result $result):int
(mysqli_result $result):int
(mysqli_stmt $stmt):int
(mysqli_stmt $stmt):int
(int $attr):int
(mysqli_stmt $stmt, int $attr):int
(int $attr, int $mode):bool
(mysqli_stmt $stmt, int $attr, int $mode):bool
(string $types, mixed &$var1 [, mixed &$...]):bool
(mysqli_stmt $stmt, string $types, mixed &$var1 [, mixed &$...]):bool
(mixed &$var1 [, mixed &$...]):bool
(mysqli_stmt $stmt, mixed &$var1 [, mixed &$...]):bool
(void):bool
(mysqli_stmt $stmt):bool
(mysqli $link [, string $query])
(int $offset):void
(mysqli_stmt $stmt, int $offset):void
(mysqli_stmt $stmt):int
(mysqli_stmt $stmt):int
(mysqli_stmt $stmt):array
(mysqli_stmt $stmt):array
(mysqli_stmt $stmt):string
(mysqli_stmt $stmt):string
(void):bool
(mysqli_stmt $stmt):bool
(void):bool
(mysqli_stmt $stmt):bool
(mysqli_stmt $stmt):int
(mysqli_stmt $stmt):int
(void):void
(mysqli_stmt $stmt):void
(void):mysqli_result
(mysqli_stmt $stmt):mysqli_result
(mysqli_stmt $stmt):object
(mysqli_stmt $stmt):object
(mysqli_stmt $stmt):mixed
(mysqli_stmt $stmt):mixed
(void):public bool
(mysql_stmt $stmt):bool
(void):public bool
(mysql_stmt $stmt):bool
(void):int
(void):int
(mysqli_stmt $stmt):int
(mysqli_stmt $stmt):int
(string $query):mixed
(mysqli_stmt $stmt, string $query):bool
(void):bool
(mysqli_stmt $stmt):bool
(void):mysqli_result
(mysqli_stmt $stmt):mysqli_result
(int $param_nr, string $data):bool
(mysqli_stmt $stmt, int $param_nr, string $data):bool
(mysqli_stmt $stmt):string
(mysqli_stmt $stmt):string
(void):bool
(mysqli_stmt $stmt):bool
(void):protected
(void):public void
(mysqli $link):int
(mysqli $link):int
(bool $mode):bool
(mysqli $link, bool $mode):bool
([int $flags [, string $name]]):public bool
(mysqli $link [, int $flags [, string $name]]):bool
(string $user, string $password, string $database):bool
(mysqli $link, string $user, string $password, string $database):bool
(void):string
(mysqli $link):string
(void):bool
(mysqli $link):bool
([int $flags [, string $name]]):bool
(mysqli $link [, int $flags [, string $name]]):bool
(void):int
(void):int
(void):string
(void):string
([string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket")]]]]]])
([string $host = ini_get("mysqli.default_host") [, string $username = ini_get("mysqli.default_user") [, string $passwd = ini_get("mysqli.default_pw") [, string $dbname = "" [, int $port = ini_get("mysqli.default_port") [, string $socket = ini_get("mysqli.default_socket")]]]]]]):void
(string $message):bool
(string $message):bool
(void):bool
(mysqli $link):bool
(void):int
(mysqli $link):int
(mysqli $link):array
(mysqli $link):array
(void):string
(mysqli $link):string
(void):int
(mysqli $link):int
(void):object
(mysqli $link):object
(void):string
(void):string
(void):int
(mysqli $link):int
(void):bool
(mysqli $link):array
(void):string
(mysqli $link):string
(void):int
(mysqli $link):int
(void):string
(void):string
(void):int
(mysqli $link):int
(void):mysqli_warning
(mysqli $link):mysqli_warning
(void):string
(mysqli $link):string
(void):mysqli
(void):mysqli
(void):mixed
(mysqli $link):mixed
(int $processid):bool
(mysqli $link, int $processid):bool
(void):bool
(mysqli $link):bool
(string $query):bool
(mysqli $link, string $query):bool
(void):bool
(mysqli $link):bool
(int $option, mixed $value):bool
(mysqli $link, int $option, mixed $value):bool
(void):bool
(mysqli $link):bool
(array &$read, array &$error, array &$reject, int $sec [, int $usec]):public static int
(array &$read, array &$error, array &$reject, int $sec [, int $usec]):int
(string $query):mysqli_stmt
(mysqli $link, string $query):mysqli_stmt
(string $query [, int $resultmode = MYSQLI_STORE_RESULT]):mixed
(mysqli $link, string $query [, int $resultmode = MYSQLI_STORE_RESULT]):mixed
([string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags]]]]]]]):bool
(mysqli $link [, string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags]]]]]]]):bool
(string $escapestr):string
(string $escapestr):string
(string $query):bool
(mysqli $link, string $query):bool
(void):public mysqli_result
(mysqli $link):mysqli_result
(int $options):public bool
(resource $link, int $options):bool
(string $name):public bool
(mysqli $link, string $name):bool
([int $flags [, string $name]]):bool
(mysqli $link [, int $flags [, string $name]]):bool
(string $query):int
(mysqli $link, string $query):int
(string $name):public bool
(mysqli $link, string $name):bool
(string $dbname):bool
(mysqli $link, string $dbname):bool
(string $query):bool
(mysqli $link, string $query):bool
(string $charset):bool
(mysqli $link, string $charset):bool
(void):void
(mysqli $link):void
(mysqli $link, callable $read_func):bool
(mysqli $link, callable $read_func):bool
(void):string
(mysqli $link):string
(string $key, string $cert, string $ca, string $capath, string $cipher):bool
(mysqli $link, string $key, string $cert, string $ca, string $capath, string $cipher):bool
(void):string
(mysqli $link):string
(void):mysqli_stmt
(mysqli $link):mysqli_stmt
([int $option]):mysqli_result
(mysqli $link [, int $option]):mysqli_result
(void):int
(mysqli $link):int
(void):bool
(void):bool
(void):mysqli_result
(mysqli $link):mysqli_result
(void):int
(mysqli $link):int
(mysqlnd_connection $connection, string $user, string $password, string $database, bool $silent, int $passwd_len):public bool
(mysqlnd_connection $connection):public string
(mysqlnd_connection $connection, int $close_type):public bool
(mysqlnd_connection $connection, string $host, string $use", string $password, string $database, int $port, string $socket, int $mysql_flags):public bool
(void):public
(mysqlnd_connection $connection):public bool
(mysqlnd_connection $connection, string $escape_string):public string
(mysqlnd_connection $connection):public int
(mysqlnd_connection $connection):public int
(mysqlnd_connection $connection):public string
(mysqlnd_connection $connection):public int
(mysqlnd_connection $connection):public string
(mysqlnd_connection $connection):public int
(mysqlnd_connection $connection):public void
(mysqlnd_connection $connection):public string
(mysqlnd_connection $connection):public string
(mysqlnd_connection $connection):public string
(mysqlnd_connection $connection):public int
(mysqlnd_connection $connection):public string
(mysqlnd_connection $connection):public array
(mysqlnd_connection $connection):public int
(mysqlnd_connection $connection):public int
(mysqlnd_connection $connection):public bool
(mysqlnd_connection $connection, int $pid):public bool
(mysqlnd_connection $connection, string $table, string $achtung_wild):public array
(mysqlnd_connection $connection, string $query, string $achtung_wild, string $par1):public void
(mysqlnd_connection $connection):public bool
(mysqlnd_connection $connection):public bool
(mysqlnd_connection $connection):public bool
(mysqlnd_connection $connection, string $query):public bool
(mysqlnd_connection $connection, mysqlnd_statement $mysqlnd_stmt):public bool
(mysqlnd_connection $connection):public bool
(mysqlnd_connection $connection, int $options):public bool
(mysqlnd_connection $connection):public bool
(mysqlnd_connection $connection, string $database):public bool
(mysqlnd_connection $connection):public bool
(mysqlnd_connection $connection, string $query):public bool
(mysqlnd_connection $connection):public bool
(mysqlnd_connection $connection, int $mode):public bool
(mysqlnd_connection $connection, string $charset):public bool
(mysqlnd_connection $connection, int $option, int $value):public bool
(mysqlnd_connection $connection, int $option):public void
(string $MYSQLND_UH_RES_MYSQLND_NAME, string $level):public void
(mysqlnd_connection $connection, int $command, string $arg, int $ok_packet, bool $silent, bool $ignore_upsert_status):public bool
(mysqlnd_connection $connection, int $ok_packet, bool $silent, int $command, bool $ignore_upsert_status):public bool
(mysqlnd_connection $connection, string $key, string $cert, string $ca, string $capath, string $cipher):public bool
(mysqlnd_connection $connection):public resource
(mysqlnd_connection $connection):public resource
(mysqlnd_connection $connection):public bool
(mysqlnd_connection $connection):public bool
(mysqlnd_connection $connection):public resource
(void):public
(mysqlnd_prepared_statement $statement):public bool
(mysqlnd_prepared_statement $statement, string $query):public bool
(Iterator $iterator):public
(void):public mixed
(void):public iterator
(void):public mixed
(void):public void
(void):public void
(void):public bool
(string $input):public static string
(string $input):string
(string $input [, int $form = Normalizer::FORM_C]):public static bool
(string $input [, int $form = Normalizer::FORM_C]):bool
(string $input [, int $form = Normalizer::FORM_C]):public static string
(string $input [, int $form = Normalizer::FORM_C]):string
(string $locale, int $style [, string $pattern]):public static NumberFormatter
(string $locale, int $style [, string $pattern]):NumberFormatter
(number $value [, int $type]):public string
(NumberFormatter $fmt, number $value [, int $type]):string
(float $value, string $currency):public string
(NumberFormatter $fmt, float $value, string $currency):string
(int $attr):public int
(NumberFormatter $fmt, int $attr):int
(void):public int
(NumberFormatter $fmt):int
(void):public string
(NumberFormatter $fmt):string
([int $type]):public string
(NumberFormatter $fmt [, int $type]):string
(void):public string
(NumberFormatter $fmt):string
(int $attr):public string
(NumberFormatter $fmt, int $attr):string
(int $attr):public string
(NumberFormatter $fmt, int $attr):string
(string $value [, int $type [, int &$position]]):public mixed
(NumberFormatter $fmt, string $value [, int $type [, int &$position]]):mixed
(string $value, string &$currency [, int &$position]):public float
(NumberFormatter $fmt, string $value, string &$currency [, int &$position]):float
(int $attr, int $value):public bool
(NumberFormatter $fmt, int $attr, int $value):bool
(string $pattern):public bool
(NumberFormatter $fmt, string $pattern):bool
(int $attr, string $value):public bool
(NumberFormatter $fmt, int $attr, string $value):bool
(int $attr, string $value):public bool
(NumberFormatter $fmt, int $attr, string $value):bool
(string $consumer_key, string $consumer_secret [, string $signature_method = OAUTH_SIG_METHOD_HMACSHA1 [, int $auth_type = 0]]):public
(void):public void
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(string $protected_resource_url [, array $extra_parameters [, string $http_method [, array $http_headers]]]):public mixed
(string $http_method, string $url [, mixed $extra_parameters]):public string
(string $access_token_url [, string $auth_session_handle [, string $verifier_token [, string $http_method]]]):public array
(void):public array
(void):public string
(void):public string
(void):public array
(string $http_method, string $url [, mixed $extra_parameters]):public string
(string $request_token_url [, string $callback_url [, string $http_method]]):public array
(int $auth_type):public bool
([string $ca_path [, string $ca_info]]):public mixed
(string $nonce):public mixed
(int $reqengine):public void
(string $cert):public mixed
(int $sslcheck):public bool
(string $timestamp):public mixed
(string $token, string $token_secret):public bool
(string $version):public bool
(string $req_params):final public bool
(void):public void
(void):public void
(void):public void
([string $uri [, string $method]]):public void
([array $params_array]):public
(callable $callback_function):public void
(int $size [, bool $strong = FALSE]):final public static string
(mixed $params_array):public void
(bool $will_issue_request_token):public void
(string $req_params):final public bool
(string $oauthexception [, bool $send_headers = TRUE]):final public static string
(string $param_key [, mixed $param_val]):final public bool
(string $path):final public bool
(callable $callback_function):public void
(callable $callback_function):public void
(mixed $value):bool
(OCI-Collection $from):bool
(int $index, mixed $value):bool
(void):bool
(int $index):mixed
(void):int
(void):int
(int $num):bool
(OCI-Lob $lob_from):bool
(void):bool
(void):bool
([int $offset [, int $length]]):int
(string $filename [, int $start [, int $length]]):bool
([int $flag]):bool
(void):bool
(void):bool
(string $filename):bool
(void):string
(int $length):string
(void):bool
(string $data [, int $offset]):bool
(string $filename):bool
(int $offset [, int $whence = OCI_SEEK_SET]):bool
(bool $on_off):bool
(void):int
(void):int
([int $length = 0]):bool
(string $data [, int $length]):int
(string $data [, int $lob_type = OCI_TEMP_CLOB]):bool
(string $filename [, int $start [, int $length]]):bool
(void):public Iterator
(void):public bool
(RecursiveIterator $iterator):public
(void):public ParentIterator
(void):public bool
(void):public void
(void):public void
(void):public void
(void):public void
(int $id, callable $callback):public void
(string $data):public void
(void):public void
(void):public Parle\Token
(string $name, string $regex):public void
(string $regex, int $id):public void
(int $pos):public void
(void):public void
(void):public void
(string $data, Parle\Lexer $lexer):public void
(void):public void
(void):public Parle\ErrorInfo
(string $tok):public void
(string $tok):public void
(string $tok):public void
(string $name, string $rule):public int
([int $tokenId]):public void
(string $tok):public void
([int $idx]):public string
(string $tok):public void
(string $tok):public int
(void):public string
(string $data, Parle\Lexer $lexer):public bool
(void):public void
(void):public void
(int $id, callable $callback):public void
(string $data):public void
(void):public void
(void):public Parle\Token
(string $name, string $regex):public void
(string $regex, int $id):public void
(string $state):public int
(int $pos):public void
(void):public void
(void):public void
(string $data, Parle\RLexer $rlexer):public void
(void):public void
(void):public Parle\ErrorInfo
(string $tok):public void
(string $tok):public void
(string $tok):public void
(string $name, string $rule):public int
([int $tokenId]):public void
(string $tok):public void
([int $idx]):public string
(string $tok):public void
(string $tok):public int
(void):public string
(string $data, Parle\RLexer $lexer):public bool
(void):public void
(mixed $item):public void
(void):public bool
(void):public bool
(string $dsn [, string $username [, string $passwd [, array $options]]]):public
(int $schema_type [, string $table_name [, string $col_name]]):public array
(void):public string
(void):public array
(string $statement):public int
(int $attribute):public mixed
(void):public static array
(void):array
(void):public bool
([string $name = NULL]):public string
(string $table_name, array $rows [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields]]]):public bool
(string $table_name, string $filename [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields]]]):public bool
(string $table_name [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields]]]):public array
(string $table_name, string $filename [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields]]]):public bool
([int $result_type = PDO::FETCH_USE_DEFAULT [, int $ms_timeout = 0]]):public array
(void):public int
(void):public string
(string $oid [, string $mode = "rb"]):public resource
(string $oid):public bool
(string $statement [, array $driver_options = array()]):public PDOStatement
(string $statement):public PDOStatement
(string $string [, int $parameter_type = PDO::PARAM_STR]):public string
(void):public bool
(int $attribute, mixed $value):public bool
(string $function_name, callable $step_func, callable $finalize_func [, int $num_args]):public bool
(string $name, callable $callback):public bool
(string $function_name, callable $callback [, int $num_args = -1 [, int $flags = 0]]):public bool
(mixed $column, mixed &$param [, int $type [, int $maxlen [, mixed $driverdata]]]):public bool
(mixed $parameter, mixed &$variable [, int $data_type = PDO::PARAM_STR [, int $length [, mixed $driver_options]]]):public bool
(mixed $parameter, mixed $value [, int $data_type = PDO::PARAM_STR]):public bool
(void):public bool
(void):public int
(void):public void
(void):public string
(void):public array
([array $input_parameters]):public bool
([int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0]]]):public mixed
([int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array()]]]):public array
([int $column_number = 0]):public mixed
([string $class_name = "stdClass" [, array $ctor_args]]):public mixed
(int $attribute):public mixed
(int $column):public array
(void):public bool
(void):public int
(int $attribute, mixed $value):public bool
(int $mode):public bool
(string $dirname):public void
(string $file [, string $localname]):public void
(string $localname, string $contents):public void
(void):final public static string
(string $base_dir [, string $regex]):public array
(Iterator $iter [, string $base_directory]):public array
([int $type = 0]):final public static bool
(void):final public static bool
(int $compression [, string $extension]):public object
(void):public bool
(void):public bool
(int $compression):public void
(string $fname [, int $flags [, string $alias]]):public
([int $format = 9021976 [, int $compression = 9021976 [, string $extension]]]):public PharData
([int $format = 9021976 [, int $compression = 9021976 [, string $extension]]]):public Phar
(string $oldfile, string $newfile):public bool
(void):public int
([string $indexfile [, string $webindexfile]]):final public static string
([string $extension]):public object
(void):public bool
(string $entry):public bool
(void):public bool
(string $pathto [, string|array $files [, bool $overwrite = FALSE]]):public bool
(void):public string
(void):public mixed
(void):public bool
(void):public string
(void):public array
(void):public string
(void):final public static array
(void):final public static array
(void):public string
(void):public bool
(void):final public static void
(void):public bool
(void):public mixed
(int $format):public bool
(string $filename [, bool $executable = TRUE]):final public static bool
(void):public bool
(string $filename [, string $alias]):final public static bool
([string $alias [, int $dataoffset = 0]]):final public static bool
(string $pharpath, string $externalpath):final public static void
(array $munglist):final public static void
(string $offset):public bool
(string $offset):public int
(string $offset, string $value):public void
(string $offset):public bool
([bool $retphar = TRUE]):final public static string
(string $alias):public bool
([string $index [, string $webindex]]):public bool
(mixed $metadata):public void
(int $sigtype [, string $privatekey]):public void
(string $stub [, int $len = -1]):public bool
(void):public void
(void):public void
(void):public bool
(string $archive):final public static bool
([string $alias [, string $index = "index.php" [, string $f404 [, array $mimetypes [, callable $rewrites]]]]]):final public static void
(string $dirname):void
(string $file [, string $localname]):public void
(string $localname, string $contents):void
(string $base_dir [, string $regex]):public array
(Iterator $iter [, string $base_directory]):array
(int $compression [, string $extension]):object
(int $compression):void
(string $fname [, int $flags [, string $alias [, int $format = Phar::TAR]]])
([int $format [, int $compression [, string $extension]]]):PharData
([int $format [, int $compression [, string $extension]]]):Phar
(string $oldfile, string $newfile):bool
([string $extension]):object
(void):bool
(string $entry):bool
(void):bool
(string $pathto [, string|array $files [, bool $overwrite = FALSE]]):bool
(void):bool
(string $offset, string $value):void
(string $offset):bool
(string $alias):bool
([string $index [, string $webindex]]):bool
(string $stub [, int $len = -1]):bool
RarPharException
(int $permissions):public void
(int $compression):public bool
(string $entry):public
(void):public bool
(void):public bool
(void):public int
(void):public string
(void):public int
(void):public mixed
(void):public int
(void):public bool
([int $compression_type = 9021976]):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(mixed $metadata):public void
(void):public bool
(void):public bool
(string $ip, string $port):public
(string $source_file, string $destination_file):public bool
(string $path):public bool
(string $path):public bool
(void):public void
(void):public bool
(string $path):public bool
(string $path):public array
(string $path [, int $level = 0]):public array
(string $path [, int $length = 0]):public string
(string $old_path, string $new_path):public bool
(string $path [, int $read_length = 1024]):public int
(string $path, string $buffer [, int $mode = 0]):public bool
(resource $in, resource $out, int &$consumed, bool $closing):public int
(void):public void
(void):public bool
([int $value = 0]):public AtomicInteger
(void):public void
(void):public int
(void):public void
(void):public void
(int $value):public void
(void):public void
(void):public void
(void):public int
(void):public void
(void):public mixed
(void):public void
(void):public mixed
(mixed $value):public void
(void):public int
(void):public void
(void):public void
(string $className [, mixed $...ctorArgs]):public void
(string $fileName [, mixed $...globals]):public void
(callable $func [, mixed $...funcArgs]):public void
(void):public void
(void):public void
(void):public int
(void):public void
(void):public void
([int $size = 0 [, mixed $value = 0]]):public Vector
(int $offset):public void
(mixed $value, int $offset):public void
(void):public void
(void):public mixed
(mixed $value):public void
(int $size [, mixed $value = 0]):public void
(void):public mixed
(void):public int
(void):public void
(mixed $value):public void
(mixed $value, int $offset):public void
([Callable $collector]):public int
(int $size [, string $class [, array $ctor]]):public Pool
(int $size):public void
(void):public void
(Threaded $task):public int
(int $worker, Threaded $task):public int
(int $key [, int $value]):public bool
(int $size [, int $options]):public
(int $key):public bool
(int $key):public bool
(int $key):public int
(void):public int
(string $filename [, int $options]):public static QuickHashIntHash
(string $contents [, int $options]):public static QuickHashIntHash
(string $filename):public void
(void):public string
(int $key, int $value):public bool
(int $key, int $value):public bool
(int $key):public bool
(int $size [, int $options]):public
(int $key):public bool
(int $key):public bool
(void):publicint
(string $filename [, int $size [, int $options]]):public static QuickHashIntSet
(string $contents [, int $size [, int $options]]):public static QuickHashIntSet
(string $filename):public void
(void):public string
(int $key, string $value):public bool
(int $size [, int $options = 0]):public
(int $key):public bool
(int $key):public bool
(int $key):public mixed
(void):public int
(string $filename [, int $size = 0 [, int $options = 0]]):public static QuickHashIntStringHash
(string $contents [, int $size = 0 [, int $options = 0]]):public static QuickHashIntStringHash
(string $filename):public void
(void):public string
(int $key, string $value):public int
(int $key, string $value):public bool
(string $key, int $value):public bool
(int $size [, int $options = 0]):public
(string $key):public bool
(string $key):public bool
(string $key):public mixed
(void):public int
(string $filename [, int $size = 0 [, int $options = 0]]):public static QuickHashStringIntHash
(string $contents [, int $size = 0 [, int $options = 0]]):public static QuickHashStringIntHash
(string $filename):public void
(void):public string
(string $key, int $value):public int
(string $key, int $value):public bool
(void):public bool
(RarArchive $rarfile):bool
(void):public string
(RarArchive $rarfile):string
(void):public array
(RarArchive $rarfile):array
(string $entryname):public RarEntry
(RarArchive $rarfile, string $entryname):RarEntry
(void):public bool
(RarArchive $rarfile):bool
(void):public bool
(RarArchive $rarfile):bool
(string $filename [, string $password = NULL [, callable $volume_callback = NULL]]):public static RarArchive
(string $filename [, string $password = NULL [, callable $volume_callback = NULL]]):RarArchive
(bool $allow_broken):public bool
(void):public string
(string $dir [, string $filepath = "" [, string $password = NULL [, bool $extended_data = FALSE]]]):public bool
(void):public int
(void):public string
(void):public string
(void):public int
(void):public int
(void):public string
(void):public int
([string $password]):public resource
(void):public int
(void):public int
(void):public bool
(void):public bool
(void):public string
(void):public static bool
(bool $using_exceptions):public static void
(void):public RecursiveArrayIterator
(void):public bool
(Iterator $iterator [, int $flags = self::CALL_TOSTRING]):public
(void):public RecursiveCachingIterator
(void):public bool
(RecursiveIterator $iterator, string $callback):public
(void):public RecursiveCallbackFilterIterator
(void):public bool
(string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO]):public
(void):public mixed
(void):public string
(void):public string
([bool $allow_links = FALSE]):public bool
(void):public string
(void):public void
(void):public void
(RecursiveIterator $iterator):public
(void):public RecursiveFilterIterator
(void):public bool
(void):public RecursiveIterator
(void):public bool
(void):public void
(void):public void
(void):public RecursiveIterator
(void):public bool
(Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0]]):public
(void):public mixed
(void):public void
(void):public void
(void):public int
(void):public iterator
(void):public mixed
([int $level]):public RecursiveIterator
(void):public mixed
(void):public void
(void):public void
(void):public void
([int $max_depth = -1]):public void
(void):public bool
(RecursiveIterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0]]]):public
(void):public RecursiveRegexIterator
(void):public bool
(void):public void
(void):public RecursiveIterator
(void):public RecursiveIterator
(void):public bool
(RecursiveIterator|IteratorAggregate $it [, int $flags = RecursiveTreeIterator::BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST]]]):public
(void):public string
(void):public void
(void):public void
(void):public string
(void):public string
(void):public string
(void):public string
(void):public void
(void):public void
(void):public void
(string $postfix):public void
(int $part, string $value):public void
(void):public bool
(Reflector $reflector [, bool $return = FALSE]):public static string
(int $modifiers):public static array
(mixed $argument):public
(mixed $argument [, bool $return = FALSE]):public static string
(string $name):public mixed
(void):public array
(void):public ReflectionMethod
(void):public array
(void):public string
(void):public int
(void):public ReflectionExtension
(void):public string
(void):public string
(void):public array
(void):public array
(string $name):public ReflectionMethod
([int $filter]):public array
(void):public int
(void):public string
(void):public string
(void):public ReflectionClass
([int $filter]):public array
(string $name):public ReflectionProperty
(string $name):public ReflectionClassConstant
(void):public array
(void):public string
(void):public int
(void):public array
(string $name [, mixed &$def_value]):public mixed
(void):public array
(void):public array
(void):public array
(string $name):public bool
(string $name):public bool
(string $name):public bool
(string $interface):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(object $object):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(string $class):public bool
(void):public bool
(void):public bool
(mixed $args [, mixed $...]):public object
([array $args]):public object
(void):public object
(string $name, mixed $value):public void
(void):public string
(mixed $class, string $name):public
(mixed $class, string $name [, bool $return]):public static string
(void):public ReflectionClass
(void):public string
(void):public int
(void):public string
(void):public mixed
(void):public bool
(void):public bool
(void):public bool
(void):public string
(void):final private void
(string $name):public
(string $name [, string $return = FALSE]):public static string
(void):public array
(void):public array
(void):public array
(void):public array
(void):public array
(void):public array
(void):public string
(void):public string
(void):public void
(void):public void
(void):public void
(void):public string
(mixed $name):public
(string $name [, string $return]):public static string
(void):public Closure
([mixed $parameter [, mixed $...]]):public mixed
(array $args):public mixed
(void):public bool
(void):public string
(void):final private void
(void):public ReflectionClass
(void):public object
(void):public string
(void):public int
(void):public ReflectionExtension
(void):public string
(void):public string
(void):public string
(void):public string
(void):int
(void):int
(void):public array
(void):public ReflectionType
(void):public string
(void):public int
(void):public array
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):abstract public void
(Generator $generator):public
(void):public string
(void):public Generator
(void):public int
(void):public ReflectionFunctionAbstract
(void):public object
([int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT]):public array
(mixed $class, string $name):public
(string $class, string $name [, bool $return = FALSE]):public static string
(object $object):public Closure
(void):public ReflectionClass
(void):public int
(void):public ReflectionMethod
(object $object [, mixed $parameter [, mixed $...]]):public mixed
(object $object, array $args):public mixed
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(bool $accessible):public void
(void):public string
(void):public string
(object $argument):public
(string $argument [, bool $return]):public static string
(void):public bool
(void):public bool
(void):final private void
(string $function, string $parameter):public
(string $function, string $parameter [, bool $return]):public static string
(void):public ReflectionClass
(void):public ReflectionClass
(void):public ReflectionFunctionAbstract
(void):public mixed
(void):public string
(void):public string
(void):public int
(void):public ReflectionType
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public string
(void):final private void
(mixed $class, string $name):public
(mixed $class, string $name [, bool $return]):public static string
(void):public ReflectionClass
(void):public string
(void):public int
(void):public string
([object $object]):public mixed
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(bool $accessible):public void
(object $object, mixed $value):public void
(void):public string
(void):public bool
(void):public bool
(void):public string
(void):final private void
(string $name):public
(string $name [, bool $return]):public static string
(void):public string
(void):public string
(void):public string
(void):public string
(void):public string
(void):public string
(void):public static string
(void):public string
(void):public bool
(Iterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0]]]):public
(void):public int
(void):public int
(void):public int
(void):public string
(int $flags):public void
(int $mode):public void
(int $preg_flags):public void
(void):public int
(ResourceBundle $r):int
(string $locale, string $bundlename [, bool $fallback]):public static ResourceBundle
(string $locale, string $bundlename [, bool $fallback]):ResourceBundle
(string|int $index [, bool $fallback = TRUE]):public mixed
(ResourceBundle $r, string|int $index [, bool $fallback = TRUE]):mixed
(void):public int
(ResourceBundle $r):int
(void):public string
(ResourceBundle $r):string
(string $bundlename):public array
(string $bundlename):array
(string $description):public void
(string $description):public void
(string $path [, string $startTime [, int $step = 0]]):public
(void):public bool
(string $path):public
(void):public array
(void):public array
(array $options):public void
(string $path):public
(array $values [, string $time = time()]):public bool
::__construct (void):void
class creates a new thread with its own scope and program stack. Using a set of options passed to the constructor, this environment may be restricted to a subset of what the primary interpreter can do and provide a safer environment for executing user supplied code.:Instantiating the
(void):bool
(string $protocol [, array $properties]):bool
(void)
(void):bool
(void):int
(void):string
(void):bool
(string $target [, array $properties]):SAMMessage
(string $target [, array $properties]):array
(string $target [, array $properties]):SAMMessage
(string $target [, array $properties]):SAMMessage
(void):bool
(string $target, SAMMessage $msg [, array $properties]):string
(bool $switch):void
(string $targetTopic):string
(string $subscriptionId [, string $targetTopic]):bool
(void):string
([mixed $body])
(void):object
(string $type_namespace_uri, string $type_name):SDO_DataObject
(string $type_namespace_uri, string $type_name):SDO_DataObject
(string $type_namespace_uri, string $type_name):SDO_DataObject
(string $target [, string $binding [, array $config]]):mixed
(void):void
(void):void
(void):SDO_List
(SDO_DataObject $dataObject):int
(SDO_DataObject $data_object):SDO_DataObject
(SDO_DataObject $data_object):SDO_List
(void):bool
(string $parent_type_namespace_uri, string $parent_type_name, string $property_name, string $type_namespace_uri, string $type_name [, array $options]):void
(string $type_namespace_uri, string $type_name [, array $options]):void
(void):SDO_DAS_DataFactory
(void):SDO_DAS_ChangeSummary
(PDO $database_handle, SDODataObject $root_data_object):void
(array $database_metadata [, string $application_root_type [, array $SDO_containment_references_metadata]])
(void):SDODataObject
(PDO $database_handle, PDOStatement $prepared_statement, array $value_list [, array $column_specifier]):SDODataObject
(PDO $database_handle, string $SQL_statement [, array $column_specifier]):SDODataObject
(void):int
(void):int
(void):string
(void):mixed
(void):bool
(void):SDO_DataObject
(void):string
(void):string
(string $encoding):void
(bool $xmlDeclatation):void
(string $xmlVersion):void
(string $xsd_file):void
([mixed $xsd_file [, string $key]]):SDO_DAS_XML
(string $namespace_uri, string $type_name):SDO_DataObject
([string $document_element_name]):SDO_DAS_XML_Document
(string $xml_file):SDO_XMLDocument
(string $xml_string):SDO_DAS_XML_Document
(SDO_XMLDocument $xdoc, string $xml_file [, int $indent]):void
(SDO_XMLDocument $xdoc [, int $indent]):string
(string $type_namespace_uri, string $type_name):void
(void):void
(mixed $identifier):SDO_DataObject
(void):SDO_DataObject
(void):SDO_Sequence
(void):string
(void):string
(void):mixed
(mixed $value [, int $index]):void
(void):SDO_Model_Type
(void):mixed
(void):string
(void):SDO_Model_Type
(void):bool
(void):bool
(SDO_DataObject $data_object)
(SDO_Model_ReflectionDataObject $rdo [, bool $return]):mixed
(void):SDO_Model_Property
(void):array
(void):SDO_Model_Type
(void):SDO_Model_Type
(void):string
(void):string
(void):array
(mixed $identifier):SDO_Model_Property
(void):bool
(void):bool
(SDO_DataObject $data_object):bool
(void):bool
(void):bool
(int $sequence_index):SDO_Model_Property
(mixed $value [, int $sequenceIndex [, mixed $propertyIdentifier]]):void
(int $toIndex, int $fromIndex):void
(string $level [, string $log_path [, string $key_word]]):public static mixed
(string $level [, string $log_path [, string $key_word [, int $start [, int $limit [, int $order]]]]]):public static mixed
(void):public
(string $message [, array $content [, string $logger]]):public static bool
(string $message [, array $content [, string $logger]]):public static bool
(void):public
(string $message [, array $content [, string $logger]]):public static bool
(string $message [, array $content [, string $logger]]):public static bool
(void):public static bool
() will get the value of seaslog.default_basepath what configured in php.ini(seaslog.ini).:Use the Function
(void):public static array
(void):public static bool
(void):public static string
(void):public static string
(void):public static string
(string $message [, array $content [, string $logger]]):public static bool
(string $level [, string $message [, array $content [, string $logger]]]):public static bool
(string $message [, array $content [, string $logger]]):public static bool
(string $base_path):public static bool
(string $format):public static bool
(string $logger):public static bool
(string $request_id):public static bool
(string $message [, array $content [, string $logger]]):public static bool
(int $position):abstract public void
(void):abstract public string
(string $serialized):abstract public void
(void):public bool
(void):public string
(string $session_id):public bool
(int $maxlifetime):public int
(string $save_path, string $session_name):public bool
(string $session_id):public string
(string $session_id, string $session_data):public bool
(void):abstract public bool
(string $session_id):abstract public bool
(int $maxlifetime):abstract public int
(string $save_path, string $session_name):abstract public bool
(string $session_id):abstract public string
(string $session_id, string $session_data):abstract public bool
(void):abstract public string
(string $key, string $val):abstract public bool
(string $key):abstract public bool
(string $name [, string $value [, string $namespace]]):public void
(string $name [, string $value [, string $namespace]]):public SimpleXMLElement
([string $filename]):public mixed
([string $ns = NULL [, bool $is_prefix = FALSE]]):public SimpleXMLElement
([string $ns [, bool $is_prefix = FALSE]]):public SimpleXMLElement
(string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = "" [, bool $is_prefix = FALSE]]]]):final public
(void):public int
([bool $recursive = FALSE [, bool $from_root = TRUE]]):public array
(void):public string
([bool $recursive = FALSE]):public array
(string $prefix, string $ns):public bool
([string $filename]):public mixed
(void):public string
(string $path):public array
(void):public mixed
(void):public SimpleXMLIterator
(void):public bool
(void):public mixed
(void):public void
(void):public void
(void):public bool
(void):public bool
(int $version, string $hostname, string $community [, int $timeout = 1000000 [, int $retries = 5]]):public
(mixed $object_id [, bool $preserve_keys = FALSE]):public mixed
(void):public int
(void):public string
(mixed $object_id):public mixed
(mixed $object_id, mixed $type, mixed $value):public bool
(string $sec_level [, string $auth_protocol = [, string $auth_passphrase = [, string $priv_protocol = [, string $priv_passphrase = [, string $contextName = [, string $contextEngineID =]]]]]]):public bool
(string $object_id [, bool $suffix_as_key = FALSE [, int $max_repetitions [, int $non_repeaters]]]):public array
(string $function_name, array $arguments):public mixed
(mixed $wsdl [, array $options]):public
(string $request, string $location, string $action, int $version [, int $one_way = 0]):public string
(void):public array
(void):public array
(void):public string
(void):public string
(void):public string
(void):public string
(void):public array
(string $name [, string $value]):public void
([string $new_location]):public string
([mixed $soapheaders]):public bool
(string $function_name, array $arguments [, array $options [, mixed $input_headers [, array &$output_headers]]]):public mixed
(mixed $wsdl [, array $options]):public
(string $faultcode, string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault]]]])
(string $faultcode, string $faultstring [, string $faultactor [, string $detail [, string $faultname [, string $headerfault]]]])
(void):public string
(string $namespace, string $name [, mixed $data [, bool $mustunderstand [, string $actor]]])
(string $namespace, string $name [, mixed $data [, bool $mustunderstand = FALSE [, string $actor]]])
(mixed $data, string $name)
(mixed $data, string $name)
(mixed $functions):public void
(SoapHeader $object):public void
(mixed $wsdl [, array $options]):public
(string $code, string $string [, string $actor [, string $details [, string $name]]]):public void
(void):public array
([string $soap_request]):public void
(string $class_name [, mixed $args [, mixed $...]]):public void
(object $object):public void
(int $mode):public void
(mixed $wsdl [, array $options]):public
(mixed $data, string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace]]]])
(mixed $data, string $encoding [, string $type_name [, string $type_namespace [, string $node_name [, string $node_namespace]]]])
(SolrInputDocument $doc [, bool $overwrite = TRUE [, int $commitWithin = 0]]):public SolrUpdateResponse
(array $docs [, bool $overwrite = TRUE [, int $commitWithin = 0]]):public void
([bool $softCommit = FALSE [, bool $waitSearcher = TRUE [, bool $expungeDeletes = FALSE]]]):public SolrUpdateResponse
(array $clientOptions):public
(string $id):public SolrUpdateResponse
(array $ids):public SolrUpdateResponse
(array $queries):public SolrUpdateResponse
(string $query):public SolrUpdateResponse
(void):public void
(string $id):public SolrQueryResponse
(array $ids):public SolrQueryResponse
(void):public string
(void):public array
([int $maxSegments = 1 [, bool $softCommit = TRUE [, bool $waitSearcher = TRUE]]]):public SolrUpdateResponse
(void):public SolrPingResponse
(SolrParams $query):public SolrQueryResponse
(string $raw_request):public SolrUpdateResponse
(void):public SolrUpdateResponse
(string $responseWriter):public void
(int $type, string $value):public bool
(void):public void
(void):public void
(void):public array
([string $field]):public
(void):public string
(void):public string
(void):public string
(void):public string
(void):public string
(void):public int
(string $fieldName):public SolrCollapseFunction
(string $hint):public SolrCollapseFunction
(string $max):public SolrCollapseFunction
(string $min):public SolrCollapseFunction
(string $nullPolicy):public SolrCollapseFunction
(int $size):public SolrCollapseFunction
(void):public string
(string $field, string $boost [, string $slop]):public SolrDisMaxQuery
(string $field, string $value [, string $boost]):public SolrDisMaxQuery
(string $field, string $boost [, string $slop]):public SolrDisMaxQuery
(string $field [, string $boost]):public SolrDisMaxQuery
(string $field, string $boost [, string $slop]):public SolrDisMaxQuery
(string $field):public SolrDisMaxQuery
([string $q]):public
(string $field):public SolrDisMaxQuery
(string $field):public SolrDisMaxQuery
(string $field):public SolrDisMaxQuery
(string $field):public SolrDisMaxQuery
(string $field):public SolrDisMaxQuery
(string $field):public SolrDisMaxQuery
(string $fields):public SolrDisMaxQuery
(string $slop):public SolrDisMaxQuery
(string $function):public SolrDisMaxQuery
(string $q):public SolrDisMaxQuery
(string $value):public SolrDisMaxQuery
(string $fields):public SolrDisMaxQuery
(string $slop):public SolrDisMaxQuery
(string $q):public SolrDisMaxQuery
(string $slop):public SolrDisMaxQuery
(string $tieBreaker):public SolrDisMaxQuery
(string $fields):public SolrDisMaxQuery
(string $slop):public SolrDisMaxQuery
(string $fields):public SolrDisMaxQuery
(void):public SolrDisMaxQuery
(void):public SolrDisMaxQuery
(string $fieldName, string $fieldValue):public bool
(void):public bool
(void):public void
(void):public
(void):public SolrDocumentField
(string $fieldName):public bool
(void):public void
(string $fieldName):public bool
(string $fieldName):public SolrDocumentField
(void):public array
(void):public int
(string $fieldName):public SolrDocumentField
(void):public int
(void):public array
(void):public SolrInputDocument
(void):public bool
(string $fieldName):public bool
(void):public string
(SolrDocument $sourceDoc [, bool $overwrite = TRUE]):public bool
(void):public void
(string $fieldName):public bool
(string $fieldName):public SolrDocumentField
(string $fieldName, string $fieldValue):public void
(string $fieldName):public void
(void):public bool
(void):public void
(void):public string
(string $fieldName, string $fieldValue):public bool
(int $sortOrderBy [, int $sortDirection = SolrDocument::SORT_ASC]):public bool
(void):public array
(string $serialized):public void
(string $fieldName):public bool
(void):public bool
(void):public
(void):public void
(void):public array
(void):public
(void):public void
(void):public array
(void):public array
(SolrInputDocument $child):public void
(array &$docs):public void
(string $fieldName, string $fieldValue [, float $fieldBoostValue = 0.0]):public bool
(void):public bool
(void):public void
(void):public
(string $fieldName):public bool
(void):public void
(string $fieldName):public bool
(void):public float
(void):public array
(void):public int
(string $fieldName):public SolrDocumentField
(string $fieldName):public float
(void):public int
(void):public array
(void):public bool
(SolrInputDocument $sourceDoc [, bool $overwrite = TRUE]):public bool
(void):public bool
(float $documentBoostValue):public bool
(string $fieldName, float $fieldBoostValue):public bool
(int $sortOrderBy [, int $sortDirection = SolrInputDocument::SORT_ASC]):public bool
(void):public array
(void):public
(void):public void
(void):public
(void):public void
(void):public array
(string $property_name):public bool
(string $property_name):public mixed
(string $property_name, string $property_value):public void
(string $property_name):public void
(string $name, string $value):final public SolrParams
(string $name, string $value):public SolrParams
(string $param_name):final public mixed
([string $param_name]):final public mixed
(void):final public array
(void):final public array
(void):final public string
(string $name, string $value):final public void
(string $name, string $value):public SolrParams
([bool $url_encode = FALSE]):final public string
(string $serialized):final public void
(void):public
(void):public void
(void):public string
(string $fq):public SolrQuery
(string $field [, string $order]):public SolrQuery
(string $dateField):public SolrQuery
(string $value [, string $field_override]):public SolrQuery
(string $field):public SolrQuery
(string $facetQuery):public SolrQuery
(string $field):public SolrQuery
(string $fq):public SolrQuery
(string $value):public SolrQuery
(string $value):public SolrQuery
(string $value):public SolrQuery
(string $field [, int $order]):public SolrQuery
(string $field):public SolrQuery
(string $field):public SolrQuery
(string $field, float $boost):public SolrQuery
(string $field [, int $order = SolrQuery::ORDER_DESC]):public SolrQuery
(string $field):public SolrQuery
(string $field):public SolrQuery
(SolrCollapseFunction $collapseFunction):public SolrQuery
([string $q]):public
(void):public void
(void):public bool
(void):public array
(void):public array
(void):public int
(void):public array
(void):public bool
([string $field_override]):public string
(void):public array
([string $field_override]):public string
([string $field_override]):public string
([string $field_override]):public array
([string $field_override]):public string
(void):public array
([string $field_override]):public int
([string $field_override]):public string
([string $field_override]):public int
([string $field_override]):public bool
([string $field_override]):public int
([string $field_override]):public string
(void):public array
([string $field_override]):public int
(void):public array
(void):public array
(void):public bool
(void):public int
(void):public bool
(void):public array
(void):public string
(void):public array
(void):public int
(void):public bool
(void):public bool
(void):public int
(void):public array
(void):public array
(void):public bool
(void):public bool
([string $field_override]):public string
(void):public array
([string $field_override]):public string
([string $field_override]):public string
([string $field_override]):public int
(void):public bool
([string $field_override]):public int
(void):public int
([string $field_override]):public bool
(void):public int
(void):public string
(void):public float
(void):public bool
([string $field_override]):public string
([string $field_override]):public string
([string $field_override]):public int
(void):public bool
(void):public bool
(void):public bool
(void):public int
(void):public array
(void):public int
(void):public int
(void):public int
(void):public int
(void):public int
(void):public int
(void):public array
(void):public string
(void):public int
(void):public array
(void):public int
(void):public bool
(void):public array
(void):public array
(void):public bool
(void):public string
(void):public bool
(void):public bool
(void):public int
(void):public string
(void):public int
(void):public int
(void):public string
(void):public bool
(void):public int
(void):public string
(void):public int
(string $fq):public SolrQuery
(string $field):public SolrQuery
(string $field):public SolrQuery
(string $value [, string $field_override]):public SolrQuery
(string $field):public SolrQuery
(string $value):public SolrQuery
(string $field):public SolrQuery
(string $fq):public SolrQuery
(string $field):public SolrQuery
(string $field):public SolrQuery
(string $queryField):public SolrQuery
(string $field):public SolrQuery
(string $value):public SolrQuery
(string $field):public SolrQuery
(bool $flag):public SolrQuery
(string $type):public SolrQuery
(bool $value):public SolrQuery
(string $q):public SolrQuery
(int $value):public SolrQuery
(string $query):public SolrQuery
(bool $flag):public SolrQuery
(string $value [, string $field_override]):public SolrQuery
(string $value [, string $field_override]):public SolrQuery
(bool $value [, string $field_override]):public SolrQuery
(string $value [, string $field_override]):public SolrQuery
(int $frequency [, string $field_override]):public SolrQuery
(int $limit [, string $field_override]):public SolrQuery
(string $method [, string $field_override]):public SolrQuery
(int $mincount [, string $field_override]):public SolrQuery
(bool $flag [, string $field_override]):public SolrQuery
(int $offset [, string $field_override]):public SolrQuery
(string $prefix [, string $field_override]):public SolrQuery
(int $facetSort [, string $field_override]):public SolrQuery
(bool $value):public SolrQuery
(int $percent):public SolrQuery
(bool $value):public SolrQuery
(string $value):public SolrQuery
(int $value):public SolrQuery
(string $value):public SolrQuery
(bool $value):public SolrQuery
(int $value):public SolrQuery
(bool $value):public SolrQuery
(bool $flag):public SolrQuery
(string $field [, string $field_override]):public SolrQuery
(string $formatter [, string $field_override]):public SolrQuery
(string $fragmenter [, string $field_override]):public SolrQuery
(int $size [, string $field_override]):public SolrQuery
(bool $flag):public SolrQuery
(int $fieldLength [, string $field_override]):public SolrQuery
(int $value):public SolrQuery
(bool $flag [, string $field_override]):public SolrQuery
(int $maxAnalyzedChars):public SolrQuery
(string $value):public SolrQuery
(float $factor):public SolrQuery
(bool $flag):public SolrQuery
(string $simplePost [, string $field_override]):public SolrQuery
(string $simplePre [, string $field_override]):public SolrQuery
(int $value [, string $field_override]):public SolrQuery
(bool $flag):public SolrQuery
(bool $flag):public SolrQuery
(bool $flag):public SolrQuery
(int $count):public SolrQuery
(int $value):public SolrQuery
(int $value):public SolrQuery
(int $maxWordLength):public SolrQuery
(int $minDocFrequency):public SolrQuery
(int $minTermFrequency):public SolrQuery
(int $minWordLength):public SolrQuery
(bool $flag):public SolrQuery
(string $query):public SolrQuery
(int $rows):public SolrQuery
(bool $flag):public SolrQuery
(int $start):public SolrQuery
(bool $flag):public SolrQuery
(bool $flag):public SolrQuery
(string $fieldname):public SolrQuery
(bool $flag):public SolrQuery
(bool $flag):public SolrQuery
(int $limit):public SolrQuery
(string $lowerBound):public SolrQuery
(int $frequency):public SolrQuery
(int $frequency):public SolrQuery
(string $prefix):public SolrQuery
(bool $flag):public SolrQuery
(int $sortType):public SolrQuery
(string $upperBound):public SolrQuery
(int $timeAllowed):public SolrQuery
(void):public
(void):public void
(void):public string
(void):public int
(void):public string
(void):public string
(void):public string
(void):public string
(void):public string
(void):public string
(void):public SolrObject
([int $parser_mode = 0]):public bool
(void):public bool
(void):public array
(void):public
(void):public void
(string $xmlresponse [, int $parse_mode = 0]):public static SolrObject
(string $str):public static string
(void):public static string
(string $str):public static string
(string $query [, string $index = "*" [, string $comment = ""]]):public int
(array $docs, string $index, string $words [, array $opts]):public array
(string $query, string $index, bool $hits):public array
(void):public bool
(void):public
(string $string):public string
(void):public string
(void):public string
(void):public bool
(string $query [, string $index = "*" [, string $comment = ""]]):public array
(void):public void
(void):public void
(void):public array
(bool $array_result = FALSE):public bool
(float $timeout):public bool
(array $weights):public bool
(string $attribute, array $values [, bool $exclude = FALSE]):public bool
(string $attribute, float $min, float $max [, bool $exclude = FALSE]):public bool
(string $attribute, int $min, int $max [, bool $exclude = FALSE]):public bool
(string $attrlat, string $attrlong, float $latitude, float $longitude):public bool
(string $attribute, int $func [, string $groupsort = "@group desc"]):public bool
(string $attribute):public bool
(int $min, int $max):public bool
(array $weights):public bool
(int $offset, int $limit [, int $max_matches = 0 [, int $cutoff = 0]]):public bool
(int $mode):public bool
(int $qtime):public bool
(string $attribute, int $type, array $values):public bool
(int $ranker):public bool
(int $count [, int $delay = 0]):public bool
(string $clause):public bool
(string $server, int $port):public bool
(int $mode [, string $sortby]):public bool
(void):public array
(string $index, array $attributes, array $values [, bool $mva = FALSE]):public int
(mixed $index, mixed $newval):public void
(void):public mixed
(void):public
(void):public int
(void):public mixed
(void):public int
(void):public bool
(void):public mixed
(void):public void
(mixed $index):public bool
(mixed $index):public mixed
(mixed $index, mixed $newval):public void
(mixed $index):public void
(void):public mixed
(void):public void
(mixed $value):public void
(void):public void
(void):public string
(int $mode):public void
(void):public mixed
(void):public mixed
(string $serialized):public void
(mixed $value):public void
(void):public bool
([bool $include_default = FALSE]):public array
(string $file_name):public
(void):public int
([string $suffix]):public string
(void):public int
(void):public string
([string $class_name]):public SplFileInfo
(void):public string
(void):public int
(void):public int
(void):public string
(void):public int
(void):public int
(void):public string
([string $class_name]):public SplFileInfo
(void):public string
(void):public int
(void):public string
(void):public int
(void):public string
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
([string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context = NULL]]]):public SplFileObject
([string $class_name = "SplFileObject"]):public void
([string $class_name = "SplFileInfo"]):public void
(void):public void
(string $filename [, string $open_mode = "r" [, bool $use_include_path = FALSE [, resource $context]]]):public
(void):public string|array
(void):public bool
(void):public bool
(void):public string
([string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]]):public array
(void):public string
([string $allowable_tags]):public string
(int $operation [, int &$wouldblock]):public bool
(void):public int
(array $fields [, string $delimiter = "," [, string $enclosure = '"' [, string $escape = "\\"]]]):public int
(int $length):public string
(string $format [, mixed &$...]):public mixed
(int $offset [, int $whence = SEEK_SET]):public int
(void):public array
(void):public int
(int $size):public bool
(string $str [, int $length]):public int
(void):public void
(void):public array
(void):public string
(void):public int
(void):public int
(void):public bool
(void):public int
(void):public void
(void):public void
(int $line_pos):public void
([string $delimiter = "," [, string $enclosure = "\"" [, string $escape = "\\"]]]):public void
(int $flags):public void
(int $max_len):public void
(void):public void
(void):public bool
([int $size = 0]):public
(void):public int
(void):public mixed
(array $array [, bool $save_indexes = TRUE]):public static SplFixedArray
(void):public int
(void):public int
(void):public void
(int $index):public bool
(int $index):public mixed
(int $index, mixed $newval):public void
(int $index):public void
(void):public void
(int $size):public bool
(void):public array
(void):public bool
(void):public void
(mixed $value1, mixed $value2):abstract protected int
(void):public
(void):public int
(void):public mixed
(void):public mixed
(mixed $value):public void
(void):public bool
(void):public bool
(void):public mixed
(void):public void
(void):public void
(void):public void
(void):public mixed
(void):public bool
(mixed $value1, mixed $value2):protected int
(mixed $value1, mixed $value2):protected int
(SplObjectStorage $storage):public void
(object $object [, mixed $data = NULL]):public void
(object $object):public bool
(void):public int
(void):public object
(object $object):public void
(object $object):public string
(void):public mixed
(void):public int
(void):public void
(object $object):public bool
(object $object):public mixed
(object $object [, mixed $data = NULL]):public void
(object $object):public void
(SplObjectStorage $storage):public void
(SplObjectStorage $storage):public void
(void):public void
(void):public string
(mixed $data):public void
(string $serialized):public void
(void):public bool
(SplSubject $subject):abstract public void
(mixed $priority1, mixed $priority2):public int
(void):public
(void):public int
(void):public mixed
(void):public mixed
(void):public int
(mixed $value, mixed $priority):public void
(void):public bool
(void):public bool
(void):public mixed
(void):public void
(void):public void
(void):public void
(int $flags):public void
(void):public mixed
(void):public bool
(void)
(void):mixed
(mixed $value):void
(int $mode):void
(void)
(int $mode):void
(SplObserver $observer):abstract public void
(SplObserver $observer):abstract public void
(void):abstract public void
([int $max_memory]):public
([mixed $initial_value [, bool $strict]])
(string $str1, string $str2 [, string &$error]):public bool
(void):public
(string $text [, string &$error]):public bool
(string $locale_list):public void
(int $checks):public void
(int $msecs):public bool
(void):public int
(void):public bool
(string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = NULL]]):public
(string $name, mixed $step_callback, mixed $final_callback [, int $argument_count = -1]):public bool
(string $name, callable $callback):public bool
(string $name, mixed $callback [, int $argument_count = -1 [, int $flags = 0]]):public bool
([bool $enableExceptions = FALSE]):bool
(string $value):public static string
(string $query):public bool
(void):public int
(void):public string
(void):public int
(string $shared_library):public bool
(string $filename [, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE [, string $encryption_key = NULL]]):public void
(string $table, string $column, int $rowid [, string $dbname = "main" [, int $flags = SQLITE3_OPEN_READONLY]]):public resource
(string $query):public SQLite3Stmt
(string $query):public SQLite3Result
(string $query [, bool $entire_row = FALSE]):public mixed
(void):public static array
(int $column_number):public string
(int $column_number):public int
([int $mode = SQLITE3_BOTH]):public array
(void):public bool
(void):public int
(void):public bool
(mixed $sql_param, mixed &$param [, int $type]):public bool
(mixed $sql_param, mixed $value [, int $type]):public bool
(void):public bool
(void):public bool
(void):public SQLite3Result
(void):public int
(void):public bool
(void):public bool
(string $transaction_id [, array $headers]):public bool
(resource $link, string $transaction_id [, array $headers]):bool
(mixed $msg [, array $headers]):public bool
(resource $link, mixed $msg [, array $headers]):bool
(string $transaction_id [, array $headers]):public bool
(resource $link, string $transaction_id [, array $headers]):bool
(string $transaction_id [, array $headers]):public bool
(resource $link, string $transaction_id [, array $headers]):bool
([string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers]]]]):public
([string $broker = ini_get("stomp.default_broker_uri") [, string $username [, string $password [, array $headers]]]]):resource
(void):public bool
(resource $link):bool
(void):public string
(resource $link):string
(void):public string
(void):public array
(resource $link):array
(void):public string
(resource $link):string
(void):public bool
(resource $link):bool
([string $class_name = "stompFrame"]):public stompframe
(resource $link):array
(string $destination, mixed $msg [, array $headers]):public bool
(resource $link, string $destination, mixed $msg [, array $headers]):bool
(int $seconds [, int $microseconds]):public void
(resource $link, int $seconds [, int $microseconds]):void
(string $destination [, array $headers]):public bool
(resource $link, string $destination [, array $headers]):bool
(string $destination [, array $headers]):public bool
(resource $link, string $destination [, array $headers]):bool
([string $command [, array $headers [, string $body]]])
(void)
(void)
(void):public bool
(string $path, int $options):public bool
(void):public string
(void):public bool
(string $path, int $mode, int $options):public bool
(string $path_from, string $path_to):public bool
(string $path, int $options):public bool
(int $cast_as):public resource
(void):public void
(void):public bool
(void):public bool
(int $operation):public bool
(string $path, int $option, mixed $value):public bool
(string $path, string $mode, int $options, string &$opened_path):public bool
(int $count):public string
(int $offset, int $whence = SEEK_SET):public bool
(int $option, int $arg1, int $arg2):public bool
(void):public array
(void):public int
(int $new_size):public bool
(string $data):public int
(string $path):public bool
(string $path, int $flags):public array
(void):public
(array $problem, int $number_of_folds):public float
(void):public array
(array $params):public bool
(array $problem [, array $weights]):public SVMModel
(void):public bool
([string $filename]):public
(void):public array
(void):public int
(void):public int
(void):public float
(string $filename):public bool
(array $data):public float
(array $data):public float
(string $filename):public bool
(string $script)
(mixed $file [, mixed $alphafile])
(void):float
(void):float
(SWFAction $action, int $flags):void
(SWFSound $sound, int $flags):SWFSoundInstance
(SWFShape $shape, int $flags):void
(void)
(SWFAction $action):void
(SWFShape $shape):void
(SWFShape $shape):void
(int $flag):void
(SWFShape $shape):void
(SWFShape $shape):void
(SWFAction $action, int $flags):void
(int $red, int $green, int $blue [, int $a]):void
(void):void
(void):float
(void):float
(void):float
(void):float
(void):float
(void):float
(void):float
(float $dx, float $dy):void
(float $x, float $y):void
(float $red, float $green, float $blue [, float $a]):void
(void):void
(float $angle):void
(float $angle):void
(float $dx, float $dy):void
(float $x [, float $y]):void
(int $depth):void
(int $level):void
(float $a, float $b, float $c, float $d, float $x, float $y):void
(string $name):void
(float $ratio):void
(float $ddegrees):void
(float $degrees):void
(float $ddegrees):void
(float $degrees):void
(float $x, float $y):void
(float $angle):void
(float $x [, float $y]):void
(float $x):void
(float $y):void
(string $filename)
(void):float
(void):float
(void):float
(int $code):string
(string $string):float
(string $string):float
(string $char):void
(string $char):void
(float $ratio, int $red, int $green, int $blue [, int $alpha = 255]):void
(void)
(void)
(void):SWFShape
(void):SWFShape
(object $instance):mixed
(SWFCharacter $char, string $name):void
(SWFFont $font):mixed
([int $version])
(string $libswf, string $name):SWFSprite
(string $libswf, string $name):SWFFontChar
(string $label):void
(void):void
([int $compression]):int
(object $instance):void
(string $filename [, int $compression = -1]):int
(resource $x [, int $compression = -1]):int
(int $red, int $green, int $blue):void
(float $width, float $height):void
(int $number):void
(float $rate):void
(SWFSound $sound):SWFSoundInstance
(SWFSound $sound):void
(mixed $mp3file [, float $skip = 0]):int
(void):void
(mixed $file)
(int $red, int $green, int $blue [, int $alpha = 255]):SWFFill
(void)
(float $r, float $startAngle, float $endAngle):void
(float $r):void
(float $bx, float $by, float $cx, float $cy, float $dx, float $dy):int
(float $bx, float $by, float $cx, float $cy, float $dx, float $dy):int
(float $controldx, float $controldy, float $anchordx, float $anchordy [, float $targetdx], float $targetdy):int
(float $controlx, float $controly, float $anchorx, float $anchory [, float $targetx], float $targety):int
(SWFFont $font, string $character [, int $size]):void
(float $dx, float $dy):void
(float $x, float $y):void
(float $dx, float $dy):void
(float $x, float $y):void
(SWFGradient $fill):void
(SWFShape $shape):void
(SWFGradient $fill):void
(string $filename [, int $flags = 0])
(int $point):void
(int $point):void
(int $point):void
(void):void
(object $object):void
(void)
(string $label):void
(void):void
(object $object):void
(int $number):void
(SWFSound $sount):SWFSoundInstance
(SWFSound $sount):void
(string $string):void
(string $text):void
(void)
(void):float
(void):float
(void):float
(string $string):float
(string $string):float
(float $x, float $y):void
(int $red, int $green, int $blue [, int $a = 255]):void
(SWFFont $font):void
(float $height):void
(float $spacing):void
(string $chars):void
(string $string):void
(int $alignement):void
([int $flags])
(float $width, float $height):void
(int $red, int $green, int $blue [, int $a = 255]):void
(SWFFont $font):void
(float $height):void
(float $width):void
(float $width):void
(float $height):void
(float $left, float $right):void
(string $name):void
(float $padding):void
(float $width):void
([string $file])
(void):int
(int $x, int $y):void
(string $index_names):void
(string $index_name):array
(string $index_name):array
([string $query]):object
(string $query):object
(void):array
(string $word):array
(string $index_name):array
(string $index_name):array
(void):object
(int $position):int
([string $query]):object
(void):void
(string $property, string $low, string $high):void
(string $delimiter):void
(string $sort):void
(int $structure):void
(string $hostname, callable $callback):public static void
(string $filename, callable $callback [, integer $chunk_size [, integer $offset]]):public static bool
(string $filename, callable $callback):public static void
(array $settings):public static void
(string $filename, string $content [, integer $offset [, callable $callback]]):public static void
(string $filename, string $content [, callable $callback [, string $flags]]):public static void
([integer $add_value]):public integer
(integer $cmp_value, integer $new_value):public integer
([integer $value]):public
(void):public integer
(integer $value):public integer
([integer $sub_value]):public integer
(string $data):public integer
(void):public void
([integer $size]):public
(void):public void
(integer $size):public integer
(integer $offset, integer $length):public string
(void):public void
(integer $offset [, integer $length [, bool $remove]]):public string
(void):public string
(integer $offset, string $data):public void
(string $size):public
(void):public void
(void):public mixed
(string $data):public bool
(void):public array
([bool $force]):public bool
(string $host [, integer $port [, integer $timeout [, integer $flag]]]):public bool
(int $sock_type [, integer $is_async]):public
(void):public void
(void):public array
(void):public array
(void):public bool
(string $event, callable $callback):public void
(void):public void
(string $socket):public void
([string $size [, string $flag]]):public void
(void):public void
(string $data [, string $flag]):public integer
(string $filename [, int $offset]):public boolean
(string $ip, integer $port, string $data):public boolean
(array $settings):public void
(void):public void
(void):public void
(void):public int
(void):public Connection
(void):public int
(void):public Connection
(int $index):public boolean
(string $index):public Connection
(int $offset, mixed $connection):public void
(int $offset):public void
(void):public void
(void):public boolean
(void):public ReturnType
(void):public ReturnType
(void):public
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(void):public ReturnType
(callable $callback, array $param_array):public static mixed
(callable $callback [, mixed $parameter [, mixed $...]]):public static mixed
(void):public static ReturnType
(void):public static ReturnType
(void):public static ReturnType
(void):public static ReturnType
(void):public static ReturnType
(int $fd, callable $read_callback [, callable $write_callback [, string $events]]):public static boolean
(mixed $callback):public static void
(string $fd):public static boolean
(void):public static void
(int $fd [, string $read_callback [, string $write_callback [, string $events]]]):public static boolean
(void):public static void
(string $fd, string $data):public static void
(string $path, string $name [, string $type [, string $filename [, string $offset]]]):public void
(void):public void
(string $host [, string $port [, boolean $ssl]]):public
(void):public void
(string $path, string $file, callable $callback [, integer $offset]):public void
(string $path, string $callback):public void
(string $path, callable $callback):public void
(void):public boolean
(string $event_name, callable $callback):public void
(string $path, string $data, callable $callback):public void
(string $data [, string $opcode [, string $finish]]):public void
(array $settings):public void
(array $cookies):public void
(string $data):public ReturnType
(array $headers):public void
(string $method):public void
(string $path, string $callback):public void
(void):public void
(void):public string
(string $name [, string $value [, string $expires [, string $path [, string $domain [, string $secure [, string $httponly]]]]]]):public string
(void):public void
([string $content]):public void
([string $compress_level]):public ReturnType
(string $key, string $value [, string $ucwords]):public void
(void):public ReturnType
(string $name [, string $value [, string $expires [, string $path [, string $domain [, string $secure [, string $httponly]]]]]]):public ReturnType
(string $filename [, int $offset]):public ReturnType
(string $http_code):public ReturnType
(string $content):public void
(string $event_name, callable $callback):public void
(void):public void
([string $type [, string $file_lock_location]]):public
(void):public void
(void):public void
(void):public void
(void):public void
(void):public void
(void):public void
(string $filename [, string $size [, string $offset]]):public static ReturnType
(void):public void
(array $server_config, callable $callback):public void
(void):public
(void):public void
(void):public ReturnType
(string $event_name, callable $callback):public void
(string $sql, callable $callback):public ReturnType
(integer $interval_usec):public static void
(void):public void
(callable $callback [, boolean $redirect_stdin_and_stdout [, integer $pipe_type]]):public
([boolean $nochdir [, boolean $noclose]]):public static void
(void):public void
(string $exec_file, string $args):public ReturnType
([string $exit_code]):public void
(void):public void
(integer $pid [, string $signal_no]):public static void
(string $process_name):public void
([integer $maxsize]):public mixed
(string $data):public boolean
([integer $maxsize]):public string
(string $signal_no, callable $callback):public static void
(void):public void
(void):public array
(integer $key [, integer $mode]):public boolean
([boolean $blocking]):public static array
(string $data):public integer
(string $type [, string $value]):public static ReturnType
(string $command, string $callback [, string $number_of_string_param [, string $type_of_array_param]]):public ReturnType
(void):public ReturnType
(string $data [, int $is_fast]):public static ReturnType
(string $data [, string $args]):public static ReturnType
(void):private
(void):public void
(string $event_name, callable $callback):public ReturnType
(array $settings):public void
(string $host, integer $port, string $socket_type):public void
(swoole_process $process):public boolean
(integer $after_time_ms, callable $callback [, string $param]):public ReturnType
(integer $fd, integer $uid):public boolean
(integer $timer_id):public void
(integer $timer_id):void
(integer $fd [, boolean $reset]):public boolean
(integer $fd):public boolean
(integer $fd [, integer $reactor_id]):public array
(integer $start_fd [, integer $pagesize]):public array
(string $host [, integer $port [, integr $mode [, integer $sock_type]]]):public
(callable $callback):public void
(integer $fd):public boolean
(string $data):public void
(integer $fd [, integer $reactor_id]):public ReturnType
(integer $start_fd [, integer $pagesize]):public array
(void):public integer
(boolean $if_close_connection):public mixed
(string $host, integer $port, string $socket_type):public boolean
(string $event_name, callable $callback):public void
(integer $fd):public void
(integer $fd [, boolean $is_protected]):public void
(void):public boolean
(integer $fd):public void
(integer $fd, string $data [, integer $reactor_id]):public boolean
(integer $fd, string $filename [, integer $offset]):public boolean
(integer $worker_id, string $data):public boolean
(string $ip, integer $port, string $data [, string $server_socket]):public boolean
(integer $fd, string $data):public boolean
(array $settings):public ReturnType
(void):public void
(void):public void
(void):public array
([integer $worker_id]):public boolean
(string $data [, integer $dst_worker_id [, callable $callback]]):public mixed
(string $data [, float $timeout [, integer $worker_id]]):public void
(array $tasks [, double $timeout_ms]):public void
(integer $interval_ms, callable $callback):public void
(string $name, string $type [, integer $size]):public ReturnType
(integer $table_size):public
(void):public integer
(void):public void
(void):public array
(string $key, string $column [, integer $decrby]):public ReturnType
(string $key):public void
(void):public void
(string $key):public boolean
(string $row_key, string $column_key):public integer
(string $key, string $column [, integer $incrby]):public void
(void):public string
(void):public ReturnType
(void):public void
(string $key, array $value):public VOID
(void):public boolean
(int $after_time_ms, callable $callback):public static void
(integer $timer_id):public static void
(integer $timer_id):public static boolean
(integer $interval_ms, callable $callback [, string $param]):public static void
(integer $fd):public boolean
(string $event_name, callable $callback):public ReturnType
(string $data [, string $opcode [, string $finish [, string $mask]]]):public static binary
(string $fd, string $data [, string $opcode [, string $finish]]):public void
(binary $data):public static string
([string $name [, bool $manual = FALSE [, bool $prefire = FALSE]]]):public
(void):public bool
(void):public bool
([int $wait = -1]):public bool
([string $name]):public
([int $wait = -1]):public bool
([bool $all = FALSE]):public bool
([string $name [, bool $autounlock = TRUE]]):public
([int $wait = -1]):public bool
(void):public bool
([int $wait = -1]):public bool
(void):public bool
([string $name [, int $initialval = 1 [, bool $autounlock = TRUE]]]):public
([int $wait = -1]):public bool
([int &$prevcount]):public bool
(string $name, int $size):public
(void):public bool
([int $start = 0 [, int $length]]):public
(void):public bool
([string $string [, int $start = 0]]):public
(void):public string
(void):public string
(void):public string
(void):public string
(void):public string
(void):public int
(void):public int
(void):public bool
(void):public void
(void):public int
(void):public static Thread
(void):public static int
(void):public int
(void):public static mixed
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public void
([int $options]):public bool
(int $size, bool $preserve):public array
(void):public int
(string $class):public bool
(Closure $run [, Closure $construct [, array $args]]):public Threaded
(void):public array
(void):public bool
(void):public bool
(void):public bool
(mixed $from [, bool $overwrite]):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public void
(void):public mixed
(Closure $block [, mixed $...]):public mixed
(void):public bool
([int $timeout]):public bool
(void):abstract public int
(void):abstract public string
(void):abstract public int
(void):abstract public string
(void):abstract public Throwable
(void):abstract public array
(void):abstract public string
(void):abstract public string
(void):tidyNode
(tidy $object):tidyNode
(void):bool
(tidy $object):bool
([string $filename [, mixed $config [, string $encoding [, bool $use_include_path]]]])
(void):bool
(tidy $object):bool
(void):array
(tidy $object):array
(void):int
(tidy $object):int
(string $option):mixed
(tidy $object, string $option):mixed
(string $optname):string
(tidy $object, string $optname):string
(void):string
(void):string
(void):int
(tidy $object):int
(void):tidyNode
(tidy $object):tidyNode
(void):tidyNode
(tidy $object):tidyNode
(void):bool
(tidy $object):bool
(void):bool
(tidy $object):bool
(string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]]):bool
(string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]]):tidy
(string $input [, mixed $config [, string $encoding]]):bool
(string $input [, mixed $config [, string $encoding]]):tidy
(tidy $tidy):string
(tidy $tidy):string
(string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]]):string
(string $filename [, mixed $config [, string $encoding [, bool $use_include_path = FALSE]]]):string
(string $data [, mixed $config [, string $encoding]]):string
(string $data [, mixed $config [, string $encoding]]):string
(void):tidyNode
(tidy $object):tidyNode
(void):tidyNode
(void):bool
(void):bool
(void):bool
(void):bool
(void):bool
(void):bool
(void):bool
(void):bool
(string $key, number $increment [, int $type = 0]):public number
(string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]]):public TokyoTyrant
(string $uri):public TokyoTyrant
([string $host [, int $port = TokyoTyrant::RDBDEF_PORT [, array $options]]]):public
(string $path):public TokyoTyrant
(string $name, int $options, string $key, string $value):public string
(string $prefix, int $max_recs):public array
(mixed $keys):public mixed
(void):public TokyoTyrantIterator
(void):public int
(mixed $keys):public TokyoTyrant
(mixed $keys [, string $value = NULL]):public TokyoTyrant
(mixed $keys [, string $value]):public TokyoTyrant
(mixed $keys [, string $value]):public TokyoTyrant
(mixed $keys [, string $value = NULL]):public TokyoTyrant
(string $key, string $value, int $width):public mixed
(string $log_dir, int $timestamp [, bool $check_consistency = TRUE]):public mixed
(string $host, int $port, int $timestamp [, bool $check_consistency = TRUE]):public mixed
(string $key):public int
(void):public array
(void):public mixed
(float $timeout [, int $options = TokyoTyrant::RDBT_RECON]):public TokyoTyrant
(void):public mixed
(mixed $object):public
(void):public mixed
(void):public mixed
(void):public mixed
(void):public void
(void):public bool
(string $name, int $op, string $expr):public mixed
(TokyoTyrantTable $table):public
(void):public int
(void):public array
(void):public string
(void):public string
(array $queries, int $type):public array
(void):public array
(void):public TokyoTyrantQuery
(void):public bool
(void):public array
([int $max [, int $skip]]):public mixed
(string $name, int $type):public mixed
(void):public bool
(string $key, mixed $increment [, string $type]):public void
(void):public int
(mixed $keys):public array
(void):public TokyoTyrantIterator
(void):public TokyoTyrantQuery
(mixed $keys):public void
(string $key, array $columns):public int
(string $key, array $columns):public void
(string $key, array $columns):public void
(mixed $keys [, string $value]):public void
(string $key, string $value, int $width):public void
(string $column, int $type):public mixed
(void)
(string $id [, int $direction]):public static Transliterator
(string $id [, int $direction]):Transliterator
(string $rules [, string $direction]):public static Transliterator
(string $id [, int $direction]):Transliterator
(void):public Transliterator
(void):Transliterator
(void):public int
(void):int
(void):public string
(void):string
(void):public static array
(void):array
(string $subject [, int $start [, int $end]]):public string
(mixed $transliterator, string $subject [, int $start [, int $end]])
([string $destination_encoding [, string $source_encoding]]):public
(string $str [, bool $reverse]):public string
(int $reason, string $source, string $codePoint, int &$error):public mixed
(string $name):public static array
(void):public static array
(void):public string
(void):public int
(void):public int
(void):public string
(void):public string
(void):public int
(void):public static array
(void):public string
([int $reason]):public static string
(string $encoding):public void
(string $encoding):public void
(string $chars):public void
(int $reason, string $source, string $codeUnits, int &$error):public mixed
(string $str, string $toEncoding, string $fromEncoding [, array $options]):public static string
(UI\Draw\Pen $pen, UI\Size $areaSize, UI\Point $clipPoint, UI\Size $clipSize):protected
(string $key, int $ext, int $flags):protected
(UI\Point $areaPoint, UI\Size $areaSize, int $flags):protected
(void):public
(UI\Point $point, UI\Size $size):public
(UI\Size $size):public
(void):public
(void):public
(void):public
(void):public UI\Control
(void):public int
(void):public
(void):public bool
(void):public bool
(UI\Control $parent):public
(void):public
(Control $control [, bool $stretchy = FALSE]):public int
([int $orientation = UI\Controls\Box::Horizontal]):public
(int $index):public bool
(void):public int
(void):public bool
(bool $padded):public
(string $text):public
(void):public string
(void):protected
(string $text):public
(string $text):public
(void):public string
(void):public bool
(void):protected
(bool $checked):public
(string $text):public
(void):public UI\Color
(void):protected
(UI\Draw\Color $color):public
(string $text):public
(void):public int
(void):protected
(int $index):public
(string $text):public
(void):public string
(void):protected
(string $text):public
([int $type = UI\Controls\Entry::Normal]):public
(void):public string
(void):public bool
(void):protected
(bool $readOnly):public
(string $text):public
(string $label, UI\Control $control [, bool $stretchy = FALSE]):public int
(int $index):public bool
(void):public bool
(bool $padded):public
(UI\Control $control, int $left, int $top, int $xspan, int $yspan, bool $hexpand, int $halign, bool $vexpand, int $valign):public
(void):public bool
(bool $padding):public
(UI\Control $control):public
(string $title):public
(void):public string
(void):public bool
(bool $margin):public
(string $title):public
(string $text):public
(void):public string
(string $text):public
(string $text):public
([int $type]):public
(void):public string
(void):public bool
(void):protected
(bool $readOnly):public
(string $text):public
([int $type = UI\Controls\Picker::Date]):public
(void):public int
(int $value):public
(string $text):public
(void):public int
(void):protected
(int $index):public
([int $type = UI\Controls\Separator::Horizontal]):public
(int $min, int $max):public
(void):public int
(void):protected
(int $value):public
(int $min, int $max):public
(void):public int
(void):protected
(int $value):public
(string $name, UI\Control $control):public int
(int $index):public bool
(int $page):public bool
(string $name, int $page, UI\Control $control):public
(void):public int
(int $page, bool $margin):public
(float $position, UI\Draw\Color $color):public int
(int $index):public int
(int $index, float $position, UI\Draw\Color $color):public bool
(UI\Point $start, UI\Point $end):public
(UI\Point $start, UI\Point $outer, float $radius):public
(UI\Draw\Color $color):public
(void):public UI\Draw\Color
(UI\Draw\Color $color):public void
([UI\Draw\Color $color]):public
(int $channel):public float
(int $channel, float $value):public void
(void):public
(void):public bool
(UI\Draw\Matrix $matrix):public UI\Draw\Matrix
(UI\Point $point, float $amount):public
(UI\Point $center, UI\Point $point):public
(UI\Point $point, UI\Point $amount):public
(UI\Point $point):public
(UI\Point $point, UI\Size $size):public
(UI\Point $point, float $radius, float $angle, float $sweep, float $negative):public
(UI\Point $point, float $radius, float $angle, float $sweep, float $negative):public
(void):public
([int $mode = UI\Draw\Path::Winding]):public
(void):public
(UI\Point $point, float $radius, float $angle, float $sweep, float $negative):public
(UI\Point $point):public
(UI\Point $point, float $radius, float $angle, float $sweep, float $negative):public
(UI\Draw\Path $path):public
(UI\Draw\Path $path, UI\Draw\Brush $with):public
(void):public
(void):public
(UI\Draw\Path $path, UI\Draw\Brush $with, UI\Draw\Stroke $stroke):public
(UI\Draw\Matrix $matrix):public
(UI\Point $point, UI\Draw\Text\Layout $layout):public
([int $cap = UI\Draw\Line\Cap::Flat [, int $join = UI\Draw\Line\Join::Miter [, float $thickness = 1 [, float $miterLimit = 10]]]]):public
(void):public int
(void):public int
(void):public float
(void):public float
(int $cap):public
(int $join):public
(float $limit):public
(float $thickness):public
(string $family, float $size [, int $weight = UI\Draw\Text\Font\Weight::Normal [, int $italic = UI\Draw\Text\Font\Italic::Normal [, int $stretch = UI\Draw\Text\Font\Stretch::Normal]]]):public
(void):public string
(void):public int
(void):public float
(void):public int
(void):public int
(UI\Draw\Text\Font\Descriptor $descriptor):public
(void):public float
(void):public float
(void):public float
(void):public float
(void):public float
(string $text, UI\Draw\Text\Font $font, float $width):public
(UI\Draw\Color $color [, int $start = 0 [, int $end]]):public
(float $width):public
(void):public
(void):public void
(void):abstract protected void
(int $microseconds):public bool
(string $name [, string $type = UI\MenuItem::class]):public UI\MenuItem
([string $type = UI\MenuItem::class]):public UI\MenuItem
(string $name [, string $type = UI\MenuItem::class]):public UI\MenuItem
([string $type = UI\MenuItem::class]):public UI\MenuItem
([string $type = UI\MenuItem::class]):public UI\MenuItem
(void):public
(string $name):public
(void):public
(void):public
(void):public bool
(void):protected
(bool $checked):public
(float $point):public static UI\Point
(float $x, float $y):public
(void):public float
(void):public float
(float $point):public
(float $point):public
(float $width, float $height):public
(void):public float
(void):public float
(float $size):public static UI\Size
(float $size):public
(float $size):public
(UI\Control $control):public
(string $title, Size $size [, bool $menu = FALSE]):public
(string $title, string $msg):public
(void):public UI\Size
(void):public string
(void):public bool
(void):public bool
(void):public bool
(string $title, string $msg):public
(void):protected int
(void):public string
(void):public string
(bool $borders):public
(bool $full):public
(bool $margin):public
(UI\Size $size):public
(string $title):public
([string $object_name = "PHP" [, array $variables = array() [, array $extensions = array() [, bool $report_uncaught_exceptions = TRUE]]]]):public
(string $script [, string $identifier = "V8Js::executeString()" [, int $flags = V8Js::FLAG_NONE]]):public mixed
(void):public static array
(void):public V8JsException
(string $extension_name, string $script [, array $dependencies = array() [, bool $auto_enable = FALSE]]):public static bool
(void):final public string
(void):final public int
(void):final public string
(void):final public string
(void):public bool
(string $vcl_regex):public int
(string $vcl_regex):public int
(void):public int
(void):public bool
([array $args]):public
(void):public bool
(void):public string
(void):public array
(void):public bool
(int $compat):public void
(string $host):public void
(string $ident):public void
(string $name, string|integer $value):public int
(int $port):public void
(string $secret):public void
(int $timeout):public void
(void):public int
(void):public int
([array $args]):public
(void):public array
(int $index):public static string
([array $args]):public
(void):public array
(string $sheetName):public
(string $scope):public
(string $fileName [, string $sheetName]):public
(array $config):public
(array $data):public
(string $fileName [, string $sheetName]):public
(void):public
(array $headerData):public
(int $row, int $column, string $formula):public
(int $row, int $column, string $localImagePath):public
(int $row, int $column, stringintdouble $data [, string $format]):public
(string $scope, string $data):public
(void):public
(string $range, float $width [, resource $format]):public
(string $range, float $height [, resource $format]):public
(resource $handle, int $style):public
(resource $handle):public
(resource $handle):public
(resource $handle, int $style):public
(void):public
(void):public int
(void):public mixed
(void):public object
(void):public void
(object $object):public bool
(object $object):public mixed
(object $object, mixed $value):public void
(object $object):public void
(void):public void
(void):public bool
(void):public bool
(object $object):public
(void):public object
(void):public bool
(void):public bool
([string $buffer [, array $settings]]):public
(void):public ?string
(void):public string
(wkhtmltox\PDF\Object $object):public void
([array $settings]):public
(void):public ?string
(void):public string
(string $buffer [, array $settings]):public
([Callable $collector]):public int
(void):public int
(void):public bool
(void):public bool
(void):public bool
(Threaded &$work):public int
(void):public int
(string $nsname):public
(mixed $from, mixed $to):abstract public mixed
(mixed $src, mixed $diff):abstract public mixed
(DOMDocument $from, DOMDocument $to):public DOMDocument
(DOMDocument $src, DOMDocument $diff):public DOMDocument
(string $from, string $to):public string
(string $src, string $diff):public string
(string $from, string $to):public string
(string $src, string $diff):public string
(void):public bool
([DOMNode $basenode]):public DOMNode
(string $name):public string
(int $index):public string
(string $localName, string $namespaceURI):public string
(int $property):public bool
(void):public bool
(string $prefix):public string
(string $name):public bool
(int $index):public bool
(string $localName, string $namespaceURI):public bool
(void):public bool
(void):public bool
(void):public bool
([string $localname]):public bool
(string $URI [, string $encoding [, int $options = 0]]):public bool
(void):public bool
(void):public string
(void):public string
(void):public string
(int $property, bool $value):public bool
(string $filename):public bool
(string $source):public bool
(string $filename):public bool
(string $source [, string $encoding [, int $options = 0]]):public bool
(void)
(string $namespaceURI, string $localName):string
(void):public int
(void):bool
(object $stylesheet):public bool
([mixed $restrict]):void
(string $namespaceURI, string $localName):bool
(string $namespace, string $name, string $value):bool
(string $filename):bool
(int $securityPrefs):public int
(DOMNode $doc):DOMDocument
(DOMDocument $doc, string $uri):int
(object $doc):string
(string $name [, mixed $default_value = NULL]):public static mixed
(string $name):public static bool
([mixed $arg [, mixed $...]]):abstract publicmixed
(void):publicYaf_Controller_Abstract
(void):public staticmixed
([Yaf_Bootstrap_Abstract $bootstrap]):public void
(void):public Yaf_Application
(void):private void
(mixed $config [, string $envrion]):public
(void):public void
(void):public void
(callable $entry, string $...):public void
(void):public Yaf_Application
(void):public Yaf_Config_Abstract
(void):public Yaf_Dispatcher
(void):public string
(void):public int
(void):public array
(void):public void
(string $directory):public Yaf_Application
(void):private void
(void):private void
(string $name, mixed $value):abstract public mixed
(void):abstract public bool
(void):abstract public Yaf_Config_Abstract
(void):abstract public array
(string $config_file [, string $section]):public
(void):public void
(void):public void
([string $name]):public void
(string $name):public void
(void):public void
(void):public void
(string $name):public void
(string $name):public void
(string $name, string $value):public void
(string $name):public void
(void):public void
(void):public void
(string $name, mixed $value):public void
(void):public array
(void):public void
(string $config_file [, string $section]):public
(void):public void
(void):public void
([string $name]):public void
(string $name):public void
(void):public void
(void):public void
(string $name):public void
(string $name):public void
(string $name, string $value):public void
(string $name):public void
(void):public void
(void):public void
(string $name, string $value):public void
(void):public array
(void):public void
(void):final private void
(void):final private
(string $tpl [, array $parameters]):protected bool
(string $action [, array $paramters]):public void
(string $name):public void
(void):public void
(void):public string
(void):public Yaf_Request_Abstract
(void):public Yaf_Response_Abstract
(void):public Yaf_View_Interface
(void):public string
(void):public void
([array $options]):public void
(string $url):public bool
(string $tpl [, array $parameters]):protected string
(string $view_directory):public void
([bool $flag]):public Yaf_Dispatcher
([bool $flag]):public Yaf_Dispatcher
(void):private void
(void):public
(void):public bool
(Yaf_Request_Abstract $request):public Yaf_Response_Abstract
(void):public Yaf_Dispatcher
([bool $flag]):public Yaf_Dispatcher
(void):public Yaf_Application
(void):public static Yaf_Dispatcher
(void):public Yaf_Request_Abstract
(void):public Yaf_Router
(string $templates_dir [, array $options]):public Yaf_View_Interface
(Yaf_Plugin_Abstract $plugin):public Yaf_Dispatcher
(bool $flag):public Yaf_Dispatcher
(string $action):public Yaf_Dispatcher
(string $controller):public Yaf_Dispatcher
(string $module):public Yaf_Dispatcher
(call $callback, int $error_types):public Yaf_Dispatcher
(Yaf_Request_Abstract $request):public Yaf_Dispatcher
(Yaf_View_Interface $view):public Yaf_Dispatcher
(void):private void
([bool $flag]):public Yaf_Dispatcher
(void):private void
(void):public
(void):public void
(void):public void
(void):public void
(void):private void
(void):private
(void):public static void
([bool $is_global = FALSE]):public Yaf_Loader
(void):public void
(void):public static void
(void):public void
(mixed $prefix):public void
(string $directory [, bool $is_global = FALSE]):public Yaf_Loader
(void):private void
(void):private void
(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response):public void
(void):private void
(void):private
(string $name):public static void
(string $name):public static mixed
(string $name):public static bool
(string $name, string $value):public static bool
(void):public void
(void):public void
(void):public void
(string $name [, string $default]):public void
(void):public void
(void):public void
(void):public string
(void):public void
(string $name [, string $default]):public mixed
(void):public array
(void):public void
(string $name [, string $default]):public void
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(void):public bool
(string $action):public void
(string $uir):public bool
(string $controller):public void
(void):public void
(string $module):public void
(string $name [, string $value]):public bool
(string $uir):public void
([string $flag]):public void
(void):private void
([string $request_uri [, string $base_uri]]):public
(string $name [, string $default]):public mixed
(string $name [, string $default]):public mixed
(void):public void
(string $name [, string $default]):public mixed
(string $name [, string $default]):public mixed
(void):public mixed
(void):public void
(void):public bool
(void):private void
([string $method [, string $module [, string $controller [, string $action [, array $params]]]]]):public
(void):public void
(void):public void
(void):public void
(void):public void
(void):public void
(void):public void
(void):public void
(string $content [, string $key]):public bool
([string $key]):public bool
(void):public void
(void):private void
(void):public
(void):public void
([string $key]):public mixed
(void):public void
(string $content [, string $key]):public bool
(void):public void
(void):protected void
(string $content [, string $key]):public bool
(string $name, string $value [, bool $replace]):public bool
(void):public void
(void):private string
(array $info [, array $query]):abstract public string
(Yaf_Request_Abstract $request):abstract public bool
(array $info [, array $query]):public string
([string $controller_prefer = FALSE [, string $delimiter = ""]]):public
(Yaf_Request_Abstract $request):public bool
(array $info [, array $query]):public string
(string $match, array $route [, array $map [, array $verify [, string $reverse]]]):public
(Yaf_Request_Abstract $request):public bool
(array $info [, array $query]):public string
(string $match, array $route [, array $verify]):public
(Yaf_Request_Abstract $request):public bool
(array $info [, array $query]):public string
(string $module_name, string $controller_name, string $action_name):public
(Yaf_Request_Abstract $request):public bool
(array $info [, array $query]):public string
(string $uri):public void
(Yaf_Request_Abstract $request):public bool
(array $info [, array $query]):public string
(string $supervar_name):public
(Yaf_Request_Abstract $request):public bool
(Yaf_Config_Abstract $config):public bool
(string $name, Yaf_Route_Abstract $route):public bool
(void):public
(void):public string
(string $name):public Yaf_Route_Interface
(void):public mixed
(Yaf_Request_Abstract $request):public bool
(void):private void
(void):private
(void):public void
(void):public void
(string $name):public void
(string $name):public void
(void):public static void
(string $name):public void
(string $name):public void
(void):public void
(void):public void
(string $name):public void
(string $name):public void
(string $name, string $value):public void
(string $name):public void
(void):public void
(string $name, string $value):public void
(void):private void
(void):public void
(string $name):public void
(void):public void
(void):private void
(string $name [, string $value]):abstract public bool
(string $tpl [, array $tpl_vars]):abstract public bool
(void):abstract public void
(string $tpl [, array $tpl_vars]):abstract public string
(string $template_dir):abstract public void
(string $name [, mixed $value]):public bool
(string $name, mixed &$value):public bool
([string $name]):public bool
(string $template_dir [, array $options]):final public
(string $tpl [, array $tpl_vars]):public bool
(string $tpl_content [, array $tpl_vars]):public string
([string $name]):public void
(void):public string
(string $name):public void
(string $tpl [, array $tpl_vars]):public string
(string $name, mixed $value):public void
(string $template_dir):public bool
(void):public string
(string $method, array $parameters):public void
(string $url [, array $options]):final public
(int $name, mixed $value):public Yar_Client
(string $uri, string $method [, array $parameters [, callable $callback [, callable $error_callback [, array $options]]]]):public static int
([callable $callback [, callable $error_callback]]):public static bool
(void):public static bool
(void):public string
(Object $obj):final public
(void):public bool
(string $dirname):bool
(string $filename [, string $localname = NULL [, int $start = 0 [, int $length = 0]]]):bool
(string $localname, string $contents):bool
(string $pattern [, int $flags = 0 [, array $options = array()]]):bool
(string $pattern [, string $path = "." [, array $options = array()]]):bool
(void):bool
(void):public int
(int $index):bool
(string $name):bool
(string $destination [, mixed $entries]):bool
([int $flags]):string
(int $index [, int $flags]):string
(string $name [, int $flags]):string
(int $index, int &$opsys, int &$attr [, int $flags]):bool
(string $name, int &$opsys, int &$attr [, int $flags]):bool
(int $index [, int $length = 0 [, int $flags]]):string
(string $name [, int $length = 0 [, int $flags]]):string
(int $index [, int $flags]):string
(void):string
(string $name):resource
(string $name [, int $flags]):int
(string $filename [, int $flags]):mixed
(int $index, string $newname):bool
(string $name, string $newname):bool
(string $comment):bool
(int $index, string $comment):bool
(string $name, string $comment):bool
(int $index, int $comp_method [, int $comp_flags = 0]):bool
(string $name, int $comp_method [, int $comp_flags = 0]):bool
(int $index, string $method [, string $password]):bool
(string $name, int $method [, string $password]):bool
(int $index, int $opsys, int $attr [, int $flags]):bool
(string $name, int $opsys, int $attr [, int $flags]):bool
(string $password):public bool
(int $index [, int $flags]):array
(string $name [, int $flags]):array
(void):bool
(void):bool
(int $index):bool
(string $name):bool
(void):private
([int $io_threads = 1 [, bool $is_persistent = TRUE]])
(string $key):public mixed
(int $type [, string $persistent_id = NULL [, callback $on_new_socket = NULL]]):public ZMQSocket
(void):public bool
(int $key, mixed $value):public ZMQContext
(ZMQSocket $frontend, ZMQSocket $backend [, ZMQSocket $listener])
(void):public ZMQDevice
(void):public ZMQDevice
(void):public void
(callable $cb_func, int $timeout [, mixed $user_data]):public ZMQDevice
(int $timeout):public ZMQDevice
(callable $cb_func, int $timeout [, mixed $user_data]):public ZMQDevice
(int $timeout):public ZMQDevice
(mixed $entry, int $type):public string
(void):public ZMQPoll
(void):public int
(void):public array
(array &$readable, array &$writable [, int $timeout = -1]):public int
(mixed $item):public bool
(string $dsn [, bool $force = FALSE]):public ZMQSocket
(string $dsn [, bool $force = FALSE]):public ZMQSocket
(ZMQContext $context, int $type [, string $persistent_id = NULL [, callback $on_new_socket = NULL]])
(string $dsn):public ZMQSocket
(void):public array
(void):public string
(void):public int
(string $key):public mixed
(void):public bool
([int $mode = 0]):public string
([int $mode = 0]):public string
(string $message [, int $mode = 0]):public ZMQSocket
(array $message [, int $mode = 0]):public ZMQSocket
(int $key, mixed $value):public ZMQSocket
(string $dsn):public ZMQSocket
(string $scheme, string $cert [, callable $completion_cb = NULL]):public bool
(void):public void
(string $host [, callable $watcher_cb = NULL [, int $recv_timeout = 10000]]):public void
([string $host = '' [, callable $watcher_cb = NULL [, int $recv_timeout = 10000]]]):public
(string $path, string $value, array $acls [, int $flags = NULL]):public string
(string $path [, int $version = -1]):public bool
(string $path [, callable $watcher_cb = NULL]):public bool
(string $path [, callable $watcher_cb = NULL [, array &$stat = NULL [, int $max_size = 0]]]):public string
(string $path):public array
(string $path [, callable $watcher_cb = NULL]):public array
(void):public int
(void):public ZookeeperConfig
(void):public int
(void):public int
(void):public bool
(string $path, string $value [, int $version = -1 [, array &$stat = NULL]]):public bool
(string $path, int $version, array $acl):public bool
(int $logLevel):public static bool
(bool $yesOrNo):public static bool
(resource $stream):public bool
(callable $watcher_cb):public bool









